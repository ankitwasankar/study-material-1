<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2//EN">
<!--last modified on Tue, Apr 15, 1997 2:22 PM-->
<HTML>

<HEAD>
<!-- This document was created from RTF source by rtftohtml version 3.0.1 -->

	<META NAME="GENERATOR" Content="Symantec Visual Page 1.0">
	<META NAME="Author" Content="Steph Mineart">
	
	<title>ActiveX Programming with Visual C++ -- Chapter 16</TITLE>
</HEAD>
<MAP NAME="leftnav">
<AREA SHAPE=RECT COORDS="2,2,111,33" HREF="/reference/dir.programminglanguages.html">
<AREA SHAPE=RECT COORDS="3,35,111,63" HREF="/reference/dir.databases.html">
<AREA SHAPE=RECT COORDS="1,62,111,95" HREF="/reference/dir.security1.html">
<AREA SHAPE=RECT COORDS="0,94,111,125" HREF="/reference/dir.webservices.html">
<AREA SHAPE=RECT COORDS="1,127,111,156" HREF="/reference/dir.networkservices1.html">
<AREA SHAPE=RECT COORDS="2,157,111,185" HREF="/reference/dir.middleware.html">
<AREA SHAPE=RECT COORDS="2,185,111,217" HREF="/reference/dir.components.html">
<AREA SHAPE=RECT COORDS="2,218,111,248" HREF="/reference/dir.operatingsystems.html">
<AREA SHAPE=RECT COORDS="2,247,111,277" HREF="/reference/dir.userinterfaces.html">
<AREA SHAPE=RECT COORDS="2,278,111,307" HREF="/reference/dir.groupwareandcollaboration1.html">
<AREA SHAPE=RECT COORDS="2,307,111,339" HREF="/reference/dir.contentmanagement.html">
<AREA SHAPE=RECT COORDS="2,338,111,370" HREF="/reference/dir.funandgames1.html">
<AREA SHAPE=RECT COORDS="0,369,111,404" HREF="/reference/dir.hardware1.html">
</MAP>

<MAP NAME="othersites">
<AREA SHAPE=RECT COORDS="1,1,116,13" HREF="http://www.developer.com/">
<AREA SHAPE=RECT COORDS="1,13,116,26" HREF="http://www.earthwebdirect.com/">
<AREA SHAPE=RECT COORDS="1,26,116,39" HREF="http://www.htmlgoodies.com/">
<AREA SHAPE=RECT COORDS="1,39,116,53" HREF="http://www.javagoodies.com/">
<AREA SHAPE=RECT COORDS="1,53,116,65" HREF="http://www.jars.com/">
<AREA SHAPE=RECT COORDS="1,65,116,77" HREF="http://www.intranetjournal.com/">
<AREA SHAPE=RECT COORDS="1,77,116,92" HREF="http://www.itlibrary.com/">
<AREA SHAPE=RECT COORDS="1,92,116,105" HREF="http://www.javascripts.com/">
<AREA SHAPE=RECT COORDS="1,105,116,118" HREF="http://www.datamation.com/">
<AREA SHAPE=RECT COORDS="0,118,116,130" HREF="http://www.gamelan.com/">
<AREA SHAPE=RECT COORDS="0,130,116,142" HREF="http://www.roadcoders.com/">
<AREA SHAPE=RECT COORDS="0,142,116,156" HREF="http://www.itknowledge.com/">
<AREA SHAPE=RECT COORDS="0,155,116,167" HREF="http://www.y2kinfo.com/">
</MAP>

<BODY BACKGROUND="/images/curve_itlibrary_white.gif" BGCOLOR="#FFFFFF" TEXT="#000000" LINK="#DD0000" VLINK="#999999" ALINK="#FF0000">

<!--Begin Header Table -->

<TABLE width="640" cellpadding="0" cellspacing="0" border="0">
<TR>
<TD VALIGN="TOP" WIDTH="640" COLSPAN="3">
<A HREF="http://www.earthweb.com" target="resource window"><IMG SRC="/images/eweb_banner.gif" VSPACE="6" WIDTH="640" HEIGHT="25" ALT="Brought to you by EarthWeb" border="0"><BR></a>
</TD>
</TR>
<TR>
<TD VALIGN="TOP" WIDTH="150">

<A HREF="/"><IMG SRC="/images/small_logo.gif" WIDTH=103 HEIGHT=82 ALT="IT Library Logo" border="0"></a>
<P>
<!--Begin Subscribe Box Table -->
<TABLE border="0" cellpadding="0" cellspacing="0" WIDTH="100">
<TR>
<TD>

</TD>
</TR>
</TABLE>
<!--End Subscribe Box Table -->


</td>
<TD>
<img src="/images/dotclear.gif" WIDTH="15" HEIGHT="1">
</TD>
<TD>

<!--  Begin Ads ITLBAN //-->

<SCRIPT LANGUAGE="JavaScript">
<!-- Hide from old browsers

now = new Date();
random = now.getTime();

// Modify to reflect site specifics
site = "http://diradserver.developer.com";
target = "/AREA=ITLBAN";
//target = "/AREA=ITLBAN"; //Testing
browser = browserCheck();

if(browser == "NAV") {
 document.write(layerCode());
} else if (browser == "IE") {
 document.write(frameCode());
} else if (browser == "OTHER") {
 document.write(htmlCode());
}

//returns string - browser ID -- either NAV . IE . OTHER
function browserCheck() {
 var out = "";
 if (navigator.appName.indexOf('Netscape') != -1) {     //browser is netscape
  //checking version numbers
  if(navigator.appVersion.substring(0,4) >= "4.02") {
   out = "OTHER";
  } else {
   out = "OTHER";
  }
 } else if (navigator.appName.indexOf('Microsoft') != -1) {    //browser is Explorer
  out = "OTHER";
 } else {
  out = "OTHER";
 }
 return out;
}

//returns a string - layer code for nav 4.05
function layerCode() {
 var out = '<ILAYER SRC="' + site + '/hserver' + target + '?' + random + '"';
 out = out + ' VISIBILITY=show WIDTH=500 HEIGHT=60 BGCOLOR="#ffffff"></ILAYER>';
 return out;
}

//returns a string - frame code for ie 4.05
function frameCode() {
 var out = '<IFRAME SRC="' + site + '/hserver' + target + '?' + random + '"';
 out = out + ' NORESIZE SCROLLING=NO HSPACE=0 VSPACE=0 FRAMEBORDER=0 MARGINHEIGHT=0 MARGINWIDTH=0 WIDTH=500 HEIGHT=60></IFRAME>';
 return out;
}

//returns a string - html code for non capable browsers
function htmlCode() {
 var out = '<A target="new win" HREF="' + site + '/accipiter/adclick.exe' + target + '?' + random + '">';
 out = out + '<IMG SRC="' + site + '/accipiter/adserver.exe' + target + '?' + random + '"><BR><CENTER><FONT SIZE="-2">Click here to visit our sponsor</FONT></CENTER></A>';
 return out;
}

// End Hide -->
</SCRIPT>
<NOSCRIPT>
<A target="new win"  HREF="http://diradserver.developer.com/accipiter/adclick.exe/AREA=ITLBAN">
<IMG SRC="http://diradserver.developer.com/accipiter/adserver.exe/AREA=ITLBAN" WIDTH=500 HEIGHT=60><BR>
<CENTER><FONT SIZE="-2">Click here to visit our sponsor</FONT></CENTER></A>
</NOSCRIPT>

<!-- ITLBAN End Ads //-->


</td>
</TR>
</TABLE>

<!--End Header Table -->

<!--Begin Main Table -->

<TABLE width="640" cellpadding="0" cellspacing="0" border="0">
<TR>

<!--Begin Left Navigation column -->

<TD VALIGN="TOP" WIDTH="140">
<FORM action="/subscribe/list.cgi" method="post">

<INPUT name='email' value='your e-mail' size="11"><INPUT type='hidden'  name='state' value='Subscribe'><br><INPUT type='image' value='subscribe' img src='/images/subscribe.gif' border='0' vspace='3' ></center>

</form>

<IMG SRC="/images/leftnav.gif" WIDTH=111 HEIGHT=404 ALT="nav" border="0"  ISMAP USEMAP="#leftnav">
<p>
<a href="http://www.earthwebdirect.com/"><IMG SRC="/images/earthwebdirect.gif" WIDTH=126 HEIGHT=30 ALT="EarthWeb Direct" border="0"></a>
<P>
<font color="ffffff" face="arial, helvetica" size="2">EarthWeb sites:</FONT>
<IMG SRC="/images/sitelisting.gif" WIDTH="102" HEIGHT="167" ALT="other sites" border="0" USEMAP="#othersites" ismap>
</td>

<!--End Left Navigation column -->
<!-- spacer column  -->

<TD width="40">
<img src="/images/dotclear.gif" WIDTH="40" HEIGHT="1" border=0>
</TD>

<!--Begin Content Column -->

<TD VALIGN="TOP" width="500">

<P>



<BODY TEXT="#000000" BGCOLOR="#FFFFFF">

<H1>Chapter 16<BR>
Advanced Topics</H1>

<UL>
	<LI><A HREF="#Heading1">Advanced Topics</A>
	<UL>
		<LI><A HREF="#Heading2">Internet</A>
		<UL>
			<LI><A HREF="#Heading3">Internet Security</A>
			<LI><A HREF="#Heading4">Signing Software</A>
			<LI><A HREF="#Heading5">Internet Scripting</A>
			<LI><A HREF="#Heading6">Listing 16.1 JSVBSSAMP.HTM--Example of VBScript and JavaScript
			Using the &lt;SCRIPT&gt; Tag</A>
			<LI><A HREF="#Heading7">Listing 16.2 AREFSAMP.HTM--Example of JavaScript Using the
			&lt;A&gt; Tag</A>
			<LI><A HREF="#Heading8">Internet Component Download</A>
			<LI><A HREF="#Heading9">Listing 16.3 SAMPLEIE.HTM--Using an ActiveX Control in HTML
			Code</A>
			<LI><A HREF="#Heading10">Electronic Commerce</A>
		</UL>
		<LI><A HREF="#Heading11">Advanced COM</A>
		<UL>
			<LI><A HREF="#Heading12">Using C++ vtables to Describe Interfaces</A>
			<LI><A HREF="#Heading13">Listing 16.4 MSDEV\INCLUDE\UNKNWN.H--The Definition of the
			IUnknown Interface in C Is a Structure that Contains a Pointer to a Structure that
			Contains Pointers to Functions</A>
			<LI><A HREF="#Heading14">Listing 16.5 MSDEV\INCLUDE\UNKNWN.H--The Definition of an
			Interface in C++ Makes Use of C++ vtables</A>
			<LI><A HREF="#Heading15">Listing 16.6 INUMBER.H--The INumber Interface</A>
			<LI><A HREF="#Heading16">Listing 16.7 UMBER.H--The CNumber Class</A>
			<LI><A HREF="#Heading17">Listing 16.8 UMBER.CPP--CNumber::QueryInterface</A>
			<LI><A HREF="#Heading18">Listing 16.9 UMBER1.H--The CNumber1 Class: Multiple vtables</A>
			<LI><A HREF="#Heading19">Listing 16.10 UMBER1.CPP--CNumber1::QueryInterface</A>
			<LI><A HREF="#Heading20">Listing 16.11 MBER1.CPP--CNumber1::ImpINumber::QueryInterface</A>
			<LI><A HREF="#Heading21">Reusing ActiveX Objects with Aggregation</A>
			<LI><A HREF="#Heading22">Listing 16.12 UMBER2.H--CNumber2</A>
			<LI><A HREF="#Heading23">Listing 16.13 MBER2.CPP--CNumber2::CNumber2(LPUNKNOWN)</A>
			<LI><A HREF="#Heading24">Listing 16.14 BER2.CPP--CNumber2::ImpINumber::QueryInterface(),
			AddRef(), and Release() Are Delegated to pThis-&gt;m_pUnkOuter, Instead of pThis</A>
			<LI><A HREF="#Heading25">Listing 16.15 INUMBER.H--The IWholeNumber Interface</A>
			<LI><A HREF="#Heading26">Listing 16.16 UMBER3.H--CNumber3 Adds Init() and m_pUnkNumber</A>
			<LI><A HREF="#Heading27">Listing 16.17 UMFACT.CPP--CNumber3ClassFactory::CreateInstance
			Calls CNumber3::Init after Constructing the CNumber3 Object</A>
			<LI><A HREF="#Heading28">Listing 16.18 UMBER3.CPP--CNumber3::Init Creates the Aggregated
			Object</A>
			<LI><A HREF="#Heading29">Listing 16.19 UMBER3.CPP--CNumber3::QueryInterface</A>
			<LI><A HREF="#Heading30">Listing 16.20 Example Declaration of a Tear-Off Class</A>
			<LI><A HREF="#Heading31">Enumerators: An Interface Pattern for Sets</A>
			<LI><A HREF="#Heading32">Listing 16.21 Enumerator Pattern</A>
			<LI><A HREF="#Heading33">Listing 16.22 UMBERS.H--The CNumbers Enumerator Class</A>
			<LI><A HREF="#Heading34">Listing 16.23 UMBERS.CPP--Next</A>
			<LI><A HREF="#Heading35">Listing 16.24 UMBERS.CPP--Clone</A>
			<LI><A HREF="#Heading36">About the Samples</A>
		</UL>
		<LI><A HREF="#Heading37">Distributed Component Object Model (DCOM)</A>
		<LI><A HREF="#Heading38">OLE DB</A>
		<LI><A HREF="#Heading39">Threading</A>
		<UL>
			<LI><A HREF="#Heading40">Single-Threading and Multithreading</A>
		</UL>
		<LI><A HREF="#Heading41">Engineering for the Future</A>
		<LI><A HREF="#Heading42">From Here...</A>
	</UL>
</UL>

<P>
<HR SIZE="4">

<H1><A NAME="Heading1"></A>Advanced Topics</H1>

<UL>
	<LI><B>Internet security</B> 
<SPACER TYPE="VERTICAL" SIZE="2">
 Industry is taking steps to ensure safety and security for all users on the Internet
	for business and nonbusiness purposes. Advances in security are making the Internet
	an even more popular place for companies to do business. You can apply code signing
	to your ActiveX control to benefit you and your users.
	<P>
	<LI><B>Internet component download</B> 
<SPACER TYPE="VERTICAL" SIZE="2">
 Downloading and installing ActiveX controls on the client machine is important to
	ActiveX Internet technology.
	<P>
	<LI><B>Advanced COM</B> 
<SPACER TYPE="VERTICAL" SIZE="2">
 The majority of this book focuses on the basic aspects of COM. Aggregation is an
	example of an Advanced COM feature that you can implement within your applications.
	<P>
	<LI><B>DCOM and OLE DB</B> 
<SPACER TYPE="VERTICAL" SIZE="2">
 DCOM allows ActiveX components to run on different machines connected via a network.
	OLE DB is a set of APIs that provides COM-type access to many types of data.
	<P>
	<LI><B>Threading</B> 
<SPACER TYPE="VERTICAL" SIZE="2">
 Threading is a means of executing code concurrently within the same application.
</UL>

<P>This chapter introduces some of the advanced topics that could not be directly
addressed in the other chapters of this book. The topics covered here are important
to ActiveX development, and you should be aware of their impact and significance
in regards to your specific development. The topics are not covered in great detail;
in some cases, the technology is just emerging and still being developed. For example,
Internet security, OLE DB, and other technologies, such as threading and DCOM, are
too complex to address within the context of this book.</P>
<P>The intent of this chapter is to introduce you to the main concepts and reasons
behind a particular technology and allow you the choice of pursuing the technology
if it applies to you. You will learn about the Internet and how it applies to your
ActiveX control development. You will also learn how DCOM, threading, and OLE DB
apply to ActiveX.</P>
<P>The last section looks at what is coming out of Microsoft to better equip you
with the proper tools and technologies that make ActiveX what it is today and what
it will be in the future.
<H2><A NAME="Heading2"></A>Internet</H2>
<P>As was mentioned in <A HREF="ch01.htm">Chapter 1</A>, the term ActiveX originally
meant Activate the Internet. Microsoft has now expanded the term to include all COM/OLE
components and development. The Internet has been around for many years, but didn't
start to explode in popularity until recently. This explosion has expanded the use
of the Internet as more and more companies are slowly figuring out how to use this
medium safely and effectively.
<H3><A NAME="Heading3"></A>Internet Security</H3>
<P>Internet security is still in its infancy. Security is one of the major reasons
companies are slow to embrace the Internet. The two major security issues that still
exist are secure transmissions and ActiveX controls. Because the Internet is not
a direct connection from computer to computer, hackers can tamper with or steal information
during transmission fairly easily. ActiveX controls, for the most part, are downloaded
to the user's machine and then installed. This situation makes it easy for someone
to spread a virus via an ActiveX control in a Web page. Although Netscape led the
way with its secure servers, Microsoft is quickly catching up and is working on solving
these and other security issues.</P>
<P>One technology that Microsoft, Netscape, and other companies are developing is
secure channel technology. <I>Secure channel technology </I>provides secure transmissions
through the Secure Sockets Layer (SSL) and Private Communications Technology (PCT).
SSL, created by Netscape, provides users with authentication of the server they are
attaching to, encryption of the data sent and received, and integrity of the data
being sent and received. PCT, created by Microsoft, provides protection against eavesdropping
on a network or altering a network packet.</P>
<P>Microsoft and other vendors are developing a new standard that uses digital signatures
to identify the publisher of an object downloaded from the Internet and to certify
that it has not been tampered with. Microsoft has started implementing this in the
Microsoft Internet Explorer and the Microsoft ActiveX SDK. Microsoft Internet Explorer
has three safety levels: high, medium, and low. High will not download anything that
is not signed, medium asks users if they want to download an unsigned item, and low
downloads items whether they are signed or unsigned. Microsoft Internet Explorer
defaults to the high safety level. The Microsoft ActiveX SDK includes the Authenticode
utilities for signing an ActiveX control. You find out more about signing an ActiveX
control later in this chapter.</P>
<P>On the other side, Microsoft is working on something called Client Identification,
which provides a way for users to identify themselves to a Web server using a digital
certificate. These server and client digital certificates have to be obtained from
a Certificate Authority (CA) company, which are signed with the company's official
key.</P>
<P>Encryption is another technology that vendors are pursuing. Basically, data and
messages are scrambled and cannot be unscrambled except by someone who has a specific
key. Microsoft has produced a set of encryption APIs, called the CryptoAPI, which
it includes in its Win32 SDK.</P>
<P>Other companies, along with Microsoft, are also trying to set standards for security.
One such standard recently developed is the Secure Electronic Transactions (SET)
standard. SET, a standard for securing a payment transaction over the Internet, was
developed by Microsoft, Netscape, Visa, MasterCard, IBM, and GTE. Microsoft is currently
trying to develop another standard called the Secure Transport Layer Protocol (STLP),
which Microsoft hopes will be a combination of the Netscape SSL technology and the
Microsoft PCT technology. Microsoft is also trying to develop its Personal Information
Exchange (PFX) standard, which is a standard for transferring personal security information
from one machine to another. Currently, security information such as certificates
and keys must be set up separately on each machine.</P>
<P>More information can be obtained from Microsoft's Web site (<A HREF="http://www.microsoft.com"><B>http://www.microsoft.com</B></A>)
or Netscape's Web site (<A HREF="http://home.netscape.com"><B>http://home.netscape.com</B></A>).
At the time of publication, Microsoft's security specific information was found at
<A HREF="http://www.microsoft.com/intdev/security/"><B>http://www.microsoft.com/intdev/security/</B></A>.
Netscape's security information is scattered throughout its site. Use Microsoft's
Search and Contents page to locate security information. These sites should be watched
closely for information on this ever-changing technology.
<H3><A NAME="Heading4"></A>Signing Software</H3>
<P>As mentioned earlier, Microsoft and other vendors are developing a new standard
that uses digital signatures to identify the publisher of an object downloaded from
the Internet and to ensure that the object has not been tampered with. This process
is referred to as code signing. This digital signature contains specific information
about the company and is signed by a trusted certificate authority. The information
is thoroughly checked before being signed. If a piece of code or data wreaks havoc
with your system, you can trace it back to an individual or company with the information
contained in the signature.</P>
<P>The use of digital signatures allows users to have the same comfort level they
have when they purchase software in a box. If you purchase a software package from
a retail outlet and it causes problems, you know who manufactured the software and
can hold them accountable. Digital signatures allows for the same level of accountability
with software that is downloaded from the Internet. Companies that digitally sign
their products have the added benefit of providing to their users a commitment to
quality and security, which in turn translates into consumer trust of the companies'
products.</P>
<P>Code signing requires the following steps:

<OL>
	<LI>A Software publisher applies for credentials from a Certificate Authority (CA).
	<P>
	<LI>The application basically consists of the software company's personal information
	and its public and private encryption keys.
	<P>
	<LI>After the application is completed, the CA will verify the publisher's information
	in approximately one week.
	<P>
	<LI>After the information is verified, the CA will create an X.509 industry standard
	certificate that includes the publisher's public key.
	<P>
	<LI>The private key is held by the software publisher and kept secret. A copy of
	the certificate is sent to the publisher. The publisher will include this certificate
	in any code that it signs with the private key.
	<P>
	<LI>The publisher uses the Authenticode utilities to create a digital signature with
	its private key.
	<P>
	<LI>A PKCS#7 signature file is created containing the code to be published, the X.509
	certificate received from the CA, and the publisher's digital signature.
</OL>

<P>Microsoft is trying to develop standards for the preceding process. For more information
on Microsoft's effort to develop the standards and more detailed information on code
signing, check out the help files on signing in the ActiveX SDK and Microsoft's Internet
security page mentioned before.
<H3><A NAME="Heading5"></A>Internet Scripting</H3>
<P>When creating Web pages, a developer needs a way to create online content and
link and automate various objects, such as Java applets or ActiveX controls. These
objectives are accomplished with scripting. <I>Scripting</I> is an interpretive programming
language used with HTML.</P>
<P>Two scripting languages exist today: Microsoft Visual Basic Scripting Edition
(VBScript) and Netscape JavaScript. VBScript imitates Visual Basic (VB), and JavaScript
imitates the Java language, as the names imply. Both Netscape Navigator and the Microsoft
Internet Explorer read JavaScript, but Netscape Navigator will not read VBScript
unless the ScriptActive plug-in from NCompass Labs is used to convert the VBScript
to JavaScript. Unfortunately, ScriptActive does not support all parts of VBScript,
such as forms, write, and writeln. To find out what is and is not supported, view
the NCompass &quot;Authoring ActiveX Controls for the NCompass Plug-ins&quot; document
at <A HREF="http://www.ncompasslabs.com/documents/authoring.htm"><B>http://www.ncompasslabs.com/documents/authoring.htm</B></A>.
Because this is only version 1.0 of the ScriptActive plug-in, more VBScript features
should be available in the future. If your users use both Microsoft Internet Explorer
and Netscape Navigator, you are better off using JavaScript. You can use a combination
of both, if needed.</P>
<P>Scripting languages are a subset of the languages they mimic; they do not include
all of the functionality available in the language. In general, scripting languages
have no way to access the system or data directly, which prevents the creation of
viruses. Scripting languages can, however, use other technologies to access data,
such as the Microsoft dbWeb and the Netscape LiveWire Pro. Visit the Netscape Web
site to view tutorials and language references for JavaScript, and the Microsoft
site for information on VBScript.</P>
<P>Scripting languages are interpretive, not compiled, so users need a scripting
engine to run scripts. Navigator does not include an engine for VBScript; therefore,
Navigator cannot be used with VBScript, as mentioned before. Both scripting engines
are included with Microsoft Internet Explorer. Both engines can be licensed from
their respective companies for free for use in applications. Be careful not to include
any sensitive data or code in the scripts. Because the scripts are not compiled,
all browsers have the capability to view the HTML document source, including the
scripting.</P>
<P>To include a script in a HTML document, use the <TT>&lt;SCRIPT&gt;</TT> tag. The
<TT>&lt;SCRIPT&gt;</TT> tag consists of the <TT>LANGUAGE</TT>, <TT>SRC</TT>, and
<TT>TYPE</TT> attributes. The <TT>LANGUAGE</TT> attribute states whether the script
is a VBScript or JavaScript script, <TT>SRC</TT> specifies the external file that
contains the scripts not directly in the HTML, and <TT>TYPE</TT> is the file type
for the external file. Listing 16.1 shows an example of VBScript and JavaScript.
The easiest way to add a script that is contained within the <TT>&lt;Script&gt;</TT>
tags is with the ActiveX Control Pad. In JavaScript only, you can also use the <TT>&lt;A&gt;</TT>
tag with a custom URL type, allowing a script to be executed when the user clicks
a hyperlink (see Listing 16.2).
<H3><A NAME="Heading6"></A>Listing 16.1 <SPACER TYPE="HORIZONTAL" SIZE="10">JSVBSSAMP.HTM--Example
of VBScript and JavaScript Using the &lt;SCRIPT&gt; Tag</H3>
<P><FONT COLOR="#0066FF"><TT>&lt;FORM NAME=&quot;SampleForm&quot;&gt;<BR>
&lt;INPUT TYPE=&quot;button&quot; NAME=&quot;VBSButton&quot; VALUE=&quot;VBScript&quot;
<BR>
onClick=&quot;VBSClick&quot; LANGUAGE=&quot;VBScript&quot;&gt;<BR>
&lt;INPUT TYPE=&quot;button&quot; NAME=&quot;JSButton&quot; VALUE=&quot;JavaScript&quot;
<BR>
onClick=&quot;JSClick()&quot; LANGUAGE=&quot;JavaScript&quot;&gt;<BR>
&lt;/FORM&gt;<BR>
&lt;!--VBScript example--&gt;<BR>
&lt;SCRIPT LANGUAGE=&quot;VBSCRIPT&quot;&gt;<BR>
sub VBSClick<BR>
document.SampleForm.VBSButton.value=&quot;Clicked&quot;<BR>
alert &quot;You clicked the VBScript button&quot;<BR>
document.SampleForm.VBSButton.value=&quot;VBScript&quot;<BR>
end sub <BR>
&lt;/SCRIPT&gt; <BR>
&lt;!--JavaScript example--&gt;<BR>
&lt;SCRIPT LANGUAGE=&quot;JavaScript&quot;&gt;<BR>
function JSClick()<BR>
{<BR>
document.SampleForm.JSButton.value=&quot;Clicked&quot;<BR>
alert(&quot;You clicked the JavaScript button.&quot;)<BR>
document.SampleForm.JSButton.value=&quot;JavaScript&quot;<BR>
} <BR>
&lt;/SCRIPT&gt;</TT></FONT></P>
<H3><A NAME="Heading7"></A>Listing 16.2 <SPACER TYPE="HORIZONTAL" SIZE="10">AREFSAMP.HTM--Example
of JavaScript Using the &lt;A&gt; Tag</H3>
<P><FONT COLOR="#0066FF"><TT>&lt;A HREF=&quot;javascript:alert(`This is a message')&quot;&gt;Click
here to view the message &lt;/A&gt;</TT></FONT></P>
<H3><A NAME="Heading8"></A>Internet Component Download</H3>
<P>An important piece of the ActiveX Internet technology is the capability to safely
download and install ActiveX controls and the needed support files on the client
machine. Microsoft Internet Explorer automatically downloads and installs ActiveX
controls used in HTML documents through a process called <I>Internet Component Download.
</I>A control is downloaded only if the control is not installed on the users' machines
or if the version used in the HTML is newer than the control on the users' machines.
For now, the control remains on the users' machines until they remove it.</P>
<P>Microsoft has plans to provide a mechanism, in future releases of Internet Explorer,
to delete unused controls from a user's machine.</P>
<P>Before an ActiveX control is installed, Internet Explorer checks for a digital
signature. As mentioned earlier in this chapter, Internet Explorer has three safety
levels: high, medium, and low. High will not install an unsigned control, medium
asks users if they want to download an unsigned control, and low downloads a control
signed or unsigned. Digital signatures were covered earlier in this chapter. Once
the control is downloaded and installed, an attempt is made to register the control
and its components.</P>
<P>For a control in an HTML page to automatically download, you need to use the <TT>CODEBASE</TT>
attribute of the <TT>&lt;OBJECT&gt;</TT> tag. An example of this is shown in the
HTML code listed in Listing 16.3.
<H3><A NAME="Heading9"></A>Listing 16.3 <SPACER TYPE="HORIZONTAL" SIZE="10">SAMPLEIE.HTM--Using
an ActiveX Control in HTML Code</H3>
<P><FONT COLOR="#0066FF"><TT>&lt;HTML&gt;<BR>
&lt;HEAD&gt;<BR>
&lt;TITLE&gt;Sample Page&lt;/TITLE&gt;<BR>
&lt;/HEAD&gt;<BR>
&lt;BODY&gt; <BR>
&lt;OBJECT <BR>
ID=&quot;MFCControlWin1&quot; <BR>
WIDTH=100 <BR>
HEIGHT=51<BR>
CLASSID=&quot;CLSID:A1198546-2E75-11D0-BD82-000000000000&quot;<BR>
CODEBASE=&quot;http://www.somesite.com/somedirectory/ <BR>
MFCControl.ocx#Version=1,0,0,1&quot;&gt;<BR>
&lt;PARAM NAME=&quot;Alignment&quot; VALUE=&quot;1&quot;&gt;<BR>
&lt;PARAM NAME=&quot;CaptionProp&quot; VALUE=&quot;Sample&quot;&gt;<BR>
&lt;/OBJECT&gt; <BR>
&lt;/BODY&gt; <BR>
&lt;/HTML&gt;</TT></FONT></P>
<P>The <TT>CODEBASE</TT> attribute tells Microsoft Internet Explorer what to download
and install. The <TT>CODEBASE</TT> attribute contains a reference to where the control
and its supporting files can be found for downloading. If the control needs supporting
files, the <TT>CODEBASE</TT> attribute points to a cabinet (CAB) file or an install
(INF) file. These files, like an ActiveX control, can contain a digital signature.</P>
<P>A <I>CAB file </I>is a file that contains a compressed version of the control
and any other files the control needs to install and run. It is downloaded and expanded,
and the control's components are installed. To create a CAB file, use the Diamond
utility provided with the Microsoft ActiveX SDK.</P>
<P>An <I>INF file </I>specifies the files that need to be downloaded and their URLs.
Each file is downloaded and then installed. The INF file can provide platform independence
by specifying different URLs for files that need to be downloaded for different platforms.</P>
<P>The <TT>CODEBASE</TT> attribute should contain a version number to allow Microsoft
Internet Explorer to check whether the version of the file on the Web server is newer
than the same file installed on the user's machine. To include a version number,
use the <TT>Version</TT> URL fragment as shown in Listing 16.3. The numbers after
the <TT>=</TT> represent the current version of the control, which can be found by
looking at the properties of the control. If a version number is not used, Microsoft
Internet Explorer will assume that the version of the file on the user's machine
is recent enough.</P>
<P>For more information on the Internet Component Download, see the Internet Component
Download section of the Microsoft ActiveX SDK documentation.
<H3><A NAME="Heading10"></A>Electronic Commerce</H3>
<P>Electronic commerce could be defined as doing business by using a computer. For
your purposes, it is more specifically defined as doing business over the Internet.
It could be shopping via one of the Internet malls, buying and selling personal computers
via a reseller's Web site, online banking, or just about anything. Some of the many
advantages of doing business on the Internet are that companies are able to reach
people 24 hours a day, seven days a week; it's easier to reach global customers;
the number of Internet users is growing rapidly; information reaches people faster
through the Internet than through conventional methods; and new products can be released
more quickly.</P>
<P>One of the big disadvantages has been security. Server security has been around
for a while, but a standard technology for the secure transfer of sensitive data
was missing until recently. The Secure Channel communication technology, which provides
privacy, integrity, and authentication for the transfer of data from client to server
and server to server, helps to solve this problem. As mentioned earlier in this chapter,
SSL handles the authentication of the server, encryption of the data sent and received,
and integrity of the data being sent and received. PCT provides protection against
eavesdropping on a network or altering a network packet.</P>
<P>Before this technology was developed, credit card information and other sensitive
information could not be entered online. If people wanted to buy something they saw
on a merchant's Web site, they had to call the merchant to place an order. However,
the current technology makes ordering possible from the Web site; shopping and ordering
are done in one place. Examples of this are Dell Computer (<A HREF="http://www.dell.com"><B>http://www.dell.com</B></A>)
and Gateway2000 (<A HREF="http://www.gateway2000.com"><B>http://www.gateway2000.com</B></A>).
Both Web sites allow users to configure their own system, do what-if price analysis,
and place the order including payment information.</P>
<P>Another protocol, which is in the final stages of development, will further secure
electronic transactions. This protocol, Secure Electronic Transactions (SET), is
designed to handle secure credit card payments over the Internet using digital certificates
and cryptography.</P>
<P>The Netscape Merchant System and the Microsoft Merchant Server are specialized
systems for developing Web merchandising sites. These systems provide many built-in
features to help companies create a complete shopping Web site. The features include,
but are not limited to, billing, transaction processing, product updating, product
searching, storefront creation, handling of secured payments, order processing, and
database access. These systems are marketed as a total merchandising Web server solution.</P>
<P>The use of the Internet for commercial and recreational purposes expands every
day. The need for reliable security is unprecedented. Fortunately, a lot of people
and companies are working hard to make the Internet a reality for all types of use.</P>
<P>The next sections examine some of the advanced features of ActiveX.
<H2><A NAME="Heading11"></A>Advanced COM</H2>
<P>In this section, we dig into the details of the Component Object Model (COM).
In the first two subsections, we deal with COM fundamentals. First we examine how
C++ vtables are used to implement COM interfaces. Second we show how an ActiveX Object
can aggregate another ActiveX Object to implement part of its functionality, and
we discuss ATL tools for aggregation and tear-off interfaces. Finally we look at
enumerators.
<H3><A NAME="Heading12"></A>Using C++ vtables to Describe Interfaces</H3>
<P>Roughly, a <I>COM interface </I>is a structure that contains a pointer to a structure
containing pointers to functions. Rather than read that over, have a look at the
C definition of <TT>IUnknown</TT> in Listing 16.4.
<H3><A NAME="Heading13"></A>Listing 16.4<SPACER TYPE="HORIZONTAL" SIZE="10"> MSDEV\INCLUDE\UNKNWN.H--The
Definition of the IUnknown Interface in C Is a Structure that Contains a Pointer
to a Structure that Contains Pointers to Functions</H3>
<P><FONT COLOR="#0066FF"><TT>typedef struct IUnknownVtbl<BR>
{<BR>
BEGIN_INTERFACE<BR>
HRESULT ( STDMETHODCALLTYPE __RPC_FAR *QueryInterface )( <BR>
IUnknown __RPC_FAR * This,<BR>
/* [in] */ REFIID riid,<BR>
/* [out] */ void __RPC_FAR *__RPC_FAR *ppvObject);<BR>
ULONG ( STDMETHODCALLTYPE __RPC_FAR *AddRef )( <BR>
IUnknown __RPC_FAR * This);<BR>
ULONG ( STDMETHODCALLTYPE __RPC_FAR *Release )( <BR>
IUnknown __RPC_FAR * This);<BR>
END_INTERFACE<BR>
} IUnknownVtbl; <BR>
interface IUnknown<BR>
{<BR>
CONST_VTBL struct IUnknownVtbl __RPC_FAR *lpVtbl; <BR>
};</TT></FONT></P>
<P><TT>IUnknownVtbl</TT> is the structure that contains pointers to functions. It's
identical to the table of virtual functions, or vtable, that C++ establishes for
a class's virtual functions. <TT>IUnknown</TT> is a structure that contains a pointer
to an <TT>IUnknownVtbl</TT> structure. So to simplify the definition, an <I>interface</I>
is a structure that contains a pointer to a vtable. Because COM defines an interface
this way, the definition of an interface in C++ is simpler than in C. Look at the
C++ definition of <TT>IUnknown</TT> in Listing 16.5
<H3><A NAME="Heading14"></A>Listing 16.5 <SPACER TYPE="HORIZONTAL" SIZE="10">MSDEV\INCLUDE\UNKNWN.H--The
Definition of an Interface in C++ Makes Use of C++ vtables</H3>
<P><FONT COLOR="#0066FF"><TT>interface IUnknown<BR>
{<BR>
public:<BR>
BEGIN_INTERFACE<BR>
virtual HRESULT STDMETHODCALLTYPE QueryInterface( <BR>
/* [in] */ REFIID riid,<BR>
/* [out] */ void __RPC_FAR *__RPC_FAR *ppvObject) = 0; <BR>
virtual ULONG STDMETHODCALLTYPE AddRef( void) = 0; <BR>
virtual ULONG STDMETHODCALLTYPE Release( void) = 0; <BR>
END_INTERFACE <BR>
};</TT></FONT></P>
<P>In C++, the interface is simply a structure (a class, really) that has virtual
functions, and the vtable is implicit in the language. With that in mind, now look
at various ways an ActiveX Object can implement multiple interfaces. <B><I><BR>
<BR>
CNumber</I>: A Simple Sample </B><SPACER TYPE="HORIZONTAL" SIZE="10">The first sample
is a COM Object that implements a simple custom interface. The custom interface is
<TT>INumber</TT>, shown in Listing 16.6. <TT>INumber</TT> defines a method to get
the value of the number and a method to set the value of the number. <TT>CNumber</TT>
is a COM Object that implements the <TT>INumber</TT> interface. The <TT>CNumber</TT>
class is shown in Listing 16.7.
<H3><A NAME="Heading15"></A>Listing 16.6 <SPACER TYPE="HORIZONTAL" SIZE="10">INUMBER.H--The
INumber Interface</H3>
<P><FONT COLOR="#0066FF"><TT>interface INumber : public IUnknown<BR>
{<BR>
public:<BR>
// ILrsInetUnlock methods<BR>
virtual HRESULT __stdcall GetNumber(<BR>
/* [out] */ double* pValue) = 0;<BR>
virtual HRESULT __stdcall SetNumber(<BR>
/* [in] */ double value) = 0; <BR>
};</TT></FONT></P>
<H3><A NAME="Heading16"></A>Listing 16.7<SPACER TYPE="HORIZONTAL" SIZE="10"> UMBER.H--The
CNumber Class</H3>
<P><FONT COLOR="#0066FF"><TT>class CNumber : INumber<BR>
{<BR>
public:<BR>
// IUnknown methods<BR>
HRESULT __stdcall QueryInterface(REFIID riid,<BR>
LPVOID* lpInterface);<BR>
ULONG __stdcall AddRef();<BR>
ULONG __stdcall Release(); <BR>
// ILrsInetUnlock methods<BR>
HRESULT __stdcall GetNumber(double* pValue);<BR>
HRESULT __stdcall SetNumber(double value); <BR>
// Constructors and destructor<BR>
CNumber();<BR>
//CNumber(LPUNKNOWN pUnkOuter);<BR>
~CNumber(); <BR>
private:<BR>
ULONG m_cRef;<BR>
double m_value; <BR>
};</TT></FONT></P>
<P><TT>CNumber</TT>'s vtable precisely matches the definition of the <TT>INumber</TT>
interface. Because <TT>INumber</TT> is derived from <TT>IUnknown</TT> (you should
never encounter an interface that isn't), the vtable for <TT>CNumber</TT> can be
used as the <TT>IUnknown</TT> interface as well. In Listing 16.8, you can see that
<TT>QueryInterface</TT> returns <TT>this</TT> whether the <TT>INumber</TT> or <TT>IUnknown</TT>
interface is requested (when <TT>riid</TT> is <TT>IID_IUnknown</TT>).
<H3><A NAME="Heading17"></A>Listing 16.8 <SPACER TYPE="HORIZONTAL" SIZE="10">UMBER.CPP--CNumber::QueryInterface</H3>
<P><FONT COLOR="#0066FF"><TT>HRESULT CNumber::QueryInterface(REFIID riid,<BR>
LPVOID* ppvInterface)<BR>
{<BR>
if(IsEqualIID(riid, IID_IUnknown) ||<BR>
IsEqualIID(riid, IID_INumber))<BR>
{<BR>
*ppvInterface = this;<BR>
AddRef();<BR>
return NOERROR;<BR>
}<BR>
else<BR>
{<BR>
return E_NOINTERFACE;<BR>
} <BR>
}</TT></FONT></P>
<P>In some cases, you'll need more than one vtable. For example, if you need to implement
multiple interfaces, such as <TT>INumber</TT> and <TT>IPersistStorage</TT>, you simply
can't define a vtable that satisfies both interfaces. Or if you're going to make
your object aggregatable, you need to have a separate vtable for the true <TT>IUnknown</TT>
interface. This is discussed in more detail in the section about Aggregation later
in this chapter. <BR>
<BR>
<B><I>CNumber1</I>: Separate vTables </B><SPACER TYPE="HORIZONTAL" SIZE="10">The
<TT>CNumber1</TT><B> </B>class is another COM Object that implements the <TT>INumber</TT>
interface (see Listing 16.9). The <TT>CNumber1</TT><B> </B>class complicates things
a little by implementing the <TT>INumber</TT> interface using the vtable of an embedded
class.
<H3><A NAME="Heading18"></A>Listing 16.9<SPACER TYPE="HORIZONTAL" SIZE="10"> UMBER1.H--The
CNumber1 Class: Multiple vtables</H3>
<P><FONT COLOR="#0066FF"><TT>class CNumber1 : IUnknown<BR>
{<BR>
public:<BR>
// IUnknown methods<BR>
HRESULT __stdcall QueryInterface(REFIID riid,<BR>
LPVOID* lpInterface);<BR>
ULONG __stdcall AddRef();<BR>
ULONG __stdcall Release(); <BR>
class ImpINumber : INumber<BR>
{<BR>
// IUnknown methods<BR>
HRESULT __stdcall QueryInterface(REFIID riid,<BR>
LPVOID* lpInterface);<BR>
ULONG __stdcall AddRef();<BR>
ULONG __stdcall Release(); <BR>
// ILrsInetUnlock methods<BR>
HRESULT __stdcall GetNumber(double* pValue);<BR>
HRESULT __stdcall SetNumber(double value); <BR>
// A macro to gain access to the CNumber1 &quot;this&quot;<BR>
// pointer from within the embedded class<BR>
#define GET_CNUMBER1(pThis) \<BR>
CNumber1* pThis = \<BR>
((CNumber1*)((BYTE*)this - \<BR>
offsetof(CNumber1, m_impINumber)));<BR>
} m_impINumber;<BR>
friend class ImpINumber; <BR>
// Constructors and destructor<BR>
CNumber1();<BR>
~CNumber1(); <BR>
private:<BR>
ULONG m_cRef;<BR>
double m_value; <BR>
};</TT></FONT></P>
<P>Here the <TT>ImpINumber</TT> class is defined within the <TT>CNumber1</TT> class,
and the instance <TT>m_impINumber</TT> is declared as a member of the <TT>CNumber1</TT>
class. The vtable of <TT>CNumber1</TT> matches the <TT>IUnknown</TT> interface, and
the vtable of <TT>ImpINumber</TT> matches the <TT>INumber</TT> interface. <TT>CNumber1</TT>'s
<TT>QueryInterface</TT> returns <TT>this</TT> when <TT>IUnknown</TT> is requested
and the address of <TT>m_impINumber</TT> when <TT>INumber</TT> is requested. Listing
16.10 shows the implementation of <TT>CNumber1::QueryInterface</TT>.
<H3><A NAME="Heading19"></A>Listing 16.10 <SPACER TYPE="HORIZONTAL" SIZE="10">UMBER1.CPP--CNumber1::QueryInterface</H3>
<P><FONT COLOR="#0066FF"><TT>HRESULT CNumber1::QueryInterface(REFIID riid,<BR>
LPVOID* ppvInterface)<BR>
{<BR>
if(IsEqualIID(riid, IID_IUnknown))<BR>
{<BR>
*ppvInterface = this;<BR>
AddRef();<BR>
return NOERROR;<BR>
}<BR>
else if(IsEqualIID(riid, IID_INumber))<BR>
{<BR>
*ppvInterface = &amp;m_impINumber;<BR>
AddRef();<BR>
return NOERROR;<BR>
}<BR>
else<BR>
{<BR>
return E_NOINTERFACE;<BR>
} <BR>
}</TT></FONT></P>
<P>One complicating factor is that the class <TT>ImpINumber</TT> doesn't have immediate
access to the members of <TT>CNumber1</TT>. In Listing 16.9, you see that <TT>ImpINumber</TT>
is declared as a friend of <TT>CNumber1</TT>. The friend declaration gives <TT>ImpINumber</TT>
access to <TT>CNumber1</TT>'s members, but <TT>ImpINumber</TT> still doesn't have
a pointer to <TT>CNumber1</TT>'s members. Within the <TT>ImpINumber</TT> class, you
declared the macro <TT>GET_CNUMBER1</TT> that calculates the address of <TT>CNumber1</TT>
based on the address of the embedded class<TT> ImpINumber</TT>. Using <TT>GET_CNUMBER1</TT>,
you can get a pointer to the <TT>CNumber1</TT> object from within the methods of
the <TT>ImpINumber</TT> class. This macro applies the technique used by MFC's <TT>METHOD_PROLOGUE</TT>
set of macros. <BR>
<BR>
<IMG SRC="bar.gif" WIDTH="480" HEIGHT="6" ALIGN="BOTTOM" BORDER="0"></P>


<BLOCKQUOTE>
	<P><B>The <I>GET_CNUMBER1</I> Macro</B><BR>
	The <TT>GET_CNUMBER1</TT> macro is used by the <TT>ImpINumber</TT> class, which is
	embedded in the <TT>CNumber1</TT> class, to gain access to the <TT>CNumber1</TT>
	class's members. <TT>GET_CNUMBER1</TT> subtracts the offset of the <TT>ImpINumber</TT>
	class within the <TT>CNumber1</TT> class from the address of the <TT>ImpINumber</TT>
	object (<TT>this</TT>) to determine the address of the <TT>CNumber1</TT> object.

</BLOCKQUOTE>

<P><IMG SRC="bar.gif" WIDTH="480" HEIGHT="6" ALIGN="BOTTOM" BORDER="0"><BR>
<BR>
Another complicating factor of this implementation is that <TT>INumber</TT> is derived
from <TT>IUnknown</TT>, so <TT>INumber</TT> includes <TT>QueryInterface</TT>, <TT>AddRef</TT>,
and <TT>Release</TT> methods. The embedded <TT>ImpINumber</TT> class must implement
these methods. It does so by calling <TT>CNumber1</TT>'s corresponding methods. Listing
16.11 shows <TT>ImpINumber</TT>'s implementation of <TT>QueryInterface</TT>.
<H3><A NAME="Heading20"></A>Listing 16.11 <SPACER TYPE="HORIZONTAL" SIZE="10">UMBER1.CPP--CNumber1::ImpINumber::QueryInterface</H3>
<P><FONT COLOR="#0066FF"><TT>HRESULT CNumber1::ImpINumber::QueryInterface(REFIID
riid,<BR>
LPVOID* ppvInterface)<BR>
{<BR>
GET_CNUMBER1(pThis);<BR>
return pThis-&gt;QueryInterface(riid, ppvInterface); <BR>
}</TT></FONT></P>
<P>Now that you've established how C++ vtables can be used to implement interfaces
in different ways, take a look at how vtables are used in aggregation.
<H3><A NAME="Heading21"></A>Reusing ActiveX Objects with Aggregation</H3>
<P>COM Objects don't use inheritance to reuse the implementations of existing objects.
<I>Aggregation</I> is used instead of inheritance. In aggregation, one object creates
another object and reuses its interface implementations. Where traditional inheritance
has a base class and a subclass, aggregation has an aggregated object and outer object.
The outer and aggregated objects are presented to the rest of the system as if they
were a single object.</P>
<P>In this sample, you create <TT>CNumber2</TT>, which is an aggregatable implementation
of <TT>INumber</TT>. Then you create <TT>CNumber3</TT>. <TT>CNumber3</TT> will implement
the <TT>IWholeNumber</TT> interface and aggregate a <TT>CNumber2</TT> object. The
aggregated <TT>CNumber2</TT> object will provide the implementation of the <TT>INumber</TT>
interface for the <TT>CNumber3</TT> object (see fig. 16.1). <B><I><BR>
<BR>
</I></B><A HREF="art/16/q_fig01n.jpg"><B>FIG. 16.1</B></A> <I><TT><BR>
CNumber3</TT> aggregates <TT>CNumber2</TT> to reuse its implementation of the <TT>INumber</TT>
interface.<B><BR>
<BR>
CNumber2</B></I><B>: An Aggregatable Object </B><SPACER TYPE="HORIZONTAL" SIZE="10">An
object is aggregatable if it follows some rules in its implementations of the <TT>IUnknown</TT>
interface.

<UL>
	<LI>The aggregatable object must handle the <TT>punkOuter</TT> argument of the class
	factory's <TT>CreateInstance</TT> function. The <TT>punkOuter</TT> argument is the
	pointer to the <TT>IUnknown</TT> interface of the outer object.
	<P>
	<LI>The aggregatable object must delegate <TT>QueryInterface</TT> calls to the outer
	object.
	<P>
	<LI>The exception to the preceding rule is that the <TT>QueryInterface</TT> method
	of the aggregatable object's <I>true</I> <TT>IUnknown</TT> interface does not delegate
	to the outer object.
</UL>

<P><IMG SRC="bar.gif" WIDTH="480" HEIGHT="6" ALIGN="BOTTOM" BORDER="0"></P>


<BLOCKQUOTE>
	<P><B>The True <I>IUnknown</I> Interface</B><BR>
	Every COM Object has an <TT>IUnknown</TT> interface implementation. When you use
	aggregation, you create a complex COM Object. This complex object presents only one
	<TT>IUnknown</TT> interface to the rest of the system. The aggregated object's <TT>IUnknown</TT>
	is hidden, known only to the outer object. The hidden <TT>IUnknown</TT> of the aggregated
	object is known as its <I>true</I> <TT>IUnknown</TT> interface.

</BLOCKQUOTE>

<P><IMG SRC="bar.gif" WIDTH="480" HEIGHT="6" ALIGN="BOTTOM" BORDER="0"></P>


<BLOCKQUOTE>
	<P><B>NOTE:</B> In a typical implementation of an aggregatable object, the <TT>AddRef</TT>
	and <TT>Release</TT> methods of interfaces other than the true <TT>IUNKNOWN</TT>
	are delegated to the outer object, but alternative reference counting schemes are
	possible.

</BLOCKQUOTE>

<P><IMG SRC="bar.gif" WIDTH="480" HEIGHT="6" ALIGN="BOTTOM" BORDER="0"><BR>
<BR>
In order to meet these requirements, the aggregatable object must have a separate
vtable for its true <TT>IUnknown</TT> interface. <TT>CNumber1</TT> already has separate
vtables for <TT>IUnknown</TT> and <TT>INumber</TT>, so start building <TT>CNumber2</TT>
by modifying <TT>CNumber1</TT>. Provide a constructor that takes the outer object's
<TT>IUnknown</TT> interface (see Listing 16.12 and Listing 16.13), add a member variable
to store that <TT>IUnknown</TT> interface (see Listing 16.12), and use that member
variable to delegate <TT>QueryInterface</TT>, <TT>AddRef</TT>, and <TT>Release</TT>
calls to the outer object (see Listing 16.14).
<H3><A NAME="Heading22"></A>Listing 16.12<SPACER TYPE="HORIZONTAL" SIZE="10"> UMBER2.H--CNumber2</H3>
<P><FONT COLOR="#0066FF"><TT>class CNumber2 : IUnknown<BR>
{<BR>
public:<BR>
// IUnknown methods<BR>
HRESULT __stdcall QueryInterface(REFIID riid,<BR>
LPVOID* lpInterface);<BR>
ULONG __stdcall AddRef();<BR>
ULONG __stdcall Release(); <BR>
class ImpINumber : INumber<BR>
{<BR>
// IUnknown methods<BR>
HRESULT __stdcall QueryInterface(REFIID riid,<BR>
LPVOID* lpInterface);<BR>
ULONG __stdcall AddRef();<BR>
ULONG __stdcall Release(); <BR>
// ILrsInetUnlock methods<BR>
HRESULT __stdcall GetNumber(double* pValue);<BR>
HRESULT __stdcall SetNumber(double value); <BR>
// A macro to gain access to the CNumber2 &quot;this&quot;<BR>
// pointer from within the embedded class<BR>
#define GET_CNUMBER2(pThis) \<BR>
CNumber2* pThis = \<BR>
((CNumber2*)((BYTE*)this - \<BR>
offsetof(CNumber2, m_impINumber)));<BR>
} m_impINumber;<BR>
friend class ImpINumber; <BR>
// Constructors and destructor<BR>
CNumber2();<BR>
CNumber2(LPUNKNOWN);<BR>
~CNumber2(); <BR>
private:<BR>
ULONG m_cRef;<BR>
double m_value;<BR>
LPUNKNOWN m_pUnkOuter; <BR>
};</TT></FONT></P>
<H3><A NAME="Heading23"></A>Listing 16.13 <SPACER TYPE="HORIZONTAL" SIZE="10">UMBER2.CPP--CNumber2::CNumber2(LPUNKNOWN)</H3>
<P><FONT COLOR="#0066FF"><TT>CNumber2::CNumber2(LPUNKNOWN pUnkOuter)<BR>
{<BR>
m_cRef = 0;<BR>
m_value = 0.0;<BR>
if(pUnkOuter == NULL)<BR>
m_pUnkOuter = this;<BR>
else<BR>
m_pUnkOuter = pUnkOuter; <BR>
}</TT></FONT></P>
<H3><A NAME="Heading24"></A>Listing 16.14 <SPACER TYPE="HORIZONTAL" SIZE="10">UMBER2.CPP--CNumber2::ImpINumber::QueryInterface(),
AddRef(), and Release() Are Delegated to pThis-&gt;m_pUnkOuter, Instead of pThis</H3>
<P><FONT COLOR="#0066FF"><TT>HRESULT CNumber2::ImpINumber::QueryInterface(REFIID
riid,<BR>
LPVOID* ppvInterface)<BR>
{<BR>
GET_CNUMBER2(pThis);<BR>
return pThis-&gt;m_pUnkOuter-&gt;QueryInterface(riid,<BR>
ppvInterface);<BR>
} <BR>
ULONG CNumber2::ImpINumber::AddRef()<BR>
{<BR>
GET_CNUMBER2(pThis);<BR>
return pThis-&gt;m_pUnkOuter-&gt;AddRef();<BR>
} <BR>
ULONG CNumber2::ImpINumber::Release()<BR>
{<BR>
GET_CNUMBER2(pThis);<BR>
return pThis-&gt;m_pUnkOuter-&gt;Release(); <BR>
}</TT></FONT></P>
<P><B><I>CNumber3</I>: The Outer Object</B><SPACER TYPE="HORIZONTAL" SIZE="10"><B>
</B>Now that you've created an aggregatable object that implements <TT>INumber</TT>,
you create another object that implements <TT>IWholeNumber</TT> and uses aggregation
to provide an implementation of <TT>INumber</TT> (see Listing 16.15).
<H3><A NAME="Heading25"></A>Listing 16.15 <SPACER TYPE="HORIZONTAL" SIZE="10">INUMBER.H--The
IWholeNumber Interface</H3>
<P><FONT COLOR="#0066FF"><TT>interface IWholeNumber : public IUnknown<BR>
{<BR>
public:<BR>
// ILrsInetUnlock methods<BR>
virtual HRESULT __stdcall GetNumber(<BR>
/* [out] */ long int* pValue) = 0;<BR>
virtual HRESULT __stdcall SetNumber(<BR>
/* [in] */ long int value) = 0; <BR>
};</TT></FONT></P>
<P>For simplicity, you're not going to make <TT>CNumber3</TT> aggregatable, so declare
the class with a single vtable for both its true <TT>IUnknown</TT> and the <TT>IWholeNumber</TT>
interface. Add the member variable <TT>m_pUnkNumber</TT> to hold the true <TT>IUnknown</TT>
of the aggregated <TT>CNumber2</TT> object. You also provide an <TT>Init</TT> method
so that the aggregation can be accomplished separate from the construction of the
object (see Listing 16.16 and Listing 16.17). Modify the class factory so that it
calls <TT>Init</TT> after constructing the object (see Listing 16.18).
<H3><A NAME="Heading26"></A>Listing 16.16 <SPACER TYPE="HORIZONTAL" SIZE="10">UMBER3.H--CNumber3
Adds Init() and m_pUnkNumber</H3>
<P><FONT COLOR="#0066FF"><TT>class CNumber3 : IWholeNumber<BR>
{<BR>
public:<BR>
// IUnknown methods<BR>
HRESULT __stdcall QueryInterface(REFIID riid,<BR>
LPVOID* lpInterface);<BR>
ULONG __stdcall AddRef();<BR>
ULONG __stdcall Release(); <BR>
// IWholeNumber methods<BR>
HRESULT __stdcall GetNumber(long int* pValue);<BR>
HRESULT __stdcall SetNumber(long int value); <BR>
// Constructor and destructor<BR>
CNumber3();<BR>
~CNumber3();<BR>
BOOL Init(); <BR>
private:<BR>
ULONG m_cRef;<BR>
LPUNKNOWN m_pUnkNumber; // Aggregated number <BR>
};</TT></FONT></P>
<H3><A NAME="Heading27"></A>Listing 16.17 <SPACER TYPE="HORIZONTAL" SIZE="10">UMFACT.CPP--CNumber3ClassFactory::CreateInstance
Calls CNumber3::Init after Constructing the CNumber3 Object</H3>
<P><FONT COLOR="#0066FF"><TT>// Create the object<BR>
CNumber3* pObj = NULL;<BR>
pObj = new CNumber3();<BR>
IncrementObjectCount();<BR>
if(NULL == pObj)<BR>
{<BR>
_ASSERT(FALSE);<BR>
DecrementObjectCount();<BR>
return E_OUTOFMEMORY;<BR>
} <BR>
// Call the initializer<BR>
if(! pObj-&gt;Init())<BR>
{<BR>
_ASSERT(FALSE);<BR>
delete pObj;<BR>
return E_FAIL; <BR>
}</TT></FONT></P>
<H3><A NAME="Heading28"></A>Listing 16.18 <SPACER TYPE="HORIZONTAL" SIZE="10">UMBER3.CPP--CNumber3::Init
Creates the Aggregated Object</H3>
<P><FONT COLOR="#0066FF"><TT>BOOL CNumber3::Init()<BR>
{<BR>
_ASSERT(m_pUnkNumber == NULL);<BR>
HRESULT hr = CoCreateInstance(CLSID_Number2, this, CLSCTX_INPROC_SERVER, IID_IUnknown,
(LPVOID*)&amp;m_pUnkNumber);<BR>
if(FAILED(hr) || (m_pUnkNumber == NULL))<BR>
{<BR>
_ASSERT(FALSE);<BR>
return FALSE;<BR>
} <BR>
return TRUE; <BR>
}</TT></FONT></P>
<P><TT>CNumber3::Init</TT> creates the aggregated object by calling <TT>CoCreateInstance</TT>
and passing its true <TT>IUnknown</TT> interface as an argument. <TT>CoCreateInstance</TT>
will call the class factory's <TT>CreateInstance</TT> method, which will construct
the <TT>CNumber2</TT> object using the new constructor. <TT>CNumber2</TT> now has
the true <TT>IUnknown</TT> of the outer object (passed from <TT>CoCreateInstance</TT>
to the class factory's <TT>CreateInstance</TT> method and then to the new constructor),
which it stores as <TT>m_pUnkOuter</TT>. The true <TT>IUnknown</TT> of the <TT>CNumber2</TT>
object is returned back through <TT>CoCreateInstance</TT>, and the outer <TT>CNumber3</TT>
object has the true <TT>IUnknown</TT> of the aggregated object, which <TT>CNumber3</TT>
stores as <TT>m_pUnkNumber</TT> (see fig. 16.2). <B><BR>
<BR>
</B><A HREF="art/16/q_fig02n.jpg"><B>FIG. 16.2</B></A> <I><TT><BR>
CNumber2</TT> and <TT>CNumber3</TT> hold pointers to each other's true <TT>IUnknown</TT>
interfaces.</I></P>
<P>Now when <TT>CNumber3</TT>'s <TT>QueryInterface</TT> is called, it will return
<TT>this</TT> for <TT>IUnknown</TT> or <TT>IWholeNumber</TT>, but when <TT>INumber</TT>
is requested, it will pass the call on to the aggregated <TT>CNumber2</TT> object
through that object's true <TT>IUnknown</TT>, <TT>m_pUnkNumber</TT> (see Listing
16.19).
<H3><A NAME="Heading29"></A>Listing 16.19 <SPACER TYPE="HORIZONTAL" SIZE="10">UMBER3.CPP--CNumber3::QueryInterface</H3>
<P><FONT COLOR="#0066FF"><TT>HRESULT CNumber3::QueryInterface(REFIID riid,<BR>
LPVOID* ppvInterface)<BR>
{<BR>
if(IsEqualIID(riid, IID_IUnknown) ||<BR>
IsEqualIID(riid, IID_IWholeNumber))<BR>
{<BR>
*ppvInterface = this;<BR>
AddRef();<BR>
return NOERROR;<BR>
}<BR>
else if(IsEqualIID(riid, IID_INumber))<BR>
{<BR>
return m_pUnkNumber-&gt;QueryInterface(riid,<BR>
ppvInterface);<BR>
}<BR>
else<BR>
{<BR>
return E_NOINTERFACE; } <BR>
}</TT></FONT></P>
<P><B>Aggregation and Tear-Off Interfaces in ATL</B><SPACER TYPE="HORIZONTAL" SIZE="10"><B>
</B>ATL provides tools to implement aggregation. It also provides tools to implement
a kind of temporary aggregation called <I>tear-off interfaces. </I>In each of these
cases, the outer object declares the aggregated object in its <TT>COM_MAP</TT> through
one of the <TT>COM_INTERFACE_ENTRY</TT> macros. <B><I><BR>
<BR>
Aggregation </I></B><SPACER TYPE="HORIZONTAL" SIZE="10">There are four steps to aggregating
an object using ATL. First you make sure that the aggregated class has not explicitly
denied aggregation. It can do this through the use of the macro <TT>DECLARE_NOT_AGGREGATABLE</TT>.
If the ATL class doesn't explicitly deny aggregation, it's aggregatable. Second declare
a member variable in the outer class to hold the true <TT>IUnknown</TT> of the aggregated
object. If you are not using one of the automatic aggregation macros (<TT>COM_INTERFACE_ENTRY_AUTOAGGREGATE</TT>
or <TT>COM_INTERFACE_ENTRY_AUTOAGGREGATEBLIND</TT>), you have to override <TT>FinalConstruct</TT>
and create the aggregated object by using <TT>CoCreateInstance</TT>, like you did
in the <TT>CNumber3</TT> sample's constructor. When using the automatic macros, simply
initialize the member variable to <TT>NULL</TT>.</P>
<P>Third override the outer class's <TT>FinalRelease</TT> to release the aggregated
object. This is true whether you use the automatic aggregation macros or one of the
other macros.</P>
<P>Finally declare the aggregation in the <TT>COM_MAP</TT>. The four macros listed
below are available for doing this. The macro arguments are described in Tables 16.1
through 16.4.</P>
<P><FONT COLOR="#0066FF"><TT>COM_INTERFACE_ENTRY_AGGREGATE(iid, pUnknown)</TT></FONT></P>
<P>This macro is used to delegate a specific interface to an aggregated object. <BR>
<BR>

<TABLE BORDER="1" WIDTH="100%">
	<CAPTION><B>Table 16.1 </B><SPACER TYPE="HORIZONTAL" SIZE="10"><B><I>COM_INTERFACE_ENTRY_AGGREGATE</I>
		Arguments</B></CAPTION>
	<TR ALIGN="LEFT" rowspan="1">
		<TD ALIGN="LEFT" VALIGN="TOP"><B>Argument</B></TD>
		<TD ALIGN="LEFT" VALIGN="TOP"><B>Meaning</B></TD>
	</TR>
	<TR ALIGN="LEFT" rowspan="1">
		<TD ALIGN="LEFT" VALIGN="TOP"><TT>iid</TT></TD>
		<TD ALIGN="LEFT" VALIGN="TOP">The ID of the interface that is to be delegated to the aggregated object.</TD>
	</TR>
	<TR ALIGN="LEFT" rowspan="1">
		<TD ALIGN="LEFT" VALIGN="TOP"><TT>pUnknown</TT></TD>
		<TD ALIGN="LEFT" VALIGN="TOP">The aggregated object's true <TT>IUnknown</TT> interface. The aggregated object is
			created in the outer object's <TT>FinalConstruct</TT> method</TD>
	</TR>
</TABLE>
</P>
<P><FONT COLOR="#0066FF"><TT>COM_INTERFACE_ENTRY_AGGREGATE_BLIND(pUnknown)</TT></FONT></P>
<P>This macro is used to expose all of an aggregated object's interfaces from the
outer object.<BR>
<BR>

<TABLE BORDER="1" WIDTH="100%">
	<CAPTION><B>Table 16.2 </B><SPACER TYPE="HORIZONTAL" SIZE="10"><B><I>COM_INTERFACE_ENTRY_AGGREGATE_BLIND</I>
		Arguments</B></CAPTION>
	<TR ALIGN="LEFT" rowspan="1">
		<TD ALIGN="LEFT" VALIGN="TOP"><B>Argument</B></TD>
		<TD ALIGN="LEFT" VALIGN="TOP"><B>Meaning</B></TD>
	</TR>
	<TR ALIGN="LEFT" rowspan="1">
		<TD ALIGN="LEFT" VALIGN="TOP"><TT>pUnknown</TT></TD>
		<TD ALIGN="LEFT" VALIGN="TOP">The aggregated object's true <TT>IUnknown</TT> interface. The aggregated object is
			created in the outer object's <TT>FinalConstruct</TT> method.</TD>
	</TR>
</TABLE>
</P>
<P><FONT COLOR="#0066FF"><TT>COM_INTERFACE_ENTRY_AUTOAGGREGATE(iid, pUnknown, clsid,
cs)</TT></FONT></P>
<P>This macro is used to aggregate an object on demand, delegating the specified
interface to that object. 
<TABLE BORDER="1" WIDTH="100%">
	<CAPTION><B>Table 16.3 </B><SPACER TYPE="HORIZONTAL" SIZE="10"><B><I>COM_INTERFACE_ENTRY_AUTOAGGREGATE</I>
		Arguments</B></CAPTION>
	<TR ALIGN="LEFT" rowspan="1">
		<TD ALIGN="LEFT" VALIGN="TOP"><B>Argument</B></TD>
		<TD ALIGN="LEFT" VALIGN="TOP"><B>Meaning</B></TD>
	</TR>
	<TR ALIGN="LEFT" rowspan="1">
		<TD ALIGN="LEFT" VALIGN="TOP"><TT>iid</TT></TD>
		<TD ALIGN="LEFT" VALIGN="TOP">The ID of the interface that is to be delegated to the aggregated object.</TD>
	</TR>
	<TR ALIGN="LEFT" rowspan="1">
		<TD ALIGN="LEFT" VALIGN="TOP"><TT>pUnknown</TT></TD>
		<TD ALIGN="LEFT" VALIGN="TOP">The aggregated object's true <TT>IUnknown</TT> interface. The outer object initializes
			this to <TT>NULL</TT>, and the first query for this interface creates the aggregated
			object.</TD>
	</TR>
	<TR ALIGN="LEFT" rowspan="1">
		<TD ALIGN="LEFT" VALIGN="TOP"><TT>clsid</TT></TD>
		<TD ALIGN="LEFT" VALIGN="TOP">The ID of the class that is to be aggregated.</TD>
	</TR>
	<TR ALIGN="LEFT" rowspan="1">
		<TD ALIGN="LEFT" VALIGN="TOP"><TT>cs</TT></TD>
		<TD ALIGN="LEFT" VALIGN="TOP">A critical section used for synchronization.</TD>
	</TR>
</TABLE>
</P>
<P><FONT COLOR="#0066FF"><TT>COM_INTERFACE_ENTRY_AUTOAGGREGATE_BLIND(pUnknown, clsid,
cs)</TT></FONT></P>
<P>This macro is used to aggregate an object on demand, exposing all of the interfaces
of that object. <BR>
<BR>

<TABLE BORDER="1" WIDTH="100%">
	<CAPTION><B>Table 16.4</B><SPACER TYPE="HORIZONTAL" SIZE="10"><B> <I>COM_INTERFACE_ENTRY_AUTOAGGREGATE_BLIND</I>
		Arguments</B></CAPTION>
	<TR ALIGN="LEFT" rowspan="1">
		<TD ALIGN="LEFT" VALIGN="TOP"><B>Argument</B></TD>
		<TD ALIGN="LEFT" VALIGN="TOP"><B>Meaning</B></TD>
	</TR>
	<TR ALIGN="LEFT" rowspan="1">
		<TD ALIGN="LEFT" VALIGN="TOP"><TT>pUnknown</TT></TD>
		<TD ALIGN="LEFT" VALIGN="TOP">The aggregated object's true <TT>IUnknown</TT> interface. The outer object initializes
			this to <TT>NULL</TT>, and the first query for one of the aggregated object's interfaces
			creates the aggregated object.</TD>
	</TR>
	<TR ALIGN="LEFT" rowspan="1">
		<TD ALIGN="LEFT" VALIGN="TOP"><TT>clsid</TT></TD>
		<TD ALIGN="LEFT" VALIGN="TOP">The ID of the class that is to be aggregated.</TD>
	</TR>
	<TR ALIGN="LEFT" rowspan="1">
		<TD ALIGN="LEFT" VALIGN="TOP"><TT>cs</TT></TD>
		<TD ALIGN="LEFT" VALIGN="TOP">This is a critical section used for synchronization.</TD>
	</TR>
</TABLE>
<B><I><BR>
<BR>
Tear-Off Interfaces</I></B><SPACER TYPE="HORIZONTAL" SIZE="10"><B><I> </I></B><I>Tear-off
interfaces </I>are similar to aggregation, except that the inner object is held only
until its interface is released. Remember that in aggregation, the aggregated (inner)
object is released in the destructor, or in <TT>FinalRelease</TT> for ATL aggregation.
This means that the aggregated object exists for the life of the outer object. Even
using ATL's automatic aggregation, the aggregated object, once created, remains until
the outer object is destroyed. Tear-off interfaces, on the other hand, are created
when they're needed and destroyed when they're released. They're implemented differently
from the way standard aggregation is implemented on both sides of the relationship.
The tear-off interface must be an object specifically written to provide tear-off
interfaces, and it can provide them only for a specific outer class. Now take a look
at how it's done.</P>
<P>First declare a new class that is derived from <TT>CComTearOffBase</TT> and the
interfaces that this class will provide. To do this, the tear-off class must specify
the owner, or outer, class. Listing 16.20 shows the declaration of a class that implements
a tear-off interface.
<H3><A NAME="Heading30"></A>Listing 16.20 <SPACER TYPE="HORIZONTAL" SIZE="10">Example
Declaration of a Tear-Off Class</H3>
<P><FONT COLOR="#0066FF"><TT>class CTearOff: public ISomeInterface,<BR>
public CComTearOffObjectBase&lt;CSomeOuterClass&gt;<BR>
{ public:<BR>
CTearOff() {}<BR>
STDMETHOD(SomeMethod)()<BR>
{<BR>
return S_OK;<BR>
} <BR>
BEGIN_COM_MAP(CTearOff)<BR>
COM_INTERFACE_ENTRY(ISomeInterface)<BR>
END_COM_MAP() <BR>
}</TT></FONT></P>
<P>Next the outer class declares the tear-off interface in its <TT>COM_MAP</TT>.
The two macros listed below are available for doing this. The arguments to these
macros are described in Tables 16.5 and 16.6.</P>
<P><FONT COLOR="#0066FF"><TT>COM_INTERFACE_ENTRY_TEAR_OFF(iid, class)</TT></FONT></P>
<P>This macro is used to declare a true tear-off interface. <BR>
<BR>

<TABLE BORDER="1" WIDTH="100%">
	<CAPTION><B>Table 16.5 </B><SPACER TYPE="HORIZONTAL" SIZE="10"><B><I>COM_INTERFACE_ENTRY_TEAR_OFF</I>
		Arguments</B></CAPTION>
	<TR ALIGN="LEFT" rowspan="1">
		<TD ALIGN="LEFT" VALIGN="TOP"><B>Argument</B></TD>
		<TD ALIGN="LEFT" VALIGN="TOP"><B>Meaning</B></TD>
	</TR>
	<TR ALIGN="LEFT" rowspan="1">
		<TD ALIGN="LEFT" VALIGN="TOP"><TT>iid</TT></TD>
		<TD ALIGN="LEFT" VALIGN="TOP">The ID of the interface that is delegated to the tear-off interface object.</TD>
	</TR>
	<TR ALIGN="LEFT" rowspan="1">
		<TD ALIGN="LEFT" VALIGN="TOP"><TT>class</TT></TD>
		<TD ALIGN="LEFT" VALIGN="TOP">The class of the tear-off interface object.</TD>
	</TR>
</TABLE>
</P>
<P><FONT COLOR="#0066FF"><TT>COM_INTERFACE_ENTRY_CACHED_TEAR_OFF(iid, class, pUnknown,
cs)</TT></FONT></P>
<P>This macro is a variation of a tear-off interface in which the outer object caches
the tear-off interface by holding its <TT>IUnknown</TT> interface. The outer object
must release the tear-off interface in <TT>FinalRelease</TT>. This is functionally
equivalent to automatic aggregation, except that it uses a tear-off interface instead
of an aggregatable object. <BR>
<BR>

<TABLE BORDER="1" WIDTH="100%">
	<CAPTION><B>Table 16.6</B><SPACER TYPE="HORIZONTAL" SIZE="10"><B> <I>COM_INTERFACE_ENTRY_CACHED_TEAR_OFF</I>
		Arguments</B></CAPTION>
	<TR ALIGN="LEFT" rowspan="1">
		<TD ALIGN="LEFT" VALIGN="TOP"><B>Argument</B></TD>
		<TD ALIGN="LEFT" VALIGN="TOP"><B>Meaning</B></TD>
	</TR>
	<TR ALIGN="LEFT" rowspan="1">
		<TD ALIGN="LEFT" VALIGN="TOP"><TT>iid</TT></TD>
		<TD ALIGN="LEFT" VALIGN="TOP">The ID of the interface that is delegated to the tear-off interface object.</TD>
	</TR>
	<TR ALIGN="LEFT" rowspan="1">
		<TD ALIGN="LEFT" VALIGN="TOP"><TT>class</TT></TD>
		<TD ALIGN="LEFT" VALIGN="TOP">The class of the tear-off interface object.</TD>
	</TR>
	<TR ALIGN="LEFT" rowspan="1">
		<TD ALIGN="LEFT" VALIGN="TOP"><TT>pUnknown</TT></TD>
		<TD ALIGN="LEFT" VALIGN="TOP">The <TT>IUnknown</TT> interface of the tear-off interface object.</TD>
	</TR>
	<TR ALIGN="LEFT" rowspan="1">
		<TD ALIGN="LEFT" VALIGN="TOP"><TT>cs</TT></TD>
		<TD ALIGN="LEFT" VALIGN="TOP">A critical section used for synchronization.</TD>
	</TR>
</TABLE>
<BR>
<BR>
You've looked at aggregation up close, and you've looked at how to do aggregation
and tear-off interfaces with <TT>ATL</TT>. Next take a look at enumerators.
<H3><A NAME="Heading31"></A>Enumerators: An Interface Pattern for Sets</H3>
<P>An <I>enumerator</I> is an interface that provides access to a series of elements
and fits a specific pattern. The pattern is shown in Listing 16.21.
<H3><A NAME="Heading32"></A>Listing 16.21 <SPACER TYPE="HORIZONTAL" SIZE="10">Enumerator
Pattern</H3>
<P><FONT COLOR="#0066FF"><TT>interface IEnum&lt;type&gt; : <BR>
<BR>
{<BR>
STDMETHOD(Next)(ULONG celt, &lt;type&gt;* rgelt,<BR>
ULONG* pceltFetched);<BR>
STDMETHOD(Skip)(ULONG celt);<BR>
STDMETHOD(Reset)(void);<BR>
STDMETHOD(Clone)(IEnum&lt;type&gt;** ppEnum); <BR>
}</TT></FONT></P>
<P>An enumerator has four methods: <TT>Next</TT>, <TT>Skip</TT>, <TT>Reset</TT>,
and <TT>Clone</TT>.</P>
<P><TT>Next</TT> gets the next <TT>celt</TT> elements in the enumerator. <TT>rgelt</TT>
is the array of elements that is returned. The memory is provided by the caller and
must be large enough to hold the requested number of elements. <TT>pceltFetched</TT>
returns the number of elements that were fetched, which will always be equal to or
less than <TT>celt</TT>. It will be less than <TT>celt</TT> when the number of elements
from the current position to the end of the enumerator is less than the number of
requested elements. <TT>Next</TT> returns <TT>S_OK</TT> when the requested number
of elements are returned and <TT>S_FALSE</TT> when less than the requested number
are returned.</P>
<P><TT>Skip</TT> moves the current position by <TT>celt</TT> elements. <TT>Skip</TT>
returns <TT>S_OK</TT> when the requested number of elements are skipped and <TT>S_FALSE</TT>
when less than the requested number are skipped.</P>
<P><TT>Reset</TT> returns the enumerator to its original state, with the current
position at the beginning.</P>
<P><TT>Clone</TT> copies the enumerator in its current state.</P>
<P>In this sample, you implement an enumerator for the class IDs of the four classes
that you used to implement the <TT>INumber</TT> and <TT>IWholeNumber</TT> interfaces.
Because class IDs are <TT>GUID</TT>s, you implement the <TT>IEnumGUID</TT> interface,
which is defined in MSDEV\INCLUDE\COMCAT.H. The enumerator class, <TT>CNumbers</TT>,
will hold the class IDs in <TT>m_guids</TT>, and <TT>m_current</TT> will maintain
the current position. <TT>CNumbers</TT> is shown in Listing 16.22.
<H3><A NAME="Heading33"></A>Listing 16.22 <SPACER TYPE="HORIZONTAL" SIZE="10">UMBERS.H--The
CNumbers Enumerator Class</H3>
<P><FONT COLOR="#0066FF"><TT>class CNumbers : IEnumGUID<BR>
{<BR>
public:<BR>
// IUnknown methods<BR>
HRESULT __stdcall QueryInterface(REFIID riid,<BR>
LPVOID* lpInterface);<BR>
ULONG __stdcall AddRef();<BR>
ULONG __stdcall Release(); <BR>
// IEnumGUID methods<BR>
HRESULT __stdcall Next(ULONG celt, GUID* rgelt,<BR>
ULONG* pceltFetched);<BR>
HRESULT __stdcall Skip(ULONG celt);<BR>
HRESULT __stdcall Reset(void);<BR>
HRESULT __stdcall Clone(IEnumGUID** ppenum); <BR>
// Constructors and destructor<BR>
CNumbers();<BR>
~CNumbers(); <BR>
private:<BR>
ULONG m_cRef;<BR>
GUID m_guids[4];<BR>
int m_current; <BR>
};</TT></FONT></P>
<P>In the implementation of <TT>Next</TT>, you return the requested number of class
IDs from the current position, but not past the end of the array (see Listing 16.23).
<H3><A NAME="Heading34"></A>Listing 16.23 <SPACER TYPE="HORIZONTAL" SIZE="10">UMBERS.CPP--Next</H3>
<P><FONT COLOR="#0066FF"><TT>HRESULT CNumbers::Next(ULONG celt, GUID* rgelt,<BR>
ULONG* pceltFetched)<BR>
{<BR>
ULONG celtFetched = 0;<BR>
for(ULONG ii = 0; ii &lt; celt; ii++)<BR>
{<BR>
if(m_current &lt; 4)<BR>
{<BR>
rgelt[ii] = m_guids[m_current];<BR>
m_current ++;<BR>
celtFetched ++;<BR>
}<BR>
else<BR>
break;<BR>
} <BR>
if(pceltFetched)<BR>
*pceltFetched = celtFetched; <BR>
if(celtFetched == celt)<BR>
return S_OK;<BR>
else<BR>
return S_FALSE; <BR>
}</TT></FONT></P>
<P>Notice that the return argument <TT>pceltFetched</TT> is optional. When it's <TT>NULL</TT>,
the value isn't returned. Technically, the caller can send <TT>NULL</TT> only when
a single element is requested.</P>
<P><TT>Skip</TT> and <TT>Reset</TT> are straightforward. <TT>Skip</TT> moves the
current position forward, and <TT>Reset</TT> sets the current position to 0.</P>
<P><TT>Clone</TT> is a little different. It must create another object that is a
copy of itself, including the current position. One way to do this is to call <TT>CoCreateInstance</TT>,
which will go through the class factory so that object counts are handled there.
However, <TT>CoCreateInstance</TT> has some overhead that isn't necessary in this
case, so you do what the class factory does inside the <TT>Clone</TT> method; you
construct the enumerator and increment the object count. Having created the object,
use <TT>Skip</TT> to set its current position to the current position of the enumerator
being cloned. The <TT>Clone</TT> method is shown in Listing 16.24.
<H3><A NAME="Heading35"></A>Listing 16.24<SPACER TYPE="HORIZONTAL" SIZE="10"> UMBERS.CPP--Clone</H3>
<P><FONT COLOR="#0066FF"><TT>CNumbers* pNumbers = new CNumbers();<BR>
if(pNumbers == NULL)<BR>
{<BR>
_ASSERT(FALSE);<BR>
return E_OUTOFMEMORY;<BR>
}<BR>
IncrementObjectCount(); <BR>
HRESULT hr = pNumbers-&gt;QueryInterface(IID_IEnumGUID, (LPVOID*)ppenum);<BR>
if(FAILED(hr))<BR>
{<BR>
_ASSERT(FALSE);<BR>
delete pNumbers;<BR>
DecrementObjectCount();<BR>
*ppenum = NULL;<BR>
return E_UNEXPECTED;<BR>
} <BR>
hr = (*ppenum)-&gt;Skip(m_current);<BR>
if(hr != S_OK)<BR>
{<BR>
_ASSERT(FALSE);<BR>
delete pNumbers;<BR>
DecrementObjectCount();<BR>
*ppenum = NULL;<BR>
return E_UNEXPECTED; <BR>
}</TT></FONT></P>
<P>Any enumerator can be implemented pretty much the same way. Your internal data
structure can be an array, a list, or anything else that has a logical order.
<H3><A NAME="Heading36"></A>About the Samples</H3>
<P>The samples from this chapter are in the DLL project Number, described in Table
16.7. 
<TABLE BORDER="1" WIDTH="100%">
	<CAPTION><B>Table 16.7 </B><SPACER TYPE="HORIZONTAL" SIZE="10"><B>Sample Source Code</B></CAPTION>
	<TR ALIGN="LEFT" rowspan="1">
		<TD ALIGN="LEFT" VALIGN="TOP"><B>File</B></TD>
		<TD ALIGN="LEFT" VALIGN="TOP"><B>Contents</B></TD>
	</TR>
	<TR ALIGN="LEFT" rowspan="1">
		<TD ALIGN="LEFT" VALIGN="TOP">Number.mdp</TD>
		<TD ALIGN="LEFT" VALIGN="TOP">The project workspace.</TD>
	</TR>
	<TR ALIGN="LEFT" rowspan="1">
		<TD ALIGN="LEFT" VALIGN="TOP">Number.mak</TD>
		<TD ALIGN="LEFT" VALIGN="TOP">The project makefile.</TD>
	</TR>
	<TR ALIGN="LEFT" rowspan="1">
		<TD ALIGN="LEFT" VALIGN="TOP">inumber.h</TD>
		<TD ALIGN="LEFT" VALIGN="TOP">The definition of the <TT>INumber</TT> and <TT>IWholeNumber</TT> interfaces.</TD>
	</TR>
	<TR ALIGN="LEFT" rowspan="1">
		<TD ALIGN="LEFT" VALIGN="TOP">numcid.h</TD>
		<TD ALIGN="LEFT" VALIGN="TOP">The definition of the class IDs for each of the objects.</TD>
	</TR>
	<TR ALIGN="LEFT" rowspan="1">
		<TD ALIGN="LEFT" VALIGN="TOP">number.h</TD>
		<TD ALIGN="LEFT" VALIGN="TOP">The definition of <TT>CNumber</TT>.</TD>
	</TR>
	<TR ALIGN="LEFT" rowspan="1">
		<TD ALIGN="LEFT" VALIGN="TOP">number.cpp</TD>
		<TD ALIGN="LEFT" VALIGN="TOP">The implementation of <TT>CNumber</TT>.</TD>
	</TR>
	<TR ALIGN="LEFT" rowspan="1">
		<TD ALIGN="LEFT" VALIGN="TOP">number1.h</TD>
		<TD ALIGN="LEFT" VALIGN="TOP">The definition of <TT>CNumber1</TT>.</TD>
	</TR>
	<TR ALIGN="LEFT" rowspan="1">
		<TD ALIGN="LEFT" VALIGN="TOP">number1.cpp</TD>
		<TD ALIGN="LEFT" VALIGN="TOP">The implementation of <TT>CNumber1</TT>.</TD>
	</TR>
	<TR ALIGN="LEFT" rowspan="1">
		<TD ALIGN="LEFT" VALIGN="TOP">number2.h</TD>
		<TD ALIGN="LEFT" VALIGN="TOP">The definition of <TT>CNumber2</TT>.</TD>
	</TR>
	<TR ALIGN="LEFT" rowspan="1">
		<TD ALIGN="LEFT" VALIGN="TOP">number2.cpp</TD>
		<TD ALIGN="LEFT" VALIGN="TOP">The implementation of <TT>CNumber2</TT>.</TD>
	</TR>
	<TR ALIGN="LEFT" rowspan="1">
		<TD ALIGN="LEFT" VALIGN="TOP">number3.h</TD>
		<TD ALIGN="LEFT" VALIGN="TOP">The definition of <TT>CNumber3</TT>.</TD>
	</TR>
	<TR ALIGN="LEFT" rowspan="1">
		<TD ALIGN="LEFT" VALIGN="TOP">number3.cpp</TD>
		<TD ALIGN="LEFT" VALIGN="TOP">The implementation of <TT>CNumber3</TT>.</TD>
	</TR>
	<TR ALIGN="LEFT" rowspan="1">
		<TD ALIGN="LEFT" VALIGN="TOP">numbers.h</TD>
		<TD ALIGN="LEFT" VALIGN="TOP">The definition of the enumerator sample class.</TD>
	</TR>
	<TR ALIGN="LEFT" rowspan="1">
		<TD ALIGN="LEFT" VALIGN="TOP">numbers.cpp</TD>
		<TD ALIGN="LEFT" VALIGN="TOP">The implementation of the enumerator sample class.</TD>
	</TR>
	<TR ALIGN="LEFT" rowspan="1">
		<TD ALIGN="LEFT" VALIGN="TOP">numguid.cpp</TD>
		<TD ALIGN="LEFT" VALIGN="TOP">The local instances of the class IDs and interface IDs.</TD>
	</TR>
	<TR ALIGN="LEFT" rowspan="1">
		<TD ALIGN="LEFT" VALIGN="TOP">numfact.h</TD>
		<TD ALIGN="LEFT" VALIGN="TOP">The definitions of the class factories for all four classes.</TD>
	</TR>
	<TR ALIGN="LEFT" rowspan="1">
		<TD ALIGN="LEFT" VALIGN="TOP">numfact.cpp</TD>
		<TD ALIGN="LEFT" VALIGN="TOP">The implementation of the class factories and functions that are exported by the
			DLL</TD>
	</TR>
	<TR ALIGN="LEFT" rowspan="1">
		<TD ALIGN="LEFT" VALIGN="TOP">number.def</TD>
		<TD ALIGN="LEFT" VALIGN="TOP">The definition of the DLL exports.</TD>
	</TR>
	<TR ALIGN="LEFT" rowspan="1">
		<TD ALIGN="LEFT" VALIGN="TOP">number.reg</TD>
		<TD ALIGN="LEFT" VALIGN="TOP">Manual registration file.</TD>
	</TR>
</TABLE>
<BR>
<BR>
You can build the sample from the command line or from your IDE. After building number.dll,
modify number.reg so that it contains the correct path to the DLL, and register the
objects using <TT>regedit.exe number.reg</TT> or <TT>regedt32.exe number.reg</TT>.</P>
<P>To execute the sample, you need an executable project. <TT>TestNum</TT> is a console
application that serves that purpose. Build that project, and run TESTNUM.EXE from
your debugger.
<H2><A NAME="Heading37"></A>Distributed Component Object Model (DCOM)</H2>
<P>Microsoft has taken the Component Object Model, and therefore ActiveX, to another
level with the introduction of the Distributed Component Object Model (DCOM). DCOM
extends COM by enabling application objects to communicate and run across networks,
including the Internet, intranets, LANs, and WANs. It allows your application objects
to be distributed over multiple computers, handling the communications among the
objects as well as the instantiation and execution of the objects remotely. The application
uses the objects as if the application and the objects were running on the same machine.
DCOM is Microsoft's answer to the Common Object Request Broker Architecture (CORBA).</P>
<P>DCOM extends applications across networks, including the Internet, allowing components
to run on different machines, by building on the Remote Procedure Call (RPC) technology.
DCOM allows components to communicate with each other via any network protocol, including
TCP/IP and IPX/SPX. DCOM gives you control of security features, such as access permissions
and domain authentication, and can be used to launch applications on other machines.
This capability enables developers to develop truly distributed systems, without
worrying about network programming, system compatibility, or integration of different
components.</P>
<P>Since ActiveX is based on COM, the language neutrality of ActiveX is extended
to DCOM. ActiveX components built with different languages can communicate over a
network.</P>
<P>DCOM is designed to run on multiple platforms. Microsoft is openly licensing DCOM
to other software companies to run on all major operating systems. Microsoft is also
working with the Internet standards committees to make DCOM an Internet standard.
To view a draft of this standard, go to <A HREF="http://ds1.internic.net/ds/dsintdrafts.html"><B>http://ds1.internic.net/ds/dsintdrafts.html</B></A>
and search for DCOM. The exact address of the document changes as the version of
the draft changes.</P>
<P>DCOM is currently integrated with the Microsoft Windows NT 4.0 operating system
and is in beta as an add-on for Microsoft Windows 95. It should be available for
the Macintosh as a beta in the first quarter of 1997. Versions for different flavors
of UNIX and Legacy systems, including mainframe systems running CICS and IMS, will
be available sometime after that. UNIX support for DCOM will be provided by Digital,
not Microsoft, through its ObjectBroker product. To find more information on the
ObjectBroker product, look at the ObjectBroker Web site at <A HREF="http://www.digital.com/info/objectbroker/"><B>http://www.digital.com/info/objectbroker/</B></A>.</P>
<P>To configure server and client applications to use DCOM on Microsoft Windows NT
or Microsoft Windows 95, use the following steps:

<OL>
	<LI>Register the server application on both the server machine and the client machine.
	The server application does not need to reside on the client machine, although registering
	the server may involve running the server setup program, or running the server application,
	on the client machine.
	<P>
	<LI>If the server application uses custom interfaces, the marshaling code needs to
	be installed on both the server and client machines.
	<P>
	<LI>Server applications that support vtable binding need to have their type libraries
	installed on the server and client machines.
	<P>
	<LI>Alter the registry settings for the server on the server and client machines
	manually or by using the DCOMCNFG or OLE Viewer tool.
</OL>

<P>DCCOMCNFG is available as part of the Microsoft Windows NT operating system and
is located in the Windows NT System32 directory. The DCOMCNFG utility for Microsoft
Windows 95 can be downloaded from the Windows 95 DCOM page of Microsoft's Web site
(<A HREF="http://www.microsoft.com/oledev/olemkt/oledcom/dcom95.htm"><B>http://www.microsoft.com/oledev/olemkt/oledcom/dcom95.htm</B></A>).
The program used for installing DCOMCNFG on Microsoft Windows 95 will install the
DCOMCNFG utility in the Windows System directory. To change the registry settings
using DCOMCNFG, follow these steps:

<OL>
	<LI>Execute the DCOMCNFG.EXE file on the client machine. You will see a list of all
	registered applications in the App<U>l</U>ications list box of the Applications tab.
	<P>
	<LI>If the name of your server is registered but does not appear, it is probably
	listed by its <TT>CLSID</TT>. To determine the <TT>CLSID</TT> of your server, you
	need to view the registry. To do this, close DCOMCNFG, and then open the Registry
	Editor by running regedit.exe. Open the <TT>HKEY_CLASSES_ROOT</TT> folder, and look
	for your server's <TT>ProgID</TT>. All the <TT>ProgID</TT>s for all registered systems
	will be listed with their objects on the left. For example, if you were searching
	for <TT>MFCServer</TT>, you would look for MFCServer.Tracker. Click the <I>+ </I>by
	the <TT>ProgId</TT>, and then select the <TT>CLSID</TT> subkey below it. The <TT>CLSID</TT>
	is displayed in the Data section of the right window. After you locate the <TT>CLSID</TT>,
	close the Registry Editor, and go back into DCOMCNFG.
	<P><IMG SRC="bar.gif" WIDTH="430" HEIGHT="6" ALIGN="BOTTOM" BORDER="0" VSPACE="4"><B><BR>
	CAUTION<BR>
	</B>Use caution when looking at or editing the registry. If changes are not made
	correctly, they can cause your machine to function improperly and, in some cases,
	crash. You should always back up the registry prior to changing it. Information on
	backing up the registry can be found in the Registry Editor's help.<IMG SRC="bar.gif"
	WIDTH="430" HEIGHT="6" ALIGN="BOTTOM" BORDER="0" VSPACE="4">
	<LI>Select your server from the App<U>l</U>ications list box, and then click the
	<U>P</U>roperties button. This action brings up the Properties dialog.
	<P>
	<LI>Select the Location tab. Select the Run application on the <U>f</U>ollowing computer
	check box, and specify the name of the server machine. Clear the other check boxes,
	and then click the <U>A</U>pply button to save the changes. Close the Properties
	dialog, and then close DCOMCNFG.
	<P>
	<LI>Run DCOMCNFG on the server machine. Select your server's name (or <TT>CLSID</TT>)
	from the App<U>l</U>ications list box, and then click the <U>P</U>roperties button
	to bring up the Properties dialog.
	<P>
	<LI>Select the Security tab. You can use the default access and launch permissions
	or create custom permissions.
	<P>
	<LI>Make sure that SYSTEM is in the launch and access permissions. If you are using
	the default access or launch permissions, use the Default Security tab to make sure
	these permissions contain SYSTEM.
	<P>
	<LI>Add the user on the client machine to the access and launch permissions. To add
	users and groups to custom permissions, click the Edit button to bring up the Registry
	Value Permissions dialog. To add users or groups to default permissions, close the
	Properties dialog. Then select the Default Security tab, and click the Edit Default
	button in the Default Access Permissions or Default Launch Permissions frame to bring
	up the Registry Value Permissions dialog for the Default Access Permissions or Default
	Launch Permissions, respectively. Click the <U>A</U>dd button to display the Add
	Users and Groups window. Select the user or group from the <U>N</U>ames list box,
	and then click the <U>A</U>dd button to add it. When you are done, click the OK button,
	and then click the OK button on the Registry Value Permissions dialog. Click the
	<U>A</U>pply button on the Properties dialog to save your changes. Contact your system
	administrator if you need help setting permissions for users or groups.
</OL>

<P>The OLE Viewer can be found on the Web at <A HREF="http://www.microsoft.com/oledev/olecom/oleview.htm"><B>http://www.microsoft.com/oledev/olecom/oleview.htm</B></A>,
and it is included with the Microsoft ActiveX SDK in the Bin directory and with Microsoft
Visual C++ version 5.0 in the Bin directory. The Web site usually contains the latest
version. To change the registry settings using the OLE Viewer, follow these steps:

<OL>
	<LI>Run OLEVIEW.EXE on the client machine. Make sure <U>E</U>xpert Mode is selected
	on the <U>V</U>iew menu.
	<P>
	<LI>Click the + beside All Objects in the left pane of the main window. All registered
	objects will appear under All Objects. If the name of your server does not appear,
	and it is registered, it is probably listed by its <TT>CLSID</TT>. If you need to
	find the <TT>CLSID</TT> of your server, refer to item 1 in the DCOMCNFG steps.
	<P>
	<LI>Locate your server by name or <TT>CLSID</TT>, and select it. This action displays
	a group of tabs in the right pane.
	<P>
	<LI>Select the Implementation tab, and clear the <U>P</U>ath to the Implementation
	text box of the Local Server subtab.
	<P>
	<LI>Click the Activation tab, and enter the name of the server machine in the <U>R</U>emote
	Machine Name text box.
	<P>
	<LI>Close the OLE Viewer.
	<P>
	<LI>Run OLEVIEW.EXE on the server machine. Make sure <U>E</U>xpert Mode is selected
	on the <U>V</U>iew menu.
	<P>
	<LI>Click the + beside All Objects in the left pane of the main window. Select your
	server's name or <TT>CLSID</TT>.
	<P>
	<LI>Use the Launch Permissions and Access Permissions tabs to set permissions for
	the server. You can use the default access and launch permissions or create custom
	permissions.
	<P>
	<LI>Make sure that SYSTEM is in the launch and access permissions. If you are using
	the default access or launch permissions, select <U>S</U>ystem Configuration from
	the <U>F</U>ile menu to make sure these permissions contain SYSTEM.
	<P>
	<LI>Add the user on the client machine to the access and launch permissions. To add
	users and groups to custom permissions, click the <U>M</U>odify button on the appropriate
	tab to bring up the Launch Permissions or Access Permissions dialog. Click the <U>A</U>dd
	button to display the Add Users and Groups window. Select the user or group from
	the <U>N</U>ames list box, and then click the <U>A</U>dd button to add it. When you
	are done, click the OK button, and then click the OK button on the Launch Permissions
	dialog. To add users or groups to the default permissions, select <U>S</U>ystem Configuration
	from the <U>F</U>ile menu to bring up the System Configuration dialog. Select the
	appropriate default permissions tab-- Default Launch Permissions or Default Access
	Permissions--and click the <U>M</U>odify button to bring up the Global Launch Permissions
	dialog or Global Access Permissions dialog, respectively. Click the <U>A</U>dd button
	to display the Add Users and Groups window. Select the user or group from the <U>N</U>ames
	list box, and then click the <U>A</U>dd button to add it. When you are done, click
	the OK button, and then click the OK button on the Global Access or Global Launch
	Permissions dialog.
</OL>

<P>You have some special considerations when using Microsoft Windows 95. First you
need to install the DCOM add-on for Microsoft Windows 95. Information about downloading
and installing it can be found on Microsoft's OLE page, <A HREF="http://www.microsoft.com/oledev/"><B>http://www.microsoft.com/oledev/</B></A>.
To enable incoming calls, you will also need to change the <TT>EnableRemoteConnections</TT>
setting in the Microsoft Windows 95 registry from &quot;N&quot; to &quot;Y&quot;
on the server machine. This can be done using the OLE Viewer by selecting <U>F</U>ile,
<U>S</U>ystem Configuration, and then clicking the Enable Remote Connection (Windows
95 only) check box on the System Settings tab. DCOM on Microsoft Windows 95 does
not support remote activation of a server because all processes run using the security
of the currently logged-on user, making it impossible for a client machine to start
a process. A server application running remotely on a Microsoft Windows 95 server
machine will have to be started manually or some other way prior to the client machine
accessing it; therefore, the launch permissions have no effect on Microsoft Windows
95.</P>
<P>More information on DCOM, and other articles, can be found in the Knowledge Base
article Q158582. Information can also be found on Microsoft's Web sites at <A HREF="http://www.microsoft.com/oledev/, http://www.microsoft.com/ntserver/"><B>http://www.microsoft.com/oledev/</B>,
<B>http://www.microsoft.com/ntserver/</B></A>, and <A HREF="http://www.microsoft.com/intdev/"><B>http://www.microsoft.com/intdev/</B></A>.
<H2><A NAME="Heading38"></A>OLE DB</H2>
<P>Microsoft has introduced an object driven data access technology called OLE DB.
<I>OLE DB </I>is a set of APIs that will provide ActiveX interfaces to all forms
of data throughout the enterprise.</P>
<P>OLE DB allows access to non-SQL type data as well as to SQL type data. Open Database
connectivity (ODBC) drivers are used only to access SQL databases, such as DB2 and
SQL Servers and still provide one of the best ways to access SQL databases. Currently,
OLE DB provides only a layer on top of ODBC drivers for access to SQL databases;
OLE DB does not access them directly. OLE DB will eventually be capable of accessing
all types of data, including non-database data such as spreadsheets and e-mail. OLE
DB, like ODBC, uses a common interface for accessing data. OLE DB has a modular design
based on COM.</P>
<P>The flow of an OLE DB and an ODBC application is the same, except for some slight
differences. Most of the differences are due to the fact that OLE DB is object-oriented,
whereas ODBC is not, and because ODBC data is application-owned, whereas OLE DB uses
shared data. Table 16.8 summarizes some of these differences. 
<TABLE BORDER="1" WIDTH="100%">
	<CAPTION><B>Table 16.8 </B><SPACER TYPE="HORIZONTAL" SIZE="10"><B>OLEDB versus ODBC</B></CAPTION>
	<TR ALIGN="LEFT" rowspan="1">
		<TD ALIGN="LEFT" VALIGN="TOP"><B>OLEDB</B></TD>
		<TD ALIGN="LEFT" VALIGN="TOP"><B>ODBC</B></TD>
	</TR>
	<TR ALIGN="LEFT" rowspan="1">
		<TD ALIGN="LEFT" VALIGN="TOP">Session Objects</TD>
		<TD ALIGN="LEFT" VALIGN="TOP">Connection Handles</TD>
	</TR>
	<TR ALIGN="LEFT" rowspan="1">
		<TD ALIGN="LEFT" VALIGN="TOP">Shared data object</TD>
		<TD ALIGN="LEFT" VALIGN="TOP">Application data buffer</TD>
	</TR>
	<TR ALIGN="LEFT" rowspan="1">
		<TD ALIGN="LEFT" VALIGN="TOP">Accessors</TD>
		<TD ALIGN="LEFT" VALIGN="TOP">Descriptor Handles</TD>
	</TR>
</TABLE>
<BR>
<BR>
OLE DB uses Session Objects in place of ODBC's Connection Handles. A separate Connection
Handle is needed for each concurrent transaction. With OLE DB, an application can
have several Session Objects per data connection, allowing one data connection for
multiple concurrent transactions.</P>
<P>OLE DB uses rowsets--in place of ODBC's result sets--which offer some advantages.
ODBC reads data into an application's memory space for processing. OLE DB references
data directly; data is not copied to the application's memory space. Referencing
data directly saves on memory and processing time. If an ODBC application wants to
know whether a second process or application has changed the data, the application
must requery the data. If two or more objects are using the same data in an OLE DB
application and one object changes the data, the other objects receive a notification
that the data has changed.</P>
<P>Basically, the memory buffer for the data is removed from the application and
placed in a stand-alone shared data object. Applications access this shared data
object using <I>Accessors</I>, which are similar to ODBC's Descriptor Handles. The
application can use pointers to the data rather than an actual copy of the data and
can share the data, providing quicker data access. An Accessor uses an array of binding
structures. Each structure describes a column of data, so the array describes the
entire table. The Accessor allows all needed columns to be bound at once instead
of requiring repeated calls to <TT>SQLBindCol</TT>, allowing for more efficient binding.</P>
<P>To find more information and to follow the development of OLE DB, check out Microsoft's
OLE DB Web site at <A HREF="http://www.microsoft.com/OLEDB/"><B>http://www.microsoft.com/OLEDB/</B></A>.
This site is one of the best sources of information for OLE DB. You can find the
OLE DB SDK kit, white papers on OLE DB, and tools for OLE DB development. Programming
magazines and other computer magazines are also a good source of information.
<H2><A NAME="Heading39"></A>Threading</H2>
<P>Every process has one or more threads. A <I>thread</I> is code that is to be sequentially
executed within a process. A process always has at least one thread, the primary
thread,<I> </I>and can have multiple threads in addition to the primary thread. In
a data entry routine, the primary thread might handle displaying the data being entered
while another thread updates the database once the data is entered. Threads can have
different priorities. A thread with a higher priority can interrupt a thread with
a lower priority. A thread will continue executing until one of the following happens:

<UL>
	<LI>The thread finishes executing its block of code.
	<LI>The thread is interrupted by a thread with a higher priority.
	<LI>The thread is interrupted by a user's action.
	<LI>The thread is interrupted by an operating system kernel's thread scheduler.
</UL>

<P>Each individual thread can run separate sections of code; one thread might perform
different functions within a process. Multiple threads can run the same section of
code. When multiple threads run the same section of code, each thread maintains a
separate code stack. Separate code stacks prevent the threads from getting lost and
tramping on each other. A process's global variables and resources are shared by
every thread in the process. These global variables have to be used with caution;
the values can be changed by another thread at any time.
<H3><A NAME="Heading40"></A>Single-Threading and Multithreading</H3>
<P>In a <I>single-threaded </I>process, only one action can happen at a time. This
approach was used in the older operating systems such as Windows 3.1. All incoming
calls to the thread are received through the Windows message queue.</P>
<P>Windows 95 and Windows NT introduced <I>multithreading,</I> which is more efficient
than single-threading. Multithreading allows an application to create more than one
thread of execution so that process-intensive applications do not stall or freeze
an application while waiting for the process to complete its execution. A single-threaded
process will just wait until the action is complete. Multithreading presents some
issues. It adds complexity to coding, testing, and debugging. Multithreaded applications
must avoid deadlocks and races. <I>Deadlocks</I> happen when each thread is waiting
for the other to do something, hanging the application. <I>Races</I> happen when
a thread finishes before another thread it depends on finishes. Races cause a thread
to use garbage data because the dependent thread has not provided legitimate values.</P>
<P>Multithreading, in its simplest form, is referred to as the <I>apartment model.</I>
A process that uses the apartment model uses multiple threads, but each COM Object
lives in only one thread, or apartment, and cannot be directly accessed by other
threads. A more sophisticated form of multithreading is the free-threading model.
This model allows multiple threads to access each COM Object simultaneously. A multithreaded
process can consist of one of these models or a combination of both. <B><BR>
<BR>
Apartment Model</B><SPACER TYPE="HORIZONTAL" SIZE="10"><B> </B>The <I>apartment model
</I>is sometimes referred to as a single-threaded apartment model since it is a group
of separate apartments or threads. Technically, all threading models use apartments.
The single-thread-per-process model, referred to here as single-threaded model, is
really one apartment for the entire process, whereas the apartment model is a group
of apartments. Free-threading is sometimes referred to as a multithreaded apartment
model since it consists of multiple threads in one apartment. For the purpose of
this section, we will refer to single-threaded processes as single-threaded processes,
and we will refer to multithreading processes as either apartment models or free-threading
models. The apartment model is a multithreaded process that contains only one COM
Object per thread. The COM Object lives inside a group that is referred to as an
apartment. All incoming calls are sent through the Windows message system. OLE synchronizes
these calls, so the process can receive calls while making calls. Each thread has
its own apartment, which is directly accessible by only one thread. Each apartment
can receive direct calls only from the thread that belongs to the apartment. Call
parameters need to be marshaled between apartments. OLE handles marshaling between
apartments through the Windows messaging system. <B><BR>
<BR>
Free-Threading Model </B><SPACER TYPE="HORIZONTAL" SIZE="10">As mentioned earlier,
a more sophisticated form of multithreading is the free-threading model. This model
allows multiple threads to access each COM Object simultaneously. Free-threading
is sometimes referred to as the multithreaded apartment model since the apartment
contains multiple threads. A free-threading process is a multithreaded process that
allows several threads to access a COM Object. Each COM Object is simultaneously
accessible by more than one process thread. COM Objects are responsible for synchronizing
incoming calls when using the free-threaded model; they must have their own message
handlers. Calls are not passed through the Windows messaging system, nor does ActiveX
synchronize the calls, since methods may be called from different processes simultaneously.</P>
<P>Apartments cannot receive calls while making calls; asynchronous calls are converted
to synchronous calls in free-threaded apartments. Objects must be able to handle
calls to their methods from other threads at any time and to handle calls from multiple
threads simultaneously.</P>
<P>All threads are contained within a single multithreaded apartment. Since all threads
reside in one apartment, there can be only one multithreaded apartment per process.
Parameters are passed directly to any thread in the apartment. Data does not need
to be marshaled between threads since all free-threads reside in one apartment.</P>
<P>You need to make sure the process's code is <I>thread-safe. </I>Thread-safe means
making sure the objects, data, and code owned by the thread are used by only that
thread and not by other threads. If a multithreaded application is not thread-safe,
the application will become confused and will not function properly. These problems
can be difficult to debug. <B><BR>
<BR>
Mixing Apartment and Free-Threading Models </B><SPACER TYPE="HORIZONTAL" SIZE="10">Apartment
and free-threading models can be combined within a single process. You can have only
one free-threaded apartment, but you can have one or more single-threaded apartments.
Interface pointers and other data must be marshaled between apartments. Calls to
objects within single-threaded apartments will be synchronized with Windows messages,
whereas calls to objects within the free-threaded apartment will not be synchronized
at all. OLE threading models provide the support for the interaction between clients
and servers with different threading models. As far as the calling object is concerned,
all calls to objects outside the object behave the same, regardless of how the object
being called is threaded. To the called object, the calls it receives behave identically,
regardless of the callers threading model.</P>
<P>Interaction between client and out-of-process servers is straightforward, whether
their threading models are the same or different. The client and server are in different
processes, and OLE handles the communication between these processes for you, using
standard marshaling and RPC.</P>
<P>The interaction between clients and in-process servers present some issues.</P>
<P>In-process servers do not call COM initialization routines, so you need to set
the threading in the registry by adding the <TT>ThreadingModel</TT> named value to
the <TT>InprocServer32</TT> key of the server. You can set the threading manually,
or you can use the OLE Viewer. Using the OLE Viewer to set the threading is as easy
as setting the Threading <U>M</U>odel on the <TT>Inproc</TT> Server subtab of the
Implementation tab.</P>
<P>The coding issues for in-process servers are too numerous and involved for the
scope of this chapter. For detailed information on coding issues, see the &quot;In-process
Server Threading Issues&quot; topic in the ActiveX SDK help files. <B><BR>
<BR>
Choosing a Multithreading Model</B><SPACER TYPE="HORIZONTAL" SIZE="10"><B> </B>Your
decision about which multithreading model to use depends on the function of the object.
For example, when creating a thread that interacts with a user, you may want to use
the apartment model since incoming OLE calls can be processed with the Windows messages
received. Because the apartment model is less complex, supporting it is easier than
supporting the free-threading model. OLE provides synchronization through messaging
for the apartment model, whereas the free-threading model needs to provide its own
synchronization and storage for thread specific data. More information on threading
is available. To learn more about threads in general, refer to the ActiveX SDK help
files under &quot;Processes and Threads.&quot; Specific coding help can be found
in the ActiveX SDK help files and in the help files for Visual C++. The Knowledge
Base on Microsoft's Web site contains information to help you understand basic threading
in general, as well as specific coding information. Many third party books that discuss
threading are also available.
<H2><A NAME="Heading41"></A>Engineering for the Future</H2>
<P>For the past two years, Microsoft has been rapidly releasing new tools for ActiveX
development. Visual Basic 5.0 brings significant changes to the VB world. VB can
now create ActiveX controls, ActiveX documents, and a whole host of servers and components.
The fact that VB now supports a native code compiler also makes it attractive.</P>
<P>Visual Basic 5.0's language is now Visual Basic for Applications (VBA), so code
written for Microsoft Office 97 products is the same as code written in native VB.
Office 97 is a significant improvement over Microsoft Office 95. For starters, Microsoft
Word now uses VBA rather than the nonstandard WordBasic. Using ActiveX controls in
Office 97 is much easier than it was in Office 95. You basically select a registered
control and drop it in the document, spreadsheet, and so on. Office 97 also has some
VB improvements since it now uses VBA 5.0.</P>
<P>A new visual language tool has arrived from Microsoft--Visual J++. Visual J++
is Microsoft's Java development tool. It offers a visual development environment
complete with a compiler. Microsoft also offers a Java SDK on its Web site. Java
SDK can be used with or without Visual J++ as a front end. The Java SDK includes
access to the Windows APIs, allowing developers to create sophisticated Windows systems.</P>
<P>Along with the languages used to build applications, advances are being made in
handling the data. Microsoft has released an object-driven data access tool called
OLE DB. OLE DB is a set of APIs that provide ActiveX interfaces to all forms of data
throughout the enterprise. Along with providing access to databases, OLE DB will
provide access to such things as text in an e-mail or spreadsheet. Distributing data
over the Internet and an intranet is getting easier. Microsoft's Advanced Data Connector
(ADC) allows the developer to create applications that interact with databases over
the Internet or an intranet. ADC allows you to cache data on the client machine,
manipulate that data, and integrate that data with data-aware ActiveX controls.</P>
<P>Microsoft has also developed a technology for distributing applications over networks,
including the Internet and an intranet, called Distributed Component Object Model
(DCOM). DCOM extends ActiveX by enabling application objects to communicate directly
over networks. To make the development, deployment, and management of server applications
over a network, intranet, or the Internet, Microsoft has released Transaction Server.
Transaction Server insulates the developer from dealing with system issues such as
connectivity, security, thread management, and data management.</P>
<P>For the design, development, and management of a Web site, Microsoft offers FrontPage.
FrontPage provides Web site developers with the tools needed to completely develop
a Web site. Microsoft offers another package, ActiveX Control Pad, for developing
individual Web pages using a form approach similar to VB. This package is a good
way to quickly test ActiveX controls for the Internet. For developing Web applications,
Microsoft offers Visual InterDev. Visual InterDev provides a visual development environment
that includes the tools necessary for developing a Web application in its entirety.</P>
<P>Microsoft is trying to develop solutions to leverage companies' existing knowledge
base so that developing ActiveX components has a shorter learning curve. Microsoft
is upgrading its existing tools so the tools can be used for ActiveX development.
When Microsoft releases new tools, those tools have the look and feel of a company's
existing tools. Companies that have expertise with Microsoft products will find the
task of moving to ActiveX easier.</P>
<P>Table 16.9 lists the Web addresses that provide information on the products mentioned.
To keep on top of Microsoft's new and updated products, you can frequently visit
Microsoft's Web page at <A HREF="http://www.microsoft.com"><B>http://www.microsoft.com</B></A>,
especially the Internet developer page, <A HREF="http://www.microsoft.com/intdev/"><B>http://www.microsoft.com/intdev/</B></A>,
and<B> </B>the Microsoft Developer Network(MSDN) page at <A HREF="http://www.microsoft.com/msdn/"><B>http://www.microsoft.com/msdn/</B></A>.
MSDN CDs are also a good source of information. <BR>
<BR>

<TABLE BORDER="1" WIDTH="100%">
	<CAPTION><B>Table 16.9 </B><SPACER TYPE="HORIZONTAL" SIZE="10"><B>Where to Find Information
		on the Products Discussed</B></CAPTION>
	<TR ALIGN="LEFT" rowspan="1">
		<TD ALIGN="LEFT" VALIGN="TOP"><B>Product</B></TD>
		<TD ALIGN="LEFT" VALIGN="TOP"><B>Address</B></TD>
	</TR>
	<TR ALIGN="LEFT" rowspan="1">
		<TD ALIGN="LEFT" VALIGN="TOP">Visual Basic</TD>
		<TD ALIGN="LEFT" VALIGN="TOP"><A HREF="http://www.microsoft.com/vbasic"><B>http://www.microsoft.com/vbasic</B></A></TD>
	</TR>
	<TR ALIGN="LEFT" rowspan="1">
		<TD ALIGN="LEFT" VALIGN="TOP">Office 97</TD>
		<TD ALIGN="LEFT" VALIGN="TOP"><A HREF="http://www.microsoft.com/office"><B>http://www.microsoft.com/office</B></A></TD>
	</TR>
	<TR ALIGN="LEFT" rowspan="1">
		<TD ALIGN="LEFT" VALIGN="TOP">VBA</TD>
		<TD ALIGN="LEFT" VALIGN="TOP"><A HREF="http://www.microsoft.com/vba"><B>http://www.microsoft.com/vba</B></A></TD>
	</TR>
	<TR ALIGN="LEFT" rowspan="1">
		<TD ALIGN="LEFT" VALIGN="TOP">Visual J++</TD>
		<TD ALIGN="LEFT" VALIGN="TOP"><A HREF="http://www.microsoft.com/visualj"><B>http://www.microsoft.com/visualj</B></A></TD>
	</TR>
	<TR ALIGN="LEFT" rowspan="1">
		<TD ALIGN="LEFT" VALIGN="TOP">Java SDK</TD>
		<TD ALIGN="LEFT" VALIGN="TOP"><A HREF="http://www.microsoft.com/java/sdk"><B>http://www.microsoft.com/java/sdk</B></A></TD>
	</TR>
	<TR ALIGN="LEFT" rowspan="1">
		<TD ALIGN="LEFT" VALIGN="TOP">OLE DB</TD>
		<TD ALIGN="LEFT" VALIGN="TOP"><A HREF="http://www.microsoft.com/oledb"><B>http://www.microsoft.com/oledb</B></A></TD>
	</TR>
	<TR ALIGN="LEFT" rowspan="1">
		<TD ALIGN="LEFT" VALIGN="TOP">ADC</TD>
		<TD ALIGN="LEFT" VALIGN="TOP"><A HREF="http://www.microsoft.com/adc"><B>http://www.microsoft.com/adc</B></A></TD>
	</TR>
	<TR ALIGN="LEFT" rowspan="1">
		<TD ALIGN="LEFT" VALIGN="TOP">DCOM</TD>
		<TD ALIGN="LEFT" VALIGN="TOP"><A HREF="http://www.microsoft.com/oledev"><B>http://www.microsoft.com/oledev</B></A></TD>
	</TR>
	<TR ALIGN="LEFT" rowspan="1">
		<TD ALIGN="LEFT" VALIGN="TOP">Transaction Server</TD>
		<TD ALIGN="LEFT" VALIGN="TOP"><A HREF="http://www.microsoft.com/transaction"><B>http://www.microsoft.com/transaction</B></A></TD>
	</TR>
	<TR ALIGN="LEFT" rowspan="1">
		<TD ALIGN="LEFT" VALIGN="TOP">FrontPage</TD>
		<TD ALIGN="LEFT" VALIGN="TOP"><A HREF="http://www.microsoft.com/frontpage"><B>http://www.microsoft.com/frontpage</B></A></TD>
	</TR>
	<TR ALIGN="LEFT" rowspan="1">
		<TD ALIGN="LEFT" VALIGN="TOP">ActiveX Control Pad</TD>
		<TD ALIGN="LEFT" VALIGN="TOP"><A HREF="http://www.microsoft.com/workshop/author/cpad"><B>http://www.microsoft.com/workshop/author/cpad</B></A></TD>
	</TR>
	<TR ALIGN="LEFT" rowspan="1">
		<TD ALIGN="LEFT" VALIGN="TOP">Visual Interdev</TD>
		<TD ALIGN="LEFT" VALIGN="TOP"><A HREF="http://www.microsoft.com/vinterdev"><B>http://www.microsoft.com/vinterdev</B></A></TD>
	</TR>
	<TR ALIGN="LEFT" rowspan="1">
		<TD ALIGN="LEFT" VALIGN="TOP">ActiveX</TD>
		<TD ALIGN="LEFT" VALIGN="TOP"><A HREF="http://www.microsoft.com/activex"><B>http://www.microsoft. com/activex</B></A></TD>
	</TR>
</TABLE>

<H2><A NAME="Heading42"></A>From Here...</H2>
<P>ActiveX is a constantly changing world. New technologies and tools are coming
out faster than any one person can keep up with, let alone an entire industry. Not
only are you responsible for creating sound software, you also are now responsible
for its interaction with other components, applications, and computers. Unfortunately,
we have no easy answer for how to keep up with the onslaught known as ActiveX.</P>
<P>Microsoft does publish a huge volume of information about new technologies and
tools on its Web site on the Internet. Also, the Internet newsgroups are especially
helpful in locating resources (human and digital) to assist you. Hundreds of developers
every day access the forums, exchanging information about ActiveX development.</P>
<P>When it comes to ActiveX development, the only advice that we can give you is
to be patient, take your vacation time when you've earned it (believe me, your work
will be waiting for you), and study a lot. Don't worry if you don't have all the
answers; no one does.</P>

<P>We truly hope that you gain as much from this book as we did in writing it.


<!-- </td>

</td>
</tr>
</table> -->
</td>

</td>
</tr>
</table>

<!-- begin footer information -->

<MAP NAME="footer">
<AREA SHAPE=RECT COORDS="0,0,62,26" HREF="/">
<AREA SHAPE=RECT COORDS="62,0,135,26" HREF="http://www.developer.com/about/">
<AREA SHAPE=RECT COORDS="135,0,199,26" HREF="/search.html">
<AREA SHAPE=RECT COORDS="200,0,274,26" HREF="/subscribe/">
<AREA SHAPE=RECT COORDS="275,0,335,25" HREF="http://www.developer.com/contact/adinfo.html">
<AREA SHAPE=RECT COORDS="335,0,417,25" HREF="http://www.developer.com/contact/">
<AREA SHAPE=RECT COORDS="418,0,467,26" HREF="http://www.developer.com/about/faq.html">
</MAP>

<P>
<table width="640" cellpadding="0" cellspacing="0" border="0">
<tr>
<TD WIDTH="130"></TD>
<td width="468">
<IMG SRC="/images/footer/footerfile.gif" ALT="footer nav" width="467" height="26" BORDER="0" usemap="#footer" ismap>
</td>
</tr>
<tr>
<TD WIDTH="130"></TD>
<td width="468"> 
<font face=arial,helvetica size="1"> Use of this site is subject certain <a href="http://www.developer.com/legal/">Terms &amp; Conditions.</a><br>
Copyright (c) 1996-1999 <A HREF="http://www.earthweb.com/">EarthWeb, Inc.</A>.  All rights reserved.  Reproduction in whole or in part in any form or medium without express written permission of EarthWeb is prohibited.
<a href="http://www.earthweb.com/privacy.html">Please read our privacy policy for details.</a>
</td>
</tr>
</table>

</BODY>
</HTML>
