<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2//EN">
<!--last modified on Tue, Apr 15, 1997 1:52 PM-->
<HTML>

<HEAD>
<!-- This document was created from RTF source by rtftohtml version 3.0.1 -->

	<META NAME="GENERATOR" Content="Symantec Visual Page 1.0">
	<META NAME="Author" Content="Steph Mineart">
	
	<title>ActiveX Programming with Visual C++ -- Chapter 15</TITLE>
</HEAD>
<MAP NAME="leftnav">
<AREA SHAPE=RECT COORDS="2,2,111,33" HREF="/reference/dir.programminglanguages.html">
<AREA SHAPE=RECT COORDS="3,35,111,63" HREF="/reference/dir.databases.html">
<AREA SHAPE=RECT COORDS="1,62,111,95" HREF="/reference/dir.security1.html">
<AREA SHAPE=RECT COORDS="0,94,111,125" HREF="/reference/dir.webservices.html">
<AREA SHAPE=RECT COORDS="1,127,111,156" HREF="/reference/dir.networkservices1.html">
<AREA SHAPE=RECT COORDS="2,157,111,185" HREF="/reference/dir.middleware.html">
<AREA SHAPE=RECT COORDS="2,185,111,217" HREF="/reference/dir.components.html">
<AREA SHAPE=RECT COORDS="2,218,111,248" HREF="/reference/dir.operatingsystems.html">
<AREA SHAPE=RECT COORDS="2,247,111,277" HREF="/reference/dir.userinterfaces.html">
<AREA SHAPE=RECT COORDS="2,278,111,307" HREF="/reference/dir.groupwareandcollaboration1.html">
<AREA SHAPE=RECT COORDS="2,307,111,339" HREF="/reference/dir.contentmanagement.html">
<AREA SHAPE=RECT COORDS="2,338,111,370" HREF="/reference/dir.funandgames1.html">
<AREA SHAPE=RECT COORDS="0,369,111,404" HREF="/reference/dir.hardware1.html">
</MAP>

<MAP NAME="othersites">
<AREA SHAPE=RECT COORDS="1,1,116,13" HREF="http://www.developer.com/">
<AREA SHAPE=RECT COORDS="1,13,116,26" HREF="http://www.earthwebdirect.com/">
<AREA SHAPE=RECT COORDS="1,26,116,39" HREF="http://www.htmlgoodies.com/">
<AREA SHAPE=RECT COORDS="1,39,116,53" HREF="http://www.javagoodies.com/">
<AREA SHAPE=RECT COORDS="1,53,116,65" HREF="http://www.jars.com/">
<AREA SHAPE=RECT COORDS="1,65,116,77" HREF="http://www.intranetjournal.com/">
<AREA SHAPE=RECT COORDS="1,77,116,92" HREF="http://www.itlibrary.com/">
<AREA SHAPE=RECT COORDS="1,92,116,105" HREF="http://www.javascripts.com/">
<AREA SHAPE=RECT COORDS="1,105,116,118" HREF="http://www.datamation.com/">
<AREA SHAPE=RECT COORDS="0,118,116,130" HREF="http://www.gamelan.com/">
<AREA SHAPE=RECT COORDS="0,130,116,142" HREF="http://www.roadcoders.com/">
<AREA SHAPE=RECT COORDS="0,142,116,156" HREF="http://www.itknowledge.com/">
<AREA SHAPE=RECT COORDS="0,155,116,167" HREF="http://www.y2kinfo.com/">
</MAP>

<BODY BACKGROUND="/images/curve_itlibrary_white.gif" BGCOLOR="#FFFFFF" TEXT="#000000" LINK="#DD0000" VLINK="#999999" ALINK="#FF0000">

<!--Begin Header Table -->

<TABLE width="640" cellpadding="0" cellspacing="0" border="0">
<TR>
<TD VALIGN="TOP" WIDTH="640" COLSPAN="3">
<A HREF="http://www.earthweb.com" target="resource window"><IMG SRC="/images/eweb_banner.gif" VSPACE="6" WIDTH="640" HEIGHT="25" ALT="Brought to you by EarthWeb" border="0"><BR></a>
</TD>
</TR>
<TR>
<TD VALIGN="TOP" WIDTH="150">

<A HREF="/"><IMG SRC="/images/small_logo.gif" WIDTH=103 HEIGHT=82 ALT="IT Library Logo" border="0"></a>
<P>
<!--Begin Subscribe Box Table -->
<TABLE border="0" cellpadding="0" cellspacing="0" WIDTH="100">
<TR>
<TD>

</TD>
</TR>
</TABLE>
<!--End Subscribe Box Table -->


</td>
<TD>
<img src="/images/dotclear.gif" WIDTH="15" HEIGHT="1">
</TD>
<TD>

<!--  Begin Ads ITLBAN //-->

<SCRIPT LANGUAGE="JavaScript">
<!-- Hide from old browsers

now = new Date();
random = now.getTime();

// Modify to reflect site specifics
site = "http://diradserver.developer.com";
target = "/AREA=ITLBAN";
//target = "/AREA=ITLBAN"; //Testing
browser = browserCheck();

if(browser == "NAV") {
 document.write(layerCode());
} else if (browser == "IE") {
 document.write(frameCode());
} else if (browser == "OTHER") {
 document.write(htmlCode());
}

//returns string - browser ID -- either NAV . IE . OTHER
function browserCheck() {
 var out = "";
 if (navigator.appName.indexOf('Netscape') != -1) {     //browser is netscape
  //checking version numbers
  if(navigator.appVersion.substring(0,4) >= "4.02") {
   out = "OTHER";
  } else {
   out = "OTHER";
  }
 } else if (navigator.appName.indexOf('Microsoft') != -1) {    //browser is Explorer
  out = "OTHER";
 } else {
  out = "OTHER";
 }
 return out;
}

//returns a string - layer code for nav 4.05
function layerCode() {
 var out = '<ILAYER SRC="' + site + '/hserver' + target + '?' + random + '"';
 out = out + ' VISIBILITY=show WIDTH=500 HEIGHT=60 BGCOLOR="#ffffff"></ILAYER>';
 return out;
}

//returns a string - frame code for ie 4.05
function frameCode() {
 var out = '<IFRAME SRC="' + site + '/hserver' + target + '?' + random + '"';
 out = out + ' NORESIZE SCROLLING=NO HSPACE=0 VSPACE=0 FRAMEBORDER=0 MARGINHEIGHT=0 MARGINWIDTH=0 WIDTH=500 HEIGHT=60></IFRAME>';
 return out;
}

//returns a string - html code for non capable browsers
function htmlCode() {
 var out = '<A target="new win" HREF="' + site + '/accipiter/adclick.exe' + target + '?' + random + '">';
 out = out + '<IMG SRC="' + site + '/accipiter/adserver.exe' + target + '?' + random + '"><BR><CENTER><FONT SIZE="-2">Click here to visit our sponsor</FONT></CENTER></A>';
 return out;
}

// End Hide -->
</SCRIPT>
<NOSCRIPT>
<A target="new win"  HREF="http://diradserver.developer.com/accipiter/adclick.exe/AREA=ITLBAN">
<IMG SRC="http://diradserver.developer.com/accipiter/adserver.exe/AREA=ITLBAN" WIDTH=500 HEIGHT=60><BR>
<CENTER><FONT SIZE="-2">Click here to visit our sponsor</FONT></CENTER></A>
</NOSCRIPT>

<!-- ITLBAN End Ads //-->


</td>
</TR>
</TABLE>

<!--End Header Table -->

<!--Begin Main Table -->

<TABLE width="640" cellpadding="0" cellspacing="0" border="0">
<TR>

<!--Begin Left Navigation column -->

<TD VALIGN="TOP" WIDTH="140">
<FORM action="/subscribe/list.cgi" method="post">

<INPUT name='email' value='your e-mail' size="11"><INPUT type='hidden'  name='state' value='Subscribe'><br><INPUT type='image' value='subscribe' img src='/images/subscribe.gif' border='0' vspace='3' ></center>

</form>

<IMG SRC="/images/leftnav.gif" WIDTH=111 HEIGHT=404 ALT="nav" border="0"  ISMAP USEMAP="#leftnav">
<p>
<a href="http://www.earthwebdirect.com/"><IMG SRC="/images/earthwebdirect.gif" WIDTH=126 HEIGHT=30 ALT="EarthWeb Direct" border="0"></a>
<P>
<font color="ffffff" face="arial, helvetica" size="2">EarthWeb sites:</FONT>
<IMG SRC="/images/sitelisting.gif" WIDTH="102" HEIGHT="167" ALT="other sites" border="0" USEMAP="#othersites" ismap>
</td>

<!--End Left Navigation column -->
<!-- spacer column  -->

<TD width="40">
<img src="/images/dotclear.gif" WIDTH="40" HEIGHT="1" border=0>
</TD>

<!--Begin Content Column -->

<TD VALIGN="TOP" width="500">

<P>



<BODY TEXT="#000000" BGCOLOR="#FFFFFF">

<H1>Chapter 15<BR>
Testing and Using Your Components</H1>

<UL>
	<LI><A HREF="#Heading1">Testing and Using Your Components</A>
	<UL>
		<LI><A HREF="#Heading3">ActiveX Containers and Controllers</A>
		<UL>
			<LI><A HREF="#Heading4">Using Visual Basic as a Container</A>
			<LI><A HREF="#Heading5">Using Microsoft Visual C++ as a Container</A>
			<LI><A HREF="#Heading6">HTML and Web Browsers</A>
			<LI><A HREF="#Heading7">Listing 15.1 SAMPLEIE.HTM--Using an ActiveX Control in HTML
			Code</A>
			<LI><A HREF="#Heading8">Listing 15.2 SAMPLENN.HTM--Converted HTML Document</A>
			<LI><A HREF="#Heading9">ActiveX Control Pad</A>
			<LI><A HREF="#Heading10">Using the Microsoft Access, Word, and Excel Applications
			as ActiveX Control Containers</A>
		</UL>
		<LI><A HREF="#Heading11">Tools for Testing Your Component</A>
		<UL>
			<LI><A HREF="#Heading12">Visual C++ ActiveX Control Test Container</A>
			<LI><A HREF="#Heading13">Users</A>
			<LI><A HREF="#Heading14">Automated Tools</A>
		</UL>
		<LI><A HREF="#Heading15">From Here...</A>
	</UL>
</UL>

<P>
<HR SIZE="4">

<H1><A NAME="Heading1"></A>Testing and Using Your Components</H1>

<UL>
	<LI><B>Using Visual Basic as a container</B> 
<SPACER TYPE="VERTICAL" SIZE="2">
 Microsoft Visual Basic provides a rapid development environment for creating containers.
	Check out how to use an ActiveX control in Visual Basic.
	<P>
	<LI><B>Using Visual C++ as a container</B> 
<SPACER TYPE="VERTICAL" SIZE="2">
 Microsoft Visual C++ is one of the more difficult tools to use as a container, but
	using the Foundation Classes makes this easier.
	<P>
	<LI><B>ActiveX controls in Web pages</B> 
<SPACER TYPE="VERTICAL" SIZE="2">
 Using ActiveX controls in HTML greatly enhances Web pages. Instead of just containing
	information, Web pages can now be pieces of a system. Check out how to use ActiveX
	controls in Web pages.
	<P>
	<LI><B>Using Microsoft Access, Microsoft Excel, and Microsoft Word as containers</B>
	
<SPACER TYPE="VERTICAL" SIZE="2">
 Microsoft Office 97 has greatly improved its ActiveX capabilities. Find out how
	to use ActiveX controls in Microsoft Access, Microsoft Excel, and Microsoft Word.
	<P>
	<LI><B>Visual C++ OLE Control Test Container</B> 
<SPACER TYPE="VERTICAL" SIZE="2">
 Microsoft Visual C++ provides the OLE Control Test Container to test your control
	without ever leaving Visual C++.
</UL>

<P>Once you have created your ActiveX component, the next step is to use and test
your component. You will not typically wait to try out your component until after
it is completely implemented. More than likely, the first thing you will want to
do is compile your code and try to use your component before you've added any significant
functionality. You need to be aware of the types of container and testing applications
that are available to you as a developer.</P>
<P>Even more critical than the actual testing of the component is testing it as soon
as possible. Even with all of the banners being raised about reuse and compatibility,
there are still issues to be aware of, which depend upon the tools you use. Some
containers or tools may not support the features that your component supports, and
even worse, in some cases, container implementations may differ, resulting in slightly
different behavior. What may work in VB may result in a crash in VC++. A word of
advice: Test your components often and with all of the tools that you plan to use
your components with.</P>
<P>This chapter will focus on the types and numbers of tools available that can host
ActiveX Controls, as well as the tools that you can use to test your controls. Even
though the primary focus of the chapter is on ActiveX Controls, almost all of the
applications mentioned can launch and use ActiveX Automation Servers and even ActiveX
COM objects. Because there are so many and they change so rapidly, it is beyond the
scope of this book to address all of the ActiveX capabilities of all the tools available
to you. You will need to research the specific tool to see to what extent it supports
ActiveX and COM.
<H2><A NAME="Heading3"></A>ActiveX Containers and Controllers</H2>
<P>Applications that use ActiveX controls are called <I>container applications, </I>or
just containers. In this chapter, you will discover how to use your control in Microsoft
Visual Basic, Microsoft Visual C++, Web browsers, Microsoft ActiveX Control Pad,
and the Microsoft Office tools: Access, Word, and Excel. Visual Basic is probably
the easiest tool to use, and Visual C++ is probably the hardest. This chapter will
explain how to insert an ActiveX control into these containers, how to change the
control's properties, and how to code the events contained in the control. <BR>
<BR>
<IMG SRC="bar.gif" WIDTH="480" HEIGHT="6" ALIGN="BOTTOM" BORDER="0"></P>


<BLOCKQUOTE>
	<P><B>NOTE:</B> If a container application is to be distributed, all controls added
	to a container must be distributed with the container.

</BLOCKQUOTE>

<P><IMG SRC="bar.gif" WIDTH="480" HEIGHT="6" ALIGN="BOTTOM" BORDER="0">
<H3><A NAME="Heading4"></A>Using Visual Basic as a Container</H3>
<P>To place a control in a Visual Basic application, you can open an existing project
or create a new one. To create a new project, select <U>F</U>ile, <U>N</U>ew Project
from the Visual Basic menu, select Standard EXE from the New Project dialog, and
click the OK button. To open an existing project, select <U>F</U>ile, <U>O</U>pen
Project from the Visual Basic menu. If you want to open a recent project, select
the Recent tab, select the desired project from the File list box, and click the
<U>O</U>pen button. If the project you are looking for is not listed on the Recent
tab, select the Existing tab, and then select your project from the proper directory.
After you have selected the project, click the <U>O</U>pen button to open the project.</P>
<P>Next you need to create a form or open an existing one. To create a form, select
<U>P</U>roject, Add <U>F</U>orm from the Visual Basic menu. If the Add form dialog
appears, click Form on the New tab, and then click the form in the project window.
To open an existing form, click the form in the project window, and then click the
View Form button.</P>
<P>Now you need to add the control to the project. Select <U>P</U>roject, C<U>o</U>mponents
from the main menu, which brings up the Components dialog (see fig 15.1). Make sure
that the <U>S</U>elected Items Only check box, on the lower-right side of the Components
dialog, is not selected. The <U>S</U>elected Items Only option will limit the display
to the items previously selected. Search for the name of the control you want to
add on the Controls tab, and click the check box next to the control. To see the
path of a particular control, click the control name, and the path will display in
the frame at the bottom of the dialog. <B><BR>
<BR>
</B><A HREF="art/15/15fig01.jpg"><B>FIG. 15.1</B></A> <I><BR>
Select </I><CITE>P</CITE><I>roject, C</I><CITE>o</CITE><I>mponents to display the
Components dialog.</I></P>
<P>If the control is not registered, it will not appear on the Controls tab. To select
an unregistered control, click the <U>B</U>rowse button, select your control from
the proper directory, and click the Open button to register your control.</P>
<P>After the control is checked, click the <U>A</U>pply button to add the control
to the Toolbox, and then click the OK button to close the Components dialog. If the
control file added contains more than one control, you will see more than one tool
added to the Toolbox. If the <TT>MFCControl</TT> control was added, you will see
three new tools, labeled with a purple OCX. If each control had a different icon,
you would see three different icons on the Toolbox. If you drag the mouse over the
icons on the Toolbox, tool tips appear to tell you which control you are selecting.
To place the control on the form, double-click the new tool button or click the new
tool button, and then click and drag the form. If the toolbox is not displayed, select
<U>V</U>iew, Toolbo<U>x</U> from the Visual Basic menu.</P>
<P>To set the properties at design time, you need to use the Properties grid located
on the right side of the screen, which lists all the changeable properties and their
current values. If the Properties grid is not displayed, click the control on the
form, and press F4 to display the Properties grid. The left column contains the property
names, and the right contains the current property values. Click the Alphabetic tab
on the Properties grid to list the properties alphabetically, or select the Categorized
tab to view the properties by property category. To change a value, click the cell
containing the name of the property you want to change, and then click property value
cell in the same row and edit the value.</P>
<P>Setting the properties in code is almost as easy. To set a control in code use
following syntax:</P>
<P><FONT COLOR="#0066FF"><TT>ControlName.PropertyName = Value</TT></FONT></P>
<P><TT>ControlName</TT> is the name of the control, <TT>PropertyName</TT> is the
name of the property, and <TT>Value</TT> is the new property value or a variable
containing the value.</P>
<P>Retrieving a property value is the reverse of the preceding:</P>
<P><TT>Variable = ControlName.PropertyNameVariable</TT> in this case is used to hold
the value of the property.</P>
<P>To execute the methods of the control, use the following syntax:</P>
<P><FONT COLOR="#0066FF"><TT>Variable = ControlName.Method Parameter1,...ParameterN</TT></FONT></P>
<P><TT>Variable</TT> is the name of the variable that will hold the return value
of the method. If the method has no return value, <TT>Variable</TT> and the <TT>=</TT>
will be eliminated. <TT>ControlName</TT> is the name of the control, <TT>Method</TT>
is the name of the method, and <TT>Parameter1,...ParameterN</TT><I> </I>represents
any parameters to be passed to the method.</P>
<P>The final step in the design process is coding the events. To code an event, follow
these steps:

<OL>
	<LI>If the Project Explorer window is not visible, Select <U>V</U>iew, <U>P</U>roject
	Explorer. The Project Explorer window appears.
	<P>
	<LI>Select the form that contains the control, and then select <U>V</U>iew, <U>C</U>ode
	to display the Code window (see fig. 15.2).
	<P><A HREF="art/15/15fig02.jpg"><B>FIG. 15.2</B></A><B> </B><I><BR>
	Select </I><CITE>V</CITE><I>iew, </I><CITE>C</CITE><I>ode from the Visual Basic menu
	to display the Code window.</I></P>
	<LI>Select the control you want to add the event code for from the Object combo box,
	which is the combo box on the left.
	<P>
	<LI>Select the event you want to code from the Procedure combo box, which is the
	combo box on the right.
	<P>
	<LI>Enter the code between the <TT>Private Sub</TT> and <TT>End Sub</TT> statements.
</OL>

<P>Repeat Steps 4 and 5 to code any of the other events contained in the control.</P>
<P>If you change your control, don't forget to recompile your Visual Basic executable
to prevent errors.</P>
<P>You can find more information on using ActiveX controls in Visual Basic in the
Visual Basic help files or the Knowledge Base articles on Microsoft's Web site (<A
HREF="http://www.microsoft.com/kb/"><B>http://www.microsoft.com/kb/</B></A><B>)</B>.
<H3><A NAME="Heading5"></A>Using Microsoft Visual C++ as a Container</H3>
<P>The easiest way to use your control in a Microsoft Visual C++ application is to
use the Microsoft Foundation Classes (MFC) with a dialog. When you first create an
application that will be using ActiveX controls, be sure to check the ActiveX Cont<U>r</U>ols
option in Step 3 of the MFC AppWizard (see fig. 15.3). If you do not select this
option, you will have to add a call to <TT>AfxEnableControlContainer</TT> in the
application's <TT>InitInstance</TT> member function (see fig. 15.4). <B><BR>
<BR>
</B><A HREF="art/15/15fig03.jpg"><B>FIG. 15.3</B></A> <I><BR>
Here is where you check the ActiveX Cont</I><CITE>r</CITE><I>ols option.</I></P>
<P><A HREF="art/15/15fig04.jpg"><B>FIG. 15.4</B></A> <I><BR>
You add a call to <TT>AfxEnableControl Container</TT> in the application's <TT>InitInstance</TT>
member function.</I></P>
<P>To add your control to a dialog, follow these steps:

<OL>
	<LI>Select the ResourceView tab of the Project Workspace window, click the &quot;+&quot;
	next to the project's resources folder, click the &quot;+&quot; next to the Dialog
	folder, and then double-click the ID for the dialog. These steps will display the
	dialog in the Dialog Editor window.
	<P>
	<LI>From the <U>P</U>roject menu, select Add To Com_ponents and Controls to display
	the Components and Controls Gallery dialog (see fig. 15.5).
	<P><A HREF="art/15/15fig05.jpg"><B>FIG. 15.5</B></A> <I><BR>
	Select </I><CITE>P</CITE><I>roject, </I><CITE>A</CITE><I>dd To Project, Com</I><CITE>p</CITE><I>onents
	and Controls to display the Components and Controls Gallery dialog.</I></P>
	<LI>Double-click the Registered ActiveX Controls folder to display a list of ActiveX
	controls.
	<P>
	<LI>Scroll through the list of controls to find the icon for your control. Select
	the icon and click the In<U>s</U>ert button to add the control to your dialog, which
	will bring up a message box asking &quot;Insert this component?&quot; Click the OK
	button. This will bring up the Confirm Classes dialog.
	<P>
	<LI>Click the OK button to generate the wrapper class and to add the control to the
	Controls Toolbar; the Confirm Classes dialog will close automatically. The wrapper
	class serves as an interface between your application and the control.
	<P>
	<LI>Click the <U>C</U>lose button on the Components and Controls Gallery dialog.
	<P>
	<LI>Click and drag the control from the Controls Toolbar to the dialog to place the
	control on the dialog.
</OL>

<P>To set the properties of the control at design time, click the control on the
dialog, and select <U>V</U>iew, P<U>r</U>operties from the Developer Studio menu.
The Control Properties dialog will appear (see fig. 15.6). Click the Keep Visible
Pin to keep the dialog from closing. A property tab is available for General properties,
All properties, and any property pages you defined in your control. General properties
are the base set of properties assigned to all controls on the dialog. All properties
are stock properties you defined in the control. To change a property value, click
the tab containing the name of the property you want to change, and then set the
value for the property. <B><BR>
<BR>
</B><A HREF="art/15/15fig06.jpg"><B>FIG. 15.6</B></A> <I><BR>
Use the Control Properties dialog to set the properties for the control.</I></P>
<P>The easiest way to access the properties and methods of the control in code is
to create member variables that coincide with the control. To create the member variables,
follow these steps:

<OL>
	<LI>Select <U>V</U>iew, Class<U>W</U>izard to display the MFC ClassWizard dialog.
	<P>
	<LI>Select the Member Variables tab.
	<P>
	<LI>Make sure the Dialog class appears in the Class <U>n</U>ame text box.
	<P>
	<LI>In the Control <U>I</U>Ds list box, select the ID for the control.
	<P>
	<LI>Click the <U>A</U>dd Variable button to add the member variable. The Add Member
	Variable dialog appears.
	<P>
	<LI>In the Member variable <U>n</U>ame text box, enter a name for the member variable.
	A good naming standard is to enter the control name prefaced with <TT>m_</TT><I>.</I>
	<P>
	<LI>Make sure the <U>C</U>ategory combo box still contains &quot;<TT>Control</TT>,&quot;
	and click the OK button. The other choices are for the control's exposed properties.
	<P>
	<LI>Click the OK button on the MFC ClassWizard dialog to accept the member variable.
	ClassWizard defines the member variable in the dialog class and adds a Dialog Data
	Exchange (<TT>DDX_Control</TT>) call to the dialog's implementation of the <TT>DoDataExchange</TT>
	function.
</OL>

<P>Now that the member variable is created, setting and retrieving properties and
executing methods is fairly simple. Manipulating the properties requires using the
functions in the wrapper class designed to do so. These functions are added to the
wrapper class by ClassWizard. In the <TT>MFCControl</TT> control, the functions to
use for setting properties include <TT>SetBackColor</TT>, <TT>SetAlignment</TT>,
and <TT>SetCaptionProp</TT>. The functions for retrieving properties include <TT>GetReadyState</TT>,
<TT>GetBackColor</TT>, <TT>GetAlignment</TT>, and <TT>GetCaptionProp</TT>. To use
these prop- erty functions, you use the following syntax:</P>
<P><FONT COLOR="#0066FF"><TT>Variable = WrapperClassVariable.Function (Parameter1,...ParameterN).</TT></FONT></P>
<P><TT>Variable</TT><I> </I>is used to hold a return value from the function; this
will not be used if there is no return. <TT>WrapperClassVariable</TT><I> </I>is the
wrapper class variable ClassWizard defined in the dialog header file. <TT>Function</TT><I>
</I>is the name of the function being used to retrieve or set the property, and <TT>Parameter1,...ParameterN</TT><I>
</I>represents parameters that need to be passed to the function.</P>
<P>Executing a method is basically the same as calling a property function. To execute
a method, use the following syntax:</P>
<P><FONT COLOR="#0066FF"><TT>Variable = WrapperClassVariable.MethodName(Parameter1,...ParameterN)</TT></FONT></P>
<P><TT>Variable</TT> is used to hold a return value if the method returns a value.
Again, <TT>WrapperClassVariable</TT><I> </I>is the wrapper class variable ClassWizard
defined in the dialog header file. <TT>MethodName</TT> is the name of the method
you want to execute, and <TT>Parameter1,...ParameterN</TT><I> </I>represent parameters
that need to be passed to the method.</P>
<P>Okay, now for coding the events. If you have ever created event handlers for a
button, radio button, or any other standard control in a dialog, you already know
how to set up event handling for your custom control; the setup is the same. You
use the Message Maps tab of the ClassWizard to create an <I>event sink map, </I>which
is basically an outline, or map, of event handlers maintained by ClassWizard. When
your control fires an event, the event handler that is mapped to that event is executed.</P>
<P>To create an event handler for an event, use the following steps:

<OL>
	<LI>Select <U>V</U>iew, Class<U>W</U>izard to open the MFC ClassWizard dialog.
	<P>
	<LI>Select the Message Maps tab if it is not the current tab.
	<P>
	<LI>Make sure the Dialog class appears in the Class <U>n</U>ame text box.
	<P>
	<LI>Select your control from the Object <U>I</U>Ds list box. The Messa_ges list box
	now shows the events for the control (see fig. 15.7).
	<P><A HREF="art/15/15fig07.jpg"><B>FIG. 15.7</B></A> <BR>
	<I>Messages list box shows the events for the control selected in the Object </I><CITE>I</CITE><I>Ds
	list box.</I></P>
	<LI>In the Messa_ges list box, select the event you want to add code for.
	<P>
	<LI>Click the <U>A</U>dd Function button to bring up the Add Member Function dialog.
	The Member function <U>n</U>ame text box contains a suggested name for the handler
	function. You can change the name if you like. Click the OK button when finished.
	If you look at the Member <U>f</U>unctions list box, you will see the new event handler
	function listed. The uppercase &quot;E&quot; in the gray box signifies that this
	is an event handler.
	<P>
	<LI>To add code to the handler, click the <U>E</U>dit Code button, which will dump
	you into the event handler function for that event. Add your code for the event here.
</OL>

<P>More information about adding controls to Visual C++ applications can be found
in the Visual C++ help files and Microsoft's Knowledge Base (<A HREF="http://www.microsoft.com/kb"><B>http://www.microsoft.com/kb</B></A>).
<H3><A NAME="Heading6"></A>HTML and Web Browsers</H3>
<P>Using your control in an HTML (Hypertext Markup Language) page consists of basically
three actions: placing the control in the HTML, downloading the control to the user,
and installing the control on the user's machine.</P>
<P>If all your Internet users are using the Microsoft Internet Explorer, the task
of inserting an ActiveX control in an HTML document is fairly simple. If your users
are using Netscape Navigator, or both, inserting a control requires a little more
work.</P>
<P>The Microsoft Internet Explorer requires the use of the <TT>&lt;OBJECT&gt;</TT>
HTML tag, which Netscape has not yet adopted. This tag is composed of several attributes,
the most important being <TT>ID</TT>, <TT>CLASSID</TT>, <TT>CODEBASE</TT>, <TT>PARAM
NAME</TT>, and <TT>VALUE</TT>. Listing 15.1 shows the HTML code that might be used
with the <TT>MFCControl</TT> control.
<H3><A NAME="Heading7"></A>Listing 15.1 SAMPLEIE.HTM--Using an ActiveX Control in
HTML Code</H3>
<P><FONT COLOR="#0066FF"><TT>&lt;HTML&gt;<BR>
&lt;HEAD&gt;<BR>
&lt;TITLE&gt;Sample Page&lt;/TITLE&gt;<BR>
&lt;/HEAD&gt;<BR>
&lt;BODY&gt; <BR>
&lt;OBJECT <BR>
ID=&quot;MFCControlWin1&quot; <BR>
WIDTH=100 <BR>
HEIGHT=51<BR>
CLASSID=&quot;CLSID:A1198546-2E75-11D0-BD82-000000000000&quot;<BR>
CODEBASE=&quot;http://www.somesite.com/somedirectory/ MFCControl.ocx&quot;&gt;#Version=1,0,0,1&quot;&gt;<BR>
&lt;PARAM NAME=&quot;Alignment&quot; VALUE=&quot;1&quot;&gt;<BR>
&lt;PARAM NAME=&quot;CaptionProp&quot; VALUE=&quot;Sample&quot;&gt;<BR>
&lt;/OBJECT&gt; <BR>
&lt;/BODY&gt; <BR>
&lt;/HTML&gt;<BR>
</TT></FONT></P>

<P>The <TT>ID</TT> attribute gives the control a name, providing a way for the HTML
code to access the control.</P>

<P>The <TT>CLASSID</TT> attribute, which is the unique UUID assigned to the control,
tells Microsoft Internet Explorer which object to load. The UUID for your control
can be found in the ODL (Object Description Library) file for your ActiveX control.
Be sure to locate the UUID for the specific control you are using by looking for
the class information comment for the control. For example, to locate the UUID for
the <TT>MFCControlWin</TT> control used above, you would look for the following:</P>

<P><FONT COLOR="#0066FF"><TT>// Class information for CMFCControlWinCtrl<BR>
[ uuid(A1198546-2E75-11D0-BD82-000000000000),<BR>
helpstring(&quot;MFCControlWin Control&quot;), control ]</TT></FONT></P>

<P>Open the ODL file with Notepad or something similar, copy the UUID from there,
and paste it in the HTML document. <BR>
<BR>
<IMG SRC="bar.gif" WIDTH="480" HEIGHT="6" ALIGN="BOTTOM" BORDER="0"></P>


<BLOCKQUOTE>
	<P><B>NOTE:</B> Even if you have only one control in your OCX file, this file contains
	many UUIDs. Be sure to locate the proper UUID using the method above. Also, your
	UUID will not be the same as the one in the example.

</BLOCKQUOTE>

<P><IMG SRC="bar.gif" WIDTH="480" HEIGHT="6" ALIGN="BOTTOM" BORDER="0"><BR>
<BR>
If the current version is not on the user's machine, the <TT>CODEBASE</TT> attribute
tells Microsoft Internet Explorer where to find the control to download. Once the
current version is loaded on a user's machine, the HTML document uses the control
from the user's machine, allowing the document to load faster. Keep in mind that
if your control was built with the Microsoft Foundation Classes, the MFC DLLs have
to be loaded on the user's machine. This adds to the size and complexity of the download.
The bigger the download, the longer the user has to wait to load the control. If
your control is built using the BaseCtl, the <TT>CODEBASE</TT> statement refers to
the control only. If you created your control with MFC, you need to use a new technology
from Microsoft called Cabinet files (CAB files for short). These files allow you
to compress a group of files into one file (the CAB file), download the file to the
user's PC, and install the files on the user's PC. The CAB file contains an INF file,
which controls the installation. Check out Microsoft's Web site (<A HREF="http://www.microsoft.com/"><B>http://www.microsoft.com/</B></A>)
and the ActiveX SDK documentation for more information on CAB files. <BR>
<BR>
<IMG SRC="bar.gif" WIDTH="480" HEIGHT="6" ALIGN="BOTTOM" BORDER="0"></P>


<BLOCKQUOTE>
	<P><B>NOTE:</B> Even if you created your control without the Microsoft Foundation
	Classes, you can still use a CAB file to compress your control and save transfer
	time.

</BLOCKQUOTE>

<P><IMG SRC="bar.gif" WIDTH="480" HEIGHT="6" ALIGN="BOTTOM" BORDER="0"><BR>
<BR>
The <TT>&lt;PARAM&gt;</TT> tag is used inside the <TT>&lt;OBJECT&gt;</TT> tag to
set the initial property values of the control. The <TT>&lt;PARAM&gt;</TT> tag has
two attributes: <TT>NAME</TT> and <TT>VALUE</TT>. The <TT>NAME</TT> is the name of
the property, and the <TT>VALUE</TT> is the property value.</P>
<P>Netscape Navigator users will need to purchase a plug-in from NCompass Labs called
ScriptActive. This plug-in allows Navigator to run HTML documents that contain ActiveX
controls. The information to be used by this add-in is contained in an <TT>&lt;EMBED&gt;</TT>
tag because Navigator does not recognize the <TT>&lt;OBJECT&gt;</TT> tag. If your
Web page will be read using Netscape Navigator and Microsoft Internet Explorer, which
is most likely the case, nest the <TT>&lt;EMBED&gt;</TT> tag within the <TT>&lt;OBJECT&gt;</TT>
tag. Microsoft Internet Explorer will fail if the <TT>&lt;EMBED&gt;</TT> tag is outside
the <TT>&lt;OBJECT&gt;</TT> tag. ScriptActive comes with the HTML Conversion Utility,
which creates a Netscape HTML file from a Microsoft Internet Explorer HTML file,
making the developer's life easier. Create your page with ActiveX Control Pad and
use the utility to automatically create a page compatible to both browsers. The HTML
document (see Listing 15.2) is an example of a document converted by the HTML Conversion
Utility. Visit the NCompass Labs Web site (<A HREF="http://www.ncompasslabs.com/"><B>http://www.ncompasslabs.com/</B></A><B>
</B>)for more information.
<H3><A NAME="Heading8"></A>Listing 15.2 SAMPLENN.HTM--Converted HTML Document</H3>
<P><FONT COLOR="#0066FF"><TT>&lt;HTML&gt;<BR>
&lt;HEAD&gt;<BR>
&lt;TITLE&gt;Sample Page&lt;/TITLE&gt;<BR>
&lt;/HEAD&gt;<BR>
&lt;BODY&gt; <BR>
&lt;OBJECT <BR>
ID=&quot;MFCControlWin1&quot; <BR>
WIDTH=100 <BR>
HEIGHT=51<BR>
CLASSID=&quot;CLSID:A1198546-2E75-11D0-BD82-000000000000&quot;<BR>
CODEBASE=&quot;http://www.somesite.com/somedirectory/ <BR>
MFCControl.ocx#Version=1,0,0,1&quot;&gt;<BR>
&lt;PARAM NAME=&quot;Alignment&quot; VALUE=&quot;1&quot;&gt;<BR>
&lt;PARAM NAME=&quot;CaptionProp&quot; VALUE=&quot;Sample&quot;&gt;<BR>
&lt;EMBED <BR>
NAME=&quot;MFCControlWin1&quot; <BR>
WIDTH=100 <BR>
HEIGHT=51<BR>
CLASSID=&quot;CLSID:A1198546-2E75-11D0-BD82-000000000000&quot;<BR>
CODEBASE=&quot;http://www.somesite.com/somedirectory/MFCControl.ocx#Version=1,0,0,1&quot;<BR>
TYPE=&quot;application/oleobject&quot; <BR>
PARAM_Alignment=&quot;1&quot;<BR>
PARAM_CaptionProp=&quot;Sample&quot; <BR>
&gt;&lt;/OBJECT&gt; <BR>
&lt;/BODY&gt; <BR>
&lt;/HTML&gt;<BR>
</TT></FONT></P>

<P>Another powerful attribute is <TT>SCRIPT</TT>. This attribute allows a developer
to add code directly to an HTML document. Currently, two scripting languages are
available: JavaScript and Visual Basic Script (often referred to as VBScript), which
imitate Java and Visual Basic, respectively. Check out Netscape's Web site (<A HREF="http://home.netscape.com/"><B>http://home.netscape.com/</B></A>)
for JavaScript syntax and information and Microsoft's Web site (<A HREF="http://www.microsoft.com/"><B>http://www.microsoft.com/</B></A>)
for VBScript syntax and information. <A HREF="ch16.htm">Chapter 16</A> explains scripting
in a little more detail. <BR>
<BR>
<IMG SRC="bar.gif" WIDTH="480" HEIGHT="6" ALIGN="BOTTOM" BORDER="0"></P>


<BLOCKQUOTE>
	<P><B>NOTE:</B> Unless you have certified your control, make sure that the Safety
	Level is not set to High in Microsoft Internet Explorer. If it is set to High and
	your control is not certified, it will not run your scripts. To check or change this
	setting, select <U>V</U>iew, <U>O</U>ptions from the Explorer menu. Select the Security
	tab, and then click the Safety Level button to display the Safety Level dialog. Most
	users, especially developers, choose Medium because it gives you the option to load
	or not load something. Certification and other security issues are covered in <A
	HREF="ch16.htm">Chapter 16</A>.

</BLOCKQUOTE>

<P><IMG SRC="bar.gif" WIDTH="480" HEIGHT="6" ALIGN="BOTTOM" BORDER="0">
<H3><A NAME="Heading9"></A>ActiveX Control Pad</H3>
<P>The number of Web Authoring tools is growing rapidly; very little manual coding
of HTML is done anymore. The ActiveX SDK includes a handy little tool called the
ActiveX Control Pad, which aids in managing ActiveX controls in Web pages. It allows
you to easily add controls and create VBScript and JavaScript scripts. It also integrates
a WSIWYG design area for authoring 2-D layouts in conjunction with Microsoft's HTML
Layout Control.</P>
<P>When you first bring up Control Pad, it creates an initial blank HTML document
and opens the document in the Text Editor (see fig. 15.8). <B><BR>
<BR>
</B><A HREF="art/15/15fig08.jpg"><B>FIG. 15.8</B></A> <BR>
<I>When you first bring up Control Pad, it creates a blank HTML document.</I></P>
<P>To insert an ActiveX Control, select <U>E</U>dit, <U>I</U>nsert ActiveX Control,
which opens the Insert ActiveX Control dialog. This dialog displays a list of all
registered ActiveX controls. Select the control you want to insert from the <U>C</U>ontrol
Type list box on the Insert ActiveX Control dialog, and click the OK button. A form
displaying the control appears along with a Properties grid. Use the mouse to size
the control. <BR>
<BR>
<IMG SRC="bar.gif" WIDTH="480" HEIGHT="6" ALIGN="BOTTOM" BORDER="0"></P>


<BLOCKQUOTE>
	<P><B>NOTE:</B> Version 1.0 of the ActiveX Control Pad has some bugs in its refreshing
	functionality. Once in a while, items appear to smear when you are sizing or positioning
	them, but they aren't. Once you close the editor in use and open it again, things
	are back to normal.

</BLOCKQUOTE>

<P><IMG SRC="bar.gif" WIDTH="480" HEIGHT="6" ALIGN="BOTTOM" BORDER="0"><BR>
<BR>
Set the initial values of the properties using the Properties grid. Select the property
you want to change, and then enter the new value at the top of the Properties grid.
After you have entered the new value, click the <U>A</U>pply button to save the setting.
When you exit the form, the necessary HTML is generated and added at the current
cursor position. Figure 15.9 is an example of HTML code generated with the ActiveX
Control Pad. <B><BR>
<BR>
</B><A HREF="art/15/15fig09.jpg"><B>FIG. 15.9</B></A> <I><BR>
HTML is generated for the added control.</I></P>
<P>This method of inserting an ActiveX control works fine if you don't care where
the control or controls are placed, but if you want the control(s) at specific X
and Y coordinates, you need to use an HTML layout because HTML currently cannot recognize
X, Y, and Z order positioning. HTML layouts allow exact positioning of controls on
a Web page. The ActiveX Control Pad saves the HTML layout in a file with an ALX extension.
When a browser reads the HTML that contains an HTML layout, it loads the HTML layout
from the ALX file. Control Pad provides the HTML Layout Control for creating and
editing these layouts. The HTML Layout Control gives the developer a forms-based
Web page development environment similar to the Visual Basic interface.</P>
<P>To create an HTML layout, select <U>F</U>ile, N<U>e</U>w HTML Layout to open the
HTML Layout Editor. You can click and drag any of the default controls on the Standard
or Additional tabs onto the form. To set the properties, select <U>V</U>iew, <U>P</U>roperties
to display the Properties grid.</P>
<P>To add your ActiveX control, click the right mouse on the bottom of the tab in
the Toolbox where you want the control to reside, and select Additional Controls
to bring up the Additional Controls dialog (see fig. 15.10). <B><BR>
<BR>
</B><A HREF="art/15/15fig10.jpg"><B>FIG. 15.10</B></A> <I><BR>
The additional Controls dialog lists all registered ActiveX controls.</I></P>
<P>Select the control you want to add by clicking the check box next to its name
in the <U>A</U>vailable Controls list box. Click the OK button to add the control
to the tab, and close the Custom Controls dialog. Now you can use that control as
if it were part of Control Pad.</P>
<P>After you have your controls set up, close the form and save the changes. This
course returns you to the HTML Source Editor. Now that you have created the layout,
you need to add it to the HTML. Click an insertion point anywhere inside the <TT>&lt;BODY&gt;</TT>
tags, and then select <U>E</U>dit, I<U>n</U>sert HTML Layout. Select the layout you
want to insert, and then click the OK button. The needed HTML will be generated and
placed at the cursor.</P>
<P>The Control Pad is also helpful for creating scripts. Before creating a script,
make sure you set the Script Language for the page. Select <U>T</U>ools, <U>O</U>ptions,
<U>S</U>cript to bring up the Script Options dialog. Select the scripting language
you prefer, and then click the OK key to save your selection.</P>
<P>To create the script, open the Script Wizard by selecting <U>T</U>ools, Script
<U>W</U>izard. Scripts can be created using the <U>L</U>ist View or the Co<U>d</U>e
View. <U>L</U>ist View allows you to insert actions while Co<U>d</U>e View is more
of a code editor. To create a line of code, select an event from the Select an <U>E</U>vent
list box. This selection determines which event the script is being created for.
After the event is selected, select an action, and double-click it to insert it into
the script. If you are in <U>L</U>ist View, you will be prompted to enter any needed
parameters for the selected action. If you are in Co<U>d</U>e View, a skeleton of
the needed command will appear in the Script Pane; you will need to edit the necessary
pieces. You can also add code in the Script Pane.</P>
<P>When you are finished creating the necessary scripts, click the <U>O</U>K key
to add the scripts to the HTML code.</P>
<P>For more information on Control Pad, refer to Control Pad's help files and the
Author/Editing section of Microsoft's Web site.
<H3><A NAME="Heading10"></A>Using the Microsoft Access, Word, and Excel Applications
as ActiveX Control Containers</H3>
<P>When you design a control, you probably think, &quot;It has to work in Microsoft
Visual C++, Microsoft Visual Basic, and on the Internet.&quot; What about Office
products? For example, what if someone wants to use a fancy list box control you've
created in a Microsoft Word Document to list the sections of a long document, allowing
the users to pick the section they want to jump to. Microsoft Office 97 makes it
easy to use an ActiveX control in an Office application, even in Microsoft Word.
ActiveX controls can be a very useful addition to Microsoft Office 97, especially
in Microsoft Access, Microsoft Word, and Microsoft Excel.</P>
<P>So how do you add controls to these products? The Microsoft Access menu choices
are a little different than Microsoft Word and Microsoft Excel, but the concepts
are the same. Basically, you choose More Controls from the Controls Toolbox, select
your control from the list, set the properties, and add code to the events.</P>
<P>To add a control to a Microsoft Access form, follow these steps:

<OL>
	<LI>To open or create a new form, click the Forms tab of the Database window, which
	appears when you first open an existing database or create a new one. To create a
	new form, click the <U>N</U>ew button. This action opens the New Form dialog. Select
	Design View from the list box, and click the OK button. To select an existing form,
	select the form from the list of forms on the forms tab of the Database window, and
	then click the <U>D</U>esign button on the Forms tab. This action opens the form
	in Design View.
	<P>
	<LI>If the Toolbox is not visible, select <U>V</U>iew, T<U>o</U>olbox from the Access
	menu to display it (see fig. 15.11).
	<P><A HREF="art/15/15fig11.jpg"><B>FIG. 15.11</B></A> <I><BR>
	Note the More Controls icon at the bottom of the Toolbox.</I></P>
	<LI>Select the More Controls icon from the Toolbox. This displays a list of registered
	controls.
	<P>
	<LI>If your control does not appear, it probably was not registered. To register
	it, select <U>T</U>ools, ActiveX <U>C</U>ontrols from the Microsoft Access main menu,
	which displays the ActiveX Controls dialog. Click the <U>R</U>egister button, and
	select your control's path from the Add ActiveX Control dialog. Then click the Open
	button to register it.
	<P>
	<LI>Select the control you want to add, and then click on the form where you want
	the control to appear.
</OL>

<P>To add a control to a Microsoft Word document or a Microsoft Excel spreadsheet,
follow these steps:

<OL>
	<LI>Open an existing document or spreadsheet, or use the one opened when you enter.
	To create a new document or spreadsheet, click <U>F</U>ile, <U>N</U>ew to open the
	New dialog. Click the OK button to use the defaults.
	<P>
	<LI>If the Control Toolbox is not visible, select <U>V</U>iew, <U>T</U>oolbars, Control
	Toolbox from the main menu to display it.
	<P>
	<LI>Select the More Controls icon from the Control Toolbox. This displays a list
	of registered controls (see fig. 15.12).
	<P><A HREF="art/15/15fig12.jpg"><B>FIG. 15.12</B></A> <I><BR>
	Select the More Controls icon to display a list of registered controls.</I></P>
	<LI>If you need to register your control, select the last item in the list, Register
	Custom Control, to display the Register Custom Control dialog. Select your control's
	path from the Register Custom Control dialog, and then click the <U>O</U>pen button
	to register the control.
	<P>
	<LI>Select the control you want to add. Microsoft Word places the control at the
	cursor position. To place the control on a Microsoft Excel spreadsheet, click on
	the spreadsheet where you want the control to appear.
</OL>

<P>Next you need to set the properties for the control. Make sure you are in Design
Mode. Design Mode can be toggled using the View icon on the Form View toolbar in
Microsoft Access (see fig. 15.13) and the Design Mode icon on the Control Toolbox
in Microsoft Word and Microsoft Excel (see fig. 15.14). To set the control's properties,
click with the right mouse on the control, and select <U>P</U>roperties from the
pop-up menu to display the Properties grid. Edit the properties as needed. You can
click with the right mouse on the control and select <I>xxxx </I>Control <U>O</U>bject,
<U>P</U>roperties to use the property pages to edit the properties; <I>xxxx </I>represents
the control name. <B><BR>
<BR>
</B><A HREF="art/15/15fig13.jpg"><B>FIG. 15.13</B></A> <BR>
<I>Toggle Design Mode in Microsoft Access using the View icon on the Form View Toolbar.</I></P>
<P><A HREF="art/15/15fig14.jpg"><B>FIG. 15.14</B></A> <BR>
<I>Toggle Design Mode in Microsoft Word and Microsoft Excel using the Design Mode
icon on the Control Toolbox.</I></P>
<P>To create code for events, make sure you are in Design mode. Right-click the control,
and select Build <U>E</U>vent in Microsoft Access, or <U>V</U>iew Code in Microsoft
Word and Microsoft Excel to open the code window. The code window for Microsoft Excel
is shown in Figure 15.15. <B><BR>
<BR>
</B><A HREF="art/15/15fig15.jpg"><B>FIG. 15.15</B></A> <BR>
<I>The code window for Microsoft Word looks the same as the code window for Microsoft
Excel.</I></P>
<P>You can now code as you would in a Visual Basic code window. To debug your code,
press the F5 key or use the Debug menu.</P>
<P>You can also add an ActiveX control to a report the same way you add it to a form.</P>
<P>For more detailed information, refer to the Microsoft Office 97 Help files and
Microsoft's Knowledge Base found on its Web site (<A HREF="http://www.microsoft.com/kb/"><B>http://www.microsoft.com/kb/</B></A>).</P>
<P>If you compile the project, be sure to recompile if you change the code for your
ActiveX control.
<H2><A NAME="Heading11"></A>Tools for Testing Your Component</H2>
<P>To ensure that your ActiveX control works correctly once in the user's hands,
it needs to be thoroughly tested. Thorough testing involves completely testing every
event, method, and property. The control must also be tested on every platform and,
to the extent possible, with as many of the container applications used by your users
as possible. This part of the chapter discusses using the OLE Control Test Container
packaged with Microsoft Visual C++, your users, and automated testing tools to test
your ActiveX control. You can also use the tools mentioned earlier in the chapter.
<H3><A NAME="Heading12"></A>Visual C++ ActiveX Control Test Container</H3>
<P>The ActiveX Control Test Container can be used to test the properties, methods,
and events functionality of ActiveX controls. You can test the persistence of controls
by saving properties to a stream or substorage, reloading properties, and viewing
the stored stream data. The ActiveX Control Test Container can be integrated with
the Visual C++ debugger, allowing you to step through the control's code.</P>
<P>After you compile and link your control, you can use the Test Container to change
properties, invoke methods, and fire events to test the control. Select <U>T</U>ools,
ActiveX Control Test Container from the Developer Studio menu to load the Test Container.</P>
<P>The first step is to insert your control into the ActiveX Control Test Container.
Select <U>E</U>dit, <U>I</U>nsert OLE Control. This displays the Insert OLE Control
window (see fig. 15.16). Select your control from the <U>O</U>bject Type list box,
and then click the OK button to insert your control. <B><BR>
<BR>
</B><A HREF="art/15/15fig16.jpg"><B>FIG. 15.16</B></A> <I><BR>
The Insert OLE Control window displays all registered ActiveX controls in the </I><CITE>O</CITE><I>bject
Type list box.</I></P>
<P>If your control is not in the list box, it probably was not registered. Click
the Cancel button to close the Insert OLE Control window, and then use the following
steps to register your control:

<OL>
	<LI>Select <U>F</U>ile, Re_gister Controls to open the Controls Registry window.
	<P>
	<LI>Click the <U>R</U>egister button. Use the Register Controls window to locate
	your control.
	<P>
	<LI>Select your control, and click the <U>O</U>pen button to register the control.
	<P>
	<LI>Click the <U>C</U>lose button to close the Controls Registry window and return
	to the main window.
</OL>

<P>Now that the control is inserted, you can test the property, event, and method
functionality of your control.</P>
<P>You can test changing a property through its property sheets or property dialog.
To change a property via its property sheet, use the following steps:

<OL>
	<LI>Click the control you inserted in the main window of Test Container to select
	the control.
	<P>
	<LI>Select <U>E</U>dit, Properties... <I>xxx</I> Control <U>O</U>bject, where <I>xxx</I>
	is the name of the control. This step displays the control's property page.
	<P>
	<LI>Edit the value of the property.
	<P>
	<LI>Click the <U>A</U>pply button to set the property to the new value.
	<P>
	<LI>Click the OK button to close the control's property page.
</OL>

<P>To change a property via its property dialog follow these steps:

<OL>
	<LI>Click the control you inserted in the main window of Test Container to select
	the control.
	<LI>Select <U>V</U>iew, <U>P</U>roperties to show the Properties dialog for the control
	(see fig. 15.17).
	<P><A HREF="art/15/15fig17.jpg"><B>FIG. 15.17</B></A> <BR>
	<I>All of the control's properties may be changed using the Properties dialog.</I></P>
	<LI>Select a property from the <U>P</U>roperty combo box. Edit the value in the <U>V</U>alue
	text box.
	<P>
	<LI>Click the <U>A</U>pply button to set the property to the value. If you enter
	a value that is the wrong data type, you will hear a beep, and the value will not
	be changed.
	<P>
	<LI>Click the <U>C</U>lose button to close the Properties dialog.
</OL>

<P>If you need to see when a property value changes, select <U>V</U>iew, <U>N</U>otification
Log to open the Notification Log window. Whenever a property changes, a message will
appear in this window (see fig. 15.18). If the property you are changing supports
the <TT>OnRequestEdit</TT> notification, use the<TT> OnRequestEdit( )</TT> Response
radio buttons on the Notification Log dialog to see how your control reacts to the
different responses from <TT>OnRequestEdit</TT>. <B><BR>
<BR>
</B><A HREF="art/15/15fig18.jpg"><B>FIG. 15.18</B></A> <I><BR>
Use the Test Container's Notification Log dialog to show the data-binding notifications
when a property value changes.</I></P>
<P>To invoke a method, follow these steps:

<OL>
	<LI>Click the control you inserted in the main window of Test Container to select
	the control.
	<P>
	<LI>Select <U>E</U>dit, In<U>v</U>oke Methods to open the Invoke Control Method dialog.
	<P>
	<LI>Select a method from the <U>N</U>ame combo box at the top of the Invoke Control
	Method dialog (see fig. 15.19).
	<P><A HREF="art/15/15fig19.jpg"><B>FIG. 15.19</B></A> <BR>
	<I>Select a method from the top section of the Invoke Control Method dialog, set
	the para-meter values in the middle section, and view the method's return value in
	the bottom section.</I></P>
	<LI>Enter the needed values in the parameter text boxes shown in the center of the
	Invoke Control Method dialog.
	<P>
	<LI>Click the Invoke button to invoke the method. If there is a return value from
	the method, it will display at the bottom of the Invoke Control Method dialog.
	<P>
	<LI>When you finish invoking methods, click the Close button to close the dialog.
</OL>

<P>To fire an event, perform an action that will cause the event to fire. For example,
if you are testing the <TT>MFCControlWin</TT> control, you could invoke the <TT>CaptionMethod</TT>
method to fire the <TT>Change</TT> event. To view which events are firing, select
<U>V</U>iew, <U>E</U>vent Log to display the Event Log dialog. When an event fires,
the call to the event handler is displayed in the Event Log dialog (see fig. 15.20).
<B><BR>
<BR>
</B><A HREF="art/15/15fig20.jpg"><B>FIG. 15.20</B></A> <I><BR>
When an event fires, the call to the event handler is displayed in the Event Log
dialog.</I></P>
<P>To select which events are displayed, open the Events dialog for the control by
selecting <U>E</U>dit, View <U>E</U>vent List. An example of the dialog is shown
in Figure 15.21. To toggle between showing and not showing an event, select the event
and click the <U>L</U>og/No Log button. To log all events, click the Log <U>A</U>ll
button. To not log any events, click the Log <U>N</U>one button. Click the <U>C</U>lose
button when you are finished. <B><BR>
<BR>
</B><A HREF="art/15/15fig21.jpg"><B>FIG. 15.21</B></A> <BR>
<I>If you want to display the events for the <TT>MFCControl</TT>, this is how the
Events dialog will look.</I></P>
<P>The ActiveX Control Test Container provides a way for you to test the functions
in your control. Select <U>E</U>dit, Embedded Object <U>F</U>unctions to see a submenu
of the functions. Select a function to execute, and that function will be executed.
Table 15.1 lists the functions with a brief description. <BR>
<BR>

<TABLE BORDER="1" WIDTH="100%">
	<CAPTION><B>Table 15.1</B><SPACER TYPE="HORIZONTAL" SIZE="10"><B> Embedded Object Functions</B></CAPTION>
	<TR ALIGN="LEFT" rowspan="1">
		<TD ALIGN="LEFT" VALIGN="TOP"><B>Action</B></TD>
		<TD ALIGN="LEFT" VALIGN="TOP"><B>Description</B></TD>
	</TR>
	<TR ALIGN="LEFT" rowspan="1">
		<TD ALIGN="LEFT" VALIGN="TOP">Primary Verb</TD>
		<TD ALIGN="LEFT" VALIGN="TOP">Invokes control's primary verb.</TD>
	</TR>
	<TR ALIGN="LEFT" rowspan="1">
		<TD ALIGN="LEFT" VALIGN="TOP">Activate</TD>
		<TD ALIGN="LEFT" VALIGN="TOP">Activates control and puts it in Loaded state.</TD>
	</TR>
	<TR ALIGN="LEFT" rowspan="1">
		<TD ALIGN="LEFT" VALIGN="TOP">UI Activate</TD>
		<TD ALIGN="LEFT" VALIGN="TOP">Puts control in UI Active state.</TD>
	</TR>
	<TR ALIGN="LEFT" rowspan="1">
		<TD ALIGN="LEFT" VALIGN="TOP">Close</TD>
		<TD ALIGN="LEFT" VALIGN="TOP">Closes control and puts it in Loaded state.</TD>
	</TR>
	<TR ALIGN="LEFT" rowspan="1">
		<TD ALIGN="LEFT" VALIGN="TOP">Deactivate</TD>
		<TD ALIGN="LEFT" VALIGN="TOP">Deactivates control and puts it in the Loaded state.</TD>
	</TR>
	<TR ALIGN="LEFT" rowspan="1">
		<TD ALIGN="LEFT" VALIGN="TOP">Deactivate UI Only</TD>
		<TD ALIGN="LEFT" VALIGN="TOP">Restores OLE Control Test Container's original state.</TD>
	</TR>
	<TR ALIGN="LEFT" rowspan="1">
		<TD ALIGN="LEFT" VALIGN="TOP">Hide</TD>
		<TD ALIGN="LEFT" VALIGN="TOP">Hides control and puts it in Loaded state.</TD>
	</TR>
	<TR ALIGN="LEFT" rowspan="1">
		<TD ALIGN="LEFT" VALIGN="TOP">Open</TD>
		<TD ALIGN="LEFT" VALIGN="TOP">Puts control in stand-alone mode and Open state.</TD>
	</TR>
	<TR ALIGN="LEFT" rowspan="1">
		<TD ALIGN="LEFT" VALIGN="TOP">Reactivate and Undo</TD>
		<TD ALIGN="LEFT" VALIGN="TOP">Reactivates control and puts it in Loaded state.</TD>
	</TR>
	<TR ALIGN="LEFT" rowspan="1">
		<TD ALIGN="LEFT" VALIGN="TOP">Run</TD>
		<TD ALIGN="LEFT" VALIGN="TOP">Runs control and puts it in Loaded state.</TD>
	</TR>
	<TR ALIGN="LEFT" rowspan="1">
		<TD ALIGN="LEFT" VALIGN="TOP">Show</TD>
		<TD ALIGN="LEFT" VALIGN="TOP">Activates control and puts it in UI Active state.</TD>
	</TR>
	<TR ALIGN="LEFT" rowspan="1">
		<TD ALIGN="LEFT" VALIGN="TOP">Properties</TD>
		<TD ALIGN="LEFT" VALIGN="TOP">Shows property sheet for control.</TD>
	</TR>
</TABLE>
<BR>
<BR>
The Test Container can run in two modes: Passive Container Mode or Simulated Design
Mode. When Test Container is in Passive Container Mode, it does not automatically
change the control's state. When it is in Simulated Design Mode, it does change the
control's state automatically to mimic Design mode.</P>
<P>A powerful feature of the Visual C++ Debugger is the fact that you can integrate
an executable. This means you can use OLE Control Test Container, or another container,
to test your control and be able to step through the code. You could use the Visual
Basic executable to test design mode and use a Visual Basic executable to test run
mode. To set this up, use the following steps:

<OL>
	<LI>Select <U>P</U>roject, <U>S</U>ettings from the Developer Studio menu to open
	the Project Settings dialog.
	<P>
	<LI>If you have not compiled and linked in Debug mode recently, you should compile
	and link the debug version before continuing. The debug version must match the registered
	version for the debugger to work correctly.
	<P>
	<LI>Make sure that Win32 Debug is selected in the <U>S</U>ettings For combo box.
	<P>
	<LI>Select the Debug tab (see fig. 15.22).
	<P><A HREF="art/15/15fig22.jpg"><B>FIG. 15.22</B></A> <BR>
	<I>Make sure Win32 Debug is selected in the </I><CITE>S</CITE><I>ettings For list
	box, and then select the Debug tab.</I></P>
	<LI>Enter the name of the executable you want to use with the debugger in the <U>E</U>xecutable
	for debug session text box. If you want to use the OLE Control Test Container, enter
	<B>TSTCON32.EXE</B> with the proper path. It can be found in the BIN directory of
	your Visual C++ directory. If you want to use the Visual Basic development environment,
	enter <B>VB5.EXE</B> with the proper path. You will find VB5.EXE in your Visual Basic
	directory.
	<P>
	<LI>Click the OK button to save the settings, and exit the Project Settings dialog.
	<P>
	<LI>Set any breakpoints you need to debug your control.
	<P>
	<LI>Select <U>B</U>uild, Start <U>D</U>ebug, <U>G</U>o, or press F5 to start the
	debugger.
	<P>
	<LI>A Microsoft Developer Studio dialog will appear, alerting you that there is no
	debug information for TSTCON32.EXE, or VB5.EXE if you're using Microsoft Visual Basic.
	It also asks you to press the OK button to continue. Click the OK button; you don't
	need to debug information for TSTCON.32EXE or VB5.EXE. If you want to prevent this
	dialog from appearing again, click the Do not _prompt in the future check box.
	<P>
	<LI>Use the container as needed. The debugger will pause at the breakpoints after
	switching from the container application to the debugger. You can step through code,
	check values, and so on.
	<P>
	<LI>When finished, exit the control application, or select <U>D</U>ebug, Stop <U>D</U>ebugging
	to exit the debugger.
</OL>

<H3><A NAME="Heading13"></A>Users</H3>
<P>One of the best testing tools is your user community. If you correctly analyze
the needs of your users before you even begin to create a control and use that knowledge
during development, you will have a more marketable and widely used control. You
also need to involve your user community in the testing of the control. Their feedback
is needed not only to report bugs, but also to let you know how they like the look
and feel. Feedback on the look and feel lets you know if you missed anything during
the needs analysis and if your control will be popular.</P>
<P>When choosing users to be beta testers, include users with many different needs.
For example, don't have all your beta testers use your control with only Visual C++.
Select some who will be using your control with Visual C++, Visual Basic, the Internet,
and so on. Make sure your group of beta testers will fully test the control's functionality.
If you are developing controls for internal use, make sure the end users you select
will use the system you are creating in a manner that fully tests your control.</P>
<P>Make sure that you stay in constant communication with your beta testers either
through personal contact or through support personnel. Keeping in touch will let
you know how they like the product. It will also let you know that the control is
being well tested and that you are resolving all bugs. Make sure you fully explain
the functionality of your control to the users. They can't test well if they don't
understand what they are testing.</P>
<P>When users report a bug, ask them to explain exactly what they did to get the
bug and what they did just before the bug occurred. This process may take a couple
of phone calls or e-mails. The bug could be caused by something they did earlier;
get as much information as possible. Next try to duplicate the problem. When duplicating
the problem, try to create their environment--exactly. For example, if they are using
Windows 95, try to duplicate the problem on Windows 95, not Windows NT. This applies
to hardware as well. If they are using a machine that is slow and doesn't have much
memory, don't try to re-create the problem on a souped-up development machine. We
know this is difficult to do, but the closer you are to their environment, the quicker
you will find the problem, and the better your chance of solving the real problem.</P>
<P>When you or your users find a bug, it is a good idea to try the control in different
types of test containers to see how it behaves. Because different containers use
ActiveX components in different ways, the problem may be in the way a container is
using the control. For example, Microsoft Visual Basic uses an ActiveX control differently
than the Visual C++ OLE Control Test Container. How a control behaves in different
types of containers may also give you a better idea of what the problem is. The Microsoft
OLE/COM Object Viewer tool (OLEView.exe) included with the Microsoft ActiveX SDK
is also a good tool for debugging. It allows you to view the interfaces and components
of an ActiveX control. Microsoft OLE/COM Object Viewer shows you what interfaces,
constants, properties, and methods are contained in the registered copy of the ActiveX
control. If the components of the control don't appear as you expect, maybe your
ActiveX object didn't register correctly. Use The Microsoft OLE/COM Object Viewer
to display the registry entries for the control.</P>
<P>The Microsoft OLE/COM Object Viewer is a good tool for checking the setup of your
ActiveX objects. A copy of the Microsoft OLE/COM Object Viewer is available in the
\Bin directory of the Microsoft ActiveX SDK directory or from Microsoft's Web page
on the OLE/COM Object Viewer tool (<A HREF="http://www.microsoft.com/oledev/olecom/oleview.htm"><B>http://www.microsoft.com/oledev/olecom/oleview.htm</B></A>).
Usually the Web site contains the most recent copy of the OLE/COM Object Viewer.
<H3><A NAME="Heading14"></A>Automated Tools</H3>
<P>Automated testing tools can also be used to test your control. These tools allow
you to build scripts that store keystrokes to create unattended, consistent automated
tests. The same script can be run across multiple machines, ensuring the same tests
are run on different platforms. This helps to eliminate problems occurring on one
platform and not another. If you add a new feature, you can add the needed tests
to the script once and copy the script across all test machines. You don't have to
manually retest on every platform, saving time and money.</P>
<P>One testing tool that supports testing ActiveX controls is the Rational Visual
Test. (Rational recently acquired this product from Microsoft.) Rational plans on
integrating Visual Test with its Rational Rose visual modeling tool. You can find
information on testing ActiveX controls in the Microsoft Knowledge Base and in the
Visual Test help files.
<H2><A NAME="Heading15"></A>From Here...</H2>
<P>This chapter has focused on using and testing your ActiveX component implementation.
While the majority of the discussions revolved around ActiveX Controls, it is important
to note that the same techniques can be applied to just about any component you develop.
In addition to the tools we pointed out, more are appearing every day that incorporate
ActiveX, including FrontPage and Visual InterDev and Microsoft BackOffice applications,
such as Microsoft Transaction server and Microsoft SQL Server.</P>

<P>When creating, using, and distributing your component, you need to be as thorough
as possible. Give the component to as many users as is feasible and test in as many
containers as is practical.


<!-- </td>

</td>
</tr>
</table> -->
</td>

</td>
</tr>
</table>

<!-- begin footer information -->

<MAP NAME="footer">
<AREA SHAPE=RECT COORDS="0,0,62,26" HREF="/">
<AREA SHAPE=RECT COORDS="62,0,135,26" HREF="http://www.developer.com/about/">
<AREA SHAPE=RECT COORDS="135,0,199,26" HREF="/search.html">
<AREA SHAPE=RECT COORDS="200,0,274,26" HREF="/subscribe/">
<AREA SHAPE=RECT COORDS="275,0,335,25" HREF="http://www.developer.com/contact/adinfo.html">
<AREA SHAPE=RECT COORDS="335,0,417,25" HREF="http://www.developer.com/contact/">
<AREA SHAPE=RECT COORDS="418,0,467,26" HREF="http://www.developer.com/about/faq.html">
</MAP>

<P>
<table width="640" cellpadding="0" cellspacing="0" border="0">
<tr>
<TD WIDTH="130"></TD>
<td width="468">
<IMG SRC="/images/footer/footerfile.gif" ALT="footer nav" width="467" height="26" BORDER="0" usemap="#footer" ismap>
</td>
</tr>
<tr>
<TD WIDTH="130"></TD>
<td width="468"> 
<font face=arial,helvetica size="1"> Use of this site is subject certain <a href="http://www.developer.com/legal/">Terms &amp; Conditions.</a><br>
Copyright (c) 1996-1999 <A HREF="http://www.earthweb.com/">EarthWeb, Inc.</A>.  All rights reserved.  Reproduction in whole or in part in any form or medium without express written permission of EarthWeb is prohibited.
<a href="http://www.earthweb.com/privacy.html">Please read our privacy policy for details.</a>
</td>
</tr>
</table>

</BODY>
</HTML>
