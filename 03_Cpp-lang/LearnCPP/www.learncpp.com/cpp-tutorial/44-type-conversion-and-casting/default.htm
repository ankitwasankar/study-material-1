<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd"><meta http-equiv="Content-Type" content="text/html; charset=utf-8"><!-- saved from url=(0079)http://www.learncpp.com/cpp-tutorial/44-type-conversion-and-casting/default.htm -->

<html xmlns="http://www.w3.org/1999/xhtml" dir="ltr" lang="en-US">
<head>
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8" />
<meta http-equiv="X-UA-Compatible" content="IE=EmulateIE7" />
<title>4.4 &#8212; Type conversion and casting &laquo; Learn C++</title>
<link rel="shortcut icon" href="../../blog/wp-content/themes/atahualpa353/images/favicon/learncpp.ico" /><link rel="canonical" href="default.htm" /><link rel="alternate" type="application/rss+xml" title="Learn C++ RSS Feed" href="../../feed/default.htm" />
<link rel="alternate" type="application/atom+xml" title="Learn C++ Atom Feed" href="../../feed/atom/default.htm" />
<link rel="pingback" href="http://www.learncpp.com/blog/xmlrpc.php" />
<link rel="alternate" type="application/rss+xml" title="Learn C++ &raquo; 4.4 &#8212; Type conversion and casting Comments Feed" href="feed/default.htm" />
<script type='text/javascript' src='../../blog/wp-includes/js/l10n.js@ver=20101110'></script>
<script type='text/javascript' src='../../blog/wp-includes/js/jquery/jquery.js@ver=1.6.1'></script>
<script type='text/javascript' src='../../blog/wp-includes/js/comment-reply.js@ver=20090102'></script>
<script type='text/javascript' src='../../blog/wp-content/plugins/google-analyticator/external-tracking.min.js@ver=6.2'></script>
<link rel="EditURI" type="application/rsd+xml" title="RSD" href="http://www.learncpp.com/blog/xmlrpc.php?rsd" />
<link rel="wlwmanifest" type="application/wlwmanifest+xml" href="../../blog/wp-includes/wlwmanifest.xml" /> 
<link rel='index' title='Learn C++' href='../../default.htm' />
<link rel='start' title='Welcome to LearnCpp.com!' href='../../site-news/this-is-a-news-test-post/default.htm' />
<link rel='prev' title='4.3 &#8212; File scope and the static keyword' href='../43-file-scope-and-the-static-keyword/default.htm' />
<link rel='next' title='4.5 &#8212; Enumerated types' href='../45-enumerated-types/default.htm' />
<link rel='canonical' href='default.htm' />
<link rel='shortlink' href='../../../wp.me/pgtuw-15' />
<meta name="ROBOTS" content="INDEX" />

<!-- Powered by AdSense-Deluxe WordPress Plugin v0.8 - http://www.acmetech.com/blog/adsense-deluxe/ -->
<!-- wpSolution Code -->
        <script type="text/javascript">
            function wpSolutionToggle(solution, link, showtext, hidetext) {
                if (solution.style.display != 'none') {
                    solution.style.display = 'none';
                    link.innerHTML = showtext;
                    link.className = 'solution_link_show';
                } else {
                    solution.style.display = 'block';
                    link.innerHTML = hidetext;
                    link.className = 'solution_link_hide';
                }
            }
          </script>
<style type="text/css">body{text-align:center;margin:0;padding:0;font-family:verdana,arial,sans-serif;font-size:13px;line-height:1.4;color:#000000;background:#ddd;padding-top:20px;padding-bottom:20px}a:link,a:visited,a:active{color:#365DA0;font-weight:bold;text-decoration:none;}a:hover{color:#365DA0;font-weight:bold;text-decoration:underline}ul,ol,dl,p,h1,h2,h3,h4,h5,h6{margin-top:10px;margin-bottom:10px;padding-top:0;padding-bottom:0;}ul ul,ul ol,ol ul,ol ol{margin-top:0;margin-bottom:0}code,pre{font-family:"Courier New",Courier,monospace;font-size:1em}pre{overflow:auto;word-wrap:normal;padding-bottom:1.5em;overflow-y:hidden;width:99%}abbr[title],acronym[title]{border-bottom:1px dotted}hr{display:block;height:2px;border:none;margin:0.5em auto;color:#cccccc;background-color:#cccccc}table{font-size:1em;}div.post,ul.commentlist li,ol.commentlist li{word-wrap:break-word;}pre,.wp_syntax{word-wrap:normal;}div#wrapper{text-align:center;margin-left:auto;margin-right:auto;display:block;width:98%}* html div#wrapper{<!--width:expression"98%");-->}div#container{padding:20px;background:#fff;box-shadow:0 0 15px #333;-moz-box-shadow:0 0 15px #333;padding-left:20px;padding-right:20px;width:auto;margin-left:auto;margin-right:auto;text-align:left;display:block}table#layout{font-size:100%;width:100%;table-layout:fixed}.colone{width:200px}.colone-inner{width:200px}.coltwo{width:100% }.colthree-inner{width:200px}.colthree{width:200px}td#header{width:auto;padding:0}table#logoarea,table#logoarea tr,table#logoarea td{margin:0;padding:0;background:none;border:0}table#logoarea{width:100%;border-spacing:0px}img.logo{display:block;margin:0 10px 0 0}td.logoarea-logo{width:1%}h1.blogtitle,h2.blogtitle{ display:block;margin:0;padding:0;letter-spacing:-1px;line-height:1.0em;font-size:200%;text-transform:uppercase;font-smooth:always}h1.blogtitle a:link,h1.blogtitle a:visited,h1.blogtitle a:active,h2.blogtitle a:link,h2.blogtitle a:visited,h2.blogtitle a:active{ text-decoration:none;color:#000000;font-weight:normal;font-smooth:always}h1.blogtitle a:hover,h2.blogtitle a:hover{ text-decoration:none;color:#AC161B;font-weight:normal}p.tagline{margin:0;padding:0;font-size:1.2em;font-weight:normal;color:#444}td.feed-icons{white-space:nowrap;}div.rss-box{height:1%;display:block;padding:10px 0 10px 10px;margin:0;width:280px}a.comments-icon{height:22px;line-height:22px;margin:0 5px 0 5px;padding-left:22px;display:block;text-decoration:none;float:right;white-space:nowrap}a.comments-icon:link,a.commentss-icon:active,a.comments-icon:visited{background:transparent url(../../blog/wp-content/themes/atahualpa353/images/comment-gray.png) no-repeat scroll center left}a.comments-icon:hover{background:transparent url(../../blog/wp-content/themes/atahualpa353/images/comment.png) no-repeat scroll center left}a.posts-icon{height:22px;line-height:22px;margin:0 5px 0 0;padding-left:20px;display:block;text-decoration:none;float:right;white-space:nowrap}a.posts-icon:link,a.posts-icon:active,a.posts-icon:visited{background:transparent url(../../blog/wp-content/themes/atahualpa353/images/rss-gray.png) no-repeat scroll center left}a.posts-icon:hover{background:transparent url(../../blog/wp-content/themes/atahualpa353/images/rss.png) no-repeat scroll center left}a.email-icon{height:22px;line-height:22px;margin:0 5px 0 5px;padding-left:24px;display:block;text-decoration:none;float:right;white-space:nowrap}a.email-icon:link,a.email-icon:active,a.email-icon:visited{background:transparent url(../../blog/wp-content/themes/atahualpa353/images/email-gray.png) no-repeat scroll center left}a.email-icon:hover{background:transparent url(../../blog/wp-content/themes/atahualpa353/images/email.png) no-repeat scroll center left}td.search-box{height:1%}div.searchbox{height:35px;border-bottom:0;width:200px;margin:0;padding:0}div.searchbox-form{margin:5px 10px 5px 10px}div.horbar1,div.horbar2{font-size:1px;clear:both;display:block;position:relative;padding:0;margin:0;width:100%;}div.horbar1{height:0px;background:#ffffff;border-top:dashed 1px #cccccc}div.horbar2{height:0px;background:#ffffff;border-bottom:dashed 1px #cccccc}div.header-image-container{position:relative;margin:0;padding:0;height:150px;}div.clickable{position:absolute;top:0;left:0;z-index:3;margin:0;padding:0;width:100%;height:150px;}a.divclick:link,a.divclick:visited,a.divclick:active,a.divclick:hover{width:100%;height:100%;display:block;text-decoration:none}td#left{vertical-align:top;padding-right:20px}td#left-inner{vertical-align:top;padding-right:10px}td#right{vertical-align:top;padding-left:20px}td#right-inner{vertical-align:top;padding-left:10px}td#middle{vertical-align:top;width:100%;padding:10px 15px}td#footer{width:auto;background-color:#f7f7f7;border-top:solid 4px #eee;padding:10px;text-align:center;color:#888;font-size:11px}td#footer a:link,td#footer a:visited,td#footer a:active{text-decoration:none;color:#777777;font-weight:normal}td#footer a:hover{text-decoration:none;color:#777777;font-weight:normal}div.widget{display:block;width:auto;font-size:12px;margin:0 0 10px 0;padding:10px;border:solid 4px #eee}div.widget-title{display:block;width:auto}div.widget-title h3,td#left h3.tw-widgettitle,td#right h3.tw-widgettitle,td#left ul.tw-nav-list,td#right ul.tw-nav-list{padding:0;margin:0;font-size:0.9em;text-align:center;font-weight:normal;text-transform:uppercase;letter-spacing:1px;color:#333;border-bottom:solid 1px #eee;padding-bottom:10px;margin-bottom:10px}div.widget ul,div.textwidget{display:block;width:auto}div.widget select{width:98%;margin-top:5px;}div.widget ul{list-style-type:none;margin:0;padding:0;width:auto}div.widget ul li{display:block;margin:2px 0 2px 0px;padding:0 0 0 0px;border-left:solid 0px #CCCCCC}div.widget ul li:hover,div.widget ul li.sfhover{display:block;width:auto;border-left:solid 0px #000000;}div.widget ul li ul li{margin:2px 0 2px 5px;padding:0 0 0 0px;border-left:solid 0px #CCCCCC;}div.widget ul li ul li:hover,div.widget ul li ul li.sfhover{border-left:solid 0px #000000;}div.widget ul li ul li ul li{margin:2px 0 2px 5px;padding:0 0 0 0px;border-left:solid 0px #CCCCCC;}div.widget ul li ul li ul li:hover,div.widget ul li ul li ul li.sfhover{border-left:solid 0px #000000;}div.widget td a:link,div.widget td a:visited,div.widget td a:active,div.widget ul li a:link,div.widget ul li a:visited,div.widget ul li a:active{text-decoration:none;font-weight:normal;color:#365DA0;font-weight:normal;}div.widget ul li ul li a:link,div.widget ul li ul li a:visited,div.widget ul li ul li a:active{color:#365DA0;font-weight:normal;}div.widget ul li ul li ul li a:link,div.widget ul li ul li ul li a:visited,div.widget ul li ul li ul li a:active{color:#365DA0;font-weight:normal;}div.widget ul li a:hover{color:#365DA0;}div.widget ul li ul li a:hover{color:#365DA0;}div.widget ul li ul li ul li a:hover{color:#365DA0;}div.widget ul li a:link,div.widget ul li a:visited,div.widget ul li a:active,div.widget ul li a:hover{display:inline}* html div.widget ul li a:link,* html div.widget ul li a:visited,* html div.widget ul li a:active,* html div.widget ul li a:hover{height:1%; } div.widget_pages ul li,div.widget_categories ul li{border-left:0 !important;padding:0 !important}div.widget_pages ul li a:link,div.widget_pages ul li a:visited,div.widget_pages ul li a:active,div.widget_categories ul li a:link,div.widget_categories ul li a:visited,div.widget_categories ul li a:active{padding:0 0 0 0px;border-left:solid 0px #CCCCCC}div.widget_pages ul li a:hover,div.widget_categories ul li a:hover{border-left:solid 0px #000000;}div.widget_pages ul li ul li a:link,div.widget_pages ul li ul li a:visited,div.widget_pages ul li ul li a:active,div.widget_categories ul li ul li a:link,div.widget_categories ul li ul li a:visited,div.widget_categories ul li ul li a:active{padding:0 0 0 0px;border-left:solid 0px #CCCCCC}div.widget_pages ul li ul li a:hover,div.widget_categories ul li ul li a:hover{border-left:solid 0px #000000;}div.widget_pages ul li ul li ul li a:link,div.widget_pages ul li ul li ul li a:visited,div.widget_pages ul li ul li ul li a:active,div.widget_categories ul li ul li ul li a:link,div.widget_categories ul li ul li ul li a:visited,div.widget_categories ul li ul li ul li a:active{padding:0 0 0 0px;border-left:solid 0px #CCCCCC}div.widget_pages ul li ul li ul li a:hover,div.widget_categories ul li ul li ul li a:hover{border-left:solid 0px #000000;}div.widget_pages ul li a:link,div.widget_pages ul li a:active,div.widget_pages ul li a:visited,div.widget_pages ul li a:hover{display:block !important}div.widget_categories ul li a:link,div.widget_categories ul li a:active,div.widget_categories ul li a:visited,div.widget_categories ul li a:hover{display:inline !important}table.subscribe{width:100%}table.subscribe td.email-text{padding:0 0 5px 0;vertical-align:top}table.subscribe td.email-field{padding:0;width:100%}table.subscribe td.email-button{padding:0 0 0 5px}table.subscribe td.post-text{padding:7px 0 0 0;vertical-align:top}table.subscribe td.comment-text{padding:7px 0 0 0;vertical-align:top}div.post,div.page{display:block;margin:0 0 30px 0;border-top:solid 4px #eee;padding-top:20px}div.sticky{background:#eee url('../../blog/wp-content/themes/atahualpa353/images/sticky.gif') 99% 5% no-repeat;border:dashed 1px #cccccc;padding:10px}div.post-kicker{margin:0 0 5px 0}div.post-kicker a:link,div.post-kicker a:visited,div.post-kicker a:active{color:#999;text-decoration:none;text-transform:uppercase;letter-spacing:1px}div.post-kicker a:hover{color:#cc0000}div.post-headline{}div.post-headline h1,div.post-headline h2{ margin:0; padding:0;padding:0;margin:0;font-size:1.7em}div.post-headline h2 a:link,div.post-headline h2 a:visited,div.post-headline h2 a:active,div.post-headline h1 a:link,div.post-headline h1 a:visited,div.post-headline h1 a:active{}div.post-headline h2 a:hover,div.post-headline h1 a:hover{}div.post-byline{margin:5px 0 10px 0;color:#999;text-transform:uppercase;letter-spacing:1px;font-size:11px}div.post-byline a:link,div.post-byline a:visited,div.post-byline a:active{}div.post-byline a:hover{}div.post-bodycopy{}div.post-bodycopy p{margin:1em 0;padding:0;display:block}div.post-pagination{}div.post-footer{clear:both;display:block;color:#999;text-transform:uppercase;letter-spacing:1px;font-size:11px}div.post-footer a:link,div.post-footer a:visited,div.post-footer a:active{color:#999;font-weight:normal;text-decoration:none}div.post-footer a:hover{color:#333;font-weight:normal;text-decoration:underline}div.post-kicker img,div.post-byline img,div.post-footer img{border:0;padding:0;margin:0 0 -1px 0;background:none}span.post-ratings{display:inline-block;width:auto;white-space:nowrap}div.navigation-top{border-top:solid 4px #eee;padding:8px 0}div.navigation-middle{margin:10px 0 20px 0;padding:8px 0;border-top:solid 4px #eee;border-bottom:solid 4px #eee}div.navigation-bottom{margin:20px 0 0 0;padding:10px 0 0 0;border-top:solid 4px #eee}div.navigation-comments-above{margin:0 0 10px 0;padding:5px 0 5px 0}div.navigation-comments-below{margin:0 0 10px 0;padding:5px 0 5px 0}div.older{float:left;width:48%;text-align:left;margin:0;padding:0}div.newer{float:right;width:48%;text-align:right;margin:0;padding:0;}div.older-home{float:left;width:44%;text-align:left;margin:0;padding:0}div.newer-home{float:right;width:44%;text-align:right;margin:0;padding:0;}div.home{float:left;width:8%;text-align:center;margin:0;padding:0}form,.feedburner-email-form{margin:0;padding:0;}fieldset{border:1px solid #cccccc;width:auto;padding:0.35em 0.625em 0.75em;display:block;}legend{color:#000000;background:#f4f4f4;border:1px solid #cccccc;padding:2px 6px;margin-bottom:15px;}form p{margin:5px 0 0 0;padding:0;}div.xhtml-tags p{margin:0}label{margin-right:0.5em;font-family:arial;cursor:pointer;}input.text,input.textbox,input.password,input.file,input.TextField,textarea{padding:3px;color:#000000;border-top:solid 1px #333333;border-left:solid 1px #333333;border-right:solid 1px #999999;border-bottom:solid 1px #cccccc;background:url(../../blog/wp-content/themes/atahualpa353/images/inputbackgr.gif) top left no-repeat}textarea{width:96%;}input.inputblur{color:#777777;width:95%}input.inputfocus{color:#000000;width:95%}input.highlight,textarea.highlight{background:#e8eff7;border-color:#37699f}.button,.Button{padding:0 2px;height:24px;line-height:16px;background-color:#777777;color:#ffffff;border:solid 2px #555555;font-weight:bold}.buttonhover{padding:0 2px;cursor:pointer;background-color:#6b9c6b;color:#ffffff;border:solid 2px #496d49}form#commentform input#submit{ padding:0 .25em; width:0; overflow:visible}form#commentform input#submit[class]{width:auto}form#commentform input#submit{padding:4px 10px 4px 10px;font-size:1.2em;line-height:1.5em;height:36px}table.searchform{width:100%}table.searchform td.searchfield{padding:0;width:100%}table.searchform td.searchbutton{padding:0 0 0 5px}table.searchform td.searchbutton input{padding:0 0 0 5px}blockquote{height:1%;display:block;clear:both;color:#555555;padding:1em 1em;background:#f4f4f4;border:solid 1px #e1e1e1}blockquote blockquote{height:1%;display:block;clear:both;color:#444444;padding:1em 1em;background:#e1e1e1;border:solid 1px #d3d3d3}div.post table{border-collapse:collapse;margin:10px 0}div.post table caption{width:auto;margin:0 auto;background:#eeeeee;border:#999999;padding:4px 8px;color:#666666}div.post table th{background:#888888;color:#ffffff;font-weight:bold;font-size:90%;padding:4px 8px;border:solid 1px #ffffff;text-align:left}div.post table td{padding:4px 8px;background-color:#ffffff;border-bottom:1px solid #dddddd;text-align:left}div.post table tfoot td{}div.post table tr.alt td{background:#f4f4f4}div.post table tr.over td{background:#e2e2e2}#calendar_wrap{padding:0;border:none}table#wp-calendar{width:100%;font-size:90%;border-collapse:collapse;background-color:#ffffff;margin:0 auto}table#wp-calendar caption{width:auto;background:#eeeeee;border:none;;padding:3px;margin:0 auto;font-size:1em}table#wp-calendar th{border:solid 1px #eeeeee;background-color:#999999;color:#ffffff;font-weight:bold;padding:2px;text-align:center}table#wp-calendar td{padding:0;line-height:18px;background-color:#ffffff;border:1px solid #dddddd;text-align:center}table#wp-calendar tfoot td{border:solid 1px #eeeeee;background-color:#eeeeee}table#wp-calendar td a{display:block;background-color:#eeeeee;width:100%;height:100%;padding:0}div#respond{margin:25px 0;padding:25px;background:#eee;-moz-border-radius:8px;-khtml-border-radius:8px;-webkit-border-radius:8px;border-radius:8px;}p.thesetags{margin:10px 0}h3.reply{margin:0;padding:0 0 10px 0}ol.commentlist{margin:15px 0 25px 0;list-style-type:none;padding:0;display:block;border-top:dotted 1px #cccccc}ol.commentlist li{padding:15px 10px;display:block;height:1%;margin:0;background-color:#FFFFFF;border-bottom:dotted 1px #cccccc}ol.commentlist li.alt{display:block;height:1%;background-color:#EEEEEE;border-bottom:dotted 1px #cccccc}ol.commentlist li.authorcomment{display:block;height:1%;background-color:#D8D8FA}ol.commentlist span.authorname{font-weight:bold;font-size:110%}ol.commentlist span.commentdate{color:#666666;font-size:90%;margin-bottom:5px;display:block}ol.commentlist span.editcomment{display:block}ol.commentlist li p{margin:2px 0 5px 0}div.comment-number{float:right;font-size:2em;line-height:2em;font-family:georgia,serif;font-weight:bold;color:#ddd;margin:-10px 0 0 0;position:relative;height:1%}div.comment-number a:link,div.comment-number a:visited,div.comment-number a:active{color:#ccc}textarea#comment{width:98%;margin:10px 0;display:block}ul.commentlist{margin:15px 0 15px 0;list-style-type:none;padding:0;display:block;border-top:dotted 1px #cccccc}ul.commentlist ul{margin:0;border:none;list-style-type:none;padding:0}ul.commentlist li{padding:0; margin:0;display:block;clear:both;height:1%;}ul.commentlist ul.children li{ margin-left:30px}ul.commentlist div.comment-container{padding:10px;margin:0}ul.children div.comment-container{background-color:transparent;border:dotted 1px #ccc;padding:10px;margin:0 10px 8px 0; -moz-border-radius:5px; -khtml-border-radius:5px; -webkit-border-radius:5px; border-radius:5px}ul.children div.bypostauthor{}ul.commentlist li.thread-even{background-color:#FFFFFF;border-bottom:dotted 1px #cccccc}ul.commentlist li.thread-odd{background-color:#EEEEEE;border-bottom:dotted 1px #cccccc}ul.commentlist div.bypostauthor{background-color:#D8D8FA}ul.children div.bypostauthor{border:dotted 1px #BFBCFB}ul.commentlist span.authorname{font-size:110%}div.comment-meta a:link,div.comment-meta a:visited,div.comment-meta a:active,div.comment-meta a:hover{font-weight:normal}div#cancel-comment-reply{margin:-5px 0 10px 0}div.comment-number{float:right;font-size:2em;line-height:2em;font-family:georgia,serif;font-weight:bold;color:#ddd;margin:-10px 0 0 0;position:relative;height:1%}div.comment-number a:link,div.comment-number a:visited,div.comment-number a:active{color:#ccc}.page-numbers{padding:2px 6px;border:solid 1px #000000;-moz-border-radius:6px;-khtml-border-radius:6px;-webkit-border-radius:6px;border-radius:6px}span.current{background:#ddd}a.prev,a.next{border:none}a.page-numbers:link,a.page-numbers:visited,a.page-numbers:active{text-decoration:none;color:#365DA0;border-color:#365DA0}a.page-numbers:hover{text-decoration:none;color:#365DA0;border-color:#365DA0}div.xhtml-tags{display:none}abbr em{border:none !important;border-top:dashed 1px #aaa !important;display:-moz-inline-box !important;display:inline-block !important;background:url(../../blog/wp-content/themes/atahualpa353/images/commentluv.gif) 0% 90% no-repeat;margin-top:8px;padding:5px 5px 2px 20px !important;font-style:normal}p.subscribe-to-comments{margin-bottom:10px}div#gsHeader{display:none;}div.g2_column{margin:0 !important;width:100% !important;font-size:1.2em}div#gsNavBar{border-top-width:0 !important}p.giDescription{font-size:1.2em;line-height:1 !important}p.giTitle{margin:0.3em 0 !important;font-size:1em;font-weight:normal;color:#666}div#wp-email img{border:0;padding:0}div#wp-email input,div#wp-email textarea{margin-top:5px;margin-bottom:2px}div#wp-email p{margin-bottom:10px}input#wp-email-submit{ padding:0; font-size:30px; height:50px; line-height:50px; overflow:visible;}img.WP-EmailIcon{ vertical-align:text-bottom !important}.tw-accordion .tw-widgettitle,.tw-accordion .tw-widgettitle:hover,.tw-accordion .tw-hovered,.tw-accordion .selected,.tw-accordion .selected:hover{ background:transparent !important; background-image:none !important}.tw-accordion .tw-widgettitle span{ padding-left:0 !important}.tw-accordion h3.tw-widgettitle{border-bottom:solid 1px #ccc}.tw-accordion h3.selected{border-bottom:none}td#left .without_title,td#right .without_title{ margin-top:0;margin-bottom:0}ul.tw-nav-list{border-bottom:solid 1px #999;display:block;margin-bottom:5px !important}td#left ul.tw-nav-list li,td#right ul.tw-nav-list li{padding:0 0 1px 0;margin:0 0 -1px 5px; border:solid 1px #ccc;border-bottom:none;-moz-border-radius:5px;-khtml-border-radius:5px;-webkit-border-radius:5px;border-radius:5px;-moz-border-radius-bottomright:0;-moz-border-radius-bottomleft:0;-webkit-border-bottom-right-radius:0;-webkit-border-bottom-left-radius:0;border-bottom-right-radius:0;border-bottom-left-radius:0;background:#eee}td#left ul.tw-nav-list li.ui-tabs-selected,td#right ul.tw-nav-list li.ui-tabs-selected{ background:none;border:solid 1px #999;border-bottom:solid 1px #fff !important}ul.tw-nav-list li a:link,ul.tw-nav-list li a:visited,ul.tw-nav-list li a:active,ul.tw-nav-list li a:hover{padding:0 8px !important;background:none;border-left:none !important;outline:none}td#left ul.tw-nav-list li.ui-tabs-selected a,td#left li.ui-tabs-selected a:hover,td#right ul.tw-nav-list li.ui-tabs-selected a,td#right li.ui-tabs-selected a:hover{ color:#000000; text-decoration:none;font-weight:bold;background:none !important;outline:none}td#left .ui-tabs-panel,td#right .ui-tabs-panel{ margin:0; padding:0}img{border:0}#dbem-location-map img{ background:none !important}.post img{padding:5px;border:solid 1px #dddddd;background-color:#f3f3f3;-moz-border-radius:3px;-khtml-border-radius:3px;-webkit-border-radius:3px;border-radius:3px;}.post img.size-full{max-width:96%;width:auto 100%;margin:5px 0 5px 0}div.post img[class~=size-full]{height:auto;}.post img.alignleft{float:left;margin:10px 10px 5px 0;}.post img.alignright{float:right;margin:10px 0 5px 10px;}.post img.aligncenter{display:block;margin:10px auto}.aligncenter,div.aligncenter{ display:block; margin-left:auto; margin-right:auto}.alignleft,div.alignleft{float:left;margin:10px 10px 5px 0}.alignright,div.alignright{ float:right; margin:10px 0 5px 10px}div.archives-page img{border:0;padding:0;background:none;margin-bottom:0;vertical-align:-10%}.wp-caption{max-width:96%;width:auto 100%;height:auto;display:block;border:1px solid #dddddd;text-align:center;background-color:#f3f3f3;padding-top:4px;margin:10px 0 0 0;-moz-border-radius:3px;-khtml-border-radius:3px;-webkit-border-radius:3px;border-radius:3px;}* html .wp-caption{height:100%;}.wp-caption img{ margin:0 !important; padding:0 !important; border:0 none !important}.wp-caption p.wp-caption-text{font-size:0.8em;line-height:13px;padding:2px 4px 5px;margin:0;color:#666666}img.wp-post-image{float:left;border:0;padding:0;background:none;margin:0 10px 5px 0}img.wp-smiley{ float:none;border:none !important;margin:0 1px -1px 1px;padding:0 !important;background:none !important}img.avatar{float:left;display:block;margin:0 8px 1px 0;padding:3px;border:solid 1px #ddd;background-color:#f3f3f3;-moz-border-radius:3px;-khtml-border-radius:3px;-webkit-border-radius:3px;border-radius:3px;}#comment_quicktags{text-align:left;padding:10px 0 2px 0;display:block}#comment_quicktags input.ed_button{background:#f4f4f4;border:2px solid #cccccc;color:#444444;margin:2px 4px 2px 0;width:auto;padding:0 4px;height:24px;line-height:16px}#comment_quicktags input.ed_button_hover{background:#dddddd;border:2px solid #666666;color:#000000;margin:2px 4px 2px 0;width:auto;padding:0 4px;height:24px;line-height:16px;cursor:pointer}#comment_quicktags #ed_strong{font-weight:bold}#comment_quicktags #ed_em{font-style:italic}@media print{body{background:white;color:black;margin:0;font-size:10pt !important;font-family:arial,sans-serif;}div.post-footer{line-height:normal !important;color:#555 !important;font-size:9pt !important}a:link,a:visited,a:active,a:hover{text-decoration:underline !important;color:#000}h2{color:#000;font-size:14pt !important;font-weight:normal !important}h3{color:#000;font-size:12pt !important;}#header,#footer,.colone,.colthree,.navigation,.navigation-top,.navigation-middle,.navigation-bottom,.wp-pagenavi-navigation,#comment,#respond,.remove-for-print{display:none}td#left,td#right,td#left-inner,td#right-inner{width:0}td#middle{width:100%}*:lang(en) td#left{ display:none}*:lang(en) td#right{ display:none}*:lang(en) td#left-inner{ display:none}*:lang(en) td#right-inner{ display:none}td#left:empty{ display:none}td#right:empty{ display:none}td#left-inner:empty{ display:none}td#right-inner:empty{ display:none}}ul.rMenu,ul.rMenu ul,ul.rMenu li,ul.rMenu a{display:block;margin:0;padding:0}ul.rMenu,ul.rMenu li,ul.rMenu ul{list-style:none}ul.rMenu ul{display:none}ul.rMenu li{position:relative;z-index:1}ul.rMenu li:hover{z-index:999}ul.rMenu li:hover > ul{display:block;position:absolute}ul.rMenu li:hover{background-position:0 0} ul.rMenu-hor li{float:left;width:auto}ul.rMenu-hRight li{float:right}ul.rMenu-ver li{float:none}.clearfix:after{ content:".";display:block;height:0;clear:both;visibility:hidden}.clearfix{min-width:0;display:inline-block;display:block}* html .clearfix{height:1%;}.clearboth{clear:both;height:1%;font-size:1%;line-height:1%;display:block;padding:0;margin:0}td#header{padding-bottom:15px;}td#middle{padding:0}div.searchbox-form{margin:5px 0 15px 5px}div#menu1 ul.rMenu{background:transparent;border:none}div#imagecontainer{border-top:solid 0px #333;border-bottom:solid 5px #333;}div.widget ul li{padding:1px 5px 1px 12px !important;background:url('../../blog/wp-content/themes/atahualpa353/images/bullets/round-gray.gif') no-repeat 0 7px}ul.rMenu-hor ul,ul.rMenu-hRight ul{margin-top:0px;}ul.rMenu-hor li{margin-bottom:0px;margin-top:0px;margin-left:0px;}ul.rMenu-hor{padding-left:0px;}ul.rMenu-ver li{margin-top:0xp;}div#menu1 ul.rMenu li a,div#menu2 ul.rMenu li a{padding:6px 10px}div#menu1 ul.rMenu li{margin-right:5px}div#menu1 ul.rMenu li li{margin-right:0}div#menu1 ul.rMenu li,div#menu1 ul.rMenu li a{-webkit-border-top-left-radius:5px;-webkit-border-top-right-radius:5px;-moz-border-radius-topleft:5px;-moz-border-radius-topright:5px;border-top-left-radius:5px;border-top-right-radius:5px}div#menu1 ul.rMenu li li,div#menu1 ul.rMenu li li a{-webkit-border-top-left-radius:0;-webkit-border-top-right-radius:0;-moz-border-radius-topleft:0;-moz-border-radius-topright:0;border-top-left-radius:0;border-top-right-radius:0}div#menu2{ border:dashed 1px #ffffff}</style>
<script type="text/javascript">
//<![CDATA[




/* JQUERY */
jQuery(document).ready(function(){  


	/* jQuery('ul#rmenu').superfish(); */
	/* jQuery('ul#rmenu').superfish().find('ul').bgIframe({opacity:false}); */
 
	/* For IE6 */
	if (jQuery.browser.msie && /MSIE 6\.0/i.test(window.navigator.userAgent) && !/MSIE 7\.0/i.test(window.navigator.userAgent) && !/MSIE 8\.0/i.test(window.navigator.userAgent)) {

		/* Max-width for images in IE6 */		
		var centerwidth = jQuery("td#middle").width(); 
		
		/* Images without caption */
		jQuery(".post img").each(function() { 
			var maxwidth = centerwidth - 10 + 'px';
			var imgwidth = jQuery(this).width(); 
			var imgheight = jQuery(this).height(); 
			var newimgheight = (centerwidth / imgwidth * imgheight) + 'px';	
			if (imgwidth > centerwidth) { 
				jQuery(this).css({width: maxwidth}); 
				jQuery(this).css({height: newimgheight}); 
			}
		});
		
		/* Images with caption */
		jQuery("div.wp-caption").each(function() { 
			var captionwidth = jQuery(this).width(); 
			var maxcaptionwidth = centerwidth + 'px';
			var captionheight = jQuery(this).height();
			var captionimgwidth =  jQuery("div.wp-caption img").width();
			var captionimgheight =  jQuery("div.wp-caption img").height();
			if (captionwidth > centerwidth) { 
				jQuery(this).css({width: maxcaptionwidth}); 
				var newcaptionheight = (centerwidth / captionwidth * captionheight) + 'px';
				var newcaptionimgheight = (centerwidth / captionimgwidth * captionimgheight) + 'px';
				jQuery(this).css({height: newcaptionheight}); 
				jQuery("div.wp-caption img").css({height: newcaptionimgheight}); 
				}
		});
		
		/* sfhover for LI:HOVER support in IE6: */
		jQuery("ul li").
			hover( function() {
					jQuery(this).addClass("sfhover")
				}, 
				function() {
					jQuery(this).removeClass("sfhover")
				} 
			); 

	/* End IE6 */
	}
	
	jQuery(".post table tr").
		mouseover(function() {
			jQuery(this).addClass("over");
		}).
		mouseout(function() {
			jQuery(this).removeClass("over");
		});

	
	jQuery(".post table tr:even").
		addClass("alt");

	
	jQuery("input.text, input.TextField, input.file, input.password, textarea").
		focus(function () {  
			jQuery(this).addClass("highlight"); 
		}).
		blur(function () { 
			jQuery(this).removeClass("highlight"); 
		})
	
	jQuery("input.inputblur").
		focus(function () {  
			jQuery(this).addClass("inputfocus"); 
		}).
		blur(function () { 
			jQuery(this).removeClass("inputfocus"); 
		})

		

	
	jQuery("input.button, input.Button").
		mouseover(function() {
			jQuery(this).addClass("buttonhover");
		}).
		mouseout(function() {
			jQuery(this).removeClass("buttonhover");
		});

	/* toggle "you can use these xhtml tags" */
	jQuery("a.xhtmltags").
		click(function(){ 
			jQuery("div.xhtml-tags").slideToggle(300); 
		});

	/* For the Tabbed Widgets plugin: */
	jQuery("ul.tw-nav-list").
		addClass("clearfix");

		
	
});

//]]>
</script>
<meta id="syntaxhighlighteranchor" name="syntaxhighlighter-version" content="3.1.3" />
<!-- Google Analytics Tracking by Google Analyticator 6.2: http://ronaldheft.com/code/analyticator/ -->
<script type="text/javascript">
	var analyticsFileTypes = [''];
	var analyticsEventTracking = 'enabled';
</script>
<script type="text/javascript">
	var _gaq = _gaq || [];
	_gaq.push(['_setAccount', 'UA-2173612-1']);
	_gaq.push(['_trackPageview']);
	_gaq.push(['_trackPageLoadTime']);

	(function() {
		var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true;
		ga.src = ('https:' == document.location.protocol ? '../../../https@ssl_2f\default.htm' : '../../../www/default.htm') + '.google-analytics.com/ga.js';
		var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s);
	})();
</script>
<!--[if IE 6]>
<script type="text/javascript" src="../../blog/wp-content/themes/atahualpa353/js/dd_roundies.js"></script>
<script type="text/javascript">DD_roundies.addRule('a.posts-icon,%20a.comments-icon,%20a.email-icon,%20img.logo');</script>
<![endif]-->
</head>
<body class="single single-post postid-67 single-format-standard">
<div id="wrapper">
<div id="container">
<table id="layout" border="0" cellspacing="0" cellpadding="0">
<colgroup>
<col class="colone" /><col class="coltwo" />
<col class="colthree" /></colgroup> 
	<tr>

		<!-- Header -->
		<td id="header" colspan="3">

		<div id="imagecontainer" class="header-image-container" style="background: url('../../blog/wp-content/themes/atahualpa353/images/header/learncppheader3_800.jpg') top center no-repeat;"><div class="clickable"><a class="divclick" title="Learn C++" href ="../../default.htm">&nbsp;</a></div></div>
		</td>
		<!-- / Header -->

	</tr>

	<!-- Main Body -->	
	<tr id="bodyrow">

				<!-- Left Sidebar -->
		<td id="left">

			<div id="text-5" class="widget widget_text"><div class="widget-title"><h3>Navigation</h3></div>			<div class="textwidget"><ul>
<li><a href="../../default.htm"><big><big>Main Page</big></big></a>
<li><a href="
../../featured-articles/default.htm"><big><big>Featured Articles</big></big></a>
</ul>
<hr>
<ul>
<li><a href="../../about/default.htm">About / Contact</a>
<li><a href="../../about/#Support">Support LearnCpp</a>
</ul>
<hr>

<!-- SiteSearch Google -->
<form method="get" action="http://www.google.com/custom" target="google_window">
<table border="0" bgcolor="#ffffff">
<tr><td nowrap="nowrap" valign="top" align="left">

<!--<br/>-->
<input type="hidden" name="domains" value="LearnCpp.com"></input>
<label for="sbi" style="display: none">Enter your search terms</label>
<input type="text" name="q" size="20" maxlength="255" value="" id="sbi"></input>
</td></tr>
<tr>
<td nowrap="nowrap">
<table>
<tr>
<td>
<input type="radio" name="sitesearch" value="" checked id="ss0"></input>
<label for="ss0" title="Search the Web"><font size="-1" color="#000000">Web</font></label></td>
<td>
<input type="radio" name="sitesearch" value="www.LearnCpp.com" id="ss1"></input>
<label for="ss1" title="Search LearnCpp.com"><font size="-1" color="#000000">LearnCpp</font></label></td>
</tr>
</table>
<label for="sbb" style="display: none">Submit search form</label>
<input type="submit" name="sa" value="Google Search" id="sbb"></input>
<input type="hidden" name="client" value="pub-0588844875925051"></input>
<input type="hidden" name="forid" value="1"></input>
<input type="hidden" name="channel" value="7774154974"></input>
<input type="hidden" name="ie" value="ISO-8859-1"></input>
<input type="hidden" name="oe" value="ISO-8859-1"></input>
<input type="hidden" name="safe" value="active"></input>
<input type="hidden" name="flav" value="0000"></input>
<input type="hidden" name="sig" value="q6fLrjobHHgL00cW"></input>
<input type="hidden" name="cof" value="GALT:#008000;GL:1;DIV:#336699;VLC:663399;AH:center;BGC:FFFFFF;LBGC:336699;ALC:0000FF;LC:0000FF;T:000000;GFNT:0000FF;GIMP:0000FF;FORID:1"></input>
<input type="hidden" name="hl" value="en"></input>
</td></tr></table>
</form>
<!-- SiteSearch Google --></div>
		</div><div id="meta-2" class="widget widget_meta"><div class="widget-title"><h3>Meta</h3></div>			<ul>
			<li><a href="../../blog/wp-login.php@action=register.htm">Register</a></li>			<li><a href="../../blog/wp-login.php.htm">Log in</a></li>
			<li><a href="../../feed/default.htm" title="Syndicate this site using RSS 2.0">Entries <abbr title="Really Simple Syndication">RSS</abbr></a></li>
			<li><a href="../../comments/feed/default.htm" title="The latest comments to all posts in RSS">Comments <abbr title="Really Simple Syndication">RSS</abbr></a></li>
			<li><a href="../../../wordpress.org/default.htm" title="Powered by WordPress, state-of-the-art semantic personal publishing platform.">WordPress.org</a></li>
						</ul>
</div>		<div id="recent-posts-2" class="widget widget_recent_entries">		<div class="widget-title"><h3>Recent Posts</h3></div>		<ul>
				<li><a href="../b-6-new-virtual-function-controls-override-final-default-and-delete/default.htm" title="B.6 &#8212; New virtual function controls: override, final, default, and delete">B.6 &#8212; New virtual function controls: override, final, default, and delete</a></li>
				<li><a href="../b-5-delegating-constructors/default.htm" title="B.5 &#8212; Delegating constructors">B.5 &#8212; Delegating constructors</a></li>
				<li><a href="../b-4-initializer-lists-and-uniform-initialization/default.htm" title="B.4 &#8212; Initializer lists and uniform initialization">B.4 &#8212; Initializer lists and uniform initialization</a></li>
				<li><a href="../b-3-range-based-for-statements-and-static_assert/default.htm" title="B.3 &#8212; Range-based for statements and static_assert">B.3 &#8212; Range-based for statements and static_assert</a></li>
				<li><a href="../b-2-long-long-auto-decltype-nullptr-and-enum-classes/default.htm" title="B.2 &#8212; Long long, auto, decltype, nullptr, and enum classes">B.2 &#8212; Long long, auto, decltype, nullptr, and enum classes</a></li>
				<li><a href="../b-1-introduction-to-c11/default.htm" title="B.1 &#8212; Introduction to C++11">B.1 &#8212; Introduction to C++11</a></li>
				<li><a href="../a-6-fixed-width-integers/default.htm" title="A.6 &#8212; Fixed-width integers">A.6 &#8212; Fixed-width integers</a></li>
				<li><a href="../../site-news/site-software-updated-1123/default.htm" title="Site software updated 11/23">Site software updated 11/23</a></li>
				<li><a href="../../site-news/this-is-why-we-cant-have-nice-things-part-2/default.htm" title="This is why we can&#8217;t have nice things, part 2">This is why we can&#8217;t have nice things, part 2</a></li>
				<li><a href="../../site-news/this-is-why-we-cant-have-nice-things/default.htm" title="This is why we can&#8217;t have nice things">This is why we can&#8217;t have nice things</a></li>
				</ul>
		</div><div id="categories-1" class="widget widget_categories"><div class="widget-title"><h3>Category Indexes</h3></div>		<ul>
	<li class="cat-item cat-item-11"><a href="../../category/breaktime/default.htm" title="Games and fun activities">Break Time</a> (3)
</li>
	<li class="cat-item cat-item-6"><a href="../../category/cpp-programming/default.htm" title="View all posts filed under C++ Programming">C++ Programming</a> (11)
</li>
	<li class="cat-item cat-item-3"><a href="../../category/cpp-tutorial/default.htm" title="View all posts filed under C++ Tutorial">C++ Tutorial</a> (163)
</li>
	<li class="cat-item cat-item-10"><a href="../../category/computer-game-programming/default.htm" title="View all posts filed under Game Programming">Game Programming</a> (4)
</li>
	<li class="cat-item cat-item-14"><a href="../../category/gaming/default.htm" title="View all posts filed under Gaming">Gaming</a> (1)
</li>
	<li class="cat-item cat-item-13"><a href="../../category/general-programming/default.htm" title="View all posts filed under General Programming">General Programming</a> (3)
</li>
	<li class="cat-item cat-item-4"><a href="../../category/site-news/default.htm" title="View all posts filed under Site News">Site News</a> (23)
</li>
	<li class="cat-item cat-item-5"><a href="../../category/wordpress/default.htm" title="View all posts filed under WordPress">WordPress</a> (8)
</li>
		</ul>
</div>
		</td>
		<!-- / Left Sidebar -->
		
				

		<!-- Main Column -->
		<td id="middle">

	

		
		 

		<div class="clearfix navigation-top">
		<div class="older">&laquo; <a href="../43-file-scope-and-the-static-keyword/default.htm" rel="prev">4.3 &#8212; File scope and the static keyword</a> &nbsp;</div><div class="newer">&nbsp; <a href="../45-enumerated-types/default.htm" rel="next">4.5 &#8212; Enumerated types</a> &raquo;</div></div>
<div class="post-67 post type-post status-publish format-standard hentry category-cpp-tutorial" id="post-67">


<div class="post-headline">		<h1>4.4 &#8212; Type conversion and casting</h1>
		</div>
<div class="post-byline">By Alex, on June 19th, 2007</div>
<div class="post-bodycopy clearfix"><div style='float:left;padding:8px 8px 8px 0px;'><script type="text/javascript"><!--
google_ad_client = "ca-pub-0588844875925051";
/* Content Page Top Large */
google_ad_slot = "7945645163";
google_ad_width = 336;
google_ad_height = 280;
//-->
</script>
<acript type="text/javascript"
src="../../../pagead2.googlesyndication.com/pagead/show_ads.js">
</script></div><p>Previously, you learned that the value of a variable is stored as a sequence of bits, and the data type of the variable tells the compiler how to translate those bits into meaningful values.  Often it is the case that data needs to be converted from one type to another type.  This is called <strong>type conversion</strong>.</p>
<p><strong>Implicit type conversion</strong> is done automatically by the compiler whenever data from different types is intermixed.  When a value from one type is assigned to another type, the compiler implicitly converts the value into a value of the new type.  For example:</p>
<pre class="brush: cpp; title: ; notranslate" title="">
double dValue = 3; // implicit conversion to double value 3.0
int nValue = 3.14156; // implicit conversion to integer value 3
</pre>
<p>In the top example, the value 3 is promoted to a double value and then assigned to dValue.  The compiler will not complain about doing this.  However, some type conversions are inherently unsafe, and if the compiler can detect that an unsafe conversion is being implicitly requested, it will issue a warning.  In the second example, the fractional part of the double value is dropped because integers can not support fractional values.  Because converting a double to an int usually causes data loss (making it unsafe), compilers such as Visual Studio Express 2005 will typically issue a warning.  Other unsafe conversions involve assigning unsigned variables to signed variables (and vice-versa), and assigning large integers (eg. a 4-byte long) to integer variables of a smaller size (eg. a 2-byte short).</p>
<p><em>Warning:  Microsoft&#8217;s Visual C++ 2005 does not seem to issue warnings for unsafe signed/unsigned conversions.</em></p>
<p>When evaluating expressions, the compiler breaks each expression down into individual subexpressions.  Typically, these subexpressions involve a unary or binary operator and some operands.  Most binary operators require their operands to be of the same type.  If operands of mixed types are used, the compiler will convert one operand to agree with the other.  To do this, it uses a heirarchy of data types:</p>
<p>Long double (highest)<br />
Double<br />
Float<br />
Unsigned long int<br />
Long int<br />
Unsigned int<br />
Int (lowest)</p>
<p>For example, in the expression <code>2 + 3.14159</code>, the + operator requires both operands to be the same type.  In this case, the left operand is an int, and the right operand is a double.  Because double is higher in the heirarchy, the int gets converted to a double.  Consequently, this expression is evaluated as <code>2.0 + 3.14159</code>, which evaluates to 5.14159.</p>
<p>A good question is, &#8220;why is integer at the bottom of the tree?  What about char and short?&#8221;.  Char and short are always implicitly promoted to integers (or unsigned integers) before evaluation.  This is called <strong>widening</strong>.</p>
<p>This heirarchy can cause some interesting issues.  For example, you might expect the expression <code>5u - 10</code> to evalute to -5 (5u means 5 as an unsigned integer).  But in this case, the signed integer (10) is promoted to an unsigned integer, and the result of this expression is the unsigned integer 4294967291!</p>
<p>Many mixed conversion work as expected.  For example, <code>int nValue = 10 * 2.7</code> yields the result 27.  10 is promoted to a float, 10.0 * 2.7 evaluates to 27.0, and 27.0 is truncated into an integer (which the compiler will complain about).</p>
<p>Many new programmers try something like this:  <code>float fValue = 10 / 4;</code>.  However, because 10 and 4 are both integers, no promotion takes place.  Integer division is performed on 10 / 4, resulting in the value of 2, which is then implicitly converted to 2.0 and assigned to fValue!</p>
<p>In the case where you are using literal values (such as 10, or 4), replacing one or both of the integer literal value with a floating point literal value (10.0 or 4.0) will cause both operands to be converted to floating point values, and the division will be done using floating point math.</p>
<p>But what if you are using variables?  Consider this case:</p>
<pre class="brush: cpp; title: ; notranslate" title="">
int nValue1 = 10;
int nValue2 = 4;
float fValue = nValue1 / nValue2;
</pre>
<p>fValue will end up with the value of 2.  How do we tell the compiler that we want to use floating point division instead of integer division?  The answer is by using a cast.</p>
<p><strong>Casting</strong></p>
<p><strong>Casting</strong> represents a request by the programmer to do an explicit type conversion.  In standard C programming, casts are done via the () operator, with the name of the type to cast to inside.  For example:</p>
<pre class="brush: cpp; title: ; notranslate" title="">
int nValue1 = 10;
int nValue2 = 4;
float fValue = (float)nValue1 / nValue2;
</pre>
<p>In the above program, we use a float cast to tell the compiler to promote nValue1 to a floating point value.  Because nValue1 is a floating point value, nValue2 will then be promoted to a floating point value as well, and the division will be done using floating point division instead of integer division!</p>
<p>C++ will also let you use a C style cast with a more function-call like syntax:</p>
<pre class="brush: cpp; title: ; notranslate" title="">
int nValue1 = 10;
int nValue2 = 4;
float fValue = float(nValue1) / nValue2;
</pre>
<p>The C style cast can be inherently misused, because it will let you do things that may not make sense, such as getting rid of a const or changing a data type without changing the underlying representation.  C++ introduces a new casting operator called <strong>static_cast</strong>.  A static cast works similarly to the C style cast, except it will only do standard type conversions, which reduces the potential for inadvertant misuse:</p>
<pre class="brush: cpp; title: ; notranslate" title="">
int nValue1 = 10;
int nValue2 = 4;
float fValue = static_cast&lt;float&gt;(nValue1) / nValue2;
</pre>
<p>As mentioned above, compilers will often complain when an unsafe implicit cast is performed.  For example, consider the following program:</p>
<pre class="brush: cpp; title: ; notranslate" title="">
int nValue = 48;
char ch = nValue; // implicit cast
</pre>
<p>Casting an int (4 bytes) to a char (1 byte) is potentially unsafe, and the compiler will typically complain.  In order to announce to the compiler that you are explicitly doing something you recognize is potentially unsafe (but want to do anyway), you should use a static_cast:</p>
<pre class="brush: cpp; title: ; notranslate" title="">
int nValue = 48;
char ch = static_cast&lt;char&gt;(nValue);
</pre>
<p>In the following program, the compiler will typically complain that converting a double to an int may result in loss of data:</p>
<pre class="brush: cpp; title: ; notranslate" title="">
int nValue = 100;
nValue = nValue / 2.5;
</pre>
<p>To tell the compiler that we explicitly mean to do this:</p>
<pre class="brush: cpp; title: ; notranslate" title="">
int nValue = 100;
nValue = static_cast&lt;int&gt;(nValue / 2.5);
</pre>
<p>Casting should be avoided if at all possible, because any time a cast is used, there is potential for trouble.  But there are many times when it can not be avoided.  In these cases, the C++ static_cast should be used instead of the C-style cast.</p>
<table border=0 cellpadding=3>
<tr>
<td>
        <a href="../45-enumerated-types/default.htm" style="text-decoration:none"><img src="../../images/cpptutorial/next.png" align=middle> 4.5 &#8212; Enumerated types</a>
</td>
</tr>
<tr>
<td>
        <a href="../../#Chapter4" style="text-decoration:none"><img src="../../images/cpptutorial/up.png" align=middle> Index</a>
</td>
</tr>
<tr>
<td>
        <a href="../43-file-scope-and-the-static-keyword/default.htm" style="text-decoration:none"><img src="../../images/cpptutorial/prev.png" align=middle> 4.3 &#8212; File scope and the static keyword</a>
</td>
</tr>
</table>
<div style='padding-top:8px; padding-bottom:8px'><script type="text/javascript"><!--
google_ad_client = "ca-pub-0588844875925051";
/* Content Page Bottom - Medium Rectangle */
google_ad_slot = "2751429778";
google_ad_width = 300;
google_ad_height = 250;
//-->
</script>
<acript type="text/javascript"
src="../../../pagead2.googlesyndication.com/pagead/show_ads.js">
</script>
</div><!-- Powered by Ad Inserter Wordpress Plugin, Author: Igor Funa --></div>

<div class="post-footer"><img src="../../blog/wp-content/themes/atahualpa353/images/icons/folder-gray.gif" alt="" /> <a href="../../category/cpp-tutorial/default.htm" title="View all posts in C++ Tutorial" rel="category tag">C++ Tutorial</a>   | <a href="print/default.htm" title="Print This Post" rel="nofollow"><img class="WP-PrintIcon" src="../../blog/wp-content/plugins/wp-print/images/print.gif" alt="Print This Post" title="Print This Post" style="border: 0px;" /></a>&nbsp;<a href="print/default.htm" title="Print This Post" rel="nofollow">Print This Post</a></div>
</div><!-- / Post -->						
	
	<div class="clearfix navigation-middle">
		<div class="older">&laquo; <a href="../43-file-scope-and-the-static-keyword/default.htm" rel="prev">4.3 &#8212; File scope and the static keyword</a> &nbsp;</div><div class="newer">&nbsp; <a href="../45-enumerated-types/default.htm" rel="next">4.5 &#8212; Enumerated types</a> &raquo;</div></div>


	<a name="comments"></a><!-- named anchor for skip links -->
	<h3 id="comments">49 comments to 4.4 &#8212; Type conversion and casting</h3>

	
	<!-- Comment List -->
	<ul class="commentlist">
		
			<li class="pingback even thread-even depth-1 clearfix" id="comment-272">
		<div id="div-comment-272" class="clearfix comment-container">
		<div class="comment-author vcard">
				<span class="authorname"><a href='../76-function-overloading/default.htm' rel='external nofollow' class='url'>Learn C++ - &raquo; 7.6 -- Function overloading</a></span>
		</div>
				<div class="comment-meta commentmetadata">
		<a href="comment-page-1/#comment-272">
		August 3, 2007 at 8:25 pm</a>
        <span class="comment-reply-link"><a rel="nofollow" class="comment-reply-login" href="../../blog/wp-login.php@redirect_to=http_253a_252f_252fwww.learncpp.com_252fcpp-tutorial_252f44-type-conversion-and-casting_252f">Log in to Reply</a></span>		 
		</div>
		<p>[...] If no exact match is found, C++ tries to find a match through promotion. In the lesson on type conversion and casting, we covered how certain types can be automatically promoted via internal type conversion to other [...]</p>
		</div>
</li>
		<li class="pingback odd alt thread-odd thread-alt depth-1 clearfix" id="comment-2317">
		<div id="div-comment-2317" class="clearfix comment-container">
		<div class="comment-author vcard">
				<span class="authorname"><a href='../910-overloading-typecasts/default.htm' rel='external nofollow' class='url'>Learn C++ - &raquo; 9.10 -- Overloading typecasts</a></span>
		</div>
				<div class="comment-meta commentmetadata">
		<a href="comment-page-1/#comment-2317">
		October 30, 2007 at 12:54 pm</a>
        <span class="comment-reply-link"><a rel="nofollow" class="comment-reply-login" href="../../blog/wp-login.php@redirect_to=http_253a_252f_252fwww.learncpp.com_252fcpp-tutorial_252f44-type-conversion-and-casting_252f">Log in to Reply</a></span>		 
		</div>
		<p>[...] &#8212; Overloading typecasts   By Alex     In the lesson on type conversion and casting, you learned that C++ allows you to convert one data type to another. The following example shows [...]</p>
		</div>
</li>
		<li class="comment even thread-even depth-1 clearfix" id="comment-4793">
		<div id="div-comment-4793" class="clearfix comment-container">
		<div class="comment-author vcard">
		<img alt='' src='../../../0.gravatar.com/avatar/66ac6df2d5b3175463af0df308d3c747@s=65&d=http_253a_252f_252f0.gravatar.com_252favatar_252fad516503a11cd5ca435acc9bb6523536_253fs_253d65&r=g' class='avatar avatar-65 photo' height='65' width='65' />		<span class="authorname">Cody</span>
		</div>
				<div class="comment-meta commentmetadata">
		<a href="comment-page-1/#comment-4793">
		December 22, 2007 at 8:01 am</a>
        <span class="comment-reply-link"><a rel="nofollow" class="comment-reply-login" href="../../blog/wp-login.php@redirect_to=http_253a_252f_252fwww.learncpp.com_252fcpp-tutorial_252f44-type-conversion-and-casting_252f">Log in to Reply</a></span>		 
		</div>
		<p>Don&#8217;t you mean putting a signed variable into an unsigned variable is dangerous?</p>
<p>[ It's dangerous either way.  I updated the text to reflect this. -Alex ]</p>
		</div>
<ul class='children'>
		<li class="comment odd alt depth-2 clearfix" id="comment-77883">
		<div id="div-comment-77883" class="clearfix comment-container">
		<div class="comment-author vcard">
		<img alt='' src='../../../0.gravatar.com/avatar/8c18295b5703214974f5d91796b5abea@s=65&d=http_253a_252f_252f0.gravatar.com_252favatar_252fad516503a11cd5ca435acc9bb6523536_253fs_253d65&r=g' class='avatar avatar-65 photo' height='65' width='65' />		<span class="authorname">Chip Blach</span>
		</div>
				<div class="comment-meta commentmetadata">
		<a href="comment-page-1/#comment-77883">
		February 4, 2010 at 5:52 pm</a>
        <span class="comment-reply-link"><a rel="nofollow" class="comment-reply-login" href="../../blog/wp-login.php@redirect_to=http_253a_252f_252fwww.learncpp.com_252fcpp-tutorial_252f44-type-conversion-and-casting_252f">Log in to Reply</a></span>		 
		</div>
		<p>Casting is at the discression of the programmer.  I have had cases where I have had to cast an integer<br />
as a array of 4 unsigned chars.<br />
If the program needs it, cast it, if it does not, dont do it.</p>
<p>In c++ it is always better not to cast, but to stick with strict assignments which are provided.</p>
<p>Chip</p>
		</div>
</li>
</ul>
</li>
		<li class="comment even thread-odd thread-alt depth-1 clearfix" id="comment-5706">
		<div id="div-comment-5706" class="clearfix comment-container">
		<div class="comment-author vcard">
		<img alt='' src='../../../0.gravatar.com/avatar/0195bf75f2f76e29b4f52f919e1cec59@s=65&d=http_253a_252f_252f0.gravatar.com_252favatar_252fad516503a11cd5ca435acc9bb6523536_253fs_253d65&r=g' class='avatar avatar-65 photo' height='65' width='65' />		<span class="authorname">Abhishek</span>
		</div>
				<div class="comment-meta commentmetadata">
		<a href="comment-page-1/#comment-5706">
		January 8, 2008 at 2:02 am</a>
        <span class="comment-reply-link"><a rel="nofollow" class="comment-reply-login" href="../../blog/wp-login.php@redirect_to=http_253a_252f_252fwww.learncpp.com_252fcpp-tutorial_252f44-type-conversion-and-casting_252f">Log in to Reply</a></span>		 
		</div>
		<p><b>This paragraph(and anything after it)went over my head::</b></p>
<p>&#8220;The C style cast can be inherently misused, because it will let you do things that may not make sense, such as getting rid of a const or changing a data type without changing the underlying representation. C   introduces a new casting operator called static_cast. A static cast works similarly to the C style cast, except it will only do standard type conversions, which reduces the potential for inadvertant misuse&#8221;<br />
================================================<br />
I didn&#8217;t get the difference b/w Cpp style cast,C style cast and static_cast&#8230;&#8230;&#8230;&#8230;I think all of them do the same thing&#8230;only the syntax is different.????<br />
================================================</p>
		</div>
<ul class='children'>
		<li class="comment byuser comment-author-Tarindel bypostauthor odd alt depth-2 clearfix" id="comment-5713">
		<div id="div-comment-5713" class="clearfix comment-container bypostauthor">
		<div class="comment-author vcard">
		<img alt='' src='../../../0.gravatar.com/avatar/2bcdbab687c32f64f9208e016cafe4cc@s=65&d=http_253a_252f_252f0.gravatar.com_252favatar_252fad516503a11cd5ca435acc9bb6523536_253fs_253d65&r=g' class='avatar avatar-65 photo' height='65' width='65' />		<span class="authorname"><a href='../../../www.tarindel.com/default.htm' rel='external nofollow' class='url'>Alex</a></span>
		</div>
				<div class="comment-meta commentmetadata">
		<a href="comment-page-1/#comment-5713">
		January 8, 2008 at 8:13 am</a>
        <span class="comment-reply-link"><a rel="nofollow" class="comment-reply-login" href="../../blog/wp-login.php@redirect_to=http_253a_252f_252fwww.learncpp.com_252fcpp-tutorial_252f44-type-conversion-and-casting_252f">Log in to Reply</a></span>		 
		</div>
		<p>The purpose of static_cast is to do normal conversion between types without runtime checks.  C++ provides several other types of casts, including dynamic_cast, reinterpret_cast, and const_cast, all of which have different behavior.</p>
<p>The problem with C-style casting is that it may use a static_cast, reinterpret_cast, or const_cast (or a combination thereof) depending on the situation, and we&#8217;re not always sure which one(s) it&#8217;s going to pick.  That&#8217;s why using static_cast is safer &#8212; we&#8217;re always sure what it&#8217;s going to do, and if we try to do something it wasn&#8217;t meant for, it will give us a warning.</p>
<p>Here&#8217;s an example of a C-style cast:</p>
<pre>
const char *strMsg="Can't touch this!";
unsigned char *ptr=(unsigned char*)strMsg;
</pre>
<p>Not only is this casting a char to an unsigned char, it&#8217;s also tossing away the const.  I think it&#8217;s doing a reinterpret_cast and a const_cast combination.  In any case, you can see that this is dangerous.  Let&#8217;s try using a C++ style static_cast instead:</p>
<pre>
const char *strMsg="Can't touch this!";
unsigned char *ptr=static_cast<unsigned char*>(strMsg);
</unsigned></pre>
<p>When we try to compile this, the compiler will complain:</p>
<pre>
C:\Test.cpp(46) : error C2440: 'static_cast' : cannot convert from 'const char *' to 'unsigned char *'
        Types pointed to are unrelated; conversion requires reinterpret_cast, C-style cast or function-style cast
</pre>
<p>In other words, the C++ style casts give you more control over what type of casting you want to perform, and will warn you if you do something that violates the constraints on the cast.  On the other hand, C-style casts will try to convert whatever you throw at it, regardless of whether it really makes sense to be doing so.  This is dangerous and can lead to unexpected behavior.</p>
		</div>
<ul class='children'>
		<li class="comment even depth-3 clearfix" id="comment-5730">
		<div id="div-comment-5730" class="clearfix comment-container">
		<div class="comment-author vcard">
		<img alt='' src='../../../0.gravatar.com/avatar/0195bf75f2f76e29b4f52f919e1cec59@s=65&d=http_253a_252f_252f0.gravatar.com_252favatar_252fad516503a11cd5ca435acc9bb6523536_253fs_253d65&r=g' class='avatar avatar-65 photo' height='65' width='65' />		<span class="authorname">Abhishek</span>
		</div>
				<div class="comment-meta commentmetadata">
		<a href="comment-page-1/#comment-5730">
		January 8, 2008 at 7:46 pm</a>
        <span class="comment-reply-link"><a rel="nofollow" class="comment-reply-login" href="../../blog/wp-login.php@redirect_to=http_253a_252f_252fwww.learncpp.com_252fcpp-tutorial_252f44-type-conversion-and-casting_252f">Log in to Reply</a></span>		 
		</div>
		<p>Thanks&#8230;</p>
		</div>
</li>
</ul>
</li>
</ul>
</li>
		<li class="comment byuser comment-author-allen01 odd alt thread-even depth-1 clearfix" id="comment-6830">
		<div id="div-comment-6830" class="clearfix comment-container">
		<div class="comment-author vcard">
		<img alt='' src='../../../0.gravatar.com/avatar/4d83da488626c9316d8e5a9bd7a714ac@s=65&d=http_253a_252f_252f0.gravatar.com_252favatar_252fad516503a11cd5ca435acc9bb6523536_253fs_253d65&r=g' class='avatar avatar-65 photo' height='65' width='65' />		<span class="authorname">Allen01</span>
		</div>
				<div class="comment-meta commentmetadata">
		<a href="comment-page-1/#comment-6830">
		January 29, 2008 at 1:05 pm</a>
        <span class="comment-reply-link"><a rel="nofollow" class="comment-reply-login" href="../../blog/wp-login.php@redirect_to=http_253a_252f_252fwww.learncpp.com_252fcpp-tutorial_252f44-type-conversion-and-casting_252f">Log in to Reply</a></span>		 
		</div>
		<p>When I build and compile the code below, the output is -5. You mention that:</p>
<p> &#8220;This hierarchy can cause some interesting issues. For example, you might expect the expression 5u &#8211; 10 to evalute to -5 (5u means 5 as an unsigned integer). But in this case, the signed integer (10) is promoted to an unsigned integer, and the result of this expression is the unsigned integer 4294967291!&#8221;</p>
<p>Is the hierarchy issue compiler specific? I am using VC   2005 Express.</p>
<pre>
#include &#8220;stdafx.h&#8221;
#include <iostream>

int main()
{
using namespace std;
int x;
x = 5u &#8211; 10;
cout < < x;
return 0;
}
</pre></iostream></pre>
		</div>
<ul class='children'>
		<li class="comment byuser comment-author-Tarindel bypostauthor even depth-2 clearfix" id="comment-6833">
		<div id="div-comment-6833" class="clearfix comment-container bypostauthor">
		<div class="comment-author vcard">
		<img alt='' src='../../../0.gravatar.com/avatar/2bcdbab687c32f64f9208e016cafe4cc@s=65&d=http_253a_252f_252f0.gravatar.com_252favatar_252fad516503a11cd5ca435acc9bb6523536_253fs_253d65&r=g' class='avatar avatar-65 photo' height='65' width='65' />		<span class="authorname"><a href='../../../www.tarindel.com/default.htm' rel='external nofollow' class='url'>Alex</a></span>
		</div>
				<div class="comment-meta commentmetadata">
		<a href="comment-page-1/#comment-6833">
		January 29, 2008 at 1:55 pm</a>
        <span class="comment-reply-link"><a rel="nofollow" class="comment-reply-login" href="../../blog/wp-login.php@redirect_to=http_253a_252f_252fwww.learncpp.com_252fcpp-tutorial_252f44-type-conversion-and-casting_252f">Log in to Reply</a></span>		 
		</div>
		<p>The issue is in how you&#8217;ve written your program.  This is a tricky one.</p>
<p>For example, if you do this:</p>
<pre>
cout < < 5 - 10u;
</pre>
<p>You get 4294967291.</p>
<p>If you do this:
</pre>
<pre>
int x= 5u - 10;
cout < < x;
</pre>
<p>You get -5.</p>
<p>So what's the difference?  The answer has to do with the way types are promoted.  When the compiler encounters 5 - 10u, it promotes 5 to an unsigned value, and 5u - 10u produces the result 4294967291 (unsigned).  However, it's worth noting that 4294967291u and -5 have the exact same bit pattern -- the interpretation depends entirely on whether the value is treated as signed or unsigned.</p>
<p>Because 5 - 10u produces an unsigned value, cout treats it as an unsigned value, and prints 4294967291 as the result.</p>
<p>However, in your case, you've assigned this unsigned value back to a signed integer.  Because x is signed, when you print x in the next statement, cout prints the value as if it were signed, which is why it prints -5.</p>
<p>So the ultimate answer is that the statement as written is true.  You've simply cast 4294967291 unsigned back to a signed integer and printed that value, which is the value you were intuitively expecting anyway. :)</pre>
		</div>
<ul class='children'>
		<li class="comment odd alt depth-3 clearfix" id="comment-8798">
		<div id="div-comment-8798" class="clearfix comment-container">
		<div class="comment-author vcard">
		<img alt='' src='../../../1.gravatar.com/avatar/38d65cd7f3576c7a6a0a11a2dcb89062@s=65&d=http_253a_252f_252f1.gravatar.com_252favatar_252fad516503a11cd5ca435acc9bb6523536_253fs_253d65&r=g' class='avatar avatar-65 photo' height='65' width='65' />		<span class="authorname">Chad Bernier</span>
		</div>
				<div class="comment-meta commentmetadata">
		<a href="comment-page-1/#comment-8798">
		March 2, 2008 at 6:26 pm</a>
        <span class="comment-reply-link"><a rel="nofollow" class="comment-reply-login" href="../../blog/wp-login.php@redirect_to=http_253a_252f_252fwww.learncpp.com_252fcpp-tutorial_252f44-type-conversion-and-casting_252f">Log in to Reply</a></span>		 
		</div>
		<p>so in his case, two wrongs made a right?</p>
		</div>
</li>
</ul>
</li>
</ul>
</li>
		<li class="comment even thread-odd thread-alt depth-1 clearfix" id="comment-9108">
		<div id="div-comment-9108" class="clearfix comment-container">
		<div class="comment-author vcard">
		<img alt='' src='../../../1.gravatar.com/avatar/b7fb013e67d237e6bb2100aad32f93f7@s=65&d=http_253a_252f_252f1.gravatar.com_252favatar_252fad516503a11cd5ca435acc9bb6523536_253fs_253d65&r=g' class='avatar avatar-65 photo' height='65' width='65' />		<span class="authorname"><a href='default.htm' rel='external nofollow' class='url'>faraz</a></span>
		</div>
				<div class="comment-meta commentmetadata">
		<a href="comment-page-1/#comment-9108">
		March 7, 2008 at 10:44 pm</a>
        <span class="comment-reply-link"><a rel="nofollow" class="comment-reply-login" href="../../blog/wp-login.php@redirect_to=http_253a_252f_252fwww.learncpp.com_252fcpp-tutorial_252f44-type-conversion-and-casting_252f">Log in to Reply</a></span>		 
		</div>
		<p>i have a problem i want to do get input from user then i want to do the multiplication,division,subtraction,addititon,and modulus by using type double.How i will do modulus with double variable any one can provide me the code</p>
		</div>
<ul class='children'>
		<li class="comment byuser comment-author-Tarindel bypostauthor odd alt depth-2 clearfix" id="comment-9131">
		<div id="div-comment-9131" class="clearfix comment-container bypostauthor">
		<div class="comment-author vcard">
		<img alt='' src='../../../0.gravatar.com/avatar/2bcdbab687c32f64f9208e016cafe4cc@s=65&d=http_253a_252f_252f0.gravatar.com_252favatar_252fad516503a11cd5ca435acc9bb6523536_253fs_253d65&r=g' class='avatar avatar-65 photo' height='65' width='65' />		<span class="authorname"><a href='../../../www.tarindel.com/default.htm' rel='external nofollow' class='url'>Alex</a></span>
		</div>
				<div class="comment-meta commentmetadata">
		<a href="comment-page-1/#comment-9131">
		March 8, 2008 at 12:46 pm</a>
        <span class="comment-reply-link"><a rel="nofollow" class="comment-reply-login" href="../../blog/wp-login.php@redirect_to=http_253a_252f_252fwww.learncpp.com_252fcpp-tutorial_252f44-type-conversion-and-casting_252f">Log in to Reply</a></span>		 
		</div>
		<p>Modulus is an integer operation and can not be used with doubles.</p>
		</div>
</li>
</ul>
</li>
		<li class="pingback even thread-even depth-1 clearfix" id="comment-13459">
		<div id="div-comment-13459" class="clearfix comment-container">
		<div class="comment-author vcard">
				<span class="authorname"><a href='../43-file-scope-and-the-static-keyword/default.htm' rel='external nofollow' class='url'>Learn C++ - &raquo; 4.3 &#8212; File scope and the static keyword</a></span>
		</div>
				<div class="comment-meta commentmetadata">
		<a href="comment-page-1/#comment-13459">
		April 28, 2008 at 8:42 pm</a>
        <span class="comment-reply-link"><a rel="nofollow" class="comment-reply-login" href="../../blog/wp-login.php@redirect_to=http_253a_252f_252fwww.learncpp.com_252fcpp-tutorial_252f44-type-conversion-and-casting_252f">Log in to Reply</a></span>		 
		</div>
		<p>[...] 2007      Prev/Next Posts   &laquo; 4.2 &#8212; Global variables | Home | 4.4 &#8212; Type conversion and casting &raquo;     Tuesday, June 19th, 2007 at 5:46 [...]</p>
		</div>
</li>
		<li class="comment odd alt thread-odd thread-alt depth-1 clearfix" id="comment-23136">
		<div id="div-comment-23136" class="clearfix comment-container">
		<div class="comment-author vcard">
		<img alt='' src='../../../1.gravatar.com/avatar/99c1cacd1e00427af59b16020d688e76@s=65&d=http_253a_252f_252f1.gravatar.com_252favatar_252fad516503a11cd5ca435acc9bb6523536_253fs_253d65&r=g' class='avatar avatar-65 photo' height='65' width='65' />		<span class="authorname">Shankar</span>
		</div>
				<div class="comment-meta commentmetadata">
		<a href="comment-page-1/#comment-23136">
		August 8, 2008 at 2:10 am</a>
        <span class="comment-reply-link"><a rel="nofollow" class="comment-reply-login" href="../../blog/wp-login.php@redirect_to=http_253a_252f_252fwww.learncpp.com_252fcpp-tutorial_252f44-type-conversion-and-casting_252f">Log in to Reply</a></span>		 
		</div>
		<p>I find that if nValue1 and nValue2 are char and they are set to the max value (127), then assigning nValue1 + nValue2 to fValue results in the correct value (254) instead of -2. Similarly also for short int, but not for int. With int, unless at least one is type cast to float, the answer is -2. This behavior I find with Visual Studio 2005.</p>
		</div>
</li>
		<li class="comment even thread-even depth-1 clearfix" id="comment-37201">
		<div id="div-comment-37201" class="clearfix comment-container">
		<div class="comment-author vcard">
		<img alt='' src='../../../0.gravatar.com/avatar/6611ed7b5e7ff2700c715ae470a43ba9@s=65&d=http_253a_252f_252f0.gravatar.com_252favatar_252fad516503a11cd5ca435acc9bb6523536_253fs_253d65&r=g' class='avatar avatar-65 photo' height='65' width='65' />		<span class="authorname">Alok</span>
		</div>
				<div class="comment-meta commentmetadata">
		<a href="comment-page-1/#comment-37201">
		January 12, 2009 at 3:07 am</a>
        <span class="comment-reply-link"><a rel="nofollow" class="comment-reply-login" href="../../blog/wp-login.php@redirect_to=http_253a_252f_252fwww.learncpp.com_252fcpp-tutorial_252f44-type-conversion-and-casting_252f">Log in to Reply</a></span>		 
		</div>
		<p>Even after using static_cast, i am getting compiler warning &#8220;warning (etoa:1643): narrowing or signed-to-unsigned type conversion found: unsigned long to unsigned short&#8221;.</p>
<p>I am trying to assigned int variable to short int variable.</p>
		</div>
</li>
		<li class="comment odd alt thread-odd thread-alt depth-1 clearfix" id="comment-37217">
		<div id="div-comment-37217" class="clearfix comment-container">
		<div class="comment-author vcard">
		<img alt='' src='../../../1.gravatar.com/avatar/b0a2a5e9fbdf6b6d8ede14ed73c7166b@s=65&d=http_253a_252f_252f1.gravatar.com_252favatar_252fad516503a11cd5ca435acc9bb6523536_253fs_253d65&r=g' class='avatar avatar-65 photo' height='65' width='65' />		<span class="authorname">spacedmonkey</span>
		</div>
				<div class="comment-meta commentmetadata">
		<a href="comment-page-1/#comment-37217">
		January 12, 2009 at 5:22 am</a>
        <span class="comment-reply-link"><a rel="nofollow" class="comment-reply-login" href="../../blog/wp-login.php@redirect_to=http_253a_252f_252fwww.learncpp.com_252fcpp-tutorial_252f44-type-conversion-and-casting_252f">Log in to Reply</a></span>		 
		</div>
		<p>Hi,</p>
<p>I just have a query about casting. When you cast a variable from one type to another in order to carry out some statement or other, is the variable permanently changed to this type or is it just temporarily changed at the point where the cast command is used?</p>
<p>For instance:</p>
<pre>int nValue1 = 10;
int nValue2 = 4;
float fValue = static_cast&lt;float&gt;(nValue1) / nValue2;</pre>
<p>nValue1 is cast as a float in line 3 (and nValue2 is changed to a float as well I assume). Is nValue1 (and nValue2) a float from this point on in the program or does it retain its original type of int?</p>
		</div>
<ul class='children'>
		<li class="comment even depth-2 clearfix" id="comment-41799">
		<div id="div-comment-41799" class="clearfix comment-container">
		<div class="comment-author vcard">
		<img alt='' src='../../../0.gravatar.com/avatar/8fe1d1091000693cac8e0f080fa70931@s=65&d=http_253a_252f_252f0.gravatar.com_252favatar_252fad516503a11cd5ca435acc9bb6523536_253fs_253d65&r=g' class='avatar avatar-65 photo' height='65' width='65' />		<span class="authorname">Anu</span>
		</div>
				<div class="comment-meta commentmetadata">
		<a href="comment-page-1/#comment-41799">
		February 5, 2009 at 6:53 am</a>
        <span class="comment-reply-link"><a rel="nofollow" class="comment-reply-login" href="../../blog/wp-login.php@redirect_to=http_253a_252f_252fwww.learncpp.com_252fcpp-tutorial_252f44-type-conversion-and-casting_252f">Log in to Reply</a></span>		 
		</div>
		<p>Hi spacedmonkey,</p>
<p>I tried to answer your question&#8230;by running the following code:</p>
<pre>
int nValue1 = 10;
int nValue2 = 4;
float fValue = static_cast&lt;float&gt;(nValue1) / nValue2;

cout &lt;&lt; &quot;fValue is &quot; &lt;&lt; fValue &lt;&lt; endl;
cout &lt;&lt; &quot;nValue1 is &quot; &lt;&lt; nValue1&lt;&lt; endl;
cout &lt;&lt; &quot;nValue2 is &quot; &lt;&lt; nValue2&lt;&lt; endl;
</pre>
<p>The output is 2.5, 10 and 4<br />
So, this means that the values of nValue1 and nValue2 are temporarily casted as floats, just for evaluating that expression.</p>
		</div>
</li>
		<li class="comment byuser comment-author-Tarindel bypostauthor odd alt depth-2 clearfix" id="comment-41936">
		<div id="div-comment-41936" class="clearfix comment-container bypostauthor">
		<div class="comment-author vcard">
		<img alt='' src='../../../0.gravatar.com/avatar/2bcdbab687c32f64f9208e016cafe4cc@s=65&d=http_253a_252f_252f0.gravatar.com_252favatar_252fad516503a11cd5ca435acc9bb6523536_253fs_253d65&r=g' class='avatar avatar-65 photo' height='65' width='65' />		<span class="authorname"><a href='../../../www.tarindel.com/default.htm' rel='external nofollow' class='url'>Alex</a></span>
		</div>
				<div class="comment-meta commentmetadata">
		<a href="comment-page-1/#comment-41936">
		February 5, 2009 at 8:44 pm</a>
        <span class="comment-reply-link"><a rel="nofollow" class="comment-reply-login" href="../../blog/wp-login.php@redirect_to=http_253a_252f_252fwww.learncpp.com_252fcpp-tutorial_252f44-type-conversion-and-casting_252f">Log in to Reply</a></span>		 
		</div>
		<p>They are temporarily cast.  If you don&#8217;t assign those temporary values to anything, they are lost.  The original variable is not changed.</p>
		</div>
</li>
</ul>
</li>
		<li class="comment even thread-even depth-1 clearfix" id="comment-38532">
		<div id="div-comment-38532" class="clearfix comment-container">
		<div class="comment-author vcard">
		<img alt='' src='../../../0.gravatar.com/avatar/672da9c4f13b5d9b769e372ee1cb46b7@s=65&d=http_253a_252f_252f0.gravatar.com_252favatar_252fad516503a11cd5ca435acc9bb6523536_253fs_253d65&r=g' class='avatar avatar-65 photo' height='65' width='65' />		<span class="authorname"><a href='../../default.htm' rel='external nofollow' class='url'>Theo</a></span>
		</div>
				<div class="comment-meta commentmetadata">
		<a href="comment-page-1/#comment-38532">
		January 21, 2009 at 5:22 am</a>
        <span class="comment-reply-link"><a rel="nofollow" class="comment-reply-login" href="../../blog/wp-login.php@redirect_to=http_253a_252f_252fwww.learncpp.com_252fcpp-tutorial_252f44-type-conversion-and-casting_252f">Log in to Reply</a></span>		 
		</div>
		<p>value of a variable or<br />
value of the variables, not<br />
value of a variables</p>
<p>[ Fixed.  Thanks!  -Alex ]</p>
		</div>
</li>
		<li class="comment odd alt thread-odd thread-alt depth-1 clearfix" id="comment-59970">
		<div id="div-comment-59970" class="clearfix comment-container">
		<div class="comment-author vcard">
		<img alt='' src='../../../1.gravatar.com/avatar/10dc9f8052d5a4b080c620a4467e54f7@s=65&d=http_253a_252f_252f1.gravatar.com_252favatar_252fad516503a11cd5ca435acc9bb6523536_253fs_253d65&r=g' class='avatar avatar-65 photo' height='65' width='65' />		<span class="authorname">csvan</span>
		</div>
				<div class="comment-meta commentmetadata">
		<a href="comment-page-1/#comment-59970">
		May 4, 2009 at 5:19 am</a>
        <span class="comment-reply-link"><a rel="nofollow" class="comment-reply-login" href="../../blog/wp-login.php@redirect_to=http_253a_252f_252fwww.learncpp.com_252fcpp-tutorial_252f44-type-conversion-and-casting_252f">Log in to Reply</a></span>		 
		</div>
		<p>I am not entirely clear on the second-last example of this page: About half-way through the tutorial, it is explained that since double has higher precedence then int, an arithmetic operation on an int and a double will cause the int to be turned into a double. Yet, here (the second last example), it is stated that the compiler will complain about a double being converted to an int! </p>
<p>Is there thus a difference between first EXPLICITLY declaring a variable of a certain type and then using that variable in an arithmetic operation with an implicitly defined variable (such as 2.5), as opposed to have two implicitly declared and defined variables in an arithmetic operation (such as 2 / 2.5)?</p>
		</div>
<ul class='children'>
		<li class="comment even depth-2 clearfix" id="comment-61541">
		<div id="div-comment-61541" class="clearfix comment-container">
		<div class="comment-author vcard">
		<img alt='' src='../../../1.gravatar.com/avatar/96c5a429538e195efafd9157b91dd601@s=65&d=http_253a_252f_252f1.gravatar.com_252favatar_252fad516503a11cd5ca435acc9bb6523536_253fs_253d65&r=g' class='avatar avatar-65 photo' height='65' width='65' />		<span class="authorname">jdurham</span>
		</div>
				<div class="comment-meta commentmetadata">
		<a href="comment-page-1/#comment-61541">
		May 27, 2009 at 4:17 am</a>
        <span class="comment-reply-link"><a rel="nofollow" class="comment-reply-login" href="../../blog/wp-login.php@redirect_to=http_253a_252f_252fwww.learncpp.com_252fcpp-tutorial_252f44-type-conversion-and-casting_252f">Log in to Reply</a></span>		 
		</div>
		<p>when promoting an int to a double there is no warning because the int is increasing in precedence (changing a 2 to a 2.0 does not cause any unwanted behavior).</p>
<p>The compiler will warn you about lowering the precedence of a value, which happens when you convert a double to an int. (Chaning 2.5 into an int results in 2, so the .5 gets lost)</p>
		</div>
</li>
</ul>
</li>
		<li class="comment odd alt thread-even depth-1 clearfix" id="comment-60573">
		<div id="div-comment-60573" class="clearfix comment-container">
		<div class="comment-author vcard">
		<img alt='' src='../../../1.gravatar.com/avatar/d493aa6ab362118f71bf7e9c6d507b97@s=65&d=http_253a_252f_252f1.gravatar.com_252favatar_252fad516503a11cd5ca435acc9bb6523536_253fs_253d65&r=g' class='avatar avatar-65 photo' height='65' width='65' />		<span class="authorname">Aaron</span>
		</div>
				<div class="comment-meta commentmetadata">
		<a href="comment-page-1/#comment-60573">
		May 12, 2009 at 2:58 am</a>
        <span class="comment-reply-link"><a rel="nofollow" class="comment-reply-login" href="../../blog/wp-login.php@redirect_to=http_253a_252f_252fwww.learncpp.com_252fcpp-tutorial_252f44-type-conversion-and-casting_252f">Log in to Reply</a></span>		 
		</div>
		<p>hi for the second example, im trying to use casting to convert the equation dividing 2 integers into a float using static_cast but it keeps returning an int. any pointers? the line of code i am using is :</p>
<p>cout &lt;&lt; &#8220;Your fractions multiplied together = &#8221;<br />
    &lt;&lt; static_cast(sFraction1.nNumerator*sFraction2.nNumerator)/(nFraction1.nDenominator*sFraction2.nDenominator);</p>
		</div>
</li>
		<li class="comment even thread-odd thread-alt depth-1 clearfix" id="comment-62972">
		<div id="div-comment-62972" class="clearfix comment-container">
		<div class="comment-author vcard">
		<img alt='' src='../../../1.gravatar.com/avatar/3cf2a89a76de64e73fb99900732c0930@s=65&d=http_253a_252f_252f1.gravatar.com_252favatar_252fad516503a11cd5ca435acc9bb6523536_253fs_253d65&r=g' class='avatar avatar-65 photo' height='65' width='65' />		<span class="authorname">Zak</span>
		</div>
				<div class="comment-meta commentmetadata">
		<a href="comment-page-1/#comment-62972">
		June 23, 2009 at 6:52 pm</a>
        <span class="comment-reply-link"><a rel="nofollow" class="comment-reply-login" href="../../blog/wp-login.php@redirect_to=http_253a_252f_252fwww.learncpp.com_252fcpp-tutorial_252f44-type-conversion-and-casting_252f">Log in to Reply</a></span>		 
		</div>
		<p>After doing:</p>
<pre>
	int nValue7 = 48;
	char chUnsafe = static_cast(nValue7);
	cout &lt;&lt; "chUnsafe = " &lt;&lt; chUnsafe &lt;&lt; endl;
	cout &lt;&lt; endl;  //Prints 2

<!--formatted--></pre>
<p>It printed out 0.</p>
<p>After doing:</p>
<pre>
	int nValue7 = 48;
	char chUnsafe = static_cast(nValue7);
	cout &lt;&lt; "chUnsafe = " &lt;&lt; (int)chUnsafe &lt;&lt; endl;
	cout &lt;&lt; endl;  //Prints 48
<!--formatted--></pre>
<p>It printed out 48.</p>
<p>So what does the number 48 convert to as a character? Why did it come out as 0? Is that the character it was assigned?</p>
		</div>
<ul class='children'>
		<li class="comment odd alt depth-2 clearfix" id="comment-63331">
		<div id="div-comment-63331" class="clearfix comment-container">
		<div class="comment-author vcard">
		<img alt='' src='../../../1.gravatar.com/avatar/7b761092fa0823d599a228b787ee5a78@s=65&d=http_253a_252f_252f1.gravatar.com_252favatar_252fad516503a11cd5ca435acc9bb6523536_253fs_253d65&r=g' class='avatar avatar-65 photo' height='65' width='65' />		<span class="authorname">TBM</span>
		</div>
				<div class="comment-meta commentmetadata">
		<a href="comment-page-1/#comment-63331">
		June 28, 2009 at 2:29 pm</a>
        <span class="comment-reply-link"><a rel="nofollow" class="comment-reply-login" href="../../blog/wp-login.php@redirect_to=http_253a_252f_252fwww.learncpp.com_252fcpp-tutorial_252f44-type-conversion-and-casting_252f">Log in to Reply</a></span>		 
		</div>
		<p>Simply put yes a decimal of 48 converts to a binary of 0011 0000 which is = to a hex value of 30 which evaluates to 0 as a char. Incrementing nValue7 to 49 would return 1 and 50 would return 2 and so on. Remember that an int number and a char number are not necessarily the same binary value.</p>
		</div>
</li>
</ul>
</li>
		<li class="comment even thread-even depth-1 clearfix" id="comment-64266">
		<div id="div-comment-64266" class="clearfix comment-container">
		<div class="comment-author vcard">
		<img alt='' src='../../../1.gravatar.com/avatar/f2fc55712ee72f1e81c50399d5df4900@s=65&d=http_253a_252f_252f1.gravatar.com_252favatar_252fad516503a11cd5ca435acc9bb6523536_253fs_253d65&r=g' class='avatar avatar-65 photo' height='65' width='65' />		<span class="authorname">Kjell</span>
		</div>
				<div class="comment-meta commentmetadata">
		<a href="comment-page-1/#comment-64266">
		July 13, 2009 at 3:07 pm</a>
        <span class="comment-reply-link"><a rel="nofollow" class="comment-reply-login" href="../../blog/wp-login.php@redirect_to=http_253a_252f_252fwww.learncpp.com_252fcpp-tutorial_252f44-type-conversion-and-casting_252f">Log in to Reply</a></span>		 
		</div>
		<p>Is it possible to convert a char or a string to int or double with the same human reading? Like you have a char[] 2.2 and want to convert it to a double with 2.2 as value.</p>
		</div>
</li>
		<li class="comment odd alt thread-odd thread-alt depth-1 clearfix" id="comment-74121">
		<div id="div-comment-74121" class="clearfix comment-container">
		<div class="comment-author vcard">
		<img alt='' src='../../../1.gravatar.com/avatar/b6a4a0966b58e44bde7d2f3e2da67754@s=65&d=http_253a_252f_252f1.gravatar.com_252favatar_252fad516503a11cd5ca435acc9bb6523536_253fs_253d65&r=g' class='avatar avatar-65 photo' height='65' width='65' />		<span class="authorname">Dan</span>
		</div>
				<div class="comment-meta commentmetadata">
		<a href="comment-page-1/#comment-74121">
		December 12, 2009 at 8:36 am</a>
        <span class="comment-reply-link"><a rel="nofollow" class="comment-reply-login" href="../../blog/wp-login.php@redirect_to=http_253a_252f_252fwww.learncpp.com_252fcpp-tutorial_252f44-type-conversion-and-casting_252f">Log in to Reply</a></span>		 
		</div>
		<p>A good programmer would know what he is doing and not need coddling with extra, complicated syntax to explicitly tell it what to cast it as.</p>
<p>(char)<br />
is so much easier to type than:<br />
static_cast&#8230;</p>
		</div>
</li>
		<li class="comment even thread-even depth-1 clearfix" id="comment-80624">
		<div id="div-comment-80624" class="clearfix comment-container">
		<div class="comment-author vcard">
		<img alt='' src='../../../1.gravatar.com/avatar/d25b58d6894baeebd9dde4fd89bedac6@s=65&d=http_253a_252f_252f1.gravatar.com_252favatar_252fad516503a11cd5ca435acc9bb6523536_253fs_253d65&r=g' class='avatar avatar-65 photo' height='65' width='65' />		<span class="authorname"><a href='../110-a-first-look-at-the-preprocessor/default.htm' rel='external nofollow' class='url'>Mike</a></span>
		</div>
				<div class="comment-meta commentmetadata">
		<a href="comment-page-1/#comment-80624">
		March 15, 2010 at 9:51 am</a>
        <span class="comment-reply-link"><a rel="nofollow" class="comment-reply-login" href="../../blog/wp-login.php@redirect_to=http_253a_252f_252fwww.learncpp.com_252fcpp-tutorial_252f44-type-conversion-and-casting_252f">Log in to Reply</a></span>		 
		</div>
		<p>x = static_cast(stuff);</p>
<p>the type inside  is what you want it to be converted TO?</p>
		</div>
<ul class='children'>
		<li class="comment odd alt depth-2 clearfix" id="comment-80625">
		<div id="div-comment-80625" class="clearfix comment-container">
		<div class="comment-author vcard">
		<img alt='' src='../../../1.gravatar.com/avatar/d25b58d6894baeebd9dde4fd89bedac6@s=65&d=http_253a_252f_252f1.gravatar.com_252favatar_252fad516503a11cd5ca435acc9bb6523536_253fs_253d65&r=g' class='avatar avatar-65 photo' height='65' width='65' />		<span class="authorname"><a href='../110-a-first-look-at-the-preprocessor/default.htm' rel='external nofollow' class='url'>Mike</a></span>
		</div>
				<div class="comment-meta commentmetadata">
		<a href="comment-page-1/#comment-80625">
		March 15, 2010 at 9:52 am</a>
        <span class="comment-reply-link"><a rel="nofollow" class="comment-reply-login" href="../../blog/wp-login.php@redirect_to=http_253a_252f_252fwww.learncpp.com_252fcpp-tutorial_252f44-type-conversion-and-casting_252f">Log in to Reply</a></span>		 
		</div>
		<pre>x = static_cast&lt;type&gt;(stuff)</pre>
<p>the type inside  is what you want it to be converted TO?</p>
<p>(sry for reposting but the brackets didnt show)</p>
		</div>
<ul class='children'>
		<li class="comment even depth-3 clearfix" id="comment-84817">
		<div id="div-comment-84817" class="clearfix comment-container">
		<div class="comment-author vcard">
		<img alt='' src='../../../1.gravatar.com/avatar/5f0c1d12bebe6149813857f88e3fe97a@s=65&d=http_253a_252f_252f1.gravatar.com_252favatar_252fad516503a11cd5ca435acc9bb6523536_253fs_253d65&r=g' class='avatar avatar-65 photo' height='65' width='65' />		<span class="authorname"><a href='../../../learncpp.com/default.htm' rel='external nofollow' class='url'>Chad</a></span>
		</div>
				<div class="comment-meta commentmetadata">
		<a href="comment-page-1/#comment-84817">
		May 17, 2010 at 7:37 am</a>
        <span class="comment-reply-link"><a rel="nofollow" class="comment-reply-login" href="../../blog/wp-login.php@redirect_to=http_253a_252f_252fwww.learncpp.com_252fcpp-tutorial_252f44-type-conversion-and-casting_252f">Log in to Reply</a></span>		 
		</div>
		<p>Yes. The type can be int, float, char, double..etc</p>
		</div>
</li>
</ul>
</li>
</ul>
</li>
		<li class="comment odd alt thread-odd thread-alt depth-1 clearfix" id="comment-85507">
		<div id="div-comment-85507" class="clearfix comment-container">
		<div class="comment-author vcard">
		<img alt='' src='../../../1.gravatar.com/avatar/9346d1c9a6d7f591cc38728df6e1c563@s=65&d=http_253a_252f_252f1.gravatar.com_252favatar_252fad516503a11cd5ca435acc9bb6523536_253fs_253d65&r=g' class='avatar avatar-65 photo' height='65' width='65' />		<span class="authorname">Mkc</span>
		</div>
				<div class="comment-meta commentmetadata">
		<a href="comment-page-1/#comment-85507">
		May 28, 2010 at 6:05 am</a>
        <span class="comment-reply-link"><a rel="nofollow" class="comment-reply-login" href="../../blog/wp-login.php@redirect_to=http_253a_252f_252fwww.learncpp.com_252fcpp-tutorial_252f44-type-conversion-and-casting_252f">Log in to Reply</a></span>		 
		</div>
		<p>Thank you! I read about this in a book a while back and just didn&#8217;t get the point. Now I do!</p>
<p>Your real world examples and &#8220;new programmers tend to do this&#8221; advice make this a fantastic tutorial.</p>
		</div>
</li>
		<li class="pingback even thread-even depth-1 clearfix" id="comment-86687">
		<div id="div-comment-86687" class="clearfix comment-container">
		<div class="comment-author vcard">
				<span class="authorname"><a href='../../../phbaer.net/2010/06/17/type-casting' rel='external nofollow' class='url'>phbaer &raquo; Blog Archive &raquo; Type Casting</a></span>
		</div>
				<div class="comment-meta commentmetadata">
		<a href="comment-page-1/#comment-86687">
		June 17, 2010 at 8:05 am</a>
        <span class="comment-reply-link"><a rel="nofollow" class="comment-reply-login" href="../../blog/wp-login.php@redirect_to=http_253a_252f_252fwww.learncpp.com_252fcpp-tutorial_252f44-type-conversion-and-casting_252f">Log in to Reply</a></span>		 
		</div>
		<p>[...] For more inform­a­tion in C/C++ type cast­ing issues, have a look at the fol­low­ing web page: <a href="default.htm" rel="nofollow">http://www.learncpp.com/cpp-tutorial/44-type-conversion-and-casting/</a>  [...]</p>
		</div>
</li>
		<li class="pingback odd alt thread-odd thread-alt depth-1 clearfix" id="comment-87404">
		<div id="div-comment-87404" class="clearfix comment-container">
		<div class="comment-author vcard">
				<span class="authorname"><a href='../../../cplusplus.psexam.com/c-tutorial-and-online-ebook/default.htm' rel='external nofollow' class='url'>C++ Tutorial and Online Ebook</a></span>
		</div>
				<div class="comment-meta commentmetadata">
		<a href="comment-page-1/#comment-87404">
		June 29, 2010 at 4:57 pm</a>
        <span class="comment-reply-link"><a rel="nofollow" class="comment-reply-login" href="../../blog/wp-login.php@redirect_to=http_253a_252f_252fwww.learncpp.com_252fcpp-tutorial_252f44-type-conversion-and-casting_252f">Log in to Reply</a></span>		 
		</div>
		<p>[...] 4.4 Type conversion and casting [...]</p>
		</div>
</li>
		<li class="comment byuser comment-author-skaptor even thread-even depth-1 clearfix" id="comment-94857">
		<div id="div-comment-94857" class="clearfix comment-container">
		<div class="comment-author vcard">
		<img alt='' src='../../../0.gravatar.com/avatar/6270080b7028d38ad921cad61dfb3dcb@s=65&d=http_253a_252f_252f0.gravatar.com_252favatar_252fad516503a11cd5ca435acc9bb6523536_253fs_253d65&r=g' class='avatar avatar-65 photo' height='65' width='65' />		<span class="authorname">Skaptor</span>
		</div>
				<div class="comment-meta commentmetadata">
		<a href="comment-page-1/#comment-94857">
		November 2, 2010 at 7:21 pm</a>
        <span class="comment-reply-link"><a rel="nofollow" class="comment-reply-login" href="../../blog/wp-login.php@redirect_to=http_253a_252f_252fwww.learncpp.com_252fcpp-tutorial_252f44-type-conversion-and-casting_252f">Log in to Reply</a></span>		 
		</div>
		<p>Hello, I have a problem, CodeWarrior shows up an error when trying to compile a project i doing,<br />
the compiler says &#8220;Missing ´}´ on line 499, what Im I doing wrong hope you can help me</p>
<p>void main(void)<br />
{<br />
  Sys_Peripheral_Init();<br />
  int nValue;    //this is line 499<br />
  ClearDisplay();<br />
  string = &#8221;         JUANCAR SAYS          &#8220;;<br />
  ScrollString(string);</p>
<p>  for (j=0 ; j&lt;3 ; j++)<br />
   {<br />
      for (i=1 ; i&lt;10000 ; i++);<br />
   }</p>
<p>  _PTCD.Byte = 0;<br />
  _PTBD.Byte = 0;</p>
<p>//A sequence for some LEDs goes here</p>
<p>   int nValue = 1;<br />
   char count = nValue; // implicit cast im trying to do</p>
		</div>
</li>
		<li class="comment byuser comment-author-surya odd alt thread-odd thread-alt depth-1 clearfix" id="comment-95560">
		<div id="div-comment-95560" class="clearfix comment-container">
		<div class="comment-author vcard">
		<img alt='' src='../../../1.gravatar.com/avatar/d129fec21f525715337b5d1e6260b039@s=65&d=http_253a_252f_252f1.gravatar.com_252favatar_252fad516503a11cd5ca435acc9bb6523536_253fs_253d65&r=g' class='avatar avatar-65 photo' height='65' width='65' />		<span class="authorname">surya</span>
		</div>
				<div class="comment-meta commentmetadata">
		<a href="comment-page-1/#comment-95560">
		June 15, 2011 at 2:13 am</a>
        <span class="comment-reply-link"><a rel="nofollow" class="comment-reply-login" href="../../blog/wp-login.php@redirect_to=http_253a_252f_252fwww.learncpp.com_252fcpp-tutorial_252f44-type-conversion-and-casting_252f">Log in to Reply</a></span>		 
		</div>
		<p>hi&#8230;<br />
 i am unable to understand what happens when a static cast is applied to pointers to objects of different types.</p>
<p>if we do like </p>
<p>int i;<br />
float f =24.56;<br />
i=static_cast(f);</p>
<p>here there is loss of data.</p>
<p>In the same way, can i use static cast like this</p>
<p>class ex1<br />
{<br />
int a;<br />
float b;<br />
public:<br />
ex1()<br />
{<br />
a=10;<br />
b=2.3;<br />
}<br />
};</p>
<p>class ex2<br />
{<br />
double d;<br />
public:<br />
ex2()<br />
{<br />
d=23.44;<br />
}<br />
};<br />
int main()<br />
{<br />
ex1 *p1= new ex1();<br />
ex2 *p2;</p>
<p>p2=static_cast(p1);  //is this correct??</p>
<p>if it is correct &#8230;what does p2 contain now??</p>
<p>what does the compiler do here??</p>
		</div>
</li>
		<li class="comment byuser comment-author-surya even thread-even depth-1 clearfix" id="comment-95561">
		<div id="div-comment-95561" class="clearfix comment-container">
		<div class="comment-author vcard">
		<img alt='' src='../../../1.gravatar.com/avatar/d129fec21f525715337b5d1e6260b039@s=65&d=http_253a_252f_252f1.gravatar.com_252favatar_252fad516503a11cd5ca435acc9bb6523536_253fs_253d65&r=g' class='avatar avatar-65 photo' height='65' width='65' />		<span class="authorname">surya</span>
		</div>
				<div class="comment-meta commentmetadata">
		<a href="comment-page-1/#comment-95561">
		June 15, 2011 at 2:16 am</a>
        <span class="comment-reply-link"><a rel="nofollow" class="comment-reply-login" href="../../blog/wp-login.php@redirect_to=http_253a_252f_252fwww.learncpp.com_252fcpp-tutorial_252f44-type-conversion-and-casting_252f">Log in to Reply</a></span>		 
		</div>
		<p>sry</p>
<p>p2=static_cast(p1);</p>
		</div>
</li>
		<li class="comment byuser comment-author-surya odd alt thread-odd thread-alt depth-1 clearfix" id="comment-95562">
		<div id="div-comment-95562" class="clearfix comment-container">
		<div class="comment-author vcard">
		<img alt='' src='../../../1.gravatar.com/avatar/d129fec21f525715337b5d1e6260b039@s=65&d=http_253a_252f_252f1.gravatar.com_252favatar_252fad516503a11cd5ca435acc9bb6523536_253fs_253d65&r=g' class='avatar avatar-65 photo' height='65' width='65' />		<span class="authorname">surya</span>
		</div>
				<div class="comment-meta commentmetadata">
		<a href="comment-page-1/#comment-95562">
		June 15, 2011 at 2:51 am</a>
        <span class="comment-reply-link"><a rel="nofollow" class="comment-reply-login" href="../../blog/wp-login.php@redirect_to=http_253a_252f_252fwww.learncpp.com_252fcpp-tutorial_252f44-type-conversion-and-casting_252f">Log in to Reply</a></span>		 
		</div>
		<p>p2=static_cast&lt;&gt;(p1);</p>
		</div>
<ul class='children'>
		<li class="comment byuser comment-author-zingmars even depth-2 clearfix" id="comment-95564">
		<div id="div-comment-95564" class="clearfix comment-container">
		<div class="comment-author vcard">
		<img alt='' src='../../../0.gravatar.com/avatar/21b2deaaa0bcf172aa88051b6cf7ba1f@s=65&d=http_253a_252f_252f0.gravatar.com_252favatar_252fad516503a11cd5ca435acc9bb6523536_253fs_253d65&r=g' class='avatar avatar-65 photo' height='65' width='65' />		<span class="authorname"><a href='../../../127.0.0.1/default.htm' rel='external nofollow' class='url'>zingmars</a></span>
		</div>
				<div class="comment-meta commentmetadata">
		<a href="comment-page-1/#comment-95564">
		June 15, 2011 at 9:44 am</a>
        <span class="comment-reply-link"><a rel="nofollow" class="comment-reply-login" href="../../blog/wp-login.php@redirect_to=http_253a_252f_252fwww.learncpp.com_252fcpp-tutorial_252f44-type-conversion-and-casting_252f">Log in to Reply</a></span>		 
		</div>
		<p>Could you paste the code in pastebin or somewhere similar? This version of WordPress is rather buggy when it comes to code.<br />
<code> /</code><code> Isn't working like it should either.</code></p>
		</div>
<ul class='children'>
		<li class="comment byuser comment-author-zingmars odd alt depth-3 clearfix" id="comment-95565">
		<div id="div-comment-95565" class="clearfix comment-container">
		<div class="comment-author vcard">
		<img alt='' src='../../../0.gravatar.com/avatar/21b2deaaa0bcf172aa88051b6cf7ba1f@s=65&d=http_253a_252f_252f0.gravatar.com_252favatar_252fad516503a11cd5ca435acc9bb6523536_253fs_253d65&r=g' class='avatar avatar-65 photo' height='65' width='65' />		<span class="authorname"><a href='../../../127.0.0.1/default.htm' rel='external nofollow' class='url'>zingmars</a></span>
		</div>
				<div class="comment-meta commentmetadata">
		<a href="comment-page-1/#comment-95565">
		June 15, 2011 at 9:45 am</a>
        <span class="comment-reply-link"><a rel="nofollow" class="comment-reply-login" href="../../blog/wp-login.php@redirect_to=http_253a_252f_252fwww.learncpp.com_252fcpp-tutorial_252f44-type-conversion-and-casting_252f">Log in to Reply</a></span>		 
		</div>
		<p>I meant \. Sometimes it works, sometimes it doesn&#8217;t.</p>
		</div>
<ul class='children'>
		<li class="comment byuser comment-author-zingmars even depth-4 clearfix" id="comment-95566">
		<div id="div-comment-95566" class="clearfix comment-container">
		<div class="comment-author vcard">
		<img alt='' src='../../../0.gravatar.com/avatar/21b2deaaa0bcf172aa88051b6cf7ba1f@s=65&d=http_253a_252f_252f0.gravatar.com_252favatar_252fad516503a11cd5ca435acc9bb6523536_253fs_253d65&r=g' class='avatar avatar-65 photo' height='65' width='65' />		<span class="authorname"><a href='../../../127.0.0.1/default.htm' rel='external nofollow' class='url'>zingmars</a></span>
		</div>
				<div class="comment-meta commentmetadata">
		<a href="comment-page-1/#comment-95566">
		June 15, 2011 at 9:45 am</a>
        <span class="comment-reply-link"><a rel="nofollow" class="comment-reply-login" href="../../blog/wp-login.php@redirect_to=http_253a_252f_252fwww.learncpp.com_252fcpp-tutorial_252f44-type-conversion-and-casting_252f">Log in to Reply</a></span>		 
		</div>
		<p>uhh alright, what I meant was the code tag.<br />
Stupid wordpress. Messing with my comments.</p>
		</div>
<ul class='children'>
		<li class="comment byuser comment-author-surya odd alt depth-5 clearfix" id="comment-95568">
		<div id="div-comment-95568" class="clearfix comment-container">
		<div class="comment-author vcard">
		<img alt='' src='../../../1.gravatar.com/avatar/d129fec21f525715337b5d1e6260b039@s=65&d=http_253a_252f_252f1.gravatar.com_252favatar_252fad516503a11cd5ca435acc9bb6523536_253fs_253d65&r=g' class='avatar avatar-65 photo' height='65' width='65' />		<span class="authorname">surya</span>
		</div>
				<div class="comment-meta commentmetadata">
		<a href="comment-page-1/#comment-95568">
		June 15, 2011 at 9:27 pm</a>
        <span class="comment-reply-link"><a rel="nofollow" class="comment-reply-login" href="../../blog/wp-login.php@redirect_to=http_253a_252f_252fwww.learncpp.com_252fcpp-tutorial_252f44-type-conversion-and-casting_252f">Log in to Reply</a></span>		 
		</div>
		<p>hi zingmars,<br />
             my code is at <a href="../../../pastebin.mozilla.org/1250633" rel="nofollow">http://pastebin.mozilla.org/1250633</a><br />
thanks in advance<br />
surya</p>
		</div>
<ul class='children'>
		<li class="comment byuser comment-author-zingmars even depth-6 clearfix" id="comment-95576">
		<div id="div-comment-95576" class="clearfix comment-container">
		<div class="comment-author vcard">
		<img alt='' src='../../../0.gravatar.com/avatar/21b2deaaa0bcf172aa88051b6cf7ba1f@s=65&d=http_253a_252f_252f0.gravatar.com_252favatar_252fad516503a11cd5ca435acc9bb6523536_253fs_253d65&r=g' class='avatar avatar-65 photo' height='65' width='65' />		<span class="authorname"><a href='../../../127.0.0.1/default.htm' rel='external nofollow' class='url'>zingmars</a></span>
		</div>
				<div class="comment-meta commentmetadata">
		<a href="comment-page-1/#comment-95576">
		June 17, 2011 at 7:35 am</a>
        <span class="comment-reply-link"><a rel="nofollow" class="comment-reply-login" href="../../blog/wp-login.php@redirect_to=http_253a_252f_252fwww.learncpp.com_252fcpp-tutorial_252f44-type-conversion-and-casting_252f">Log in to Reply</a></span>		 
		</div>
		<p>The link is empty. I assume that you&#8217;ve set it to expire in a day, and it was deleted before I could see it. Could you re-upload the code?</p>
		</div>
</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
		<li class="comment byuser comment-author-surya odd alt thread-even depth-1 clearfix" id="comment-95606">
		<div id="div-comment-95606" class="clearfix comment-container">
		<div class="comment-author vcard">
		<img alt='' src='../../../1.gravatar.com/avatar/d129fec21f525715337b5d1e6260b039@s=65&d=http_253a_252f_252f1.gravatar.com_252favatar_252fad516503a11cd5ca435acc9bb6523536_253fs_253d65&r=g' class='avatar avatar-65 photo' height='65' width='65' />		<span class="authorname">surya</span>
		</div>
				<div class="comment-meta commentmetadata">
		<a href="comment-page-1/#comment-95606">
		June 19, 2011 at 10:54 pm</a>
        <span class="comment-reply-link"><a rel="nofollow" class="comment-reply-login" href="../../blog/wp-login.php@redirect_to=http_253a_252f_252fwww.learncpp.com_252fcpp-tutorial_252f44-type-conversion-and-casting_252f">Log in to Reply</a></span>		 
		</div>
		<p>ohhh&#8230;sry ZINGMARS&#8230;&#8230;.i didnt notice it&#8230;now i have uploaded my code at <a href="../../../pastebin.mozilla.org/1253503.......please" rel="nofollow">http://pastebin.mozilla.org/1253503&#8230;&#8230;.please</a> clarify my doubt as early as possible&#8230;&#8230;&#8230;</p>
<p>Thanks,<br />
Surya</p>
		</div>
</li>
		<li class="comment byuser comment-author-surya even thread-odd thread-alt depth-1 clearfix" id="comment-95607">
		<div id="div-comment-95607" class="clearfix comment-container">
		<div class="comment-author vcard">
		<img alt='' src='../../../1.gravatar.com/avatar/d129fec21f525715337b5d1e6260b039@s=65&d=http_253a_252f_252f1.gravatar.com_252favatar_252fad516503a11cd5ca435acc9bb6523536_253fs_253d65&r=g' class='avatar avatar-65 photo' height='65' width='65' />		<span class="authorname">surya</span>
		</div>
				<div class="comment-meta commentmetadata">
		<a href="comment-page-1/#comment-95607">
		June 19, 2011 at 10:57 pm</a>
        <span class="comment-reply-link"><a rel="nofollow" class="comment-reply-login" href="../../blog/wp-login.php@redirect_to=http_253a_252f_252fwww.learncpp.com_252fcpp-tutorial_252f44-type-conversion-and-casting_252f">Log in to Reply</a></span>		 
		</div>
		<p>sry</p>
<p>link is</p>
<p><a href="../../../pastebin.mozilla.org/1253503" rel="nofollow">http://pastebin.mozilla.org/1253503</a></p>
		</div>
<ul class='children'>
		<li class="comment byuser comment-author-zingmars odd alt depth-2 clearfix" id="comment-95613">
		<div id="div-comment-95613" class="clearfix comment-container">
		<div class="comment-author vcard">
		<img alt='' src='../../../0.gravatar.com/avatar/21b2deaaa0bcf172aa88051b6cf7ba1f@s=65&d=http_253a_252f_252f0.gravatar.com_252favatar_252fad516503a11cd5ca435acc9bb6523536_253fs_253d65&r=g' class='avatar avatar-65 photo' height='65' width='65' />		<span class="authorname"><a href='../../../127.0.0.1/default.htm' rel='external nofollow' class='url'>zingmars</a></span>
		</div>
				<div class="comment-meta commentmetadata">
		<a href="comment-page-1/#comment-95613">
		June 21, 2011 at 7:17 am</a>
        <span class="comment-reply-link"><a rel="nofollow" class="comment-reply-login" href="../../blog/wp-login.php@redirect_to=http_253a_252f_252fwww.learncpp.com_252fcpp-tutorial_252f44-type-conversion-and-casting_252f">Log in to Reply</a></span>		 
		</div>
		<p>This is what compiler does too &#8211; it does whatever you ask from it, and assigns the results to a memory location, and then you store it in p1.<br />
And no &#8211; the line does not work. Firstly because apparently you can&#8217;t do static cast on pointers (they&#8217;re memory locations, not values or types or anything).<br />
Also &#8211; one does not simply convert one class to another. It doesn&#8217;t work that way.<br />
Just my 2 cents.<br />
So I guess the answer to the &#8216;what does it hold&#8217; is &#8211; nothing. It holds nothing because you can&#8217;t do things this way.</p>
		</div>
</li>
</ul>
</li>
		<li class="comment byuser comment-author-surya even thread-even depth-1 clearfix" id="comment-95617">
		<div id="div-comment-95617" class="clearfix comment-container">
		<div class="comment-author vcard">
		<img alt='' src='../../../1.gravatar.com/avatar/d129fec21f525715337b5d1e6260b039@s=65&d=http_253a_252f_252f1.gravatar.com_252favatar_252fad516503a11cd5ca435acc9bb6523536_253fs_253d65&r=g' class='avatar avatar-65 photo' height='65' width='65' />		<span class="authorname">surya</span>
		</div>
				<div class="comment-meta commentmetadata">
		<a href="comment-page-1/#comment-95617">
		June 21, 2011 at 8:42 pm</a>
        <span class="comment-reply-link"><a rel="nofollow" class="comment-reply-login" href="../../blog/wp-login.php@redirect_to=http_253a_252f_252fwww.learncpp.com_252fcpp-tutorial_252f44-type-conversion-and-casting_252f">Log in to Reply</a></span>		 
		</div>
		<p>thank you zingmars</p>
		</div>
</li>
		<li class="comment byuser comment-author-konda odd alt thread-odd thread-alt depth-1 clearfix" id="comment-95717">
		<div id="div-comment-95717" class="clearfix comment-container">
		<div class="comment-author vcard">
		<img alt='' src='../../../0.gravatar.com/avatar/884c7b6f41d1ef0845ea0454fadc19a7@s=65&d=http_253a_252f_252f0.gravatar.com_252favatar_252fad516503a11cd5ca435acc9bb6523536_253fs_253d65&r=g' class='avatar avatar-65 photo' height='65' width='65' />		<span class="authorname">Konda</span>
		</div>
				<div class="comment-meta commentmetadata">
		<a href="comment-page-1/#comment-95717">
		July 16, 2011 at 3:40 am</a>
        <span class="comment-reply-link"><a rel="nofollow" class="comment-reply-login" href="../../blog/wp-login.php@redirect_to=http_253a_252f_252fwww.learncpp.com_252fcpp-tutorial_252f44-type-conversion-and-casting_252f">Log in to Reply</a></span>		 
		</div>
		<p>Hello, I have a question: Is it safe to use static_cast([float value here]) to truncate a float value? And no, I&#8217;m not talking about rounding.</p>
		</div>
<ul class='children'>
		<li class="comment byuser comment-author-konda even depth-2 clearfix" id="comment-95718">
		<div id="div-comment-95718" class="clearfix comment-container">
		<div class="comment-author vcard">
		<img alt='' src='../../../0.gravatar.com/avatar/884c7b6f41d1ef0845ea0454fadc19a7@s=65&d=http_253a_252f_252f0.gravatar.com_252favatar_252fad516503a11cd5ca435acc9bb6523536_253fs_253d65&r=g' class='avatar avatar-65 photo' height='65' width='65' />		<span class="authorname">Konda</span>
		</div>
				<div class="comment-meta commentmetadata">
		<a href="comment-page-1/#comment-95718">
		July 16, 2011 at 3:41 am</a>
        <span class="comment-reply-link"><a rel="nofollow" class="comment-reply-login" href="../../blog/wp-login.php@redirect_to=http_253a_252f_252fwww.learncpp.com_252fcpp-tutorial_252f44-type-conversion-and-casting_252f">Log in to Reply</a></span>		 
		</div>
		<pre>static_cast([float value here])</pre>
<p> fixed</p>
		</div>
<ul class='children'>
		<li class="comment byuser comment-author-konda odd alt depth-3 clearfix" id="comment-95719">
		<div id="div-comment-95719" class="clearfix comment-container">
		<div class="comment-author vcard">
		<img alt='' src='../../../0.gravatar.com/avatar/884c7b6f41d1ef0845ea0454fadc19a7@s=65&d=http_253a_252f_252f0.gravatar.com_252favatar_252fad516503a11cd5ca435acc9bb6523536_253fs_253d65&r=g' class='avatar avatar-65 photo' height='65' width='65' />		<span class="authorname">Konda</span>
		</div>
				<div class="comment-meta commentmetadata">
		<a href="comment-page-1/#comment-95719">
		July 16, 2011 at 3:42 am</a>
        <span class="comment-reply-link"><a rel="nofollow" class="comment-reply-login" href="../../blog/wp-login.php@redirect_to=http_253a_252f_252fwww.learncpp.com_252fcpp-tutorial_252f44-type-conversion-and-casting_252f">Log in to Reply</a></span>		 
		</div>
		<p>Wait sorry about that, the &#8220;int&#8221; in the angled brackets after &#8220;static_cast&#8221; seems to disappear.</p>
		</div>
<ul class='children'>
		<li class="comment byuser comment-author-zingmars even depth-4 clearfix" id="comment-95751">
		<div id="div-comment-95751" class="clearfix comment-container">
		<div class="comment-author vcard">
		<img alt='' src='../../../0.gravatar.com/avatar/21b2deaaa0bcf172aa88051b6cf7ba1f@s=65&d=http_253a_252f_252f0.gravatar.com_252favatar_252fad516503a11cd5ca435acc9bb6523536_253fs_253d65&r=g' class='avatar avatar-65 photo' height='65' width='65' />		<span class="authorname"><a href='../../../127.0.0.1/default.htm' rel='external nofollow' class='url'>zingmars</a></span>
		</div>
				<div class="comment-meta commentmetadata">
		<a href="comment-page-1/#comment-95751">
		July 19, 2011 at 3:05 am</a>
        <span class="comment-reply-link"><a rel="nofollow" class="comment-reply-login" href="../../blog/wp-login.php@redirect_to=http_253a_252f_252fwww.learncpp.com_252fcpp-tutorial_252f44-type-conversion-and-casting_252f">Log in to Reply</a></span>		 
		</div>
		<p>was using static_cast ever safe? :p</p>
		</div>
</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
	
	</ul>
	<!-- / Comment List -->

	



	
	<p>You must be <a href="../../blog/wp-login.php@redirect_to=http_253a_252f_252fwww.learncpp.com_252fcpp-tutorial_252f44-type-conversion-and-casting_252f">logged in</a> to post a comment.</p>

		

<div class="clearfix navigation-bottom">
		<div class="older">&laquo; <a href="../43-file-scope-and-the-static-keyword/default.htm" rel="prev">4.3 &#8212; File scope and the static keyword</a> &nbsp;</div><div class="newer">&nbsp; <a href="../45-enumerated-types/default.htm" rel="next">4.5 &#8212; Enumerated types</a> &raquo;</div></div>		
			



</td>
<!-- / Main Column -->


<!-- Right Sidebar -->
<td id="right">

	<div id="text-1" class="widget widget_text">			<div class="textwidget"><script type="text/javascript"><!--
google_ad_client = "pub-0588844875925051";
/* Wide Skyscraper Right Bar */
google_ad_slot = "0955932809";
google_ad_width = 160;
google_ad_height = 600;
//-->
</script>
<acript type="text/javascript"
src="../../../pagead2.googlesyndication.com/pagead/show_ads.js">
</script></div>
		</div><div id="archives-2" class="widget widget_archive"><div class="widget-title"><h3>Archives</h3></div>		<ul>
			<li><a href='../../2011/11/default.htm' title='November 2011'>November 2011</a></li>
	<li><a href='../../2011/10/default.htm' title='October 2011'>October 2011</a></li>
	<li><a href='../../2011/09/default.htm' title='September 2011'>September 2011</a></li>
	<li><a href='../../2010/10/default.htm' title='October 2010'>October 2010</a></li>
	<li><a href='../../2010/07/default.htm' title='July 2010'>July 2010</a></li>
	<li><a href='../../2009/10/default.htm' title='October 2009'>October 2009</a></li>
	<li><a href='../../2009/09/default.htm' title='September 2009'>September 2009</a></li>
	<li><a href='../../2009/03/default.htm' title='March 2009'>March 2009</a></li>
	<li><a href='../../2008/12/default.htm' title='December 2008'>December 2008</a></li>
	<li><a href='../../2008/10/default.htm' title='October 2008'>October 2008</a></li>
	<li><a href='../../2008/09/default.htm' title='September 2008'>September 2008</a></li>
	<li><a href='../../2008/08/default.htm' title='August 2008'>August 2008</a></li>
	<li><a href='../../2008/06/default.htm' title='June 2008'>June 2008</a></li>
	<li><a href='../../2008/05/default.htm' title='May 2008'>May 2008</a></li>
	<li><a href='../../2008/04/default.htm' title='April 2008'>April 2008</a></li>
	<li><a href='../../2008/03/default.htm' title='March 2008'>March 2008</a></li>
	<li><a href='../../2008/02/default.htm' title='February 2008'>February 2008</a></li>
	<li><a href='../../2008/01/default.htm' title='January 2008'>January 2008</a></li>
	<li><a href='../../2007/12/default.htm' title='December 2007'>December 2007</a></li>
	<li><a href='../../2007/11/default.htm' title='November 2007'>November 2007</a></li>
	<li><a href='../../2007/10/default.htm' title='October 2007'>October 2007</a></li>
	<li><a href='../../2007/09/default.htm' title='September 2007'>September 2007</a></li>
	<li><a href='../../2007/08/default.htm' title='August 2007'>August 2007</a></li>
	<li><a href='../../2007/07/default.htm' title='July 2007'>July 2007</a></li>
	<li><a href='../../2007/06/default.htm' title='June 2007'>June 2007</a></li>
	<li><a href='../../2007/05/default.htm' title='May 2007'>May 2007</a></li>
		</ul>
</div>
</td>
<!-- / Right Sidebar -->

</tr>
<!-- / Main Body -->
<tr>

<!-- Footer -->
<td id="footer" colspan="3">

    <p>
    Copyright &copy; 2011 <a href="../../default.htm">Learn C++</a> - All Rights Reserved<br />Powered by <a href="../../../wordpress.org/default.htm">WordPress</a> &amp; the <a href="../../../wordpress.bytesforall.com/default.htm" title="Customizable WordPress themes">Atahualpa Theme</a> by <a href="../../../www.bytesforall.com/default.htm" title="BFA Webdesign">BytesForAll</a>. Discuss on our <a href="../../../forum.bytesforall.com/default.htm" title="Atahualpa &amp; WordPress">WP Forum</a>    </p>
    
    
    <script type='text/javascript' src='../../blog/wp-content/plugins/syntaxhighlighter/syntaxhighlighter3/scripts/shcore.js@ver=3.0.83c'></script>
<script type='text/javascript' src='../../blog/wp-content/plugins/syntaxhighlighter/syntaxhighlighter3/scripts/shbrushcpp.js@ver=3.0.83c'></script>
<script type='text/javascript'>
	(function(){
		var corecss = document.createElement('link');
		var themecss = document.createElement('link');
		var corecssurl = "../../blog/wp-content/plugins/syntaxhighlighter/syntaxhighlighter3/styles/shcore.css@ver=3.0.83c.css";
		if ( corecss.setAttribute ) {
				corecss.setAttribute( "rel", "stylesheet" );
				corecss.setAttribute( "type", "text/css" );
				corecss.setAttribute( "href", corecssurl );
		} else {
				corecss.rel = "stylesheet";
				corecss.href = corecssurl;
		}
		document.getElementsByTagName("head")[0].insertBefore( corecss, document.getElementById("syntaxhighlighteranchor") );
		var themecssurl = "../../blog/wp-content/plugins/syntaxhighlighter/syntaxhighlighter3/styles/shthemedefault.css@ver=3.0.83c.css";
		if ( themecss.setAttribute ) {
				themecss.setAttribute( "rel", "stylesheet" );
				themecss.setAttribute( "type", "text/css" );
				themecss.setAttribute( "href", themecssurl );
		} else {
				themecss.rel = "stylesheet";
				themecss.href = themecssurl;
		}
		//document.getElementById("syntaxhighlighteranchor").appendChild(themecss);
		document.getElementsByTagName("head")[0].insertBefore( themecss, document.getElementById("syntaxhighlighteranchor") );
	})();
	SyntaxHighlighter.config.strings.expandSource = '+ expand source';
	SyntaxHighlighter.config.strings.help = '?';
	SyntaxHighlighter.config.strings.alert = 'SyntaxHighlighter\n\n';
	SyntaxHighlighter.config.strings.noBrush = 'Can\'t find brush for: ';
	SyntaxHighlighter.config.strings.brushNotHtmlScript = 'Brush wasn\'t configured for html-script option: ';
	SyntaxHighlighter.defaults['pad-line-numbers'] = false;
	SyntaxHighlighter.defaults['toolbar'] = false;
	SyntaxHighlighter.all();
</script>
<!--stats_footer_test--><script src="../../../stats.wordpress.com/e-201148.js" type="text/javascript"></script>
<script type="text/javascript">
st_go({blog:'3928254',v:'ext',post:'67'});
var load_cmc = function(){linktracker_init(3928254,67,2);};
if ( typeof addLoadEvent != 'undefined' ) addLoadEvent(load_cmc);
else load_cmc();
</script>

</td>
<!-- / Footer -->

</tr>
</table><!-- / layout -->
</div><!-- / container -->
</div><!-- / wrapper -->
</body>
</html>
<!-- Dynamic page generated in 0.517 seconds. -->
<!-- Cached page generated by WP-Super-Cache on 2011-12-02 06:31:26 -->
<!-- Compression = gzip -->