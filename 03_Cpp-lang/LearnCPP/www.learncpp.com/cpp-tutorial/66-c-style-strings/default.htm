<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd"><meta http-equiv="Content-Type" content="text/html; charset=utf-8"><!-- saved from url=(0067)http://www.learncpp.com/cpp-tutorial/66-c-style-strings/default.htm -->

<html xmlns="http://www.w3.org/1999/xhtml" dir="ltr" lang="en-US">
<head>
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8" />
<meta http-equiv="X-UA-Compatible" content="IE=EmulateIE7" />
<title>6.6 &#8212; C-style strings &laquo; Learn C++</title>
<link rel="shortcut icon" href="../../blog/wp-content/themes/atahualpa353/images/favicon/learncpp.ico" /><link rel="canonical" href="default.htm" /><link rel="alternate" type="application/rss+xml" title="Learn C++ RSS Feed" href="../../feed/default.htm" />
<link rel="alternate" type="application/atom+xml" title="Learn C++ Atom Feed" href="../../feed/atom/default.htm" />
<link rel="pingback" href="http://www.learncpp.com/blog/xmlrpc.php" />
<link rel="alternate" type="application/rss+xml" title="Learn C++ &raquo; 6.6 &#8212; C-style strings Comments Feed" href="feed/default.htm" />
<script type='text/javascript' src='../../blog/wp-includes/js/l10n.js@ver=20101110'></script>
<script type='text/javascript' src='../../blog/wp-includes/js/jquery/jquery.js@ver=1.6.1'></script>
<script type='text/javascript' src='../../blog/wp-includes/js/comment-reply.js@ver=20090102'></script>
<script type='text/javascript' src='../../blog/wp-content/plugins/google-analyticator/external-tracking.min.js@ver=6.2'></script>
<link rel="EditURI" type="application/rsd+xml" title="RSD" href="http://www.learncpp.com/blog/xmlrpc.php?rsd" />
<link rel="wlwmanifest" type="application/wlwmanifest+xml" href="../../blog/wp-includes/wlwmanifest.xml" /> 
<link rel='index' title='Learn C++' href='../../default.htm' />
<link rel='start' title='Welcome to LearnCpp.com!' href='../../site-news/this-is-a-news-test-post/default.htm' />
<link rel='prev' title='An early beta review of upcoming online PvP game Fury' href='../../gaming/an-early-review-of-fury/default.htm' />
<link rel='next' title='A PHP script to unzip files with file overwriting' href='../../general-programming/a-php-script-to-unzip-files-with-file-overwriting/default.htm' />
<link rel='canonical' href='default.htm' />
<link rel='shortlink' href='../../../wp.me/pgtuw-1o' />
<meta name="ROBOTS" content="INDEX" />

<!-- Powered by AdSense-Deluxe WordPress Plugin v0.8 - http://www.acmetech.com/blog/adsense-deluxe/ -->
<!-- wpSolution Code -->
        <script type="text/javascript">
            function wpSolutionToggle(solution, link, showtext, hidetext) {
                if (solution.style.display != 'none') {
                    solution.style.display = 'none';
                    link.innerHTML = showtext;
                    link.className = 'solution_link_show';
                } else {
                    solution.style.display = 'block';
                    link.innerHTML = hidetext;
                    link.className = 'solution_link_hide';
                }
            }
          </script>
<style type="text/css">body{text-align:center;margin:0;padding:0;font-family:verdana,arial,sans-serif;font-size:13px;line-height:1.4;color:#000000;background:#ddd;padding-top:20px;padding-bottom:20px}a:link,a:visited,a:active{color:#365DA0;font-weight:bold;text-decoration:none;}a:hover{color:#365DA0;font-weight:bold;text-decoration:underline}ul,ol,dl,p,h1,h2,h3,h4,h5,h6{margin-top:10px;margin-bottom:10px;padding-top:0;padding-bottom:0;}ul ul,ul ol,ol ul,ol ol{margin-top:0;margin-bottom:0}code,pre{font-family:"Courier New",Courier,monospace;font-size:1em}pre{overflow:auto;word-wrap:normal;padding-bottom:1.5em;overflow-y:hidden;width:99%}abbr[title],acronym[title]{border-bottom:1px dotted}hr{display:block;height:2px;border:none;margin:0.5em auto;color:#cccccc;background-color:#cccccc}table{font-size:1em;}div.post,ul.commentlist li,ol.commentlist li{word-wrap:break-word;}pre,.wp_syntax{word-wrap:normal;}div#wrapper{text-align:center;margin-left:auto;margin-right:auto;display:block;width:98%}* html div#wrapper{<!--width:expression"98%");-->}div#container{padding:20px;background:#fff;box-shadow:0 0 15px #333;-moz-box-shadow:0 0 15px #333;padding-left:20px;padding-right:20px;width:auto;margin-left:auto;margin-right:auto;text-align:left;display:block}table#layout{font-size:100%;width:100%;table-layout:fixed}.colone{width:200px}.colone-inner{width:200px}.coltwo{width:100% }.colthree-inner{width:200px}.colthree{width:200px}td#header{width:auto;padding:0}table#logoarea,table#logoarea tr,table#logoarea td{margin:0;padding:0;background:none;border:0}table#logoarea{width:100%;border-spacing:0px}img.logo{display:block;margin:0 10px 0 0}td.logoarea-logo{width:1%}h1.blogtitle,h2.blogtitle{ display:block;margin:0;padding:0;letter-spacing:-1px;line-height:1.0em;font-size:200%;text-transform:uppercase;font-smooth:always}h1.blogtitle a:link,h1.blogtitle a:visited,h1.blogtitle a:active,h2.blogtitle a:link,h2.blogtitle a:visited,h2.blogtitle a:active{ text-decoration:none;color:#000000;font-weight:normal;font-smooth:always}h1.blogtitle a:hover,h2.blogtitle a:hover{ text-decoration:none;color:#AC161B;font-weight:normal}p.tagline{margin:0;padding:0;font-size:1.2em;font-weight:normal;color:#444}td.feed-icons{white-space:nowrap;}div.rss-box{height:1%;display:block;padding:10px 0 10px 10px;margin:0;width:280px}a.comments-icon{height:22px;line-height:22px;margin:0 5px 0 5px;padding-left:22px;display:block;text-decoration:none;float:right;white-space:nowrap}a.comments-icon:link,a.commentss-icon:active,a.comments-icon:visited{background:transparent url(../../blog/wp-content/themes/atahualpa353/images/comment-gray.png) no-repeat scroll center left}a.comments-icon:hover{background:transparent url(../../blog/wp-content/themes/atahualpa353/images/comment.png) no-repeat scroll center left}a.posts-icon{height:22px;line-height:22px;margin:0 5px 0 0;padding-left:20px;display:block;text-decoration:none;float:right;white-space:nowrap}a.posts-icon:link,a.posts-icon:active,a.posts-icon:visited{background:transparent url(../../blog/wp-content/themes/atahualpa353/images/rss-gray.png) no-repeat scroll center left}a.posts-icon:hover{background:transparent url(../../blog/wp-content/themes/atahualpa353/images/rss.png) no-repeat scroll center left}a.email-icon{height:22px;line-height:22px;margin:0 5px 0 5px;padding-left:24px;display:block;text-decoration:none;float:right;white-space:nowrap}a.email-icon:link,a.email-icon:active,a.email-icon:visited{background:transparent url(../../blog/wp-content/themes/atahualpa353/images/email-gray.png) no-repeat scroll center left}a.email-icon:hover{background:transparent url(../../blog/wp-content/themes/atahualpa353/images/email.png) no-repeat scroll center left}td.search-box{height:1%}div.searchbox{height:35px;border-bottom:0;width:200px;margin:0;padding:0}div.searchbox-form{margin:5px 10px 5px 10px}div.horbar1,div.horbar2{font-size:1px;clear:both;display:block;position:relative;padding:0;margin:0;width:100%;}div.horbar1{height:0px;background:#ffffff;border-top:dashed 1px #cccccc}div.horbar2{height:0px;background:#ffffff;border-bottom:dashed 1px #cccccc}div.header-image-container{position:relative;margin:0;padding:0;height:150px;}div.clickable{position:absolute;top:0;left:0;z-index:3;margin:0;padding:0;width:100%;height:150px;}a.divclick:link,a.divclick:visited,a.divclick:active,a.divclick:hover{width:100%;height:100%;display:block;text-decoration:none}td#left{vertical-align:top;padding-right:20px}td#left-inner{vertical-align:top;padding-right:10px}td#right{vertical-align:top;padding-left:20px}td#right-inner{vertical-align:top;padding-left:10px}td#middle{vertical-align:top;width:100%;padding:10px 15px}td#footer{width:auto;background-color:#f7f7f7;border-top:solid 4px #eee;padding:10px;text-align:center;color:#888;font-size:11px}td#footer a:link,td#footer a:visited,td#footer a:active{text-decoration:none;color:#777777;font-weight:normal}td#footer a:hover{text-decoration:none;color:#777777;font-weight:normal}div.widget{display:block;width:auto;font-size:12px;margin:0 0 10px 0;padding:10px;border:solid 4px #eee}div.widget-title{display:block;width:auto}div.widget-title h3,td#left h3.tw-widgettitle,td#right h3.tw-widgettitle,td#left ul.tw-nav-list,td#right ul.tw-nav-list{padding:0;margin:0;font-size:0.9em;text-align:center;font-weight:normal;text-transform:uppercase;letter-spacing:1px;color:#333;border-bottom:solid 1px #eee;padding-bottom:10px;margin-bottom:10px}div.widget ul,div.textwidget{display:block;width:auto}div.widget select{width:98%;margin-top:5px;}div.widget ul{list-style-type:none;margin:0;padding:0;width:auto}div.widget ul li{display:block;margin:2px 0 2px 0px;padding:0 0 0 0px;border-left:solid 0px #CCCCCC}div.widget ul li:hover,div.widget ul li.sfhover{display:block;width:auto;border-left:solid 0px #000000;}div.widget ul li ul li{margin:2px 0 2px 5px;padding:0 0 0 0px;border-left:solid 0px #CCCCCC;}div.widget ul li ul li:hover,div.widget ul li ul li.sfhover{border-left:solid 0px #000000;}div.widget ul li ul li ul li{margin:2px 0 2px 5px;padding:0 0 0 0px;border-left:solid 0px #CCCCCC;}div.widget ul li ul li ul li:hover,div.widget ul li ul li ul li.sfhover{border-left:solid 0px #000000;}div.widget td a:link,div.widget td a:visited,div.widget td a:active,div.widget ul li a:link,div.widget ul li a:visited,div.widget ul li a:active{text-decoration:none;font-weight:normal;color:#365DA0;font-weight:normal;}div.widget ul li ul li a:link,div.widget ul li ul li a:visited,div.widget ul li ul li a:active{color:#365DA0;font-weight:normal;}div.widget ul li ul li ul li a:link,div.widget ul li ul li ul li a:visited,div.widget ul li ul li ul li a:active{color:#365DA0;font-weight:normal;}div.widget ul li a:hover{color:#365DA0;}div.widget ul li ul li a:hover{color:#365DA0;}div.widget ul li ul li ul li a:hover{color:#365DA0;}div.widget ul li a:link,div.widget ul li a:visited,div.widget ul li a:active,div.widget ul li a:hover{display:inline}* html div.widget ul li a:link,* html div.widget ul li a:visited,* html div.widget ul li a:active,* html div.widget ul li a:hover{height:1%; } div.widget_pages ul li,div.widget_categories ul li{border-left:0 !important;padding:0 !important}div.widget_pages ul li a:link,div.widget_pages ul li a:visited,div.widget_pages ul li a:active,div.widget_categories ul li a:link,div.widget_categories ul li a:visited,div.widget_categories ul li a:active{padding:0 0 0 0px;border-left:solid 0px #CCCCCC}div.widget_pages ul li a:hover,div.widget_categories ul li a:hover{border-left:solid 0px #000000;}div.widget_pages ul li ul li a:link,div.widget_pages ul li ul li a:visited,div.widget_pages ul li ul li a:active,div.widget_categories ul li ul li a:link,div.widget_categories ul li ul li a:visited,div.widget_categories ul li ul li a:active{padding:0 0 0 0px;border-left:solid 0px #CCCCCC}div.widget_pages ul li ul li a:hover,div.widget_categories ul li ul li a:hover{border-left:solid 0px #000000;}div.widget_pages ul li ul li ul li a:link,div.widget_pages ul li ul li ul li a:visited,div.widget_pages ul li ul li ul li a:active,div.widget_categories ul li ul li ul li a:link,div.widget_categories ul li ul li ul li a:visited,div.widget_categories ul li ul li ul li a:active{padding:0 0 0 0px;border-left:solid 0px #CCCCCC}div.widget_pages ul li ul li ul li a:hover,div.widget_categories ul li ul li ul li a:hover{border-left:solid 0px #000000;}div.widget_pages ul li a:link,div.widget_pages ul li a:active,div.widget_pages ul li a:visited,div.widget_pages ul li a:hover{display:block !important}div.widget_categories ul li a:link,div.widget_categories ul li a:active,div.widget_categories ul li a:visited,div.widget_categories ul li a:hover{display:inline !important}table.subscribe{width:100%}table.subscribe td.email-text{padding:0 0 5px 0;vertical-align:top}table.subscribe td.email-field{padding:0;width:100%}table.subscribe td.email-button{padding:0 0 0 5px}table.subscribe td.post-text{padding:7px 0 0 0;vertical-align:top}table.subscribe td.comment-text{padding:7px 0 0 0;vertical-align:top}div.post,div.page{display:block;margin:0 0 30px 0;border-top:solid 4px #eee;padding-top:20px}div.sticky{background:#eee url('../../blog/wp-content/themes/atahualpa353/images/sticky.gif') 99% 5% no-repeat;border:dashed 1px #cccccc;padding:10px}div.post-kicker{margin:0 0 5px 0}div.post-kicker a:link,div.post-kicker a:visited,div.post-kicker a:active{color:#999;text-decoration:none;text-transform:uppercase;letter-spacing:1px}div.post-kicker a:hover{color:#cc0000}div.post-headline{}div.post-headline h1,div.post-headline h2{ margin:0; padding:0;padding:0;margin:0;font-size:1.7em}div.post-headline h2 a:link,div.post-headline h2 a:visited,div.post-headline h2 a:active,div.post-headline h1 a:link,div.post-headline h1 a:visited,div.post-headline h1 a:active{}div.post-headline h2 a:hover,div.post-headline h1 a:hover{}div.post-byline{margin:5px 0 10px 0;color:#999;text-transform:uppercase;letter-spacing:1px;font-size:11px}div.post-byline a:link,div.post-byline a:visited,div.post-byline a:active{}div.post-byline a:hover{}div.post-bodycopy{}div.post-bodycopy p{margin:1em 0;padding:0;display:block}div.post-pagination{}div.post-footer{clear:both;display:block;color:#999;text-transform:uppercase;letter-spacing:1px;font-size:11px}div.post-footer a:link,div.post-footer a:visited,div.post-footer a:active{color:#999;font-weight:normal;text-decoration:none}div.post-footer a:hover{color:#333;font-weight:normal;text-decoration:underline}div.post-kicker img,div.post-byline img,div.post-footer img{border:0;padding:0;margin:0 0 -1px 0;background:none}span.post-ratings{display:inline-block;width:auto;white-space:nowrap}div.navigation-top{border-top:solid 4px #eee;padding:8px 0}div.navigation-middle{margin:10px 0 20px 0;padding:8px 0;border-top:solid 4px #eee;border-bottom:solid 4px #eee}div.navigation-bottom{margin:20px 0 0 0;padding:10px 0 0 0;border-top:solid 4px #eee}div.navigation-comments-above{margin:0 0 10px 0;padding:5px 0 5px 0}div.navigation-comments-below{margin:0 0 10px 0;padding:5px 0 5px 0}div.older{float:left;width:48%;text-align:left;margin:0;padding:0}div.newer{float:right;width:48%;text-align:right;margin:0;padding:0;}div.older-home{float:left;width:44%;text-align:left;margin:0;padding:0}div.newer-home{float:right;width:44%;text-align:right;margin:0;padding:0;}div.home{float:left;width:8%;text-align:center;margin:0;padding:0}form,.feedburner-email-form{margin:0;padding:0;}fieldset{border:1px solid #cccccc;width:auto;padding:0.35em 0.625em 0.75em;display:block;}legend{color:#000000;background:#f4f4f4;border:1px solid #cccccc;padding:2px 6px;margin-bottom:15px;}form p{margin:5px 0 0 0;padding:0;}div.xhtml-tags p{margin:0}label{margin-right:0.5em;font-family:arial;cursor:pointer;}input.text,input.textbox,input.password,input.file,input.TextField,textarea{padding:3px;color:#000000;border-top:solid 1px #333333;border-left:solid 1px #333333;border-right:solid 1px #999999;border-bottom:solid 1px #cccccc;background:url(../../blog/wp-content/themes/atahualpa353/images/inputbackgr.gif) top left no-repeat}textarea{width:96%;}input.inputblur{color:#777777;width:95%}input.inputfocus{color:#000000;width:95%}input.highlight,textarea.highlight{background:#e8eff7;border-color:#37699f}.button,.Button{padding:0 2px;height:24px;line-height:16px;background-color:#777777;color:#ffffff;border:solid 2px #555555;font-weight:bold}.buttonhover{padding:0 2px;cursor:pointer;background-color:#6b9c6b;color:#ffffff;border:solid 2px #496d49}form#commentform input#submit{ padding:0 .25em; width:0; overflow:visible}form#commentform input#submit[class]{width:auto}form#commentform input#submit{padding:4px 10px 4px 10px;font-size:1.2em;line-height:1.5em;height:36px}table.searchform{width:100%}table.searchform td.searchfield{padding:0;width:100%}table.searchform td.searchbutton{padding:0 0 0 5px}table.searchform td.searchbutton input{padding:0 0 0 5px}blockquote{height:1%;display:block;clear:both;color:#555555;padding:1em 1em;background:#f4f4f4;border:solid 1px #e1e1e1}blockquote blockquote{height:1%;display:block;clear:both;color:#444444;padding:1em 1em;background:#e1e1e1;border:solid 1px #d3d3d3}div.post table{border-collapse:collapse;margin:10px 0}div.post table caption{width:auto;margin:0 auto;background:#eeeeee;border:#999999;padding:4px 8px;color:#666666}div.post table th{background:#888888;color:#ffffff;font-weight:bold;font-size:90%;padding:4px 8px;border:solid 1px #ffffff;text-align:left}div.post table td{padding:4px 8px;background-color:#ffffff;border-bottom:1px solid #dddddd;text-align:left}div.post table tfoot td{}div.post table tr.alt td{background:#f4f4f4}div.post table tr.over td{background:#e2e2e2}#calendar_wrap{padding:0;border:none}table#wp-calendar{width:100%;font-size:90%;border-collapse:collapse;background-color:#ffffff;margin:0 auto}table#wp-calendar caption{width:auto;background:#eeeeee;border:none;;padding:3px;margin:0 auto;font-size:1em}table#wp-calendar th{border:solid 1px #eeeeee;background-color:#999999;color:#ffffff;font-weight:bold;padding:2px;text-align:center}table#wp-calendar td{padding:0;line-height:18px;background-color:#ffffff;border:1px solid #dddddd;text-align:center}table#wp-calendar tfoot td{border:solid 1px #eeeeee;background-color:#eeeeee}table#wp-calendar td a{display:block;background-color:#eeeeee;width:100%;height:100%;padding:0}div#respond{margin:25px 0;padding:25px;background:#eee;-moz-border-radius:8px;-khtml-border-radius:8px;-webkit-border-radius:8px;border-radius:8px;}p.thesetags{margin:10px 0}h3.reply{margin:0;padding:0 0 10px 0}ol.commentlist{margin:15px 0 25px 0;list-style-type:none;padding:0;display:block;border-top:dotted 1px #cccccc}ol.commentlist li{padding:15px 10px;display:block;height:1%;margin:0;background-color:#FFFFFF;border-bottom:dotted 1px #cccccc}ol.commentlist li.alt{display:block;height:1%;background-color:#EEEEEE;border-bottom:dotted 1px #cccccc}ol.commentlist li.authorcomment{display:block;height:1%;background-color:#D8D8FA}ol.commentlist span.authorname{font-weight:bold;font-size:110%}ol.commentlist span.commentdate{color:#666666;font-size:90%;margin-bottom:5px;display:block}ol.commentlist span.editcomment{display:block}ol.commentlist li p{margin:2px 0 5px 0}div.comment-number{float:right;font-size:2em;line-height:2em;font-family:georgia,serif;font-weight:bold;color:#ddd;margin:-10px 0 0 0;position:relative;height:1%}div.comment-number a:link,div.comment-number a:visited,div.comment-number a:active{color:#ccc}textarea#comment{width:98%;margin:10px 0;display:block}ul.commentlist{margin:15px 0 15px 0;list-style-type:none;padding:0;display:block;border-top:dotted 1px #cccccc}ul.commentlist ul{margin:0;border:none;list-style-type:none;padding:0}ul.commentlist li{padding:0; margin:0;display:block;clear:both;height:1%;}ul.commentlist ul.children li{ margin-left:30px}ul.commentlist div.comment-container{padding:10px;margin:0}ul.children div.comment-container{background-color:transparent;border:dotted 1px #ccc;padding:10px;margin:0 10px 8px 0; -moz-border-radius:5px; -khtml-border-radius:5px; -webkit-border-radius:5px; border-radius:5px}ul.children div.bypostauthor{}ul.commentlist li.thread-even{background-color:#FFFFFF;border-bottom:dotted 1px #cccccc}ul.commentlist li.thread-odd{background-color:#EEEEEE;border-bottom:dotted 1px #cccccc}ul.commentlist div.bypostauthor{background-color:#D8D8FA}ul.children div.bypostauthor{border:dotted 1px #BFBCFB}ul.commentlist span.authorname{font-size:110%}div.comment-meta a:link,div.comment-meta a:visited,div.comment-meta a:active,div.comment-meta a:hover{font-weight:normal}div#cancel-comment-reply{margin:-5px 0 10px 0}div.comment-number{float:right;font-size:2em;line-height:2em;font-family:georgia,serif;font-weight:bold;color:#ddd;margin:-10px 0 0 0;position:relative;height:1%}div.comment-number a:link,div.comment-number a:visited,div.comment-number a:active{color:#ccc}.page-numbers{padding:2px 6px;border:solid 1px #000000;-moz-border-radius:6px;-khtml-border-radius:6px;-webkit-border-radius:6px;border-radius:6px}span.current{background:#ddd}a.prev,a.next{border:none}a.page-numbers:link,a.page-numbers:visited,a.page-numbers:active{text-decoration:none;color:#365DA0;border-color:#365DA0}a.page-numbers:hover{text-decoration:none;color:#365DA0;border-color:#365DA0}div.xhtml-tags{display:none}abbr em{border:none !important;border-top:dashed 1px #aaa !important;display:-moz-inline-box !important;display:inline-block !important;background:url(../../blog/wp-content/themes/atahualpa353/images/commentluv.gif) 0% 90% no-repeat;margin-top:8px;padding:5px 5px 2px 20px !important;font-style:normal}p.subscribe-to-comments{margin-bottom:10px}div#gsHeader{display:none;}div.g2_column{margin:0 !important;width:100% !important;font-size:1.2em}div#gsNavBar{border-top-width:0 !important}p.giDescription{font-size:1.2em;line-height:1 !important}p.giTitle{margin:0.3em 0 !important;font-size:1em;font-weight:normal;color:#666}div#wp-email img{border:0;padding:0}div#wp-email input,div#wp-email textarea{margin-top:5px;margin-bottom:2px}div#wp-email p{margin-bottom:10px}input#wp-email-submit{ padding:0; font-size:30px; height:50px; line-height:50px; overflow:visible;}img.WP-EmailIcon{ vertical-align:text-bottom !important}.tw-accordion .tw-widgettitle,.tw-accordion .tw-widgettitle:hover,.tw-accordion .tw-hovered,.tw-accordion .selected,.tw-accordion .selected:hover{ background:transparent !important; background-image:none !important}.tw-accordion .tw-widgettitle span{ padding-left:0 !important}.tw-accordion h3.tw-widgettitle{border-bottom:solid 1px #ccc}.tw-accordion h3.selected{border-bottom:none}td#left .without_title,td#right .without_title{ margin-top:0;margin-bottom:0}ul.tw-nav-list{border-bottom:solid 1px #999;display:block;margin-bottom:5px !important}td#left ul.tw-nav-list li,td#right ul.tw-nav-list li{padding:0 0 1px 0;margin:0 0 -1px 5px; border:solid 1px #ccc;border-bottom:none;-moz-border-radius:5px;-khtml-border-radius:5px;-webkit-border-radius:5px;border-radius:5px;-moz-border-radius-bottomright:0;-moz-border-radius-bottomleft:0;-webkit-border-bottom-right-radius:0;-webkit-border-bottom-left-radius:0;border-bottom-right-radius:0;border-bottom-left-radius:0;background:#eee}td#left ul.tw-nav-list li.ui-tabs-selected,td#right ul.tw-nav-list li.ui-tabs-selected{ background:none;border:solid 1px #999;border-bottom:solid 1px #fff !important}ul.tw-nav-list li a:link,ul.tw-nav-list li a:visited,ul.tw-nav-list li a:active,ul.tw-nav-list li a:hover{padding:0 8px !important;background:none;border-left:none !important;outline:none}td#left ul.tw-nav-list li.ui-tabs-selected a,td#left li.ui-tabs-selected a:hover,td#right ul.tw-nav-list li.ui-tabs-selected a,td#right li.ui-tabs-selected a:hover{ color:#000000; text-decoration:none;font-weight:bold;background:none !important;outline:none}td#left .ui-tabs-panel,td#right .ui-tabs-panel{ margin:0; padding:0}img{border:0}#dbem-location-map img{ background:none !important}.post img{padding:5px;border:solid 1px #dddddd;background-color:#f3f3f3;-moz-border-radius:3px;-khtml-border-radius:3px;-webkit-border-radius:3px;border-radius:3px;}.post img.size-full{max-width:96%;width:auto 100%;margin:5px 0 5px 0}div.post img[class~=size-full]{height:auto;}.post img.alignleft{float:left;margin:10px 10px 5px 0;}.post img.alignright{float:right;margin:10px 0 5px 10px;}.post img.aligncenter{display:block;margin:10px auto}.aligncenter,div.aligncenter{ display:block; margin-left:auto; margin-right:auto}.alignleft,div.alignleft{float:left;margin:10px 10px 5px 0}.alignright,div.alignright{ float:right; margin:10px 0 5px 10px}div.archives-page img{border:0;padding:0;background:none;margin-bottom:0;vertical-align:-10%}.wp-caption{max-width:96%;width:auto 100%;height:auto;display:block;border:1px solid #dddddd;text-align:center;background-color:#f3f3f3;padding-top:4px;margin:10px 0 0 0;-moz-border-radius:3px;-khtml-border-radius:3px;-webkit-border-radius:3px;border-radius:3px;}* html .wp-caption{height:100%;}.wp-caption img{ margin:0 !important; padding:0 !important; border:0 none !important}.wp-caption p.wp-caption-text{font-size:0.8em;line-height:13px;padding:2px 4px 5px;margin:0;color:#666666}img.wp-post-image{float:left;border:0;padding:0;background:none;margin:0 10px 5px 0}img.wp-smiley{ float:none;border:none !important;margin:0 1px -1px 1px;padding:0 !important;background:none !important}img.avatar{float:left;display:block;margin:0 8px 1px 0;padding:3px;border:solid 1px #ddd;background-color:#f3f3f3;-moz-border-radius:3px;-khtml-border-radius:3px;-webkit-border-radius:3px;border-radius:3px;}#comment_quicktags{text-align:left;padding:10px 0 2px 0;display:block}#comment_quicktags input.ed_button{background:#f4f4f4;border:2px solid #cccccc;color:#444444;margin:2px 4px 2px 0;width:auto;padding:0 4px;height:24px;line-height:16px}#comment_quicktags input.ed_button_hover{background:#dddddd;border:2px solid #666666;color:#000000;margin:2px 4px 2px 0;width:auto;padding:0 4px;height:24px;line-height:16px;cursor:pointer}#comment_quicktags #ed_strong{font-weight:bold}#comment_quicktags #ed_em{font-style:italic}@media print{body{background:white;color:black;margin:0;font-size:10pt !important;font-family:arial,sans-serif;}div.post-footer{line-height:normal !important;color:#555 !important;font-size:9pt !important}a:link,a:visited,a:active,a:hover{text-decoration:underline !important;color:#000}h2{color:#000;font-size:14pt !important;font-weight:normal !important}h3{color:#000;font-size:12pt !important;}#header,#footer,.colone,.colthree,.navigation,.navigation-top,.navigation-middle,.navigation-bottom,.wp-pagenavi-navigation,#comment,#respond,.remove-for-print{display:none}td#left,td#right,td#left-inner,td#right-inner{width:0}td#middle{width:100%}*:lang(en) td#left{ display:none}*:lang(en) td#right{ display:none}*:lang(en) td#left-inner{ display:none}*:lang(en) td#right-inner{ display:none}td#left:empty{ display:none}td#right:empty{ display:none}td#left-inner:empty{ display:none}td#right-inner:empty{ display:none}}ul.rMenu,ul.rMenu ul,ul.rMenu li,ul.rMenu a{display:block;margin:0;padding:0}ul.rMenu,ul.rMenu li,ul.rMenu ul{list-style:none}ul.rMenu ul{display:none}ul.rMenu li{position:relative;z-index:1}ul.rMenu li:hover{z-index:999}ul.rMenu li:hover > ul{display:block;position:absolute}ul.rMenu li:hover{background-position:0 0} ul.rMenu-hor li{float:left;width:auto}ul.rMenu-hRight li{float:right}ul.rMenu-ver li{float:none}.clearfix:after{ content:".";display:block;height:0;clear:both;visibility:hidden}.clearfix{min-width:0;display:inline-block;display:block}* html .clearfix{height:1%;}.clearboth{clear:both;height:1%;font-size:1%;line-height:1%;display:block;padding:0;margin:0}td#header{padding-bottom:15px;}td#middle{padding:0}div.searchbox-form{margin:5px 0 15px 5px}div#menu1 ul.rMenu{background:transparent;border:none}div#imagecontainer{border-top:solid 0px #333;border-bottom:solid 5px #333;}div.widget ul li{padding:1px 5px 1px 12px !important;background:url('../../blog/wp-content/themes/atahualpa353/images/bullets/round-gray.gif') no-repeat 0 7px}ul.rMenu-hor ul,ul.rMenu-hRight ul{margin-top:0px;}ul.rMenu-hor li{margin-bottom:0px;margin-top:0px;margin-left:0px;}ul.rMenu-hor{padding-left:0px;}ul.rMenu-ver li{margin-top:0xp;}div#menu1 ul.rMenu li a,div#menu2 ul.rMenu li a{padding:6px 10px}div#menu1 ul.rMenu li{margin-right:5px}div#menu1 ul.rMenu li li{margin-right:0}div#menu1 ul.rMenu li,div#menu1 ul.rMenu li a{-webkit-border-top-left-radius:5px;-webkit-border-top-right-radius:5px;-moz-border-radius-topleft:5px;-moz-border-radius-topright:5px;border-top-left-radius:5px;border-top-right-radius:5px}div#menu1 ul.rMenu li li,div#menu1 ul.rMenu li li a{-webkit-border-top-left-radius:0;-webkit-border-top-right-radius:0;-moz-border-radius-topleft:0;-moz-border-radius-topright:0;border-top-left-radius:0;border-top-right-radius:0}div#menu2{ border:dashed 1px #ffffff}</style>
<script type="text/javascript">
//<![CDATA[




/* JQUERY */
jQuery(document).ready(function(){  


	/* jQuery('ul#rmenu').superfish(); */
	/* jQuery('ul#rmenu').superfish().find('ul').bgIframe({opacity:false}); */
 
	/* For IE6 */
	if (jQuery.browser.msie && /MSIE 6\.0/i.test(window.navigator.userAgent) && !/MSIE 7\.0/i.test(window.navigator.userAgent) && !/MSIE 8\.0/i.test(window.navigator.userAgent)) {

		/* Max-width for images in IE6 */		
		var centerwidth = jQuery("td#middle").width(); 
		
		/* Images without caption */
		jQuery(".post img").each(function() { 
			var maxwidth = centerwidth - 10 + 'px';
			var imgwidth = jQuery(this).width(); 
			var imgheight = jQuery(this).height(); 
			var newimgheight = (centerwidth / imgwidth * imgheight) + 'px';	
			if (imgwidth > centerwidth) { 
				jQuery(this).css({width: maxwidth}); 
				jQuery(this).css({height: newimgheight}); 
			}
		});
		
		/* Images with caption */
		jQuery("div.wp-caption").each(function() { 
			var captionwidth = jQuery(this).width(); 
			var maxcaptionwidth = centerwidth + 'px';
			var captionheight = jQuery(this).height();
			var captionimgwidth =  jQuery("div.wp-caption img").width();
			var captionimgheight =  jQuery("div.wp-caption img").height();
			if (captionwidth > centerwidth) { 
				jQuery(this).css({width: maxcaptionwidth}); 
				var newcaptionheight = (centerwidth / captionwidth * captionheight) + 'px';
				var newcaptionimgheight = (centerwidth / captionimgwidth * captionimgheight) + 'px';
				jQuery(this).css({height: newcaptionheight}); 
				jQuery("div.wp-caption img").css({height: newcaptionimgheight}); 
				}
		});
		
		/* sfhover for LI:HOVER support in IE6: */
		jQuery("ul li").
			hover( function() {
					jQuery(this).addClass("sfhover")
				}, 
				function() {
					jQuery(this).removeClass("sfhover")
				} 
			); 

	/* End IE6 */
	}
	
	jQuery(".post table tr").
		mouseover(function() {
			jQuery(this).addClass("over");
		}).
		mouseout(function() {
			jQuery(this).removeClass("over");
		});

	
	jQuery(".post table tr:even").
		addClass("alt");

	
	jQuery("input.text, input.TextField, input.file, input.password, textarea").
		focus(function () {  
			jQuery(this).addClass("highlight"); 
		}).
		blur(function () { 
			jQuery(this).removeClass("highlight"); 
		})
	
	jQuery("input.inputblur").
		focus(function () {  
			jQuery(this).addClass("inputfocus"); 
		}).
		blur(function () { 
			jQuery(this).removeClass("inputfocus"); 
		})

		

	
	jQuery("input.button, input.Button").
		mouseover(function() {
			jQuery(this).addClass("buttonhover");
		}).
		mouseout(function() {
			jQuery(this).removeClass("buttonhover");
		});

	/* toggle "you can use these xhtml tags" */
	jQuery("a.xhtmltags").
		click(function(){ 
			jQuery("div.xhtml-tags").slideToggle(300); 
		});

	/* For the Tabbed Widgets plugin: */
	jQuery("ul.tw-nav-list").
		addClass("clearfix");

		
	
});

//]]>
</script>
<meta id="syntaxhighlighteranchor" name="syntaxhighlighter-version" content="3.1.3" />
<!-- Google Analytics Tracking by Google Analyticator 6.2: http://ronaldheft.com/code/analyticator/ -->
<script type="text/javascript">
	var analyticsFileTypes = [''];
	var analyticsEventTracking = 'enabled';
</script>
<script type="text/javascript">
	var _gaq = _gaq || [];
	_gaq.push(['_setAccount', 'UA-2173612-1']);
	_gaq.push(['_trackPageview']);
	_gaq.push(['_trackPageLoadTime']);

	(function() {
		var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true;
		ga.src = ('https:' == document.location.protocol ? '../../../https@ssl_2f\default.htm' : '../../../www/default.htm') + '.google-analytics.com/ga.js';
		var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s);
	})();
</script>
<!--[if IE 6]>
<script type="text/javascript" src="../../blog/wp-content/themes/atahualpa353/js/dd_roundies.js"></script>
<script type="text/javascript">DD_roundies.addRule('a.posts-icon,%20a.comments-icon,%20a.email-icon,%20img.logo');</script>
<![endif]-->
</head>
<body class="single single-post postid-86 single-format-standard">
<div id="wrapper">
<div id="container">
<table id="layout" border="0" cellspacing="0" cellpadding="0">
<colgroup>
<col class="colone" /><col class="coltwo" />
<col class="colthree" /></colgroup> 
	<tr>

		<!-- Header -->
		<td id="header" colspan="3">

		<div id="imagecontainer" class="header-image-container" style="background: url('../../blog/wp-content/themes/atahualpa353/images/header/learncppheader3_800.jpg') top center no-repeat;"><div class="clickable"><a class="divclick" title="Learn C++" href ="../../default.htm">&nbsp;</a></div></div>
		</td>
		<!-- / Header -->

	</tr>

	<!-- Main Body -->	
	<tr id="bodyrow">

				<!-- Left Sidebar -->
		<td id="left">

			<div id="text-5" class="widget widget_text"><div class="widget-title"><h3>Navigation</h3></div>			<div class="textwidget"><ul>
<li><a href="../../default.htm"><big><big>Main Page</big></big></a>
<li><a href="
../../featured-articles/default.htm"><big><big>Featured Articles</big></big></a>
</ul>
<hr>
<ul>
<li><a href="../../about/default.htm">About / Contact</a>
<li><a href="../../about/#Support">Support LearnCpp</a>
</ul>
<hr>

<!-- SiteSearch Google -->
<form method="get" action="http://www.google.com/custom" target="google_window">
<table border="0" bgcolor="#ffffff">
<tr><td nowrap="nowrap" valign="top" align="left">

<!--<br/>-->
<input type="hidden" name="domains" value="LearnCpp.com"></input>
<label for="sbi" style="display: none">Enter your search terms</label>
<input type="text" name="q" size="20" maxlength="255" value="" id="sbi"></input>
</td></tr>
<tr>
<td nowrap="nowrap">
<table>
<tr>
<td>
<input type="radio" name="sitesearch" value="" checked id="ss0"></input>
<label for="ss0" title="Search the Web"><font size="-1" color="#000000">Web</font></label></td>
<td>
<input type="radio" name="sitesearch" value="www.LearnCpp.com" id="ss1"></input>
<label for="ss1" title="Search LearnCpp.com"><font size="-1" color="#000000">LearnCpp</font></label></td>
</tr>
</table>
<label for="sbb" style="display: none">Submit search form</label>
<input type="submit" name="sa" value="Google Search" id="sbb"></input>
<input type="hidden" name="client" value="pub-0588844875925051"></input>
<input type="hidden" name="forid" value="1"></input>
<input type="hidden" name="channel" value="7774154974"></input>
<input type="hidden" name="ie" value="ISO-8859-1"></input>
<input type="hidden" name="oe" value="ISO-8859-1"></input>
<input type="hidden" name="safe" value="active"></input>
<input type="hidden" name="flav" value="0000"></input>
<input type="hidden" name="sig" value="q6fLrjobHHgL00cW"></input>
<input type="hidden" name="cof" value="GALT:#008000;GL:1;DIV:#336699;VLC:663399;AH:center;BGC:FFFFFF;LBGC:336699;ALC:0000FF;LC:0000FF;T:000000;GFNT:0000FF;GIMP:0000FF;FORID:1"></input>
<input type="hidden" name="hl" value="en"></input>
</td></tr></table>
</form>
<!-- SiteSearch Google --></div>
		</div><div id="meta-2" class="widget widget_meta"><div class="widget-title"><h3>Meta</h3></div>			<ul>
			<li><a href="../../blog/wp-login.php@action=register.htm">Register</a></li>			<li><a href="../../blog/wp-login.php.htm">Log in</a></li>
			<li><a href="../../feed/default.htm" title="Syndicate this site using RSS 2.0">Entries <abbr title="Really Simple Syndication">RSS</abbr></a></li>
			<li><a href="../../comments/feed/default.htm" title="The latest comments to all posts in RSS">Comments <abbr title="Really Simple Syndication">RSS</abbr></a></li>
			<li><a href="../../../wordpress.org/default.htm" title="Powered by WordPress, state-of-the-art semantic personal publishing platform.">WordPress.org</a></li>
						</ul>
</div>		<div id="recent-posts-2" class="widget widget_recent_entries">		<div class="widget-title"><h3>Recent Posts</h3></div>		<ul>
				<li><a href="../b-6-new-virtual-function-controls-override-final-default-and-delete/default.htm" title="B.6 &#8212; New virtual function controls: override, final, default, and delete">B.6 &#8212; New virtual function controls: override, final, default, and delete</a></li>
				<li><a href="../b-5-delegating-constructors/default.htm" title="B.5 &#8212; Delegating constructors">B.5 &#8212; Delegating constructors</a></li>
				<li><a href="../b-4-initializer-lists-and-uniform-initialization/default.htm" title="B.4 &#8212; Initializer lists and uniform initialization">B.4 &#8212; Initializer lists and uniform initialization</a></li>
				<li><a href="../b-3-range-based-for-statements-and-static_assert/default.htm" title="B.3 &#8212; Range-based for statements and static_assert">B.3 &#8212; Range-based for statements and static_assert</a></li>
				<li><a href="../b-2-long-long-auto-decltype-nullptr-and-enum-classes/default.htm" title="B.2 &#8212; Long long, auto, decltype, nullptr, and enum classes">B.2 &#8212; Long long, auto, decltype, nullptr, and enum classes</a></li>
				<li><a href="../b-1-introduction-to-c11/default.htm" title="B.1 &#8212; Introduction to C++11">B.1 &#8212; Introduction to C++11</a></li>
				<li><a href="../a-6-fixed-width-integers/default.htm" title="A.6 &#8212; Fixed-width integers">A.6 &#8212; Fixed-width integers</a></li>
				<li><a href="../../site-news/site-software-updated-1123/default.htm" title="Site software updated 11/23">Site software updated 11/23</a></li>
				<li><a href="../../site-news/this-is-why-we-cant-have-nice-things-part-2/default.htm" title="This is why we can&#8217;t have nice things, part 2">This is why we can&#8217;t have nice things, part 2</a></li>
				<li><a href="../../site-news/this-is-why-we-cant-have-nice-things/default.htm" title="This is why we can&#8217;t have nice things">This is why we can&#8217;t have nice things</a></li>
				</ul>
		</div><div id="categories-1" class="widget widget_categories"><div class="widget-title"><h3>Category Indexes</h3></div>		<ul>
	<li class="cat-item cat-item-11"><a href="../../category/breaktime/default.htm" title="Games and fun activities">Break Time</a> (3)
</li>
	<li class="cat-item cat-item-6"><a href="../../category/cpp-programming/default.htm" title="View all posts filed under C++ Programming">C++ Programming</a> (11)
</li>
	<li class="cat-item cat-item-3"><a href="../../category/cpp-tutorial/default.htm" title="View all posts filed under C++ Tutorial">C++ Tutorial</a> (163)
</li>
	<li class="cat-item cat-item-10"><a href="../../category/computer-game-programming/default.htm" title="View all posts filed under Game Programming">Game Programming</a> (4)
</li>
	<li class="cat-item cat-item-14"><a href="../../category/gaming/default.htm" title="View all posts filed under Gaming">Gaming</a> (1)
</li>
	<li class="cat-item cat-item-13"><a href="../../category/general-programming/default.htm" title="View all posts filed under General Programming">General Programming</a> (3)
</li>
	<li class="cat-item cat-item-4"><a href="../../category/site-news/default.htm" title="View all posts filed under Site News">Site News</a> (23)
</li>
	<li class="cat-item cat-item-5"><a href="../../category/wordpress/default.htm" title="View all posts filed under WordPress">WordPress</a> (8)
</li>
		</ul>
</div>
		</td>
		<!-- / Left Sidebar -->
		
				

		<!-- Main Column -->
		<td id="middle">

	

		
		 

		<div class="clearfix navigation-top">
		<div class="older">&laquo; <a href="../65-multidimensional-arrays/default.htm" rel="prev">6.5 &#8212; Multidimensional Arrays</a> &nbsp;</div><div class="newer">&nbsp; <a href="../67-introduction-to-pointers/default.htm" rel="next">6.7 &#8212; Introduction to pointers</a> &raquo;</div></div>
<div class="post-86 post type-post status-publish format-standard hentry category-cpp-tutorial" id="post-86">


<div class="post-headline">		<h1>6.6 &#8212; C-style strings</h1>
		</div>
<div class="post-byline">By Alex, on July 9th, 2007</div>
<div class="post-bodycopy clearfix"><div style='float:left;padding:8px 8px 8px 0px;'><script type="text/javascript"><!--
google_ad_client = "ca-pub-0588844875925051";
/* Content Page Top Large */
google_ad_slot = "7945645163";
google_ad_width = 336;
google_ad_height = 280;
//-->
</script>
<acript type="text/javascript"
src="../../../pagead2.googlesyndication.com/pagead/show_ads.js">
</script></div><p>Under regular C (and hence also C++), it is possible to use arrays to represent strings.  A <strong>string</strong> is a sequence of chars that are interpreted as a piece of text.  You have already seen string literals:</p>
<pre class="brush: cpp; title: ; notranslate" title="">
cout &lt;&lt; &quot;This is a string literal&quot;;
</pre>
<p>In C and C++, strings are typically represented as char arrays that have a null terminator.  A <strong>null terminator</strong> means that the string ends with a &#8216;\0&#8242; character (which has ASCII code 0).  Arrays that are null terminated in this manner are often named using the Hungarian Notation prefix &#8220;sz&#8221;.</p>
<p>To <em>declare</em> a C-style string, simply declare a char array and assign it a value:</p>
<pre class="brush: cpp; title: ; notranslate" title="">
char szString[] = &quot;string&quot;;
</pre>
<p>Although &#8220;string&#8221; is only 6 letters, this actually declares an array of length 7.  The following program prints out the length of the string, and then the ASCII values of all of the characters:</p>
<pre class="brush: cpp; title: ; notranslate" title="">
cout &lt;&lt; sizeof(szString) &lt;&lt; endl;
for (int nChar = 0; nChar &lt; sizeof(szString); nChar++)
    cout &lt;&lt; static_cast&lt;int&gt;(szString[nChar]) &lt;&lt; &quot; &quot;;
</pre>
<p>This produces the result:</p>
<pre>
7
115 116 114 105 110 103 0
</pre>
<p>That 0 is the ASCII code of the null terminator that has been appended to the end of the string.</p>
<p>Just like with normal arrays, once an array is declared to be a particular size, it can not be changed.  Our szString above is of length 7 &#8212; which means it can fit 6 chars of our choice and the null terminator.  If you try to stick more than 6 chars in the array, you will overwrite the null terminator and the CPU won&#8217;t know where the string ends.  If you try to print a string with no null terminator, you&#8217;ll not only get the string, you&#8217;ll also get everything in the adjacent memory slots until you happen to hit a 0.</p>
<p>When declaring strings in this manner, it is always a good idea to use [] and let the compiler calculate the size of the array.  That way if you change the string later, you won&#8217;t have to manually adjust the size.</p>
<p>It is important to realize that a single char (eg. &#8216;a&#8217;) is typically only allocated one byte, but the equivalent string (eg. &#8220;a&#8221;) is allocated two bytes &#8212; one for the char, and one for the null terminator.</p>
<p>Since C-style strings are arrays, you can use the [] operator to change individual characters in the string:</p>
<pre class="brush: cpp; title: ; notranslate" title="">
char szString[] = &quot;string&quot;;
szString[1] = 'p';
cout &lt;&lt; szString;
</pre>
<p>This snippet prints:</p>
<pre>
spring
</pre>
<p>One important point to note is that strings follow ALL the same rules as arrays.  This means you can initialize the string upon creation, but you can not assign values to it using the assignment operator after that!</p>
<pre class="brush: cpp; title: ; notranslate" title="">
char szString[] = &quot;string&quot;; // ok
szString = &quot;rope&quot;; // not ok!
</pre>
<p>This would be the conceptual equivalent of the following nonsensical example:</p>
<pre class="brush: cpp; title: ; notranslate" title="">
int anArray[] = { 3, 5, 7, 9 };
anArray = 8; // what does this mean?
</pre>
<p><strong>Buffers and buffer overflow</strong></p>
<p>You can read text into a string using cin:</p>
<pre class="brush: cpp; title: ; notranslate" title="">
char szString[255];
cin &gt;&gt; szString;
cout &lt;&lt; &quot;You entered: &quot; &lt;&lt; szString &lt;&lt; endl;
</pre>
<p>Why did we declare the string to be 255 characters long?  The answer is that we don&#8217;t know how many characters the user is going to enter.  We are using this array of 255 characters as a buffer.  A <strong>buffer</strong> is memory set aside temporarily to hold data.  In this case, we&#8217;re temporarily holding the user input before we write it out using cout.  </p>
<p>If the user were to enter more characters than our array could hold, we would get a buffer overflow.  A <strong>buffer overflow</strong> occurs when the program tries to store more data in a buffer than the buffer can hold.  Buffer overflow results in other memory being overwritten, which usually causes a program crash, but can cause any number of other issues.  By making our buffer 255 charaters long, we are guessing that the user will not enter this many characters.  Although this is commonly seen in C/C++ programming, it is poor programming.</p>
<p>The recommended way of reading strings using cin is as follows:</p>
<pre class="brush: cpp; title: ; notranslate" title="">
char szString[255];
cin.getline(szString, 255);
cout &lt;&lt; &quot;You entered: &quot; &lt;&lt; szString &lt;&lt; endl;
</pre>
<p>This call to cin.getline() will read up to 254 characters into szString (leaving room for the null terminator!).  Any excess characters will be discarded.  In this way, we guarantee that buffer overflow will not occur.</p>
<p><strong>Manipulating C-style strings</strong></p>
<p>C++ provides many functions to manipulate C-style strings.  For example, strcpy() allows you to make a copy of a string.</p>
<pre class="brush: cpp; title: ; notranslate" title="">
char szSource[] = &quot;Copy this!&quot;;
char szDest[50];
strcpy(szDest, szSource);
cout &lt;&lt; szDest; // prints &quot;Copy this!&quot;
</pre>
<p>However, strcpy() can cause buffer overflows!  In the following program, szDest isn&#8217;t big enough to hold the entire string, so buffer overflow results.</p>
<pre class="brush: cpp; title: ; notranslate" title="">
char szSource[] = &quot;Copy this!&quot;;
char szDest[4];
strcpy(szDest, szSource); // buffer overflow!
cout &lt;&lt; szDest;
</pre>
<p>It is better to use strncpy(), which takes a length parameter to prevent buffer overflow:</p>
<pre class="brush: cpp; title: ; notranslate" title="">
char szSource[] = &quot;Copy this!&quot;;
char szDest[50];
strncpy(szDest, szSource, 49); // copy at most 49 characters (indices 0-48)
szDest[49] = 0; // ensures the last character is a null terminator
cout &lt;&lt; szDest; // prints &quot;Copy this!&quot;
</pre>
<p>Other useful functions:<br />
strcat() &#8212; Appends one string to another (dangerous)<br />
strncat() &#8212; Appends one string to another (with buffer length check)<br />
strcmp() &#8212; Compare two strings (returns 0 if equal)<br />
strncmp() &#8212; Compare two strings up to a specific number of characters (returns 0 if equal)<br />
strlen() &#8212; Returns the length of a string (excluding the null terminator)</p>
<p>Here&#8217;s an example program using some of the concepts in this lesson:</p>
<pre class="brush: cpp; title: ; notranslate" title="">
// Ask the user to enter a string
char szBuffer[255];
cout &lt;&lt; &quot;Enter a string: &quot;;
cin.getline(szBuffer, 255);

int nSpacesFound = 0;
// Loop through all of the characters the user entered
for (int nChar = 0; nChar &lt; strlen(szBuffer); nChar++)
{
    // If the current character is a space, count it
    if (szBuffer[nChar] == ' ')
        nSpacesFound++;
}

cout &lt;&lt; &quot;You typed &quot; &lt;&lt; nSpacesFound &lt;&lt; &quot; spaces!&quot; &lt;&lt; endl;
</pre>
<p><strong>std::string</strong></p>
<p>It is important to know about C-style strings because they are used in a lot of code.  However, we recommend avoiding them altogether whenever possible!</p>
<p>A better idea is to use the string class in the standard library (std::string), which lives in the string header.  std::string lets you work with strings in a way that is much more intuitive.  You can assign strings to them using the assignment operator and they will automatically resize to be as large or small as needed.</p>
<p>Here is a quick example using std::string:</p>
<pre class="brush: cpp; title: ; notranslate" title="">
#include &lt;string&gt; // for std::string
#include &lt;iostream&gt;

int main()
{
    using namespace std; // for both cout and string
    cout &lt;&lt; &quot;Enter your name: &quot;;
    string strString;
    cin &gt;&gt; strString;
    cout &lt;&lt; &quot;Hello, &quot; &lt;&lt; strString &lt;&lt; &quot;!&quot; &lt;&lt; endl;

    cout &lt;&lt; &quot;Your name has: &quot; &lt;&lt; strString.length() &lt;&lt;
            &quot; characters in it&quot; &lt;&lt; endl;
    cout &lt;&lt; &quot;The 2nd character is: &quot; &lt;&lt; strString[1] &lt;&lt; endl;

    strString = &quot;Dave&quot;;
    cout &lt;&lt; &quot;Your name is now &quot; &lt;&lt; strString &lt;&lt; endl;
    cout &lt;&lt; &quot;Goodbye, &quot; &lt;&lt; strString &lt;&lt; endl;

    return 0;
}
</pre>
<p>One extremely useful function to use with std::string is getline().  This allows you to read an entire string in, even if it includes whitespace:</p>
<pre class="brush: cpp; title: ; notranslate" title="">
cout &lt;&lt; &quot;Enter your full name: &quot;;

string strName;
getline(cin, strName);

cout &lt;&lt; &quot;You entered: &quot;&lt;&lt; strName &lt;&lt;endl;
</pre>
<p>For example:</p>
<pre>
Enter your full name: John Smith
You entered: John Smith
</pre>
<p>The nice thing about std::string is that you don&#8217;t have to guess how large the input string is likely to be in advance!</p>
<p>We will talk more about std::string in future lessons.  But feel free to experiment with it in the meantime.</p>
<table border=0 cellpadding=3>
<tr>
<td>
        <a href="../67-introduction-to-pointers/default.htm" style="text-decoration:none"><img src="../../images/cpptutorial/next.png" align=middle> 6.7 &#8212; Introduction to pointers</a>
</td>
</tr>
<tr>
<td>
        <a href="../../#Chapter6" style="text-decoration:none"><img src="../../images/cpptutorial/up.png" align=middle> Index</a>
</td>
</tr>
<tr>
<td>
        <a href="../65-multidimensional-arrays/default.htm" style="text-decoration:none"><img src="../../images/cpptutorial/prev.png" align=middle> 6.5 &#8212; Multidimensional Arrays</a>
</td>
</tr>
</table>
<div style='padding-top:8px; padding-bottom:8px'><script type="text/javascript"><!--
google_ad_client = "ca-pub-0588844875925051";
/* Content Page Bottom - Medium Rectangle */
google_ad_slot = "2751429778";
google_ad_width = 300;
google_ad_height = 250;
//-->
</script>
<acript type="text/javascript"
src="../../../pagead2.googlesyndication.com/pagead/show_ads.js">
</script>
</div><!-- Powered by Ad Inserter Wordpress Plugin, Author: Igor Funa --></div>

<div class="post-footer"><img src="../../blog/wp-content/themes/atahualpa353/images/icons/folder-gray.gif" alt="" /> <a href="../../category/cpp-tutorial/default.htm" title="View all posts in C++ Tutorial" rel="category tag">C++ Tutorial</a>   | <a href="print/default.htm" title="Print This Post" rel="nofollow"><img class="WP-PrintIcon" src="../../blog/wp-content/plugins/wp-print/images/print.gif" alt="Print This Post" title="Print This Post" style="border: 0px;" /></a>&nbsp;<a href="print/default.htm" title="Print This Post" rel="nofollow">Print This Post</a></div>
</div><!-- / Post -->						
	
	<div class="clearfix navigation-middle">
		<div class="older">&laquo; <a href="../65-multidimensional-arrays/default.htm" rel="prev">6.5 &#8212; Multidimensional Arrays</a> &nbsp;</div><div class="newer">&nbsp; <a href="../67-introduction-to-pointers/default.htm" rel="next">6.7 &#8212; Introduction to pointers</a> &raquo;</div></div>


	<a name="comments"></a><!-- named anchor for skip links -->
	<h3 id="comments">46 comments to 6.6 &#8212; C-style strings</h3>

	
	<!-- Comment List -->
	<ul class="commentlist">
		
			<li class="comment even thread-even depth-1 clearfix" id="comment-2678">
		<div id="div-comment-2678" class="clearfix comment-container">
		<div class="comment-author vcard">
		<img alt='' src='../../../0.gravatar.com/avatar/c3b205aafdfb7ae7a4ca65dc865293fe@s=65&d=http_253a_252f_252f0.gravatar.com_252favatar_252fad516503a11cd5ca435acc9bb6523536_253fs_253d65&r=g' class='avatar avatar-65 photo' height='65' width='65' />		<span class="authorname">sandor</span>
		</div>
				<div class="comment-meta commentmetadata">
		<a href="comment-page-1/#comment-2678">
		November 12, 2007 at 2:08 am</a>
        <span class="comment-reply-link"><a rel="nofollow" class="comment-reply-login" href="../../blog/wp-login.php@redirect_to=http_253a_252f_252fwww.learncpp.com_252fcpp-tutorial_252f66-c-style-strings_252f">Log in to Reply</a></span>		 
		</div>
		<p>Hello, I&#8217;ve got a question about the cin.getline() function.<br />
For example:<br />
char string[10];<br />
cin.getline(string, 10);<br />
cout<br />
If I know enter more than 10 chars the program just runs through and the first entered 10 chars doesnt get shown.How can I force the program to show the first 10 chars?</p>
		</div>
</li>
		<li class="comment byuser comment-author-Tarindel bypostauthor odd alt thread-odd thread-alt depth-1 clearfix" id="comment-2694">
		<div id="div-comment-2694" class="clearfix comment-container bypostauthor">
		<div class="comment-author vcard">
		<img alt='' src='../../../0.gravatar.com/avatar/2bcdbab687c32f64f9208e016cafe4cc@s=65&d=http_253a_252f_252f0.gravatar.com_252favatar_252fad516503a11cd5ca435acc9bb6523536_253fs_253d65&r=g' class='avatar avatar-65 photo' height='65' width='65' />		<span class="authorname"><a href='../../../www.tarindel.com/default.htm' rel='external nofollow' class='url'>Alex</a></span>
		</div>
				<div class="comment-meta commentmetadata">
		<a href="comment-page-1/#comment-2694">
		November 12, 2007 at 8:26 am</a>
        <span class="comment-reply-link"><a rel="nofollow" class="comment-reply-login" href="../../blog/wp-login.php@redirect_to=http_253a_252f_252fwww.learncpp.com_252fcpp-tutorial_252f66-c-style-strings_252f">Log in to Reply</a></span>		 
		</div>
		<p>In your example, getline() should only show the first 9 characters you enter (the 10th is used for the terminator) and ignore the rest.</p>
<p>For example, if I run this program:</p>
<pre>
char string[10];
cin.getline(string, 10);
cout < < string << endl;
</pre>
<p>and I type <code>123456789abcdefghijk</code> as input, the program outputs:</p>
</pre>
<pre>
123456789
</pre>
<p>If you actually want to show 10 chars instead of 9, you'll have to change the size of the buffer to 11:</p>
<pre>
char string[11];
cin.getline(string, 11);
cout < < string << endl;
</pre>
</pre>
		</div>
</li>
		<li class="comment even thread-even depth-1 clearfix" id="comment-2725">
		<div id="div-comment-2725" class="clearfix comment-container">
		<div class="comment-author vcard">
		<img alt='' src='../../../0.gravatar.com/avatar/c3b205aafdfb7ae7a4ca65dc865293fe@s=65&d=http_253a_252f_252f0.gravatar.com_252favatar_252fad516503a11cd5ca435acc9bb6523536_253fs_253d65&r=g' class='avatar avatar-65 photo' height='65' width='65' />		<span class="authorname">sandor</span>
		</div>
				<div class="comment-meta commentmetadata">
		<a href="comment-page-1/#comment-2725">
		November 12, 2007 at 11:26 pm</a>
        <span class="comment-reply-link"><a rel="nofollow" class="comment-reply-login" href="../../blog/wp-login.php@redirect_to=http_253a_252f_252fwww.learncpp.com_252fcpp-tutorial_252f66-c-style-strings_252f">Log in to Reply</a></span>		 
		</div>
		<p>Sorry, that was a off-by-one thinking mistake of me : )  But it doesnt really matter how many chars are shown. Its just that when I run this program, and enter more than the &#8220;maximum&#8221; of chars, it doesnt show them, but instead runs through, terminating immediatly (maybe it shows them quick, but if, then only for a millisecond). My actual question is now, how can I make the window stay open and show me the enterd chars.<br />
regards</p>
		</div>
<ul class='children'>
		<li class="comment odd alt depth-2 clearfix" id="comment-63488">
		<div id="div-comment-63488" class="clearfix comment-container">
		<div class="comment-author vcard">
		<img alt='' src='../../../0.gravatar.com/avatar/ebf2907704f1c8257231bdfd3b5909d8@s=65&d=http_253a_252f_252f0.gravatar.com_252favatar_252fad516503a11cd5ca435acc9bb6523536_253fs_253d65&r=g' class='avatar avatar-65 photo' height='65' width='65' />		<span class="authorname"><a href='../../../mucadeleci.blogspot.com/default.htm' rel='external nofollow' class='url'>gundoganfa</a></span>
		</div>
				<div class="comment-meta commentmetadata">
		<a href="comment-page-1/#comment-63488">
		June 30, 2009 at 11:42 pm</a>
        <span class="comment-reply-link"><a rel="nofollow" class="comment-reply-login" href="../../blog/wp-login.php@redirect_to=http_253a_252f_252fwww.learncpp.com_252fcpp-tutorial_252f66-c-style-strings_252f">Log in to Reply</a></span>		 
		</div>
		<p>u can add </p>
<pre>system(&quot;pause&quot;);</pre>
<p>right before &#8220;return&#8221; of the main function.</p>
		</div>
</li>
</ul>
</li>
		<li class="comment byuser comment-author-Tarindel bypostauthor even thread-odd thread-alt depth-1 clearfix" id="comment-2743">
		<div id="div-comment-2743" class="clearfix comment-container bypostauthor">
		<div class="comment-author vcard">
		<img alt='' src='../../../0.gravatar.com/avatar/2bcdbab687c32f64f9208e016cafe4cc@s=65&d=http_253a_252f_252f0.gravatar.com_252favatar_252fad516503a11cd5ca435acc9bb6523536_253fs_253d65&r=g' class='avatar avatar-65 photo' height='65' width='65' />		<span class="authorname"><a href='../../../www.tarindel.com/default.htm' rel='external nofollow' class='url'>Alex</a></span>
		</div>
				<div class="comment-meta commentmetadata">
		<a href="comment-page-1/#comment-2743">
		November 13, 2007 at 8:31 am</a>
        <span class="comment-reply-link"><a rel="nofollow" class="comment-reply-login" href="../../blog/wp-login.php@redirect_to=http_253a_252f_252fwww.learncpp.com_252fcpp-tutorial_252f66-c-style-strings_252f">Log in to Reply</a></span>		 
		</div>
		<p>Sandor, I believe what&#8217;s happening is that all of the keys you are entering are going into an I/O buffer, and the code you wrote is only reading 10 of them.  When a program terminates, some compilers hold the window open until is key is pressed.  It sounds like your compiler is doing this, but then a key from the I/O buffer is causing it to close immediately.</p>
<p>I am not sure if this would work, but at the end of your program (right before main returns), try adding this:</p>
<pre>
std::cin.ignore(1000, '\n');
</pre>
		</div>
</li>
		<li class="comment odd alt thread-even depth-1 clearfix" id="comment-5017">
		<div id="div-comment-5017" class="clearfix comment-container">
		<div class="comment-author vcard">
		<img alt='' src='../../../0.gravatar.com/avatar/66ac6df2d5b3175463af0df308d3c747@s=65&d=http_253a_252f_252f0.gravatar.com_252favatar_252fad516503a11cd5ca435acc9bb6523536_253fs_253d65&r=g' class='avatar avatar-65 photo' height='65' width='65' />		<span class="authorname">Cody</span>
		</div>
				<div class="comment-meta commentmetadata">
		<a href="comment-page-1/#comment-5017">
		December 26, 2007 at 9:22 pm</a>
        <span class="comment-reply-link"><a rel="nofollow" class="comment-reply-login" href="../../blog/wp-login.php@redirect_to=http_253a_252f_252fwww.learncpp.com_252fcpp-tutorial_252f66-c-style-strings_252f">Log in to Reply</a></span>		 
		</div>
		<p>Shouldn&#8217;t </p>
<pre>char szSource[] = "Copy this!";
char szDest[50];
strncpy(szDest, szSource, 50); // copy at most 50 characters
cout < < szDest; // prints "Copy this!"</pre>
<p>  copy at most 49 characters to prevent the null terminator from being overwritten.</pre>
		</div>
</li>
		<li class="comment byuser comment-author-Tarindel bypostauthor even thread-odd thread-alt depth-1 clearfix" id="comment-5019">
		<div id="div-comment-5019" class="clearfix comment-container bypostauthor">
		<div class="comment-author vcard">
		<img alt='' src='../../../0.gravatar.com/avatar/2bcdbab687c32f64f9208e016cafe4cc@s=65&d=http_253a_252f_252f0.gravatar.com_252favatar_252fad516503a11cd5ca435acc9bb6523536_253fs_253d65&r=g' class='avatar avatar-65 photo' height='65' width='65' />		<span class="authorname"><a href='../../../www.tarindel.com/default.htm' rel='external nofollow' class='url'>Alex</a></span>
		</div>
				<div class="comment-meta commentmetadata">
		<a href="comment-page-1/#comment-5019">
		December 26, 2007 at 9:48 pm</a>
        <span class="comment-reply-link"><a rel="nofollow" class="comment-reply-login" href="../../blog/wp-login.php@redirect_to=http_253a_252f_252fwww.learncpp.com_252fcpp-tutorial_252f66-c-style-strings_252f">Log in to Reply</a></span>		 
		</div>
		<p>Cody,</p>
<p>In most cases, it is a good idea to copy 1 less than the number of characters in the buffer (in this case, 49) and then explicitly ensure the last character is a null terminator.  I have updated the example.</p>
		</div>
</li>
		<li class="comment odd alt thread-even depth-1 clearfix" id="comment-5738">
		<div id="div-comment-5738" class="clearfix comment-container">
		<div class="comment-author vcard">
		<img alt='' src='../../../0.gravatar.com/avatar/0195bf75f2f76e29b4f52f919e1cec59@s=65&d=http_253a_252f_252f0.gravatar.com_252favatar_252fad516503a11cd5ca435acc9bb6523536_253fs_253d65&r=g' class='avatar avatar-65 photo' height='65' width='65' />		<span class="authorname">Abhishek</span>
		</div>
				<div class="comment-meta commentmetadata">
		<a href="comment-page-1/#comment-5738">
		January 9, 2008 at 12:33 am</a>
        <span class="comment-reply-link"><a rel="nofollow" class="comment-reply-login" href="../../blog/wp-login.php@redirect_to=http_253a_252f_252fwww.learncpp.com_252fcpp-tutorial_252f66-c-style-strings_252f">Log in to Reply</a></span>		 
		</div>
		<p>char szSource[] = &#8220;Copy this!&#8221;;<br />
char szDest[50];<br />
strncpy(szDest, szSource, 49); // copy at most 49 characters (indices 0-48)<br />
szDest[49] = 0; // ensures the last character is a null terminator<br />
cout </p>
<p>In this example you have assigned 0(zero) to a char.Will the compiler automatically cast 0 to &#8216;\0&#8242;?</p>
<p>How about writing   szDest[49]=&#8217;\0&#8242;;</p>
<p>or  szDest[49]=static_cast<char>(0)</p>
<p>Does cin.getline() place the null character automatically? </p>
<p>char szString[255];<br />
cin.getline(szString, 255);<br />
cout</char></p>
		</div>
<ul class='children'>
		<li class="comment byuser comment-author-Tarindel bypostauthor even depth-2 clearfix" id="comment-5754">
		<div id="div-comment-5754" class="clearfix comment-container bypostauthor">
		<div class="comment-author vcard">
		<img alt='' src='../../../0.gravatar.com/avatar/2bcdbab687c32f64f9208e016cafe4cc@s=65&d=http_253a_252f_252f0.gravatar.com_252favatar_252fad516503a11cd5ca435acc9bb6523536_253fs_253d65&r=g' class='avatar avatar-65 photo' height='65' width='65' />		<span class="authorname"><a href='../../../www.tarindel.com/default.htm' rel='external nofollow' class='url'>Alex</a></span>
		</div>
				<div class="comment-meta commentmetadata">
		<a href="comment-page-1/#comment-5754">
		January 9, 2008 at 7:22 am</a>
        <span class="comment-reply-link"><a rel="nofollow" class="comment-reply-login" href="../../blog/wp-login.php@redirect_to=http_253a_252f_252fwww.learncpp.com_252fcpp-tutorial_252f66-c-style-strings_252f">Log in to Reply</a></span>		 
		</div>
		<p>Yes, the compiler should treat 0 and &#8216;\0&#8242; as the same.</p>
<p>So:<br />
szDest[49] = 0;<br />
szDest[49] = &#8216;\0&#8242;;<br />
szDest[49] = static_cast<char>(0);</p>
<p>All should work identically.</p>
<p>cin.getline() reserves one space for a null terminator, so it does place it automatically.</char></p>
		</div>
</li>
</ul>
</li>
		<li class="comment odd alt thread-odd thread-alt depth-1 clearfix" id="comment-8845">
		<div id="div-comment-8845" class="clearfix comment-container">
		<div class="comment-author vcard">
		<img alt='' src='../../../1.gravatar.com/avatar/743717ba8bc4078c3c75dfdfaa299a99@s=65&d=http_253a_252f_252f1.gravatar.com_252favatar_252fad516503a11cd5ca435acc9bb6523536_253fs_253d65&r=g' class='avatar avatar-65 photo' height='65' width='65' />		<span class="authorname">Chad</span>
		</div>
				<div class="comment-meta commentmetadata">
		<a href="comment-page-1/#comment-8845">
		March 3, 2008 at 2:23 pm</a>
        <span class="comment-reply-link"><a rel="nofollow" class="comment-reply-login" href="../../blog/wp-login.php@redirect_to=http_253a_252f_252fwww.learncpp.com_252fcpp-tutorial_252f66-c-style-strings_252f">Log in to Reply</a></span>		 
		</div>
		<p>that program will only read in my first name. How do you accept strings with spaces in them?</p>
		</div>
<ul class='children'>
		<li class="comment byuser comment-author-Tarindel bypostauthor even depth-2 clearfix" id="comment-8848">
		<div id="div-comment-8848" class="clearfix comment-container bypostauthor">
		<div class="comment-author vcard">
		<img alt='' src='../../../0.gravatar.com/avatar/2bcdbab687c32f64f9208e016cafe4cc@s=65&d=http_253a_252f_252f0.gravatar.com_252favatar_252fad516503a11cd5ca435acc9bb6523536_253fs_253d65&r=g' class='avatar avatar-65 photo' height='65' width='65' />		<span class="authorname"><a href='../../../www.tarindel.com/default.htm' rel='external nofollow' class='url'>Alex</a></span>
		</div>
				<div class="comment-meta commentmetadata">
		<a href="comment-page-1/#comment-8848">
		March 3, 2008 at 3:21 pm</a>
        <span class="comment-reply-link"><a rel="nofollow" class="comment-reply-login" href="../../blog/wp-login.php@redirect_to=http_253a_252f_252fwww.learncpp.com_252fcpp-tutorial_252f66-c-style-strings_252f">Log in to Reply</a></span>		 
		</div>
		<p>There&#8217;s a special version of getline() that you can use to read in string variables with spaces:</p>
<pre>
using namespace std;
string strString;
getline(cin, strString);
</pre>
		</div>
</li>
</ul>
</li>
		<li class="pingback odd alt thread-even depth-1 clearfix" id="comment-13476">
		<div id="div-comment-13476" class="clearfix comment-container">
		<div class="comment-author vcard">
				<span class="authorname"><a href='../65-multidimensional-arrays/default.htm' rel='external nofollow' class='url'>Learn C++ - &raquo; 6.5 &#8212; Multidimensional Arrays</a></span>
		</div>
				<div class="comment-meta commentmetadata">
		<a href="comment-page-1/#comment-13476">
		April 28, 2008 at 8:52 pm</a>
        <span class="comment-reply-link"><a rel="nofollow" class="comment-reply-login" href="../../blog/wp-login.php@redirect_to=http_253a_252f_252fwww.learncpp.com_252fcpp-tutorial_252f66-c-style-strings_252f">Log in to Reply</a></span>		 
		</div>
		<p>[...]  6.6 â€” C-style strings [...]</p>
		</div>
</li>
		<li class="comment even thread-odd thread-alt depth-1 clearfix" id="comment-17148">
		<div id="div-comment-17148" class="clearfix comment-container">
		<div class="comment-author vcard">
		<img alt='' src='../../../0.gravatar.com/avatar/02c1c5ea8d78232b5c07affcb08c6984@s=65&d=http_253a_252f_252f0.gravatar.com_252favatar_252fad516503a11cd5ca435acc9bb6523536_253fs_253d65&r=g' class='avatar avatar-65 photo' height='65' width='65' />		<span class="authorname">Stuart</span>
		</div>
				<div class="comment-meta commentmetadata">
		<a href="comment-page-1/#comment-17148">
		May 21, 2008 at 12:35 pm</a>
        <span class="comment-reply-link"><a rel="nofollow" class="comment-reply-login" href="../../blog/wp-login.php@redirect_to=http_253a_252f_252fwww.learncpp.com_252fcpp-tutorial_252f66-c-style-strings_252f">Log in to Reply</a></span>		 
		</div>
		<p>My compiler says that &#8220;strncpy&#8221; may be unsafe and that to consider using &#8220;strncpy_s&#8221; instead.<br />
What&#8217;s the difference?</p>
		</div>
<ul class='children'>
		<li class="comment byuser comment-author-Tarindel bypostauthor odd alt depth-2 clearfix" id="comment-17917">
		<div id="div-comment-17917" class="clearfix comment-container bypostauthor">
		<div class="comment-author vcard">
		<img alt='' src='../../../0.gravatar.com/avatar/2bcdbab687c32f64f9208e016cafe4cc@s=65&d=http_253a_252f_252f0.gravatar.com_252favatar_252fad516503a11cd5ca435acc9bb6523536_253fs_253d65&r=g' class='avatar avatar-65 photo' height='65' width='65' />		<span class="authorname"><a href='../../../www.tarindel.com/default.htm' rel='external nofollow' class='url'>Alex</a></span>
		</div>
				<div class="comment-meta commentmetadata">
		<a href="comment-page-1/#comment-17917">
		May 30, 2008 at 5:20 pm</a>
        <span class="comment-reply-link"><a rel="nofollow" class="comment-reply-login" href="../../blog/wp-login.php@redirect_to=http_253a_252f_252fwww.learncpp.com_252fcpp-tutorial_252f66-c-style-strings_252f">Log in to Reply</a></span>		 
		</div>
		<p>strncpy is a standard function call that copies n bytes of a string from source to destination.  Microsoft decided that this function was not safe enough, so they deprecated it in the latest version of their compiler, and replaced it with strncpy_s.  The two functions are identical, except strncpy_s takes an additional parameter that is the size of the destination buffer.  strncpy_s is currently a non-standard function and may not be portable.</p>
<p>Personally, I&#8217;d avoid both and use a string class or std::string.</p>
		</div>
</li>
</ul>
</li>
		<li class="comment even thread-even depth-1 clearfix" id="comment-24097">
		<div id="div-comment-24097" class="clearfix comment-container">
		<div class="comment-author vcard">
		<img alt='' src='../../../1.gravatar.com/avatar/f5cee49ff0cd89a573301e54e46fdee9@s=65&d=http_253a_252f_252f1.gravatar.com_252favatar_252fad516503a11cd5ca435acc9bb6523536_253fs_253d65&r=g' class='avatar avatar-65 photo' height='65' width='65' />		<span class="authorname">Jeffey</span>
		</div>
				<div class="comment-meta commentmetadata">
		<a href="comment-page-1/#comment-24097">
		August 18, 2008 at 12:56 am</a>
        <span class="comment-reply-link"><a rel="nofollow" class="comment-reply-login" href="../../blog/wp-login.php@redirect_to=http_253a_252f_252fwww.learncpp.com_252fcpp-tutorial_252f66-c-style-strings_252f">Log in to Reply</a></span>		 
		</div>
		<p>in the code </p>
<p><code>string strString;</code></p>
<p>it is setting string to a variable right? How come string is not considered a &#8220;keyword&#8221;? Like instead of asking the user. I could do the following.</p>
<p><code>string strString;<br />
	strString = (&quot;jeffey&quot;);<!--formatted--></code></p>
<p>this work the same as all other variables.</p>
<p> also is there a way I can set my compiler settings to recognize  the word &#8220;string&#8221; so that it shows up as a different color. I do use the text colors and rely on them a lot when looking at code. I want the word &#8220;string&#8221; to stand out from normal text.</p>
		</div>
</li>
		<li class="comment byuser comment-author-Tarindel bypostauthor odd alt thread-odd thread-alt depth-1 clearfix" id="comment-24929">
		<div id="div-comment-24929" class="clearfix comment-container bypostauthor">
		<div class="comment-author vcard">
		<img alt='' src='../../../0.gravatar.com/avatar/2bcdbab687c32f64f9208e016cafe4cc@s=65&d=http_253a_252f_252f0.gravatar.com_252favatar_252fad516503a11cd5ca435acc9bb6523536_253fs_253d65&r=g' class='avatar avatar-65 photo' height='65' width='65' />		<span class="authorname"><a href='../../../www.tarindel.com/default.htm' rel='external nofollow' class='url'>Alex</a></span>
		</div>
				<div class="comment-meta commentmetadata">
		<a href="comment-page-1/#comment-24929">
		August 25, 2008 at 7:01 pm</a>
        <span class="comment-reply-link"><a rel="nofollow" class="comment-reply-login" href="../../blog/wp-login.php@redirect_to=http_253a_252f_252fwww.learncpp.com_252fcpp-tutorial_252f66-c-style-strings_252f">Log in to Reply</a></span>		 
		</div>
		<p><code>string strString;</code> is simply declaring a variable of type std::string.  If I&#8217;m not mistaken, std::string will auto-initialize to the empty string if not provided a value.  string isn&#8217;t a keyword because it wasn&#8217;t built into the language &#8212; it&#8217;s part of the standard library.</p>
<p>As far as I know, there isn&#8217;t a way to make string show up in a different color in Visual Studio or Code::Blocks.</p>
		</div>
<ul class='children'>
		<li class="comment even depth-2 clearfix" id="comment-68546">
		<div id="div-comment-68546" class="clearfix comment-container">
		<div class="comment-author vcard">
		<img alt='' src='../../../1.gravatar.com/avatar/99c36acef87025796651536b187e7f9b@s=65&d=http_253a_252f_252f1.gravatar.com_252favatar_252fad516503a11cd5ca435acc9bb6523536_253fs_253d65&r=g' class='avatar avatar-65 photo' height='65' width='65' />		<span class="authorname">jeremy</span>
		</div>
				<div class="comment-meta commentmetadata">
		<a href="comment-page-1/#comment-68546">
		September 17, 2009 at 8:33 pm</a>
        <span class="comment-reply-link"><a rel="nofollow" class="comment-reply-login" href="../../blog/wp-login.php@redirect_to=http_253a_252f_252fwww.learncpp.com_252fcpp-tutorial_252f66-c-style-strings_252f">Log in to Reply</a></span>		 
		</div>
		<p>In Code::Blocks,<br />
Go To &#8220;Settings&#8221; &gt; &#8220;Editor&#8221; &gt; &#8220;Syntax highlighting&#8221; &gt; &#8220;Keywords&#8230;&#8221;<br />
Add &#8220;string&#8221; to the list.<br />
It will now appear as a keyword like &#8220;int&#8221;.</p>
		</div>
</li>
</ul>
</li>
		<li class="comment odd alt thread-even depth-1 clearfix" id="comment-31519">
		<div id="div-comment-31519" class="clearfix comment-container">
		<div class="comment-author vcard">
		<img alt='' src='../../../0.gravatar.com/avatar/23490d73ae5456568478541137e2a812@s=65&d=http_253a_252f_252f0.gravatar.com_252favatar_252fad516503a11cd5ca435acc9bb6523536_253fs_253d65&r=g' class='avatar avatar-65 photo' height='65' width='65' />		<span class="authorname">som shekhar</span>
		</div>
				<div class="comment-meta commentmetadata">
		<a href="comment-page-1/#comment-31519">
		November 3, 2008 at 1:09 am</a>
        <span class="comment-reply-link"><a rel="nofollow" class="comment-reply-login" href="../../blog/wp-login.php@redirect_to=http_253a_252f_252fwww.learncpp.com_252fcpp-tutorial_252f66-c-style-strings_252f">Log in to Reply</a></span>		 
		</div>
		<p>if i use like this :<br />
string sName;<br />
then this variable doesnt take blank spaces;</p>
<p>for ex;if i enter a som shekhar in the variable sName, then it prints only som<br />
y it is like that?</p>
		</div>
<ul class='children'>
		<li class="comment byuser comment-author-Tarindel bypostauthor even depth-2 clearfix" id="comment-31565">
		<div id="div-comment-31565" class="clearfix comment-container bypostauthor">
		<div class="comment-author vcard">
		<img alt='' src='../../../0.gravatar.com/avatar/2bcdbab687c32f64f9208e016cafe4cc@s=65&d=http_253a_252f_252f0.gravatar.com_252favatar_252fad516503a11cd5ca435acc9bb6523536_253fs_253d65&r=g' class='avatar avatar-65 photo' height='65' width='65' />		<span class="authorname"><a href='../../../www.tarindel.com/default.htm' rel='external nofollow' class='url'>Alex</a></span>
		</div>
				<div class="comment-meta commentmetadata">
		<a href="comment-page-1/#comment-31565">
		November 3, 2008 at 6:56 pm</a>
        <span class="comment-reply-link"><a rel="nofollow" class="comment-reply-login" href="../../blog/wp-login.php@redirect_to=http_253a_252f_252fwww.learncpp.com_252fcpp-tutorial_252f66-c-style-strings_252f">Log in to Reply</a></span>		 
		</div>
		<p>It has to do with the way the >> operator is implemented.  Operator >> will extract characters until it hits whitespace, then it will stop.</p>
<p>The reasons for this are somewhat complex &#8212; it is discussed further in chapter 13.2 on the lesson on the >> operator.</p>
<p>In the meantime, if you want to read in a string with whitespaces, you can do this:</p>
<pre>
string strName;
getline(cin, strName);
cout &lt;&lt; strName &lt;&lt; endl;
</pre>
		</div>
<ul class='children'>
		<li class="comment odd alt depth-3 clearfix" id="comment-31567">
		<div id="div-comment-31567" class="clearfix comment-container">
		<div class="comment-author vcard">
		<img alt='' src='../../../0.gravatar.com/avatar/23490d73ae5456568478541137e2a812@s=65&d=http_253a_252f_252f0.gravatar.com_252favatar_252fad516503a11cd5ca435acc9bb6523536_253fs_253d65&r=g' class='avatar avatar-65 photo' height='65' width='65' />		<span class="authorname">som shekhar</span>
		</div>
				<div class="comment-meta commentmetadata">
		<a href="comment-page-1/#comment-31567">
		November 3, 2008 at 7:15 pm</a>
        <span class="comment-reply-link"><a rel="nofollow" class="comment-reply-login" href="../../blog/wp-login.php@redirect_to=http_253a_252f_252fwww.learncpp.com_252fcpp-tutorial_252f66-c-style-strings_252f">Log in to Reply</a></span>		 
		</div>
		<p>now i have done the same but hte problem is that i have to hit the enter key twice&#8230;<br />
my code is </p>
<pre>
#include &lt;iostream&gt;

#include &lt;string&gt;

int main()
{
using namespace std;
string strName;
cout&lt;&lt;"Enter name:";
getline(cin,strName);
cout&lt;&lt;"Name = "&lt;&lt; strName &lt;&lt; endl;
return 0;
}
<!--formatted--></pre>
		</div>
</li>
</ul>
</li>
</ul>
</li>
		<li class="comment even thread-odd thread-alt depth-1 clearfix" id="comment-31783">
		<div id="div-comment-31783" class="clearfix comment-container">
		<div class="comment-author vcard">
		<img alt='' src='../../../1.gravatar.com/avatar/30f5101f873065f5bb09c8c33639652b@s=65&d=http_253a_252f_252f1.gravatar.com_252favatar_252fad516503a11cd5ca435acc9bb6523536_253fs_253d65&r=g' class='avatar avatar-65 photo' height='65' width='65' />		<span class="authorname"><a href='../../../n/a' rel='external nofollow' class='url'>Ronnie</a></span>
		</div>
				<div class="comment-meta commentmetadata">
		<a href="comment-page-1/#comment-31783">
		November 7, 2008 at 4:04 pm</a>
        <span class="comment-reply-link"><a rel="nofollow" class="comment-reply-login" href="../../blog/wp-login.php@redirect_to=http_253a_252f_252fwww.learncpp.com_252fcpp-tutorial_252f66-c-style-strings_252f">Log in to Reply</a></span>		 
		</div>
		<p>When you use cin.getline, you make the string a maximum amount of 255 &#8211; surely there&#8217;s a huge chance of so much wasted memory? Is there no way to prevent this?</p>
		</div>
<ul class='children'>
		<li class="comment byuser comment-author-Tarindel bypostauthor odd alt depth-2 clearfix" id="comment-31819">
		<div id="div-comment-31819" class="clearfix comment-container bypostauthor">
		<div class="comment-author vcard">
		<img alt='' src='../../../0.gravatar.com/avatar/2bcdbab687c32f64f9208e016cafe4cc@s=65&d=http_253a_252f_252f0.gravatar.com_252favatar_252fad516503a11cd5ca435acc9bb6523536_253fs_253d65&r=g' class='avatar avatar-65 photo' height='65' width='65' />		<span class="authorname"><a href='../../../www.tarindel.com/default.htm' rel='external nofollow' class='url'>Alex</a></span>
		</div>
				<div class="comment-meta commentmetadata">
		<a href="comment-page-1/#comment-31819">
		November 8, 2008 at 11:42 am</a>
        <span class="comment-reply-link"><a rel="nofollow" class="comment-reply-login" href="../../blog/wp-login.php@redirect_to=http_253a_252f_252fwww.learncpp.com_252fcpp-tutorial_252f66-c-style-strings_252f">Log in to Reply</a></span>		 
		</div>
		<p>The memory isn&#8217;t really wasted, it&#8217;s just used temporarily and then gets returned to the stack when the function exits.  The bigger problem is the possibility of overflowing the buffer.</p>
<p>If you want to avoid using the fixed size buffer, you can use the getline() function with a std::string.</p>
<pre>
std::string strString;
getline(cin, strString);
</pre>
		</div>
</li>
</ul>
</li>
		<li class="comment even thread-even depth-1 clearfix" id="comment-34289">
		<div id="div-comment-34289" class="clearfix comment-container">
		<div class="comment-author vcard">
		<img alt='' src='../../../1.gravatar.com/avatar/ddda55fe42301570aedb8a6288b79521@s=65&d=http_253a_252f_252f1.gravatar.com_252favatar_252fad516503a11cd5ca435acc9bb6523536_253fs_253d65&r=g' class='avatar avatar-65 photo' height='65' width='65' />		<span class="authorname"><a href='../../../www.genesis.net.au/~daniel/index.html' rel='external nofollow' class='url'>Daniel</a></span>
		</div>
				<div class="comment-meta commentmetadata">
		<a href="comment-page-1/#comment-34289">
		December 11, 2008 at 4:00 pm</a>
        <span class="comment-reply-link"><a rel="nofollow" class="comment-reply-login" href="../../blog/wp-login.php@redirect_to=http_253a_252f_252fwww.learncpp.com_252fcpp-tutorial_252f66-c-style-strings_252f">Log in to Reply</a></span>		 
		</div>
		<p>Hey, I have a quick question&#8230; Let&#8217;s say we have a function Fred
<pre>std::string Fred();</pre>
<p>Now I need to make a function Barney
<pre>char *Barney()</pre>
<p>Which calls Fred and returns the result as an null-terminated-c-string. How would I go about this?</p>
		</div>
<ul class='children'>
		<li class="comment byuser comment-author-Tarindel bypostauthor odd alt depth-2 clearfix" id="comment-34516">
		<div id="div-comment-34516" class="clearfix comment-container bypostauthor">
		<div class="comment-author vcard">
		<img alt='' src='../../../0.gravatar.com/avatar/2bcdbab687c32f64f9208e016cafe4cc@s=65&d=http_253a_252f_252f0.gravatar.com_252favatar_252fad516503a11cd5ca435acc9bb6523536_253fs_253d65&r=g' class='avatar avatar-65 photo' height='65' width='65' />		<span class="authorname"><a href='../../../www.tarindel.com/default.htm' rel='external nofollow' class='url'>Alex</a></span>
		</div>
				<div class="comment-meta commentmetadata">
		<a href="comment-page-1/#comment-34516">
		December 13, 2008 at 4:57 pm</a>
        <span class="comment-reply-link"><a rel="nofollow" class="comment-reply-login" href="../../blog/wp-login.php@redirect_to=http_253a_252f_252fwww.learncpp.com_252fcpp-tutorial_252f66-c-style-strings_252f">Log in to Reply</a></span>		 
		</div>
		<pre>
const char* Barney()
{
    return Fred().c_str();
}
</pre>
		</div>
<ul class='children'>
		<li class="comment even depth-3 clearfix" id="comment-34593">
		<div id="div-comment-34593" class="clearfix comment-container">
		<div class="comment-author vcard">
		<img alt='' src='../../../1.gravatar.com/avatar/ddda55fe42301570aedb8a6288b79521@s=65&d=http_253a_252f_252f1.gravatar.com_252favatar_252fad516503a11cd5ca435acc9bb6523536_253fs_253d65&r=g' class='avatar avatar-65 photo' height='65' width='65' />		<span class="authorname"><a href='../../../www.genesis.net.au/~daniel/index.html' rel='external nofollow' class='url'>Daniel</a></span>
		</div>
				<div class="comment-meta commentmetadata">
		<a href="comment-page-1/#comment-34593">
		December 14, 2008 at 11:06 pm</a>
        <span class="comment-reply-link"><a rel="nofollow" class="comment-reply-login" href="../../blog/wp-login.php@redirect_to=http_253a_252f_252fwww.learncpp.com_252fcpp-tutorial_252f66-c-style-strings_252f">Log in to Reply</a></span>		 
		</div>
		<p>Without the const&#8230;</p>
		</div>
</li>
</ul>
</li>
</ul>
</li>
		<li class="comment odd alt thread-odd thread-alt depth-1 clearfix" id="comment-60190">
		<div id="div-comment-60190" class="clearfix comment-container">
		<div class="comment-author vcard">
		<img alt='' src='../../../1.gravatar.com/avatar/10dc9f8052d5a4b080c620a4467e54f7@s=65&d=http_253a_252f_252f1.gravatar.com_252favatar_252fad516503a11cd5ca435acc9bb6523536_253fs_253d65&r=g' class='avatar avatar-65 photo' height='65' width='65' />		<span class="authorname">csvan</span>
		</div>
				<div class="comment-meta commentmetadata">
		<a href="comment-page-1/#comment-60190">
		May 7, 2009 at 7:15 am</a>
        <span class="comment-reply-link"><a rel="nofollow" class="comment-reply-login" href="../../blog/wp-login.php@redirect_to=http_253a_252f_252fwww.learncpp.com_252fcpp-tutorial_252f66-c-style-strings_252f">Log in to Reply</a></span>		 
		</div>
		<p>In the past, I have been giving thought to the question of resource overheads when using std::string as opposed to cstrings. Just how big is this overhead in reality, and could it be preferable to use cstrings rather than std::string in code where there will be no &#8220;heavy&#8221; use of strings, in order to improve overall performance? Maybe the same goes for std::vector as opposed to arrays?</p>
<p>I</p>
		</div>
</li>
		<li class="comment even thread-even depth-1 clearfix" id="comment-63973">
		<div id="div-comment-63973" class="clearfix comment-container">
		<div class="comment-author vcard">
		<img alt='' src='../../../0.gravatar.com/avatar/c059852928889b6c485f69afa0a145cb@s=65&d=http_253a_252f_252f0.gravatar.com_252favatar_252fad516503a11cd5ca435acc9bb6523536_253fs_253d65&r=g' class='avatar avatar-65 photo' height='65' width='65' />		<span class="authorname">Frank</span>
		</div>
				<div class="comment-meta commentmetadata">
		<a href="comment-page-1/#comment-63973">
		July 8, 2009 at 8:12 pm</a>
        <span class="comment-reply-link"><a rel="nofollow" class="comment-reply-login" href="../../blog/wp-login.php@redirect_to=http_253a_252f_252fwww.learncpp.com_252fcpp-tutorial_252f66-c-style-strings_252f">Log in to Reply</a></span>		 
		</div>
		<p>I added to your example program just for giggles and i thought i would share my minor extension. by the way alex this is a great tutorial and i am learning a lot but i am still struggling a bit with writing a coherent program. perhaps if there were a few example programs (3-4 with explainations of what each part does ect.) at the end of each chapter just for us to copy? this would help me out tremendously to grasp what you are telling us in the sections. </p>
<p>here is the code:</p>
<pre> #include &lt;cstdlib&gt;
#include &lt;iostream&gt;
#include &lt;string&gt;

int main()
{
    using namespace std;
          cout &lt;&lt; &quot;Enter your name: &quot;;
          string strString;
          cin &gt;&gt; strString;
          cout &lt;&lt; &quot;Hello, &quot; &lt;&lt; strString &lt;&lt; &quot;!&quot; &lt;&lt; endl;
          cout &lt;&lt; &quot;Your name has &quot; &lt;&lt;strString.length() &lt;&lt;
          &quot; characters in it&quot; &lt;&lt; endl;
          cout &lt;&lt; &quot;The 2nd character is: &quot; &lt;&lt; strString[1] &lt;&lt; endl;
          strString = &quot;Dave&quot;;
          cout &lt;&lt; &quot;your name is now &quot; &lt;&lt; strString &lt;&lt; endl;
          cout &lt;&lt; &quot;Hello &quot; &lt;&lt; strString &lt;&lt; &quot;, Would you like to hear me sing a song?&quot; &lt;&lt;endl;
          string strAnswer;
          cin &gt;&gt; strAnswer;
              if ( strAnswer == &quot;yes&quot; )
                 cout &lt;&lt; &quot; \n Daisy, Daisy give me your answer do. \n Im half crazy all for the love of you \n \n&quot;;
                 else if (strAnswer == &quot;no&quot;)
                      cout &lt;&lt; &quot;Ok, Goodbye &quot; &lt;&lt; strString &lt;&lt; endl;
                      else
                      cout &lt;&lt; &quot;I dont understand you &quot; &lt;&lt; strString &lt;&lt; endl;
system (&quot;PAUSE&quot;);

return 0;
</pre>
		</div>
</li>
		<li class="pingback odd alt thread-odd thread-alt depth-1 clearfix" id="comment-68208">
		<div id="div-comment-68208" class="clearfix comment-container">
		<div class="comment-author vcard">
				<span class="authorname"><a href='../17-1-stdstring-and-stdwstring/default.htm' rel='external nofollow' class='url'>Learn C++ - &raquo; 17.1 &#8212; std::string and std::wstring</a></span>
		</div>
				<div class="comment-meta commentmetadata">
		<a href="comment-page-1/#comment-68208">
		September 12, 2009 at 2:43 pm</a>
        <span class="comment-reply-link"><a rel="nofollow" class="comment-reply-login" href="../../blog/wp-login.php@redirect_to=http_253a_252f_252fwww.learncpp.com_252fcpp-tutorial_252f66-c-style-strings_252f">Log in to Reply</a></span>		 
		</div>
		<p>[...] a previous lesson, we covered C-style strings, which using char arrays to store a string of characters. If you&#8217;ve tried to do anything with [...]</p>
		</div>
</li>
		<li class="comment even thread-even depth-1 clearfix" id="comment-70886">
		<div id="div-comment-70886" class="clearfix comment-container">
		<div class="comment-author vcard">
		<img alt='' src='../../../0.gravatar.com/avatar/4e59998eb94080b43cf25f25b09f24f2@s=65&d=http_253a_252f_252f0.gravatar.com_252favatar_252fad516503a11cd5ca435acc9bb6523536_253fs_253d65&r=g' class='avatar avatar-65 photo' height='65' width='65' />		<span class="authorname">Allan</span>
		</div>
				<div class="comment-meta commentmetadata">
		<a href="comment-page-1/#comment-70886">
		October 23, 2009 at 4:22 am</a>
        <span class="comment-reply-link"><a rel="nofollow" class="comment-reply-login" href="../../blog/wp-login.php@redirect_to=http_253a_252f_252fwww.learncpp.com_252fcpp-tutorial_252f66-c-style-strings_252f">Log in to Reply</a></span>		 
		</div>
		<p>How about something on working with strings?<br />
I need to add two strings together to create one longer string.</p>
<p>Also when comparing strings can I just ask if string1==string2 or is there a strcompare function?</p>
<p>I&#8217;m a newbie writing my first program and referencing your site.</p>
<p>Thanks,<br />
Al</p>
		</div>
</li>
		<li class="comment odd alt thread-odd thread-alt depth-1 clearfix" id="comment-78102">
		<div id="div-comment-78102" class="clearfix comment-container">
		<div class="comment-author vcard">
		<img alt='' src='../../../0.gravatar.com/avatar/46ce9432b32a343f5db2403928121f93@s=65&d=http_253a_252f_252f0.gravatar.com_252favatar_252fad516503a11cd5ca435acc9bb6523536_253fs_253d65&r=g' class='avatar avatar-65 photo' height='65' width='65' />		<span class="authorname">Rob</span>
		</div>
				<div class="comment-meta commentmetadata">
		<a href="comment-page-1/#comment-78102">
		February 9, 2010 at 7:27 am</a>
        <span class="comment-reply-link"><a rel="nofollow" class="comment-reply-login" href="../../blog/wp-login.php@redirect_to=http_253a_252f_252fwww.learncpp.com_252fcpp-tutorial_252f66-c-style-strings_252f">Log in to Reply</a></span>		 
		</div>
		<pre>
char szString[255];
cin.getline(szString, 255);
cout &lt;&lt; &quot;You entered: &quot; &lt;&lt; szString &lt;&lt; endl;
</pre>
<p>Won&#8217;t this example over write the null terminator?</p>
		</div>
</li>
		<li class="comment even thread-even depth-1 clearfix" id="comment-79393">
		<div id="div-comment-79393" class="clearfix comment-container">
		<div class="comment-author vcard">
		<img alt='' src='../../../0.gravatar.com/avatar/8b7cd5dd8a87eca9dc992e9e669bb11b@s=65&d=http_253a_252f_252f0.gravatar.com_252favatar_252fad516503a11cd5ca435acc9bb6523536_253fs_253d65&r=g' class='avatar avatar-65 photo' height='65' width='65' />		<span class="authorname">smitha</span>
		</div>
				<div class="comment-meta commentmetadata">
		<a href="comment-page-1/#comment-79393">
		February 28, 2010 at 10:17 pm</a>
        <span class="comment-reply-link"><a rel="nofollow" class="comment-reply-login" href="../../blog/wp-login.php@redirect_to=http_253a_252f_252fwww.learncpp.com_252fcpp-tutorial_252f66-c-style-strings_252f">Log in to Reply</a></span>		 
		</div>
		<p>This is a question regarding passing strings as parameters. When I pass a string constant as a parameter to a function and if I do a gets on the same variable, should it not overwrite the string? An older version of Turbo C++ does not give an error but DevC++ shows a runtime error during gets()<br />
for example
<pre>
#include &lt;iostream.h&gt;
#include &lt;stdio.h&gt;
#include &lt;string.h&gt;
void Display (char *str)
{
   gets(str);
   puts(str);

}
int main ()
{
	Display(&quot;xyzxyz&quot;);
	system(&quot;pause&quot;);
}
</pre>
<p>assuming that the user enters abcabc, shouldnt str have the value abcabc, instead it runs into memory problems&#8230;though turboc++ works just fine.</p>
		</div>
</li>
		<li class="comment odd alt thread-odd thread-alt depth-1 clearfix" id="comment-86596">
		<div id="div-comment-86596" class="clearfix comment-container">
		<div class="comment-author vcard">
		<img alt='' src='../../../1.gravatar.com/avatar/9f430a5414a5fedf86f8dfe47ab74b7f@s=65&d=http_253a_252f_252f1.gravatar.com_252favatar_252fad516503a11cd5ca435acc9bb6523536_253fs_253d65&r=g' class='avatar avatar-65 photo' height='65' width='65' />		<span class="authorname">DaBlackIce</span>
		</div>
				<div class="comment-meta commentmetadata">
		<a href="comment-page-1/#comment-86596">
		June 15, 2010 at 11:41 pm</a>
        <span class="comment-reply-link"><a rel="nofollow" class="comment-reply-login" href="../../blog/wp-login.php@redirect_to=http_253a_252f_252fwww.learncpp.com_252fcpp-tutorial_252f66-c-style-strings_252f">Log in to Reply</a></span>		 
		</div>
		<p>I&#8217;ve had this problem recently&#8230;</p>
<p>Every time I use a do while loop and I use eg.:
<pre> string strWhateverString;
getline(cin, strWhateverString);</pre>
<p>, the compiler doesn&#8217;t wait for any input and skips to the next statements. What would be the problem? If you already answered this question I&#8217;m sorry&#8230;thank you in advance :)! BTW GREAT TUTORIAL&#8230;IT HAS BEEN A LOT OF HELP!</p>
		</div>
<ul class='children'>
		<li class="comment even depth-2 clearfix" id="comment-87559">
		<div id="div-comment-87559" class="clearfix comment-container">
		<div class="comment-author vcard">
		<img alt='' src='../../../1.gravatar.com/avatar/5f0c1d12bebe6149813857f88e3fe97a@s=65&d=http_253a_252f_252f1.gravatar.com_252favatar_252fad516503a11cd5ca435acc9bb6523536_253fs_253d65&r=g' class='avatar avatar-65 photo' height='65' width='65' />		<span class="authorname"><a href='../../../learncpp.com/default.htm' rel='external nofollow' class='url'>Chad</a></span>
		</div>
				<div class="comment-meta commentmetadata">
		<a href="comment-page-1/#comment-87559">
		July 1, 2010 at 6:07 am</a>
        <span class="comment-reply-link"><a rel="nofollow" class="comment-reply-login" href="../../blog/wp-login.php@redirect_to=http_253a_252f_252fwww.learncpp.com_252fcpp-tutorial_252f66-c-style-strings_252f">Log in to Reply</a></span>		 
		</div>
		<p>Can you post your whole program, please?</p>
		</div>
</li>
</ul>
</li>
		<li class="comment odd alt thread-even depth-1 clearfix" id="comment-88999">
		<div id="div-comment-88999" class="clearfix comment-container">
		<div class="comment-author vcard">
		<img alt='' src='../../../1.gravatar.com/avatar/9f430a5414a5fedf86f8dfe47ab74b7f@s=65&d=http_253a_252f_252f1.gravatar.com_252favatar_252fad516503a11cd5ca435acc9bb6523536_253fs_253d65&r=g' class='avatar avatar-65 photo' height='65' width='65' />		<span class="authorname">DaBlackIce</span>
		</div>
				<div class="comment-meta commentmetadata">
		<a href="comment-page-1/#comment-88999">
		July 23, 2010 at 10:49 pm</a>
        <span class="comment-reply-link"><a rel="nofollow" class="comment-reply-login" href="../../blog/wp-login.php@redirect_to=http_253a_252f_252fwww.learncpp.com_252fcpp-tutorial_252f66-c-style-strings_252f">Log in to Reply</a></span>		 
		</div>
		<p>I kind of found out what was wrong. Apparently it&#8217;s not the do while loop.</p>
<pre>
#include &quot;stdafx.h&quot;
#include &lt;iostream&gt;
#include &lt;string&gt;

using namespace std;

struct nPersonalInfo
{
	string strFullName;
	unsigned short nAge;
	string strBirthday;
	float fHeight;
	unsigned short nWeight;
};

void  PrintInfo(string strFullName, unsigned short nAge, string strBirthday,
	float fHeight, unsigned short nWeight)
{
	cout &lt;&lt; strFullName &lt;&lt; &quot;&#39;s information.&quot;&lt;&lt; endl;
	cout &lt;&lt; endl;

	cout &lt;&lt; &quot;Full Name:t&quot; &lt;&lt; strFullName &lt;&lt; endl;
	cout &lt;&lt; &quot;Age:tt&quot; &lt;&lt; nAge &lt;&lt; endl;
	cout &lt;&lt; &quot;Birthday:t&quot; &lt;&lt; strBirthday &lt;&lt; endl;
	cout &lt;&lt; &quot;Height:tt&quot; &lt;&lt; fHeight &lt;&lt; &quot; meters tall&quot; &lt;&lt; endl;
	cout &lt;&lt; &quot;Weight:tt&quot; &lt;&lt; nWeight &lt;&lt; &quot; lb&quot; &lt;&lt; endl;
	cout &lt;&lt; endl;
}

void AskUserInfo()
{
	cout &lt;&lt; &quot;Input your personal information.&quot; &lt;&lt; endl;
	cout &lt;&lt; endl;

	nPersonalInfo sMember;

	cout &lt;&lt; &quot;What&#39;s your full name? &quot;;
	getline(cin,sMember.strFullName);

	cout &lt;&lt; &quot;How old are you? &quot;;
	cin &gt;&gt; sMember.nAge;

	cout &lt;&lt; &quot;When were you born? (mm/dd/yy)&quot; &lt;&lt; endl;
	cin&gt;&gt; sMember.strBirthday;

	cout &lt;&lt; &quot;What is your height in meters? &quot;;
	cin &gt;&gt; sMember.fHeight;

	cout &lt;&lt; &quot;What is your weight in pounds? &quot;;
	cin &gt;&gt; sMember.nWeight;
	cout &lt;&lt; endl;

	PrintInfo(sMember.strFullName, sMember.nAge, sMember.strBirthday,
		sMember.fHeight, sMember.nWeight);

	cout &lt;&lt; endl;
}

int main ()
{
	cout &lt;&lt; &quot;How many people are in your family? &quot;;
	int nNumberOfFamilyMembers;
	cin &gt;&gt; nNumberOfFamilyMembers;
	cout &lt;&lt; &quot;You have &quot; &lt;&lt; nNumberOfFamilyMembers &lt;&lt; &quot; family members.&quot; &lt;&lt; endl;

	AskUserInfo();
	for (int iii = 0; iii &lt; nNumberOfFamilyMembers; iii++)
		//AskFamilyInfo(); I won&#39;t include this function to make it short...
	return 0;
}
<!--formatted--></pre>
<p>If you run this program after putting in the amount of family members, it skips the question &#8220;What is your full name?&#8221; </p>
<p>But if I change:</p>
<pre>cin &gt;&gt; nNumberOfFamilyMembers; <!--formatted--></pre>
<p> to:
<pre>getline(cin, nNumberOfFamilyMembers);</pre>
<p> and use nNumberOfFamilyMembers as a string instead, everything works fine. But still&#8230;.I wanted to do it this way. And even so, in the loop I have to change
<pre>nNumberOfFamilyMembers</pre>
<p> to
<pre>nNumberOfFamilyMembers.length</pre>
<p> since it would be a string now. </p>
<p>Anything I can do about it?</p>
		</div>
</li>
		<li class="comment even thread-odd thread-alt depth-1 clearfix" id="comment-89000">
		<div id="div-comment-89000" class="clearfix comment-container">
		<div class="comment-author vcard">
		<img alt='' src='../../../1.gravatar.com/avatar/9f430a5414a5fedf86f8dfe47ab74b7f@s=65&d=http_253a_252f_252f1.gravatar.com_252favatar_252fad516503a11cd5ca435acc9bb6523536_253fs_253d65&r=g' class='avatar avatar-65 photo' height='65' width='65' />		<span class="authorname">DaBlackIce</span>
		</div>
				<div class="comment-meta commentmetadata">
		<a href="comment-page-1/#comment-89000">
		July 23, 2010 at 11:02 pm</a>
        <span class="comment-reply-link"><a rel="nofollow" class="comment-reply-login" href="../../blog/wp-login.php@redirect_to=http_253a_252f_252fwww.learncpp.com_252fcpp-tutorial_252f66-c-style-strings_252f">Log in to Reply</a></span>		 
		</div>
		<p>Oh by the way..in the PrintInfo function, beside full name, age, etc. it should be t for tab&#8230;not t only and nNumberOfFamilyMembers.length() in the main function :)</p>
		</div>
</li>
		<li class="comment odd alt thread-even depth-1 clearfix" id="comment-93629">
		<div id="div-comment-93629" class="clearfix comment-container">
		<div class="comment-author vcard">
		<img alt='' src='../../../0.gravatar.com/avatar/461fe2dd8702dca048c9c68be5cdda2d@s=65&d=http_253a_252f_252f0.gravatar.com_252favatar_252fad516503a11cd5ca435acc9bb6523536_253fs_253d65&r=g' class='avatar avatar-65 photo' height='65' width='65' />		<span class="authorname"><a href='../../default.htm' rel='external nofollow' class='url'>subha</a></span>
		</div>
				<div class="comment-meta commentmetadata">
		<a href="comment-page-1/#comment-93629">
		October 12, 2010 at 11:09 pm</a>
        <span class="comment-reply-link"><a rel="nofollow" class="comment-reply-login" href="../../blog/wp-login.php@redirect_to=http_253a_252f_252fwww.learncpp.com_252fcpp-tutorial_252f66-c-style-strings_252f">Log in to Reply</a></span>		 
		</div>
		<p>i want a source code for strrev(),strlwr();</p>
		</div>
</li>
		<li class="comment even thread-odd thread-alt depth-1 clearfix" id="comment-93630">
		<div id="div-comment-93630" class="clearfix comment-container">
		<div class="comment-author vcard">
		<img alt='' src='../../../0.gravatar.com/avatar/461fe2dd8702dca048c9c68be5cdda2d@s=65&d=http_253a_252f_252f0.gravatar.com_252favatar_252fad516503a11cd5ca435acc9bb6523536_253fs_253d65&r=g' class='avatar avatar-65 photo' height='65' width='65' />		<span class="authorname"><a href='../../default.htm' rel='external nofollow' class='url'>subha</a></span>
		</div>
				<div class="comment-meta commentmetadata">
		<a href="comment-page-1/#comment-93630">
		October 12, 2010 at 11:10 pm</a>
        <span class="comment-reply-link"><a rel="nofollow" class="comment-reply-login" href="../../blog/wp-login.php@redirect_to=http_253a_252f_252fwww.learncpp.com_252fcpp-tutorial_252f66-c-style-strings_252f">Log in to Reply</a></span>		 
		</div>
		<pre> i want a source code for strrev(),strlwr(); </pre>
		</div>
</li>
		<li class="comment byuser comment-author-itsacentaur odd alt thread-even depth-1 clearfix" id="comment-95138">
		<div id="div-comment-95138" class="clearfix comment-container">
		<div class="comment-author vcard">
		<img alt='' src='../../../1.gravatar.com/avatar/d36e71ca6f9f856681598d82196c3450@s=65&d=http_253a_252f_252f1.gravatar.com_252favatar_252fad516503a11cd5ca435acc9bb6523536_253fs_253d65&r=g' class='avatar avatar-65 photo' height='65' width='65' />		<span class="authorname">Ogre</span>
		</div>
				<div class="comment-meta commentmetadata">
		<a href="comment-page-1/#comment-95138">
		January 26, 2011 at 6:32 pm</a>
        <span class="comment-reply-link"><a rel="nofollow" class="comment-reply-login" href="../../blog/wp-login.php@redirect_to=http_253a_252f_252fwww.learncpp.com_252fcpp-tutorial_252f66-c-style-strings_252f">Log in to Reply</a></span>		 
		</div>
		<p>When you first use cin.getline() you say that the parameter 255 means it will only read the first 254 characters, to leave space for the null terminator. But if you initialize the array with [255] then it will have room for 255 characters plus the null terminator, right?</p>
<p>Also, when you first use strncpy() you say that the parameter of 49 means that is the most amount of characters it will take (excluding the null terminator), but this is inconsistent with cin.getline(). Is this really how it is?</p>
<p>You may also want to make it clear that we need to include  for some functions.</p>
		</div>
<ul class='children'>
		<li class="comment byuser comment-author-itsacentaur even depth-2 clearfix" id="comment-95139">
		<div id="div-comment-95139" class="clearfix comment-container">
		<div class="comment-author vcard">
		<img alt='' src='../../../1.gravatar.com/avatar/d36e71ca6f9f856681598d82196c3450@s=65&d=http_253a_252f_252f1.gravatar.com_252favatar_252fad516503a11cd5ca435acc9bb6523536_253fs_253d65&r=g' class='avatar avatar-65 photo' height='65' width='65' />		<span class="authorname">Ogre</span>
		</div>
				<div class="comment-meta commentmetadata">
		<a href="comment-page-1/#comment-95139">
		January 26, 2011 at 6:37 pm</a>
        <span class="comment-reply-link"><a rel="nofollow" class="comment-reply-login" href="../../blog/wp-login.php@redirect_to=http_253a_252f_252fwww.learncpp.com_252fcpp-tutorial_252f66-c-style-strings_252f">Log in to Reply</a></span>		 
		</div>
		<p>Ah, I just looked it up on another site, that is how it is. I just found that odd when I first saw it.</p>
		</div>
</li>
</ul>
</li>
		<li class="comment byuser comment-author-newuser odd alt thread-odd thread-alt depth-1 clearfix" id="comment-95321">
		<div id="div-comment-95321" class="clearfix comment-container">
		<div class="comment-author vcard">
		<img alt='' src='../../../1.gravatar.com/avatar/976fc6c0b77af195f4427f5edeac36f5@s=65&d=http_253a_252f_252f1.gravatar.com_252favatar_252fad516503a11cd5ca435acc9bb6523536_253fs_253d65&r=g' class='avatar avatar-65 photo' height='65' width='65' />		<span class="authorname">newUser</span>
		</div>
				<div class="comment-meta commentmetadata">
		<a href="comment-page-1/#comment-95321">
		April 12, 2011 at 6:36 pm</a>
        <span class="comment-reply-link"><a rel="nofollow" class="comment-reply-login" href="../../blog/wp-login.php@redirect_to=http_253a_252f_252fwww.learncpp.com_252fcpp-tutorial_252f66-c-style-strings_252f">Log in to Reply</a></span>		 
		</div>
		<p><code>/* Section: header */<br />
#include &lt;iostream&gt;<br />
#include &lt;fstream&gt;<br />
#include &lt;cstdlib&gt;<br />
#include &lt;string&gt;</p>
<p>/* Section: namespace */<br />
using namespace std;</p>
<p>/* Section: constant */<br />
const string NEWLINE = &quot;\n&quot; // similar to: #define NEWLINE &#039;\n&#039;</p>
<p>/* Section: prototype */<br />
void nfound( const string &amp;&quot;v_file&quot; );</p>
<p>int main( int argc, char *argv[] ) {<br />
  string the_file = &quot;test_file.txt&quot;;<br />
  if ( &quot;the_file&quot; ) {<br />
    cout &lt;&lt; &quot;File found!&quot;;<br />
  } else {<br />
    cout &lt;&lt; &quot;File not found!&quot;;<br />
    nfound( &quot;the_file&quot; );<br />
  }</p>
<p>  cin.get();<br />
}</p>
<p>void nfound( const string &amp;&quot;v_file&quot; ) {<br />
  ofstream a_file ( &quot;v_file&quot; );<br />
  a_file &lt;&lt; &quot;This text will go inside!NEWLINE&quot;;<br />
  a_file.close();<br />
}<br />
</code></p>
<p>This is my simple program that I want to check if a file exists, if not make it with some writting in it. The problem is I get these errors:<br />
<cite><br />
14: error: expected &#8216;,&#8217; or &#8216;;&#8217; before &#8216;void&#8217;<br />
In function &#8216;int main(int, char**)&#8217;:<br />
22: error: &#8216;nfound&#8217; was not declared in this scope<br />
At global scope:<br />
28: error: expected &#8216;,&#8217; or &#8216;&#8230;&#8217; before string constant<br />
</cite></p>
<p>I&#8217;ve looked over the code and it seems right. None of the tutorials I&#8217;ve read (best by far! really love the code section you have!) deal with a string as a parameter. Last tutorial didn&#8217;t mention the string header (#include ), but including this still didn&#8217;t help.</p>
		</div>
<ul class='children'>
		<li class="comment byuser comment-author-newuser even depth-2 clearfix" id="comment-95335">
		<div id="div-comment-95335" class="clearfix comment-container">
		<div class="comment-author vcard">
		<img alt='' src='../../../1.gravatar.com/avatar/976fc6c0b77af195f4427f5edeac36f5@s=65&d=http_253a_252f_252f1.gravatar.com_252favatar_252fad516503a11cd5ca435acc9bb6523536_253fs_253d65&r=g' class='avatar avatar-65 photo' height='65' width='65' />		<span class="authorname">newUser</span>
		</div>
				<div class="comment-meta commentmetadata">
		<a href="comment-page-1/#comment-95335">
		April 15, 2011 at 5:20 pm</a>
        <span class="comment-reply-link"><a rel="nofollow" class="comment-reply-login" href="../../blog/wp-login.php@redirect_to=http_253a_252f_252fwww.learncpp.com_252fcpp-tutorial_252f66-c-style-strings_252f">Log in to Reply</a></span>		 
		</div>
		<p>I&#8217;ve made some minor adjustions, namely how I did namespaces (used the suggestion from the section) and I corrected the function parameter constant.</p>
<p><code>/* Section: header */<br />
#include &lt;iostream&gt;<br />
#include &lt;fstream&gt;<br />
#include &lt;cstdlib&gt;<br />
#include &lt;string&gt;</p>
<p>/* Section: constant */<br />
const std::string NEWLINE = &quot;\n&quot;</p>
<p>/* Section: prototype */<br />
void nfound( const std::string &amp;v_file );</p>
<p>int main( int argc, char *argv[] ) {<br />
  using namespace std;<br />
  string the_file = &quot;test_file.txt&quot;;<br />
  if ( &quot;the_file&quot; ) {<br />
    cout &lt;&lt; &quot;File found!&quot;;<br />
  } else {<br />
    cout &lt;&lt; &quot;File not found!&quot;;<br />
    nfound( &quot;the_file&quot; );<br />
  }</p>
<p>  cin.get();<br />
}</p>
<p>void nfound( const std::string &amp;v_file ) {<br />
  using namespace std;<br />
  ofstream a_file ( &quot;v_file&quot; );<br />
  a_file &lt;&lt; &quot;This text will go inside!NEWLINE&quot;;<br />
  a_file.close();<br />
}<br />
</code></p>
		</div>
</li>
</ul>
</li>
		<li class="comment byuser comment-author-iodream odd alt thread-even depth-1 clearfix" id="comment-95815">
		<div id="div-comment-95815" class="clearfix comment-container">
		<div class="comment-author vcard">
		<img alt='' src='../../../1.gravatar.com/avatar/1c3080de1aa3c513c6cac2d406a28c11@s=65&d=http_253a_252f_252f1.gravatar.com_252favatar_252fad516503a11cd5ca435acc9bb6523536_253fs_253d65&r=g' class='avatar avatar-65 photo' height='65' width='65' />		<span class="authorname">Iodream</span>
		</div>
				<div class="comment-meta commentmetadata">
		<a href="comment-page-1/#comment-95815">
		August 3, 2011 at 9:07 am</a>
        <span class="comment-reply-link"><a rel="nofollow" class="comment-reply-login" href="../../blog/wp-login.php@redirect_to=http_253a_252f_252fwww.learncpp.com_252fcpp-tutorial_252f66-c-style-strings_252f">Log in to Reply</a></span>		 
		</div>
		<p>Hello. What if i want to access each symbol of a string array?<br />
Would it look something like this: </p>
<pre>

string  szStringArray[3];

for (int iii=0;iii&lt;3;iii++)
 for (int jjj=0;jjj&lt;szStringArrayAdd[iii].length();jjj++)
   szStringArrayAdd[jjj][iii]= // do something. 
</pre>
<p> ?</p>
		</div>
<ul class='children'>
		<li class="comment byuser comment-author-zingmars even depth-2 clearfix" id="comment-95903">
		<div id="div-comment-95903" class="clearfix comment-container">
		<div class="comment-author vcard">
		<img alt='' src='../../../0.gravatar.com/avatar/21b2deaaa0bcf172aa88051b6cf7ba1f@s=65&d=http_253a_252f_252f0.gravatar.com_252favatar_252fad516503a11cd5ca435acc9bb6523536_253fs_253d65&r=g' class='avatar avatar-65 photo' height='65' width='65' />		<span class="authorname"><a href='../../../127.0.0.1/default.htm' rel='external nofollow' class='url'>zingmars</a></span>
		</div>
				<div class="comment-meta commentmetadata">
		<a href="comment-page-1/#comment-95903">
		August 20, 2011 at 7:57 am</a>
        <span class="comment-reply-link"><a rel="nofollow" class="comment-reply-login" href="../../blog/wp-login.php@redirect_to=http_253a_252f_252fwww.learncpp.com_252fcpp-tutorial_252f66-c-style-strings_252f">Log in to Reply</a></span>		 
		</div>
		<p>I&#8217;m not sure what you tried to do there, but the code looks really wrong.<br />
wouldn&#8217;t a single for loop suffice?</p>
		</div>
<ul class='children'>
		<li class="comment byuser comment-author-iodream odd alt depth-3 clearfix" id="comment-95915">
		<div id="div-comment-95915" class="clearfix comment-container">
		<div class="comment-author vcard">
		<img alt='' src='../../../1.gravatar.com/avatar/1c3080de1aa3c513c6cac2d406a28c11@s=65&d=http_253a_252f_252f1.gravatar.com_252favatar_252fad516503a11cd5ca435acc9bb6523536_253fs_253d65&r=g' class='avatar avatar-65 photo' height='65' width='65' />		<span class="authorname">Iodream</span>
		</div>
				<div class="comment-meta commentmetadata">
		<a href="comment-page-1/#comment-95915">
		August 22, 2011 at 3:42 am</a>
        <span class="comment-reply-link"><a rel="nofollow" class="comment-reply-login" href="../../blog/wp-login.php@redirect_to=http_253a_252f_252fwww.learncpp.com_252fcpp-tutorial_252f66-c-style-strings_252f">Log in to Reply</a></span>		 
		</div>
		<p>Well, i initialize an array of 3 strings.<br />
Then the first loop goes through the indexes of the array and<br />
the 2nd loop through each character of the currently selected by the first loop string.<br />
Yes, i made a mistake when i initialize the array there should be a different name &#8220;szStringArrayAdd[3]&#8221;<br />
Im just trying to write a program and im getting errors (errors directly in Visual Studio&#8217;s code window)<br />
I am asking if what ive written above is legal.</p>
		</div>
</li>
		<li class="comment byuser comment-author-iodream even depth-3 clearfix" id="comment-95916">
		<div id="div-comment-95916" class="clearfix comment-container">
		<div class="comment-author vcard">
		<img alt='' src='../../../1.gravatar.com/avatar/1c3080de1aa3c513c6cac2d406a28c11@s=65&d=http_253a_252f_252f1.gravatar.com_252favatar_252fad516503a11cd5ca435acc9bb6523536_253fs_253d65&r=g' class='avatar avatar-65 photo' height='65' width='65' />		<span class="authorname">Iodream</span>
		</div>
				<div class="comment-meta commentmetadata">
		<a href="comment-page-1/#comment-95916">
		August 22, 2011 at 3:43 am</a>
        <span class="comment-reply-link"><a rel="nofollow" class="comment-reply-login" href="../../blog/wp-login.php@redirect_to=http_253a_252f_252fwww.learncpp.com_252fcpp-tutorial_252f66-c-style-strings_252f">Log in to Reply</a></span>		 
		</div>
		<p>Well, i initialize an array of 3 strings.<br />
Then the first loop goes through the indexes of the array and<br />
the 2nd loop through each character of the currently selected by the first loop string.<br />
Yes, i made a mistake when i initialize the array there should be a different name &#8220;szStringArrayAdd[3]&#8221;<br />
Im just trying to write a program and im getting errors (errors directly in Visual Studio&#8217;s code window)</p>
<p>I am asking if what ive written above is legal.</p>
		</div>
<ul class='children'>
		<li class="comment byuser comment-author-zingmars odd alt depth-4 clearfix" id="comment-96116">
		<div id="div-comment-96116" class="clearfix comment-container">
		<div class="comment-author vcard">
		<img alt='' src='../../../0.gravatar.com/avatar/21b2deaaa0bcf172aa88051b6cf7ba1f@s=65&d=http_253a_252f_252f0.gravatar.com_252favatar_252fad516503a11cd5ca435acc9bb6523536_253fs_253d65&r=g' class='avatar avatar-65 photo' height='65' width='65' />		<span class="authorname"><a href='../../../127.0.0.1/default.htm' rel='external nofollow' class='url'>zingmars</a></span>
		</div>
				<div class="comment-meta commentmetadata">
		<a href="comment-page-1/#comment-96116">
		October 8, 2011 at 4:55 am</a>
        <span class="comment-reply-link"><a rel="nofollow" class="comment-reply-login" href="../../blog/wp-login.php@redirect_to=http_253a_252f_252fwww.learncpp.com_252fcpp-tutorial_252f66-c-style-strings_252f">Log in to Reply</a></span>		 
		</div>
		<p>It&#8217;s legal, but confusing at first and you might need to overload operators if you want to print the strings.</p>
		</div>
</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
	
	</ul>
	<!-- / Comment List -->

	



	
	<p>You must be <a href="../../blog/wp-login.php@redirect_to=http_253a_252f_252fwww.learncpp.com_252fcpp-tutorial_252f66-c-style-strings_252f">logged in</a> to post a comment.</p>

		

<div class="clearfix navigation-bottom">
		<div class="older">&laquo; <a href="../65-multidimensional-arrays/default.htm" rel="prev">6.5 &#8212; Multidimensional Arrays</a> &nbsp;</div><div class="newer">&nbsp; <a href="../67-introduction-to-pointers/default.htm" rel="next">6.7 &#8212; Introduction to pointers</a> &raquo;</div></div>		
			



</td>
<!-- / Main Column -->


<!-- Right Sidebar -->
<td id="right">

	<div id="text-1" class="widget widget_text">			<div class="textwidget"><script type="text/javascript"><!--
google_ad_client = "pub-0588844875925051";
/* Wide Skyscraper Right Bar */
google_ad_slot = "0955932809";
google_ad_width = 160;
google_ad_height = 600;
//-->
</script>
<acript type="text/javascript"
src="../../../pagead2.googlesyndication.com/pagead/show_ads.js">
</script></div>
		</div><div id="archives-2" class="widget widget_archive"><div class="widget-title"><h3>Archives</h3></div>		<ul>
			<li><a href='../../2011/11/default.htm' title='November 2011'>November 2011</a></li>
	<li><a href='../../2011/10/default.htm' title='October 2011'>October 2011</a></li>
	<li><a href='../../2011/09/default.htm' title='September 2011'>September 2011</a></li>
	<li><a href='../../2010/10/default.htm' title='October 2010'>October 2010</a></li>
	<li><a href='../../2010/07/default.htm' title='July 2010'>July 2010</a></li>
	<li><a href='../../2009/10/default.htm' title='October 2009'>October 2009</a></li>
	<li><a href='../../2009/09/default.htm' title='September 2009'>September 2009</a></li>
	<li><a href='../../2009/03/default.htm' title='March 2009'>March 2009</a></li>
	<li><a href='../../2008/12/default.htm' title='December 2008'>December 2008</a></li>
	<li><a href='../../2008/10/default.htm' title='October 2008'>October 2008</a></li>
	<li><a href='../../2008/09/default.htm' title='September 2008'>September 2008</a></li>
	<li><a href='../../2008/08/default.htm' title='August 2008'>August 2008</a></li>
	<li><a href='../../2008/06/default.htm' title='June 2008'>June 2008</a></li>
	<li><a href='../../2008/05/default.htm' title='May 2008'>May 2008</a></li>
	<li><a href='../../2008/04/default.htm' title='April 2008'>April 2008</a></li>
	<li><a href='../../2008/03/default.htm' title='March 2008'>March 2008</a></li>
	<li><a href='../../2008/02/default.htm' title='February 2008'>February 2008</a></li>
	<li><a href='../../2008/01/default.htm' title='January 2008'>January 2008</a></li>
	<li><a href='../../2007/12/default.htm' title='December 2007'>December 2007</a></li>
	<li><a href='../../2007/11/default.htm' title='November 2007'>November 2007</a></li>
	<li><a href='../../2007/10/default.htm' title='October 2007'>October 2007</a></li>
	<li><a href='../../2007/09/default.htm' title='September 2007'>September 2007</a></li>
	<li><a href='../../2007/08/default.htm' title='August 2007'>August 2007</a></li>
	<li><a href='../../2007/07/default.htm' title='July 2007'>July 2007</a></li>
	<li><a href='../../2007/06/default.htm' title='June 2007'>June 2007</a></li>
	<li><a href='../../2007/05/default.htm' title='May 2007'>May 2007</a></li>
		</ul>
</div>
</td>
<!-- / Right Sidebar -->

</tr>
<!-- / Main Body -->
<tr>

<!-- Footer -->
<td id="footer" colspan="3">

    <p>
    Copyright &copy; 2011 <a href="../../default.htm">Learn C++</a> - All Rights Reserved<br />Powered by <a href="../../../wordpress.org/default.htm">WordPress</a> &amp; the <a href="../../../wordpress.bytesforall.com/default.htm" title="Customizable WordPress themes">Atahualpa Theme</a> by <a href="../../../www.bytesforall.com/default.htm" title="BFA Webdesign">BytesForAll</a>. Discuss on our <a href="../../../forum.bytesforall.com/default.htm" title="Atahualpa &amp; WordPress">WP Forum</a>    </p>
    
    
    <script type='text/javascript' src='../../blog/wp-content/plugins/syntaxhighlighter/syntaxhighlighter3/scripts/shcore.js@ver=3.0.83c'></script>
<script type='text/javascript' src='../../blog/wp-content/plugins/syntaxhighlighter/syntaxhighlighter3/scripts/shbrushcpp.js@ver=3.0.83c'></script>
<script type='text/javascript'>
	(function(){
		var corecss = document.createElement('link');
		var themecss = document.createElement('link');
		var corecssurl = "../../blog/wp-content/plugins/syntaxhighlighter/syntaxhighlighter3/styles/shcore.css@ver=3.0.83c.css";
		if ( corecss.setAttribute ) {
				corecss.setAttribute( "rel", "stylesheet" );
				corecss.setAttribute( "type", "text/css" );
				corecss.setAttribute( "href", corecssurl );
		} else {
				corecss.rel = "stylesheet";
				corecss.href = corecssurl;
		}
		document.getElementsByTagName("head")[0].insertBefore( corecss, document.getElementById("syntaxhighlighteranchor") );
		var themecssurl = "../../blog/wp-content/plugins/syntaxhighlighter/syntaxhighlighter3/styles/shthemedefault.css@ver=3.0.83c.css";
		if ( themecss.setAttribute ) {
				themecss.setAttribute( "rel", "stylesheet" );
				themecss.setAttribute( "type", "text/css" );
				themecss.setAttribute( "href", themecssurl );
		} else {
				themecss.rel = "stylesheet";
				themecss.href = themecssurl;
		}
		//document.getElementById("syntaxhighlighteranchor").appendChild(themecss);
		document.getElementsByTagName("head")[0].insertBefore( themecss, document.getElementById("syntaxhighlighteranchor") );
	})();
	SyntaxHighlighter.config.strings.expandSource = '+ expand source';
	SyntaxHighlighter.config.strings.help = '?';
	SyntaxHighlighter.config.strings.alert = 'SyntaxHighlighter\n\n';
	SyntaxHighlighter.config.strings.noBrush = 'Can\'t find brush for: ';
	SyntaxHighlighter.config.strings.brushNotHtmlScript = 'Brush wasn\'t configured for html-script option: ';
	SyntaxHighlighter.defaults['pad-line-numbers'] = false;
	SyntaxHighlighter.defaults['toolbar'] = false;
	SyntaxHighlighter.all();
</script>
<!--stats_footer_test--><script src="../../../stats.wordpress.com/e-201148.js" type="text/javascript"></script>
<script type="text/javascript">
st_go({blog:'3928254',v:'ext',post:'86'});
var load_cmc = function(){linktracker_init(3928254,86,2);};
if ( typeof addLoadEvent != 'undefined' ) addLoadEvent(load_cmc);
else load_cmc();
</script>

</td>
<!-- / Footer -->

</tr>
</table><!-- / layout -->
</div><!-- / container -->
</div><!-- / wrapper -->
</body>
</html>
<!-- Dynamic page generated in 0.636 seconds. -->
<!-- Cached page generated by WP-Super-Cache on 2011-12-02 06:52:25 -->
<!-- Compression = gzip -->