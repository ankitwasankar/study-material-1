<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd"><meta http-equiv="Content-Type" content="text/html; charset=utf-8"><!-- saved from url=(0080)http://www.learncpp.com/cpp-tutorial/93-overloading-the-io-operators/default.htm -->

<html xmlns="http://www.w3.org/1999/xhtml" dir="ltr" lang="en-US">
<head>
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8" />
<meta http-equiv="X-UA-Compatible" content="IE=EmulateIE7" />
<title>9.3 &#8212; Overloading the I/O operators &laquo; Learn C++</title>
<link rel="shortcut icon" href="../../blog/wp-content/themes/atahualpa353/images/favicon/learncpp.ico" /><link rel="canonical" href="default.htm" /><link rel="alternate" type="application/rss+xml" title="Learn C++ RSS Feed" href="../../feed/default.htm" />
<link rel="alternate" type="application/atom+xml" title="Learn C++ Atom Feed" href="../../feed/atom/default.htm" />
<link rel="pingback" href="http://www.learncpp.com/blog/xmlrpc.php" />
<link rel="alternate" type="application/rss+xml" title="Learn C++ &raquo; 9.3 &#8212; Overloading the I/O operators Comments Feed" href="feed/default.htm" />
<script type='text/javascript' src='../../blog/wp-includes/js/l10n.js@ver=20101110'></script>
<script type='text/javascript' src='../../blog/wp-includes/js/jquery/jquery.js@ver=1.6.1'></script>
<script type='text/javascript' src='../../blog/wp-includes/js/comment-reply.js@ver=20090102'></script>
<script type='text/javascript' src='../../blog/wp-content/plugins/google-analyticator/external-tracking.min.js@ver=6.2'></script>
<link rel="EditURI" type="application/rsd+xml" title="RSD" href="http://www.learncpp.com/blog/xmlrpc.php?rsd" />
<link rel="wlwmanifest" type="application/wlwmanifest+xml" href="../../blog/wp-includes/wlwmanifest.xml" /> 
<link rel='index' title='Learn C++' href='../../default.htm' />
<link rel='start' title='Welcome to LearnCpp.com!' href='../../site-news/this-is-a-news-test-post/default.htm' />
<link rel='prev' title='WordPress Tiga theme 2.2 / 2.3 upgrade' href='../../wordpress/wordpress-tiga-22-23-upgrade/default.htm' />
<link rel='next' title='9.4 &#8212; Overloading the comparison operators' href='../94-overloading-the-comparison-operators/default.htm' />
<link rel='canonical' href='default.htm' />
<link rel='shortlink' href='../../../wp.me/pgtuw-2f' />
<meta name="ROBOTS" content="INDEX" />

<!-- Powered by AdSense-Deluxe WordPress Plugin v0.8 - http://www.acmetech.com/blog/adsense-deluxe/ -->
<!-- wpSolution Code -->
        <script type="text/javascript">
            function wpSolutionToggle(solution, link, showtext, hidetext) {
                if (solution.style.display != 'none') {
                    solution.style.display = 'none';
                    link.innerHTML = showtext;
                    link.className = 'solution_link_show';
                } else {
                    solution.style.display = 'block';
                    link.innerHTML = hidetext;
                    link.className = 'solution_link_hide';
                }
            }
          </script>
<style type="text/css">body{text-align:center;margin:0;padding:0;font-family:verdana,arial,sans-serif;font-size:13px;line-height:1.4;color:#000000;background:#ddd;padding-top:20px;padding-bottom:20px}a:link,a:visited,a:active{color:#365DA0;font-weight:bold;text-decoration:none;}a:hover{color:#365DA0;font-weight:bold;text-decoration:underline}ul,ol,dl,p,h1,h2,h3,h4,h5,h6{margin-top:10px;margin-bottom:10px;padding-top:0;padding-bottom:0;}ul ul,ul ol,ol ul,ol ol{margin-top:0;margin-bottom:0}code,pre{font-family:"Courier New",Courier,monospace;font-size:1em}pre{overflow:auto;word-wrap:normal;padding-bottom:1.5em;overflow-y:hidden;width:99%}abbr[title],acronym[title]{border-bottom:1px dotted}hr{display:block;height:2px;border:none;margin:0.5em auto;color:#cccccc;background-color:#cccccc}table{font-size:1em;}div.post,ul.commentlist li,ol.commentlist li{word-wrap:break-word;}pre,.wp_syntax{word-wrap:normal;}div#wrapper{text-align:center;margin-left:auto;margin-right:auto;display:block;width:98%}* html div#wrapper{<!--width:expression"98%");-->}div#container{padding:20px;background:#fff;box-shadow:0 0 15px #333;-moz-box-shadow:0 0 15px #333;padding-left:20px;padding-right:20px;width:auto;margin-left:auto;margin-right:auto;text-align:left;display:block}table#layout{font-size:100%;width:100%;table-layout:fixed}.colone{width:200px}.colone-inner{width:200px}.coltwo{width:100% }.colthree-inner{width:200px}.colthree{width:200px}td#header{width:auto;padding:0}table#logoarea,table#logoarea tr,table#logoarea td{margin:0;padding:0;background:none;border:0}table#logoarea{width:100%;border-spacing:0px}img.logo{display:block;margin:0 10px 0 0}td.logoarea-logo{width:1%}h1.blogtitle,h2.blogtitle{ display:block;margin:0;padding:0;letter-spacing:-1px;line-height:1.0em;font-size:200%;text-transform:uppercase;font-smooth:always}h1.blogtitle a:link,h1.blogtitle a:visited,h1.blogtitle a:active,h2.blogtitle a:link,h2.blogtitle a:visited,h2.blogtitle a:active{ text-decoration:none;color:#000000;font-weight:normal;font-smooth:always}h1.blogtitle a:hover,h2.blogtitle a:hover{ text-decoration:none;color:#AC161B;font-weight:normal}p.tagline{margin:0;padding:0;font-size:1.2em;font-weight:normal;color:#444}td.feed-icons{white-space:nowrap;}div.rss-box{height:1%;display:block;padding:10px 0 10px 10px;margin:0;width:280px}a.comments-icon{height:22px;line-height:22px;margin:0 5px 0 5px;padding-left:22px;display:block;text-decoration:none;float:right;white-space:nowrap}a.comments-icon:link,a.commentss-icon:active,a.comments-icon:visited{background:transparent url(../../blog/wp-content/themes/atahualpa353/images/comment-gray.png) no-repeat scroll center left}a.comments-icon:hover{background:transparent url(../../blog/wp-content/themes/atahualpa353/images/comment.png) no-repeat scroll center left}a.posts-icon{height:22px;line-height:22px;margin:0 5px 0 0;padding-left:20px;display:block;text-decoration:none;float:right;white-space:nowrap}a.posts-icon:link,a.posts-icon:active,a.posts-icon:visited{background:transparent url(../../blog/wp-content/themes/atahualpa353/images/rss-gray.png) no-repeat scroll center left}a.posts-icon:hover{background:transparent url(../../blog/wp-content/themes/atahualpa353/images/rss.png) no-repeat scroll center left}a.email-icon{height:22px;line-height:22px;margin:0 5px 0 5px;padding-left:24px;display:block;text-decoration:none;float:right;white-space:nowrap}a.email-icon:link,a.email-icon:active,a.email-icon:visited{background:transparent url(../../blog/wp-content/themes/atahualpa353/images/email-gray.png) no-repeat scroll center left}a.email-icon:hover{background:transparent url(../../blog/wp-content/themes/atahualpa353/images/email.png) no-repeat scroll center left}td.search-box{height:1%}div.searchbox{height:35px;border-bottom:0;width:200px;margin:0;padding:0}div.searchbox-form{margin:5px 10px 5px 10px}div.horbar1,div.horbar2{font-size:1px;clear:both;display:block;position:relative;padding:0;margin:0;width:100%;}div.horbar1{height:0px;background:#ffffff;border-top:dashed 1px #cccccc}div.horbar2{height:0px;background:#ffffff;border-bottom:dashed 1px #cccccc}div.header-image-container{position:relative;margin:0;padding:0;height:150px;}div.clickable{position:absolute;top:0;left:0;z-index:3;margin:0;padding:0;width:100%;height:150px;}a.divclick:link,a.divclick:visited,a.divclick:active,a.divclick:hover{width:100%;height:100%;display:block;text-decoration:none}td#left{vertical-align:top;padding-right:20px}td#left-inner{vertical-align:top;padding-right:10px}td#right{vertical-align:top;padding-left:20px}td#right-inner{vertical-align:top;padding-left:10px}td#middle{vertical-align:top;width:100%;padding:10px 15px}td#footer{width:auto;background-color:#f7f7f7;border-top:solid 4px #eee;padding:10px;text-align:center;color:#888;font-size:11px}td#footer a:link,td#footer a:visited,td#footer a:active{text-decoration:none;color:#777777;font-weight:normal}td#footer a:hover{text-decoration:none;color:#777777;font-weight:normal}div.widget{display:block;width:auto;font-size:12px;margin:0 0 10px 0;padding:10px;border:solid 4px #eee}div.widget-title{display:block;width:auto}div.widget-title h3,td#left h3.tw-widgettitle,td#right h3.tw-widgettitle,td#left ul.tw-nav-list,td#right ul.tw-nav-list{padding:0;margin:0;font-size:0.9em;text-align:center;font-weight:normal;text-transform:uppercase;letter-spacing:1px;color:#333;border-bottom:solid 1px #eee;padding-bottom:10px;margin-bottom:10px}div.widget ul,div.textwidget{display:block;width:auto}div.widget select{width:98%;margin-top:5px;}div.widget ul{list-style-type:none;margin:0;padding:0;width:auto}div.widget ul li{display:block;margin:2px 0 2px 0px;padding:0 0 0 0px;border-left:solid 0px #CCCCCC}div.widget ul li:hover,div.widget ul li.sfhover{display:block;width:auto;border-left:solid 0px #000000;}div.widget ul li ul li{margin:2px 0 2px 5px;padding:0 0 0 0px;border-left:solid 0px #CCCCCC;}div.widget ul li ul li:hover,div.widget ul li ul li.sfhover{border-left:solid 0px #000000;}div.widget ul li ul li ul li{margin:2px 0 2px 5px;padding:0 0 0 0px;border-left:solid 0px #CCCCCC;}div.widget ul li ul li ul li:hover,div.widget ul li ul li ul li.sfhover{border-left:solid 0px #000000;}div.widget td a:link,div.widget td a:visited,div.widget td a:active,div.widget ul li a:link,div.widget ul li a:visited,div.widget ul li a:active{text-decoration:none;font-weight:normal;color:#365DA0;font-weight:normal;}div.widget ul li ul li a:link,div.widget ul li ul li a:visited,div.widget ul li ul li a:active{color:#365DA0;font-weight:normal;}div.widget ul li ul li ul li a:link,div.widget ul li ul li ul li a:visited,div.widget ul li ul li ul li a:active{color:#365DA0;font-weight:normal;}div.widget ul li a:hover{color:#365DA0;}div.widget ul li ul li a:hover{color:#365DA0;}div.widget ul li ul li ul li a:hover{color:#365DA0;}div.widget ul li a:link,div.widget ul li a:visited,div.widget ul li a:active,div.widget ul li a:hover{display:inline}* html div.widget ul li a:link,* html div.widget ul li a:visited,* html div.widget ul li a:active,* html div.widget ul li a:hover{height:1%; } div.widget_pages ul li,div.widget_categories ul li{border-left:0 !important;padding:0 !important}div.widget_pages ul li a:link,div.widget_pages ul li a:visited,div.widget_pages ul li a:active,div.widget_categories ul li a:link,div.widget_categories ul li a:visited,div.widget_categories ul li a:active{padding:0 0 0 0px;border-left:solid 0px #CCCCCC}div.widget_pages ul li a:hover,div.widget_categories ul li a:hover{border-left:solid 0px #000000;}div.widget_pages ul li ul li a:link,div.widget_pages ul li ul li a:visited,div.widget_pages ul li ul li a:active,div.widget_categories ul li ul li a:link,div.widget_categories ul li ul li a:visited,div.widget_categories ul li ul li a:active{padding:0 0 0 0px;border-left:solid 0px #CCCCCC}div.widget_pages ul li ul li a:hover,div.widget_categories ul li ul li a:hover{border-left:solid 0px #000000;}div.widget_pages ul li ul li ul li a:link,div.widget_pages ul li ul li ul li a:visited,div.widget_pages ul li ul li ul li a:active,div.widget_categories ul li ul li ul li a:link,div.widget_categories ul li ul li ul li a:visited,div.widget_categories ul li ul li ul li a:active{padding:0 0 0 0px;border-left:solid 0px #CCCCCC}div.widget_pages ul li ul li ul li a:hover,div.widget_categories ul li ul li ul li a:hover{border-left:solid 0px #000000;}div.widget_pages ul li a:link,div.widget_pages ul li a:active,div.widget_pages ul li a:visited,div.widget_pages ul li a:hover{display:block !important}div.widget_categories ul li a:link,div.widget_categories ul li a:active,div.widget_categories ul li a:visited,div.widget_categories ul li a:hover{display:inline !important}table.subscribe{width:100%}table.subscribe td.email-text{padding:0 0 5px 0;vertical-align:top}table.subscribe td.email-field{padding:0;width:100%}table.subscribe td.email-button{padding:0 0 0 5px}table.subscribe td.post-text{padding:7px 0 0 0;vertical-align:top}table.subscribe td.comment-text{padding:7px 0 0 0;vertical-align:top}div.post,div.page{display:block;margin:0 0 30px 0;border-top:solid 4px #eee;padding-top:20px}div.sticky{background:#eee url('../../blog/wp-content/themes/atahualpa353/images/sticky.gif') 99% 5% no-repeat;border:dashed 1px #cccccc;padding:10px}div.post-kicker{margin:0 0 5px 0}div.post-kicker a:link,div.post-kicker a:visited,div.post-kicker a:active{color:#999;text-decoration:none;text-transform:uppercase;letter-spacing:1px}div.post-kicker a:hover{color:#cc0000}div.post-headline{}div.post-headline h1,div.post-headline h2{ margin:0; padding:0;padding:0;margin:0;font-size:1.7em}div.post-headline h2 a:link,div.post-headline h2 a:visited,div.post-headline h2 a:active,div.post-headline h1 a:link,div.post-headline h1 a:visited,div.post-headline h1 a:active{}div.post-headline h2 a:hover,div.post-headline h1 a:hover{}div.post-byline{margin:5px 0 10px 0;color:#999;text-transform:uppercase;letter-spacing:1px;font-size:11px}div.post-byline a:link,div.post-byline a:visited,div.post-byline a:active{}div.post-byline a:hover{}div.post-bodycopy{}div.post-bodycopy p{margin:1em 0;padding:0;display:block}div.post-pagination{}div.post-footer{clear:both;display:block;color:#999;text-transform:uppercase;letter-spacing:1px;font-size:11px}div.post-footer a:link,div.post-footer a:visited,div.post-footer a:active{color:#999;font-weight:normal;text-decoration:none}div.post-footer a:hover{color:#333;font-weight:normal;text-decoration:underline}div.post-kicker img,div.post-byline img,div.post-footer img{border:0;padding:0;margin:0 0 -1px 0;background:none}span.post-ratings{display:inline-block;width:auto;white-space:nowrap}div.navigation-top{border-top:solid 4px #eee;padding:8px 0}div.navigation-middle{margin:10px 0 20px 0;padding:8px 0;border-top:solid 4px #eee;border-bottom:solid 4px #eee}div.navigation-bottom{margin:20px 0 0 0;padding:10px 0 0 0;border-top:solid 4px #eee}div.navigation-comments-above{margin:0 0 10px 0;padding:5px 0 5px 0}div.navigation-comments-below{margin:0 0 10px 0;padding:5px 0 5px 0}div.older{float:left;width:48%;text-align:left;margin:0;padding:0}div.newer{float:right;width:48%;text-align:right;margin:0;padding:0;}div.older-home{float:left;width:44%;text-align:left;margin:0;padding:0}div.newer-home{float:right;width:44%;text-align:right;margin:0;padding:0;}div.home{float:left;width:8%;text-align:center;margin:0;padding:0}form,.feedburner-email-form{margin:0;padding:0;}fieldset{border:1px solid #cccccc;width:auto;padding:0.35em 0.625em 0.75em;display:block;}legend{color:#000000;background:#f4f4f4;border:1px solid #cccccc;padding:2px 6px;margin-bottom:15px;}form p{margin:5px 0 0 0;padding:0;}div.xhtml-tags p{margin:0}label{margin-right:0.5em;font-family:arial;cursor:pointer;}input.text,input.textbox,input.password,input.file,input.TextField,textarea{padding:3px;color:#000000;border-top:solid 1px #333333;border-left:solid 1px #333333;border-right:solid 1px #999999;border-bottom:solid 1px #cccccc;background:url(../../blog/wp-content/themes/atahualpa353/images/inputbackgr.gif) top left no-repeat}textarea{width:96%;}input.inputblur{color:#777777;width:95%}input.inputfocus{color:#000000;width:95%}input.highlight,textarea.highlight{background:#e8eff7;border-color:#37699f}.button,.Button{padding:0 2px;height:24px;line-height:16px;background-color:#777777;color:#ffffff;border:solid 2px #555555;font-weight:bold}.buttonhover{padding:0 2px;cursor:pointer;background-color:#6b9c6b;color:#ffffff;border:solid 2px #496d49}form#commentform input#submit{ padding:0 .25em; width:0; overflow:visible}form#commentform input#submit[class]{width:auto}form#commentform input#submit{padding:4px 10px 4px 10px;font-size:1.2em;line-height:1.5em;height:36px}table.searchform{width:100%}table.searchform td.searchfield{padding:0;width:100%}table.searchform td.searchbutton{padding:0 0 0 5px}table.searchform td.searchbutton input{padding:0 0 0 5px}blockquote{height:1%;display:block;clear:both;color:#555555;padding:1em 1em;background:#f4f4f4;border:solid 1px #e1e1e1}blockquote blockquote{height:1%;display:block;clear:both;color:#444444;padding:1em 1em;background:#e1e1e1;border:solid 1px #d3d3d3}div.post table{border-collapse:collapse;margin:10px 0}div.post table caption{width:auto;margin:0 auto;background:#eeeeee;border:#999999;padding:4px 8px;color:#666666}div.post table th{background:#888888;color:#ffffff;font-weight:bold;font-size:90%;padding:4px 8px;border:solid 1px #ffffff;text-align:left}div.post table td{padding:4px 8px;background-color:#ffffff;border-bottom:1px solid #dddddd;text-align:left}div.post table tfoot td{}div.post table tr.alt td{background:#f4f4f4}div.post table tr.over td{background:#e2e2e2}#calendar_wrap{padding:0;border:none}table#wp-calendar{width:100%;font-size:90%;border-collapse:collapse;background-color:#ffffff;margin:0 auto}table#wp-calendar caption{width:auto;background:#eeeeee;border:none;;padding:3px;margin:0 auto;font-size:1em}table#wp-calendar th{border:solid 1px #eeeeee;background-color:#999999;color:#ffffff;font-weight:bold;padding:2px;text-align:center}table#wp-calendar td{padding:0;line-height:18px;background-color:#ffffff;border:1px solid #dddddd;text-align:center}table#wp-calendar tfoot td{border:solid 1px #eeeeee;background-color:#eeeeee}table#wp-calendar td a{display:block;background-color:#eeeeee;width:100%;height:100%;padding:0}div#respond{margin:25px 0;padding:25px;background:#eee;-moz-border-radius:8px;-khtml-border-radius:8px;-webkit-border-radius:8px;border-radius:8px;}p.thesetags{margin:10px 0}h3.reply{margin:0;padding:0 0 10px 0}ol.commentlist{margin:15px 0 25px 0;list-style-type:none;padding:0;display:block;border-top:dotted 1px #cccccc}ol.commentlist li{padding:15px 10px;display:block;height:1%;margin:0;background-color:#FFFFFF;border-bottom:dotted 1px #cccccc}ol.commentlist li.alt{display:block;height:1%;background-color:#EEEEEE;border-bottom:dotted 1px #cccccc}ol.commentlist li.authorcomment{display:block;height:1%;background-color:#D8D8FA}ol.commentlist span.authorname{font-weight:bold;font-size:110%}ol.commentlist span.commentdate{color:#666666;font-size:90%;margin-bottom:5px;display:block}ol.commentlist span.editcomment{display:block}ol.commentlist li p{margin:2px 0 5px 0}div.comment-number{float:right;font-size:2em;line-height:2em;font-family:georgia,serif;font-weight:bold;color:#ddd;margin:-10px 0 0 0;position:relative;height:1%}div.comment-number a:link,div.comment-number a:visited,div.comment-number a:active{color:#ccc}textarea#comment{width:98%;margin:10px 0;display:block}ul.commentlist{margin:15px 0 15px 0;list-style-type:none;padding:0;display:block;border-top:dotted 1px #cccccc}ul.commentlist ul{margin:0;border:none;list-style-type:none;padding:0}ul.commentlist li{padding:0; margin:0;display:block;clear:both;height:1%;}ul.commentlist ul.children li{ margin-left:30px}ul.commentlist div.comment-container{padding:10px;margin:0}ul.children div.comment-container{background-color:transparent;border:dotted 1px #ccc;padding:10px;margin:0 10px 8px 0; -moz-border-radius:5px; -khtml-border-radius:5px; -webkit-border-radius:5px; border-radius:5px}ul.children div.bypostauthor{}ul.commentlist li.thread-even{background-color:#FFFFFF;border-bottom:dotted 1px #cccccc}ul.commentlist li.thread-odd{background-color:#EEEEEE;border-bottom:dotted 1px #cccccc}ul.commentlist div.bypostauthor{background-color:#D8D8FA}ul.children div.bypostauthor{border:dotted 1px #BFBCFB}ul.commentlist span.authorname{font-size:110%}div.comment-meta a:link,div.comment-meta a:visited,div.comment-meta a:active,div.comment-meta a:hover{font-weight:normal}div#cancel-comment-reply{margin:-5px 0 10px 0}div.comment-number{float:right;font-size:2em;line-height:2em;font-family:georgia,serif;font-weight:bold;color:#ddd;margin:-10px 0 0 0;position:relative;height:1%}div.comment-number a:link,div.comment-number a:visited,div.comment-number a:active{color:#ccc}.page-numbers{padding:2px 6px;border:solid 1px #000000;-moz-border-radius:6px;-khtml-border-radius:6px;-webkit-border-radius:6px;border-radius:6px}span.current{background:#ddd}a.prev,a.next{border:none}a.page-numbers:link,a.page-numbers:visited,a.page-numbers:active{text-decoration:none;color:#365DA0;border-color:#365DA0}a.page-numbers:hover{text-decoration:none;color:#365DA0;border-color:#365DA0}div.xhtml-tags{display:none}abbr em{border:none !important;border-top:dashed 1px #aaa !important;display:-moz-inline-box !important;display:inline-block !important;background:url(../../blog/wp-content/themes/atahualpa353/images/commentluv.gif) 0% 90% no-repeat;margin-top:8px;padding:5px 5px 2px 20px !important;font-style:normal}p.subscribe-to-comments{margin-bottom:10px}div#gsHeader{display:none;}div.g2_column{margin:0 !important;width:100% !important;font-size:1.2em}div#gsNavBar{border-top-width:0 !important}p.giDescription{font-size:1.2em;line-height:1 !important}p.giTitle{margin:0.3em 0 !important;font-size:1em;font-weight:normal;color:#666}div#wp-email img{border:0;padding:0}div#wp-email input,div#wp-email textarea{margin-top:5px;margin-bottom:2px}div#wp-email p{margin-bottom:10px}input#wp-email-submit{ padding:0; font-size:30px; height:50px; line-height:50px; overflow:visible;}img.WP-EmailIcon{ vertical-align:text-bottom !important}.tw-accordion .tw-widgettitle,.tw-accordion .tw-widgettitle:hover,.tw-accordion .tw-hovered,.tw-accordion .selected,.tw-accordion .selected:hover{ background:transparent !important; background-image:none !important}.tw-accordion .tw-widgettitle span{ padding-left:0 !important}.tw-accordion h3.tw-widgettitle{border-bottom:solid 1px #ccc}.tw-accordion h3.selected{border-bottom:none}td#left .without_title,td#right .without_title{ margin-top:0;margin-bottom:0}ul.tw-nav-list{border-bottom:solid 1px #999;display:block;margin-bottom:5px !important}td#left ul.tw-nav-list li,td#right ul.tw-nav-list li{padding:0 0 1px 0;margin:0 0 -1px 5px; border:solid 1px #ccc;border-bottom:none;-moz-border-radius:5px;-khtml-border-radius:5px;-webkit-border-radius:5px;border-radius:5px;-moz-border-radius-bottomright:0;-moz-border-radius-bottomleft:0;-webkit-border-bottom-right-radius:0;-webkit-border-bottom-left-radius:0;border-bottom-right-radius:0;border-bottom-left-radius:0;background:#eee}td#left ul.tw-nav-list li.ui-tabs-selected,td#right ul.tw-nav-list li.ui-tabs-selected{ background:none;border:solid 1px #999;border-bottom:solid 1px #fff !important}ul.tw-nav-list li a:link,ul.tw-nav-list li a:visited,ul.tw-nav-list li a:active,ul.tw-nav-list li a:hover{padding:0 8px !important;background:none;border-left:none !important;outline:none}td#left ul.tw-nav-list li.ui-tabs-selected a,td#left li.ui-tabs-selected a:hover,td#right ul.tw-nav-list li.ui-tabs-selected a,td#right li.ui-tabs-selected a:hover{ color:#000000; text-decoration:none;font-weight:bold;background:none !important;outline:none}td#left .ui-tabs-panel,td#right .ui-tabs-panel{ margin:0; padding:0}img{border:0}#dbem-location-map img{ background:none !important}.post img{padding:5px;border:solid 1px #dddddd;background-color:#f3f3f3;-moz-border-radius:3px;-khtml-border-radius:3px;-webkit-border-radius:3px;border-radius:3px;}.post img.size-full{max-width:96%;width:auto 100%;margin:5px 0 5px 0}div.post img[class~=size-full]{height:auto;}.post img.alignleft{float:left;margin:10px 10px 5px 0;}.post img.alignright{float:right;margin:10px 0 5px 10px;}.post img.aligncenter{display:block;margin:10px auto}.aligncenter,div.aligncenter{ display:block; margin-left:auto; margin-right:auto}.alignleft,div.alignleft{float:left;margin:10px 10px 5px 0}.alignright,div.alignright{ float:right; margin:10px 0 5px 10px}div.archives-page img{border:0;padding:0;background:none;margin-bottom:0;vertical-align:-10%}.wp-caption{max-width:96%;width:auto 100%;height:auto;display:block;border:1px solid #dddddd;text-align:center;background-color:#f3f3f3;padding-top:4px;margin:10px 0 0 0;-moz-border-radius:3px;-khtml-border-radius:3px;-webkit-border-radius:3px;border-radius:3px;}* html .wp-caption{height:100%;}.wp-caption img{ margin:0 !important; padding:0 !important; border:0 none !important}.wp-caption p.wp-caption-text{font-size:0.8em;line-height:13px;padding:2px 4px 5px;margin:0;color:#666666}img.wp-post-image{float:left;border:0;padding:0;background:none;margin:0 10px 5px 0}img.wp-smiley{ float:none;border:none !important;margin:0 1px -1px 1px;padding:0 !important;background:none !important}img.avatar{float:left;display:block;margin:0 8px 1px 0;padding:3px;border:solid 1px #ddd;background-color:#f3f3f3;-moz-border-radius:3px;-khtml-border-radius:3px;-webkit-border-radius:3px;border-radius:3px;}#comment_quicktags{text-align:left;padding:10px 0 2px 0;display:block}#comment_quicktags input.ed_button{background:#f4f4f4;border:2px solid #cccccc;color:#444444;margin:2px 4px 2px 0;width:auto;padding:0 4px;height:24px;line-height:16px}#comment_quicktags input.ed_button_hover{background:#dddddd;border:2px solid #666666;color:#000000;margin:2px 4px 2px 0;width:auto;padding:0 4px;height:24px;line-height:16px;cursor:pointer}#comment_quicktags #ed_strong{font-weight:bold}#comment_quicktags #ed_em{font-style:italic}@media print{body{background:white;color:black;margin:0;font-size:10pt !important;font-family:arial,sans-serif;}div.post-footer{line-height:normal !important;color:#555 !important;font-size:9pt !important}a:link,a:visited,a:active,a:hover{text-decoration:underline !important;color:#000}h2{color:#000;font-size:14pt !important;font-weight:normal !important}h3{color:#000;font-size:12pt !important;}#header,#footer,.colone,.colthree,.navigation,.navigation-top,.navigation-middle,.navigation-bottom,.wp-pagenavi-navigation,#comment,#respond,.remove-for-print{display:none}td#left,td#right,td#left-inner,td#right-inner{width:0}td#middle{width:100%}*:lang(en) td#left{ display:none}*:lang(en) td#right{ display:none}*:lang(en) td#left-inner{ display:none}*:lang(en) td#right-inner{ display:none}td#left:empty{ display:none}td#right:empty{ display:none}td#left-inner:empty{ display:none}td#right-inner:empty{ display:none}}ul.rMenu,ul.rMenu ul,ul.rMenu li,ul.rMenu a{display:block;margin:0;padding:0}ul.rMenu,ul.rMenu li,ul.rMenu ul{list-style:none}ul.rMenu ul{display:none}ul.rMenu li{position:relative;z-index:1}ul.rMenu li:hover{z-index:999}ul.rMenu li:hover > ul{display:block;position:absolute}ul.rMenu li:hover{background-position:0 0} ul.rMenu-hor li{float:left;width:auto}ul.rMenu-hRight li{float:right}ul.rMenu-ver li{float:none}.clearfix:after{ content:".";display:block;height:0;clear:both;visibility:hidden}.clearfix{min-width:0;display:inline-block;display:block}* html .clearfix{height:1%;}.clearboth{clear:both;height:1%;font-size:1%;line-height:1%;display:block;padding:0;margin:0}td#header{padding-bottom:15px;}td#middle{padding:0}div.searchbox-form{margin:5px 0 15px 5px}div#menu1 ul.rMenu{background:transparent;border:none}div#imagecontainer{border-top:solid 0px #333;border-bottom:solid 5px #333;}div.widget ul li{padding:1px 5px 1px 12px !important;background:url('../../blog/wp-content/themes/atahualpa353/images/bullets/round-gray.gif') no-repeat 0 7px}ul.rMenu-hor ul,ul.rMenu-hRight ul{margin-top:0px;}ul.rMenu-hor li{margin-bottom:0px;margin-top:0px;margin-left:0px;}ul.rMenu-hor{padding-left:0px;}ul.rMenu-ver li{margin-top:0xp;}div#menu1 ul.rMenu li a,div#menu2 ul.rMenu li a{padding:6px 10px}div#menu1 ul.rMenu li{margin-right:5px}div#menu1 ul.rMenu li li{margin-right:0}div#menu1 ul.rMenu li,div#menu1 ul.rMenu li a{-webkit-border-top-left-radius:5px;-webkit-border-top-right-radius:5px;-moz-border-radius-topleft:5px;-moz-border-radius-topright:5px;border-top-left-radius:5px;border-top-right-radius:5px}div#menu1 ul.rMenu li li,div#menu1 ul.rMenu li li a{-webkit-border-top-left-radius:0;-webkit-border-top-right-radius:0;-moz-border-radius-topleft:0;-moz-border-radius-topright:0;border-top-left-radius:0;border-top-right-radius:0}div#menu2{ border:dashed 1px #ffffff}</style>
<script type="text/javascript">
//<![CDATA[




/* JQUERY */
jQuery(document).ready(function(){  


	/* jQuery('ul#rmenu').superfish(); */
	/* jQuery('ul#rmenu').superfish().find('ul').bgIframe({opacity:false}); */
 
	/* For IE6 */
	if (jQuery.browser.msie && /MSIE 6\.0/i.test(window.navigator.userAgent) && !/MSIE 7\.0/i.test(window.navigator.userAgent) && !/MSIE 8\.0/i.test(window.navigator.userAgent)) {

		/* Max-width for images in IE6 */		
		var centerwidth = jQuery("td#middle").width(); 
		
		/* Images without caption */
		jQuery(".post img").each(function() { 
			var maxwidth = centerwidth - 10 + 'px';
			var imgwidth = jQuery(this).width(); 
			var imgheight = jQuery(this).height(); 
			var newimgheight = (centerwidth / imgwidth * imgheight) + 'px';	
			if (imgwidth > centerwidth) { 
				jQuery(this).css({width: maxwidth}); 
				jQuery(this).css({height: newimgheight}); 
			}
		});
		
		/* Images with caption */
		jQuery("div.wp-caption").each(function() { 
			var captionwidth = jQuery(this).width(); 
			var maxcaptionwidth = centerwidth + 'px';
			var captionheight = jQuery(this).height();
			var captionimgwidth =  jQuery("div.wp-caption img").width();
			var captionimgheight =  jQuery("div.wp-caption img").height();
			if (captionwidth > centerwidth) { 
				jQuery(this).css({width: maxcaptionwidth}); 
				var newcaptionheight = (centerwidth / captionwidth * captionheight) + 'px';
				var newcaptionimgheight = (centerwidth / captionimgwidth * captionimgheight) + 'px';
				jQuery(this).css({height: newcaptionheight}); 
				jQuery("div.wp-caption img").css({height: newcaptionimgheight}); 
				}
		});
		
		/* sfhover for LI:HOVER support in IE6: */
		jQuery("ul li").
			hover( function() {
					jQuery(this).addClass("sfhover")
				}, 
				function() {
					jQuery(this).removeClass("sfhover")
				} 
			); 

	/* End IE6 */
	}
	
	jQuery(".post table tr").
		mouseover(function() {
			jQuery(this).addClass("over");
		}).
		mouseout(function() {
			jQuery(this).removeClass("over");
		});

	
	jQuery(".post table tr:even").
		addClass("alt");

	
	jQuery("input.text, input.TextField, input.file, input.password, textarea").
		focus(function () {  
			jQuery(this).addClass("highlight"); 
		}).
		blur(function () { 
			jQuery(this).removeClass("highlight"); 
		})
	
	jQuery("input.inputblur").
		focus(function () {  
			jQuery(this).addClass("inputfocus"); 
		}).
		blur(function () { 
			jQuery(this).removeClass("inputfocus"); 
		})

		

	
	jQuery("input.button, input.Button").
		mouseover(function() {
			jQuery(this).addClass("buttonhover");
		}).
		mouseout(function() {
			jQuery(this).removeClass("buttonhover");
		});

	/* toggle "you can use these xhtml tags" */
	jQuery("a.xhtmltags").
		click(function(){ 
			jQuery("div.xhtml-tags").slideToggle(300); 
		});

	/* For the Tabbed Widgets plugin: */
	jQuery("ul.tw-nav-list").
		addClass("clearfix");

		
	
});

//]]>
</script>
<meta id="syntaxhighlighteranchor" name="syntaxhighlighter-version" content="3.1.3" />
<!-- Google Analytics Tracking by Google Analyticator 6.2: http://ronaldheft.com/code/analyticator/ -->
<script type="text/javascript">
	var analyticsFileTypes = [''];
	var analyticsEventTracking = 'enabled';
</script>
<script type="text/javascript">
	var _gaq = _gaq || [];
	_gaq.push(['_setAccount', 'UA-2173612-1']);
	_gaq.push(['_trackPageview']);
	_gaq.push(['_trackPageLoadTime']);

	(function() {
		var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true;
		ga.src = ('https:' == document.location.protocol ? '../../../https@ssl_2f\default.htm' : '../../../www/default.htm') + '.google-analytics.com/ga.js';
		var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s);
	})();
</script>
<!--[if IE 6]>
<script type="text/javascript" src="../../blog/wp-content/themes/atahualpa353/js/dd_roundies.js"></script>
<script type="text/javascript">DD_roundies.addRule('a.posts-icon,%20a.comments-icon,%20a.email-icon,%20img.logo');</script>
<![endif]-->
</head>
<body class="single single-post postid-139 single-format-standard">
<div id="wrapper">
<div id="container">
<table id="layout" border="0" cellspacing="0" cellpadding="0">
<colgroup>
<col class="colone" /><col class="coltwo" />
<col class="colthree" /></colgroup> 
	<tr>

		<!-- Header -->
		<td id="header" colspan="3">

		<div id="imagecontainer" class="header-image-container" style="background: url('../../blog/wp-content/themes/atahualpa353/images/header/learncppheader3_800.jpg') top center no-repeat;"><div class="clickable"><a class="divclick" title="Learn C++" href ="../../default.htm">&nbsp;</a></div></div>
		</td>
		<!-- / Header -->

	</tr>

	<!-- Main Body -->	
	<tr id="bodyrow">

				<!-- Left Sidebar -->
		<td id="left">

			<div id="text-5" class="widget widget_text"><div class="widget-title"><h3>Navigation</h3></div>			<div class="textwidget"><ul>
<li><a href="../../default.htm"><big><big>Main Page</big></big></a>
<li><a href="
../../featured-articles/default.htm"><big><big>Featured Articles</big></big></a>
</ul>
<hr>
<ul>
<li><a href="../../about/default.htm">About / Contact</a>
<li><a href="../../about/#Support">Support LearnCpp</a>
</ul>
<hr>

<!-- SiteSearch Google -->
<form method="get" action="http://www.google.com/custom" target="google_window">
<table border="0" bgcolor="#ffffff">
<tr><td nowrap="nowrap" valign="top" align="left">

<!--<br/>-->
<input type="hidden" name="domains" value="LearnCpp.com"></input>
<label for="sbi" style="display: none">Enter your search terms</label>
<input type="text" name="q" size="20" maxlength="255" value="" id="sbi"></input>
</td></tr>
<tr>
<td nowrap="nowrap">
<table>
<tr>
<td>
<input type="radio" name="sitesearch" value="" checked id="ss0"></input>
<label for="ss0" title="Search the Web"><font size="-1" color="#000000">Web</font></label></td>
<td>
<input type="radio" name="sitesearch" value="www.LearnCpp.com" id="ss1"></input>
<label for="ss1" title="Search LearnCpp.com"><font size="-1" color="#000000">LearnCpp</font></label></td>
</tr>
</table>
<label for="sbb" style="display: none">Submit search form</label>
<input type="submit" name="sa" value="Google Search" id="sbb"></input>
<input type="hidden" name="client" value="pub-0588844875925051"></input>
<input type="hidden" name="forid" value="1"></input>
<input type="hidden" name="channel" value="7774154974"></input>
<input type="hidden" name="ie" value="ISO-8859-1"></input>
<input type="hidden" name="oe" value="ISO-8859-1"></input>
<input type="hidden" name="safe" value="active"></input>
<input type="hidden" name="flav" value="0000"></input>
<input type="hidden" name="sig" value="q6fLrjobHHgL00cW"></input>
<input type="hidden" name="cof" value="GALT:#008000;GL:1;DIV:#336699;VLC:663399;AH:center;BGC:FFFFFF;LBGC:336699;ALC:0000FF;LC:0000FF;T:000000;GFNT:0000FF;GIMP:0000FF;FORID:1"></input>
<input type="hidden" name="hl" value="en"></input>
</td></tr></table>
</form>
<!-- SiteSearch Google --></div>
		</div><div id="meta-2" class="widget widget_meta"><div class="widget-title"><h3>Meta</h3></div>			<ul>
			<li><a href="../../blog/wp-login.php@action=register.htm">Register</a></li>			<li><a href="../../blog/wp-login.php.htm">Log in</a></li>
			<li><a href="../../feed/default.htm" title="Syndicate this site using RSS 2.0">Entries <abbr title="Really Simple Syndication">RSS</abbr></a></li>
			<li><a href="../../comments/feed/default.htm" title="The latest comments to all posts in RSS">Comments <abbr title="Really Simple Syndication">RSS</abbr></a></li>
			<li><a href="../../../wordpress.org/default.htm" title="Powered by WordPress, state-of-the-art semantic personal publishing platform.">WordPress.org</a></li>
						</ul>
</div>		<div id="recent-posts-2" class="widget widget_recent_entries">		<div class="widget-title"><h3>Recent Posts</h3></div>		<ul>
				<li><a href="../b-6-new-virtual-function-controls-override-final-default-and-delete/default.htm" title="B.6 &#8212; New virtual function controls: override, final, default, and delete">B.6 &#8212; New virtual function controls: override, final, default, and delete</a></li>
				<li><a href="../b-5-delegating-constructors/default.htm" title="B.5 &#8212; Delegating constructors">B.5 &#8212; Delegating constructors</a></li>
				<li><a href="../b-4-initializer-lists-and-uniform-initialization/default.htm" title="B.4 &#8212; Initializer lists and uniform initialization">B.4 &#8212; Initializer lists and uniform initialization</a></li>
				<li><a href="../b-3-range-based-for-statements-and-static_assert/default.htm" title="B.3 &#8212; Range-based for statements and static_assert">B.3 &#8212; Range-based for statements and static_assert</a></li>
				<li><a href="../b-2-long-long-auto-decltype-nullptr-and-enum-classes/default.htm" title="B.2 &#8212; Long long, auto, decltype, nullptr, and enum classes">B.2 &#8212; Long long, auto, decltype, nullptr, and enum classes</a></li>
				<li><a href="../b-1-introduction-to-c11/default.htm" title="B.1 &#8212; Introduction to C++11">B.1 &#8212; Introduction to C++11</a></li>
				<li><a href="../a-6-fixed-width-integers/default.htm" title="A.6 &#8212; Fixed-width integers">A.6 &#8212; Fixed-width integers</a></li>
				<li><a href="../../site-news/site-software-updated-1123/default.htm" title="Site software updated 11/23">Site software updated 11/23</a></li>
				<li><a href="../../site-news/this-is-why-we-cant-have-nice-things-part-2/default.htm" title="This is why we can&#8217;t have nice things, part 2">This is why we can&#8217;t have nice things, part 2</a></li>
				<li><a href="../../site-news/this-is-why-we-cant-have-nice-things/default.htm" title="This is why we can&#8217;t have nice things">This is why we can&#8217;t have nice things</a></li>
				</ul>
		</div><div id="categories-1" class="widget widget_categories"><div class="widget-title"><h3>Category Indexes</h3></div>		<ul>
	<li class="cat-item cat-item-11"><a href="../../category/breaktime/default.htm" title="Games and fun activities">Break Time</a> (3)
</li>
	<li class="cat-item cat-item-6"><a href="../../category/cpp-programming/default.htm" title="View all posts filed under C++ Programming">C++ Programming</a> (11)
</li>
	<li class="cat-item cat-item-3"><a href="../../category/cpp-tutorial/default.htm" title="View all posts filed under C++ Tutorial">C++ Tutorial</a> (163)
</li>
	<li class="cat-item cat-item-10"><a href="../../category/computer-game-programming/default.htm" title="View all posts filed under Game Programming">Game Programming</a> (4)
</li>
	<li class="cat-item cat-item-14"><a href="../../category/gaming/default.htm" title="View all posts filed under Gaming">Gaming</a> (1)
</li>
	<li class="cat-item cat-item-13"><a href="../../category/general-programming/default.htm" title="View all posts filed under General Programming">General Programming</a> (3)
</li>
	<li class="cat-item cat-item-4"><a href="../../category/site-news/default.htm" title="View all posts filed under Site News">Site News</a> (23)
</li>
	<li class="cat-item cat-item-5"><a href="../../category/wordpress/default.htm" title="View all posts filed under WordPress">WordPress</a> (8)
</li>
		</ul>
</div>
		</td>
		<!-- / Left Sidebar -->
		
				

		<!-- Main Column -->
		<td id="middle">

	

		
		 

		<div class="clearfix navigation-top">
		<div class="older">&laquo; <a href="../92-overloading-the-arithmetic-operators/default.htm" rel="prev">9.2 &#8212; Overloading the arithmetic operators</a> &nbsp;</div><div class="newer">&nbsp; <a href="../94-overloading-the-comparison-operators/default.htm" rel="next">9.4 &#8212; Overloading the comparison operators</a> &raquo;</div></div>
<div class="post-139 post type-post status-publish format-standard hentry category-cpp-tutorial" id="post-139">


<div class="post-headline">		<h1>9.3 &#8212; Overloading the I/O operators</h1>
		</div>
<div class="post-byline">By Alex, on October 1st, 2007</div>
<div class="post-bodycopy clearfix"><div style='float:left;padding:8px 8px 8px 0px;'><script type="text/javascript"><!--
google_ad_client = "ca-pub-0588844875925051";
/* Content Page Top Large */
google_ad_slot = "7945645163";
google_ad_width = 336;
google_ad_height = 280;
//-->
</script>
<acript type="text/javascript"
src="../../../pagead2.googlesyndication.com/pagead/show_ads.js">
</script></div><p><strong>Overloading << </strong></p>
<p>For classes that have multiple member variables, printing each of the individual variables on the screen can get tiresome fast.  For example, consider the following class:</p>
<pre class="brush: cpp; title: ; notranslate" title="">
class Point
{
private:
    double m_dX, m_dY, m_dZ;

public:
    Point(double dX=0.0, double dY=0.0, double dZ=0.0)
    {
    m_dX = dX;
    m_dY = dY;
    m_dZ = dZ;
    }

    double GetX() { return m_dX; }
    double GetY() { return m_dY; }
    double GetZ() { return m_dZ; }
};
</pre>
<p>If you wanted to print an instance of this class to the screen, you&#8217;d have to do something like this:</p>
<pre class="brush: cpp; title: ; notranslate" title="">
Point cPoint(5.0, 6.0, 7.0);
cout &lt;&lt; &quot;(&quot; &lt;&lt; cPoint.GetX() &lt;&lt; &quot;, &quot; &lt;&lt;
    cPoint.GetY() &lt;&lt; &quot;, &quot; &lt;&lt;
    cPoint.GetZ() &lt;&lt; &quot;)&quot;;
</pre>
<p>And that&#8217;s just for one instance!  It would be much easier if you could simply type:</p>
<pre class="brush: cpp; title: ; notranslate" title="">
Point cPoint(5.0, 6.0, 7.0);
cout &lt;&lt; cPoint;
</pre>
<p>and get the same result.  By overloading the << operator, you can!  Overloading operator<< is similar to overloading operator+ (they are both binary operators), except that the parameter types are different.</p>
<p>Consider the expression <code>cout &lt;&lt; cPoint</code>.  If the operator is <<, what are the operands?  The left operand is the cout object, and the right operand is your Point class object.  cout is actually an object of type ostream.  Therefore, our overloaded function will look like this:</p>
<pre class="brush: cpp; title: ; notranslate" title="">
friend ostream&amp; operator&lt;&lt; (ostream &amp;out, Point &amp;cPoint);
</pre>
<p>Implementation of operator<< is fairly straightforward -- because C++ already knows how to output doubles using operator<<, and our members are all doubles, we can simply use operator<< to output the member variables of our Point.  Here is the above Point class with the overloaded operator<<.</p>
<pre class="brush: cpp; title: ; notranslate" title="">
class Point
{
private:
    double m_dX, m_dY, m_dZ;

public:
    Point(double dX=0.0, double dY=0.0, double dZ=0.0)
    {
    m_dX = dX;
    m_dY = dY;
    m_dZ = dZ;
    }

    friend ostream&amp; operator&lt;&lt; (ostream &amp;out, Point &amp;cPoint);

    double GetX() { return m_dX; }
    double GetY() { return m_dY; }
    double GetZ() { return m_dZ; }
};

ostream&amp; operator&lt;&lt; (ostream &amp;out, Point &amp;cPoint)
{
    // Since operator&lt;&lt; is a friend of the Point class, we can access
    // Point's members directly.
    out &lt;&lt; &quot;(&quot; &lt;&lt; cPoint.m_dX &lt;&lt; &quot;, &quot; &lt;&lt;
        cPoint.m_dY &lt;&lt; &quot;, &quot; &lt;&lt;
        cPoint.m_dZ &lt;&lt; &quot;)&quot;;
    return out;
}
</pre>
<p>This is pretty straightforward -- note how similar our output line is to the line we wrote when we were outputting our members manually.  They are almost identical, except cout has become parameter out!</p>
<p>The only tricky part here is the return type.  Why are we returning an object of type ostream?  The answer is that we do this so we can "chain" output commands together, such as <code>cout &lt;&lt; cPoint &lt;&lt; endl;</code></p>
<p>Consider what would happen if our operator<< returned void.  When the compiler evaluates <code>cout &lt;&lt; cPoint &lt;&lt; endl;</code>, due to the precedence/associativity rules, it evaluates this expression as <code>(cout &lt;&lt; cPoint) &lt;&lt; endl;</code>.  <code>cout &lt;&lt; cPoint</code> calls our void-returning overloaded operator<< function, which returns void.  Then the partially evaluated expression becomes: <code>void &lt;&lt; endl;</code>, which makes no sense!</p>
<p>By returning the out parameter as the return type instead, <code>(cout &lt;&lt; cPoint)</code> returns cout.  Then our partially evaluated expression becomes: <code>cout &lt;&lt; endl;</code>, which then gets evaluated itself!</p>
<p>Any time we want our overloaded binary operators to be chainable in such a manner, the left operand should be returned.</p>
<p>Just to prove it works, consider the following example, which uses the Point class with the overloaded operator<< we wrote above:</p>
<pre class="brush: cpp; title: ; notranslate" title="">
int main()
{
    Point cPoint1(2.0, 3.0, 4.0);
    Point cPoint2(6.0, 7.0, 8.0);

    using namespace std;
    cout &lt;&lt; cPoint1 &lt;&lt; &quot; &quot; &lt;&lt; cPoint2 &lt;&lt; endl;

    return 0;
}
</pre>
<p>This produces the following result:</p>
<pre>
(2.0, 3.0, 4.0) (6.0, 7.0, 8.0)
</pre>
<p><strong>Overloading >> </strong></p>
<p>It is also possible to overload the input operator.  This is done in a manner very analogous to overloading the output operator.  The key thing you need to know is that cin is an object of type istream.  Here's our Point class with an overloaded operator>>:</p>
<pre class="brush: cpp; title: ; notranslate" title="">
class Point
{
private:
    double m_dX, m_dY, m_dZ;

public:
    Point(double dX=0.0, double dY=0.0, double dZ=0.0)
    {
    m_dX = dX;
    m_dY = dY;
    m_dZ = dZ;
    }

    friend ostream&amp; operator&lt;&lt; (ostream &amp;out, Point &amp;cPoint);
    friend istream&amp; operator&gt;&gt; (istream &amp;in, Point &amp;cPoint);

    double GetX() { return m_dX; }
    double GetY() { return m_dY; }
    double GetZ() { return m_dZ; }
};

ostream&amp; operator&lt;&lt; (ostream &amp;out, Point &amp;cPoint)
{
    // Since operator&lt;&lt; is a friend of the Point class, we can access
    // Point's members directly.
    out &lt;&lt; &quot;(&quot; &lt;&lt; cPoint.m_dX &lt;&lt; &quot;, &quot; &lt;&lt;
        cPoint.m_dY &lt;&lt; &quot;, &quot; &lt;&lt;
        cPoint.m_dZ &lt;&lt; &quot;)&quot;;
    return out;
}

istream&amp; operator&gt;&gt; (istream &amp;in, Point &amp;cPoint)
{
    in &gt;&gt; cPoint.m_dX;
    in &gt;&gt; cPoint.m_dY;
    in &gt;&gt; cPoint.m_dZ;
    return in;
}
</pre>
<p>Here's a sample program using both the overloaded operator<< and operator>>:</p>
<pre class="brush: cpp; title: ; notranslate" title="">
int main()
{
    using namespace std;
    cout &lt;&lt; &quot;Enter a point: &quot; &lt;&lt; endl;

    Point cPoint;
    cin &gt;&gt; cPoint;

    cout &lt;&lt; &quot;You entered: &quot; &lt;&lt; cPoint &lt;&lt; endl;

    return 0;
}
</pre>
<p>Assuming the user enters <code>3.0 4.5 7.26</code> as input, the program produces the following result:</p>
<pre>
You entered: (3, 4.5, 7.26)
</pre>
<p><strong>Conclusion</strong></p>
<p>Overloading operator<< and operator>> make it extremely easy to output your class to screen and accept user input.</p>
<p>Before we finish this lesson, there is one additional point that is important to make.  The overloaded output operator<<</p>
<pre class="brush: cpp; title: ; notranslate" title="">
friend ostream&amp; operator&lt;&lt; (ostream &amp;out, Point &amp;cPoint);
</pre>
<p>is actually better written as</p>
<pre class="brush: cpp; title: ; notranslate" title="">
friend ostream&amp; operator&lt;&lt; (ostream &amp;out, const Point &amp;cPoint);
</pre>
<p>This way, you will be able to output both const and non-const objects.</p>
<p>However, for the overloaded input operator>>, you will have to leave cPoint as non-const because the overloaded operator>> modifies cPoints members.</p>
<p>By now, you should be starting to become comfortable with classes and passing parameters by reference.  In future lessons, we will start making more of our parameters const references (which we should have been doing all along, but have abstained for purposes of simplicity).  It is a good habit to get into early.</p>
<table border=0 cellpadding=3>
<tr>
<td>
        <a href="../94-overloading-the-comparison-operators/default.htm" style="text-decoration:none"><img src="../../images/cpptutorial/next.png" align=middle> 9.4 -- Overloading the comparison operators</a>
</td>
</tr>
<tr>
<td>
        <a href="../../#Chapter9" style="text-decoration:none"><img src="../../images/cpptutorial/up.png" align=middle> Index</a>
</td>
</tr>
<tr>
<td>
        <a href="../92-overloading-the-arithmetic-operators/default.htm" style="text-decoration:none"><img src="../../images/cpptutorial/prev.png" align=middle> 9.2 -- Overloading the arithmetic operators</a>
</td>
</tr>
</table>
<div style='padding-top:8px; padding-bottom:8px'><script type="text/javascript"><!--
google_ad_client = "ca-pub-0588844875925051";
/* Content Page Bottom - Medium Rectangle */
google_ad_slot = "2751429778";
google_ad_width = 300;
google_ad_height = 250;
//-->
</script>
<acript type="text/javascript"
src="../../../pagead2.googlesyndication.com/pagead/show_ads.js">
</script>
</div><!-- Powered by Ad Inserter Wordpress Plugin, Author: Igor Funa --></div>

<div class="post-footer"><img src="../../blog/wp-content/themes/atahualpa353/images/icons/folder-gray.gif" alt="" /> <a href="../../category/cpp-tutorial/default.htm" title="View all posts in C++ Tutorial" rel="category tag">C++ Tutorial</a>   | <a href="print/default.htm" title="Print This Post" rel="nofollow"><img class="WP-PrintIcon" src="../../blog/wp-content/plugins/wp-print/images/print.gif" alt="Print This Post" title="Print This Post" style="border: 0px;" /></a>&nbsp;<a href="print/default.htm" title="Print This Post" rel="nofollow">Print This Post</a></div>
</div><!-- / Post -->						
	
	<div class="clearfix navigation-middle">
		<div class="older">&laquo; <a href="../92-overloading-the-arithmetic-operators/default.htm" rel="prev">9.2 &#8212; Overloading the arithmetic operators</a> &nbsp;</div><div class="newer">&nbsp; <a href="../94-overloading-the-comparison-operators/default.htm" rel="next">9.4 &#8212; Overloading the comparison operators</a> &raquo;</div></div>


	<a name="comments"></a><!-- named anchor for skip links -->
	<h3 id="comments">42 comments to 9.3 &#8212; Overloading the I/O operators</h3>

	
	<!-- Comment List -->
	<ul class="commentlist">
		
			<li class="pingback even thread-even depth-1 clearfix" id="comment-2422">
		<div id="div-comment-2422" class="clearfix comment-container">
		<div class="comment-author vcard">
				<span class="authorname"><a href='../911-the-copy-constructor-and-overloading-the-assignment-operator/default.htm' rel='external nofollow' class='url'>Learn C++ - &raquo; 9.11 -- The copy constructor and overloading the assignment operator</a></span>
		</div>
				<div class="comment-meta commentmetadata">
		<a href="comment-page-1/#comment-2422">
		November 4, 2007 at 8:53 am</a>
        <span class="comment-reply-link"><a rel="nofollow" class="comment-reply-login" href="../../blog/wp-login.php@redirect_to=http_253a_252f_252fwww.learncpp.com_252fcpp-tutorial_252f93-overloading-the-io-operators_252f">Log in to Reply</a></span>		 
		</div>
		<p>[...] If you need a refresher on chaining, we cover that in the section on overloading the I/O operators. [...]</p>
		</div>
</li>
		<li class="comment odd alt thread-odd thread-alt depth-1 clearfix" id="comment-5123">
		<div id="div-comment-5123" class="clearfix comment-container">
		<div class="comment-author vcard">
		<img alt='' src='../../../0.gravatar.com/avatar/cc3d54885b2404198f1f2db17eb3d573@s=65&d=http_253a_252f_252f0.gravatar.com_252favatar_252fad516503a11cd5ca435acc9bb6523536_253fs_253d65&r=g' class='avatar avatar-65 photo' height='65' width='65' />		<span class="authorname">Jason</span>
		</div>
				<div class="comment-meta commentmetadata">
		<a href="comment-page-1/#comment-5123">
		December 27, 2007 at 7:38 pm</a>
        <span class="comment-reply-link"><a rel="nofollow" class="comment-reply-login" href="../../blog/wp-login.php@redirect_to=http_253a_252f_252fwww.learncpp.com_252fcpp-tutorial_252f93-overloading-the-io-operators_252f">Log in to Reply</a></span>		 
		</div>
		<p>I understand everything on this page well enough to overload I/O operators.  I feel I grasp everything that has been presented here.  </p>
<p>Still, I&#8217;m left wondering what goes on under the hood.  For example:</p>
<pre>
ostream&#038; operator< < (ostream &#038;out, Point &#038;cPoint)
</pre>
<p>What does the &#038; (reference operator) do here: <code> ostream&#038; operator< < </code>    I believe this is the first time I've seen anything like that, a reference to a function or something?  Does this maybe somehow tie into function pointers?</p>
<p>I'm in a little over my head at this point.  I'm wondering if it's even important to know what's going on under the hood with this issue.</p>
<p>Your thoughts?</code></pre>
		</div>
<ul class='children'>
		<li class="comment even depth-2 clearfix" id="comment-5318">
		<div id="div-comment-5318" class="clearfix comment-container">
		<div class="comment-author vcard">
		<img alt='' src='../../../0.gravatar.com/avatar/cc3d54885b2404198f1f2db17eb3d573@s=65&d=http_253a_252f_252f0.gravatar.com_252favatar_252fad516503a11cd5ca435acc9bb6523536_253fs_253d65&r=g' class='avatar avatar-65 photo' height='65' width='65' />		<span class="authorname">Jason</span>
		</div>
				<div class="comment-meta commentmetadata">
		<a href="comment-page-1/#comment-5318">
		December 31, 2007 at 3:20 pm</a>
        <span class="comment-reply-link"><a rel="nofollow" class="comment-reply-login" href="../../blog/wp-login.php@redirect_to=http_253a_252f_252fwww.learncpp.com_252fcpp-tutorial_252f93-overloading-the-io-operators_252f">Log in to Reply</a></span>		 
		</div>
		<p>What really had me confused was the return by reference statement.  This <code> ostream&#038; operator< < </code> was confusing me simply because returning a value by reference is something I had not seen or done up until this point.  It took me a little while to make sense of this.  Anyway, here is some code that I came up with that helped me understand what takes place when returning a value by reference.</p>
<pre>
#include <iostream>
using namespace std;

int x = 11;

int&#038; ref()
	{
	return x;
	}

int main()
	{
	int *ptr = &#038;ref();  //after the return by reference
                      //takes place, &#038;ref() is &#038;x

	*ptr = 12;
	cout < < x << endl;

	return 0;
	}
</pre>
<p></iostream></pre>
<p></code></p>
		</div>
<ul class='children'>
		<li class="comment byuser comment-author-Tarindel bypostauthor odd alt depth-3 clearfix" id="comment-5321">
		<div id="div-comment-5321" class="clearfix comment-container bypostauthor">
		<div class="comment-author vcard">
		<img alt='' src='../../../0.gravatar.com/avatar/2bcdbab687c32f64f9208e016cafe4cc@s=65&d=http_253a_252f_252f0.gravatar.com_252favatar_252fad516503a11cd5ca435acc9bb6523536_253fs_253d65&r=g' class='avatar avatar-65 photo' height='65' width='65' />		<span class="authorname"><a href='../../../www.tarindel.com/default.htm' rel='external nofollow' class='url'>Alex</a></span>
		</div>
				<div class="comment-meta commentmetadata">
		<a href="comment-page-1/#comment-5321">
		December 31, 2007 at 4:06 pm</a>
        <span class="comment-reply-link"><a rel="nofollow" class="comment-reply-login" href="../../blog/wp-login.php@redirect_to=http_253a_252f_252fwww.learncpp.com_252fcpp-tutorial_252f93-overloading-the-io-operators_252f">Log in to Reply</a></span>		 
		</div>
		<p>There really isn&#8217;t much difference between return statements and function parameters, except for the directionality of the data transfer and the fact that you can only have one return value.</p>
<p>Pretty much everything you&#8217;ve learned about pass by value, reference, and address apply to return values in the same way that they apply to parameters.</p>
		</div>
</li>
</ul>
</li>
</ul>
</li>
		<li class="comment byuser comment-author-Tarindel bypostauthor even thread-even depth-1 clearfix" id="comment-5129">
		<div id="div-comment-5129" class="clearfix comment-container bypostauthor">
		<div class="comment-author vcard">
		<img alt='' src='../../../0.gravatar.com/avatar/2bcdbab687c32f64f9208e016cafe4cc@s=65&d=http_253a_252f_252f0.gravatar.com_252favatar_252fad516503a11cd5ca435acc9bb6523536_253fs_253d65&r=g' class='avatar avatar-65 photo' height='65' width='65' />		<span class="authorname"><a href='../../../www.tarindel.com/default.htm' rel='external nofollow' class='url'>Alex</a></span>
		</div>
				<div class="comment-meta commentmetadata">
		<a href="comment-page-1/#comment-5129">
		December 27, 2007 at 8:19 pm</a>
        <span class="comment-reply-link"><a rel="nofollow" class="comment-reply-login" href="../../blog/wp-login.php@redirect_to=http_253a_252f_252fwww.learncpp.com_252fcpp-tutorial_252f93-overloading-the-io-operators_252f">Log in to Reply</a></span>		 
		</div>
		<p>Jason, ostream is a class provided as part of C++ that handles outputs streams.  The details of how ostream is implemented is very complex, but fortunately also completely unnecessary to use it effectively.</p>
<p>Since ostream is a class, ostream&#038; is a reference to an ostream class.  Note that we&#8217;re also taking an ostream&#038; as a parameter.  ostream is typically passed by reference because we don&#8217;t want to make a copy of it as we pass it around.</p>
<p>So basically, our overloaded function takes an ostream as a parameter, writes stuff to it, and then returns the same ostream.  This allows us to chain <code>< <</code> calls together:</p>
<p></code><code><br />
cout < < cPoint1 << cPoint2 << cPoint3;<br />
</code></p>
<p>This resolves as follows:</p>
<p></code><code><br />
((cout < < cPoint1) << cPoint2) << cPoint3;<br />
</code></p>
<p></code><code>cout < < cPoint1</code> is resolved first, with cout becoming the ostream&#038; parameter.  When this overloaded function is finished writing to the out parameter, it returns that cout so the next call to </code><code>< <</code> can use it.  Thus:</p>
<p></code><code><br />
((cout < < cPoint1) << cPoint2) << cPoint3;<br />
</code></p>
<p>becomes:</p>
<p></code><code><br />
(cout < < cPoint2) << cPoint3;<br />
</code></p>
<p>becomes:</p>
<p></code><code><br />
cout < < cPoint3;<br />
</code></p>
<p>This calls our overloaded function one last time.  At the end of this function, cout is again returned.  But there's nobody left to use it, so the return value is ignored.  The expression ends, and the program moves to the next line.</code></p>
		</div>
</li>
		<li class="comment odd alt thread-odd thread-alt depth-1 clearfix" id="comment-5130">
		<div id="div-comment-5130" class="clearfix comment-container">
		<div class="comment-author vcard">
		<img alt='' src='../../../0.gravatar.com/avatar/cc3d54885b2404198f1f2db17eb3d573@s=65&d=http_253a_252f_252f0.gravatar.com_252favatar_252fad516503a11cd5ca435acc9bb6523536_253fs_253d65&r=g' class='avatar avatar-65 photo' height='65' width='65' />		<span class="authorname">Jason</span>
		</div>
				<div class="comment-meta commentmetadata">
		<a href="comment-page-1/#comment-5130">
		December 27, 2007 at 8:30 pm</a>
        <span class="comment-reply-link"><a rel="nofollow" class="comment-reply-login" href="../../blog/wp-login.php@redirect_to=http_253a_252f_252fwww.learncpp.com_252fcpp-tutorial_252f93-overloading-the-io-operators_252f">Log in to Reply</a></span>		 
		</div>
		<p>Hmm, can I reference my own classes in a manner similar to the way ostream&amp; references an ostream class?  If that is possible, could it be useful.</p>
<p>Curiosity killed the cat! :)</p>
		</div>
</li>
		<li class="comment byuser comment-author-Tarindel bypostauthor even thread-even depth-1 clearfix" id="comment-5132">
		<div id="div-comment-5132" class="clearfix comment-container bypostauthor">
		<div class="comment-author vcard">
		<img alt='' src='../../../0.gravatar.com/avatar/2bcdbab687c32f64f9208e016cafe4cc@s=65&d=http_253a_252f_252f0.gravatar.com_252favatar_252fad516503a11cd5ca435acc9bb6523536_253fs_253d65&r=g' class='avatar avatar-65 photo' height='65' width='65' />		<span class="authorname"><a href='../../../www.tarindel.com/default.htm' rel='external nofollow' class='url'>Alex</a></span>
		</div>
				<div class="comment-meta commentmetadata">
		<a href="comment-page-1/#comment-5132">
		December 27, 2007 at 8:42 pm</a>
        <span class="comment-reply-link"><a rel="nofollow" class="comment-reply-login" href="../../blog/wp-login.php@redirect_to=http_253a_252f_252fwww.learncpp.com_252fcpp-tutorial_252f93-overloading-the-io-operators_252f">Log in to Reply</a></span>		 
		</div>
		<p>Yes.  This is typically done in two ways.</p>
<p>Let&#8217;s say you wrote a class named Foo.</p>
<p>If you are writing a function that lives outside of Foo:</p>
<pre>
Foo&#038; FunctionName(Foo&#038; cFoo, other params here)
{
    // use cFoo
    return cFoo;
}
</pre>
<p>If writing a function that is a member of Foo:</p>
<pre>
Foo&#038; Foo::FunctionName(other params here)
{
    // use implicit Foo object
    return *this;
}
</pre>
		</div>
</li>
		<li class="comment odd alt thread-odd thread-alt depth-1 clearfix" id="comment-5133">
		<div id="div-comment-5133" class="clearfix comment-container">
		<div class="comment-author vcard">
		<img alt='' src='../../../0.gravatar.com/avatar/cc3d54885b2404198f1f2db17eb3d573@s=65&d=http_253a_252f_252f0.gravatar.com_252favatar_252fad516503a11cd5ca435acc9bb6523536_253fs_253d65&r=g' class='avatar avatar-65 photo' height='65' width='65' />		<span class="authorname">Jason</span>
		</div>
				<div class="comment-meta commentmetadata">
		<a href="comment-page-1/#comment-5133">
		December 27, 2007 at 8:54 pm</a>
        <span class="comment-reply-link"><a rel="nofollow" class="comment-reply-login" href="../../blog/wp-login.php@redirect_to=http_253a_252f_252fwww.learncpp.com_252fcpp-tutorial_252f93-overloading-the-io-operators_252f">Log in to Reply</a></span>		 
		</div>
		<p>Then I shall in good time have to experiment coding a reference to a class.  I imagine this will increase my understanding of the ostream implementation.</p>
		</div>
</li>
		<li class="pingback even thread-even depth-1 clearfix" id="comment-8920">
		<div id="div-comment-8920" class="clearfix comment-container">
		<div class="comment-author vcard">
				<span class="authorname"><a href='../132-input/default.htm' rel='external nofollow' class='url'>Learn C++ - &raquo; 13.2 -- Input</a></span>
		</div>
				<div class="comment-meta commentmetadata">
		<a href="comment-page-1/#comment-8920">
		March 4, 2008 at 4:09 pm</a>
        <span class="comment-reply-link"><a rel="nofollow" class="comment-reply-login" href="../../blog/wp-login.php@redirect_to=http_253a_252f_252fwww.learncpp.com_252fcpp-tutorial_252f93-overloading-the-io-operators_252f">Log in to Reply</a></span>		 
		</div>
		<p>[...] extraction operations for all of the built-in data types, and you&#8217;ve already seen how you can overload the extraction operator for your own [...]</p>
		</div>
</li>
		<li class="comment odd alt thread-odd thread-alt depth-1 clearfix" id="comment-10917">
		<div id="div-comment-10917" class="clearfix comment-container">
		<div class="comment-author vcard">
		<img alt='' src='../../../0.gravatar.com/avatar/610e617df852214cfe41e0914a4112a5@s=65&d=http_253a_252f_252f0.gravatar.com_252favatar_252fad516503a11cd5ca435acc9bb6523536_253fs_253d65&r=g' class='avatar avatar-65 photo' height='65' width='65' />		<span class="authorname">Tom</span>
		</div>
				<div class="comment-meta commentmetadata">
		<a href="comment-page-1/#comment-10917">
		April 4, 2008 at 6:15 am</a>
        <span class="comment-reply-link"><a rel="nofollow" class="comment-reply-login" href="../../blog/wp-login.php@redirect_to=http_253a_252f_252fwww.learncpp.com_252fcpp-tutorial_252f93-overloading-the-io-operators_252f">Log in to Reply</a></span>		 
		</div>
		<p>Alex -</p>
<p>I don&#8217;t understand why this:</p>
<pre>
ostream&#038; operator< < (ostream &#038;out, Point &#038;cPoint)
 {
     out << "(" << cPoint.GetX() << ", " <<
         cPoint.GetY() << ", " <<
         cPoint.GetZ() << ")";
     return out;
 }
</pre>
<p>isn't written like this:</p>
</pre>
<pre>
ostream&amp; operator< < (ostream &#038;out, Point &#038;cPoint)
 {
     cout << "(" << cPoint.GetX() << ", " <<
         cPoint.GetY() << ", " <<
         cPoint.GetZ() << ")";
     return cout;
 }
</pre>
<p>I guess I don't get the difference between "out" and "cout".</p>
<p>????</p>
<p>Thanks.</pre>
		</div>
<ul class='children'>
		<li class="comment byuser comment-author-Tarindel bypostauthor even depth-2 clearfix" id="comment-10922">
		<div id="div-comment-10922" class="clearfix comment-container bypostauthor">
		<div class="comment-author vcard">
		<img alt='' src='../../../0.gravatar.com/avatar/2bcdbab687c32f64f9208e016cafe4cc@s=65&d=http_253a_252f_252f0.gravatar.com_252favatar_252fad516503a11cd5ca435acc9bb6523536_253fs_253d65&r=g' class='avatar avatar-65 photo' height='65' width='65' />		<span class="authorname"><a href='../../../www.tarindel.com/default.htm' rel='external nofollow' class='url'>Alex</a></span>
		</div>
				<div class="comment-meta commentmetadata">
		<a href="comment-page-1/#comment-10922">
		April 4, 2008 at 8:07 am</a>
        <span class="comment-reply-link"><a rel="nofollow" class="comment-reply-login" href="../../blog/wp-login.php@redirect_to=http_253a_252f_252fwww.learncpp.com_252fcpp-tutorial_252f93-overloading-the-io-operators_252f">Log in to Reply</a></span>		 
		</div>
		<p>Good question!  Here&#8217;s what I think you might be missing: out might not be cout.  It might be cerr (an output stream used for error conditions), or a file ostream object (an output stream for writing to a file instead of the screen).  You&#8217;ll learn about both of these in the chapter on I/O.  In those cases, we don&#8217;t want to write to cout, we want to write to whatever alternative output stream we&#8217;re using.  Those alternative streams come into the overloaded < < operator as the "out" parameter.</p>
<p>For example:</p>
<p><code><br />
cerr < < "You have hit error # " << nErrorNum << endl;<br />
</code></p>
<p>This is broken up like this:</p>
<p><code><br />
((cerr < < "You have hit error # ") << nErrorNum) << endl;<br />
</code></p>
<p>cerr's overloaded extraction operator will receive cerr as the "out" parameter, and "You have hit error # " as a string parameter.  When it is done loading the stream, it will return cerr.  Then evaluation will continue, and we will have:</p>
<p></code><code><br />
(cerr < < nErrorNum) << endl;<br />
</code></p>
<p>cerr's overloaded extraction operator will receive cerr as the "out" parameter, and nErrorNum as an integer parameter.  When it is done putting the value of nErrorNum in the stream, it will return cerr again, and evaluation will continue:</p>
<p></code><code><br />
cerr < < endl;<br />
</code></p>
<p>Again, cerr's overloaded extraction operator will receive cerr as the "out" parameter, and endl as it's other parameter.  It will do it's thing, return cerr, and evaluation will continue.  At this point, there's nothing left to evaluate, so evaluation is complete.</p>
<p>If we had returned cout instead of out, then nErrorNum and endl would have been printed to cout instead of cerr!</code></p>
		</div>
</li>
</ul>
</li>
		<li class="pingback odd alt thread-even depth-1 clearfix" id="comment-14402">
		<div id="div-comment-14402" class="clearfix comment-container">
		<div class="comment-author vcard">
				<span class="authorname"><a href='../92-overloading-the-arithmetic-operators/default.htm' rel='external nofollow' class='url'>Learn C++ - &raquo; 9.2 &#8212; Overloading the arithmetic operators</a></span>
		</div>
				<div class="comment-meta commentmetadata">
		<a href="comment-page-1/#comment-14402">
		May 4, 2008 at 6:02 pm</a>
        <span class="comment-reply-link"><a rel="nofollow" class="comment-reply-login" href="../../blog/wp-login.php@redirect_to=http_253a_252f_252fwww.learncpp.com_252fcpp-tutorial_252f93-overloading-the-io-operators_252f">Log in to Reply</a></span>		 
		</div>
		<p>[...]  9.3 â€” Overloading the I/O operators [...]</p>
		</div>
</li>
		<li class="pingback even thread-odd thread-alt depth-1 clearfix" id="comment-20675">
		<div id="div-comment-20675" class="clearfix comment-container">
		<div class="comment-author vcard">
				<span class="authorname"><a href='../94-overloading-the-comparison-operators/default.htm' rel='external nofollow' class='url'>Learn C++ - &raquo; 9.4 &#8212; Overloading the comparison operators</a></span>
		</div>
				<div class="comment-meta commentmetadata">
		<a href="comment-page-1/#comment-20675">
		July 10, 2008 at 5:44 pm</a>
        <span class="comment-reply-link"><a rel="nofollow" class="comment-reply-login" href="../../blog/wp-login.php@redirect_to=http_253a_252f_252fwww.learncpp.com_252fcpp-tutorial_252f93-overloading-the-io-operators_252f">Log in to Reply</a></span>		 
		</div>
		<p>[...] 2007      Prev/Next Posts   &laquo; 9.3 &#8212; Overloading the I/O operators | Home | 9.5 &#8212; Overloading unary operators +, -, and ! &raquo;     Thursday, October 4th, [...]</p>
		</div>
</li>
		<li class="comment odd alt thread-even depth-1 clearfix" id="comment-21112">
		<div id="div-comment-21112" class="clearfix comment-container">
		<div class="comment-author vcard">
		<img alt='' src='../../../1.gravatar.com/avatar/1bd0f36dcaf78a7faa56fe0d7b721d02@s=65&d=http_253a_252f_252f1.gravatar.com_252favatar_252fad516503a11cd5ca435acc9bb6523536_253fs_253d65&r=g' class='avatar avatar-65 photo' height='65' width='65' />		<span class="authorname">simon simpson</span>
		</div>
				<div class="comment-meta commentmetadata">
		<a href="comment-page-1/#comment-21112">
		July 17, 2008 at 12:26 am</a>
        <span class="comment-reply-link"><a rel="nofollow" class="comment-reply-login" href="../../blog/wp-login.php@redirect_to=http_253a_252f_252fwww.learncpp.com_252fcpp-tutorial_252f93-overloading-the-io-operators_252f">Log in to Reply</a></span>		 
		</div>
		<p>I am using Visual Studio 2005.<br />
I can&#8217;t get the following to compile:</p>
<p>  <strong>friend ostream&amp; operator&lt;&lt; (ostream &amp;out, Point &amp;cPoint);</strong><strong></p>
<p>I get two errors relating to this:</p>
<p>     error C2143: syntax error : missing &#8216;;&#8217; before &#8216;&amp;&#8217;</p>
<p>     error C2433: &#8216;ostream&#8217; : &#8216;friend&#8217; not permitted on data declarations</p>
<p>I have used the Point example listed above exactlly.</p>
<p>Can anyone help?</strong></p>
		</div>
<ul class='children'>
		<li class="comment even depth-2 clearfix" id="comment-27497">
		<div id="div-comment-27497" class="clearfix comment-container">
		<div class="comment-author vcard">
		<img alt='' src='../../../0.gravatar.com/avatar/26a804036b8ab921a5ba422364bd2055@s=65&d=http_253a_252f_252f0.gravatar.com_252favatar_252fad516503a11cd5ca435acc9bb6523536_253fs_253d65&r=g' class='avatar avatar-65 photo' height='65' width='65' />		<span class="authorname">davidv</span>
		</div>
				<div class="comment-meta commentmetadata">
		<a href="comment-page-1/#comment-27497">
		September 15, 2008 at 6:59 pm</a>
        <span class="comment-reply-link"><a rel="nofollow" class="comment-reply-login" href="../../blog/wp-login.php@redirect_to=http_253a_252f_252fwww.learncpp.com_252fcpp-tutorial_252f93-overloading-the-io-operators_252f">Log in to Reply</a></span>		 
		</div>
		<p><em>error C2143: syntax error : missing ‘;’ before ‘&amp;’</em></p>
<p>to fix this, simply put semi-colon at the end of the previous function declaration</p>
<p><em> error C2433: ‘ostream’ : ‘friend’ not permitted on data declarations</em></p>
<p>this will be fine if you put &#8220;using namespace std&#8221; right at the beginning of your code, so that it has global impact</p>
		</div>
<ul class='children'>
		<li class="comment odd alt depth-3 clearfix" id="comment-73573">
		<div id="div-comment-73573" class="clearfix comment-container">
		<div class="comment-author vcard">
		<img alt='' src='../../../1.gravatar.com/avatar/da8d9880960849521c991ae30d18e846@s=65&d=http_253a_252f_252f1.gravatar.com_252favatar_252fad516503a11cd5ca435acc9bb6523536_253fs_253d65&r=g' class='avatar avatar-65 photo' height='65' width='65' />		<span class="authorname">mezentius</span>
		</div>
				<div class="comment-meta commentmetadata">
		<a href="comment-page-1/#comment-73573">
		December 3, 2009 at 10:24 am</a>
        <span class="comment-reply-link"><a rel="nofollow" class="comment-reply-login" href="../../blog/wp-login.php@redirect_to=http_253a_252f_252fwww.learncpp.com_252fcpp-tutorial_252f93-overloading-the-io-operators_252f">Log in to Reply</a></span>		 
		</div>
		<p>I had both errors (along with an error for practically every other character on the line), and fixed all of them with just &#8220;using namespace std&#8221;. Weird.</p>
		</div>
</li>
</ul>
</li>
</ul>
</li>
		<li class="comment even thread-odd thread-alt depth-1 clearfix" id="comment-21570">
		<div id="div-comment-21570" class="clearfix comment-container">
		<div class="comment-author vcard">
		<img alt='' src='../../../0.gravatar.com/avatar/0e7596c4a36375caa742d175309a1ed3@s=65&d=http_253a_252f_252f0.gravatar.com_252favatar_252fad516503a11cd5ca435acc9bb6523536_253fs_253d65&r=g' class='avatar avatar-65 photo' height='65' width='65' />		<span class="authorname">siku</span>
		</div>
				<div class="comment-meta commentmetadata">
		<a href="comment-page-1/#comment-21570">
		July 23, 2008 at 3:04 am</a>
        <span class="comment-reply-link"><a rel="nofollow" class="comment-reply-login" href="../../blog/wp-login.php@redirect_to=http_253a_252f_252fwww.learncpp.com_252fcpp-tutorial_252f93-overloading-the-io-operators_252f">Log in to Reply</a></span>		 
		</div>
		<p>public:<br />
     Point(double dX=0.0, double dY=0.0, double dZ=0.0)<br />
     {<br />
     m_dX = dX;<br />
     m_dY = dY;<br />
     m_dZ = dZ;<br />
     }; //Put semicolon on this line, it should help!  </p>
<p>     friend ostream&amp; operator&lt;&lt; (ostream &amp;out, Point &amp;cPoint);</p>
<p>&#8221; PRE&#8221; tags doen&#8217;t work for me.</p>
		</div>
<ul class='children'>
		<li class="comment odd alt depth-2 clearfix" id="comment-21571">
		<div id="div-comment-21571" class="clearfix comment-container">
		<div class="comment-author vcard">
		<img alt='' src='../../../0.gravatar.com/avatar/0e7596c4a36375caa742d175309a1ed3@s=65&d=http_253a_252f_252f0.gravatar.com_252favatar_252fad516503a11cd5ca435acc9bb6523536_253fs_253d65&r=g' class='avatar avatar-65 photo' height='65' width='65' />		<span class="authorname">siku</span>
		</div>
				<div class="comment-meta commentmetadata">
		<a href="comment-page-1/#comment-21571">
		July 23, 2008 at 3:13 am</a>
        <span class="comment-reply-link"><a rel="nofollow" class="comment-reply-login" href="../../blog/wp-login.php@redirect_to=http_253a_252f_252fwww.learncpp.com_252fcpp-tutorial_252f93-overloading-the-io-operators_252f">Log in to Reply</a></span>		 
		</div>
		<p>Sry my bad.</p>
		</div>
</li>
		<li class="comment even depth-2 clearfix" id="comment-21583">
		<div id="div-comment-21583" class="clearfix comment-container">
		<div class="comment-author vcard">
		<img alt='' src='../../../0.gravatar.com/avatar/0e7596c4a36375caa742d175309a1ed3@s=65&d=http_253a_252f_252f0.gravatar.com_252favatar_252fad516503a11cd5ca435acc9bb6523536_253fs_253d65&r=g' class='avatar avatar-65 photo' height='65' width='65' />		<span class="authorname">siku</span>
		</div>
				<div class="comment-meta commentmetadata">
		<a href="comment-page-1/#comment-21583">
		July 23, 2008 at 5:20 am</a>
        <span class="comment-reply-link"><a rel="nofollow" class="comment-reply-login" href="../../blog/wp-login.php@redirect_to=http_253a_252f_252fwww.learncpp.com_252fcpp-tutorial_252f93-overloading-the-io-operators_252f">Log in to Reply</a></span>		 
		</div>
		<p>Actually, I figured it out now. You have to use &#8220;using namespace std&#8221; or use a scope operator before ostream&amp;<br />
So, friend function will be:</p>
<p>friend std::ostream&amp; operator&lt;&lt; (std::ostream &amp;out, Point &amp;cPoint);</p>
		</div>
</li>
</ul>
</li>
		<li class="comment odd alt thread-even depth-1 clearfix" id="comment-34602">
		<div id="div-comment-34602" class="clearfix comment-container">
		<div class="comment-author vcard">
		<img alt='' src='../../../0.gravatar.com/avatar/cfdd51a9318f3d51f9085dbe0f4a9635@s=65&d=http_253a_252f_252f0.gravatar.com_252favatar_252fad516503a11cd5ca435acc9bb6523536_253fs_253d65&r=g' class='avatar avatar-65 photo' height='65' width='65' />		<span class="authorname">M.N. Jayaram</span>
		</div>
				<div class="comment-meta commentmetadata">
		<a href="comment-page-1/#comment-34602">
		December 15, 2008 at 12:57 am</a>
        <span class="comment-reply-link"><a rel="nofollow" class="comment-reply-login" href="../../blog/wp-login.php@redirect_to=http_253a_252f_252fwww.learncpp.com_252fcpp-tutorial_252f93-overloading-the-io-operators_252f">Log in to Reply</a></span>		 
		</div>
		<p>Hi </p>
<p>The operator &lt;&lt; being a friend of the class can directly access the member variables &amp; avoid the costly function calls as below.</p>
<pre>
ostream&amp; operator&lt;&lt; (ostream &amp;out, Point &amp;cPoint)
{
    out &lt;&lt; &quot;(&quot; &lt;&lt; cPoint.m_dX &lt;&lt; &quot;, &quot; &lt;&lt;
        cPoint.m_dY &lt;&lt; &quot;, &quot; &lt;&lt;
        cPoint.m_dZ &lt;&lt; &quot;)&quot;;
    return out;
}
<!--formatted--></pre>
<p>[ Good point.  Examples updated.  Thanks!  -Alex ]</p>
		</div>
</li>
		<li class="comment even thread-odd thread-alt depth-1 clearfix" id="comment-35285">
		<div id="div-comment-35285" class="clearfix comment-container">
		<div class="comment-author vcard">
		<img alt='' src='../../../1.gravatar.com/avatar/1459f99610c5a596988e6655b5dda722@s=65&d=http_253a_252f_252f1.gravatar.com_252favatar_252fad516503a11cd5ca435acc9bb6523536_253fs_253d65&r=g' class='avatar avatar-65 photo' height='65' width='65' />		<span class="authorname">George D</span>
		</div>
				<div class="comment-meta commentmetadata">
		<a href="comment-page-1/#comment-35285">
		December 21, 2008 at 1:14 pm</a>
        <span class="comment-reply-link"><a rel="nofollow" class="comment-reply-login" href="../../blog/wp-login.php@redirect_to=http_253a_252f_252fwww.learncpp.com_252fcpp-tutorial_252f93-overloading-the-io-operators_252f">Log in to Reply</a></span>		 
		</div>
		<p>Hi</p>
<p>I also have a problem that I cannot understand. I tried to compile my code with GNU C++. Here is a part of my code:</p>
<p>The header file</p>
<pre>
class BitArray {
			private:
			valarray&lt; byte_t &gt; data;
			number_t bit_len;
			public:
			// Constructors
			BitArray();
			explicit BitArray( BitArray&amp; );
			explicit BitArray( uint_t );
			BitArray&amp; operator= ( const BitArray&amp; );
			// Destructor
			~BitArray();
			// Const functions
			number_t getBitSize() const;
			number_t getWordSize() const;
			valarray&lt; byte_t &gt; getArray() const;
			bool getBit( number_t ) const;
			// Set functions
			void resize( number_t, bool );
			void setBit( number_t, bool );
			void reverse();
			// Operators
			bool operator== ( const BitArray&amp; );
			BitArray&amp; operator^ ( const BitArray&amp; );
			BitArray&amp; operator&amp; ( const BitArray&amp; );
			BitArray&amp; operator| ( const BitArray&amp; );
			const bool operator[] ( number_t ) const;
			friend ostream&amp; operator&lt;&lt; ( ostream&amp;, const BitArray&amp; );
		};
</pre>
<p>The source:</p>
<pre>
ostream&amp; BitArray::operator&lt;&lt; ( ostream&amp; _stream, const BitArray&amp; _arr ) {
	string to_write;
	for( int i = 0; i &lt; _arr.getBitSize(); i++ ) {
		if( _arr[ i ] )
			to_write += &quot;1&quot;;
		else
			to_write += &quot;0&quot;;
	}
	_stream &lt;&lt; to_write;
	return _stream;
}
</pre>
<p>The compiler sends the following error message: &#8220;/home/demarcsek/dev/Kalaha3/src/KCompress.h:63: error: &#8216;std::ostream&amp; Kalaha::KCompress::BitArray::operator&lt;&lt;(std::ostream&amp;, const Kalaha::KCompress::BitArray&amp;)&#8217; must take exactly one argument&#8221;<br />
When I modified this function with only one argument as a const BitArray&amp; and used cout as a default stream, the compiler wrote the following message: &#8220;/home/demarcsek/dev/Kalaha3/src/KCompress.h:63: error: &#8216;std::ostream&amp; Kalaha::KCompress::BitArray::operator&lt;&lt;(std::ostream&amp;, const Kalaha::KCompress::BitArray&amp;)&#8217; must take exactly two arguments&#8221;</p>
<p>It&#8217;s funny&#8230;Can anybody help me?</p>
<p>Thanks,<br />
George</p>
		</div>
<ul class='children'>
		<li class="comment odd alt depth-2 clearfix" id="comment-56950">
		<div id="div-comment-56950" class="clearfix comment-container">
		<div class="comment-author vcard">
		<img alt='' src='../../../0.gravatar.com/avatar/0183daeccdd0487da019c5177a5ec7e1@s=65&d=http_253a_252f_252f0.gravatar.com_252favatar_252fad516503a11cd5ca435acc9bb6523536_253fs_253d65&r=g' class='avatar avatar-65 photo' height='65' width='65' />		<span class="authorname">Joris</span>
		</div>
				<div class="comment-meta commentmetadata">
		<a href="comment-page-1/#comment-56950">
		April 9, 2009 at 9:33 am</a>
        <span class="comment-reply-link"><a rel="nofollow" class="comment-reply-login" href="../../blog/wp-login.php@redirect_to=http_253a_252f_252fwww.learncpp.com_252fcpp-tutorial_252f93-overloading-the-io-operators_252f">Log in to Reply</a></span>		 
		</div>
		<p>ostream&amp; BitArray::operator&lt;&lt; ( ostream&amp; _stream, const BitArray&amp; _arr )<br />
{ //implementation<br />
  return _stream;<br />
}<br />
That&#8217;s wrong &#8211; it shouldn&#8217;t be member function of the Bitarray class. Instead, it should be a &#8220;global&#8221; function:</p>
<p>Instead use this:</p>
<p>ostream&amp; operator&lt;&lt; ( ostream&amp; _stream, const BitArray&amp; _arr )<br />
{ //implementation<br />
  return _stream;<br />
}</p>
		</div>
</li>
</ul>
</li>
		<li class="comment even thread-even depth-1 clearfix" id="comment-57678">
		<div id="div-comment-57678" class="clearfix comment-container">
		<div class="comment-author vcard">
		<img alt='' src='../../../0.gravatar.com/avatar/4796596d633be45bf7d75edc7113cc12@s=65&d=http_253a_252f_252f0.gravatar.com_252favatar_252fad516503a11cd5ca435acc9bb6523536_253fs_253d65&r=g' class='avatar avatar-65 photo' height='65' width='65' />		<span class="authorname">rehab</span>
		</div>
				<div class="comment-meta commentmetadata">
		<a href="comment-page-1/#comment-57678">
		April 13, 2009 at 2:41 pm</a>
        <span class="comment-reply-link"><a rel="nofollow" class="comment-reply-login" href="../../blog/wp-login.php@redirect_to=http_253a_252f_252fwww.learncpp.com_252fcpp-tutorial_252f93-overloading-the-io-operators_252f">Log in to Reply</a></span>		 
		</div>
		<p>why it should be friend?</p>
		</div>
<ul class='children'>
		<li class="comment odd alt depth-2 clearfix" id="comment-65306">
		<div id="div-comment-65306" class="clearfix comment-container">
		<div class="comment-author vcard">
		<img alt='' src='../../../0.gravatar.com/avatar/8f7cc03b188fc617fd62a0db9ff6888b@s=65&d=http_253a_252f_252f0.gravatar.com_252favatar_252fad516503a11cd5ca435acc9bb6523536_253fs_253d65&r=g' class='avatar avatar-65 photo' height='65' width='65' />		<span class="authorname">Benjamin</span>
		</div>
				<div class="comment-meta commentmetadata">
		<a href="comment-page-1/#comment-65306">
		July 30, 2009 at 4:41 am</a>
        <span class="comment-reply-link"><a rel="nofollow" class="comment-reply-login" href="../../blog/wp-login.php@redirect_to=http_253a_252f_252fwww.learncpp.com_252fcpp-tutorial_252f93-overloading-the-io-operators_252f">Log in to Reply</a></span>		 
		</div>
		<p>If you implement it as a member, it will have to be a member of &#8216;ostream&#8217;, taking one &#8216;Point&#8217; as parameter:</p>
<pre>ostream&amp; ostream::operator&lt;&lt;(Point&amp; p);<!--formatted--></pre>
<p>In c++ we can&#8217;t reopen and extend the ostream-class, so we have to use a friend function.</p>
<p>Think of it the other way:<br />
if you implemented it as a member of &#8216;Point&#8217;&#8230;</p>
<pre>ostream&amp; Point::operator&lt;&lt;(ostream&amp; out);<!--formatted--></pre>
<p>&#8230; you could pass a &#8216;ostream&#8217; to the &#8216;Point&#8217; class through the &#8216;&lt;&lt;&#8217;-operator:</p>
<pre>Point p;
ostream o;
p &lt;&lt; o;<!--formatted--></pre>
<p>This compiles, but (in our case) it doesn&#8217;t make any sence.</p>
<p>Hope this helped!</p>
<p>[offtopic]in some languages (i.e. ruby) you can reopen and extend existing classes (i.e. &#8216;ostream&#8217;)[/offtopic]</p>
		</div>
</li>
</ul>
</li>
		<li class="comment even thread-odd thread-alt depth-1 clearfix" id="comment-70466">
		<div id="div-comment-70466" class="clearfix comment-container">
		<div class="comment-author vcard">
		<img alt='' src='../../../1.gravatar.com/avatar/992203a4e6d5d93531dc84d1fc652022@s=65&d=http_253a_252f_252f1.gravatar.com_252favatar_252fad516503a11cd5ca435acc9bb6523536_253fs_253d65&r=g' class='avatar avatar-65 photo' height='65' width='65' />		<span class="authorname">RevWaldo</span>
		</div>
				<div class="comment-meta commentmetadata">
		<a href="comment-page-1/#comment-70466">
		October 16, 2009 at 1:04 pm</a>
        <span class="comment-reply-link"><a rel="nofollow" class="comment-reply-login" href="../../blog/wp-login.php@redirect_to=http_253a_252f_252fwww.learncpp.com_252fcpp-tutorial_252f93-overloading-the-io-operators_252f">Log in to Reply</a></span>		 
		</div>
		<p>In the above example &#8211; any many others like it on the web &#8211; the code is written thus:</p>
<pre>
<b>ostream&amp;</b> operator&lt;&lt; (ostream &amp;out, Point &amp;cPoint)
<!--formatted--></pre>
<p>Meanwhile many other texts &#8211; including a C++ textbook I&#8217;m using &#8211; would write it as:</p>
<pre>
ostream <b>&amp;operator</b>&lt;&lt; (ostream &amp;out, Point &amp;cPoint)
<!--formatted--></pre>
<p>I imagine the complier just ignores the difference in whitespace, but what&#8217;s up with that? The first version makes more sense to me, while the second makes me scratch my head. Can anyone clarify why they&#8217;d write it differently? Or are they <b>actually</b> different?</p>
		</div>
<ul class='children'>
		<li class="comment odd alt depth-2 clearfix" id="comment-73490">
		<div id="div-comment-73490" class="clearfix comment-container">
		<div class="comment-author vcard">
		<img alt='' src='../../../0.gravatar.com/avatar/411ff8888c03cf888be5d1a39b192a8e@s=65&d=http_253a_252f_252f0.gravatar.com_252favatar_252fad516503a11cd5ca435acc9bb6523536_253fs_253d65&r=g' class='avatar avatar-65 photo' height='65' width='65' />		<span class="authorname">serenity</span>
		</div>
				<div class="comment-meta commentmetadata">
		<a href="comment-page-1/#comment-73490">
		December 2, 2009 at 10:51 am</a>
        <span class="comment-reply-link"><a rel="nofollow" class="comment-reply-login" href="../../blog/wp-login.php@redirect_to=http_253a_252f_252fwww.learncpp.com_252fcpp-tutorial_252f93-overloading-the-io-operators_252f">Log in to Reply</a></span>		 
		</div>
		<p>This is purely a matter of style. Choose whichever you prefer, since as you guessed, the whitespace is ignored by the compiler.</p>
<p>I don&#8217;t have a reason for it that I can explain, but I prefer &#8220;char *func()&#8221; and &#8220;char &amp;func()&#8221; over &#8220;char* func()&#8221; and &#8220;char&amp; func()&#8221;. I guess I was raised that way. ;)</p>
		</div>
</li>
</ul>
</li>
		<li class="comment even thread-even depth-1 clearfix" id="comment-71391">
		<div id="div-comment-71391" class="clearfix comment-container">
		<div class="comment-author vcard">
		<img alt='' src='../../../0.gravatar.com/avatar/232020dbee525f80de8d5724dca1ff0e@s=65&d=http_253a_252f_252f0.gravatar.com_252favatar_252fad516503a11cd5ca435acc9bb6523536_253fs_253d65&r=g' class='avatar avatar-65 photo' height='65' width='65' />		<span class="authorname"><a href='../../../none/default.htm' rel='external nofollow' class='url'>bob</a></span>
		</div>
				<div class="comment-meta commentmetadata">
		<a href="comment-page-1/#comment-71391">
		October 31, 2009 at 12:42 pm</a>
        <span class="comment-reply-link"><a rel="nofollow" class="comment-reply-login" href="../../blog/wp-login.php@redirect_to=http_253a_252f_252fwww.learncpp.com_252fcpp-tutorial_252f93-overloading-the-io-operators_252f">Log in to Reply</a></span>		 
		</div>
		<p>Ok, so how would you overload the input operator if you wanted to input both an integer and a string (such that the string could pick up long srings with spaces, not single words&#8230;)&#8230;</p>
<p>For example:</p>
<pre>
istream &amp;operator &gt;&gt; (istream &amp;in, CLASS1 &amp;x)
{
	// temp variables
	string TempString;
	int TempInt;

	cout&lt;&lt; &quot;Enter Your Full Name Name: &quot;;
	in &gt;&gt; TempString;
	cout&lt;&lt; &quot;Enter Your Age: &quot;;
	in &gt;&gt; TempInt;
other code...
}
<!--formatted--></pre>
<p>The above will only take in a word.  Apologies if this is a basic question.  I&#8217;m a first timer.</p>
<p>- Bob</p>
		</div>
</li>
		<li class="comment odd alt thread-odd thread-alt depth-1 clearfix" id="comment-74795">
		<div id="div-comment-74795" class="clearfix comment-container">
		<div class="comment-author vcard">
		<img alt='' src='../../../0.gravatar.com/avatar/c8c15c9688fdacb56c7e5100bfec52f0@s=65&d=http_253a_252f_252f0.gravatar.com_252favatar_252fad516503a11cd5ca435acc9bb6523536_253fs_253d65&r=g' class='avatar avatar-65 photo' height='65' width='65' />		<span class="authorname"><a href='../../../no/default.htm' rel='external nofollow' class='url'>Color</a></span>
		</div>
				<div class="comment-meta commentmetadata">
		<a href="comment-page-1/#comment-74795">
		December 24, 2009 at 5:09 am</a>
        <span class="comment-reply-link"><a rel="nofollow" class="comment-reply-login" href="../../blog/wp-login.php@redirect_to=http_253a_252f_252fwww.learncpp.com_252fcpp-tutorial_252f93-overloading-the-io-operators_252f">Log in to Reply</a></span>		 
		</div>
		<p>the line cout&lt;&lt;date1+date2 outputs wrong result, i cannot find why..</p>
<pre>
class Date
{
private:
    int m_nMonth;
    int m_nDay;
    int m_nYear;

    Date() { } // private default constructor

public:
    Date(int nMonth, int nDay, int nYear)
    {
        SetDate(nMonth, nDay, nYear);
    }

    void SetDate(int nMonth, int nDay, int nYear)
    {
        m_nMonth = nMonth;
        m_nDay = nDay;
        m_nYear = nYear;
    }

    friend Date&amp; operator+ ( const Date&amp; date1, const Date&amp; date2);
    friend ostream&amp; operator&lt;&lt; (ostream&amp; out, const Date&amp; date1);

    void PrintMonth()  {cout&lt;&lt;m_nMonth&lt;&lt;endl;}

    int GetMonth() const { return m_nMonth; }
    int GetDay() const { return m_nDay; }
    int GetYear() const { return m_nYear; }
};

Date&amp; operator+ (const  Date&amp; date1, const Date&amp; date2)
{
	return Date(date1.m_nMonth+date2.m_nMonth, date1.m_nDay+date2.m_nDay, date1.m_nYear+date2.m_nYear);
}

ostream&amp; operator&lt;&lt; (ostream&amp; out, const Date&amp; date1)
{
	out&lt;&lt;date1.m_nYear&lt;&lt;&quot;/&quot;&lt;&lt;date1.m_nMonth&lt;&lt;&quot;/&quot;&lt;&lt;date1.m_nDay;
	return out;
}

int _tmain(int argc, _TCHAR* argv[])
{
	Date date1(11,12,2009);
	Date date2(1,13,2009);
	//error,i wonder why, even the following format is alos wrong..cout&lt;&lt;(date1+date2)
	cout&lt;&lt;date1+date2;
	Date date3 = date1 + date2;
	//right
	cout&lt;&lt;endl&lt;&lt;date3;
	return 0;
}
<!--formatted--></pre>
		</div>
</li>
		<li class="comment even thread-even depth-1 clearfix" id="comment-74864">
		<div id="div-comment-74864" class="clearfix comment-container">
		<div class="comment-author vcard">
		<img alt='' src='../../../1.gravatar.com/avatar/78ffb4058628c9c5ea207e140735cdbf@s=65&d=http_253a_252f_252f1.gravatar.com_252favatar_252fad516503a11cd5ca435acc9bb6523536_253fs_253d65&r=g' class='avatar avatar-65 photo' height='65' width='65' />		<span class="authorname">RSA</span>
		</div>
				<div class="comment-meta commentmetadata">
		<a href="comment-page-1/#comment-74864">
		December 25, 2009 at 2:18 pm</a>
        <span class="comment-reply-link"><a rel="nofollow" class="comment-reply-login" href="../../blog/wp-login.php@redirect_to=http_253a_252f_252fwww.learncpp.com_252fcpp-tutorial_252f93-overloading-the-io-operators_252f">Log in to Reply</a></span>		 
		</div>
		<pre>Date&amp; operator+ (const  Date&amp; date1, const Date&amp; date2)
{
	Date* newdate = new Date(date1.m_nMonth+date2.m_nMonth, date1.m_nDay+date2.m_nDay, date1.m_nYear+date2.m_nYear);
	return *newdate;
}</pre>
<p>this should work now</p>
		</div>
<ul class='children'>
		<li class="comment odd alt depth-2 clearfix" id="comment-74908">
		<div id="div-comment-74908" class="clearfix comment-container">
		<div class="comment-author vcard">
		<img alt='' src='../../../0.gravatar.com/avatar/c8c15c9688fdacb56c7e5100bfec52f0@s=65&d=http_253a_252f_252f0.gravatar.com_252favatar_252fad516503a11cd5ca435acc9bb6523536_253fs_253d65&r=g' class='avatar avatar-65 photo' height='65' width='65' />		<span class="authorname"><a href='../../../no/default.htm' rel='external nofollow' class='url'>color</a></span>
		</div>
				<div class="comment-meta commentmetadata">
		<a href="comment-page-1/#comment-74908">
		December 26, 2009 at 5:06 am</a>
        <span class="comment-reply-link"><a rel="nofollow" class="comment-reply-login" href="../../blog/wp-login.php@redirect_to=http_253a_252f_252fwww.learncpp.com_252fcpp-tutorial_252f93-overloading-the-io-operators_252f">Log in to Reply</a></span>		 
		</div>
		<p>Yes, it works, thanks for your solution. Furthermore, can you explain me why, thanks in advance:)</p>
		</div>
<ul class='children'>
		<li class="comment even depth-3 clearfix" id="comment-74915">
		<div id="div-comment-74915" class="clearfix comment-container">
		<div class="comment-author vcard">
		<img alt='' src='../../../1.gravatar.com/avatar/78ffb4058628c9c5ea207e140735cdbf@s=65&d=http_253a_252f_252f1.gravatar.com_252favatar_252fad516503a11cd5ca435acc9bb6523536_253fs_253d65&r=g' class='avatar avatar-65 photo' height='65' width='65' />		<span class="authorname">RSA</span>
		</div>
				<div class="comment-meta commentmetadata">
		<a href="comment-page-1/#comment-74915">
		December 26, 2009 at 8:55 am</a>
        <span class="comment-reply-link"><a rel="nofollow" class="comment-reply-login" href="../../blog/wp-login.php@redirect_to=http_253a_252f_252fwww.learncpp.com_252fcpp-tutorial_252f93-overloading-the-io-operators_252f">Log in to Reply</a></span>		 
		</div>
		<p>This type of error is compiler specific. The reference of the newly created date is no longer valide when the function exits because all the data inside that function are all destroyed. There are few ways to solve this problem, for example you can make static your variable if you consider that its lifetime to be the whole execution of the program. You can make it global and assign with the new operator like I did, but you musn&#8217;t forget to delete all variables that used &#8220;new&#8221; (when the program ends the os deletes them automatically). Here it worked because pointer created with &#8220;new&#8221; remained in the memory. But you should make it global and delete it if you want to avoid memory leak during execution, or make it static.</p>
		</div>
</li>
</ul>
</li>
</ul>
</li>
		<li class="comment odd alt thread-odd thread-alt depth-1 clearfix" id="comment-78195">
		<div id="div-comment-78195" class="clearfix comment-container">
		<div class="comment-author vcard">
		<img alt='' src='../../../0.gravatar.com/avatar/0cc03fdd1cae5086722b9970243f0bc0@s=65&d=http_253a_252f_252f0.gravatar.com_252favatar_252fad516503a11cd5ca435acc9bb6523536_253fs_253d65&r=g' class='avatar avatar-65 photo' height='65' width='65' />		<span class="authorname">Sander</span>
		</div>
				<div class="comment-meta commentmetadata">
		<a href="comment-page-1/#comment-78195">
		February 11, 2010 at 1:13 pm</a>
        <span class="comment-reply-link"><a rel="nofollow" class="comment-reply-login" href="../../blog/wp-login.php@redirect_to=http_253a_252f_252fwww.learncpp.com_252fcpp-tutorial_252f93-overloading-the-io-operators_252f">Log in to Reply</a></span>		 
		</div>
		<p>I&#8217;m getting those errors trying to compile the last one with giving the point.<br />
1&gt;d:\documents\visual studio 2008\projects\tryh9\tryh9\tryh9.cpp(20) : error C2143: syntax error : missing &#8216;;&#8217; before &#8216;&amp;&#8217;<br />
1&gt;d:\documents\visual studio 2008\projects\tryh9\tryh9\tryh9.cpp(20) : error C2433: &#8216;ostream&#8217; : &#8216;friend&#8217; not permitted on data declarations<br />
1&gt;d:\documents\visual studio 2008\projects\tryh9\tryh9\tryh9.cpp(20) : error C4430: missing type specifier &#8211; int assumed. Note: C++ does not support default-int<br />
1&gt;d:\documents\visual studio 2008\projects\tryh9\tryh9\tryh9.cpp(20) : error C2061: syntax error : identifier &#8216;ostream&#8217;<br />
1&gt;d:\documents\visual studio 2008\projects\tryh9\tryh9\tryh9.cpp(20) : error C4430: missing type specifier &#8211; int assumed. Note: C++ does not support default-int<br />
1&gt;d:\documents\visual studio 2008\projects\tryh9\tryh9\tryh9.cpp(20) : error C2805: binary &#8216;operator &lt;d:\documents\visual studio 2008\projects\tryh9\tryh9\tryh9.cpp(21) : error C2143: syntax error : missing &#8216;;&#8217; before &#8216;&amp;&#8217;<br />
1&gt;d:\documents\visual studio 2008\projects\tryh9\tryh9\tryh9.cpp(21) : error C2433: &#8216;istream&#8217; : &#8216;friend&#8217; not permitted on data declarations<br />
1&gt;d:\documents\visual studio 2008\projects\tryh9\tryh9\tryh9.cpp(21) : error C4430: missing type specifier &#8211; int assumed. Note: C++ does not support default-int<br />
1&gt;d:\documents\visual studio 2008\projects\tryh9\tryh9\tryh9.cpp(21) : error C2061: syntax error : identifier &#8216;istream&#8217;<br />
1&gt;d:\documents\visual studio 2008\projects\tryh9\tryh9\tryh9.cpp(21) : error C4430: missing type specifier &#8211; int assumed. Note: C++ does not support default-int<br />
1&gt;d:\documents\visual studio 2008\projects\tryh9\tryh9\tryh9.cpp(21) : error C2805: binary &#8216;operator &gt;&gt;&#8217; has too few parameters<br />
1&gt;d:\documents\visual studio 2008\projects\tryh9\tryh9\tryh9.cpp(28) : error C2143: syntax error : missing &#8216;;&#8217; before &#8216;&amp;&#8217;<br />
1&gt;d:\documents\visual studio 2008\projects\tryh9\tryh9\tryh9.cpp(28) : error C4430: missing type specifier &#8211; int assumed. Note: C++ does not support default-int<br />
1&gt;d:\documents\visual studio 2008\projects\tryh9\tryh9\tryh9.cpp(28) : error C2086: &#8216;int ostream&#8217; : redefinition<br />
1&gt;        d:\documents\visual studio 2008\projects\tryh9\tryh9\tryh9.cpp(20) : see declaration of &#8216;ostream&#8217;<br />
1&gt;d:\documents\visual studio 2008\projects\tryh9\tryh9\tryh9.cpp(28) : error C2065: &#8216;out&#8217; : undeclared identifier<br />
1&gt;d:\documents\visual studio 2008\projects\tryh9\tryh9\tryh9.cpp(28) : error C2065: &#8216;cPoint&#8217; : undeclared identifier<br />
1&gt;d:\documents\visual studio 2008\projects\tryh9\tryh9\tryh9.cpp(28) : error C2275: &#8216;Point&#8217; : illegal use of this type as an expression<br />
1&gt;        d:\documents\visual studio 2008\projects\tryh9\tryh9\tryh9.cpp(8) : see declaration of &#8216;Point&#8217;<br />
1&gt;d:\documents\visual studio 2008\projects\tryh9\tryh9\tryh9.cpp(28) : error C4430: missing type specifier &#8211; int assumed. Note: C++ does not support default-int<br />
1&gt;d:\documents\visual studio 2008\projects\tryh9\tryh9\tryh9.cpp(28) : fatal error C1903: unable to recover from previous error(s); stopping compilation</p>
<p>how is it possible?</p>
		</div>
</li>
		<li class="comment even thread-even depth-1 clearfix" id="comment-82158">
		<div id="div-comment-82158" class="clearfix comment-container">
		<div class="comment-author vcard">
		<img alt='' src='../../../0.gravatar.com/avatar/a0d96b0284dedc54563cc9c024e05e24@s=65&d=http_253a_252f_252f0.gravatar.com_252favatar_252fad516503a11cd5ca435acc9bb6523536_253fs_253d65&r=g' class='avatar avatar-65 photo' height='65' width='65' />		<span class="authorname">awa</span>
		</div>
				<div class="comment-meta commentmetadata">
		<a href="comment-page-1/#comment-82158">
		March 31, 2010 at 9:48 pm</a>
        <span class="comment-reply-link"><a rel="nofollow" class="comment-reply-login" href="../../blog/wp-login.php@redirect_to=http_253a_252f_252fwww.learncpp.com_252fcpp-tutorial_252f93-overloading-the-io-operators_252f">Log in to Reply</a></span>		 
		</div>
		<p>#include<br />
using namespace std;</p>
<p>int x = 11;</p>
<p>int&amp; ref()<br />
	{<br />
	return x;<br />
	}</p>
<p>int main()<br />
	{<br />
	int *ptr = &amp;ref();  //after the return by reference<br />
                      //takes place, &amp;ref() is &amp;x</p>
<p>	*ptr = 12;<br />
	cout &lt; &lt; x &lt;&lt; endl;</p>
<p>	return 0;<br />
	}</p>
		</div>
</li>
		<li class="comment odd alt thread-odd thread-alt depth-1 clearfix" id="comment-85655">
		<div id="div-comment-85655" class="clearfix comment-container">
		<div class="comment-author vcard">
		<img alt='' src='../../../1.gravatar.com/avatar/7e87614fd0537166873b4d56ef6f01c2@s=65&d=http_253a_252f_252f1.gravatar.com_252favatar_252fad516503a11cd5ca435acc9bb6523536_253fs_253d65&r=g' class='avatar avatar-65 photo' height='65' width='65' />		<span class="authorname">saini</span>
		</div>
				<div class="comment-meta commentmetadata">
		<a href="comment-page-1/#comment-85655">
		May 30, 2010 at 9:39 pm</a>
        <span class="comment-reply-link"><a rel="nofollow" class="comment-reply-login" href="../../blog/wp-login.php@redirect_to=http_253a_252f_252fwww.learncpp.com_252fcpp-tutorial_252f93-overloading-the-io-operators_252f">Log in to Reply</a></span>		 
		</div>
		<p>hi<br />
would anyone help me to understand that why are we  passing both the arguments as a reference and what will happen if we pass them as a value parameter</p>
		</div>
</li>
		<li class="comment even thread-even depth-1 clearfix" id="comment-85656">
		<div id="div-comment-85656" class="clearfix comment-container">
		<div class="comment-author vcard">
		<img alt='' src='../../../1.gravatar.com/avatar/7e87614fd0537166873b4d56ef6f01c2@s=65&d=http_253a_252f_252f1.gravatar.com_252favatar_252fad516503a11cd5ca435acc9bb6523536_253fs_253d65&r=g' class='avatar avatar-65 photo' height='65' width='65' />		<span class="authorname">saini</span>
		</div>
				<div class="comment-meta commentmetadata">
		<a href="comment-page-1/#comment-85656">
		May 30, 2010 at 9:43 pm</a>
        <span class="comment-reply-link"><a rel="nofollow" class="comment-reply-login" href="../../blog/wp-login.php@redirect_to=http_253a_252f_252fwww.learncpp.com_252fcpp-tutorial_252f93-overloading-the-io-operators_252f">Log in to Reply</a></span>		 
		</div>
		<pre>would anyone help to understand me why are we passing both the arguments as a reference,and what will happen if we pass them as  value parameters</pre>
		</div>
<ul class='children'>
		<li class="comment odd alt depth-2 clearfix" id="comment-89978">
		<div id="div-comment-89978" class="clearfix comment-container">
		<div class="comment-author vcard">
		<img alt='' src='../../../1.gravatar.com/avatar/733724155ce268d53a46f18d9f94b30f@s=65&d=http_253a_252f_252f1.gravatar.com_252favatar_252fad516503a11cd5ca435acc9bb6523536_253fs_253d65&r=g' class='avatar avatar-65 photo' height='65' width='65' />		<span class="authorname">Gammerz</span>
		</div>
				<div class="comment-meta commentmetadata">
		<a href="comment-page-1/#comment-89978">
		August 10, 2010 at 5:22 am</a>
        <span class="comment-reply-link"><a rel="nofollow" class="comment-reply-login" href="../../blog/wp-login.php@redirect_to=http_253a_252f_252fwww.learncpp.com_252fcpp-tutorial_252f93-overloading-the-io-operators_252f">Log in to Reply</a></span>		 
		</div>
		<p>Alex replied to this above:-</p>
<p><cite>Since ostream is a class, ostream&amp; is a reference to an ostream class. Note that we’re also taking an ostream&amp; as a parameter. ostream is typically passed by reference because we don’t want to make a copy of it as we pass it around.</cite></p>
		</div>
</li>
</ul>
</li>
		<li class="comment even thread-odd thread-alt depth-1 clearfix" id="comment-89926">
		<div id="div-comment-89926" class="clearfix comment-container">
		<div class="comment-author vcard">
		<img alt='' src='../../../1.gravatar.com/avatar/733724155ce268d53a46f18d9f94b30f@s=65&d=http_253a_252f_252f1.gravatar.com_252favatar_252fad516503a11cd5ca435acc9bb6523536_253fs_253d65&r=g' class='avatar avatar-65 photo' height='65' width='65' />		<span class="authorname">Gammerz</span>
		</div>
				<div class="comment-meta commentmetadata">
		<a href="comment-page-1/#comment-89926">
		August 9, 2010 at 7:02 am</a>
        <span class="comment-reply-link"><a rel="nofollow" class="comment-reply-login" href="../../blog/wp-login.php@redirect_to=http_253a_252f_252fwww.learncpp.com_252fcpp-tutorial_252f93-overloading-the-io-operators_252f">Log in to Reply</a></span>		 
		</div>
		<p>When the operator&lt;&lt; function becomes a friend of class Point, it allows us direct access to the member variables m_dX, m_dY and m_dZ. We could avoid making the operator&lt;&lt; a friend of the class Point and instead use member functions GetX(), GetY() and GetZ(), for improved encapsulation. Is this example purely to demonstrate the use of the &quot;friend&quot; command or are we saying this is a preferred method?</p>
		</div>
</li>
		<li class="comment byuser comment-author-arvindsaketgmail-com odd alt thread-even depth-1 clearfix" id="comment-95068">
		<div id="div-comment-95068" class="clearfix comment-container">
		<div class="comment-author vcard">
		<img alt='' src='../../../0.gravatar.com/avatar/24275916fd913b10f93f3e1b0a9187ed@s=65&d=http_253a_252f_252f0.gravatar.com_252favatar_252fad516503a11cd5ca435acc9bb6523536_253fs_253d65&r=g' class='avatar avatar-65 photo' height='65' width='65' />		<span class="authorname">ARVIND</span>
		</div>
				<div class="comment-meta commentmetadata">
		<a href="comment-page-1/#comment-95068">
		December 22, 2010 at 8:27 am</a>
        <span class="comment-reply-link"><a rel="nofollow" class="comment-reply-login" href="../../blog/wp-login.php@redirect_to=http_253a_252f_252fwww.learncpp.com_252fcpp-tutorial_252f93-overloading-the-io-operators_252f">Log in to Reply</a></span>		 
		</div>
		<p>While overloading output stream operator &lt;&lt; as member member function I am getting following error:</p>
<p>ostreamOprt.cpp:32: error: no match for &#039;operator&lt;&lt;&#039; in &#039;std::cout &lt;&lt; objs&#039;<br />
/usr/lib/gcc/i686-pc-cygwin/3.4.4/include/c++/bits/ostream.tcc:63: note: candidates are: std::basic_ostream&amp; std::basic_ostream<br />
::operator&lt;&lt;(std::basic_ostream&amp;(*)(std::basic_ostream&amp;)) [with _CharT = char, _Traits = std:<br />
:char_traits]<br />
/usr/lib/gcc/i686-pc-cygwin/3.4.4/include/c++/bits/ostream.tcc:74: note:  std::basic_ostream&amp; std::basic_ostream::operator&lt;&lt;(std::basic_ios&amp;(*)(std::basic_ios&amp;)) [with _CharT = char, _Traits = std::char_traits]<br />
/usr/lib/gcc/i686-pc-cygwin/3.4.4/include/c++/bits/ostream.tcc:86: note:  std::basic_ostream&amp; std::basic_ostream::operator&lt;&lt;(std::ios_base&amp;(*)(std::ios_base&amp;)) [with _CharT = char, _Traits = std::char_traits]<br />
/usr/lib/gcc/i686-pc-cygwin/3.4.4/include/c++/bits/ostream.tcc:121: note:  std::basic_ostream&amp; std::basic_ostream::operator&lt;&lt;(long int) [with _CharT = char, _Traits = std::char_traits]<br />
/usr/lib/gcc/i686-pc-cygwin/3.4.4/include/c++/bits/ostream.tcc:155: note:  std::basic_ostream&amp; std::basic_ostream::operator&lt;&lt;(long unsigned int) [with _CharT = char, _Traits = std::char_traits]<br />
/usr/lib/gcc/i686-pc-cygwin/3.4.4/include/c++/bits/ostream.tcc:98: note:  std::basic_ostream&amp; std::basic_ostream::operator&lt;&lt;(bool) [with _CharT = char, _Traits = std::char_traits]<br />
/usr/lib/gcc/i686-pc-cygwin/3.4.4/include/c++/ostream:178: note:  std::basic_ostream&amp; std::basic_ostream::oper<br />
ator&lt;&lt;(short int) [with _CharT = char, _Traits = std::char_traits]<br />
/usr/lib/gcc/i686-pc-cygwin/3.4.4/include/c++/ostream:189: note:  std::basic_ostream&amp; std::basic_ostream::oper<br />
ator&lt;&lt;(short unsigned int) [with _CharT = char, _Traits = std::char_traits]<br />
/usr/lib/gcc/i686-pc-cygwin/3.4.4/include/c++/ostream:193: note:  std::basic_ostream&amp; std::basic_ostream::oper<br />
ator&lt;&lt;(int) [with _CharT = char, _Traits = std::char_traits]<br />
/usr/lib/gcc/i686-pc-cygwin/3.4.4/include/c++/ostream:204: note:  std::basic_ostream&amp; std::basic_ostream::oper<br />
ator&lt;&lt;(unsigned int) [with _CharT = char, _Traits = std::char_traits]<br />
/usr/lib/gcc/i686-pc-cygwin/3.4.4/include/c++/bits/ostream.tcc:179: note:  std::basic_ostream&amp; std::basic_ostream::operator&lt;&lt;(long long int) [with _CharT = char, _Traits = std::char_traits]<br />
/usr/lib/gcc/i686-pc-cygwin/3.4.4/include/c++/bits/ostream.tcc:214: note:  std::basic_ostream&amp; std::basic_ostream::operator&lt;&lt;(long long unsigned int) [with _CharT = char, _Traits = std::char_traits]<br />
/usr/lib/gcc/i686-pc-cygwin/3.4.4/include/c++/bits/ostream.tcc:238: note:  std::basic_ostream&amp; std::basic_ostream::operator&lt;&lt;(double) [with _CharT = char, _Traits = std::char_traits]<br />
/usr/lib/gcc/i686-pc-cygwin/3.4.4/include/c++/ostream:219: note:  std::basic_ostream&amp; std::basic_ostream::oper<br />
ator&lt;&lt;(float) [with _CharT = char, _Traits = std::char_traits]<br />
/usr/lib/gcc/i686-pc-cygwin/3.4.4/include/c++/bits/ostream.tcc:261: note:  std::basic_ostream&amp; std::basic_ostream::operator&lt;&lt;(long double) [with _CharT = char, _Traits = std::char_traits]<br />
/usr/lib/gcc/i686-pc-cygwin/3.4.4/include/c++/bits/ostream.tcc:284: note:  std::basic_ostream&amp; std::basic_ostream::operator&lt;&lt;(const void*) [with _CharT = char, _Traits = std::char_traits]<br />
/usr/lib/gcc/i686-pc-cygwin/3.4.4/include/c++/bits/ostream.tcc:307: note:  std::basic_ostream&amp; std::basic_ostream::operator&lt;&lt;(std::basic_streambuf*) [with _CharT = char, _Traits = std::char_traits]<br />
/usr/lib/gcc/i686-pc-cygwin/3.4.4/include/c++/ostream:449: note:  std::basic_ostream&amp; std::operator&lt;&lt;(std::basic_ostream&amp;, char) [with _CharT = char, _Traits = std::char_traits]<br />
/usr/lib/gcc/i686-pc-cygwin/3.4.4/include/c++/bits/ostream.tcc:505: note:  std::basic_ostream&amp; std::operator&lt;&lt;(std::basic_ostream<br />
&amp;, char) [with _Traits = std::char_traits]<br />
/usr/lib/gcc/i686-pc-cygwin/3.4.4/include/c++/ostream:460: note:  std::basic_ostream&amp; std::operator&lt;&lt;(std::basic_ostream&amp;, signed char) [with _Traits = std::char_traits]<br />
/usr/lib/gcc/i686-pc-cygwin/3.4.4/include/c++/ostream:465: note:  std::basic_ostream&amp; std::operator&lt;&lt;(std::basic_ostream&amp;, unsigned char) [with _Traits = std::char_traits]<br />
/usr/lib/gcc/i686-pc-cygwin/3.4.4/include/c++/bits/ostream.tcc:567: note:  std::basic_ostream&amp; std::operator&lt;&lt;(std::basic_ostre<br />
am&amp;, const char*) [with _CharT = char, _Traits = std::char_traits]<br />
/usr/lib/gcc/i686-pc-cygwin/3.4.4/include/c++/bits/ostream.tcc:612: note:  std::basic_ostream&amp; std::operator&lt;&lt;(std::basic_ostream<br />
&amp;, const char*) [with _Traits = std::char_traits]<br />
/usr/lib/gcc/i686-pc-cygwin/3.4.4/include/c++/ostream:499: note:  std::basic_ostream&amp; std::operator&lt;&lt;(std::basic_ostream&amp;, const signed char*) [with _Traits = std::char_traits]<br />
/usr/lib/gcc/i686-pc-cygwin/3.4.4/include/c++/ostream:504: note:  std::basic_ostream&amp; std::operator&lt;&lt;(std::basic_ostream&amp;, const unsigned char*) [with _Traits = std::char_traits]</p>
<p>Alex can you please explain why?</p>
		</div>
</li>
		<li class="comment byuser comment-author-rebelsoul even thread-odd thread-alt depth-1 clearfix" id="comment-95090">
		<div id="div-comment-95090" class="clearfix comment-container">
		<div class="comment-author vcard">
		<img alt='' src='../../../1.gravatar.com/avatar/77648e45b2cf00c4497088aa518daa39@s=65&d=http_253a_252f_252f1.gravatar.com_252favatar_252fad516503a11cd5ca435acc9bb6523536_253fs_253d65&r=g' class='avatar avatar-65 photo' height='65' width='65' />		<span class="authorname">rebelsoul</span>
		</div>
				<div class="comment-meta commentmetadata">
		<a href="comment-page-1/#comment-95090">
		January 5, 2011 at 3:30 pm</a>
        <span class="comment-reply-link"><a rel="nofollow" class="comment-reply-login" href="../../blog/wp-login.php@redirect_to=http_253a_252f_252fwww.learncpp.com_252fcpp-tutorial_252f93-overloading-the-io-operators_252f">Log in to Reply</a></span>		 
		</div>
		<p>Hello Alex,<br />
Thank you for such a good tutorial. I am facing a problem while running the above given code. I am using visual studio 2008, following your code and same input. However in result only the first input variable value is printed the rest are discarded.<br />
Here is a extract after debug.<br />
<b>cPoint	{m_dX=6.0000000000000000 m_dY=0.00000000000000000 m_dZ=0.00000000000000000<br />
</b></p>
<p>Could you please guide, why the program is not taking all the value?</p>
		</div>
</li>
		<li class="pingback odd alt thread-even depth-1 clearfix" id="comment-95167">
		<div id="div-comment-95167" class="clearfix comment-container">
		<div class="comment-author vcard">
				<span class="authorname"><a href='../../../petrstepanov.wordpress.com/2011/02/09/c-output-setf-notes/default.htm' rel='external nofollow' class='url'>C++ output setf:: notes &laquo; Petr Stepanov&#039;s Blog</a></span>
		</div>
				<div class="comment-meta commentmetadata">
		<a href="comment-page-1/#comment-95167">
		February 9, 2011 at 12:48 am</a>
        <span class="comment-reply-link"><a rel="nofollow" class="comment-reply-login" href="../../blog/wp-login.php@redirect_to=http_253a_252f_252fwww.learncpp.com_252fcpp-tutorial_252f93-overloading-the-io-operators_252f">Log in to Reply</a></span>		 
		</div>
		<p>[...] insertion operations for all of the built-in data types, and you&#8217;ve already seen how you can overload the insertion operator for your own [...]</p>
		</div>
</li>
		<li class="comment byuser comment-author-sw1983 even thread-odd thread-alt depth-1 clearfix" id="comment-95216">
		<div id="div-comment-95216" class="clearfix comment-container">
		<div class="comment-author vcard">
		<img alt='' src='../../../0.gravatar.com/avatar/25381a3697291079ba6b96f046f57209@s=65&d=http_253a_252f_252f0.gravatar.com_252favatar_252fad516503a11cd5ca435acc9bb6523536_253fs_253d65&r=g' class='avatar avatar-65 photo' height='65' width='65' />		<span class="authorname">sw1983</span>
		</div>
				<div class="comment-meta commentmetadata">
		<a href="comment-page-1/#comment-95216">
		February 28, 2011 at 1:48 am</a>
        <span class="comment-reply-link"><a rel="nofollow" class="comment-reply-login" href="../../blog/wp-login.php@redirect_to=http_253a_252f_252fwww.learncpp.com_252fcpp-tutorial_252f93-overloading-the-io-operators_252f">Log in to Reply</a></span>		 
		</div>
		<p>Hello, my compiler (visual c++ 2010) will not recognise ostream. It is saying it is an undeclared identifier. I&#8217;ve double checked and ostream is in the iostream library, I&#8217;ve included iostream. I thought it was something I was doing but I have copied and pasted Alex&#8217;s code into my program and still I get the same error. What am I missing? I haven&#8217;t written the function yet because the syntax gets underlined in red so I know it won&#8217;t compile anyway.</p>
<p><code><br />
#include &lt;iostream&gt;<br />
#include &lt;string&gt;</p>
<p>class Employee<br />
{<br />
private:<br />
	static int  sm_nID;<br />
	int			m_nID ;<br />
	char		m_strName[25];<br />
	double		m_dWage;	</p>
<p>public:<br />
	Employee(char *strName=&quot;Blank&quot;, double dWage=10.00)<br />
	{<br />
		using namespace std;<br />
		strncpy_s(m_strName, strName, 25);<br />
		m_nID = ++sm_nID;<br />
		m_dWage = dWage;<br />
	}</p>
<p>	char* GetName()<br />
	{<br />
		return m_strName;<br />
	}</p>
<p>	int GetID()<br />
	{<br />
		return m_nID;<br />
	}</p>
<p>	double GetWage()<br />
	{<br />
		return m_dWage;<br />
	}</p>
<p>	void Print()<br />
	{<br />
		using namespace std;<br />
		cout &lt;&lt; &quot;Name: &quot; &lt;&lt; m_strName &lt;&lt; &quot;\t&quot; &lt;&lt; &quot;Employee ID: &quot; &lt;&lt; m_nID &lt;&lt; &quot;\t&quot; &lt;&lt;<br />
			&quot;Wage: &quot; &lt;&lt; m_dWage &lt;&lt; &quot;\n&quot;;<br />
	}</p>
<p>	static void PrintID()<br />
	{<br />
		std::cout &lt;&lt; sm_nID;<br />
	}</p>
<p>	friend void ResetName(Employee &amp;cEmployee);<br />
	friend class FriendOfMine;<br />
	/****************************HERE**************************************************/<br />
        friend ostream&amp; operator&lt;&lt; (ostream &amp;out, Employee &amp;cEmployee);<br />
};</p>
<p>/****************************HERE**************************************************/</p>
<p>ostream&amp; operator&lt;&lt; (ostream &amp;out, Employee &amp;cEmployee)<br />
{</p>
<p>}</p>
<p>int Employee::sm_nID = 0;</p>
<p>void ResetName(Employee &amp;cEmployee)<br />
{<br />
	strncpy(cEmployee.m_strName, &quot;Reset&quot;, 25);<br />
}</p>
<p>class FriendOfMine<br />
{<br />
public:<br />
	void WageChange(Employee &amp;cEmployee)<br />
	{<br />
		cEmployee.m_dWage = 5;<br />
	}<br />
};</p>
<p>int main()<br />
{</p>
<p>	return 0;<br />
}<br />
</code></p>
		</div>
</li>
		<li class="comment byuser comment-author-sw1983 odd alt thread-even depth-1 clearfix" id="comment-95217">
		<div id="div-comment-95217" class="clearfix comment-container">
		<div class="comment-author vcard">
		<img alt='' src='../../../0.gravatar.com/avatar/25381a3697291079ba6b96f046f57209@s=65&d=http_253a_252f_252f0.gravatar.com_252favatar_252fad516503a11cd5ca435acc9bb6523536_253fs_253d65&r=g' class='avatar avatar-65 photo' height='65' width='65' />		<span class="authorname">sw1983</span>
		</div>
				<div class="comment-meta commentmetadata">
		<a href="comment-page-1/#comment-95217">
		February 28, 2011 at 3:47 am</a>
        <span class="comment-reply-link"><a rel="nofollow" class="comment-reply-login" href="../../blog/wp-login.php@redirect_to=http_253a_252f_252fwww.learncpp.com_252fcpp-tutorial_252f93-overloading-the-io-operators_252f">Log in to Reply</a></span>		 
		</div>
		<p>Nevermind I&#8217;d forgotten to use the namespace. haha, kick myself.</p>
		</div>
</li>
	
	</ul>
	<!-- / Comment List -->

	



	
	<p>You must be <a href="../../blog/wp-login.php@redirect_to=http_253a_252f_252fwww.learncpp.com_252fcpp-tutorial_252f93-overloading-the-io-operators_252f">logged in</a> to post a comment.</p>

		

<div class="clearfix navigation-bottom">
		<div class="older">&laquo; <a href="../92-overloading-the-arithmetic-operators/default.htm" rel="prev">9.2 &#8212; Overloading the arithmetic operators</a> &nbsp;</div><div class="newer">&nbsp; <a href="../94-overloading-the-comparison-operators/default.htm" rel="next">9.4 &#8212; Overloading the comparison operators</a> &raquo;</div></div>		
			



</td>
<!-- / Main Column -->


<!-- Right Sidebar -->
<td id="right">

	<div id="text-1" class="widget widget_text">			<div class="textwidget"><script type="text/javascript"><!--
google_ad_client = "pub-0588844875925051";
/* Wide Skyscraper Right Bar */
google_ad_slot = "0955932809";
google_ad_width = 160;
google_ad_height = 600;
//-->
</script>
<acript type="text/javascript"
src="../../../pagead2.googlesyndication.com/pagead/show_ads.js">
</script></div>
		</div><div id="archives-2" class="widget widget_archive"><div class="widget-title"><h3>Archives</h3></div>		<ul>
			<li><a href='../../2011/11/default.htm' title='November 2011'>November 2011</a></li>
	<li><a href='../../2011/10/default.htm' title='October 2011'>October 2011</a></li>
	<li><a href='../../2011/09/default.htm' title='September 2011'>September 2011</a></li>
	<li><a href='../../2010/10/default.htm' title='October 2010'>October 2010</a></li>
	<li><a href='../../2010/07/default.htm' title='July 2010'>July 2010</a></li>
	<li><a href='../../2009/10/default.htm' title='October 2009'>October 2009</a></li>
	<li><a href='../../2009/09/default.htm' title='September 2009'>September 2009</a></li>
	<li><a href='../../2009/03/default.htm' title='March 2009'>March 2009</a></li>
	<li><a href='../../2008/12/default.htm' title='December 2008'>December 2008</a></li>
	<li><a href='../../2008/10/default.htm' title='October 2008'>October 2008</a></li>
	<li><a href='../../2008/09/default.htm' title='September 2008'>September 2008</a></li>
	<li><a href='../../2008/08/default.htm' title='August 2008'>August 2008</a></li>
	<li><a href='../../2008/06/default.htm' title='June 2008'>June 2008</a></li>
	<li><a href='../../2008/05/default.htm' title='May 2008'>May 2008</a></li>
	<li><a href='../../2008/04/default.htm' title='April 2008'>April 2008</a></li>
	<li><a href='../../2008/03/default.htm' title='March 2008'>March 2008</a></li>
	<li><a href='../../2008/02/default.htm' title='February 2008'>February 2008</a></li>
	<li><a href='../../2008/01/default.htm' title='January 2008'>January 2008</a></li>
	<li><a href='../../2007/12/default.htm' title='December 2007'>December 2007</a></li>
	<li><a href='../../2007/11/default.htm' title='November 2007'>November 2007</a></li>
	<li><a href='../../2007/10/default.htm' title='October 2007'>October 2007</a></li>
	<li><a href='../../2007/09/default.htm' title='September 2007'>September 2007</a></li>
	<li><a href='../../2007/08/default.htm' title='August 2007'>August 2007</a></li>
	<li><a href='../../2007/07/default.htm' title='July 2007'>July 2007</a></li>
	<li><a href='../../2007/06/default.htm' title='June 2007'>June 2007</a></li>
	<li><a href='../../2007/05/default.htm' title='May 2007'>May 2007</a></li>
		</ul>
</div>
</td>
<!-- / Right Sidebar -->

</tr>
<!-- / Main Body -->
<tr>

<!-- Footer -->
<td id="footer" colspan="3">

    <p>
    Copyright &copy; 2011 <a href="../../default.htm">Learn C++</a> - All Rights Reserved<br />Powered by <a href="../../../wordpress.org/default.htm">WordPress</a> &amp; the <a href="../../../wordpress.bytesforall.com/default.htm" title="Customizable WordPress themes">Atahualpa Theme</a> by <a href="../../../www.bytesforall.com/default.htm" title="BFA Webdesign">BytesForAll</a>. Discuss on our <a href="../../../forum.bytesforall.com/default.htm" title="Atahualpa &amp; WordPress">WP Forum</a>    </p>
    
    
    <script type='text/javascript' src='../../blog/wp-content/plugins/syntaxhighlighter/syntaxhighlighter3/scripts/shcore.js@ver=3.0.83c'></script>
<script type='text/javascript' src='../../blog/wp-content/plugins/syntaxhighlighter/syntaxhighlighter3/scripts/shbrushcpp.js@ver=3.0.83c'></script>
<script type='text/javascript'>
	(function(){
		var corecss = document.createElement('link');
		var themecss = document.createElement('link');
		var corecssurl = "../../blog/wp-content/plugins/syntaxhighlighter/syntaxhighlighter3/styles/shcore.css@ver=3.0.83c.css";
		if ( corecss.setAttribute ) {
				corecss.setAttribute( "rel", "stylesheet" );
				corecss.setAttribute( "type", "text/css" );
				corecss.setAttribute( "href", corecssurl );
		} else {
				corecss.rel = "stylesheet";
				corecss.href = corecssurl;
		}
		document.getElementsByTagName("head")[0].insertBefore( corecss, document.getElementById("syntaxhighlighteranchor") );
		var themecssurl = "../../blog/wp-content/plugins/syntaxhighlighter/syntaxhighlighter3/styles/shthemedefault.css@ver=3.0.83c.css";
		if ( themecss.setAttribute ) {
				themecss.setAttribute( "rel", "stylesheet" );
				themecss.setAttribute( "type", "text/css" );
				themecss.setAttribute( "href", themecssurl );
		} else {
				themecss.rel = "stylesheet";
				themecss.href = themecssurl;
		}
		//document.getElementById("syntaxhighlighteranchor").appendChild(themecss);
		document.getElementsByTagName("head")[0].insertBefore( themecss, document.getElementById("syntaxhighlighteranchor") );
	})();
	SyntaxHighlighter.config.strings.expandSource = '+ expand source';
	SyntaxHighlighter.config.strings.help = '?';
	SyntaxHighlighter.config.strings.alert = 'SyntaxHighlighter\n\n';
	SyntaxHighlighter.config.strings.noBrush = 'Can\'t find brush for: ';
	SyntaxHighlighter.config.strings.brushNotHtmlScript = 'Brush wasn\'t configured for html-script option: ';
	SyntaxHighlighter.defaults['pad-line-numbers'] = false;
	SyntaxHighlighter.defaults['toolbar'] = false;
	SyntaxHighlighter.all();
</script>
<!--stats_footer_test--><script src="../../../stats.wordpress.com/e-201148.js" type="text/javascript"></script>
<script type="text/javascript">
st_go({blog:'3928254',v:'ext',post:'139'});
var load_cmc = function(){linktracker_init(3928254,139,2);};
if ( typeof addLoadEvent != 'undefined' ) addLoadEvent(load_cmc);
else load_cmc();
</script>

</td>
<!-- / Footer -->

</tr>
</table><!-- / layout -->
</div><!-- / container -->
</div><!-- / wrapper -->
</body>
</html>
<!-- Dynamic page generated in 0.540 seconds. -->
<!-- Cached page generated by WP-Super-Cache on 2011-12-02 05:57:44 -->
<!-- Compression = gzip -->