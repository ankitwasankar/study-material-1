<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd"><meta http-equiv="Content-Type" content="text/html; charset=utf-8"><!-- saved from url=(0060)http://www.learncpp.com/cpp-tutorial/24-integers/default.htm -->

<html xmlns="http://www.w3.org/1999/xhtml" dir="ltr" lang="en-US">
<head>
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8" />
<meta http-equiv="X-UA-Compatible" content="IE=EmulateIE7" />
<title>2.4 &#8212; Integers &laquo; Learn C++</title>
<link rel="shortcut icon" href="../../blog/wp-content/themes/atahualpa353/images/favicon/learncpp.ico" /><link rel="canonical" href="default.htm" /><link rel="alternate" type="application/rss+xml" title="Learn C++ RSS Feed" href="../../feed/default.htm" />
<link rel="alternate" type="application/atom+xml" title="Learn C++ Atom Feed" href="../../feed/atom/default.htm" />
<link rel="pingback" href="http://www.learncpp.com/blog/xmlrpc.php" />
<link rel="alternate" type="application/rss+xml" title="Learn C++ &raquo; 2.4 &#8212; Integers Comments Feed" href="feed/default.htm" />
<script type='text/javascript' src='../../blog/wp-includes/js/l10n.js@ver=20101110'></script>
<script type='text/javascript' src='../../blog/wp-includes/js/jquery/jquery.js@ver=1.6.1'></script>
<script type='text/javascript' src='../../blog/wp-includes/js/comment-reply.js@ver=20090102'></script>
<script type='text/javascript' src='../../blog/wp-content/plugins/google-analyticator/external-tracking.min.js@ver=6.2'></script>
<link rel="EditURI" type="application/rsd+xml" title="RSD" href="http://www.learncpp.com/blog/xmlrpc.php?rsd" />
<link rel="wlwmanifest" type="application/wlwmanifest+xml" href="../../blog/wp-includes/wlwmanifest.xml" /> 
<link rel='index' title='Learn C++' href='../../default.htm' />
<link rel='start' title='Welcome to LearnCpp.com!' href='../../site-news/this-is-a-news-test-post/default.htm' />
<link rel='prev' title='We apologize for the downtime' href='../../site-news/we-apologize-for-the-downtime/default.htm' />
<link rel='next' title='2.5 &#8212; Floating point numbers' href='../25-floating-point-numbers/default.htm' />
<link rel='canonical' href='default.htm' />
<link rel='shortlink' href='../../../wp.me/pgtuw-i' />
<meta name="ROBOTS" content="INDEX" />

<!-- Powered by AdSense-Deluxe WordPress Plugin v0.8 - http://www.acmetech.com/blog/adsense-deluxe/ -->
<!-- wpSolution Code -->
        <script type="text/javascript">
            function wpSolutionToggle(solution, link, showtext, hidetext) {
                if (solution.style.display != 'none') {
                    solution.style.display = 'none';
                    link.innerHTML = showtext;
                    link.className = 'solution_link_show';
                } else {
                    solution.style.display = 'block';
                    link.innerHTML = hidetext;
                    link.className = 'solution_link_hide';
                }
            }
          </script>
<style type="text/css">body{text-align:center;margin:0;padding:0;font-family:verdana,arial,sans-serif;font-size:13px;line-height:1.4;color:#000000;background:#ddd;padding-top:20px;padding-bottom:20px}a:link,a:visited,a:active{color:#365DA0;font-weight:bold;text-decoration:none;}a:hover{color:#365DA0;font-weight:bold;text-decoration:underline}ul,ol,dl,p,h1,h2,h3,h4,h5,h6{margin-top:10px;margin-bottom:10px;padding-top:0;padding-bottom:0;}ul ul,ul ol,ol ul,ol ol{margin-top:0;margin-bottom:0}code,pre{font-family:"Courier New",Courier,monospace;font-size:1em}pre{overflow:auto;word-wrap:normal;padding-bottom:1.5em;overflow-y:hidden;width:99%}abbr[title],acronym[title]{border-bottom:1px dotted}hr{display:block;height:2px;border:none;margin:0.5em auto;color:#cccccc;background-color:#cccccc}table{font-size:1em;}div.post,ul.commentlist li,ol.commentlist li{word-wrap:break-word;}pre,.wp_syntax{word-wrap:normal;}div#wrapper{text-align:center;margin-left:auto;margin-right:auto;display:block;width:98%}* html div#wrapper{<!--width:expression"98%");-->}div#container{padding:20px;background:#fff;box-shadow:0 0 15px #333;-moz-box-shadow:0 0 15px #333;padding-left:20px;padding-right:20px;width:auto;margin-left:auto;margin-right:auto;text-align:left;display:block}table#layout{font-size:100%;width:100%;table-layout:fixed}.colone{width:200px}.colone-inner{width:200px}.coltwo{width:100% }.colthree-inner{width:200px}.colthree{width:200px}td#header{width:auto;padding:0}table#logoarea,table#logoarea tr,table#logoarea td{margin:0;padding:0;background:none;border:0}table#logoarea{width:100%;border-spacing:0px}img.logo{display:block;margin:0 10px 0 0}td.logoarea-logo{width:1%}h1.blogtitle,h2.blogtitle{ display:block;margin:0;padding:0;letter-spacing:-1px;line-height:1.0em;font-size:200%;text-transform:uppercase;font-smooth:always}h1.blogtitle a:link,h1.blogtitle a:visited,h1.blogtitle a:active,h2.blogtitle a:link,h2.blogtitle a:visited,h2.blogtitle a:active{ text-decoration:none;color:#000000;font-weight:normal;font-smooth:always}h1.blogtitle a:hover,h2.blogtitle a:hover{ text-decoration:none;color:#AC161B;font-weight:normal}p.tagline{margin:0;padding:0;font-size:1.2em;font-weight:normal;color:#444}td.feed-icons{white-space:nowrap;}div.rss-box{height:1%;display:block;padding:10px 0 10px 10px;margin:0;width:280px}a.comments-icon{height:22px;line-height:22px;margin:0 5px 0 5px;padding-left:22px;display:block;text-decoration:none;float:right;white-space:nowrap}a.comments-icon:link,a.commentss-icon:active,a.comments-icon:visited{background:transparent url(../../blog/wp-content/themes/atahualpa353/images/comment-gray.png) no-repeat scroll center left}a.comments-icon:hover{background:transparent url(../../blog/wp-content/themes/atahualpa353/images/comment.png) no-repeat scroll center left}a.posts-icon{height:22px;line-height:22px;margin:0 5px 0 0;padding-left:20px;display:block;text-decoration:none;float:right;white-space:nowrap}a.posts-icon:link,a.posts-icon:active,a.posts-icon:visited{background:transparent url(../../blog/wp-content/themes/atahualpa353/images/rss-gray.png) no-repeat scroll center left}a.posts-icon:hover{background:transparent url(../../blog/wp-content/themes/atahualpa353/images/rss.png) no-repeat scroll center left}a.email-icon{height:22px;line-height:22px;margin:0 5px 0 5px;padding-left:24px;display:block;text-decoration:none;float:right;white-space:nowrap}a.email-icon:link,a.email-icon:active,a.email-icon:visited{background:transparent url(../../blog/wp-content/themes/atahualpa353/images/email-gray.png) no-repeat scroll center left}a.email-icon:hover{background:transparent url(../../blog/wp-content/themes/atahualpa353/images/email.png) no-repeat scroll center left}td.search-box{height:1%}div.searchbox{height:35px;border-bottom:0;width:200px;margin:0;padding:0}div.searchbox-form{margin:5px 10px 5px 10px}div.horbar1,div.horbar2{font-size:1px;clear:both;display:block;position:relative;padding:0;margin:0;width:100%;}div.horbar1{height:0px;background:#ffffff;border-top:dashed 1px #cccccc}div.horbar2{height:0px;background:#ffffff;border-bottom:dashed 1px #cccccc}div.header-image-container{position:relative;margin:0;padding:0;height:150px;}div.clickable{position:absolute;top:0;left:0;z-index:3;margin:0;padding:0;width:100%;height:150px;}a.divclick:link,a.divclick:visited,a.divclick:active,a.divclick:hover{width:100%;height:100%;display:block;text-decoration:none}td#left{vertical-align:top;padding-right:20px}td#left-inner{vertical-align:top;padding-right:10px}td#right{vertical-align:top;padding-left:20px}td#right-inner{vertical-align:top;padding-left:10px}td#middle{vertical-align:top;width:100%;padding:10px 15px}td#footer{width:auto;background-color:#f7f7f7;border-top:solid 4px #eee;padding:10px;text-align:center;color:#888;font-size:11px}td#footer a:link,td#footer a:visited,td#footer a:active{text-decoration:none;color:#777777;font-weight:normal}td#footer a:hover{text-decoration:none;color:#777777;font-weight:normal}div.widget{display:block;width:auto;font-size:12px;margin:0 0 10px 0;padding:10px;border:solid 4px #eee}div.widget-title{display:block;width:auto}div.widget-title h3,td#left h3.tw-widgettitle,td#right h3.tw-widgettitle,td#left ul.tw-nav-list,td#right ul.tw-nav-list{padding:0;margin:0;font-size:0.9em;text-align:center;font-weight:normal;text-transform:uppercase;letter-spacing:1px;color:#333;border-bottom:solid 1px #eee;padding-bottom:10px;margin-bottom:10px}div.widget ul,div.textwidget{display:block;width:auto}div.widget select{width:98%;margin-top:5px;}div.widget ul{list-style-type:none;margin:0;padding:0;width:auto}div.widget ul li{display:block;margin:2px 0 2px 0px;padding:0 0 0 0px;border-left:solid 0px #CCCCCC}div.widget ul li:hover,div.widget ul li.sfhover{display:block;width:auto;border-left:solid 0px #000000;}div.widget ul li ul li{margin:2px 0 2px 5px;padding:0 0 0 0px;border-left:solid 0px #CCCCCC;}div.widget ul li ul li:hover,div.widget ul li ul li.sfhover{border-left:solid 0px #000000;}div.widget ul li ul li ul li{margin:2px 0 2px 5px;padding:0 0 0 0px;border-left:solid 0px #CCCCCC;}div.widget ul li ul li ul li:hover,div.widget ul li ul li ul li.sfhover{border-left:solid 0px #000000;}div.widget td a:link,div.widget td a:visited,div.widget td a:active,div.widget ul li a:link,div.widget ul li a:visited,div.widget ul li a:active{text-decoration:none;font-weight:normal;color:#365DA0;font-weight:normal;}div.widget ul li ul li a:link,div.widget ul li ul li a:visited,div.widget ul li ul li a:active{color:#365DA0;font-weight:normal;}div.widget ul li ul li ul li a:link,div.widget ul li ul li ul li a:visited,div.widget ul li ul li ul li a:active{color:#365DA0;font-weight:normal;}div.widget ul li a:hover{color:#365DA0;}div.widget ul li ul li a:hover{color:#365DA0;}div.widget ul li ul li ul li a:hover{color:#365DA0;}div.widget ul li a:link,div.widget ul li a:visited,div.widget ul li a:active,div.widget ul li a:hover{display:inline}* html div.widget ul li a:link,* html div.widget ul li a:visited,* html div.widget ul li a:active,* html div.widget ul li a:hover{height:1%; } div.widget_pages ul li,div.widget_categories ul li{border-left:0 !important;padding:0 !important}div.widget_pages ul li a:link,div.widget_pages ul li a:visited,div.widget_pages ul li a:active,div.widget_categories ul li a:link,div.widget_categories ul li a:visited,div.widget_categories ul li a:active{padding:0 0 0 0px;border-left:solid 0px #CCCCCC}div.widget_pages ul li a:hover,div.widget_categories ul li a:hover{border-left:solid 0px #000000;}div.widget_pages ul li ul li a:link,div.widget_pages ul li ul li a:visited,div.widget_pages ul li ul li a:active,div.widget_categories ul li ul li a:link,div.widget_categories ul li ul li a:visited,div.widget_categories ul li ul li a:active{padding:0 0 0 0px;border-left:solid 0px #CCCCCC}div.widget_pages ul li ul li a:hover,div.widget_categories ul li ul li a:hover{border-left:solid 0px #000000;}div.widget_pages ul li ul li ul li a:link,div.widget_pages ul li ul li ul li a:visited,div.widget_pages ul li ul li ul li a:active,div.widget_categories ul li ul li ul li a:link,div.widget_categories ul li ul li ul li a:visited,div.widget_categories ul li ul li ul li a:active{padding:0 0 0 0px;border-left:solid 0px #CCCCCC}div.widget_pages ul li ul li ul li a:hover,div.widget_categories ul li ul li ul li a:hover{border-left:solid 0px #000000;}div.widget_pages ul li a:link,div.widget_pages ul li a:active,div.widget_pages ul li a:visited,div.widget_pages ul li a:hover{display:block !important}div.widget_categories ul li a:link,div.widget_categories ul li a:active,div.widget_categories ul li a:visited,div.widget_categories ul li a:hover{display:inline !important}table.subscribe{width:100%}table.subscribe td.email-text{padding:0 0 5px 0;vertical-align:top}table.subscribe td.email-field{padding:0;width:100%}table.subscribe td.email-button{padding:0 0 0 5px}table.subscribe td.post-text{padding:7px 0 0 0;vertical-align:top}table.subscribe td.comment-text{padding:7px 0 0 0;vertical-align:top}div.post,div.page{display:block;margin:0 0 30px 0;border-top:solid 4px #eee;padding-top:20px}div.sticky{background:#eee url('../../blog/wp-content/themes/atahualpa353/images/sticky.gif') 99% 5% no-repeat;border:dashed 1px #cccccc;padding:10px}div.post-kicker{margin:0 0 5px 0}div.post-kicker a:link,div.post-kicker a:visited,div.post-kicker a:active{color:#999;text-decoration:none;text-transform:uppercase;letter-spacing:1px}div.post-kicker a:hover{color:#cc0000}div.post-headline{}div.post-headline h1,div.post-headline h2{ margin:0; padding:0;padding:0;margin:0;font-size:1.7em}div.post-headline h2 a:link,div.post-headline h2 a:visited,div.post-headline h2 a:active,div.post-headline h1 a:link,div.post-headline h1 a:visited,div.post-headline h1 a:active{}div.post-headline h2 a:hover,div.post-headline h1 a:hover{}div.post-byline{margin:5px 0 10px 0;color:#999;text-transform:uppercase;letter-spacing:1px;font-size:11px}div.post-byline a:link,div.post-byline a:visited,div.post-byline a:active{}div.post-byline a:hover{}div.post-bodycopy{}div.post-bodycopy p{margin:1em 0;padding:0;display:block}div.post-pagination{}div.post-footer{clear:both;display:block;color:#999;text-transform:uppercase;letter-spacing:1px;font-size:11px}div.post-footer a:link,div.post-footer a:visited,div.post-footer a:active{color:#999;font-weight:normal;text-decoration:none}div.post-footer a:hover{color:#333;font-weight:normal;text-decoration:underline}div.post-kicker img,div.post-byline img,div.post-footer img{border:0;padding:0;margin:0 0 -1px 0;background:none}span.post-ratings{display:inline-block;width:auto;white-space:nowrap}div.navigation-top{border-top:solid 4px #eee;padding:8px 0}div.navigation-middle{margin:10px 0 20px 0;padding:8px 0;border-top:solid 4px #eee;border-bottom:solid 4px #eee}div.navigation-bottom{margin:20px 0 0 0;padding:10px 0 0 0;border-top:solid 4px #eee}div.navigation-comments-above{margin:0 0 10px 0;padding:5px 0 5px 0}div.navigation-comments-below{margin:0 0 10px 0;padding:5px 0 5px 0}div.older{float:left;width:48%;text-align:left;margin:0;padding:0}div.newer{float:right;width:48%;text-align:right;margin:0;padding:0;}div.older-home{float:left;width:44%;text-align:left;margin:0;padding:0}div.newer-home{float:right;width:44%;text-align:right;margin:0;padding:0;}div.home{float:left;width:8%;text-align:center;margin:0;padding:0}form,.feedburner-email-form{margin:0;padding:0;}fieldset{border:1px solid #cccccc;width:auto;padding:0.35em 0.625em 0.75em;display:block;}legend{color:#000000;background:#f4f4f4;border:1px solid #cccccc;padding:2px 6px;margin-bottom:15px;}form p{margin:5px 0 0 0;padding:0;}div.xhtml-tags p{margin:0}label{margin-right:0.5em;font-family:arial;cursor:pointer;}input.text,input.textbox,input.password,input.file,input.TextField,textarea{padding:3px;color:#000000;border-top:solid 1px #333333;border-left:solid 1px #333333;border-right:solid 1px #999999;border-bottom:solid 1px #cccccc;background:url(../../blog/wp-content/themes/atahualpa353/images/inputbackgr.gif) top left no-repeat}textarea{width:96%;}input.inputblur{color:#777777;width:95%}input.inputfocus{color:#000000;width:95%}input.highlight,textarea.highlight{background:#e8eff7;border-color:#37699f}.button,.Button{padding:0 2px;height:24px;line-height:16px;background-color:#777777;color:#ffffff;border:solid 2px #555555;font-weight:bold}.buttonhover{padding:0 2px;cursor:pointer;background-color:#6b9c6b;color:#ffffff;border:solid 2px #496d49}form#commentform input#submit{ padding:0 .25em; width:0; overflow:visible}form#commentform input#submit[class]{width:auto}form#commentform input#submit{padding:4px 10px 4px 10px;font-size:1.2em;line-height:1.5em;height:36px}table.searchform{width:100%}table.searchform td.searchfield{padding:0;width:100%}table.searchform td.searchbutton{padding:0 0 0 5px}table.searchform td.searchbutton input{padding:0 0 0 5px}blockquote{height:1%;display:block;clear:both;color:#555555;padding:1em 1em;background:#f4f4f4;border:solid 1px #e1e1e1}blockquote blockquote{height:1%;display:block;clear:both;color:#444444;padding:1em 1em;background:#e1e1e1;border:solid 1px #d3d3d3}div.post table{border-collapse:collapse;margin:10px 0}div.post table caption{width:auto;margin:0 auto;background:#eeeeee;border:#999999;padding:4px 8px;color:#666666}div.post table th{background:#888888;color:#ffffff;font-weight:bold;font-size:90%;padding:4px 8px;border:solid 1px #ffffff;text-align:left}div.post table td{padding:4px 8px;background-color:#ffffff;border-bottom:1px solid #dddddd;text-align:left}div.post table tfoot td{}div.post table tr.alt td{background:#f4f4f4}div.post table tr.over td{background:#e2e2e2}#calendar_wrap{padding:0;border:none}table#wp-calendar{width:100%;font-size:90%;border-collapse:collapse;background-color:#ffffff;margin:0 auto}table#wp-calendar caption{width:auto;background:#eeeeee;border:none;;padding:3px;margin:0 auto;font-size:1em}table#wp-calendar th{border:solid 1px #eeeeee;background-color:#999999;color:#ffffff;font-weight:bold;padding:2px;text-align:center}table#wp-calendar td{padding:0;line-height:18px;background-color:#ffffff;border:1px solid #dddddd;text-align:center}table#wp-calendar tfoot td{border:solid 1px #eeeeee;background-color:#eeeeee}table#wp-calendar td a{display:block;background-color:#eeeeee;width:100%;height:100%;padding:0}div#respond{margin:25px 0;padding:25px;background:#eee;-moz-border-radius:8px;-khtml-border-radius:8px;-webkit-border-radius:8px;border-radius:8px;}p.thesetags{margin:10px 0}h3.reply{margin:0;padding:0 0 10px 0}ol.commentlist{margin:15px 0 25px 0;list-style-type:none;padding:0;display:block;border-top:dotted 1px #cccccc}ol.commentlist li{padding:15px 10px;display:block;height:1%;margin:0;background-color:#FFFFFF;border-bottom:dotted 1px #cccccc}ol.commentlist li.alt{display:block;height:1%;background-color:#EEEEEE;border-bottom:dotted 1px #cccccc}ol.commentlist li.authorcomment{display:block;height:1%;background-color:#D8D8FA}ol.commentlist span.authorname{font-weight:bold;font-size:110%}ol.commentlist span.commentdate{color:#666666;font-size:90%;margin-bottom:5px;display:block}ol.commentlist span.editcomment{display:block}ol.commentlist li p{margin:2px 0 5px 0}div.comment-number{float:right;font-size:2em;line-height:2em;font-family:georgia,serif;font-weight:bold;color:#ddd;margin:-10px 0 0 0;position:relative;height:1%}div.comment-number a:link,div.comment-number a:visited,div.comment-number a:active{color:#ccc}textarea#comment{width:98%;margin:10px 0;display:block}ul.commentlist{margin:15px 0 15px 0;list-style-type:none;padding:0;display:block;border-top:dotted 1px #cccccc}ul.commentlist ul{margin:0;border:none;list-style-type:none;padding:0}ul.commentlist li{padding:0; margin:0;display:block;clear:both;height:1%;}ul.commentlist ul.children li{ margin-left:30px}ul.commentlist div.comment-container{padding:10px;margin:0}ul.children div.comment-container{background-color:transparent;border:dotted 1px #ccc;padding:10px;margin:0 10px 8px 0; -moz-border-radius:5px; -khtml-border-radius:5px; -webkit-border-radius:5px; border-radius:5px}ul.children div.bypostauthor{}ul.commentlist li.thread-even{background-color:#FFFFFF;border-bottom:dotted 1px #cccccc}ul.commentlist li.thread-odd{background-color:#EEEEEE;border-bottom:dotted 1px #cccccc}ul.commentlist div.bypostauthor{background-color:#D8D8FA}ul.children div.bypostauthor{border:dotted 1px #BFBCFB}ul.commentlist span.authorname{font-size:110%}div.comment-meta a:link,div.comment-meta a:visited,div.comment-meta a:active,div.comment-meta a:hover{font-weight:normal}div#cancel-comment-reply{margin:-5px 0 10px 0}div.comment-number{float:right;font-size:2em;line-height:2em;font-family:georgia,serif;font-weight:bold;color:#ddd;margin:-10px 0 0 0;position:relative;height:1%}div.comment-number a:link,div.comment-number a:visited,div.comment-number a:active{color:#ccc}.page-numbers{padding:2px 6px;border:solid 1px #000000;-moz-border-radius:6px;-khtml-border-radius:6px;-webkit-border-radius:6px;border-radius:6px}span.current{background:#ddd}a.prev,a.next{border:none}a.page-numbers:link,a.page-numbers:visited,a.page-numbers:active{text-decoration:none;color:#365DA0;border-color:#365DA0}a.page-numbers:hover{text-decoration:none;color:#365DA0;border-color:#365DA0}div.xhtml-tags{display:none}abbr em{border:none !important;border-top:dashed 1px #aaa !important;display:-moz-inline-box !important;display:inline-block !important;background:url(../../blog/wp-content/themes/atahualpa353/images/commentluv.gif) 0% 90% no-repeat;margin-top:8px;padding:5px 5px 2px 20px !important;font-style:normal}p.subscribe-to-comments{margin-bottom:10px}div#gsHeader{display:none;}div.g2_column{margin:0 !important;width:100% !important;font-size:1.2em}div#gsNavBar{border-top-width:0 !important}p.giDescription{font-size:1.2em;line-height:1 !important}p.giTitle{margin:0.3em 0 !important;font-size:1em;font-weight:normal;color:#666}div#wp-email img{border:0;padding:0}div#wp-email input,div#wp-email textarea{margin-top:5px;margin-bottom:2px}div#wp-email p{margin-bottom:10px}input#wp-email-submit{ padding:0; font-size:30px; height:50px; line-height:50px; overflow:visible;}img.WP-EmailIcon{ vertical-align:text-bottom !important}.tw-accordion .tw-widgettitle,.tw-accordion .tw-widgettitle:hover,.tw-accordion .tw-hovered,.tw-accordion .selected,.tw-accordion .selected:hover{ background:transparent !important; background-image:none !important}.tw-accordion .tw-widgettitle span{ padding-left:0 !important}.tw-accordion h3.tw-widgettitle{border-bottom:solid 1px #ccc}.tw-accordion h3.selected{border-bottom:none}td#left .without_title,td#right .without_title{ margin-top:0;margin-bottom:0}ul.tw-nav-list{border-bottom:solid 1px #999;display:block;margin-bottom:5px !important}td#left ul.tw-nav-list li,td#right ul.tw-nav-list li{padding:0 0 1px 0;margin:0 0 -1px 5px; border:solid 1px #ccc;border-bottom:none;-moz-border-radius:5px;-khtml-border-radius:5px;-webkit-border-radius:5px;border-radius:5px;-moz-border-radius-bottomright:0;-moz-border-radius-bottomleft:0;-webkit-border-bottom-right-radius:0;-webkit-border-bottom-left-radius:0;border-bottom-right-radius:0;border-bottom-left-radius:0;background:#eee}td#left ul.tw-nav-list li.ui-tabs-selected,td#right ul.tw-nav-list li.ui-tabs-selected{ background:none;border:solid 1px #999;border-bottom:solid 1px #fff !important}ul.tw-nav-list li a:link,ul.tw-nav-list li a:visited,ul.tw-nav-list li a:active,ul.tw-nav-list li a:hover{padding:0 8px !important;background:none;border-left:none !important;outline:none}td#left ul.tw-nav-list li.ui-tabs-selected a,td#left li.ui-tabs-selected a:hover,td#right ul.tw-nav-list li.ui-tabs-selected a,td#right li.ui-tabs-selected a:hover{ color:#000000; text-decoration:none;font-weight:bold;background:none !important;outline:none}td#left .ui-tabs-panel,td#right .ui-tabs-panel{ margin:0; padding:0}img{border:0}#dbem-location-map img{ background:none !important}.post img{padding:5px;border:solid 1px #dddddd;background-color:#f3f3f3;-moz-border-radius:3px;-khtml-border-radius:3px;-webkit-border-radius:3px;border-radius:3px;}.post img.size-full{max-width:96%;width:auto 100%;margin:5px 0 5px 0}div.post img[class~=size-full]{height:auto;}.post img.alignleft{float:left;margin:10px 10px 5px 0;}.post img.alignright{float:right;margin:10px 0 5px 10px;}.post img.aligncenter{display:block;margin:10px auto}.aligncenter,div.aligncenter{ display:block; margin-left:auto; margin-right:auto}.alignleft,div.alignleft{float:left;margin:10px 10px 5px 0}.alignright,div.alignright{ float:right; margin:10px 0 5px 10px}div.archives-page img{border:0;padding:0;background:none;margin-bottom:0;vertical-align:-10%}.wp-caption{max-width:96%;width:auto 100%;height:auto;display:block;border:1px solid #dddddd;text-align:center;background-color:#f3f3f3;padding-top:4px;margin:10px 0 0 0;-moz-border-radius:3px;-khtml-border-radius:3px;-webkit-border-radius:3px;border-radius:3px;}* html .wp-caption{height:100%;}.wp-caption img{ margin:0 !important; padding:0 !important; border:0 none !important}.wp-caption p.wp-caption-text{font-size:0.8em;line-height:13px;padding:2px 4px 5px;margin:0;color:#666666}img.wp-post-image{float:left;border:0;padding:0;background:none;margin:0 10px 5px 0}img.wp-smiley{ float:none;border:none !important;margin:0 1px -1px 1px;padding:0 !important;background:none !important}img.avatar{float:left;display:block;margin:0 8px 1px 0;padding:3px;border:solid 1px #ddd;background-color:#f3f3f3;-moz-border-radius:3px;-khtml-border-radius:3px;-webkit-border-radius:3px;border-radius:3px;}#comment_quicktags{text-align:left;padding:10px 0 2px 0;display:block}#comment_quicktags input.ed_button{background:#f4f4f4;border:2px solid #cccccc;color:#444444;margin:2px 4px 2px 0;width:auto;padding:0 4px;height:24px;line-height:16px}#comment_quicktags input.ed_button_hover{background:#dddddd;border:2px solid #666666;color:#000000;margin:2px 4px 2px 0;width:auto;padding:0 4px;height:24px;line-height:16px;cursor:pointer}#comment_quicktags #ed_strong{font-weight:bold}#comment_quicktags #ed_em{font-style:italic}@media print{body{background:white;color:black;margin:0;font-size:10pt !important;font-family:arial,sans-serif;}div.post-footer{line-height:normal !important;color:#555 !important;font-size:9pt !important}a:link,a:visited,a:active,a:hover{text-decoration:underline !important;color:#000}h2{color:#000;font-size:14pt !important;font-weight:normal !important}h3{color:#000;font-size:12pt !important;}#header,#footer,.colone,.colthree,.navigation,.navigation-top,.navigation-middle,.navigation-bottom,.wp-pagenavi-navigation,#comment,#respond,.remove-for-print{display:none}td#left,td#right,td#left-inner,td#right-inner{width:0}td#middle{width:100%}*:lang(en) td#left{ display:none}*:lang(en) td#right{ display:none}*:lang(en) td#left-inner{ display:none}*:lang(en) td#right-inner{ display:none}td#left:empty{ display:none}td#right:empty{ display:none}td#left-inner:empty{ display:none}td#right-inner:empty{ display:none}}ul.rMenu,ul.rMenu ul,ul.rMenu li,ul.rMenu a{display:block;margin:0;padding:0}ul.rMenu,ul.rMenu li,ul.rMenu ul{list-style:none}ul.rMenu ul{display:none}ul.rMenu li{position:relative;z-index:1}ul.rMenu li:hover{z-index:999}ul.rMenu li:hover > ul{display:block;position:absolute}ul.rMenu li:hover{background-position:0 0} ul.rMenu-hor li{float:left;width:auto}ul.rMenu-hRight li{float:right}ul.rMenu-ver li{float:none}.clearfix:after{ content:".";display:block;height:0;clear:both;visibility:hidden}.clearfix{min-width:0;display:inline-block;display:block}* html .clearfix{height:1%;}.clearboth{clear:both;height:1%;font-size:1%;line-height:1%;display:block;padding:0;margin:0}td#header{padding-bottom:15px;}td#middle{padding:0}div.searchbox-form{margin:5px 0 15px 5px}div#menu1 ul.rMenu{background:transparent;border:none}div#imagecontainer{border-top:solid 0px #333;border-bottom:solid 5px #333;}div.widget ul li{padding:1px 5px 1px 12px !important;background:url('../../blog/wp-content/themes/atahualpa353/images/bullets/round-gray.gif') no-repeat 0 7px}ul.rMenu-hor ul,ul.rMenu-hRight ul{margin-top:0px;}ul.rMenu-hor li{margin-bottom:0px;margin-top:0px;margin-left:0px;}ul.rMenu-hor{padding-left:0px;}ul.rMenu-ver li{margin-top:0xp;}div#menu1 ul.rMenu li a,div#menu2 ul.rMenu li a{padding:6px 10px}div#menu1 ul.rMenu li{margin-right:5px}div#menu1 ul.rMenu li li{margin-right:0}div#menu1 ul.rMenu li,div#menu1 ul.rMenu li a{-webkit-border-top-left-radius:5px;-webkit-border-top-right-radius:5px;-moz-border-radius-topleft:5px;-moz-border-radius-topright:5px;border-top-left-radius:5px;border-top-right-radius:5px}div#menu1 ul.rMenu li li,div#menu1 ul.rMenu li li a{-webkit-border-top-left-radius:0;-webkit-border-top-right-radius:0;-moz-border-radius-topleft:0;-moz-border-radius-topright:0;border-top-left-radius:0;border-top-right-radius:0}div#menu2{ border:dashed 1px #ffffff}</style>
<script type="text/javascript">
//<![CDATA[




/* JQUERY */
jQuery(document).ready(function(){  


	/* jQuery('ul#rmenu').superfish(); */
	/* jQuery('ul#rmenu').superfish().find('ul').bgIframe({opacity:false}); */
 
	/* For IE6 */
	if (jQuery.browser.msie && /MSIE 6\.0/i.test(window.navigator.userAgent) && !/MSIE 7\.0/i.test(window.navigator.userAgent) && !/MSIE 8\.0/i.test(window.navigator.userAgent)) {

		/* Max-width for images in IE6 */		
		var centerwidth = jQuery("td#middle").width(); 
		
		/* Images without caption */
		jQuery(".post img").each(function() { 
			var maxwidth = centerwidth - 10 + 'px';
			var imgwidth = jQuery(this).width(); 
			var imgheight = jQuery(this).height(); 
			var newimgheight = (centerwidth / imgwidth * imgheight) + 'px';	
			if (imgwidth > centerwidth) { 
				jQuery(this).css({width: maxwidth}); 
				jQuery(this).css({height: newimgheight}); 
			}
		});
		
		/* Images with caption */
		jQuery("div.wp-caption").each(function() { 
			var captionwidth = jQuery(this).width(); 
			var maxcaptionwidth = centerwidth + 'px';
			var captionheight = jQuery(this).height();
			var captionimgwidth =  jQuery("div.wp-caption img").width();
			var captionimgheight =  jQuery("div.wp-caption img").height();
			if (captionwidth > centerwidth) { 
				jQuery(this).css({width: maxcaptionwidth}); 
				var newcaptionheight = (centerwidth / captionwidth * captionheight) + 'px';
				var newcaptionimgheight = (centerwidth / captionimgwidth * captionimgheight) + 'px';
				jQuery(this).css({height: newcaptionheight}); 
				jQuery("div.wp-caption img").css({height: newcaptionimgheight}); 
				}
		});
		
		/* sfhover for LI:HOVER support in IE6: */
		jQuery("ul li").
			hover( function() {
					jQuery(this).addClass("sfhover")
				}, 
				function() {
					jQuery(this).removeClass("sfhover")
				} 
			); 

	/* End IE6 */
	}
	
	jQuery(".post table tr").
		mouseover(function() {
			jQuery(this).addClass("over");
		}).
		mouseout(function() {
			jQuery(this).removeClass("over");
		});

	
	jQuery(".post table tr:even").
		addClass("alt");

	
	jQuery("input.text, input.TextField, input.file, input.password, textarea").
		focus(function () {  
			jQuery(this).addClass("highlight"); 
		}).
		blur(function () { 
			jQuery(this).removeClass("highlight"); 
		})
	
	jQuery("input.inputblur").
		focus(function () {  
			jQuery(this).addClass("inputfocus"); 
		}).
		blur(function () { 
			jQuery(this).removeClass("inputfocus"); 
		})

		

	
	jQuery("input.button, input.Button").
		mouseover(function() {
			jQuery(this).addClass("buttonhover");
		}).
		mouseout(function() {
			jQuery(this).removeClass("buttonhover");
		});

	/* toggle "you can use these xhtml tags" */
	jQuery("a.xhtmltags").
		click(function(){ 
			jQuery("div.xhtml-tags").slideToggle(300); 
		});

	/* For the Tabbed Widgets plugin: */
	jQuery("ul.tw-nav-list").
		addClass("clearfix");

		
	
});

//]]>
</script>
<meta id="syntaxhighlighteranchor" name="syntaxhighlighter-version" content="3.1.3" />
<!-- Google Analytics Tracking by Google Analyticator 6.2: http://ronaldheft.com/code/analyticator/ -->
<script type="text/javascript">
	var analyticsFileTypes = [''];
	var analyticsEventTracking = 'enabled';
</script>
<script type="text/javascript">
	var _gaq = _gaq || [];
	_gaq.push(['_setAccount', 'UA-2173612-1']);
	_gaq.push(['_trackPageview']);
	_gaq.push(['_trackPageLoadTime']);

	(function() {
		var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true;
		ga.src = ('https:' == document.location.protocol ? '../../../https@ssl_2f\default.htm' : '../../../www/default.htm') + '.google-analytics.com/ga.js';
		var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s);
	})();
</script>
<!--[if IE 6]>
<script type="text/javascript" src="../../blog/wp-content/themes/atahualpa353/js/dd_roundies.js"></script>
<script type="text/javascript">DD_roundies.addRule('a.posts-icon,%20a.comments-icon,%20a.email-icon,%20img.logo');</script>
<![endif]-->
</head>
<body class="single single-post postid-44 single-format-standard">
<div id="wrapper">
<div id="container">
<table id="layout" border="0" cellspacing="0" cellpadding="0">
<colgroup>
<col class="colone" /><col class="coltwo" />
<col class="colthree" /></colgroup> 
	<tr>

		<!-- Header -->
		<td id="header" colspan="3">

		<div id="imagecontainer" class="header-image-container" style="background: url('../../blog/wp-content/themes/atahualpa353/images/header/learncppheader3_800.jpg') top center no-repeat;"><div class="clickable"><a class="divclick" title="Learn C++" href ="../../default.htm">&nbsp;</a></div></div>
		</td>
		<!-- / Header -->

	</tr>

	<!-- Main Body -->	
	<tr id="bodyrow">

				<!-- Left Sidebar -->
		<td id="left">

			<div id="text-5" class="widget widget_text"><div class="widget-title"><h3>Navigation</h3></div>			<div class="textwidget"><ul>
<li><a href="../../default.htm"><big><big>Main Page</big></big></a>
<li><a href="
../../featured-articles/default.htm"><big><big>Featured Articles</big></big></a>
</ul>
<hr>
<ul>
<li><a href="../../about/default.htm">About / Contact</a>
<li><a href="../../about/#Support">Support LearnCpp</a>
</ul>
<hr>

<!-- SiteSearch Google -->
<form method="get" action="http://www.google.com/custom" target="google_window">
<table border="0" bgcolor="#ffffff">
<tr><td nowrap="nowrap" valign="top" align="left">

<!--<br/>-->
<input type="hidden" name="domains" value="LearnCpp.com"></input>
<label for="sbi" style="display: none">Enter your search terms</label>
<input type="text" name="q" size="20" maxlength="255" value="" id="sbi"></input>
</td></tr>
<tr>
<td nowrap="nowrap">
<table>
<tr>
<td>
<input type="radio" name="sitesearch" value="" checked id="ss0"></input>
<label for="ss0" title="Search the Web"><font size="-1" color="#000000">Web</font></label></td>
<td>
<input type="radio" name="sitesearch" value="www.LearnCpp.com" id="ss1"></input>
<label for="ss1" title="Search LearnCpp.com"><font size="-1" color="#000000">LearnCpp</font></label></td>
</tr>
</table>
<label for="sbb" style="display: none">Submit search form</label>
<input type="submit" name="sa" value="Google Search" id="sbb"></input>
<input type="hidden" name="client" value="pub-0588844875925051"></input>
<input type="hidden" name="forid" value="1"></input>
<input type="hidden" name="channel" value="7774154974"></input>
<input type="hidden" name="ie" value="ISO-8859-1"></input>
<input type="hidden" name="oe" value="ISO-8859-1"></input>
<input type="hidden" name="safe" value="active"></input>
<input type="hidden" name="flav" value="0000"></input>
<input type="hidden" name="sig" value="q6fLrjobHHgL00cW"></input>
<input type="hidden" name="cof" value="GALT:#008000;GL:1;DIV:#336699;VLC:663399;AH:center;BGC:FFFFFF;LBGC:336699;ALC:0000FF;LC:0000FF;T:000000;GFNT:0000FF;GIMP:0000FF;FORID:1"></input>
<input type="hidden" name="hl" value="en"></input>
</td></tr></table>
</form>
<!-- SiteSearch Google --></div>
		</div><div id="meta-2" class="widget widget_meta"><div class="widget-title"><h3>Meta</h3></div>			<ul>
			<li><a href="../../blog/wp-login.php@action=register.htm">Register</a></li>			<li><a href="../../blog/wp-login.php.htm">Log in</a></li>
			<li><a href="../../feed/default.htm" title="Syndicate this site using RSS 2.0">Entries <abbr title="Really Simple Syndication">RSS</abbr></a></li>
			<li><a href="../../comments/feed/default.htm" title="The latest comments to all posts in RSS">Comments <abbr title="Really Simple Syndication">RSS</abbr></a></li>
			<li><a href="../../../wordpress.org/default.htm" title="Powered by WordPress, state-of-the-art semantic personal publishing platform.">WordPress.org</a></li>
						</ul>
</div>		<div id="recent-posts-2" class="widget widget_recent_entries">		<div class="widget-title"><h3>Recent Posts</h3></div>		<ul>
				<li><a href="../b-6-new-virtual-function-controls-override-final-default-and-delete/default.htm" title="B.6 &#8212; New virtual function controls: override, final, default, and delete">B.6 &#8212; New virtual function controls: override, final, default, and delete</a></li>
				<li><a href="../b-5-delegating-constructors/default.htm" title="B.5 &#8212; Delegating constructors">B.5 &#8212; Delegating constructors</a></li>
				<li><a href="../b-4-initializer-lists-and-uniform-initialization/default.htm" title="B.4 &#8212; Initializer lists and uniform initialization">B.4 &#8212; Initializer lists and uniform initialization</a></li>
				<li><a href="../b-3-range-based-for-statements-and-static_assert/default.htm" title="B.3 &#8212; Range-based for statements and static_assert">B.3 &#8212; Range-based for statements and static_assert</a></li>
				<li><a href="../b-2-long-long-auto-decltype-nullptr-and-enum-classes/default.htm" title="B.2 &#8212; Long long, auto, decltype, nullptr, and enum classes">B.2 &#8212; Long long, auto, decltype, nullptr, and enum classes</a></li>
				<li><a href="../b-1-introduction-to-c11/default.htm" title="B.1 &#8212; Introduction to C++11">B.1 &#8212; Introduction to C++11</a></li>
				<li><a href="../a-6-fixed-width-integers/default.htm" title="A.6 &#8212; Fixed-width integers">A.6 &#8212; Fixed-width integers</a></li>
				<li><a href="../../site-news/site-software-updated-1123/default.htm" title="Site software updated 11/23">Site software updated 11/23</a></li>
				<li><a href="../../site-news/this-is-why-we-cant-have-nice-things-part-2/default.htm" title="This is why we can&#8217;t have nice things, part 2">This is why we can&#8217;t have nice things, part 2</a></li>
				<li><a href="../../site-news/this-is-why-we-cant-have-nice-things/default.htm" title="This is why we can&#8217;t have nice things">This is why we can&#8217;t have nice things</a></li>
				</ul>
		</div><div id="categories-1" class="widget widget_categories"><div class="widget-title"><h3>Category Indexes</h3></div>		<ul>
	<li class="cat-item cat-item-11"><a href="../../category/breaktime/default.htm" title="Games and fun activities">Break Time</a> (3)
</li>
	<li class="cat-item cat-item-6"><a href="../../category/cpp-programming/default.htm" title="View all posts filed under C++ Programming">C++ Programming</a> (11)
</li>
	<li class="cat-item cat-item-3"><a href="../../category/cpp-tutorial/default.htm" title="View all posts filed under C++ Tutorial">C++ Tutorial</a> (163)
</li>
	<li class="cat-item cat-item-10"><a href="../../category/computer-game-programming/default.htm" title="View all posts filed under Game Programming">Game Programming</a> (4)
</li>
	<li class="cat-item cat-item-14"><a href="../../category/gaming/default.htm" title="View all posts filed under Gaming">Gaming</a> (1)
</li>
	<li class="cat-item cat-item-13"><a href="../../category/general-programming/default.htm" title="View all posts filed under General Programming">General Programming</a> (3)
</li>
	<li class="cat-item cat-item-4"><a href="../../category/site-news/default.htm" title="View all posts filed under Site News">Site News</a> (23)
</li>
	<li class="cat-item cat-item-5"><a href="../../category/wordpress/default.htm" title="View all posts filed under WordPress">WordPress</a> (8)
</li>
		</ul>
</div>
		</td>
		<!-- / Left Sidebar -->
		
				

		<!-- Main Column -->
		<td id="middle">

	

		
		 

		<div class="clearfix navigation-top">
		<div class="older">&laquo; <a href="../23-variable-sizes-and-the-sizeof-operator/default.htm" rel="prev">2.3 &#8212; Variable sizes and the sizeof operator</a> &nbsp;</div><div class="newer">&nbsp; <a href="../25-floating-point-numbers/default.htm" rel="next">2.5 &#8212; Floating point numbers</a> &raquo;</div></div>
<div class="post-44 post type-post status-publish format-standard hentry category-cpp-tutorial" id="post-44">


<div class="post-headline">		<h1>2.4 &#8212; Integers</h1>
		</div>
<div class="post-byline">By Alex, on June 9th, 2007</div>
<div class="post-bodycopy clearfix"><div style='float:left;padding:8px 8px 8px 0px;'><script type="text/javascript"><!--
google_ad_client = "ca-pub-0588844875925051";
/* Content Page Top Large */
google_ad_slot = "7945645163";
google_ad_width = 336;
google_ad_height = 280;
//-->
</script>
<acript type="text/javascript"
src="../../../pagead2.googlesyndication.com/pagead/show_ads.js">
</script></div><p>An <strong>integer</strong> type variable is a variable that can only hold whole numbers (eg. -2, -1, 0, 1, 2).  C++ actually has <em>four</em> different integer variables available for use: <strong>char</strong>, <strong>short</strong>, <strong>int</strong>, and <strong>long</strong>.  The only difference between these different integer types is that they have varying sizes &#8212; the larger integers can hold bigger numbers.  You can use the <a href="../../@p=43">sizeof operator</a> to determine how large each type is on your machine.</p>
<p>In the following tutorials, we will typically assume:</p>
<ul>
<li>a char is 1 byte
<li>a short is 2 bytes
<li>an int is either 2 or 4 bytes
<li>a long is 4 bytes
</ul>
<p>Declaring some integers:</p>
<pre class="brush: cpp; title: ; notranslate" title="">
char chChar;
short int nShort; // &quot;short int&quot; is technically correct
short nShort2; // &quot;short&quot; is preferred shorthand
int nInteger;
long int nLong; // &quot;long int&quot; is technically correct
long nLong2; // &quot;long&quot; is preferred shorthand
</pre>
<p>While <em>short int</em> and <em>long int</em> are technically correct, we prefer to use the shorthand versions <em>short</em> and <em>long</em> instead.  Adding the prefix <em>int</em> makes the type harder to distinguish from variables of type int.  This can lead to mistakes (such as overflow) if the short or long modifier is inadvertently missed.</p>
<p>Because the size of char, short, int, and long can vary depending on the compiler and/or computer architecture, it can be instructive to refer to integers by their size rather than name.   We often refer to integers by the number of bits or bytes  a variable of that type is allocated.</p>
<p>As you learned in the last section, a variable with n bits can store 2^n different values.  We call the set of values that a data type can hold it&#8217;s <strong>range</strong>.  Integers can have two different ranges, depending on whether they are signed or unsigned.</p>
<p><strong>Signed and unsigned variables</strong></p>
<p>A <strong>signed</strong> integer is a variable that can hold both negative and positive numbers.  To declare a variable as signed, you can use the <em>signed</em> keyword:</p>
<pre class="brush: cpp; title: ; notranslate" title="">
signed char chChar;
signed short nShort;
signed int nInt;
signed long nLong;
</pre>
<p>A 1-byte signed variable has a range of -128 to 127.  Any value between -128 and 127 (inclusive) can be put in a 1-byte signed variable safely.</p>
<p>Sometimes, we know in advance that we are not going to need negative numbers.  This is common when using a variable to store the quantity or size of something (such as your height &#8212; it doesn&#8217;t make sense to have a negative height!).  An <strong>unsigned</strong> integer is one that can only hold positive values.  To declare a variable as unsigned, use the <em>unsigned</em> keyword:</p>
<pre class="brush: cpp; title: ; notranslate" title="">
unsigned char chChar;
unsigned short nShort;
unsigned int nInt;
unsigned long nLong;
</pre>
<p>A 1-byte unsigned variable has a range of 0 to 255.</p>
<p>Note that declaring a variable as unsigned means that it can not store negative numbers, but it can store positive numbers that are twice as large!</p>
<p>So what happens if we do not declare a variable as signed or unsigned?  All integer variables except char are signed by default.  Char can be either signed or unsigned by default (but is usually signed).</p>
<pre class="brush: cpp; title: ; notranslate" title="">
short nShort; // signed by default
int nInt; // signed by default
long nLong; // signed by default
char chChar; // can be signed or unsigned by default, but probably signed.
</pre>
<p>New programmers sometimes get signed and unsigned mixed up.  The following is a simple way to remember the difference: in order to differentiate positive and negative numbers, we typically use a negative sign.  If a sign is not provided, we assume a number is positive.  Consequently, an integer with a sign (a signed integer) can tell the difference between positive and negative.  An integer without a sign (an unsigned integer) assumes all values are positive.</p>
<p>Now that you understand the difference between signed and unsigned, let&#8217;s take a look at the ranges for different sized signed and unsigned variables:</p>
<table border=1 cellspacing=0 cellpadding=5>
<tr>
<th>Size/Type</th>
<th>Range</th>
</tr>
<tr>
<td>1 byte signed</td>
<td>-128 to 127</td>
</tr>
<tr>
<td>1 byte unsigned</td>
<td>0 to 255</td>
</tr>
<tr>
<td>2 byte signed</td>
<td>-32,768 to 32,767</td>
</tr>
<tr>
<td>2 byte unsigned</td>
<td>0 to 65,535</td>
</tr>
<tr>
<td>4 byte signed</td>
<td>-2,147,483,648 to 2,147,483,647</td>
</tr>
<tr>
<td>4 byte unsigned</td>
<td>0 to 4,294,967,296</td>
</tr>
<tr>
<td>8 byte signed</td>
<td>-9,223,372,036,854,775,807 to 9,223,372,036,854,775,807</td>
</tr>
<tr>
<td>8 byte unsigned</td>
<td>0 to 18,446,744,073,709,551,615</td>
</tr>
</table>
<p>For the math inclined, an n-bit signed variable has a range of -(2^(n-1)) to (2^(n-1))-1.  An n-bit unsigned variable has a range of 0 to (2^n)-1.  For the non-math inclined&#8230; use the table. :)</p>
<p>What happens if we try to put a number outside of the data type&#8217;s range into our variable?  We get&#8230;</p>
<p><strong>Overflow</strong></p>
<p>In binary, we count from 0 to 15 like this: 0, 1, 10, 11, 100, 101, 110, 111, 1000, 1001, 1010, 1011, 1101, 1111.  As you can see, the larger numbers require more bits to represent.  Because our variables have a fixed number of bits, this puts a limit on the largest number they can hold.</p>
<p>Consider a hypothetical variable that can only hold 4 bits.  Any of the binary numbers enumerated above would fit comfortably inside this variable because none of them are larger than 4 bits.  But what happens if we try to assign a value that takes 5 bits to our variable?  We get overflow: our variable will only store 4 of the 5 bits, and the excess bits are lost.</p>
<p><strong>Overflow</strong> occurs when bits are lost because a variable does not have enough memory to store them.</p>
<p>We can see this in action with the following program:</p>
<pre class="brush: cpp; title: ; notranslate" title="">
#include &lt;iostream&gt;

int main()
{
    using namespace std;
    unsigned short x = 65535; // largest 2-byte unsigned value possible
    cout &lt;&lt; &quot;x was: &quot; &lt;&lt; x &lt;&lt; endl;
    x = x + 1; // We desire 65536, but we get overflow!
    cout &lt;&lt; &quot;x is now: &quot; &lt;&lt; x &lt;&lt; endl;
}
</pre>
<p>What do you think the result of this program will be?</p>
<pre>
x was: 65535
x is now: 0
</pre>
<p>What happened?  Informally, we overflowed the variable by trying to put a number that was too big into it, and the result is that our value &#8220;wrapped around&#8221; back to the beginning of the range.  For non-integer data types, overflowed variables do not always wrap around the range, so do not rely on this happening!</p>
<p>The following paragraph explains exactly why we ended up getting a value of 0 after overflow.  It is optional reading.  If all this binary stuff is confusing, you can skip it.</p>
<p>The number 65,535 is represented by the bit pattern <code>1111 1111 1111 1111</code> in binary.  65,535 is the largest number an unsigned 2 byte (16-bit) integer can hold, as it uses all 16 bits.  When we add 1 to the value, the new value should be 65,536.  However, the bit pattern of 65,536 is represented in binary as <code>1 0000 0000 0000 0000</code>, which is 17 bits!  Consequently, the highest bit (which is the 1) is lost, and the low 16 bits are all that is left.  The bit pattern <code>0000 0000 0000 0000</code> corresponds to the number 0, which is our result!</p>
<p>Similarly, we can overflow the bottom end of our range as well.</p>
<pre class="brush: cpp; title: ; notranslate" title="">
#include &lt;iostream&gt;

int main()
{
    using namespace std;
    unsigned short x = 0; // smallest 2-byte unsigned value possible
    cout &lt;&lt; &quot;x was: &quot; &lt;&lt; x &lt;&lt; endl;
    x = x - 1; // We expect -1, we get overflow!
    cout &lt;&lt; &quot;x is now: &quot; &lt;&lt; x &lt;&lt; endl;
}
</pre>
<pre>
x was: 0
x is now: 65535
</pre>
<p>In the case of a signed integer, the result is identical.</p>
<pre class="brush: cpp; title: ; notranslate" title="">
#include &lt;iostream&gt;

int main()
{
    using namespace std;
    signed short x = 32767; // largest 2-byte signed value possible
    cout &lt;&lt; &quot;x was: &quot; &lt;&lt; x &lt;&lt; endl;
    x = x + 1; // We desire 32768, but we get overflow!
    cout &lt;&lt; &quot;x is now: &quot; &lt;&lt; x &lt;&lt; endl;
}
</pre>
<pre>
x was: 32767
x is now: -32768
</pre>
<p>Overflow results in information being lost, which is almost never desirable.  If there is ANY doubt that a variable might need to store a value that falls outside it&#8217;s range, use a larger variable!</p>
<p><strong>Integer division</strong></p>
<p>Integer division can also cause issues because dividing 2 integers can produce a fractional result, and integers can not store fractions.  Consider the statement <code>int x = 5 / 3;</code>.  Under normal mathematical rules, x would be assigned the value of 5/3, which is 1.6666.  However, in integer division, the fraction is dropped, so x is assigned the value of 1.  Integer division always drops the fraction &#8212; it does not round.</p>
<p><strong>Fixed width integers</strong></p>
<p>Some compilers provide access to fixed width integers (integers whose size is not dependent on the platform).  Since these are not officially part of the C++ standard, information on these has been relegated to appendix <a href="../a-6-fixed-width-integers/default.htm">A.6 &#8212; Fixed width integers</a>.  Nevertheless, I recommend you check them out.</p>
<table border=0 cellpadding=3>
<tr>
<td>
        <a href="../25-floating-point-numbers/default.htm" style="text-decoration:none"><img src="../../images/cpptutorial/next.png" align=middle> 2.5 &#8212; Floating point numbers</a>
</td>
</tr>
<tr>
<td>
        <a href="../../#Chapter2" style="text-decoration:none"><img src="../../images/cpptutorial/up.png" align=middle> Index</a>
</td>
</tr>
<tr>
<td>
        <a href="../23-variable-sizes-and-the-sizeof-operator/default.htm" style="text-decoration:none"><img src="../../images/cpptutorial/prev.png" align=middle> 2.3 &#8212; Variable sizes and the sizeof operator</a>
</td>
</tr>
</table>
<div style='padding-top:8px; padding-bottom:8px'><script type="text/javascript"><!--
google_ad_client = "ca-pub-0588844875925051";
/* Content Page Bottom - Medium Rectangle */
google_ad_slot = "2751429778";
google_ad_width = 300;
google_ad_height = 250;
//-->
</script>
<acript type="text/javascript"
src="../../../pagead2.googlesyndication.com/pagead/show_ads.js">
</script>
</div><!-- Powered by Ad Inserter Wordpress Plugin, Author: Igor Funa --></div>

<div class="post-footer"><img src="../../blog/wp-content/themes/atahualpa353/images/icons/folder-gray.gif" alt="" /> <a href="../../category/cpp-tutorial/default.htm" title="View all posts in C++ Tutorial" rel="category tag">C++ Tutorial</a>   | <a href="print/default.htm" title="Print This Post" rel="nofollow"><img class="WP-PrintIcon" src="../../blog/wp-content/plugins/wp-print/images/print.gif" alt="Print This Post" title="Print This Post" style="border: 0px;" /></a>&nbsp;<a href="print/default.htm" title="Print This Post" rel="nofollow">Print This Post</a></div>
</div><!-- / Post -->						
	
	<div class="clearfix navigation-middle">
		<div class="older">&laquo; <a href="../23-variable-sizes-and-the-sizeof-operator/default.htm" rel="prev">2.3 &#8212; Variable sizes and the sizeof operator</a> &nbsp;</div><div class="newer">&nbsp; <a href="../25-floating-point-numbers/default.htm" rel="next">2.5 &#8212; Floating point numbers</a> &raquo;</div></div>


	<a name="comments"></a><!-- named anchor for skip links -->
	<h3 id="comments">49 comments to 2.4 &#8212; Integers</h3>

	
	<!-- Comment List -->
	<ul class="commentlist">
		
			<li class="comment even thread-even depth-1 clearfix" id="comment-29">
		<div id="div-comment-29" class="clearfix comment-container">
		<div class="comment-author vcard">
		<img alt='' src='../../../1.gravatar.com/avatar/fe1b5646bff48a83767c26af6965bbc5@s=65&d=http_253a_252f_252f1.gravatar.com_252favatar_252fad516503a11cd5ca435acc9bb6523536_253fs_253d65&r=g' class='avatar avatar-65 photo' height='65' width='65' />		<span class="authorname"><a href='../../../www.cpptrader.com/default.htm' rel='external nofollow' class='url'>cpptrader</a></span>
		</div>
				<div class="comment-meta commentmetadata">
		<a href="comment-page-1/#comment-29">
		June 17, 2007 at 7:50 am</a>
        <span class="comment-reply-link"><a rel="nofollow" class="comment-reply-login" href="../../blog/wp-login.php@redirect_to=http_253a_252f_252fwww.learncpp.com_252fcpp-tutorial_252f24-integers_252f">Log in to Reply</a></span>		 
		</div>
		<p>Would you say it is a good idea to work with signed integers even if it is unlikely the number would be negative, just as a precaution?  Or maybe allow it but have a warning print to the screen?</p>
		</div>
</li>
		<li class="comment byuser comment-author-Tarindel bypostauthor odd alt thread-odd thread-alt depth-1 clearfix" id="comment-30">
		<div id="div-comment-30" class="clearfix comment-container bypostauthor">
		<div class="comment-author vcard">
		<img alt='' src='../../../0.gravatar.com/avatar/2bcdbab687c32f64f9208e016cafe4cc@s=65&d=http_253a_252f_252f0.gravatar.com_252favatar_252fad516503a11cd5ca435acc9bb6523536_253fs_253d65&r=g' class='avatar avatar-65 photo' height='65' width='65' />		<span class="authorname"><a href='../../../www.tarindel.com/default.htm' rel='external nofollow' class='url'>Alex</a></span>
		</div>
				<div class="comment-meta commentmetadata">
		<a href="comment-page-1/#comment-30">
		June 17, 2007 at 10:10 am</a>
        <span class="comment-reply-link"><a rel="nofollow" class="comment-reply-login" href="../../blog/wp-login.php@redirect_to=http_253a_252f_252fwww.learncpp.com_252fcpp-tutorial_252f24-integers_252f">Log in to Reply</a></span>		 
		</div>
		<p>That is actually a really difficult question. :)  I have seen various programmers argue it either way, and there&#8217;s no clear answer.</p>
<p>Bjarne Stroustrup (who designed C++) says, &#8220;The unsigned integer types are ideal for uses that treat storage as a bit array. Using an unsigned instead of an int to gain one more bit to represent positive integers is almost never a good idea. Attempts to ensure that some values are positive by declaring variables unsigned will typically be defeated by the implicit conversion rules.&#8221;</p>
<p>I think Bjarne is correct on this one.</p>
<p>Using signed instead of unsigned integers even when you don&#8217;t expect negative numbers gives you a few benefits:</p>
<p>1) Many programmers use signed integers even when only dealing with positive numbers, because negative numbers can then be used as &#8220;error conditions&#8221;.  For example, it&#8217;s pretty common to write a function that is expected to return a positive number.  However, you can have it return a negative number if something goes wrong.  That way, the caller has a way of detecting something went astray.  (Note: You can also use exception handling as an alternative mechanism for returning errors)</p>
<p>2) What happens in this case:<br />
int foo(unsigned int nValue)<br />
{<br />
// something<br />
}</p>
<p>caller:<br />
int nValue = foo(-1);</p>
<p>The -1 gets silently converted into an unsigned integer (which would be a large positive number), and the function has no way of detecting that an invalid input was given to it.</p>
<p>3) If you expect a number to be positive, and your signed variable suddenly has a negative value, that&#8217;s a good indication your algorithm is wrong.</p>
<p>In short, as a rule of thumb, unless you have a good reason not to, it is better to use signed integers.</p>
		</div>
</li>
		<li class="comment even thread-even depth-1 clearfix" id="comment-6129">
		<div id="div-comment-6129" class="clearfix comment-container">
		<div class="comment-author vcard">
		<img alt='' src='../../../1.gravatar.com/avatar/34fc7a1a5cdf6ae1a033f2dd2a1fc988@s=65&d=http_253a_252f_252f1.gravatar.com_252favatar_252fad516503a11cd5ca435acc9bb6523536_253fs_253d65&r=g' class='avatar avatar-65 photo' height='65' width='65' />		<span class="authorname"><a href='../../../chrisdalunatic.blogspot.com/default.htm' rel='external nofollow' class='url'>Chris Da Lunatic</a></span>
		</div>
				<div class="comment-meta commentmetadata">
		<a href="comment-page-1/#comment-6129">
		January 15, 2008 at 8:02 pm</a>
        <span class="comment-reply-link"><a rel="nofollow" class="comment-reply-login" href="../../blog/wp-login.php@redirect_to=http_253a_252f_252fwww.learncpp.com_252fcpp-tutorial_252f24-integers_252f">Log in to Reply</a></span>		 
		</div>
		<p>Fun fact: The old Final Fantasy games on the NES only allowed your stats to go up to 255 because they used a 1 byte unsigned variable to store stats. It would be neat to see someone allude this in a modern game&#8230; especially when memory isn&#8217;t a huge issue anymore. :)</p>
		</div>
<ul class='children'>
		<li class="comment odd alt depth-2 clearfix" id="comment-33062">
		<div id="div-comment-33062" class="clearfix comment-container">
		<div class="comment-author vcard">
		<img alt='' src='../../../0.gravatar.com/avatar/003aa224fb6ca93a53bd2973a98e242e@s=65&d=http_253a_252f_252f0.gravatar.com_252favatar_252fad516503a11cd5ca435acc9bb6523536_253fs_253d65&r=g' class='avatar avatar-65 photo' height='65' width='65' />		<span class="authorname">Frederik</span>
		</div>
				<div class="comment-meta commentmetadata">
		<a href="comment-page-1/#comment-33062">
		November 27, 2008 at 1:44 pm</a>
        <span class="comment-reply-link"><a rel="nofollow" class="comment-reply-login" href="../../blog/wp-login.php@redirect_to=http_253a_252f_252fwww.learncpp.com_252fcpp-tutorial_252f24-integers_252f">Log in to Reply</a></span>		 
		</div>
		<p>Memory is ALWAYS a huge issue. Modern games usually have more stats or more monsters to keep track of, so doubling or quadrupling the memory needs, just because you can, is never a good idea. Designing good rules usually allows to reduce the height of stats, rather than extend it.</p>
		</div>
</li>
</ul>
</li>
		<li class="comment even thread-odd thread-alt depth-1 clearfix" id="comment-7107">
		<div id="div-comment-7107" class="clearfix comment-container">
		<div class="comment-author vcard">
		<img alt='' src='../../../1.gravatar.com/avatar/d66694bbc7619203377bd9c9b7b9f14a@s=65&d=http_253a_252f_252f1.gravatar.com_252favatar_252fad516503a11cd5ca435acc9bb6523536_253fs_253d65&r=g' class='avatar avatar-65 photo' height='65' width='65' />		<span class="authorname">C++ Student</span>
		</div>
				<div class="comment-meta commentmetadata">
		<a href="comment-page-1/#comment-7107">
		February 2, 2008 at 12:27 pm</a>
        <span class="comment-reply-link"><a rel="nofollow" class="comment-reply-login" href="../../blog/wp-login.php@redirect_to=http_253a_252f_252fwww.learncpp.com_252fcpp-tutorial_252f24-integers_252f">Log in to Reply</a></span>		 
		</div>
		<p>Another great set of examples, thanks.</p>
		</div>
</li>
		<li class="comment odd alt thread-even depth-1 clearfix" id="comment-7576">
		<div id="div-comment-7576" class="clearfix comment-container">
		<div class="comment-author vcard">
		<img alt='' src='../../../0.gravatar.com/avatar/6d6c2c841fc5522e2d3f0ff8d66bfa4f@s=65&d=http_253a_252f_252f0.gravatar.com_252favatar_252fad516503a11cd5ca435acc9bb6523536_253fs_253d65&r=g' class='avatar avatar-65 photo' height='65' width='65' />		<span class="authorname">Jefferson</span>
		</div>
				<div class="comment-meta commentmetadata">
		<a href="comment-page-1/#comment-7576">
		February 9, 2008 at 12:41 pm</a>
        <span class="comment-reply-link"><a rel="nofollow" class="comment-reply-login" href="../../blog/wp-login.php@redirect_to=http_253a_252f_252fwww.learncpp.com_252fcpp-tutorial_252f24-integers_252f">Log in to Reply</a></span>		 
		</div>
		<p>Alex, I see that you used <code>iostream.h</code> in this page&#8217;s examples instead of <code>iostream</code>. Is this intentional? I thought you said earlier that <code>iostream.h</code> did not support namespaces.</p>
		</div>
<ul class='children'>
		<li class="comment byuser comment-author-Tarindel bypostauthor even depth-2 clearfix" id="comment-7579">
		<div id="div-comment-7579" class="clearfix comment-container bypostauthor">
		<div class="comment-author vcard">
		<img alt='' src='../../../0.gravatar.com/avatar/2bcdbab687c32f64f9208e016cafe4cc@s=65&d=http_253a_252f_252f0.gravatar.com_252favatar_252fad516503a11cd5ca435acc9bb6523536_253fs_253d65&r=g' class='avatar avatar-65 photo' height='65' width='65' />		<span class="authorname"><a href='../../../www.tarindel.com/default.htm' rel='external nofollow' class='url'>Alex</a></span>
		</div>
				<div class="comment-meta commentmetadata">
		<a href="comment-page-1/#comment-7579">
		February 9, 2008 at 1:10 pm</a>
        <span class="comment-reply-link"><a rel="nofollow" class="comment-reply-login" href="../../blog/wp-login.php@redirect_to=http_253a_252f_252fwww.learncpp.com_252fcpp-tutorial_252f24-integers_252f">Log in to Reply</a></span>		 
		</div>
		<p>That&#8217;s just a mistake on my part.  You are correct.  I&#8217;ll fix up the examples.</p>
		</div>
</li>
</ul>
</li>
		<li class="comment odd alt thread-odd thread-alt depth-1 clearfix" id="comment-11139">
		<div id="div-comment-11139" class="clearfix comment-container">
		<div class="comment-author vcard">
		<img alt='' src='../../../1.gravatar.com/avatar/5501fdd6fca22ca52b348f3d00e95a6f@s=65&d=http_253a_252f_252f1.gravatar.com_252favatar_252fad516503a11cd5ca435acc9bb6523536_253fs_253d65&r=g' class='avatar avatar-65 photo' height='65' width='65' />		<span class="authorname">Lal</span>
		</div>
				<div class="comment-meta commentmetadata">
		<a href="comment-page-1/#comment-11139">
		April 7, 2008 at 4:32 am</a>
        <span class="comment-reply-link"><a rel="nofollow" class="comment-reply-login" href="../../blog/wp-login.php@redirect_to=http_253a_252f_252fwww.learncpp.com_252fcpp-tutorial_252f24-integers_252f">Log in to Reply</a></span>		 
		</div>
		<p>Hi Alex,</p>
<p>First of all thank you very much for such a great tutorial.</p>
<p>I have a small question, I am unable to an value more than 2,147,483,647 if though I am declaring the variable as double, long double, unsigned int. I dont understand why, I have just started learning C++ and I find your tutorial very informative.</p>
<p>Thanks<br />
Lal</p>
<p>#include    </p>
<p>int main()<br />
{<br />
	long double nshort;<br />
	nshort=2147483648;<br />
	cout &lt;&lt; &#8220;short:&#8221; &lt;&lt; sizeof(nshort) &lt;&lt; &#8221; bytes&#8221; &lt;&lt; endl;<br />
        cout &lt;&lt;&#8221;\n&#8221; &lt;&lt; nshort;</p>
<p>}</p>
		</div>
<ul class='children'>
		<li class="comment byuser comment-author-Tarindel bypostauthor even depth-2 clearfix" id="comment-11190">
		<div id="div-comment-11190" class="clearfix comment-container bypostauthor">
		<div class="comment-author vcard">
		<img alt='' src='../../../0.gravatar.com/avatar/2bcdbab687c32f64f9208e016cafe4cc@s=65&d=http_253a_252f_252f0.gravatar.com_252favatar_252fad516503a11cd5ca435acc9bb6523536_253fs_253d65&r=g' class='avatar avatar-65 photo' height='65' width='65' />		<span class="authorname"><a href='../../../www.tarindel.com/default.htm' rel='external nofollow' class='url'>Alex</a></span>
		</div>
				<div class="comment-meta commentmetadata">
		<a href="comment-page-1/#comment-11190">
		April 7, 2008 at 8:09 pm</a>
        <span class="comment-reply-link"><a rel="nofollow" class="comment-reply-login" href="../../blog/wp-login.php@redirect_to=http_253a_252f_252fwww.learncpp.com_252fcpp-tutorial_252f24-integers_252f">Log in to Reply</a></span>		 
		</div>
		<p>You are encountering this behavior because 2147483647 is the maximum signed long value.  If you need a larger number, you have a couple of options:<br />
1) Use an unsigned long<br />
2) Use a double (covered in the next lesson)</p>
<p>Whenever you&#8217;re working with floating point values (floats and doubles and long doubles), make sure you add a .0 suffix if your value is a whole number:</p>
<p>double dValue = 2147483648.0;</p>
		</div>
<ul class='children'>
		<li class="comment odd alt depth-3 clearfix" id="comment-11244">
		<div id="div-comment-11244" class="clearfix comment-container">
		<div class="comment-author vcard">
		<img alt='' src='../../../1.gravatar.com/avatar/5501fdd6fca22ca52b348f3d00e95a6f@s=65&d=http_253a_252f_252f1.gravatar.com_252favatar_252fad516503a11cd5ca435acc9bb6523536_253fs_253d65&r=g' class='avatar avatar-65 photo' height='65' width='65' />		<span class="authorname">Lal</span>
		</div>
				<div class="comment-meta commentmetadata">
		<a href="comment-page-1/#comment-11244">
		April 8, 2008 at 8:56 pm</a>
        <span class="comment-reply-link"><a rel="nofollow" class="comment-reply-login" href="../../blog/wp-login.php@redirect_to=http_253a_252f_252fwww.learncpp.com_252fcpp-tutorial_252f24-integers_252f">Log in to Reply</a></span>		 
		</div>
		<p>Thanks Alex,</p>
<p>Double works but unsigned long does not, i get this error for unsigned long<br />
warning: decimal integer constant is so large that it is unsigned</p>
		</div>
<ul class='children'>
		<li class="comment byuser comment-author-Tarindel bypostauthor even depth-4 clearfix" id="comment-11320">
		<div id="div-comment-11320" class="clearfix comment-container bypostauthor">
		<div class="comment-author vcard">
		<img alt='' src='../../../0.gravatar.com/avatar/2bcdbab687c32f64f9208e016cafe4cc@s=65&d=http_253a_252f_252f0.gravatar.com_252favatar_252fad516503a11cd5ca435acc9bb6523536_253fs_253d65&r=g' class='avatar avatar-65 photo' height='65' width='65' />		<span class="authorname"><a href='../../../www.tarindel.com/default.htm' rel='external nofollow' class='url'>Alex</a></span>
		</div>
				<div class="comment-meta commentmetadata">
		<a href="comment-page-1/#comment-11320">
		April 9, 2008 at 5:53 pm</a>
        <span class="comment-reply-link"><a rel="nofollow" class="comment-reply-login" href="../../blog/wp-login.php@redirect_to=http_253a_252f_252fwww.learncpp.com_252fcpp-tutorial_252f24-integers_252f">Log in to Reply</a></span>		 
		</div>
		<p>I forgot to mention: if you use an unsigned long, you have to use the U suffix for the literal:</p>
<p>long nMyNumber = 2147483648U;</p>
<p>This tells the compiler to treat the literal as an unsigned number instead of a signed one.</p>
		</div>
</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
		<li class="pingback odd alt thread-even depth-1 clearfix" id="comment-12598">
		<div id="div-comment-12598" class="clearfix comment-container">
		<div class="comment-author vcard">
				<span class="authorname"><a href='../25-floating-point-numbers/default.htm' rel='external nofollow' class='url'>Learn C++ - &raquo; 2.5 &#8212; Floating point numbers</a></span>
		</div>
				<div class="comment-meta commentmetadata">
		<a href="comment-page-1/#comment-12598">
		April 22, 2008 at 5:45 pm</a>
        <span class="comment-reply-link"><a rel="nofollow" class="comment-reply-login" href="../../blog/wp-login.php@redirect_to=http_253a_252f_252fwww.learncpp.com_252fcpp-tutorial_252f24-integers_252f">Log in to Reply</a></span>		 
		</div>
		<p>[...] 2007      Prev/Next Posts   &laquo; 2.4 &#8212; Integers | Home | Break Time &#8212; Dice Wars &raquo;     Saturday, June 9th, 2007 at 12:07 [...]</p>
		</div>
</li>
		<li class="pingback even thread-odd thread-alt depth-1 clearfix" id="comment-12630">
		<div id="div-comment-12630" class="clearfix comment-container">
		<div class="comment-author vcard">
				<span class="authorname"><a href='../23-variable-sizes-and-the-sizeof-operator/default.htm' rel='external nofollow' class='url'>Learn C++ - &raquo; 2.3 &#8212; Variable sizes and the sizeof operator</a></span>
		</div>
				<div class="comment-meta commentmetadata">
		<a href="comment-page-1/#comment-12630">
		April 22, 2008 at 6:27 pm</a>
        <span class="comment-reply-link"><a rel="nofollow" class="comment-reply-login" href="../../blog/wp-login.php@redirect_to=http_253a_252f_252fwww.learncpp.com_252fcpp-tutorial_252f24-integers_252f">Log in to Reply</a></span>		 
		</div>
		<p>[...]  2.4 â€” Integers [...]</p>
		</div>
</li>
		<li class="comment odd alt thread-even depth-1 clearfix" id="comment-22857">
		<div id="div-comment-22857" class="clearfix comment-container">
		<div class="comment-author vcard">
		<img alt='' src='../../../0.gravatar.com/avatar/eaa9e6b4042a7e070d8ada6653ebc032@s=65&d=http_253a_252f_252f0.gravatar.com_252favatar_252fad516503a11cd5ca435acc9bb6523536_253fs_253d65&r=g' class='avatar avatar-65 photo' height='65' width='65' />		<span class="authorname">Ben</span>
		</div>
				<div class="comment-meta commentmetadata">
		<a href="comment-page-1/#comment-22857">
		August 5, 2008 at 10:16 am</a>
        <span class="comment-reply-link"><a rel="nofollow" class="comment-reply-login" href="../../blog/wp-login.php@redirect_to=http_253a_252f_252fwww.learncpp.com_252fcpp-tutorial_252f24-integers_252f">Log in to Reply</a></span>		 
		</div>
		<p>I was just running the formulas for calculating the ranges of unsigned variables, and noticed that the table and formula don&#8217;t seem to match.  I am not a real math person, so I may be misreading the formula, but shouldn&#8217;t an n-bit unsigned variable have a range of 0 to 2(2^n-1.)-1?</p>
		</div>
</li>
		<li class="comment even thread-odd thread-alt depth-1 clearfix" id="comment-22894">
		<div id="div-comment-22894" class="clearfix comment-container">
		<div class="comment-author vcard">
		<img alt='' src='../../../0.gravatar.com/avatar/80087c245e41dea62ea6d8de36c6fffa@s=65&d=http_253a_252f_252f0.gravatar.com_252favatar_252fad516503a11cd5ca435acc9bb6523536_253fs_253d65&r=g' class='avatar avatar-65 photo' height='65' width='65' />		<span class="authorname">Jake</span>
		</div>
				<div class="comment-meta commentmetadata">
		<a href="comment-page-1/#comment-22894">
		August 5, 2008 at 7:09 pm</a>
        <span class="comment-reply-link"><a rel="nofollow" class="comment-reply-login" href="../../blog/wp-login.php@redirect_to=http_253a_252f_252fwww.learncpp.com_252fcpp-tutorial_252f24-integers_252f">Log in to Reply</a></span>		 
		</div>
		<p>-Alex</p>
<p>When counting from 0 to 15 in binary, you have written 0, 1, 10, 11, 100, 101, 110, 111, 1000, 1001, 1010, 1011, 1101, 1111. It seems that you have left out a few numbers.  You seem to have have skipped the numbers 12(1100) and 14(1110).</p>
		</div>
</li>
		<li class="comment odd alt thread-even depth-1 clearfix" id="comment-25642">
		<div id="div-comment-25642" class="clearfix comment-container">
		<div class="comment-author vcard">
		<img alt='' src='../../../1.gravatar.com/avatar/5fdae6d1f57d48ba48693695563b8338@s=65&d=http_253a_252f_252f1.gravatar.com_252favatar_252fad516503a11cd5ca435acc9bb6523536_253fs_253d65&r=g' class='avatar avatar-65 photo' height='65' width='65' />		<span class="authorname"><a href='../../../cossincalc.com/default.htm' rel='external nofollow' class='url'>Molte</a></span>
		</div>
				<div class="comment-meta commentmetadata">
		<a href="comment-page-1/#comment-25642">
		August 31, 2008 at 7:22 am</a>
        <span class="comment-reply-link"><a rel="nofollow" class="comment-reply-login" href="../../blog/wp-login.php@redirect_to=http_253a_252f_252fwww.learncpp.com_252fcpp-tutorial_252f24-integers_252f">Log in to Reply</a></span>		 
		</div>
		<p>As far as I can see &#8220;unasigned&#8221; is still black in the examples on the site (and not colored like &#8220;signed&#8221;).</p>
		</div>
<ul class='children'>
		<li class="comment byuser comment-author-Tarindel bypostauthor even depth-2 clearfix" id="comment-26072">
		<div id="div-comment-26072" class="clearfix comment-container bypostauthor">
		<div class="comment-author vcard">
		<img alt='' src='../../../0.gravatar.com/avatar/2bcdbab687c32f64f9208e016cafe4cc@s=65&d=http_253a_252f_252f0.gravatar.com_252favatar_252fad516503a11cd5ca435acc9bb6523536_253fs_253d65&r=g' class='avatar avatar-65 photo' height='65' width='65' />		<span class="authorname"><a href='../../../www.tarindel.com/default.htm' rel='external nofollow' class='url'>Alex</a></span>
		</div>
				<div class="comment-meta commentmetadata">
		<a href="comment-page-1/#comment-26072">
		September 2, 2008 at 10:29 pm</a>
        <span class="comment-reply-link"><a rel="nofollow" class="comment-reply-login" href="../../blog/wp-login.php@redirect_to=http_253a_252f_252fwww.learncpp.com_252fcpp-tutorial_252f24-integers_252f">Log in to Reply</a></span>		 
		</div>
		<p>Yeah, I guess the syntax highlighting module being used doesn&#8217;t recognize that as a keyword.  I&#8217;m not sure why.</p>
		</div>
</li>
</ul>
</li>
		<li class="comment odd alt thread-odd thread-alt depth-1 clearfix" id="comment-33815">
		<div id="div-comment-33815" class="clearfix comment-container">
		<div class="comment-author vcard">
		<img alt='' src='../../../1.gravatar.com/avatar/f0b5debec074f9d5bb1f359805f40b09@s=65&d=http_253a_252f_252f1.gravatar.com_252favatar_252fad516503a11cd5ca435acc9bb6523536_253fs_253d65&r=g' class='avatar avatar-65 photo' height='65' width='65' />		<span class="authorname">PoisonedV</span>
		</div>
				<div class="comment-meta commentmetadata">
		<a href="comment-page-1/#comment-33815">
		December 5, 2008 at 11:41 pm</a>
        <span class="comment-reply-link"><a rel="nofollow" class="comment-reply-login" href="../../blog/wp-login.php@redirect_to=http_253a_252f_252fwww.learncpp.com_252fcpp-tutorial_252f24-integers_252f">Log in to Reply</a></span>		 
		</div>
		<p>I have a question- if long and int are both the same amount of bytes, do they hold the same amount?</p>
		</div>
<ul class='children'>
		<li class="comment byuser comment-author-Tarindel bypostauthor even depth-2 clearfix" id="comment-33853">
		<div id="div-comment-33853" class="clearfix comment-container bypostauthor">
		<div class="comment-author vcard">
		<img alt='' src='../../../0.gravatar.com/avatar/2bcdbab687c32f64f9208e016cafe4cc@s=65&d=http_253a_252f_252f0.gravatar.com_252favatar_252fad516503a11cd5ca435acc9bb6523536_253fs_253d65&r=g' class='avatar avatar-65 photo' height='65' width='65' />		<span class="authorname"><a href='../../../www.tarindel.com/default.htm' rel='external nofollow' class='url'>Alex</a></span>
		</div>
				<div class="comment-meta commentmetadata">
		<a href="comment-page-1/#comment-33853">
		December 6, 2008 at 12:02 pm</a>
        <span class="comment-reply-link"><a rel="nofollow" class="comment-reply-login" href="../../blog/wp-login.php@redirect_to=http_253a_252f_252fwww.learncpp.com_252fcpp-tutorial_252f24-integers_252f">Log in to Reply</a></span>		 
		</div>
		<p>Yes.</p>
		</div>
</li>
</ul>
</li>
		<li class="comment odd alt thread-even depth-1 clearfix" id="comment-34584">
		<div id="div-comment-34584" class="clearfix comment-container">
		<div class="comment-author vcard">
		<img alt='' src='../../../0.gravatar.com/avatar/cb3d1b53f5b11b7ab0d1aca41f93a1e4@s=65&d=http_253a_252f_252f0.gravatar.com_252favatar_252fad516503a11cd5ca435acc9bb6523536_253fs_253d65&r=g' class='avatar avatar-65 photo' height='65' width='65' />		<span class="authorname">CuView</span>
		</div>
				<div class="comment-meta commentmetadata">
		<a href="comment-page-1/#comment-34584">
		December 14, 2008 at 7:54 pm</a>
        <span class="comment-reply-link"><a rel="nofollow" class="comment-reply-login" href="../../blog/wp-login.php@redirect_to=http_253a_252f_252fwww.learncpp.com_252fcpp-tutorial_252f24-integers_252f">Log in to Reply</a></span>		 
		</div>
		<pre>
unsigned short x = 65535;

// x = 1111 1111 1111 1111

x+=1;

// x = 1 0000 0000 0000 0000
</pre>
<p>When overflow, does it dangerous? It can change other memory bits right (That may be used by other variables/application)?</p>
		</div>
<ul class='children'>
		<li class="comment even depth-2 clearfix" id="comment-34899">
		<div id="div-comment-34899" class="clearfix comment-container">
		<div class="comment-author vcard">
		<img alt='' src='../../../0.gravatar.com/avatar/cb3d1b53f5b11b7ab0d1aca41f93a1e4@s=65&d=http_253a_252f_252f0.gravatar.com_252favatar_252fad516503a11cd5ca435acc9bb6523536_253fs_253d65&r=g' class='avatar avatar-65 photo' height='65' width='65' />		<span class="authorname">CuView</span>
		</div>
				<div class="comment-meta commentmetadata">
		<a href="comment-page-1/#comment-34899">
		December 18, 2008 at 9:17 am</a>
        <span class="comment-reply-link"><a rel="nofollow" class="comment-reply-login" href="../../blog/wp-login.php@redirect_to=http_253a_252f_252fwww.learncpp.com_252fcpp-tutorial_252f24-integers_252f">Log in to Reply</a></span>		 
		</div>
		<p>OK, I understand after reading forward.<br />
Dangerouse because it could change the other variables.</p>
<p>Thank you</p>
		</div>
<ul class='children'>
		<li class="comment byuser comment-author-Tarindel bypostauthor odd alt depth-3 clearfix" id="comment-35413">
		<div id="div-comment-35413" class="clearfix comment-container bypostauthor">
		<div class="comment-author vcard">
		<img alt='' src='../../../0.gravatar.com/avatar/2bcdbab687c32f64f9208e016cafe4cc@s=65&d=http_253a_252f_252f0.gravatar.com_252favatar_252fad516503a11cd5ca435acc9bb6523536_253fs_253d65&r=g' class='avatar avatar-65 photo' height='65' width='65' />		<span class="authorname"><a href='../../../www.tarindel.com/default.htm' rel='external nofollow' class='url'>Alex</a></span>
		</div>
				<div class="comment-meta commentmetadata">
		<a href="comment-page-1/#comment-35413">
		December 22, 2008 at 10:49 pm</a>
        <span class="comment-reply-link"><a rel="nofollow" class="comment-reply-login" href="../../blog/wp-login.php@redirect_to=http_253a_252f_252fwww.learncpp.com_252fcpp-tutorial_252f24-integers_252f">Log in to Reply</a></span>		 
		</div>
		<p>Actually, overflow will just result in the most significant bits being lost.  It won&#8217;t overflow into other variables.</p>
		</div>
<ul class='children'>
		<li class="comment even depth-4 clearfix" id="comment-37943">
		<div id="div-comment-37943" class="clearfix comment-container">
		<div class="comment-author vcard">
		<img alt='' src='../../../0.gravatar.com/avatar/e66882aec5cfa01e26e7efae2868dfb0@s=65&d=http_253a_252f_252f0.gravatar.com_252favatar_252fad516503a11cd5ca435acc9bb6523536_253fs_253d65&r=g' class='avatar avatar-65 photo' height='65' width='65' />		<span class="authorname">SomeReader</span>
		</div>
				<div class="comment-meta commentmetadata">
		<a href="comment-page-1/#comment-37943">
		January 17, 2009 at 10:17 am</a>
        <span class="comment-reply-link"><a rel="nofollow" class="comment-reply-login" href="../../blog/wp-login.php@redirect_to=http_253a_252f_252fwww.learncpp.com_252fcpp-tutorial_252f24-integers_252f">Log in to Reply</a></span>		 
		</div>
		<p><cite>Actually, overflow will just result in the most significant bits being lost. It won’t overflow into other variables.</cite></p>
<p>It&#8217;s just because mathematical operations do not work with memory directly. The operand is put into CPU register (mostly EAX (on x86 machines) or its part &#8211; as the only register for integer mathematical purposes) for processing. The result (which can also occupy EDX register) is then taken from the initial place (EAX register) leading to higher bits lose.</p>
		</div>
<ul class='children'>
		<li class="comment odd alt depth-5 clearfix" id="comment-94443">
		<div id="div-comment-94443" class="clearfix comment-container">
		<div class="comment-author vcard">
		<img alt='' src='../../../1.gravatar.com/avatar/3244cdd2c32527f8877743bc5171a4ce@s=65&d=http_253a_252f_252f1.gravatar.com_252favatar_252fad516503a11cd5ca435acc9bb6523536_253fs_253d65&r=g' class='avatar avatar-65 photo' height='65' width='65' />		<span class="authorname">PReinie</span>
		</div>
				<div class="comment-meta commentmetadata">
		<a href="comment-page-1/#comment-94443">
		October 21, 2010 at 10:49 am</a>
        <span class="comment-reply-link"><a rel="nofollow" class="comment-reply-login" href="../../blog/wp-login.php@redirect_to=http_253a_252f_252fwww.learncpp.com_252fcpp-tutorial_252f24-integers_252f">Log in to Reply</a></span>		 
		</div>
		<p>However, if you&#8217;re dealing with putting the contents of the EAX register back into memory and the memory isn&#8217;t large enough to hold the register&#8217;s value (putting it into a char variable) that might cause problems. </p>
<p>Back to the original &#8220;is it dangerous?&#8221; if your plane altimeter value overflows and the auto-pilot now thinks you&#8217;re at 0 above ground and says CLIMB &#8211; NOW when you&#8217;re really way up in the air, who knows what could happen? Dangerous all depends on the application. </p>
<p>Alot of computer exploits occur when something is overlowed or underflowed and the OS switches into protected modes for recovery, and next thing you know your PC is compromised and sending out spam to thousands of people&#8230; or you get a blue screen of death or an eternal spinny (roulette) wheel of death.</p>
		</div>
</li>
		<li class="comment even depth-5 clearfix" id="comment-94444">
		<div id="div-comment-94444" class="clearfix comment-container">
		<div class="comment-author vcard">
		<img alt='' src='../../../1.gravatar.com/avatar/3244cdd2c32527f8877743bc5171a4ce@s=65&d=http_253a_252f_252f1.gravatar.com_252favatar_252fad516503a11cd5ca435acc9bb6523536_253fs_253d65&r=g' class='avatar avatar-65 photo' height='65' width='65' />		<span class="authorname">PReinie</span>
		</div>
				<div class="comment-meta commentmetadata">
		<a href="comment-page-1/#comment-94444">
		October 21, 2010 at 10:54 am</a>
        <span class="comment-reply-link"><a rel="nofollow" class="comment-reply-login" href="../../blog/wp-login.php@redirect_to=http_253a_252f_252fwww.learncpp.com_252fcpp-tutorial_252f24-integers_252f">Log in to Reply</a></span>		 
		</div>
		<p>However, if you&#8217;re dealing with putting the contents of the EAX register back into memory and the memory isn&#8217;t large enough to hold the register&#8217;s value (putting it into a char variable) that might cause problems. </p>
<p>Back to the original &#8220;is it dangerous?&#8221; if your plane altimeter value overflows and the auto-pilot now thinks you&#8217;re at 0 above ground and says CLIMB &#8211; NOW when you&#8217;re really way up in the air, who knows what could happen? Dangerous all depends on the application. </p>
<p>A lot of computer exploits occur when something is overlowed or underflowed and the OS switches into protected modes for recovery, and next thing you know your PC is compromised and sending out spam to thousands of people&#8230; or you get a blue screen of death or an eternal spinny (roulette) wheel of death.</p>
		</div>
</li>
</ul>
</li>
		<li class="comment odd alt depth-4 clearfix" id="comment-52662">
		<div id="div-comment-52662" class="clearfix comment-container">
		<div class="comment-author vcard">
		<img alt='' src='../../../0.gravatar.com/avatar/cb3d1b53f5b11b7ab0d1aca41f93a1e4@s=65&d=http_253a_252f_252f0.gravatar.com_252favatar_252fad516503a11cd5ca435acc9bb6523536_253fs_253d65&r=g' class='avatar avatar-65 photo' height='65' width='65' />		<span class="authorname">CuView</span>
		</div>
				<div class="comment-meta commentmetadata">
		<a href="comment-page-1/#comment-52662">
		March 23, 2009 at 8:45 am</a>
        <span class="comment-reply-link"><a rel="nofollow" class="comment-reply-login" href="../../blog/wp-login.php@redirect_to=http_253a_252f_252fwww.learncpp.com_252fcpp-tutorial_252f24-integers_252f">Log in to Reply</a></span>		 
		</div>
		<p>Thanks for your tutorial,<br />
now i&#8217;m able to make my own String, Array, etc classes similar to std::string and vector after 4 months learning c++</p>
<p>Thank you very much.</p>
		</div>
</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
		<li class="comment even thread-odd thread-alt depth-1 clearfix" id="comment-36249">
		<div id="div-comment-36249" class="clearfix comment-container">
		<div class="comment-author vcard">
		<img alt='' src='../../../0.gravatar.com/avatar/aecaf38ea8b22a8090c23243bf079b79@s=65&d=http_253a_252f_252f0.gravatar.com_252favatar_252fad516503a11cd5ca435acc9bb6523536_253fs_253d65&r=g' class='avatar avatar-65 photo' height='65' width='65' />		<span class="authorname">Godel</span>
		</div>
				<div class="comment-meta commentmetadata">
		<a href="comment-page-1/#comment-36249">
		January 2, 2009 at 5:03 pm</a>
        <span class="comment-reply-link"><a rel="nofollow" class="comment-reply-login" href="../../blog/wp-login.php@redirect_to=http_253a_252f_252fwww.learncpp.com_252fcpp-tutorial_252f24-integers_252f">Log in to Reply</a></span>		 
		</div>
		<p>Great tutorial! Knew nothing this morning, now already something.</p>
<p>Detail: the math behind the table with unsigned/signed range:<br />
doesn&#8217;t the n-bit unsigned variable have a range of 0 to 2^n instead of 0 to 2^n-1?</p>
		</div>
<ul class='children'>
		<li class="comment odd alt depth-2 clearfix" id="comment-37945">
		<div id="div-comment-37945" class="clearfix comment-container">
		<div class="comment-author vcard">
		<img alt='' src='../../../0.gravatar.com/avatar/e66882aec5cfa01e26e7efae2868dfb0@s=65&d=http_253a_252f_252f0.gravatar.com_252favatar_252fad516503a11cd5ca435acc9bb6523536_253fs_253d65&r=g' class='avatar avatar-65 photo' height='65' width='65' />		<span class="authorname">SomeReader</span>
		</div>
				<div class="comment-meta commentmetadata">
		<a href="comment-page-1/#comment-37945">
		January 17, 2009 at 10:31 am</a>
        <span class="comment-reply-link"><a rel="nofollow" class="comment-reply-login" href="../../blog/wp-login.php@redirect_to=http_253a_252f_252fwww.learncpp.com_252fcpp-tutorial_252f24-integers_252f">Log in to Reply</a></span>		 
		</div>
		<p>As it was mentioned above:</p>
<p><cite>As you learned in the last section, a variable with n bits can store 2^n different values&#8230;</cite></p>
<p>As 0 (zero) is also a value, the maximum number is (2^n)-1 and range becomes 0 &#8230; (2^n)-1 (inclusive).</p>
		</div>
</li>
</ul>
</li>
		<li class="comment even thread-even depth-1 clearfix" id="comment-46704">
		<div id="div-comment-46704" class="clearfix comment-container">
		<div class="comment-author vcard">
		<img alt='' src='../../../0.gravatar.com/avatar/697e6bedc325b8b01fc6e966fa2c2500@s=65&d=http_253a_252f_252f0.gravatar.com_252favatar_252fad516503a11cd5ca435acc9bb6523536_253fs_253d65&r=g' class='avatar avatar-65 photo' height='65' width='65' />		<span class="authorname">John</span>
		</div>
				<div class="comment-meta commentmetadata">
		<a href="comment-page-1/#comment-46704">
		February 23, 2009 at 11:04 pm</a>
        <span class="comment-reply-link"><a rel="nofollow" class="comment-reply-login" href="../../blog/wp-login.php@redirect_to=http_253a_252f_252fwww.learncpp.com_252fcpp-tutorial_252f24-integers_252f">Log in to Reply</a></span>		 
		</div>
		<p>What do you do if 4/8/16 bits isn&#8217;t big enough?  For instance, number theorists like to do arithmetic on very big numbers, ~ 100 to 200 digits large.</p>
		</div>
<ul class='children'>
		<li class="comment byuser comment-author-Tarindel bypostauthor odd alt depth-2 clearfix" id="comment-48436">
		<div id="div-comment-48436" class="clearfix comment-container bypostauthor">
		<div class="comment-author vcard">
		<img alt='' src='../../../0.gravatar.com/avatar/2bcdbab687c32f64f9208e016cafe4cc@s=65&d=http_253a_252f_252f0.gravatar.com_252favatar_252fad516503a11cd5ca435acc9bb6523536_253fs_253d65&r=g' class='avatar avatar-65 photo' height='65' width='65' />		<span class="authorname"><a href='../../../www.tarindel.com/default.htm' rel='external nofollow' class='url'>Alex</a></span>
		</div>
				<div class="comment-meta commentmetadata">
		<a href="comment-page-1/#comment-48436">
		March 1, 2009 at 12:00 pm</a>
        <span class="comment-reply-link"><a rel="nofollow" class="comment-reply-login" href="../../blog/wp-login.php@redirect_to=http_253a_252f_252fwww.learncpp.com_252fcpp-tutorial_252f24-integers_252f">Log in to Reply</a></span>		 
		</div>
		<p>On modern architectures, generally longs are 32 bits.  Most modern compilers also give you access to a 64-bit integer type (often called a long long, but sometimes it has other names, like __int64).</p>
<p>However, if you need even larger integers, then you will have to write your own data type.  You will learn how to do this in the section on classes (chapter 8).</p>
		</div>
</li>
</ul>
</li>
		<li class="comment even thread-odd thread-alt depth-1 clearfix" id="comment-56978">
		<div id="div-comment-56978" class="clearfix comment-container">
		<div class="comment-author vcard">
		<img alt='' src='../../../0.gravatar.com/avatar/ac2f9d56fb09fa514cf3d1e5d62104ac@s=65&d=http_253a_252f_252f0.gravatar.com_252favatar_252fad516503a11cd5ca435acc9bb6523536_253fs_253d65&r=g' class='avatar avatar-65 photo' height='65' width='65' />		<span class="authorname">Intelus</span>
		</div>
				<div class="comment-meta commentmetadata">
		<a href="comment-page-1/#comment-56978">
		April 9, 2009 at 1:27 pm</a>
        <span class="comment-reply-link"><a rel="nofollow" class="comment-reply-login" href="../../blog/wp-login.php@redirect_to=http_253a_252f_252fwww.learncpp.com_252fcpp-tutorial_252f24-integers_252f">Log in to Reply</a></span>		 
		</div>
		<p>I have a few questions:</p>
<p>1. Would these two programs ALWAYS output the same thing? (code below)<br />
2. If yes, would Prog1 be faster than Prog2?<br />
3. Is there a chance something can go wrong? (Okay, I know there&#8217;s always a chance, I&#8217;m asking if it&#8217;s significant.)<br />
Ex. different variable sizes on different computers, although integers should have constant sizes. In 2.3 — Variable sizes and the sizeof operator, the sizeof() test program returned 8B for long double on your computer while I got 12B but I can&#8217;t think of a way to use this efficiently for non-integer types so it doesn&#8217;t matter.</p>
<p>Yes, I know you&#8217;ll say I shouldn&#8217;t write such obscure code, this is just theoretically (besides, how often could I use such a function?).</p>
<p>Prog1:</p>
<pre>
#include &lt;iostream&gt;

int main()
{
    unsigned short num(12345);
    num += 65536;
    std::cout &lt;&lt; num;
    return 0;
}
<!--formatted--></pre>
<p>Prog2:</p>
<pre>
#include &lt;iostream&gt;

int main()
{
    unsigned short num(12345);
    num = (num + 65536) % 65536;
    std::cout &lt;&lt; num;
    return 0;
}
<!--formatted--></pre>
<p>You can replace 65536 with a multiple. I tried 214743648 and it worked fine.</p>
		</div>
<ul class='children'>
		<li class="comment odd alt depth-2 clearfix" id="comment-58929">
		<div id="div-comment-58929" class="clearfix comment-container">
		<div class="comment-author vcard">
		<img alt='' src='../../../1.gravatar.com/avatar/10dc9f8052d5a4b080c620a4467e54f7@s=65&d=http_253a_252f_252f1.gravatar.com_252favatar_252fad516503a11cd5ca435acc9bb6523536_253fs_253d65&r=g' class='avatar avatar-65 photo' height='65' width='65' />		<span class="authorname">csvan</span>
		</div>
				<div class="comment-meta commentmetadata">
		<a href="comment-page-1/#comment-58929">
		April 23, 2009 at 12:19 pm</a>
        <span class="comment-reply-link"><a rel="nofollow" class="comment-reply-login" href="../../blog/wp-login.php@redirect_to=http_253a_252f_252fwww.learncpp.com_252fcpp-tutorial_252f24-integers_252f">Log in to Reply</a></span>		 
		</div>
		<p>I believe you should post this in the forum, it doesnt really belong here.</p>
<p>Keep coding. Use it for good. :)</p>
		</div>
</li>
</ul>
</li>
		<li class="comment even thread-even depth-1 clearfix" id="comment-62807">
		<div id="div-comment-62807" class="clearfix comment-container">
		<div class="comment-author vcard">
		<img alt='' src='../../../1.gravatar.com/avatar/f6c0132c62ef4a53425c4db66e2ee2db@s=65&d=http_253a_252f_252f1.gravatar.com_252favatar_252fad516503a11cd5ca435acc9bb6523536_253fs_253d65&r=g' class='avatar avatar-65 photo' height='65' width='65' />		<span class="authorname">CJ</span>
		</div>
				<div class="comment-meta commentmetadata">
		<a href="comment-page-1/#comment-62807">
		June 21, 2009 at 8:39 am</a>
        <span class="comment-reply-link"><a rel="nofollow" class="comment-reply-login" href="../../blog/wp-login.php@redirect_to=http_253a_252f_252fwww.learncpp.com_252fcpp-tutorial_252f24-integers_252f">Log in to Reply</a></span>		 
		</div>
		<p>How come you don&#8217;t need to have &#8220;return 0;&#8221; in these example programs?</p>
		</div>
</li>
		<li class="comment odd alt thread-odd thread-alt depth-1 clearfix" id="comment-66153">
		<div id="div-comment-66153" class="clearfix comment-container">
		<div class="comment-author vcard">
		<img alt='' src='../../../0.gravatar.com/avatar/cc9db105b4ca9116367ba2aa0034dc0a@s=65&d=http_253a_252f_252f0.gravatar.com_252favatar_252fad516503a11cd5ca435acc9bb6523536_253fs_253d65&r=g' class='avatar avatar-65 photo' height='65' width='65' />		<span class="authorname">meenakshi</span>
		</div>
				<div class="comment-meta commentmetadata">
		<a href="comment-page-1/#comment-66153">
		August 12, 2009 at 10:41 pm</a>
        <span class="comment-reply-link"><a rel="nofollow" class="comment-reply-login" href="../../blog/wp-login.php@redirect_to=http_253a_252f_252fwww.learncpp.com_252fcpp-tutorial_252f24-integers_252f">Log in to Reply</a></span>		 
		</div>
		<p>whatis d difrence betn c++ and vc++ ???? is it just tht vc++ is writn in visual studio??? what about turbo c++??</p>
		</div>
</li>
		<li class="comment even thread-even depth-1 clearfix" id="comment-70694">
		<div id="div-comment-70694" class="clearfix comment-container">
		<div class="comment-author vcard">
		<img alt='' src='../../../1.gravatar.com/avatar/fecdc7210565b0fa3c78c44217b0d158@s=65&d=http_253a_252f_252f1.gravatar.com_252favatar_252fad516503a11cd5ca435acc9bb6523536_253fs_253d65&r=g' class='avatar avatar-65 photo' height='65' width='65' />		<span class="authorname">William</span>
		</div>
				<div class="comment-meta commentmetadata">
		<a href="comment-page-1/#comment-70694">
		October 20, 2009 at 1:02 pm</a>
        <span class="comment-reply-link"><a rel="nofollow" class="comment-reply-login" href="../../blog/wp-login.php@redirect_to=http_253a_252f_252fwww.learncpp.com_252fcpp-tutorial_252f24-integers_252f">Log in to Reply</a></span>		 
		</div>
		<p>Thanks again for your excellent tutorials Alex.</p>
<p>Just 2 quests;</p>
<p>1. in the &#8216;Range&#8217; table above, 4 byte unsigned 	0 to 4,294,967,296: is it 4,294,967,296 or 4,294,967,295?</p>
<p>2. when Stroustrup says “The unsigned integer types are ideal for uses that treat storage as a bit array.&#8221;, does he mean when you are using the bits within a variable to check if they are on or off?</p>
		</div>
</li>
		<li class="comment odd alt thread-odd thread-alt depth-1 clearfix" id="comment-73873">
		<div id="div-comment-73873" class="clearfix comment-container">
		<div class="comment-author vcard">
		<img alt='' src='../../../1.gravatar.com/avatar/b591b25d55c65be972d67b7add2e0795@s=65&d=http_253a_252f_252f1.gravatar.com_252favatar_252fad516503a11cd5ca435acc9bb6523536_253fs_253d65&r=g' class='avatar avatar-65 photo' height='65' width='65' />		<span class="authorname"><a href='../../../www.peep-music.nl/blog/default.htm' rel='external nofollow' class='url'>Kaonashi</a></span>
		</div>
				<div class="comment-meta commentmetadata">
		<a href="comment-page-1/#comment-73873">
		December 8, 2009 at 8:58 am</a>
        <span class="comment-reply-link"><a rel="nofollow" class="comment-reply-login" href="../../blog/wp-login.php@redirect_to=http_253a_252f_252fwww.learncpp.com_252fcpp-tutorial_252f24-integers_252f">Log in to Reply</a></span>		 
		</div>
		<p>How do you prevent an integer overflow?</p>
<p>My program prevents users entering a number higher than a billion, that works just fine. But, however, if a user enters a number that exceeds the integer-range, my program gets stuck in a loop. Is there a way to prevent a user from entering a number that causes an overflow?</p>
		</div>
</li>
		<li class="comment even thread-even depth-1 clearfix" id="comment-74854">
		<div id="div-comment-74854" class="clearfix comment-container">
		<div class="comment-author vcard">
		<img alt='' src='../../../1.gravatar.com/avatar/17c3ef4ae53fb0bdd31e12c9f9cfee63@s=65&d=http_253a_252f_252f1.gravatar.com_252favatar_252fad516503a11cd5ca435acc9bb6523536_253fs_253d65&r=g' class='avatar avatar-65 photo' height='65' width='65' />		<span class="authorname">lampamp</span>
		</div>
				<div class="comment-meta commentmetadata">
		<a href="comment-page-1/#comment-74854">
		December 25, 2009 at 9:49 am</a>
        <span class="comment-reply-link"><a rel="nofollow" class="comment-reply-login" href="../../blog/wp-login.php@redirect_to=http_253a_252f_252fwww.learncpp.com_252fcpp-tutorial_252f24-integers_252f">Log in to Reply</a></span>		 
		</div>
		<p>65535 is 0011011000110101001101010011001100110101<br />
65536 is 0011011000110101001101010011001100110110</p>
<p>how is short able to maintain the first but not the second?<br />
can u please explain?</p>
		</div>
<ul class='children'>
		<li class="comment odd alt depth-2 clearfix" id="comment-93650">
		<div id="div-comment-93650" class="clearfix comment-container">
		<div class="comment-author vcard">
		<img alt='' src='../../../1.gravatar.com/avatar/170a28a5a084feb70895bef03f9fce95@s=65&d=http_253a_252f_252f1.gravatar.com_252favatar_252fad516503a11cd5ca435acc9bb6523536_253fs_253d65&r=g' class='avatar avatar-65 photo' height='65' width='65' />		<span class="authorname">Alex</span>
		</div>
				<div class="comment-meta commentmetadata">
		<a href="comment-page-1/#comment-93650">
		October 13, 2010 at 6:15 am</a>
        <span class="comment-reply-link"><a rel="nofollow" class="comment-reply-login" href="../../blog/wp-login.php@redirect_to=http_253a_252f_252fwww.learncpp.com_252fcpp-tutorial_252f24-integers_252f">Log in to Reply</a></span>		 
		</div>
		<p>I don&#8217;t think you have your binary right,</p>
<pre>
65,535 is         1111 1111 1111 1111
but 65,536 is   1 0000 0000 0000 0000
</pre>
		</div>
</li>
</ul>
</li>
		<li class="comment even thread-odd thread-alt depth-1 clearfix" id="comment-75452">
		<div id="div-comment-75452" class="clearfix comment-container">
		<div class="comment-author vcard">
		<img alt='' src='../../../1.gravatar.com/avatar/9f430a5414a5fedf86f8dfe47ab74b7f@s=65&d=http_253a_252f_252f1.gravatar.com_252favatar_252fad516503a11cd5ca435acc9bb6523536_253fs_253d65&r=g' class='avatar avatar-65 photo' height='65' width='65' />		<span class="authorname">Yzak</span>
		</div>
				<div class="comment-meta commentmetadata">
		<a href="comment-page-1/#comment-75452">
		January 3, 2010 at 3:33 pm</a>
        <span class="comment-reply-link"><a rel="nofollow" class="comment-reply-login" href="../../blog/wp-login.php@redirect_to=http_253a_252f_252fwww.learncpp.com_252fcpp-tutorial_252f24-integers_252f">Log in to Reply</a></span>		 
		</div>
		<p>Adam,<br />
In the overflow section, I noticed you only have 14 numbers. Shouldn&#8217;t there be 16 since you are starting from 0. Wouldn&#8217;t it be:<br />
0, 1, 10, 11, 100, 101, 110, 111, 1000, 1001, 1010, 1011, 1101, 1111<br />
0 &#8211;   0<br />
1 &#8211;   1<br />
2 &#8211;  10<br />
3 &#8211;  11<br />
4 &#8211; 100<br />
5 &#8211; 101<br />
6 &#8211; 110<br />
7 &#8211; 111<br />
8 -1000<br />
9 -1001<br />
10-1010<br />
11-1011<br />
12-1101<br />
13-1110<br />
14-1111<br />
15-10000<br />
?</p>
		</div>
<ul class='children'>
		<li class="comment odd alt depth-2 clearfix" id="comment-86989">
		<div id="div-comment-86989" class="clearfix comment-container">
		<div class="comment-author vcard">
		<img alt='' src='../../../0.gravatar.com/avatar/a2094f5b6c1a941e0a70a345a09ab3ca@s=65&d=http_253a_252f_252f0.gravatar.com_252favatar_252fad516503a11cd5ca435acc9bb6523536_253fs_253d65&r=g' class='avatar avatar-65 photo' height='65' width='65' />		<span class="authorname">joha</span>
		</div>
				<div class="comment-meta commentmetadata">
		<a href="comment-page-1/#comment-86989">
		June 22, 2010 at 10:36 am</a>
        <span class="comment-reply-link"><a rel="nofollow" class="comment-reply-login" href="../../blog/wp-login.php@redirect_to=http_253a_252f_252fwww.learncpp.com_252fcpp-tutorial_252f24-integers_252f">Log in to Reply</a></span>		 
		</div>
		<p>I thing it is 0-1-10-11-100-101-110-111-1000-1001-1010-1011-1100-1101-1110 to make a 15 and to make a 16, just add a 1111&#8230;&#8230;</p>
<p>Let me know if I am mistaken&#8230;..great tutorials&#8230;</p>
		</div>
<ul class='children'>
		<li class="comment even depth-3 clearfix" id="comment-87043">
		<div id="div-comment-87043" class="clearfix comment-container">
		<div class="comment-author vcard">
		<img alt='' src='../../../0.gravatar.com/avatar/2fd9fc9be561c03def5f1cb60aed1e85@s=65&d=http_253a_252f_252f0.gravatar.com_252favatar_252fad516503a11cd5ca435acc9bb6523536_253fs_253d65&r=g' class='avatar avatar-65 photo' height='65' width='65' />		<span class="authorname">zsb</span>
		</div>
				<div class="comment-meta commentmetadata">
		<a href="comment-page-1/#comment-87043">
		June 23, 2010 at 8:44 am</a>
        <span class="comment-reply-link"><a rel="nofollow" class="comment-reply-login" href="../../blog/wp-login.php@redirect_to=http_253a_252f_252fwww.learncpp.com_252fcpp-tutorial_252f24-integers_252f">Log in to Reply</a></span>		 
		</div>
		<pre>i have a calculator for this it is
0-1-10-11-100-101-110-111-1000-1001-1010-1011-1100-1101-1110-1111
0-15</pre>
		</div>
</li>
</ul>
</li>
</ul>
</li>
		<li class="comment odd alt thread-even depth-1 clearfix" id="comment-75642">
		<div id="div-comment-75642" class="clearfix comment-container">
		<div class="comment-author vcard">
		<img alt='' src='../../../1.gravatar.com/avatar/9f430a5414a5fedf86f8dfe47ab74b7f@s=65&d=http_253a_252f_252f1.gravatar.com_252favatar_252fad516503a11cd5ca435acc9bb6523536_253fs_253d65&r=g' class='avatar avatar-65 photo' height='65' width='65' />		<span class="authorname">Yzak</span>
		</div>
				<div class="comment-meta commentmetadata">
		<a href="comment-page-1/#comment-75642">
		January 3, 2010 at 7:50 pm</a>
        <span class="comment-reply-link"><a rel="nofollow" class="comment-reply-login" href="../../blog/wp-login.php@redirect_to=http_253a_252f_252fwww.learncpp.com_252fcpp-tutorial_252f24-integers_252f">Log in to Reply</a></span>		 
		</div>
		<p>oops&#8230;<br />
12 &#8211; 1100<br />
13 &#8211; 1101<br />
14 &#8211; 1110<br />
15 &#8211; 1111</p>
		</div>
</li>
		<li class="comment even thread-odd thread-alt depth-1 clearfix" id="comment-82256">
		<div id="div-comment-82256" class="clearfix comment-container">
		<div class="comment-author vcard">
		<img alt='' src='../../../0.gravatar.com/avatar/0f7fad669618e6aca620c334f89b0da4@s=65&d=http_253a_252f_252f0.gravatar.com_252favatar_252fad516503a11cd5ca435acc9bb6523536_253fs_253d65&r=g' class='avatar avatar-65 photo' height='65' width='65' />		<span class="authorname">Subhasis Rout</span>
		</div>
				<div class="comment-meta commentmetadata">
		<a href="comment-page-1/#comment-82256">
		April 3, 2010 at 11:22 am</a>
        <span class="comment-reply-link"><a rel="nofollow" class="comment-reply-login" href="../../blog/wp-login.php@redirect_to=http_253a_252f_252fwww.learncpp.com_252fcpp-tutorial_252f24-integers_252f">Log in to Reply</a></span>		 
		</div>
		<p>Can someone tell me why this does not work.</p>
<pre>
unsigned char ch1=5;
cout&lt;&lt;&quot;The value of ch1 is : &quot;&lt;&lt;ch1&lt;&lt;endl;
</pre>
<p>As per the above lesson char is type of INT. so this should work.</p>
		</div>
</li>
		<li class="comment odd alt thread-even depth-1 clearfix" id="comment-84914">
		<div id="div-comment-84914" class="clearfix comment-container">
		<div class="comment-author vcard">
		<img alt='' src='../../../1.gravatar.com/avatar/16ed2b018902377f32d7e1a551d6a03c@s=65&d=http_253a_252f_252f1.gravatar.com_252favatar_252fad516503a11cd5ca435acc9bb6523536_253fs_253d65&r=g' class='avatar avatar-65 photo' height='65' width='65' />		<span class="authorname">mfz</span>
		</div>
				<div class="comment-meta commentmetadata">
		<a href="comment-page-1/#comment-84914">
		May 18, 2010 at 1:00 pm</a>
        <span class="comment-reply-link"><a rel="nofollow" class="comment-reply-login" href="../../blog/wp-login.php@redirect_to=http_253a_252f_252fwww.learncpp.com_252fcpp-tutorial_252f24-integers_252f">Log in to Reply</a></span>		 
		</div>
		<p>For &#8220;1 byte signed&#8221; the range is -128 to 127, how is -128 represented in 1 byte, does&#8217;nt it cause an overflow?<br />
127  =&gt; 01111111<br />
-128 =&gt; 111111111 (the right most 1 represents &#8211; negative)</p>
<p>Also why cant we represent 128 in 1 byte (why is the range only till 127?)<br />
128 =&gt; 10000000</p>
<p>Thx</p>
		</div>
</li>
		<li class="comment even thread-odd thread-alt depth-1 clearfix" id="comment-87011">
		<div id="div-comment-87011" class="clearfix comment-container">
		<div class="comment-author vcard">
		<img alt='' src='../../../1.gravatar.com/avatar/5f8f20fd8a75b956705e9a06f7e183c5@s=65&d=http_253a_252f_252f1.gravatar.com_252favatar_252fad516503a11cd5ca435acc9bb6523536_253fs_253d65&r=g' class='avatar avatar-65 photo' height='65' width='65' />		<span class="authorname">joe</span>
		</div>
				<div class="comment-meta commentmetadata">
		<a href="comment-page-1/#comment-87011">
		June 22, 2010 at 8:36 pm</a>
        <span class="comment-reply-link"><a rel="nofollow" class="comment-reply-login" href="../../blog/wp-login.php@redirect_to=http_253a_252f_252fwww.learncpp.com_252fcpp-tutorial_252f24-integers_252f">Log in to Reply</a></span>		 
		</div>
		<p>What is the difference between the &#8220;long&#8221; and &#8220;int&#8221; variable types? (They both have the same size).</p>
		</div>
</li>
		<li class="comment odd alt thread-even depth-1 clearfix" id="comment-89207">
		<div id="div-comment-89207" class="clearfix comment-container">
		<div class="comment-author vcard">
		<img alt='' src='../../../0.gravatar.com/avatar/8cdcf468e03959285742d09b5a8e1835@s=65&d=http_253a_252f_252f0.gravatar.com_252favatar_252fad516503a11cd5ca435acc9bb6523536_253fs_253d65&r=g' class='avatar avatar-65 photo' height='65' width='65' />		<span class="authorname">Aditya Dhara</span>
		</div>
				<div class="comment-meta commentmetadata">
		<a href="comment-page-1/#comment-89207">
		July 28, 2010 at 1:09 am</a>
        <span class="comment-reply-link"><a rel="nofollow" class="comment-reply-login" href="../../blog/wp-login.php@redirect_to=http_253a_252f_252fwww.learncpp.com_252fcpp-tutorial_252f24-integers_252f">Log in to Reply</a></span>		 
		</div>
		<p>when you say, an int variable has a size of 2 bytes or 4 bytes, what do u mean? does it dynamically change size from 2 to 4 bytes as the number get larger?</p>
		</div>
</li>
		<li class="comment even thread-odd thread-alt depth-1 clearfix" id="comment-90822">
		<div id="div-comment-90822" class="clearfix comment-container">
		<div class="comment-author vcard">
		<img alt='' src='../../../1.gravatar.com/avatar/7f396d4cdc710ac872fd6706d7478234@s=65&d=http_253a_252f_252f1.gravatar.com_252favatar_252fad516503a11cd5ca435acc9bb6523536_253fs_253d65&r=g' class='avatar avatar-65 photo' height='65' width='65' />		<span class="authorname">Kevin</span>
		</div>
				<div class="comment-meta commentmetadata">
		<a href="comment-page-1/#comment-90822">
		August 24, 2010 at 1:56 pm</a>
        <span class="comment-reply-link"><a rel="nofollow" class="comment-reply-login" href="../../blog/wp-login.php@redirect_to=http_253a_252f_252fwww.learncpp.com_252fcpp-tutorial_252f24-integers_252f">Log in to Reply</a></span>		 
		</div>
		<p>Hi Alex</p>
<p>Did you realise you were missing the number 12 and 14 from your binary example?</p>
<p>You have:<br />
 0, 1, 10, 11, 100, 101, 110, 111, 1000, 1001, 1010, 1011, 1101, 1111<br />
Should be:<br />
 0, 1, 10, 11, 100, 101, 110, 111, 1000, 1001, 1010, 1011, 1100, 1101, 1110, 1111</p>
<p>Don&#8217;t know if that was intentional but it certainly hurt by brain (binary newbie) figuring it out!</p>
<p>Cheers for the awesome tutorial, I&#8217;m so grateful for your time :)</p>
<p>Kevin</p>
		</div>
</li>
		<li class="comment byuser comment-author-kapa_89 odd alt thread-even depth-1 clearfix" id="comment-94843">
		<div id="div-comment-94843" class="clearfix comment-container">
		<div class="comment-author vcard">
		<img alt='' src='../../../0.gravatar.com/avatar/84191848da95461202236cec3b19233c@s=65&d=http_253a_252f_252f0.gravatar.com_252favatar_252fad516503a11cd5ca435acc9bb6523536_253fs_253d65&r=g' class='avatar avatar-65 photo' height='65' width='65' />		<span class="authorname">kapa_89</span>
		</div>
				<div class="comment-meta commentmetadata">
		<a href="comment-page-1/#comment-94843">
		October 31, 2010 at 3:15 pm</a>
        <span class="comment-reply-link"><a rel="nofollow" class="comment-reply-login" href="../../blog/wp-login.php@redirect_to=http_253a_252f_252fwww.learncpp.com_252fcpp-tutorial_252f24-integers_252f">Log in to Reply</a></span>		 
		</div>
		<p>Why in these tutorials instead of displaying the actual code i get characters
<pre class="brush: plain; title: ; notranslate" title=""> ex.:

&quot;The number 65,535 is represented by the bit pattern ---&gt;[code]]czoxOTpcIjExMTEgMTExMSAxMTExIDExMTFcIjt7WyYqJl19[</pre>
<p> &lt;---- in binary.&quot;</p>
		</div>
</li>
		<li class="pingback even thread-odd thread-alt depth-1 clearfix" id="comment-96475">
		<div id="div-comment-96475" class="clearfix comment-container">
		<div class="comment-author vcard">
				<span class="authorname"><a href='../b-2-long-long-auto-decltype-nullptr-and-enum-classes/default.htm' rel='external nofollow' class='url'>B.2 &#8212; Long long, auto, decltype, nullptr, and enum classes &laquo; Learn C++</a></span>
		</div>
				<div class="comment-meta commentmetadata">
		<a href="comment-page-1/#comment-96475">
		November 26, 2011 at 1:19 pm</a>
        <span class="comment-reply-link"><a rel="nofollow" class="comment-reply-login" href="../../blog/wp-login.php@redirect_to=http_253a_252f_252fwww.learncpp.com_252fcpp-tutorial_252f24-integers_252f">Log in to Reply</a></span>		 
		</div>
		<p>[...] you recall from lesson 2.4 &#8212; Integers, the largest integer type C++03 defines is &#8220;long&#8221;. Long has a platform-specific size [...]</p>
		</div>
</li>
	
	</ul>
	<!-- / Comment List -->

	



	
	<p>You must be <a href="../../blog/wp-login.php@redirect_to=http_253a_252f_252fwww.learncpp.com_252fcpp-tutorial_252f24-integers_252f">logged in</a> to post a comment.</p>

		

<div class="clearfix navigation-bottom">
		<div class="older">&laquo; <a href="../23-variable-sizes-and-the-sizeof-operator/default.htm" rel="prev">2.3 &#8212; Variable sizes and the sizeof operator</a> &nbsp;</div><div class="newer">&nbsp; <a href="../25-floating-point-numbers/default.htm" rel="next">2.5 &#8212; Floating point numbers</a> &raquo;</div></div>		
			



</td>
<!-- / Main Column -->


<!-- Right Sidebar -->
<td id="right">

	<div id="text-1" class="widget widget_text">			<div class="textwidget"><script type="text/javascript"><!--
google_ad_client = "pub-0588844875925051";
/* Wide Skyscraper Right Bar */
google_ad_slot = "0955932809";
google_ad_width = 160;
google_ad_height = 600;
//-->
</script>
<acript type="text/javascript"
src="../../../pagead2.googlesyndication.com/pagead/show_ads.js">
</script></div>
		</div><div id="archives-2" class="widget widget_archive"><div class="widget-title"><h3>Archives</h3></div>		<ul>
			<li><a href='../../2011/11/default.htm' title='November 2011'>November 2011</a></li>
	<li><a href='../../2011/10/default.htm' title='October 2011'>October 2011</a></li>
	<li><a href='../../2011/09/default.htm' title='September 2011'>September 2011</a></li>
	<li><a href='../../2010/10/default.htm' title='October 2010'>October 2010</a></li>
	<li><a href='../../2010/07/default.htm' title='July 2010'>July 2010</a></li>
	<li><a href='../../2009/10/default.htm' title='October 2009'>October 2009</a></li>
	<li><a href='../../2009/09/default.htm' title='September 2009'>September 2009</a></li>
	<li><a href='../../2009/03/default.htm' title='March 2009'>March 2009</a></li>
	<li><a href='../../2008/12/default.htm' title='December 2008'>December 2008</a></li>
	<li><a href='../../2008/10/default.htm' title='October 2008'>October 2008</a></li>
	<li><a href='../../2008/09/default.htm' title='September 2008'>September 2008</a></li>
	<li><a href='../../2008/08/default.htm' title='August 2008'>August 2008</a></li>
	<li><a href='../../2008/06/default.htm' title='June 2008'>June 2008</a></li>
	<li><a href='../../2008/05/default.htm' title='May 2008'>May 2008</a></li>
	<li><a href='../../2008/04/default.htm' title='April 2008'>April 2008</a></li>
	<li><a href='../../2008/03/default.htm' title='March 2008'>March 2008</a></li>
	<li><a href='../../2008/02/default.htm' title='February 2008'>February 2008</a></li>
	<li><a href='../../2008/01/default.htm' title='January 2008'>January 2008</a></li>
	<li><a href='../../2007/12/default.htm' title='December 2007'>December 2007</a></li>
	<li><a href='../../2007/11/default.htm' title='November 2007'>November 2007</a></li>
	<li><a href='../../2007/10/default.htm' title='October 2007'>October 2007</a></li>
	<li><a href='../../2007/09/default.htm' title='September 2007'>September 2007</a></li>
	<li><a href='../../2007/08/default.htm' title='August 2007'>August 2007</a></li>
	<li><a href='../../2007/07/default.htm' title='July 2007'>July 2007</a></li>
	<li><a href='../../2007/06/default.htm' title='June 2007'>June 2007</a></li>
	<li><a href='../../2007/05/default.htm' title='May 2007'>May 2007</a></li>
		</ul>
</div>
</td>
<!-- / Right Sidebar -->

</tr>
<!-- / Main Body -->
<tr>

<!-- Footer -->
<td id="footer" colspan="3">

    <p>
    Copyright &copy; 2011 <a href="../../default.htm">Learn C++</a> - All Rights Reserved<br />Powered by <a href="../../../wordpress.org/default.htm">WordPress</a> &amp; the <a href="../../../wordpress.bytesforall.com/default.htm" title="Customizable WordPress themes">Atahualpa Theme</a> by <a href="../../../www.bytesforall.com/default.htm" title="BFA Webdesign">BytesForAll</a>. Discuss on our <a href="../../../forum.bytesforall.com/default.htm" title="Atahualpa &amp; WordPress">WP Forum</a>    </p>
    
    
    <script type='text/javascript' src='../../blog/wp-content/plugins/syntaxhighlighter/syntaxhighlighter3/scripts/shcore.js@ver=3.0.83c'></script>
<script type='text/javascript' src='../../blog/wp-content/plugins/syntaxhighlighter/syntaxhighlighter3/scripts/shbrushcpp.js@ver=3.0.83c'></script>
<script type='text/javascript' src='../../blog/wp-content/plugins/syntaxhighlighter/syntaxhighlighter3/scripts/shbrushplain.js@ver=3.0.83c'></script>
<script type='text/javascript'>
	(function(){
		var corecss = document.createElement('link');
		var themecss = document.createElement('link');
		var corecssurl = "../../blog/wp-content/plugins/syntaxhighlighter/syntaxhighlighter3/styles/shcore.css@ver=3.0.83c.css";
		if ( corecss.setAttribute ) {
				corecss.setAttribute( "rel", "stylesheet" );
				corecss.setAttribute( "type", "text/css" );
				corecss.setAttribute( "href", corecssurl );
		} else {
				corecss.rel = "stylesheet";
				corecss.href = corecssurl;
		}
		document.getElementsByTagName("head")[0].insertBefore( corecss, document.getElementById("syntaxhighlighteranchor") );
		var themecssurl = "../../blog/wp-content/plugins/syntaxhighlighter/syntaxhighlighter3/styles/shthemedefault.css@ver=3.0.83c.css";
		if ( themecss.setAttribute ) {
				themecss.setAttribute( "rel", "stylesheet" );
				themecss.setAttribute( "type", "text/css" );
				themecss.setAttribute( "href", themecssurl );
		} else {
				themecss.rel = "stylesheet";
				themecss.href = themecssurl;
		}
		//document.getElementById("syntaxhighlighteranchor").appendChild(themecss);
		document.getElementsByTagName("head")[0].insertBefore( themecss, document.getElementById("syntaxhighlighteranchor") );
	})();
	SyntaxHighlighter.config.strings.expandSource = '+ expand source';
	SyntaxHighlighter.config.strings.help = '?';
	SyntaxHighlighter.config.strings.alert = 'SyntaxHighlighter\n\n';
	SyntaxHighlighter.config.strings.noBrush = 'Can\'t find brush for: ';
	SyntaxHighlighter.config.strings.brushNotHtmlScript = 'Brush wasn\'t configured for html-script option: ';
	SyntaxHighlighter.defaults['pad-line-numbers'] = false;
	SyntaxHighlighter.defaults['toolbar'] = false;
	SyntaxHighlighter.all();
</script>
<!--stats_footer_test--><script src="../../../stats.wordpress.com/e-201148.js" type="text/javascript"></script>
<script type="text/javascript">
st_go({blog:'3928254',v:'ext',post:'44'});
var load_cmc = function(){linktracker_init(3928254,44,2);};
if ( typeof addLoadEvent != 'undefined' ) addLoadEvent(load_cmc);
else load_cmc();
</script>

</td>
<!-- / Footer -->

</tr>
</table><!-- / layout -->
</div><!-- / container -->
</div><!-- / wrapper -->
</body>
</html>
<!-- Dynamic page generated in 0.633 seconds. -->
<!-- Cached page generated by WP-Super-Cache on 2011-12-02 06:36:52 -->
<!-- Compression = gzip -->