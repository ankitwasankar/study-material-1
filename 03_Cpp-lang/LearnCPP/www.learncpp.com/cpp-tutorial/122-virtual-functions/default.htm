<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd"><meta http-equiv="Content-Type" content="text/html; charset=utf-8"><!-- saved from url=(0070)http://www.learncpp.com/cpp-tutorial/122-virtual-functions/default.htm -->

<html xmlns="http://www.w3.org/1999/xhtml" dir="ltr" lang="en-US">
<head>
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8" />
<meta http-equiv="X-UA-Compatible" content="IE=EmulateIE7" />
<title>12.2 &#8212; Virtual functions &laquo; Learn C++</title>
<link rel="shortcut icon" href="../../blog/wp-content/themes/atahualpa353/images/favicon/learncpp.ico" /><link rel="canonical" href="default.htm" /><link rel="alternate" type="application/rss+xml" title="Learn C++ RSS Feed" href="../../feed/default.htm" />
<link rel="alternate" type="application/atom+xml" title="Learn C++ Atom Feed" href="../../feed/atom/default.htm" />
<link rel="pingback" href="http://www.learncpp.com/blog/xmlrpc.php" />
<link rel="alternate" type="application/rss+xml" title="Learn C++ &raquo; 12.2 &#8212; Virtual functions Comments Feed" href="feed/default.htm" />
<script type='text/javascript' src='../../blog/wp-includes/js/l10n.js@ver=20101110'></script>
<script type='text/javascript' src='../../blog/wp-includes/js/jquery/jquery.js@ver=1.6.1'></script>
<script type='text/javascript' src='../../blog/wp-includes/js/comment-reply.js@ver=20090102'></script>
<script type='text/javascript' src='../../blog/wp-content/plugins/google-analyticator/external-tracking.min.js@ver=6.2'></script>
<link rel="EditURI" type="application/rsd+xml" title="RSD" href="http://www.learncpp.com/blog/xmlrpc.php?rsd" />
<link rel="wlwmanifest" type="application/wlwmanifest+xml" href="../../blog/wp-includes/wlwmanifest.xml" /> 
<link rel='index' title='Learn C++' href='../../default.htm' />
<link rel='start' title='Welcome to LearnCpp.com!' href='../../site-news/this-is-a-news-test-post/default.htm' />
<link rel='prev' title='12.1 &#8212; Pointers and references to the base class of derived objects' href='../121-pointers-and-references-to-the-base-class-of-derived-objects/default.htm' />
<link rel='next' title='12.3 &#8212; Virtual destructors, virtual assignment, and overriding virtualization' href='../123-virtual-destructors-virtual-assignment-and-overriding-virtualization/default.htm' />
<link rel='canonical' href='default.htm' />
<link rel='shortlink' href='../../../wp.me/pgtuw-2u' />
<meta name="ROBOTS" content="INDEX" />

<!-- Powered by AdSense-Deluxe WordPress Plugin v0.8 - http://www.acmetech.com/blog/adsense-deluxe/ -->
<!-- wpSolution Code -->
        <script type="text/javascript">
            function wpSolutionToggle(solution, link, showtext, hidetext) {
                if (solution.style.display != 'none') {
                    solution.style.display = 'none';
                    link.innerHTML = showtext;
                    link.className = 'solution_link_show';
                } else {
                    solution.style.display = 'block';
                    link.innerHTML = hidetext;
                    link.className = 'solution_link_hide';
                }
            }
          </script>
<style type="text/css">body{text-align:center;margin:0;padding:0;font-family:verdana,arial,sans-serif;font-size:13px;line-height:1.4;color:#000000;background:#ddd;padding-top:20px;padding-bottom:20px}a:link,a:visited,a:active{color:#365DA0;font-weight:bold;text-decoration:none;}a:hover{color:#365DA0;font-weight:bold;text-decoration:underline}ul,ol,dl,p,h1,h2,h3,h4,h5,h6{margin-top:10px;margin-bottom:10px;padding-top:0;padding-bottom:0;}ul ul,ul ol,ol ul,ol ol{margin-top:0;margin-bottom:0}code,pre{font-family:"Courier New",Courier,monospace;font-size:1em}pre{overflow:auto;word-wrap:normal;padding-bottom:1.5em;overflow-y:hidden;width:99%}abbr[title],acronym[title]{border-bottom:1px dotted}hr{display:block;height:2px;border:none;margin:0.5em auto;color:#cccccc;background-color:#cccccc}table{font-size:1em;}div.post,ul.commentlist li,ol.commentlist li{word-wrap:break-word;}pre,.wp_syntax{word-wrap:normal;}div#wrapper{text-align:center;margin-left:auto;margin-right:auto;display:block;width:98%}* html div#wrapper{<!--width:expression"98%");-->}div#container{padding:20px;background:#fff;box-shadow:0 0 15px #333;-moz-box-shadow:0 0 15px #333;padding-left:20px;padding-right:20px;width:auto;margin-left:auto;margin-right:auto;text-align:left;display:block}table#layout{font-size:100%;width:100%;table-layout:fixed}.colone{width:200px}.colone-inner{width:200px}.coltwo{width:100% }.colthree-inner{width:200px}.colthree{width:200px}td#header{width:auto;padding:0}table#logoarea,table#logoarea tr,table#logoarea td{margin:0;padding:0;background:none;border:0}table#logoarea{width:100%;border-spacing:0px}img.logo{display:block;margin:0 10px 0 0}td.logoarea-logo{width:1%}h1.blogtitle,h2.blogtitle{ display:block;margin:0;padding:0;letter-spacing:-1px;line-height:1.0em;font-size:200%;text-transform:uppercase;font-smooth:always}h1.blogtitle a:link,h1.blogtitle a:visited,h1.blogtitle a:active,h2.blogtitle a:link,h2.blogtitle a:visited,h2.blogtitle a:active{ text-decoration:none;color:#000000;font-weight:normal;font-smooth:always}h1.blogtitle a:hover,h2.blogtitle a:hover{ text-decoration:none;color:#AC161B;font-weight:normal}p.tagline{margin:0;padding:0;font-size:1.2em;font-weight:normal;color:#444}td.feed-icons{white-space:nowrap;}div.rss-box{height:1%;display:block;padding:10px 0 10px 10px;margin:0;width:280px}a.comments-icon{height:22px;line-height:22px;margin:0 5px 0 5px;padding-left:22px;display:block;text-decoration:none;float:right;white-space:nowrap}a.comments-icon:link,a.commentss-icon:active,a.comments-icon:visited{background:transparent url(../../blog/wp-content/themes/atahualpa353/images/comment-gray.png) no-repeat scroll center left}a.comments-icon:hover{background:transparent url(../../blog/wp-content/themes/atahualpa353/images/comment.png) no-repeat scroll center left}a.posts-icon{height:22px;line-height:22px;margin:0 5px 0 0;padding-left:20px;display:block;text-decoration:none;float:right;white-space:nowrap}a.posts-icon:link,a.posts-icon:active,a.posts-icon:visited{background:transparent url(../../blog/wp-content/themes/atahualpa353/images/rss-gray.png) no-repeat scroll center left}a.posts-icon:hover{background:transparent url(../../blog/wp-content/themes/atahualpa353/images/rss.png) no-repeat scroll center left}a.email-icon{height:22px;line-height:22px;margin:0 5px 0 5px;padding-left:24px;display:block;text-decoration:none;float:right;white-space:nowrap}a.email-icon:link,a.email-icon:active,a.email-icon:visited{background:transparent url(../../blog/wp-content/themes/atahualpa353/images/email-gray.png) no-repeat scroll center left}a.email-icon:hover{background:transparent url(../../blog/wp-content/themes/atahualpa353/images/email.png) no-repeat scroll center left}td.search-box{height:1%}div.searchbox{height:35px;border-bottom:0;width:200px;margin:0;padding:0}div.searchbox-form{margin:5px 10px 5px 10px}div.horbar1,div.horbar2{font-size:1px;clear:both;display:block;position:relative;padding:0;margin:0;width:100%;}div.horbar1{height:0px;background:#ffffff;border-top:dashed 1px #cccccc}div.horbar2{height:0px;background:#ffffff;border-bottom:dashed 1px #cccccc}div.header-image-container{position:relative;margin:0;padding:0;height:150px;}div.clickable{position:absolute;top:0;left:0;z-index:3;margin:0;padding:0;width:100%;height:150px;}a.divclick:link,a.divclick:visited,a.divclick:active,a.divclick:hover{width:100%;height:100%;display:block;text-decoration:none}td#left{vertical-align:top;padding-right:20px}td#left-inner{vertical-align:top;padding-right:10px}td#right{vertical-align:top;padding-left:20px}td#right-inner{vertical-align:top;padding-left:10px}td#middle{vertical-align:top;width:100%;padding:10px 15px}td#footer{width:auto;background-color:#f7f7f7;border-top:solid 4px #eee;padding:10px;text-align:center;color:#888;font-size:11px}td#footer a:link,td#footer a:visited,td#footer a:active{text-decoration:none;color:#777777;font-weight:normal}td#footer a:hover{text-decoration:none;color:#777777;font-weight:normal}div.widget{display:block;width:auto;font-size:12px;margin:0 0 10px 0;padding:10px;border:solid 4px #eee}div.widget-title{display:block;width:auto}div.widget-title h3,td#left h3.tw-widgettitle,td#right h3.tw-widgettitle,td#left ul.tw-nav-list,td#right ul.tw-nav-list{padding:0;margin:0;font-size:0.9em;text-align:center;font-weight:normal;text-transform:uppercase;letter-spacing:1px;color:#333;border-bottom:solid 1px #eee;padding-bottom:10px;margin-bottom:10px}div.widget ul,div.textwidget{display:block;width:auto}div.widget select{width:98%;margin-top:5px;}div.widget ul{list-style-type:none;margin:0;padding:0;width:auto}div.widget ul li{display:block;margin:2px 0 2px 0px;padding:0 0 0 0px;border-left:solid 0px #CCCCCC}div.widget ul li:hover,div.widget ul li.sfhover{display:block;width:auto;border-left:solid 0px #000000;}div.widget ul li ul li{margin:2px 0 2px 5px;padding:0 0 0 0px;border-left:solid 0px #CCCCCC;}div.widget ul li ul li:hover,div.widget ul li ul li.sfhover{border-left:solid 0px #000000;}div.widget ul li ul li ul li{margin:2px 0 2px 5px;padding:0 0 0 0px;border-left:solid 0px #CCCCCC;}div.widget ul li ul li ul li:hover,div.widget ul li ul li ul li.sfhover{border-left:solid 0px #000000;}div.widget td a:link,div.widget td a:visited,div.widget td a:active,div.widget ul li a:link,div.widget ul li a:visited,div.widget ul li a:active{text-decoration:none;font-weight:normal;color:#365DA0;font-weight:normal;}div.widget ul li ul li a:link,div.widget ul li ul li a:visited,div.widget ul li ul li a:active{color:#365DA0;font-weight:normal;}div.widget ul li ul li ul li a:link,div.widget ul li ul li ul li a:visited,div.widget ul li ul li ul li a:active{color:#365DA0;font-weight:normal;}div.widget ul li a:hover{color:#365DA0;}div.widget ul li ul li a:hover{color:#365DA0;}div.widget ul li ul li ul li a:hover{color:#365DA0;}div.widget ul li a:link,div.widget ul li a:visited,div.widget ul li a:active,div.widget ul li a:hover{display:inline}* html div.widget ul li a:link,* html div.widget ul li a:visited,* html div.widget ul li a:active,* html div.widget ul li a:hover{height:1%; } div.widget_pages ul li,div.widget_categories ul li{border-left:0 !important;padding:0 !important}div.widget_pages ul li a:link,div.widget_pages ul li a:visited,div.widget_pages ul li a:active,div.widget_categories ul li a:link,div.widget_categories ul li a:visited,div.widget_categories ul li a:active{padding:0 0 0 0px;border-left:solid 0px #CCCCCC}div.widget_pages ul li a:hover,div.widget_categories ul li a:hover{border-left:solid 0px #000000;}div.widget_pages ul li ul li a:link,div.widget_pages ul li ul li a:visited,div.widget_pages ul li ul li a:active,div.widget_categories ul li ul li a:link,div.widget_categories ul li ul li a:visited,div.widget_categories ul li ul li a:active{padding:0 0 0 0px;border-left:solid 0px #CCCCCC}div.widget_pages ul li ul li a:hover,div.widget_categories ul li ul li a:hover{border-left:solid 0px #000000;}div.widget_pages ul li ul li ul li a:link,div.widget_pages ul li ul li ul li a:visited,div.widget_pages ul li ul li ul li a:active,div.widget_categories ul li ul li ul li a:link,div.widget_categories ul li ul li ul li a:visited,div.widget_categories ul li ul li ul li a:active{padding:0 0 0 0px;border-left:solid 0px #CCCCCC}div.widget_pages ul li ul li ul li a:hover,div.widget_categories ul li ul li ul li a:hover{border-left:solid 0px #000000;}div.widget_pages ul li a:link,div.widget_pages ul li a:active,div.widget_pages ul li a:visited,div.widget_pages ul li a:hover{display:block !important}div.widget_categories ul li a:link,div.widget_categories ul li a:active,div.widget_categories ul li a:visited,div.widget_categories ul li a:hover{display:inline !important}table.subscribe{width:100%}table.subscribe td.email-text{padding:0 0 5px 0;vertical-align:top}table.subscribe td.email-field{padding:0;width:100%}table.subscribe td.email-button{padding:0 0 0 5px}table.subscribe td.post-text{padding:7px 0 0 0;vertical-align:top}table.subscribe td.comment-text{padding:7px 0 0 0;vertical-align:top}div.post,div.page{display:block;margin:0 0 30px 0;border-top:solid 4px #eee;padding-top:20px}div.sticky{background:#eee url('../../blog/wp-content/themes/atahualpa353/images/sticky.gif') 99% 5% no-repeat;border:dashed 1px #cccccc;padding:10px}div.post-kicker{margin:0 0 5px 0}div.post-kicker a:link,div.post-kicker a:visited,div.post-kicker a:active{color:#999;text-decoration:none;text-transform:uppercase;letter-spacing:1px}div.post-kicker a:hover{color:#cc0000}div.post-headline{}div.post-headline h1,div.post-headline h2{ margin:0; padding:0;padding:0;margin:0;font-size:1.7em}div.post-headline h2 a:link,div.post-headline h2 a:visited,div.post-headline h2 a:active,div.post-headline h1 a:link,div.post-headline h1 a:visited,div.post-headline h1 a:active{}div.post-headline h2 a:hover,div.post-headline h1 a:hover{}div.post-byline{margin:5px 0 10px 0;color:#999;text-transform:uppercase;letter-spacing:1px;font-size:11px}div.post-byline a:link,div.post-byline a:visited,div.post-byline a:active{}div.post-byline a:hover{}div.post-bodycopy{}div.post-bodycopy p{margin:1em 0;padding:0;display:block}div.post-pagination{}div.post-footer{clear:both;display:block;color:#999;text-transform:uppercase;letter-spacing:1px;font-size:11px}div.post-footer a:link,div.post-footer a:visited,div.post-footer a:active{color:#999;font-weight:normal;text-decoration:none}div.post-footer a:hover{color:#333;font-weight:normal;text-decoration:underline}div.post-kicker img,div.post-byline img,div.post-footer img{border:0;padding:0;margin:0 0 -1px 0;background:none}span.post-ratings{display:inline-block;width:auto;white-space:nowrap}div.navigation-top{border-top:solid 4px #eee;padding:8px 0}div.navigation-middle{margin:10px 0 20px 0;padding:8px 0;border-top:solid 4px #eee;border-bottom:solid 4px #eee}div.navigation-bottom{margin:20px 0 0 0;padding:10px 0 0 0;border-top:solid 4px #eee}div.navigation-comments-above{margin:0 0 10px 0;padding:5px 0 5px 0}div.navigation-comments-below{margin:0 0 10px 0;padding:5px 0 5px 0}div.older{float:left;width:48%;text-align:left;margin:0;padding:0}div.newer{float:right;width:48%;text-align:right;margin:0;padding:0;}div.older-home{float:left;width:44%;text-align:left;margin:0;padding:0}div.newer-home{float:right;width:44%;text-align:right;margin:0;padding:0;}div.home{float:left;width:8%;text-align:center;margin:0;padding:0}form,.feedburner-email-form{margin:0;padding:0;}fieldset{border:1px solid #cccccc;width:auto;padding:0.35em 0.625em 0.75em;display:block;}legend{color:#000000;background:#f4f4f4;border:1px solid #cccccc;padding:2px 6px;margin-bottom:15px;}form p{margin:5px 0 0 0;padding:0;}div.xhtml-tags p{margin:0}label{margin-right:0.5em;font-family:arial;cursor:pointer;}input.text,input.textbox,input.password,input.file,input.TextField,textarea{padding:3px;color:#000000;border-top:solid 1px #333333;border-left:solid 1px #333333;border-right:solid 1px #999999;border-bottom:solid 1px #cccccc;background:url(../../blog/wp-content/themes/atahualpa353/images/inputbackgr.gif) top left no-repeat}textarea{width:96%;}input.inputblur{color:#777777;width:95%}input.inputfocus{color:#000000;width:95%}input.highlight,textarea.highlight{background:#e8eff7;border-color:#37699f}.button,.Button{padding:0 2px;height:24px;line-height:16px;background-color:#777777;color:#ffffff;border:solid 2px #555555;font-weight:bold}.buttonhover{padding:0 2px;cursor:pointer;background-color:#6b9c6b;color:#ffffff;border:solid 2px #496d49}form#commentform input#submit{ padding:0 .25em; width:0; overflow:visible}form#commentform input#submit[class]{width:auto}form#commentform input#submit{padding:4px 10px 4px 10px;font-size:1.2em;line-height:1.5em;height:36px}table.searchform{width:100%}table.searchform td.searchfield{padding:0;width:100%}table.searchform td.searchbutton{padding:0 0 0 5px}table.searchform td.searchbutton input{padding:0 0 0 5px}blockquote{height:1%;display:block;clear:both;color:#555555;padding:1em 1em;background:#f4f4f4;border:solid 1px #e1e1e1}blockquote blockquote{height:1%;display:block;clear:both;color:#444444;padding:1em 1em;background:#e1e1e1;border:solid 1px #d3d3d3}div.post table{border-collapse:collapse;margin:10px 0}div.post table caption{width:auto;margin:0 auto;background:#eeeeee;border:#999999;padding:4px 8px;color:#666666}div.post table th{background:#888888;color:#ffffff;font-weight:bold;font-size:90%;padding:4px 8px;border:solid 1px #ffffff;text-align:left}div.post table td{padding:4px 8px;background-color:#ffffff;border-bottom:1px solid #dddddd;text-align:left}div.post table tfoot td{}div.post table tr.alt td{background:#f4f4f4}div.post table tr.over td{background:#e2e2e2}#calendar_wrap{padding:0;border:none}table#wp-calendar{width:100%;font-size:90%;border-collapse:collapse;background-color:#ffffff;margin:0 auto}table#wp-calendar caption{width:auto;background:#eeeeee;border:none;;padding:3px;margin:0 auto;font-size:1em}table#wp-calendar th{border:solid 1px #eeeeee;background-color:#999999;color:#ffffff;font-weight:bold;padding:2px;text-align:center}table#wp-calendar td{padding:0;line-height:18px;background-color:#ffffff;border:1px solid #dddddd;text-align:center}table#wp-calendar tfoot td{border:solid 1px #eeeeee;background-color:#eeeeee}table#wp-calendar td a{display:block;background-color:#eeeeee;width:100%;height:100%;padding:0}div#respond{margin:25px 0;padding:25px;background:#eee;-moz-border-radius:8px;-khtml-border-radius:8px;-webkit-border-radius:8px;border-radius:8px;}p.thesetags{margin:10px 0}h3.reply{margin:0;padding:0 0 10px 0}ol.commentlist{margin:15px 0 25px 0;list-style-type:none;padding:0;display:block;border-top:dotted 1px #cccccc}ol.commentlist li{padding:15px 10px;display:block;height:1%;margin:0;background-color:#FFFFFF;border-bottom:dotted 1px #cccccc}ol.commentlist li.alt{display:block;height:1%;background-color:#EEEEEE;border-bottom:dotted 1px #cccccc}ol.commentlist li.authorcomment{display:block;height:1%;background-color:#D8D8FA}ol.commentlist span.authorname{font-weight:bold;font-size:110%}ol.commentlist span.commentdate{color:#666666;font-size:90%;margin-bottom:5px;display:block}ol.commentlist span.editcomment{display:block}ol.commentlist li p{margin:2px 0 5px 0}div.comment-number{float:right;font-size:2em;line-height:2em;font-family:georgia,serif;font-weight:bold;color:#ddd;margin:-10px 0 0 0;position:relative;height:1%}div.comment-number a:link,div.comment-number a:visited,div.comment-number a:active{color:#ccc}textarea#comment{width:98%;margin:10px 0;display:block}ul.commentlist{margin:15px 0 15px 0;list-style-type:none;padding:0;display:block;border-top:dotted 1px #cccccc}ul.commentlist ul{margin:0;border:none;list-style-type:none;padding:0}ul.commentlist li{padding:0; margin:0;display:block;clear:both;height:1%;}ul.commentlist ul.children li{ margin-left:30px}ul.commentlist div.comment-container{padding:10px;margin:0}ul.children div.comment-container{background-color:transparent;border:dotted 1px #ccc;padding:10px;margin:0 10px 8px 0; -moz-border-radius:5px; -khtml-border-radius:5px; -webkit-border-radius:5px; border-radius:5px}ul.children div.bypostauthor{}ul.commentlist li.thread-even{background-color:#FFFFFF;border-bottom:dotted 1px #cccccc}ul.commentlist li.thread-odd{background-color:#EEEEEE;border-bottom:dotted 1px #cccccc}ul.commentlist div.bypostauthor{background-color:#D8D8FA}ul.children div.bypostauthor{border:dotted 1px #BFBCFB}ul.commentlist span.authorname{font-size:110%}div.comment-meta a:link,div.comment-meta a:visited,div.comment-meta a:active,div.comment-meta a:hover{font-weight:normal}div#cancel-comment-reply{margin:-5px 0 10px 0}div.comment-number{float:right;font-size:2em;line-height:2em;font-family:georgia,serif;font-weight:bold;color:#ddd;margin:-10px 0 0 0;position:relative;height:1%}div.comment-number a:link,div.comment-number a:visited,div.comment-number a:active{color:#ccc}.page-numbers{padding:2px 6px;border:solid 1px #000000;-moz-border-radius:6px;-khtml-border-radius:6px;-webkit-border-radius:6px;border-radius:6px}span.current{background:#ddd}a.prev,a.next{border:none}a.page-numbers:link,a.page-numbers:visited,a.page-numbers:active{text-decoration:none;color:#365DA0;border-color:#365DA0}a.page-numbers:hover{text-decoration:none;color:#365DA0;border-color:#365DA0}div.xhtml-tags{display:none}abbr em{border:none !important;border-top:dashed 1px #aaa !important;display:-moz-inline-box !important;display:inline-block !important;background:url(../../blog/wp-content/themes/atahualpa353/images/commentluv.gif) 0% 90% no-repeat;margin-top:8px;padding:5px 5px 2px 20px !important;font-style:normal}p.subscribe-to-comments{margin-bottom:10px}div#gsHeader{display:none;}div.g2_column{margin:0 !important;width:100% !important;font-size:1.2em}div#gsNavBar{border-top-width:0 !important}p.giDescription{font-size:1.2em;line-height:1 !important}p.giTitle{margin:0.3em 0 !important;font-size:1em;font-weight:normal;color:#666}div#wp-email img{border:0;padding:0}div#wp-email input,div#wp-email textarea{margin-top:5px;margin-bottom:2px}div#wp-email p{margin-bottom:10px}input#wp-email-submit{ padding:0; font-size:30px; height:50px; line-height:50px; overflow:visible;}img.WP-EmailIcon{ vertical-align:text-bottom !important}.tw-accordion .tw-widgettitle,.tw-accordion .tw-widgettitle:hover,.tw-accordion .tw-hovered,.tw-accordion .selected,.tw-accordion .selected:hover{ background:transparent !important; background-image:none !important}.tw-accordion .tw-widgettitle span{ padding-left:0 !important}.tw-accordion h3.tw-widgettitle{border-bottom:solid 1px #ccc}.tw-accordion h3.selected{border-bottom:none}td#left .without_title,td#right .without_title{ margin-top:0;margin-bottom:0}ul.tw-nav-list{border-bottom:solid 1px #999;display:block;margin-bottom:5px !important}td#left ul.tw-nav-list li,td#right ul.tw-nav-list li{padding:0 0 1px 0;margin:0 0 -1px 5px; border:solid 1px #ccc;border-bottom:none;-moz-border-radius:5px;-khtml-border-radius:5px;-webkit-border-radius:5px;border-radius:5px;-moz-border-radius-bottomright:0;-moz-border-radius-bottomleft:0;-webkit-border-bottom-right-radius:0;-webkit-border-bottom-left-radius:0;border-bottom-right-radius:0;border-bottom-left-radius:0;background:#eee}td#left ul.tw-nav-list li.ui-tabs-selected,td#right ul.tw-nav-list li.ui-tabs-selected{ background:none;border:solid 1px #999;border-bottom:solid 1px #fff !important}ul.tw-nav-list li a:link,ul.tw-nav-list li a:visited,ul.tw-nav-list li a:active,ul.tw-nav-list li a:hover{padding:0 8px !important;background:none;border-left:none !important;outline:none}td#left ul.tw-nav-list li.ui-tabs-selected a,td#left li.ui-tabs-selected a:hover,td#right ul.tw-nav-list li.ui-tabs-selected a,td#right li.ui-tabs-selected a:hover{ color:#000000; text-decoration:none;font-weight:bold;background:none !important;outline:none}td#left .ui-tabs-panel,td#right .ui-tabs-panel{ margin:0; padding:0}img{border:0}#dbem-location-map img{ background:none !important}.post img{padding:5px;border:solid 1px #dddddd;background-color:#f3f3f3;-moz-border-radius:3px;-khtml-border-radius:3px;-webkit-border-radius:3px;border-radius:3px;}.post img.size-full{max-width:96%;width:auto 100%;margin:5px 0 5px 0}div.post img[class~=size-full]{height:auto;}.post img.alignleft{float:left;margin:10px 10px 5px 0;}.post img.alignright{float:right;margin:10px 0 5px 10px;}.post img.aligncenter{display:block;margin:10px auto}.aligncenter,div.aligncenter{ display:block; margin-left:auto; margin-right:auto}.alignleft,div.alignleft{float:left;margin:10px 10px 5px 0}.alignright,div.alignright{ float:right; margin:10px 0 5px 10px}div.archives-page img{border:0;padding:0;background:none;margin-bottom:0;vertical-align:-10%}.wp-caption{max-width:96%;width:auto 100%;height:auto;display:block;border:1px solid #dddddd;text-align:center;background-color:#f3f3f3;padding-top:4px;margin:10px 0 0 0;-moz-border-radius:3px;-khtml-border-radius:3px;-webkit-border-radius:3px;border-radius:3px;}* html .wp-caption{height:100%;}.wp-caption img{ margin:0 !important; padding:0 !important; border:0 none !important}.wp-caption p.wp-caption-text{font-size:0.8em;line-height:13px;padding:2px 4px 5px;margin:0;color:#666666}img.wp-post-image{float:left;border:0;padding:0;background:none;margin:0 10px 5px 0}img.wp-smiley{ float:none;border:none !important;margin:0 1px -1px 1px;padding:0 !important;background:none !important}img.avatar{float:left;display:block;margin:0 8px 1px 0;padding:3px;border:solid 1px #ddd;background-color:#f3f3f3;-moz-border-radius:3px;-khtml-border-radius:3px;-webkit-border-radius:3px;border-radius:3px;}#comment_quicktags{text-align:left;padding:10px 0 2px 0;display:block}#comment_quicktags input.ed_button{background:#f4f4f4;border:2px solid #cccccc;color:#444444;margin:2px 4px 2px 0;width:auto;padding:0 4px;height:24px;line-height:16px}#comment_quicktags input.ed_button_hover{background:#dddddd;border:2px solid #666666;color:#000000;margin:2px 4px 2px 0;width:auto;padding:0 4px;height:24px;line-height:16px;cursor:pointer}#comment_quicktags #ed_strong{font-weight:bold}#comment_quicktags #ed_em{font-style:italic}@media print{body{background:white;color:black;margin:0;font-size:10pt !important;font-family:arial,sans-serif;}div.post-footer{line-height:normal !important;color:#555 !important;font-size:9pt !important}a:link,a:visited,a:active,a:hover{text-decoration:underline !important;color:#000}h2{color:#000;font-size:14pt !important;font-weight:normal !important}h3{color:#000;font-size:12pt !important;}#header,#footer,.colone,.colthree,.navigation,.navigation-top,.navigation-middle,.navigation-bottom,.wp-pagenavi-navigation,#comment,#respond,.remove-for-print{display:none}td#left,td#right,td#left-inner,td#right-inner{width:0}td#middle{width:100%}*:lang(en) td#left{ display:none}*:lang(en) td#right{ display:none}*:lang(en) td#left-inner{ display:none}*:lang(en) td#right-inner{ display:none}td#left:empty{ display:none}td#right:empty{ display:none}td#left-inner:empty{ display:none}td#right-inner:empty{ display:none}}ul.rMenu,ul.rMenu ul,ul.rMenu li,ul.rMenu a{display:block;margin:0;padding:0}ul.rMenu,ul.rMenu li,ul.rMenu ul{list-style:none}ul.rMenu ul{display:none}ul.rMenu li{position:relative;z-index:1}ul.rMenu li:hover{z-index:999}ul.rMenu li:hover > ul{display:block;position:absolute}ul.rMenu li:hover{background-position:0 0} ul.rMenu-hor li{float:left;width:auto}ul.rMenu-hRight li{float:right}ul.rMenu-ver li{float:none}.clearfix:after{ content:".";display:block;height:0;clear:both;visibility:hidden}.clearfix{min-width:0;display:inline-block;display:block}* html .clearfix{height:1%;}.clearboth{clear:both;height:1%;font-size:1%;line-height:1%;display:block;padding:0;margin:0}td#header{padding-bottom:15px;}td#middle{padding:0}div.searchbox-form{margin:5px 0 15px 5px}div#menu1 ul.rMenu{background:transparent;border:none}div#imagecontainer{border-top:solid 0px #333;border-bottom:solid 5px #333;}div.widget ul li{padding:1px 5px 1px 12px !important;background:url('../../blog/wp-content/themes/atahualpa353/images/bullets/round-gray.gif') no-repeat 0 7px}ul.rMenu-hor ul,ul.rMenu-hRight ul{margin-top:0px;}ul.rMenu-hor li{margin-bottom:0px;margin-top:0px;margin-left:0px;}ul.rMenu-hor{padding-left:0px;}ul.rMenu-ver li{margin-top:0xp;}div#menu1 ul.rMenu li a,div#menu2 ul.rMenu li a{padding:6px 10px}div#menu1 ul.rMenu li{margin-right:5px}div#menu1 ul.rMenu li li{margin-right:0}div#menu1 ul.rMenu li,div#menu1 ul.rMenu li a{-webkit-border-top-left-radius:5px;-webkit-border-top-right-radius:5px;-moz-border-radius-topleft:5px;-moz-border-radius-topright:5px;border-top-left-radius:5px;border-top-right-radius:5px}div#menu1 ul.rMenu li li,div#menu1 ul.rMenu li li a{-webkit-border-top-left-radius:0;-webkit-border-top-right-radius:0;-moz-border-radius-topleft:0;-moz-border-radius-topright:0;border-top-left-radius:0;border-top-right-radius:0}div#menu2{ border:dashed 1px #ffffff}</style>
<script type="text/javascript">
//<![CDATA[




/* JQUERY */
jQuery(document).ready(function(){  


	/* jQuery('ul#rmenu').superfish(); */
	/* jQuery('ul#rmenu').superfish().find('ul').bgIframe({opacity:false}); */
 
	/* For IE6 */
	if (jQuery.browser.msie && /MSIE 6\.0/i.test(window.navigator.userAgent) && !/MSIE 7\.0/i.test(window.navigator.userAgent) && !/MSIE 8\.0/i.test(window.navigator.userAgent)) {

		/* Max-width for images in IE6 */		
		var centerwidth = jQuery("td#middle").width(); 
		
		/* Images without caption */
		jQuery(".post img").each(function() { 
			var maxwidth = centerwidth - 10 + 'px';
			var imgwidth = jQuery(this).width(); 
			var imgheight = jQuery(this).height(); 
			var newimgheight = (centerwidth / imgwidth * imgheight) + 'px';	
			if (imgwidth > centerwidth) { 
				jQuery(this).css({width: maxwidth}); 
				jQuery(this).css({height: newimgheight}); 
			}
		});
		
		/* Images with caption */
		jQuery("div.wp-caption").each(function() { 
			var captionwidth = jQuery(this).width(); 
			var maxcaptionwidth = centerwidth + 'px';
			var captionheight = jQuery(this).height();
			var captionimgwidth =  jQuery("div.wp-caption img").width();
			var captionimgheight =  jQuery("div.wp-caption img").height();
			if (captionwidth > centerwidth) { 
				jQuery(this).css({width: maxcaptionwidth}); 
				var newcaptionheight = (centerwidth / captionwidth * captionheight) + 'px';
				var newcaptionimgheight = (centerwidth / captionimgwidth * captionimgheight) + 'px';
				jQuery(this).css({height: newcaptionheight}); 
				jQuery("div.wp-caption img").css({height: newcaptionimgheight}); 
				}
		});
		
		/* sfhover for LI:HOVER support in IE6: */
		jQuery("ul li").
			hover( function() {
					jQuery(this).addClass("sfhover")
				}, 
				function() {
					jQuery(this).removeClass("sfhover")
				} 
			); 

	/* End IE6 */
	}
	
	jQuery(".post table tr").
		mouseover(function() {
			jQuery(this).addClass("over");
		}).
		mouseout(function() {
			jQuery(this).removeClass("over");
		});

	
	jQuery(".post table tr:even").
		addClass("alt");

	
	jQuery("input.text, input.TextField, input.file, input.password, textarea").
		focus(function () {  
			jQuery(this).addClass("highlight"); 
		}).
		blur(function () { 
			jQuery(this).removeClass("highlight"); 
		})
	
	jQuery("input.inputblur").
		focus(function () {  
			jQuery(this).addClass("inputfocus"); 
		}).
		blur(function () { 
			jQuery(this).removeClass("inputfocus"); 
		})

		

	
	jQuery("input.button, input.Button").
		mouseover(function() {
			jQuery(this).addClass("buttonhover");
		}).
		mouseout(function() {
			jQuery(this).removeClass("buttonhover");
		});

	/* toggle "you can use these xhtml tags" */
	jQuery("a.xhtmltags").
		click(function(){ 
			jQuery("div.xhtml-tags").slideToggle(300); 
		});

	/* For the Tabbed Widgets plugin: */
	jQuery("ul.tw-nav-list").
		addClass("clearfix");

		
	
});

//]]>
</script>
<meta id="syntaxhighlighteranchor" name="syntaxhighlighter-version" content="3.1.3" />
<!-- Google Analytics Tracking by Google Analyticator 6.2: http://ronaldheft.com/code/analyticator/ -->
<script type="text/javascript">
	var analyticsFileTypes = [''];
	var analyticsEventTracking = 'enabled';
</script>
<script type="text/javascript">
	var _gaq = _gaq || [];
	_gaq.push(['_setAccount', 'UA-2173612-1']);
	_gaq.push(['_trackPageview']);
	_gaq.push(['_trackPageLoadTime']);

	(function() {
		var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true;
		ga.src = ('https:' == document.location.protocol ? '../../../https@ssl_2f\default.htm' : '../../../www/default.htm') + '.google-analytics.com/ga.js';
		var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s);
	})();
</script>
<!--[if IE 6]>
<script type="text/javascript" src="../../blog/wp-content/themes/atahualpa353/js/dd_roundies.js"></script>
<script type="text/javascript">DD_roundies.addRule('a.posts-icon,%20a.comments-icon,%20a.email-icon,%20img.logo');</script>
<![endif]-->
</head>
<body class="single single-post postid-180 single-format-standard">
<div id="wrapper">
<div id="container">
<table id="layout" border="0" cellspacing="0" cellpadding="0">
<colgroup>
<col class="colone" /><col class="coltwo" />
<col class="colthree" /></colgroup> 
	<tr>

		<!-- Header -->
		<td id="header" colspan="3">

		<div id="imagecontainer" class="header-image-container" style="background: url('../../blog/wp-content/themes/atahualpa353/images/header/learncppheader3_800.jpg') top center no-repeat;"><div class="clickable"><a class="divclick" title="Learn C++" href ="../../default.htm">&nbsp;</a></div></div>
		</td>
		<!-- / Header -->

	</tr>

	<!-- Main Body -->	
	<tr id="bodyrow">

				<!-- Left Sidebar -->
		<td id="left">

			<div id="text-5" class="widget widget_text"><div class="widget-title"><h3>Navigation</h3></div>			<div class="textwidget"><ul>
<li><a href="../../default.htm"><big><big>Main Page</big></big></a>
<li><a href="
../../featured-articles/default.htm"><big><big>Featured Articles</big></big></a>
</ul>
<hr>
<ul>
<li><a href="../../about/default.htm">About / Contact</a>
<li><a href="../../about/#Support">Support LearnCpp</a>
</ul>
<hr>

<!-- SiteSearch Google -->
<form method="get" action="http://www.google.com/custom" target="google_window">
<table border="0" bgcolor="#ffffff">
<tr><td nowrap="nowrap" valign="top" align="left">

<!--<br/>-->
<input type="hidden" name="domains" value="LearnCpp.com"></input>
<label for="sbi" style="display: none">Enter your search terms</label>
<input type="text" name="q" size="20" maxlength="255" value="" id="sbi"></input>
</td></tr>
<tr>
<td nowrap="nowrap">
<table>
<tr>
<td>
<input type="radio" name="sitesearch" value="" checked id="ss0"></input>
<label for="ss0" title="Search the Web"><font size="-1" color="#000000">Web</font></label></td>
<td>
<input type="radio" name="sitesearch" value="www.LearnCpp.com" id="ss1"></input>
<label for="ss1" title="Search LearnCpp.com"><font size="-1" color="#000000">LearnCpp</font></label></td>
</tr>
</table>
<label for="sbb" style="display: none">Submit search form</label>
<input type="submit" name="sa" value="Google Search" id="sbb"></input>
<input type="hidden" name="client" value="pub-0588844875925051"></input>
<input type="hidden" name="forid" value="1"></input>
<input type="hidden" name="channel" value="7774154974"></input>
<input type="hidden" name="ie" value="ISO-8859-1"></input>
<input type="hidden" name="oe" value="ISO-8859-1"></input>
<input type="hidden" name="safe" value="active"></input>
<input type="hidden" name="flav" value="0000"></input>
<input type="hidden" name="sig" value="q6fLrjobHHgL00cW"></input>
<input type="hidden" name="cof" value="GALT:#008000;GL:1;DIV:#336699;VLC:663399;AH:center;BGC:FFFFFF;LBGC:336699;ALC:0000FF;LC:0000FF;T:000000;GFNT:0000FF;GIMP:0000FF;FORID:1"></input>
<input type="hidden" name="hl" value="en"></input>
</td></tr></table>
</form>
<!-- SiteSearch Google --></div>
		</div><div id="meta-2" class="widget widget_meta"><div class="widget-title"><h3>Meta</h3></div>			<ul>
			<li><a href="../../blog/wp-login.php@action=register.htm">Register</a></li>			<li><a href="../../blog/wp-login.php.htm">Log in</a></li>
			<li><a href="../../feed/default.htm" title="Syndicate this site using RSS 2.0">Entries <abbr title="Really Simple Syndication">RSS</abbr></a></li>
			<li><a href="../../comments/feed/default.htm" title="The latest comments to all posts in RSS">Comments <abbr title="Really Simple Syndication">RSS</abbr></a></li>
			<li><a href="../../../wordpress.org/default.htm" title="Powered by WordPress, state-of-the-art semantic personal publishing platform.">WordPress.org</a></li>
						</ul>
</div>		<div id="recent-posts-2" class="widget widget_recent_entries">		<div class="widget-title"><h3>Recent Posts</h3></div>		<ul>
				<li><a href="../b-6-new-virtual-function-controls-override-final-default-and-delete/default.htm" title="B.6 &#8212; New virtual function controls: override, final, default, and delete">B.6 &#8212; New virtual function controls: override, final, default, and delete</a></li>
				<li><a href="../b-5-delegating-constructors/default.htm" title="B.5 &#8212; Delegating constructors">B.5 &#8212; Delegating constructors</a></li>
				<li><a href="../b-4-initializer-lists-and-uniform-initialization/default.htm" title="B.4 &#8212; Initializer lists and uniform initialization">B.4 &#8212; Initializer lists and uniform initialization</a></li>
				<li><a href="../b-3-range-based-for-statements-and-static_assert/default.htm" title="B.3 &#8212; Range-based for statements and static_assert">B.3 &#8212; Range-based for statements and static_assert</a></li>
				<li><a href="../b-2-long-long-auto-decltype-nullptr-and-enum-classes/default.htm" title="B.2 &#8212; Long long, auto, decltype, nullptr, and enum classes">B.2 &#8212; Long long, auto, decltype, nullptr, and enum classes</a></li>
				<li><a href="../b-1-introduction-to-c11/default.htm" title="B.1 &#8212; Introduction to C++11">B.1 &#8212; Introduction to C++11</a></li>
				<li><a href="../a-6-fixed-width-integers/default.htm" title="A.6 &#8212; Fixed-width integers">A.6 &#8212; Fixed-width integers</a></li>
				<li><a href="../../site-news/site-software-updated-1123/default.htm" title="Site software updated 11/23">Site software updated 11/23</a></li>
				<li><a href="../../site-news/this-is-why-we-cant-have-nice-things-part-2/default.htm" title="This is why we can&#8217;t have nice things, part 2">This is why we can&#8217;t have nice things, part 2</a></li>
				<li><a href="../../site-news/this-is-why-we-cant-have-nice-things/default.htm" title="This is why we can&#8217;t have nice things">This is why we can&#8217;t have nice things</a></li>
				</ul>
		</div><div id="categories-1" class="widget widget_categories"><div class="widget-title"><h3>Category Indexes</h3></div>		<ul>
	<li class="cat-item cat-item-11"><a href="../../category/breaktime/default.htm" title="Games and fun activities">Break Time</a> (3)
</li>
	<li class="cat-item cat-item-6"><a href="../../category/cpp-programming/default.htm" title="View all posts filed under C++ Programming">C++ Programming</a> (11)
</li>
	<li class="cat-item cat-item-3"><a href="../../category/cpp-tutorial/default.htm" title="View all posts filed under C++ Tutorial">C++ Tutorial</a> (163)
</li>
	<li class="cat-item cat-item-10"><a href="../../category/computer-game-programming/default.htm" title="View all posts filed under Game Programming">Game Programming</a> (4)
</li>
	<li class="cat-item cat-item-14"><a href="../../category/gaming/default.htm" title="View all posts filed under Gaming">Gaming</a> (1)
</li>
	<li class="cat-item cat-item-13"><a href="../../category/general-programming/default.htm" title="View all posts filed under General Programming">General Programming</a> (3)
</li>
	<li class="cat-item cat-item-4"><a href="../../category/site-news/default.htm" title="View all posts filed under Site News">Site News</a> (23)
</li>
	<li class="cat-item cat-item-5"><a href="../../category/wordpress/default.htm" title="View all posts filed under WordPress">WordPress</a> (8)
</li>
		</ul>
</div>
		</td>
		<!-- / Left Sidebar -->
		
				

		<!-- Main Column -->
		<td id="middle">

	

		
		 

		<div class="clearfix navigation-top">
		<div class="older">&laquo; <a href="../121-pointers-and-references-to-the-base-class-of-derived-objects/default.htm" rel="prev">12.1 &#8212; Pointers and references to the base class of derived objects</a> &nbsp;</div><div class="newer">&nbsp; <a href="../123-virtual-destructors-virtual-assignment-and-overriding-virtualization/default.htm" rel="next">12.3 &#8212; Virtual destructors, virtual assignment, and overriding virtualization</a> &raquo;</div></div>
<div class="post-180 post type-post status-publish format-standard hentry category-cpp-tutorial" id="post-180">


<div class="post-headline">		<h1>12.2 &#8212; Virtual functions</h1>
		</div>
<div class="post-byline">By Alex, on January 30th, 2008</div>
<div class="post-bodycopy clearfix"><div style='float:left;padding:8px 8px 8px 0px;'><script type="text/javascript"><!--
google_ad_client = "ca-pub-0588844875925051";
/* Content Page Top Large */
google_ad_slot = "7945645163";
google_ad_width = 336;
google_ad_height = 280;
//-->
</script>
<acript type="text/javascript"
src="../../../pagead2.googlesyndication.com/pagead/show_ads.js">
</script></div><p>In the previous lesson on <a href="../121-pointers-and-references-to-the-base-class-of-derived-objects/default.htm">pointers and references to the base class of derived objects</a>, we took a look at a number of examples where using pointers or references to a base class had the potential to simplify code.  However, in every case, we ran up against the problem that the base pointer or reference was only able to call the base version of a function, not a derived version.</p>
<p>Here&#8217;s a simple example of this behavior:</p>
<pre class="brush: cpp; title: ; notranslate" title="">
class Base
{
protected:

public:
    const char* GetName() { return &quot;Base&quot;; }
};

class Derived: public Base
{
public:
    const char* GetName() { return &quot;Derived&quot;; }
};

int main()
{
    Derived cDerived;
    Base &amp;rBase = cDerived;
    cout &lt;&lt; &quot;rBase is a &quot; &lt;&lt; rBase.GetName() &lt;&lt; endl;
}
</pre>
<p>This example prints the result:</p>
<pre>
rBase is a Base
</pre>
<p>Because rBase is a Base pointer, it calls Base::GetName(), even though it&#8217;s actually pointing to the Base portion of a Derived object.</p>
<p>In this lesson, we will address this issue using virtual functions.</p>
<p><strong>Virtual functions</strong></p>
<p>A <strong>virtual function</strong> is a special type of function that resolves to the most-derived version of the function with the same signature.  To make a function virtual, simply place the &#8220;virtual&#8221; keyword before the function declaration.</p>
<p>Note that virtual functions and <a href="../118-virtual-base-classes/default.htm">virtual base classes</a> are two entirely different concepts, even though they share the same keyword.</p>
<p>Here&#8217;s the above example with a virtual function:</p>
<pre class="brush: cpp; title: ; notranslate" title="">
class Base
{
protected:

public:
    virtual const char* GetName() { return &quot;Base&quot;; }
};

class Derived: public Base
{
public:
    virtual const char* GetName() { return &quot;Derived&quot;; }
};

int main()
{
    Derived cDerived;
    Base &amp;rBase = &amp;cDerived;
    cout &lt;&lt; &quot;rBase is a &quot; &lt;&lt; rBase.GetName() &lt;&lt; endl;

    return 0;
}
</pre>
<p>This example prints the result:</p>
<pre>
rBase is a Derived
</pre>
<p>Because rBase is a pointer to the Base portion of a Derived object, when <strong>rBase.GetName()</strong> is evaluated, it would normally resolve to Base::GetName().  However, Base::GetName() is virtual, which tells the program to go look and see if there are any more-derived versions of the function available.  Because the Base object that rBase is pointing to is actually part of a Derived object, the program will check every inherited class between Base and Derived and use the most-derived version of the function that it finds.  In this case, that is Derived::GetName()!</p>
<p>Let&#8217;s take a look at a slightly more complex example:</p>
<pre class="brush: cpp; title: ; notranslate" title="">
class A
{
public:
    virtual const char* GetName() { return &quot;A&quot;; }
};

class B: public A
{
public:
    virtual const char* GetName() { return &quot;B&quot;; }
};

class C: public B
{
public:
    virtual const char* GetName() { return &quot;C&quot;; }
};

class D: public C
{
public:
    virtual const char* GetName() { return &quot;D&quot;; }
};

int main()
{
    C cClass;
    A &amp;rBase = cClass;
    cout &lt;&lt; &quot;rBase is a &quot; &lt;&lt; rBase.GetName() &lt;&lt; endl;

    return 0;
}
</pre>
<p>What do you think this program will output?</p>
<p>Let&#8217;s look at how this works.  First, we instantiate a C class object.  rBase is an A pointer, which we set to point to the A portion of the C object.  Finally, we call rBase.GetName().  rBase.GetName() evaluates to A::GetName().  However, A::GetName() is virtual, so the compiler will check all the classes between A and C to see if it can find a more-derived match.  First, it checks B::GetName(), and finds a match.  Then it checks C::GetName() and finds a better match.  It does not check D::GetName() because our original object was a C, not a D.  Consequently, rBase.GetName() resolves to C::GetName().</p>
<p>As a result, our program outputs:</p>
<pre>
rBase is a C
</pre>
<p><strong>A more complex example</strong></p>
<p>Let&#8217;s take another look at the Animal example we were working with in the previous lesson.  Here&#8217;s the original class:</p>
<pre class="brush: cpp; title: ; notranslate" title="">
#include &lt;string&gt;
class Animal
{
protected:
    std::string m_strName;

    // We're making this constructor protected because
    // we don't want people creating Animal objects directly,
    // but we still want derived classes to be able to use it.
    Animal(std::string strName)
        : m_strName(strName)
    {
    }

public:
    std::string GetName() { return m_strName; }
    const char* Speak() { return &quot;???&quot;; }
};

class Cat: public Animal
{
public:
    Cat(std::string strName)
        : Animal(strName)
    {
    }

    const char* Speak() { return &quot;Meow&quot;; }
};

class Dog: public Animal
{
public:
    Dog(std::string strName)
        : Animal(strName)
    {
    }

    const char* Speak() { return &quot;Woof&quot;; }
};
</pre>
<p>And here&#8217;s the class with virtual functions:</p>
<pre class="brush: cpp; title: ; notranslate" title="">
#include &lt;string&gt;
class Animal
{
protected:
    std::string m_strName;

    // We're making this constructor protected because
    // we don't want people creating Animal objects directly,
    // but we still want derived classes to be able to use it.
    Animal(std::string strName)
        : m_strName(strName)
    {
    }

public:
    std::string GetName() { return m_strName; }
    virtual const char* Speak() { return &quot;???&quot;; }
};

class Cat: public Animal
{
public:
    Cat(std::string strName)
        : Animal(strName)
    {
    }

    virtual const char* Speak() { return &quot;Meow&quot;; }
};

class Dog: public Animal
{
public:
    Dog(std::string strName)
        : Animal(strName)
    {
    }

    virtual const char* Speak() { return &quot;Woof&quot;; }
};
</pre>
<p>Note that we didn&#8217;t make Animal::GetName() virtual.  This is because GetName() is never overridden in any of the derived classes, therefore there is no need.</p>
<p>Now, using the virtual Speak() function, the following function should work correctly:</p>
<pre class="brush: cpp; title: ; notranslate" title="">
void Report(Animal &amp;rAnimal)
{
    cout &lt;&lt; rAnimal.GetName() &lt;&lt; &quot; says &quot; &lt;&lt; rAnimal.Speak() &lt;&lt; endl;
}

int main()
{
    Cat cCat(&quot;Fred&quot;);
    Dog cDog(&quot;Garbo&quot;);

    Report(cCat);
    Report(cDog);
}
</pre>
<p>Indeed, this program produces the result:</p>
<pre>
Fred says Meow
Garbo says Woof
</pre>
<p>When cAnimal.Speak() is evaluated, the program notes that it is a virtual function.  In the case where rAnimal is pointing to the Animal portion of a Cat object, the program looks at all the classes between Animal and Cat to see if it can find a more derived function.  In that case, it finds Cat::Speak().  In the case where rAnimal points to the Animal portion of a Dog object, the program resolves the function call to Dog::Speak().</p>
<p>Similarly, the following array example now works as expected:</p>
<pre class="brush: cpp; title: ; notranslate" title="">
Cat cFred(&quot;Fred&quot;), cTyson(&quot;Tyson&quot;), cZeke(&quot;Zeke&quot;);
Dog cGarbo(&quot;Garbo&quot;), cPooky(&quot;Pooky&quot;), cTruffle(&quot;Truffle&quot;);

// Set up an array of pointers to animals, and set those pointers to our Cat and Dog objects
Animal *apcAnimals[] = { &amp;cFred, &amp;cGarbo, &amp;cPooky, &amp;cTruffle, &amp;cTyson, &amp;cZeke };
for (int iii=0; iii &lt; 6; iii++)
    cout &lt;&lt; apcAnimals[iii]-&gt;GetName() &lt;&lt; &quot; says &quot; &lt;&lt; apcAnimals[iii]-&gt;Speak() &lt;&lt; endl;
</pre>
<p>Which produces the result:</p>
<pre>
Fred says Meow
Garbo says Woof
Pooky says Woof
Truffle says Woof
Tyson says Meow
Zeke says Meow
</pre>
<p>Even though these two examples only use Cat and Dog, any other classes we derive from Animal would also work with our Report() function and Animal array without further modification!  This is perhaps the biggest benefit of virtual functions &#8212; the ability to structure your code in such a way that newly derived classes will automatically work with the old code without modification!</p>
<p>A word of warning: the signature of the derived class function must exactly match the signature of the base class virtual function in order for the derived class function to be used.  If the derived class function has different parameter types, the program will likely still compile fine, but the virtual function will not resolve as intended.</p>
<p><strong>Use of the virtual keyword</strong></p>
<p>Technically, the virtual keyword is not needed in derived class.  For example:</p>
<pre class="brush: cpp; title: ; notranslate" title="">
class Base
{
protected:

public:
    virtual const char* GetName() { return &quot;Base&quot;; }
};

class Derived: public Base
{
public:
    const char* GetName() { return &quot;Derived&quot;; } // note lack of virtual keyword
};

int main()
{
    Derived cDerived;
    Base &amp;rBase = cDerived;
    cout &lt;&lt; &quot;rBase is a &quot; &lt;&lt; rBase.GetName() &lt;&lt; endl;

    return 0;
}
</pre>
<p>prints</p>
<pre>
rBase is a Derived
</pre>
<p>Exactly the same as if Derived::GetName() was explicitly tagged as virtual.  Only the most base class function needs to be tagged as virtual for all of the derived functions to work virtually.  However, having the keyword virtual on the derived functions does not hurt, and it serves as a useful reminder that the function is a virtual function rather than a normal one.  Consequently, it&#8217;s generally a good idea to use the virtual keyword for virtualized functions in derived classes even though it&#8217;s not strictly necessary.</p>
<p><strong>Return types of virtual functions</strong></p>
<p>Under normal circumstances, the return type of a virtual function and it&#8217;s override must match.  Thus, the following will not work:</p>
<pre class="brush: cpp; title: ; notranslate" title="">
class Base
{
public:
    virtual int GetValue() { return 5; }
};

class Derived: public Base
{
public:
    virtual double GetValue() { return 6.78; }
};
</pre>
<p>However, there is one special case in which this is not true.  If the return type of a virtual function is a pointer or a reference to a class, override functions can return a pointer or a reference to a derived class.  These are called covariant return types.  Here is an example:</p>
<pre class="brush: cpp; title: ; notranslate" title="">
class Base
{
public:
    // This version of GetThis() returns a pointer to a Base class
    virtual Base* GetThis() { return this; }
};

class Derived: public Base
{
    // Normally override functions have to return objects of the same type as the base function
    // However, because Derived is derived from Base, it's okay to return Derived* instead of Base*
    virtual Derived* GetThis() { return this; }
};
</pre>
<p>Note that some older compilers (eg. Visual Studio 6) do not support covariant return types.</p>
<table border=0 cellpadding=3>
<tr>
<td>
        <a href="../123-virtual-destructors-virtual-assignment-and-overriding-virtualization/default.htm" style="text-decoration:none"><img src="../../images/cpptutorial/next.png" align=middle> 12.3 &#8212; Virtual destructors, virtual assignment, and overriding virtualization</a>
</td>
</tr>
<tr>
<td>
        <a href="../../#Chapter12" style="text-decoration:none"><img src="../../images/cpptutorial/up.png" align=middle> Index</a>
</td>
</tr>
<tr>
<td>
        <a href="../121-pointers-and-references-to-the-base-class-of-derived-objects/default.htm" style="text-decoration:none"><img src="../../images/cpptutorial/prev.png" align=middle> 12.1 &#8212; Pointers and references to the base class of derived objects</a>
</td>
</tr>
</table>
<div style='padding-top:8px; padding-bottom:8px'><script type="text/javascript"><!--
google_ad_client = "ca-pub-0588844875925051";
/* Content Page Bottom - Medium Rectangle */
google_ad_slot = "2751429778";
google_ad_width = 300;
google_ad_height = 250;
//-->
</script>
<acript type="text/javascript"
src="../../../pagead2.googlesyndication.com/pagead/show_ads.js">
</script>
</div><!-- Powered by Ad Inserter Wordpress Plugin, Author: Igor Funa --></div>

<div class="post-footer"><img src="../../blog/wp-content/themes/atahualpa353/images/icons/folder-gray.gif" alt="" /> <a href="../../category/cpp-tutorial/default.htm" title="View all posts in C++ Tutorial" rel="category tag">C++ Tutorial</a>   | <a href="print/default.htm" title="Print This Post" rel="nofollow"><img class="WP-PrintIcon" src="../../blog/wp-content/plugins/wp-print/images/print.gif" alt="Print This Post" title="Print This Post" style="border: 0px;" /></a>&nbsp;<a href="print/default.htm" title="Print This Post" rel="nofollow">Print This Post</a></div>
</div><!-- / Post -->						
	
	<div class="clearfix navigation-middle">
		<div class="older">&laquo; <a href="../121-pointers-and-references-to-the-base-class-of-derived-objects/default.htm" rel="prev">12.1 &#8212; Pointers and references to the base class of derived objects</a> &nbsp;</div><div class="newer">&nbsp; <a href="../123-virtual-destructors-virtual-assignment-and-overriding-virtualization/default.htm" rel="next">12.3 &#8212; Virtual destructors, virtual assignment, and overriding virtualization</a> &raquo;</div></div>


	<a name="comments"></a><!-- named anchor for skip links -->
	<h3 id="comments">34 comments to 12.2 &#8212; Virtual functions</h3>

	
	<!-- Comment List -->
	<ul class="commentlist">
		
			<li class="comment even thread-even depth-1 clearfix" id="comment-12520">
		<div id="div-comment-12520" class="clearfix comment-container">
		<div class="comment-author vcard">
		<img alt='' src='../../../1.gravatar.com/avatar/1083069d2eb32abce826c28e703aaf8b@s=65&d=http_253a_252f_252f1.gravatar.com_252favatar_252fad516503a11cd5ca435acc9bb6523536_253fs_253d65&r=g' class='avatar avatar-65 photo' height='65' width='65' />		<span class="authorname">Ray</span>
		</div>
				<div class="comment-meta commentmetadata">
		<a href="comment-page-1/#comment-12520">
		April 22, 2008 at 4:20 am</a>
        <span class="comment-reply-link"><a rel="nofollow" class="comment-reply-login" href="../../blog/wp-login.php@redirect_to=http_253a_252f_252fwww.learncpp.com_252fcpp-tutorial_252f122-virtual-functions_252f">Log in to Reply</a></span>		 
		</div>
		<pre>Base &amp;rBase = &cDerived;</pre>
<p>Hi can you explain whats is going on with this line&#8230; I&#8217;m following well, thx for the tut&#8217;s! :) just wondering if the first ampersand is meant to be there&#8230;?</p>
<p>[ It was a typo.  The line has been fixed.  Thanks for noticing! -Alex ]</p>
		</div>
<ul class='children'>
		<li class="comment odd alt depth-2 clearfix" id="comment-23459">
		<div id="div-comment-23459" class="clearfix comment-container">
		<div class="comment-author vcard">
		<img alt='' src='../../../1.gravatar.com/avatar/f307381c37bb29ea01add6be52c2e356@s=65&d=http_253a_252f_252f1.gravatar.com_252favatar_252fad516503a11cd5ca435acc9bb6523536_253fs_253d65&r=g' class='avatar avatar-65 photo' height='65' width='65' />		<span class="authorname">serge</span>
		</div>
				<div class="comment-meta commentmetadata">
		<a href="comment-page-1/#comment-23459">
		August 12, 2008 at 8:04 am</a>
        <span class="comment-reply-link"><a rel="nofollow" class="comment-reply-login" href="../../blog/wp-login.php@redirect_to=http_253a_252f_252fwww.learncpp.com_252fcpp-tutorial_252f122-virtual-functions_252f">Log in to Reply</a></span>		 
		</div>
		<p>Hi,</p>
<p>I think this line should be :</p>
<p>Base &amp;rBase = cDerived;</p>
		</div>
</li>
		<li class="comment even depth-2 clearfix" id="comment-65576">
		<div id="div-comment-65576" class="clearfix comment-container">
		<div class="comment-author vcard">
		<img alt='' src='../../../0.gravatar.com/avatar/cc3d54885b2404198f1f2db17eb3d573@s=65&d=http_253a_252f_252f0.gravatar.com_252favatar_252fad516503a11cd5ca435acc9bb6523536_253fs_253d65&r=g' class='avatar avatar-65 photo' height='65' width='65' />		<span class="authorname">jason</span>
		</div>
				<div class="comment-meta commentmetadata">
		<a href="comment-page-1/#comment-65576">
		August 3, 2009 at 5:22 pm</a>
        <span class="comment-reply-link"><a rel="nofollow" class="comment-reply-login" href="../../blog/wp-login.php@redirect_to=http_253a_252f_252fwww.learncpp.com_252fcpp-tutorial_252f122-virtual-functions_252f">Log in to Reply</a></span>		 
		</div>
		<p>Alex, since you said it was fixed, I don&#8217;t know if it&#8217;s a repeat typo or what but, I still see the typo above on this page.</p>
		</div>
</li>
</ul>
</li>
		<li class="pingback odd alt thread-odd thread-alt depth-1 clearfix" id="comment-14426">
		<div id="div-comment-14426" class="clearfix comment-container">
		<div class="comment-author vcard">
				<span class="authorname"><a href='../121-pointers-and-references-to-the-base-class-of-derived-objects/default.htm' rel='external nofollow' class='url'>Learn C++ - &raquo; 12.1 &#8212; Pointers and references to the base class of derived objects</a></span>
		</div>
				<div class="comment-meta commentmetadata">
		<a href="comment-page-1/#comment-14426">
		May 4, 2008 at 6:24 pm</a>
        <span class="comment-reply-link"><a rel="nofollow" class="comment-reply-login" href="../../blog/wp-login.php@redirect_to=http_253a_252f_252fwww.learncpp.com_252fcpp-tutorial_252f122-virtual-functions_252f">Log in to Reply</a></span>		 
		</div>
		<p>[...] 2007      Prev/Next Posts   &laquo; Break Time &#8212; Saint Petersburg | Home | 12.2 &#8212; Virtual functions &raquo;     Tuesday, January 29th, 2008 at 3:45 [...]</p>
		</div>
</li>
		<li class="comment even thread-even depth-1 clearfix" id="comment-18764">
		<div id="div-comment-18764" class="clearfix comment-container">
		<div class="comment-author vcard">
		<img alt='' src='../../../0.gravatar.com/avatar/4ca2ec0a1d8cd38a9dbf8969966ccf8c@s=65&d=http_253a_252f_252f0.gravatar.com_252favatar_252fad516503a11cd5ca435acc9bb6523536_253fs_253d65&r=g' class='avatar avatar-65 photo' height='65' width='65' />		<span class="authorname">Steve Checkoway</span>
		</div>
				<div class="comment-meta commentmetadata">
		<a href="comment-page-1/#comment-18764">
		June 12, 2008 at 1:19 pm</a>
        <span class="comment-reply-link"><a rel="nofollow" class="comment-reply-login" href="../../blog/wp-login.php@redirect_to=http_253a_252f_252fwww.learncpp.com_252fcpp-tutorial_252f122-virtual-functions_252f">Log in to Reply</a></span>		 
		</div>
		<p>Your claim that if the derived class&#8217;s function&#8217;s return type differs from the function it is overriding, then the virtual function will not resolve as intended. This is incorrect. A function&#8217;s return type is not part of its signature. Doing something like the following is actually quite helpful:</p>
<p>#include<br />
struct Base<br />
{<br />
	virtual ~Base() { }<br />
	virtual Base *Copy() const<br />
	{<br />
		puts( &#8220;Base::Copy()&#8221; );<br />
		return new Base(*this);<br />
	}<br />
};</p>
<p>struct Derived : public Base<br />
{<br />
	Derived *Copy() const<br />
	{<br />
		puts( &#8220;Derived::Copy()&#8221; );<br />
		return new Derived(*this);<br />
	}<br />
};</p>
<p>int main()<br />
{<br />
	Derived d;<br />
	Base &amp;b = d;<br />
	Base *b2 = b.Copy();<br />
	Base *b3 = d.Copy();<br />
	Derived *d2 = d.Copy();<br />
	Derived *d3 = dynamic_cast( b.Copy() );</p>
<p>	delete b2;<br />
	delete b3;<br />
	delete d2;<br />
	delete d3;<br />
	return 0;<br />
}</p>
<p>The four calls to Copy() will all call Derived::Copy() (as you can see by running the code). This is useful when you need to make full copies of objects and all you have is a Base *.</p>
<p>Edit: This is ignoring the &lt;pre&gt; tags and I don&#8217;t feel like formatting it using HTML in the 2.5 minutes I have left.</p>
		</div>
<ul class='children'>
		<li class="comment byuser comment-author-Tarindel bypostauthor odd alt depth-2 clearfix" id="comment-18808">
		<div id="div-comment-18808" class="clearfix comment-container bypostauthor">
		<div class="comment-author vcard">
		<img alt='' src='../../../0.gravatar.com/avatar/2bcdbab687c32f64f9208e016cafe4cc@s=65&d=http_253a_252f_252f0.gravatar.com_252favatar_252fad516503a11cd5ca435acc9bb6523536_253fs_253d65&r=g' class='avatar avatar-65 photo' height='65' width='65' />		<span class="authorname"><a href='../../../www.tarindel.com/default.htm' rel='external nofollow' class='url'>Alex</a></span>
		</div>
				<div class="comment-meta commentmetadata">
		<a href="comment-page-1/#comment-18808">
		June 13, 2008 at 11:15 am</a>
        <span class="comment-reply-link"><a rel="nofollow" class="comment-reply-login" href="../../blog/wp-login.php@redirect_to=http_253a_252f_252fwww.learncpp.com_252fcpp-tutorial_252f122-virtual-functions_252f">Log in to Reply</a></span>		 
		</div>
		<p>You are correct.  I added a section about covariant return types.</p>
<p>I have also fixed the issue with the pre tags.</p>
		</div>
</li>
</ul>
</li>
		<li class="pingback even thread-odd thread-alt depth-1 clearfix" id="comment-21661">
		<div id="div-comment-21661" class="clearfix comment-container">
		<div class="comment-author vcard">
				<span class="authorname"><a href='../123-virtual-destructors-virtual-assignment-and-overriding-virtualization/default.htm' rel='external nofollow' class='url'>Learn C++ - &raquo; 12.3 &#8212; Virtual destructors, virtual assignment, and overriding virtualization</a></span>
		</div>
				<div class="comment-meta commentmetadata">
		<a href="comment-page-1/#comment-21661">
		July 23, 2008 at 5:20 pm</a>
        <span class="comment-reply-link"><a rel="nofollow" class="comment-reply-login" href="../../blog/wp-login.php@redirect_to=http_253a_252f_252fwww.learncpp.com_252fcpp-tutorial_252f122-virtual-functions_252f">Log in to Reply</a></span>		 
		</div>
		<p>[...] 2007      Prev/Next Posts   &laquo; 12.2 &#8212; Virtual functions | Home | 12.4 &#8212; Early binding and late binding &raquo;     Friday, February 1st, 2008 at 1:50 [...]</p>
		</div>
</li>
		<li class="comment odd alt thread-even depth-1 clearfix" id="comment-23057">
		<div id="div-comment-23057" class="clearfix comment-container">
		<div class="comment-author vcard">
		<img alt='' src='../../../0.gravatar.com/avatar/43d1ef868eba221c26cc7d6b9bafc546@s=65&d=http_253a_252f_252f0.gravatar.com_252favatar_252fad516503a11cd5ca435acc9bb6523536_253fs_253d65&r=g' class='avatar avatar-65 photo' height='65' width='65' />		<span class="authorname">Ben</span>
		</div>
				<div class="comment-meta commentmetadata">
		<a href="comment-page-1/#comment-23057">
		August 7, 2008 at 6:09 am</a>
        <span class="comment-reply-link"><a rel="nofollow" class="comment-reply-login" href="../../blog/wp-login.php@redirect_to=http_253a_252f_252fwww.learncpp.com_252fcpp-tutorial_252f122-virtual-functions_252f">Log in to Reply</a></span>		 
		</div>
		<p>Hi Alex,<br />
in your all your classes, whether they are derived, or base classes, you put the virtual keyword in front of the function definition of every function which shall be overwritten in the derived class, even though this is not necessary in the derived class &#8211; as long there is no class, which inherits from that, which shall overwrite the function again. It would be clearing, to point out, that it is not necessary.<br />
Ben</p>
		</div>
<ul class='children'>
		<li class="comment byuser comment-author-Tarindel bypostauthor even depth-2 clearfix" id="comment-23589">
		<div id="div-comment-23589" class="clearfix comment-container bypostauthor">
		<div class="comment-author vcard">
		<img alt='' src='../../../0.gravatar.com/avatar/2bcdbab687c32f64f9208e016cafe4cc@s=65&d=http_253a_252f_252f0.gravatar.com_252favatar_252fad516503a11cd5ca435acc9bb6523536_253fs_253d65&r=g' class='avatar avatar-65 photo' height='65' width='65' />		<span class="authorname"><a href='../../../www.tarindel.com/default.htm' rel='external nofollow' class='url'>Alex</a></span>
		</div>
				<div class="comment-meta commentmetadata">
		<a href="comment-page-1/#comment-23589">
		August 13, 2008 at 9:21 am</a>
        <span class="comment-reply-link"><a rel="nofollow" class="comment-reply-login" href="../../blog/wp-login.php@redirect_to=http_253a_252f_252fwww.learncpp.com_252fcpp-tutorial_252f122-virtual-functions_252f">Log in to Reply</a></span>		 
		</div>
		<p>Good point.  I will make the lack of necessity and why I do this anyway clear in the text.  Thanks for your comments.</p>
		</div>
</li>
</ul>
</li>
		<li class="comment odd alt thread-odd thread-alt depth-1 clearfix" id="comment-31638">
		<div id="div-comment-31638" class="clearfix comment-container">
		<div class="comment-author vcard">
		<img alt='' src='../../../1.gravatar.com/avatar/725674cf0364aebc0330e5eba14986d3@s=65&d=http_253a_252f_252f1.gravatar.com_252favatar_252fad516503a11cd5ca435acc9bb6523536_253fs_253d65&r=g' class='avatar avatar-65 photo' height='65' width='65' />		<span class="authorname">Suman</span>
		</div>
				<div class="comment-meta commentmetadata">
		<a href="comment-page-1/#comment-31638">
		November 4, 2008 at 10:51 pm</a>
        <span class="comment-reply-link"><a rel="nofollow" class="comment-reply-login" href="../../blog/wp-login.php@redirect_to=http_253a_252f_252fwww.learncpp.com_252fcpp-tutorial_252f122-virtual-functions_252f">Log in to Reply</a></span>		 
		</div>
		<p>Hi,</p>
<p>I am getting the following error while compiling on linux.<br />
sushils)@linux1:(~/test/test++)<br />
$ g++ virtualInheritance.cc<br />
virtualInheritance.cc: In function `int main()&#8217;:<br />
virtualInheritance.cc:20: conversion from `Derived*&#8217; to non-scalar type `Base&#8217;<br />
   requested<br />
virtualInheritance.cc:20: cannot initialize `Base&amp;&#8217; from `Derived*&#8217;<br />
virtualInheritance.cc:21: `cout&#8217; undeclared (first use this function)<br />
virtualInheritance.cc:21: (Each undeclared identifier is reported only once for<br />
   each function it appears in.)<br />
virtualInheritance.cc:21: `endl&#8217; undeclared (first use this function)<br />
sushils)@linux1:(~/test/test++) </p>
<pre>
$ cat virtualInheritance.cc
#include &lt;iostream&gt;

class Base
{
protected:

public:
    virtual const char* GetName() { return &quot;Base&quot;; }
};

class Derived: public Base
{
public:
    virtual const char* GetName() { return &quot;Derived&quot;; }
};

int main()
{
    Derived cDerived;
    Base &amp;rBase = &amp;cDerived;
    cout &lt;&lt; &quot;rBase is a &quot; &lt;&lt; rBase.GetName() &lt;&lt; endl;

    return 0;
}
</pre>
<p>Thanks in advance<br />
With regards<br />
Sushil</p>
		</div>
<ul class='children'>
		<li class="comment byuser comment-author-Tarindel bypostauthor even depth-2 clearfix" id="comment-31815">
		<div id="div-comment-31815" class="clearfix comment-container bypostauthor">
		<div class="comment-author vcard">
		<img alt='' src='../../../0.gravatar.com/avatar/2bcdbab687c32f64f9208e016cafe4cc@s=65&d=http_253a_252f_252f0.gravatar.com_252favatar_252fad516503a11cd5ca435acc9bb6523536_253fs_253d65&r=g' class='avatar avatar-65 photo' height='65' width='65' />		<span class="authorname"><a href='../../../www.tarindel.com/default.htm' rel='external nofollow' class='url'>Alex</a></span>
		</div>
				<div class="comment-meta commentmetadata">
		<a href="comment-page-1/#comment-31815">
		November 8, 2008 at 11:22 am</a>
        <span class="comment-reply-link"><a rel="nofollow" class="comment-reply-login" href="../../blog/wp-login.php@redirect_to=http_253a_252f_252fwww.learncpp.com_252fcpp-tutorial_252f122-virtual-functions_252f">Log in to Reply</a></span>		 
		</div>
		<p>I fixed the example.  Since cDerived is a value object, &#038;cDerived is a pointer.  rBase is a reference to a value object, not a reference to a pointer, so it didn&#8217;t work.</p>
		</div>
</li>
</ul>
</li>
		<li class="comment odd alt thread-even depth-1 clearfix" id="comment-46539">
		<div id="div-comment-46539" class="clearfix comment-container">
		<div class="comment-author vcard">
		<img alt='' src='../../../1.gravatar.com/avatar/719fcbfcb8d73ba577c4ea55bc13b7b9@s=65&d=http_253a_252f_252f1.gravatar.com_252favatar_252fad516503a11cd5ca435acc9bb6523536_253fs_253d65&r=g' class='avatar avatar-65 photo' height='65' width='65' />		<span class="authorname">prabodh</span>
		</div>
				<div class="comment-meta commentmetadata">
		<a href="comment-page-1/#comment-46539">
		February 23, 2009 at 9:41 am</a>
        <span class="comment-reply-link"><a rel="nofollow" class="comment-reply-login" href="../../blog/wp-login.php@redirect_to=http_253a_252f_252fwww.learncpp.com_252fcpp-tutorial_252f122-virtual-functions_252f">Log in to Reply</a></span>		 
		</div>
		<p>can we write &#8220;visiblity mode base class name virtual keyword&#8221; ?<br />
while deriving new class from base class decleartion&#8230;&#8230;..</p>
		</div>
</li>
		<li class="comment byuser comment-author-manju23reddy even thread-odd thread-alt depth-1 clearfix" id="comment-60931">
		<div id="div-comment-60931" class="clearfix comment-container">
		<div class="comment-author vcard">
		<img alt='' src='../../../0.gravatar.com/avatar/692775cb8d6111eb2003d7139eb280fe@s=65&d=http_253a_252f_252f0.gravatar.com_252favatar_252fad516503a11cd5ca435acc9bb6523536_253fs_253d65&r=g' class='avatar avatar-65 photo' height='65' width='65' />		<span class="authorname">manju23reddy</span>
		</div>
				<div class="comment-meta commentmetadata">
		<a href="comment-page-1/#comment-60931">
		May 16, 2009 at 7:52 pm</a>
        <span class="comment-reply-link"><a rel="nofollow" class="comment-reply-login" href="../../blog/wp-login.php@redirect_to=http_253a_252f_252fwww.learncpp.com_252fcpp-tutorial_252f122-virtual-functions_252f">Log in to Reply</a></span>		 
		</div>
		<p>hi the below code gets core dump y and how to solve it so that i should set base object with derived pointer in get function only and use rBase in main to call a function of those classes.</p>
<pre>
#include &lt;iostream&gt;
#include &lt;conio.h&gt;
#include &lt;iostream&gt;

class Base
{
protected:

public:
    virtual const char* GetName() { return &quot;Base&quot;; }
};

class Derived: public Base
{
public:
    virtual const char* GetName() { return &quot;Derived&quot;; }
};

void get(Base *rBase)
{
   Derived *cDerived = new Derived();
   rBase = cDerived;
}
int main()
{
    Base *rBase = NULL;
    std::cout &lt;&lt; &quot;rBase is a &quot; &lt;&lt; rBase-&gt;GetName() &lt;&lt; &quot;\n&quot;;
    getch();
    return 0;
}
</pre>
		</div>
<ul class='children'>
		<li class="comment odd alt depth-2 clearfix" id="comment-72664">
		<div id="div-comment-72664" class="clearfix comment-container">
		<div class="comment-author vcard">
		<img alt='' src='../../../0.gravatar.com/avatar/8c7d9950ec6314daacfccb06f5d5ff25@s=65&d=http_253a_252f_252f0.gravatar.com_252favatar_252fad516503a11cd5ca435acc9bb6523536_253fs_253d65&r=g' class='avatar avatar-65 photo' height='65' width='65' />		<span class="authorname">ray</span>
		</div>
				<div class="comment-meta commentmetadata">
		<a href="comment-page-1/#comment-72664">
		November 20, 2009 at 3:43 pm</a>
        <span class="comment-reply-link"><a rel="nofollow" class="comment-reply-login" href="../../blog/wp-login.php@redirect_to=http_253a_252f_252fwww.learncpp.com_252fcpp-tutorial_252f122-virtual-functions_252f">Log in to Reply</a></span>		 
		</div>
		<pre>
void get(Base *&amp;rBase)
{
   Derived *cDerived = new Derived();
   rBase = cDerived;
}
int main()
{
    Base *rBase = NULL;
    get(rBase);
    std::cout &lt;&lt; &quot;rBase is a &quot; &lt;&lt; rBase-&gt;GetName() &lt;&lt; &quot;\n&quot;;
    getch();
    return 0;
}
</pre>
		</div>
</li>
</ul>
</li>
		<li class="comment even thread-even depth-1 clearfix" id="comment-65300">
		<div id="div-comment-65300" class="clearfix comment-container">
		<div class="comment-author vcard">
		<img alt='' src='../../../1.gravatar.com/avatar/352d30aba50e66b679f4c820780f2d7c@s=65&d=http_253a_252f_252f1.gravatar.com_252favatar_252fad516503a11cd5ca435acc9bb6523536_253fs_253d65&r=g' class='avatar avatar-65 photo' height='65' width='65' />		<span class="authorname"><a href='../../../dustyghost.com/default.htm' rel='external nofollow' class='url'>Dusty</a></span>
		</div>
				<div class="comment-meta commentmetadata">
		<a href="comment-page-1/#comment-65300">
		July 30, 2009 at 2:46 am</a>
        <span class="comment-reply-link"><a rel="nofollow" class="comment-reply-login" href="../../blog/wp-login.php@redirect_to=http_253a_252f_252fwww.learncpp.com_252fcpp-tutorial_252f122-virtual-functions_252f">Log in to Reply</a></span>		 
		</div>
		<p>Hallo all! </p>
<p>Urm, this is going to sound really stupid, so I&#8217;m sorry for my ignorance.</p>
<p>But why don&#8217;t we just use a pointer type of the derived class? It seems that the main reason for virtual functions is that we are using a pointer from the base class instead of the derived.</p>
<p>EDIT;</p>
<p>Ah! wait a min!! So say you have a pointer of the animal base type, you might want to point that to the derived classes of say Dolphin, Elephant, Human etc&#8230;. so rather than creating a pointer for each derived you just create one base class pointer and use that with virtual functions. right?</p>
		</div>
</li>
		<li class="comment odd alt thread-odd thread-alt depth-1 clearfix" id="comment-67578">
		<div id="div-comment-67578" class="clearfix comment-container">
		<div class="comment-author vcard">
		<img alt='' src='../../../0.gravatar.com/avatar/026b6a32e699d90fa34ef264ae3c7bc2@s=65&d=http_253a_252f_252f0.gravatar.com_252favatar_252fad516503a11cd5ca435acc9bb6523536_253fs_253d65&r=g' class='avatar avatar-65 photo' height='65' width='65' />		<span class="authorname">Lavanya</span>
		</div>
				<div class="comment-meta commentmetadata">
		<a href="comment-page-1/#comment-67578">
		September 1, 2009 at 4:16 am</a>
        <span class="comment-reply-link"><a rel="nofollow" class="comment-reply-login" href="../../blog/wp-login.php@redirect_to=http_253a_252f_252fwww.learncpp.com_252fcpp-tutorial_252f122-virtual-functions_252f">Log in to Reply</a></span>		 
		</div>
		<p>hi all,</p>
<p>I was looking for a solution to the below problem. Can someone please help?</p>
<p>I&#8217;m given this statement Base * b = new Derived;<br />
just this line.<br />
I know that Both base and derived classes have a virtual (overidden in derived) function called Fun().</p>
<p>Given only the above line, how do i invoke base&#8217;s Fun(), instead of Derived&#8217;s Fun().</p>
<p>Would appreciate any responses.</p>
		</div>
<ul class='children'>
		<li class="comment even depth-2 clearfix" id="comment-70639">
		<div id="div-comment-70639" class="clearfix comment-container">
		<div class="comment-author vcard">
		<img alt='' src='../../../0.gravatar.com/avatar/c8a0c0fc3aa2182c46210e0257253dac@s=65&d=http_253a_252f_252f0.gravatar.com_252favatar_252fad516503a11cd5ca435acc9bb6523536_253fs_253d65&r=g' class='avatar avatar-65 photo' height='65' width='65' />		<span class="authorname">Rajesh</span>
		</div>
				<div class="comment-meta commentmetadata">
		<a href="comment-page-1/#comment-70639">
		October 19, 2009 at 12:32 pm</a>
        <span class="comment-reply-link"><a rel="nofollow" class="comment-reply-login" href="../../blog/wp-login.php@redirect_to=http_253a_252f_252fwww.learncpp.com_252fcpp-tutorial_252f122-virtual-functions_252f">Log in to Reply</a></span>		 
		</div>
		<p>This is an interesting question. Even I am really willing to know the answer.</p>
		</div>
</li>
		<li class="comment odd alt depth-2 clearfix" id="comment-72401">
		<div id="div-comment-72401" class="clearfix comment-container">
		<div class="comment-author vcard">
		<img alt='' src='../../../1.gravatar.com/avatar/152cd8986c4e76db62b45320902d0910@s=65&d=http_253a_252f_252f1.gravatar.com_252favatar_252fad516503a11cd5ca435acc9bb6523536_253fs_253d65&r=g' class='avatar avatar-65 photo' height='65' width='65' />		<span class="authorname">Milos</span>
		</div>
				<div class="comment-meta commentmetadata">
		<a href="comment-page-1/#comment-72401">
		November 16, 2009 at 2:25 am</a>
        <span class="comment-reply-link"><a rel="nofollow" class="comment-reply-login" href="../../blog/wp-login.php@redirect_to=http_253a_252f_252fwww.learncpp.com_252fcpp-tutorial_252f122-virtual-functions_252f">Log in to Reply</a></span>		 
		</div>
		<p>Hey,<br />
you gotta call something like this:</p>
<pre> b-&gt;Base::Fun()</pre>
		</div>
</li>
</ul>
</li>
		<li class="comment even thread-even depth-1 clearfix" id="comment-74737">
		<div id="div-comment-74737" class="clearfix comment-container">
		<div class="comment-author vcard">
		<img alt='' src='../../../0.gravatar.com/avatar/adcba66a9404c621ff21b597483e7a0f@s=65&d=http_253a_252f_252f0.gravatar.com_252favatar_252fad516503a11cd5ca435acc9bb6523536_253fs_253d65&r=g' class='avatar avatar-65 photo' height='65' width='65' />		<span class="authorname"><a href='../../../www.name.com/default.htm' rel='external nofollow' class='url'>name</a></span>
		</div>
				<div class="comment-meta commentmetadata">
		<a href="comment-page-1/#comment-74737">
		December 23, 2009 at 9:20 am</a>
        <span class="comment-reply-link"><a rel="nofollow" class="comment-reply-login" href="../../blog/wp-login.php@redirect_to=http_253a_252f_252fwww.learncpp.com_252fcpp-tutorial_252f122-virtual-functions_252f">Log in to Reply</a></span>		 
		</div>
		<p>yrty</p>
		</div>
</li>
		<li class="comment odd alt thread-odd thread-alt depth-1 clearfix" id="comment-74738">
		<div id="div-comment-74738" class="clearfix comment-container">
		<div class="comment-author vcard">
		<img alt='' src='../../../0.gravatar.com/avatar/adcba66a9404c621ff21b597483e7a0f@s=65&d=http_253a_252f_252f0.gravatar.com_252favatar_252fad516503a11cd5ca435acc9bb6523536_253fs_253d65&r=g' class='avatar avatar-65 photo' height='65' width='65' />		<span class="authorname"><a href='../../../www.name.com/default.htm' rel='external nofollow' class='url'>name</a></span>
		</div>
				<div class="comment-meta commentmetadata">
		<a href="comment-page-1/#comment-74738">
		December 23, 2009 at 9:21 am</a>
        <span class="comment-reply-link"><a rel="nofollow" class="comment-reply-login" href="../../blog/wp-login.php@redirect_to=http_253a_252f_252fwww.learncpp.com_252fcpp-tutorial_252f122-virtual-functions_252f">Log in to Reply</a></span>		 
		</div>
		<p><a href='../../../i160.photobucket.com/albums/t182/babiegurl_sexieeyes/sexy.jpg' rel="nofollow">check this</a></p>
		</div>
</li>
		<li class="comment even thread-even depth-1 clearfix" id="comment-75136">
		<div id="div-comment-75136" class="clearfix comment-container">
		<div class="comment-author vcard">
		<img alt='' src='../../../0.gravatar.com/avatar/4cb923378bb03f8146b4f2adcb6e9c8f@s=65&d=http_253a_252f_252f0.gravatar.com_252favatar_252fad516503a11cd5ca435acc9bb6523536_253fs_253d65&r=g' class='avatar avatar-65 photo' height='65' width='65' />		<span class="authorname">Rami</span>
		</div>
				<div class="comment-meta commentmetadata">
		<a href="comment-page-1/#comment-75136">
		December 30, 2009 at 11:29 am</a>
        <span class="comment-reply-link"><a rel="nofollow" class="comment-reply-login" href="../../blog/wp-login.php@redirect_to=http_253a_252f_252fwww.learncpp.com_252fcpp-tutorial_252f122-virtual-functions_252f">Log in to Reply</a></span>		 
		</div>
		<p>is there a performance penalty by using virtual functions? If not then all functions should be virtual functions, no harm right?! =D</p>
		</div>
</li>
		<li class="comment odd alt thread-odd thread-alt depth-1 clearfix" id="comment-84756">
		<div id="div-comment-84756" class="clearfix comment-container">
		<div class="comment-author vcard">
		<img alt='' src='../../../0.gravatar.com/avatar/8eeab0462feae10973a41332f2defb92@s=65&d=http_253a_252f_252f0.gravatar.com_252favatar_252fad516503a11cd5ca435acc9bb6523536_253fs_253d65&r=g' class='avatar avatar-65 photo' height='65' width='65' />		<span class="authorname">Steve</span>
		</div>
				<div class="comment-meta commentmetadata">
		<a href="comment-page-1/#comment-84756">
		May 16, 2010 at 6:05 am</a>
        <span class="comment-reply-link"><a rel="nofollow" class="comment-reply-login" href="../../blog/wp-login.php@redirect_to=http_253a_252f_252fwww.learncpp.com_252fcpp-tutorial_252f122-virtual-functions_252f">Log in to Reply</a></span>		 
		</div>
		<p>I&#8217;m sorry but you lost me here.</p>
<p>Why do u p.e. use &#8220;virtual const char* GetName() { return  &#8220;A&#8221;; }&#8221;?</p>
<p>Why are u using a const pointer as return value? I have run the example with a normal pointer as return, and it ran the same?</p>
<p>Thx</p>
		</div>
</li>
		<li class="comment even thread-even depth-1 clearfix" id="comment-84757">
		<div id="div-comment-84757" class="clearfix comment-container">
		<div class="comment-author vcard">
		<img alt='' src='../../../0.gravatar.com/avatar/8eeab0462feae10973a41332f2defb92@s=65&d=http_253a_252f_252f0.gravatar.com_252favatar_252fad516503a11cd5ca435acc9bb6523536_253fs_253d65&r=g' class='avatar avatar-65 photo' height='65' width='65' />		<span class="authorname">Steve</span>
		</div>
				<div class="comment-meta commentmetadata">
		<a href="comment-page-1/#comment-84757">
		May 16, 2010 at 6:19 am</a>
        <span class="comment-reply-link"><a rel="nofollow" class="comment-reply-login" href="../../blog/wp-login.php@redirect_to=http_253a_252f_252fwww.learncpp.com_252fcpp-tutorial_252f122-virtual-functions_252f">Log in to Reply</a></span>		 
		</div>
		<p>Sorry I mean a pointer to a const &#8230;</p>
		</div>
</li>
		<li class="comment odd alt thread-odd thread-alt depth-1 clearfix" id="comment-85116">
		<div id="div-comment-85116" class="clearfix comment-container">
		<div class="comment-author vcard">
		<img alt='' src='../../../0.gravatar.com/avatar/8eeab0462feae10973a41332f2defb92@s=65&d=http_253a_252f_252f0.gravatar.com_252favatar_252fad516503a11cd5ca435acc9bb6523536_253fs_253d65&r=g' class='avatar avatar-65 photo' height='65' width='65' />		<span class="authorname">Steve</span>
		</div>
				<div class="comment-meta commentmetadata">
		<a href="comment-page-1/#comment-85116">
		May 21, 2010 at 6:55 am</a>
        <span class="comment-reply-link"><a rel="nofollow" class="comment-reply-login" href="../../blog/wp-login.php@redirect_to=http_253a_252f_252fwww.learncpp.com_252fcpp-tutorial_252f122-virtual-functions_252f">Log in to Reply</a></span>		 
		</div>
		<p>Never mind, I figured it out.</p>
<p>The solution was if there was no pointer to a const (const char*), the user would be able to do this:</p>
<p>rBase.GetName()[0] = &#8216;a&#8217;;</p>
<p>which would cause an access violation exception at runtime.</p>
		</div>
</li>
		<li class="comment even thread-even depth-1 clearfix" id="comment-85570">
		<div id="div-comment-85570" class="clearfix comment-container">
		<div class="comment-author vcard">
		<img alt='' src='../../../0.gravatar.com/avatar/287e685c290e9c5c3628aa93c9bef739@s=65&d=http_253a_252f_252f0.gravatar.com_252favatar_252fad516503a11cd5ca435acc9bb6523536_253fs_253d65&r=g' class='avatar avatar-65 photo' height='65' width='65' />		<span class="authorname">auasp</span>
		</div>
				<div class="comment-meta commentmetadata">
		<a href="comment-page-1/#comment-85570">
		May 29, 2010 at 7:36 am</a>
        <span class="comment-reply-link"><a rel="nofollow" class="comment-reply-login" href="../../blog/wp-login.php@redirect_to=http_253a_252f_252fwww.learncpp.com_252fcpp-tutorial_252f122-virtual-functions_252f">Log in to Reply</a></span>		 
		</div>
		<p>one extra &#8216;&amp;&#8217; in line number 18 of 2nd code listing</p>
		</div>
</li>
		<li class="comment odd alt thread-odd thread-alt depth-1 clearfix" id="comment-85597">
		<div id="div-comment-85597" class="clearfix comment-container">
		<div class="comment-author vcard">
		<img alt='' src='../../../0.gravatar.com/avatar/287e685c290e9c5c3628aa93c9bef739@s=65&d=http_253a_252f_252f0.gravatar.com_252favatar_252fad516503a11cd5ca435acc9bb6523536_253fs_253d65&r=g' class='avatar avatar-65 photo' height='65' width='65' />		<span class="authorname">auasp</span>
		</div>
				<div class="comment-meta commentmetadata">
		<a href="comment-page-1/#comment-85597">
		May 29, 2010 at 8:10 pm</a>
        <span class="comment-reply-link"><a rel="nofollow" class="comment-reply-login" href="../../blog/wp-login.php@redirect_to=http_253a_252f_252fwww.learncpp.com_252fcpp-tutorial_252f122-virtual-functions_252f">Log in to Reply</a></span>		 
		</div>
		<p>a very good article about vitual functions is here:<br />
<a href="../../../publib.boulder.ibm.com/infocenter/comphelp/v8v101/index.jsp@topic=_2fcom.ibm.xlcpp8a.doc_2flanguage_2fref_2fcplr139.htm" rel="nofollow">http://publib.boulder.ibm.com/infocenter/comphelp/v8v101/index.jsp?topic=/com.ibm.xlcpp8a.doc/language/ref/cplr139.htm</a></p>
		</div>
</li>
		<li class="comment even thread-even depth-1 clearfix" id="comment-85743">
		<div id="div-comment-85743" class="clearfix comment-container">
		<div class="comment-author vcard">
		<img alt='' src='../../../1.gravatar.com/avatar/36add04b2906c831c6e6cc434ef4d1de@s=65&d=http_253a_252f_252f1.gravatar.com_252favatar_252fad516503a11cd5ca435acc9bb6523536_253fs_253d65&r=g' class='avatar avatar-65 photo' height='65' width='65' />		<span class="authorname"><a href='../../../www.jazzmirage.com/default.htm' rel='external nofollow' class='url'>Raj Sodhi</a></span>
		</div>
				<div class="comment-meta commentmetadata">
		<a href="comment-page-1/#comment-85743">
		May 31, 2010 at 10:41 pm</a>
        <span class="comment-reply-link"><a rel="nofollow" class="comment-reply-login" href="../../blog/wp-login.php@redirect_to=http_253a_252f_252fwww.learncpp.com_252fcpp-tutorial_252f122-virtual-functions_252f">Log in to Reply</a></span>		 
		</div>
		<p>Hello Alex,</p>
<p>Wonderful explanations all around.<br />
Way better than most textbooks.</p>
<p>Only one point that has confused the daylights out of me.</p>
<pre>

15. int  main()
16. {
17.    Derived cDerived;
18.    Base &amp;rBase = &amp;cDerived;
19.    cout &lt;&lt; &quot;rBase is a &quot; &lt;&lt; rBase.GetName() &lt;&lt; endl;
20.
21.    return 0; }
<!--formatted--></pre>
<p>I believe rBase is a &#8220;reference&#8221;, not a &#8220;pointer.&#8221;<br />
if it were </p>
<pre>
18.    Base *rBase = &amp;cDerived;
<!--formatted--></pre>
<p>Then it would be a pointer.</p>
<p>Thanks!</p>
<p>Raj</p>
		</div>
</li>
		<li class="comment odd alt thread-odd thread-alt depth-1 clearfix" id="comment-86500">
		<div id="div-comment-86500" class="clearfix comment-container">
		<div class="comment-author vcard">
		<img alt='' src='../../../0.gravatar.com/avatar/23490d73ae5456568478541137e2a812@s=65&d=http_253a_252f_252f0.gravatar.com_252favatar_252fad516503a11cd5ca435acc9bb6523536_253fs_253d65&r=g' class='avatar avatar-65 photo' height='65' width='65' />		<span class="authorname">sss</span>
		</div>
				<div class="comment-meta commentmetadata">
		<a href="comment-page-1/#comment-86500">
		June 14, 2010 at 11:39 pm</a>
        <span class="comment-reply-link"><a rel="nofollow" class="comment-reply-login" href="../../blog/wp-login.php@redirect_to=http_253a_252f_252fwww.learncpp.com_252fcpp-tutorial_252f122-virtual-functions_252f">Log in to Reply</a></span>		 
		</div>
		<p>Hi Alex,</p>
<p>Can you tell me conceptually why the need of virtual functions came into picture? i do understand the concept but what is the necessity, just to reduce overhead ..but calling virtual function itself is an overhead????</p>
		</div>
</li>
		<li class="pingback even thread-even depth-1 clearfix" id="comment-87436">
		<div id="div-comment-87436" class="clearfix comment-container">
		<div class="comment-author vcard">
				<span class="authorname"><a href='../../../cplusplus.psexam.com/c-tutorial-and-online-ebook/default.htm' rel='external nofollow' class='url'>C++ Tutorial and Online Ebook</a></span>
		</div>
				<div class="comment-meta commentmetadata">
		<a href="comment-page-1/#comment-87436">
		June 29, 2010 at 5:13 pm</a>
        <span class="comment-reply-link"><a rel="nofollow" class="comment-reply-login" href="../../blog/wp-login.php@redirect_to=http_253a_252f_252fwww.learncpp.com_252fcpp-tutorial_252f122-virtual-functions_252f">Log in to Reply</a></span>		 
		</div>
		<p>[...] 12.2 Virtual functions [...]</p>
		</div>
</li>
		<li class="comment odd alt thread-odd thread-alt depth-1 clearfix" id="comment-91682">
		<div id="div-comment-91682" class="clearfix comment-container">
		<div class="comment-author vcard">
		<img alt='' src='../../../0.gravatar.com/avatar/62c6fd82fc0a98f0423d0274f67cddb2@s=65&d=http_253a_252f_252f0.gravatar.com_252favatar_252fad516503a11cd5ca435acc9bb6523536_253fs_253d65&r=g' class='avatar avatar-65 photo' height='65' width='65' />		<span class="authorname">Mystic</span>
		</div>
				<div class="comment-meta commentmetadata">
		<a href="comment-page-1/#comment-91682">
		September 8, 2010 at 3:35 pm</a>
        <span class="comment-reply-link"><a rel="nofollow" class="comment-reply-login" href="../../blog/wp-login.php@redirect_to=http_253a_252f_252fwww.learncpp.com_252fcpp-tutorial_252f122-virtual-functions_252f">Log in to Reply</a></span>		 
		</div>
		<p><cite>Use of the virtual keyword</p>
<p>Technically, the virtual keyword is not needed in derived class. For example:</p>
<pre>class Base
{
protected:

public:
    virtual const char* GetName() { return &quot;Base&quot;; }
};

class Derived: public Base
{
public:
    const char* GetName() { return &quot;Derived&quot;; } // note lack of virtual keyword
};

int main()
{
    Derived cDerived;
    Base &amp;rBase = cDerived;
    cout &lt;&lt; &quot;rBase is a &quot; &lt;&lt; rBase.GetName() &lt;&lt; endl;

    return 0;
}</pre>
<p>prints</p>
<p>rBase is a Derived</cite></p>
<p>What would happen if it was changed to include something like:</p>
<pre>class DerivedTwice: public Derived
{
public:
    const char* GetName() { return &quot;DerivedTwice&quot;; }
};

int main()
{
    DerivedTwice cDerivedTwice;
    Derived &amp;rDerived = cDerivedTwice;
    cout &lt;&lt; &quot;rDerived is a &quot; &lt;&lt; rDerived.GetName() &lt;&lt; endl;

    return 0;
}
</pre>
<p>? Then wouldn&#8217;t it say &#8220;rDerived is a &#8216;Derived&#8217;&#8221; instead of &#8220;rDerived is a &#8216;DerivedTwice&#8221;? That&#8217;s not what you&#8217;d want&#8230; You might want to say something to that effect (if that actually happens, I haven&#8217;t checked my code).</p>
		</div>
<ul class='children'>
		<li class="comment even depth-2 clearfix" id="comment-91714">
		<div id="div-comment-91714" class="clearfix comment-container">
		<div class="comment-author vcard">
		<img alt='' src='../../../1.gravatar.com/avatar/bcd79091b1f5e6a271350f76f9bbdcd2@s=65&d=http_253a_252f_252f1.gravatar.com_252favatar_252fad516503a11cd5ca435acc9bb6523536_253fs_253d65&r=g' class='avatar avatar-65 photo' height='65' width='65' />		<span class="authorname">D.M. Ryan</span>
		</div>
				<div class="comment-meta commentmetadata">
		<a href="comment-page-1/#comment-91714">
		September 9, 2010 at 4:59 am</a>
        <span class="comment-reply-link"><a rel="nofollow" class="comment-reply-login" href="../../blog/wp-login.php@redirect_to=http_253a_252f_252fwww.learncpp.com_252fcpp-tutorial_252f122-virtual-functions_252f">Log in to Reply</a></span>		 
		</div>
		<p>The odd thing is, when I tried your code I got &#8220;rDerived is a DerivedTwice&#8221;. [I compiled it using Visual Studio 2005.] I thought a second virtual keyword would be needed to get that output, but it isn&#8217;t. For VS2005, at least, it&#8217;s only necessary for the virtual keyword to be at the base; virtual carries through all the way down the inheritance chin.</p>
<p>To be specific, this code:
<pre>class Base
{
protected:

public:
    virtual const char* GetName() { return &quot;Base&quot;; } // virtual keyword here
};

class Derived: public Base
{
public:
   const char* GetName() { return &quot;Derived&quot;; } // note lack of virtual keyword here
};

class DerivedTwice: public Derived
{
public:
    const char* GetName() { return &quot;DerivedTwice&quot;; }
};

int main()
{
    DerivedTwice cDerivedTwice;
    Derived &amp;rDerived = cDerivedTwice;
    cout &lt;&lt; &quot;rDerived is a &quot; &lt;&lt; rDerived.GetName() &lt;&lt; endl; // outputs &quot;rDerived is a DerivedTwice&quot;
                                                            // despite lack of second virtual keyword.

    return 0;
}</pre>
<p>outputs the &#8220;rDerived is a DerivedTwice&#8221; being looked for, when compiled with VS&#8217;05. Other compilers might require the second keyword.</p>
		</div>
</li>
</ul>
</li>
		<li class="comment byuser comment-author-ravigautam odd alt thread-even depth-1 clearfix" id="comment-96020">
		<div id="div-comment-96020" class="clearfix comment-container">
		<div class="comment-author vcard">
		<img alt='' src='../../../0.gravatar.com/avatar/013513186dcd0d15719f8a4a6a2e338e@s=65&d=http_253a_252f_252f0.gravatar.com_252favatar_252fad516503a11cd5ca435acc9bb6523536_253fs_253d65&r=g' class='avatar avatar-65 photo' height='65' width='65' />		<span class="authorname">Ravi Gautam</span>
		</div>
				<div class="comment-meta commentmetadata">
		<a href="comment-page-1/#comment-96020">
		September 13, 2011 at 10:53 pm</a>
        <span class="comment-reply-link"><a rel="nofollow" class="comment-reply-login" href="../../blog/wp-login.php@redirect_to=http_253a_252f_252fwww.learncpp.com_252fcpp-tutorial_252f122-virtual-functions_252f">Log in to Reply</a></span>		 
		</div>
		<p>Hi,</p>
<p>why are we using &amp;rBase instead of rBase?</p>
<p>I have read the chapter on reference but still can&#8217;t figure it out.</p>
<p>Please do reply.</p>
		</div>
<ul class='children'>
		<li class="comment byuser comment-author-Tarindel bypostauthor even depth-2 clearfix" id="comment-96024">
		<div id="div-comment-96024" class="clearfix comment-container bypostauthor">
		<div class="comment-author vcard">
		<img alt='' src='../../../0.gravatar.com/avatar/2bcdbab687c32f64f9208e016cafe4cc@s=65&d=http_253a_252f_252f0.gravatar.com_252favatar_252fad516503a11cd5ca435acc9bb6523536_253fs_253d65&r=g' class='avatar avatar-65 photo' height='65' width='65' />		<span class="authorname"><a href='../../../www.tarindel.com/default.htm' rel='external nofollow' class='url'>Alex</a></span>
		</div>
				<div class="comment-meta commentmetadata">
		<a href="comment-page-1/#comment-96024">
		September 14, 2011 at 10:42 pm</a>
        <span class="comment-reply-link"><a rel="nofollow" class="comment-reply-login" href="../../blog/wp-login.php@redirect_to=http_253a_252f_252fwww.learncpp.com_252fcpp-tutorial_252f122-virtual-functions_252f">Log in to Reply</a></span>		 
		</div>
		<p>We use &#038;rbase because we want a reference to the base class, not a shallow copy of the base class.</p>
		</div>
<ul class='children'>
		<li class="comment byuser comment-author-ravigautam odd alt depth-3 clearfix" id="comment-96082">
		<div id="div-comment-96082" class="clearfix comment-container">
		<div class="comment-author vcard">
		<img alt='' src='../../../0.gravatar.com/avatar/013513186dcd0d15719f8a4a6a2e338e@s=65&d=http_253a_252f_252f0.gravatar.com_252favatar_252fad516503a11cd5ca435acc9bb6523536_253fs_253d65&r=g' class='avatar avatar-65 photo' height='65' width='65' />		<span class="authorname">Ravi Gautam</span>
		</div>
				<div class="comment-meta commentmetadata">
		<a href="comment-page-1/#comment-96082">
		September 27, 2011 at 2:22 am</a>
        <span class="comment-reply-link"><a rel="nofollow" class="comment-reply-login" href="../../blog/wp-login.php@redirect_to=http_253a_252f_252fwww.learncpp.com_252fcpp-tutorial_252f122-virtual-functions_252f">Log in to Reply</a></span>		 
		</div>
		<p>If I will use rBase, will it make program run slow?<br />
What other effects will it have?</p>
		</div>
</li>
</ul>
</li>
</ul>
</li>
	
	</ul>
	<!-- / Comment List -->

	



	
	<p>You must be <a href="../../blog/wp-login.php@redirect_to=http_253a_252f_252fwww.learncpp.com_252fcpp-tutorial_252f122-virtual-functions_252f">logged in</a> to post a comment.</p>

		

<div class="clearfix navigation-bottom">
		<div class="older">&laquo; <a href="../121-pointers-and-references-to-the-base-class-of-derived-objects/default.htm" rel="prev">12.1 &#8212; Pointers and references to the base class of derived objects</a> &nbsp;</div><div class="newer">&nbsp; <a href="../123-virtual-destructors-virtual-assignment-and-overriding-virtualization/default.htm" rel="next">12.3 &#8212; Virtual destructors, virtual assignment, and overriding virtualization</a> &raquo;</div></div>		
			



</td>
<!-- / Main Column -->


<!-- Right Sidebar -->
<td id="right">

	<div id="text-1" class="widget widget_text">			<div class="textwidget"><script type="text/javascript"><!--
google_ad_client = "pub-0588844875925051";
/* Wide Skyscraper Right Bar */
google_ad_slot = "0955932809";
google_ad_width = 160;
google_ad_height = 600;
//-->
</script>
<acript type="text/javascript"
src="../../../pagead2.googlesyndication.com/pagead/show_ads.js">
</script></div>
		</div><div id="archives-2" class="widget widget_archive"><div class="widget-title"><h3>Archives</h3></div>		<ul>
			<li><a href='../../2011/11/default.htm' title='November 2011'>November 2011</a></li>
	<li><a href='../../2011/10/default.htm' title='October 2011'>October 2011</a></li>
	<li><a href='../../2011/09/default.htm' title='September 2011'>September 2011</a></li>
	<li><a href='../../2010/10/default.htm' title='October 2010'>October 2010</a></li>
	<li><a href='../../2010/07/default.htm' title='July 2010'>July 2010</a></li>
	<li><a href='../../2009/10/default.htm' title='October 2009'>October 2009</a></li>
	<li><a href='../../2009/09/default.htm' title='September 2009'>September 2009</a></li>
	<li><a href='../../2009/03/default.htm' title='March 2009'>March 2009</a></li>
	<li><a href='../../2008/12/default.htm' title='December 2008'>December 2008</a></li>
	<li><a href='../../2008/10/default.htm' title='October 2008'>October 2008</a></li>
	<li><a href='../../2008/09/default.htm' title='September 2008'>September 2008</a></li>
	<li><a href='../../2008/08/default.htm' title='August 2008'>August 2008</a></li>
	<li><a href='../../2008/06/default.htm' title='June 2008'>June 2008</a></li>
	<li><a href='../../2008/05/default.htm' title='May 2008'>May 2008</a></li>
	<li><a href='../../2008/04/default.htm' title='April 2008'>April 2008</a></li>
	<li><a href='../../2008/03/default.htm' title='March 2008'>March 2008</a></li>
	<li><a href='../../2008/02/default.htm' title='February 2008'>February 2008</a></li>
	<li><a href='../../2008/01/default.htm' title='January 2008'>January 2008</a></li>
	<li><a href='../../2007/12/default.htm' title='December 2007'>December 2007</a></li>
	<li><a href='../../2007/11/default.htm' title='November 2007'>November 2007</a></li>
	<li><a href='../../2007/10/default.htm' title='October 2007'>October 2007</a></li>
	<li><a href='../../2007/09/default.htm' title='September 2007'>September 2007</a></li>
	<li><a href='../../2007/08/default.htm' title='August 2007'>August 2007</a></li>
	<li><a href='../../2007/07/default.htm' title='July 2007'>July 2007</a></li>
	<li><a href='../../2007/06/default.htm' title='June 2007'>June 2007</a></li>
	<li><a href='../../2007/05/default.htm' title='May 2007'>May 2007</a></li>
		</ul>
</div>
</td>
<!-- / Right Sidebar -->

</tr>
<!-- / Main Body -->
<tr>

<!-- Footer -->
<td id="footer" colspan="3">

    <p>
    Copyright &copy; 2011 <a href="../../default.htm">Learn C++</a> - All Rights Reserved<br />Powered by <a href="../../../wordpress.org/default.htm">WordPress</a> &amp; the <a href="../../../wordpress.bytesforall.com/default.htm" title="Customizable WordPress themes">Atahualpa Theme</a> by <a href="../../../www.bytesforall.com/default.htm" title="BFA Webdesign">BytesForAll</a>. Discuss on our <a href="../../../forum.bytesforall.com/default.htm" title="Atahualpa &amp; WordPress">WP Forum</a>    </p>
    
    
    <script type='text/javascript' src='../../blog/wp-content/plugins/syntaxhighlighter/syntaxhighlighter3/scripts/shcore.js@ver=3.0.83c'></script>
<script type='text/javascript' src='../../blog/wp-content/plugins/syntaxhighlighter/syntaxhighlighter3/scripts/shbrushcpp.js@ver=3.0.83c'></script>
<script type='text/javascript'>
	(function(){
		var corecss = document.createElement('link');
		var themecss = document.createElement('link');
		var corecssurl = "../../blog/wp-content/plugins/syntaxhighlighter/syntaxhighlighter3/styles/shcore.css@ver=3.0.83c.css";
		if ( corecss.setAttribute ) {
				corecss.setAttribute( "rel", "stylesheet" );
				corecss.setAttribute( "type", "text/css" );
				corecss.setAttribute( "href", corecssurl );
		} else {
				corecss.rel = "stylesheet";
				corecss.href = corecssurl;
		}
		document.getElementsByTagName("head")[0].insertBefore( corecss, document.getElementById("syntaxhighlighteranchor") );
		var themecssurl = "../../blog/wp-content/plugins/syntaxhighlighter/syntaxhighlighter3/styles/shthemedefault.css@ver=3.0.83c.css";
		if ( themecss.setAttribute ) {
				themecss.setAttribute( "rel", "stylesheet" );
				themecss.setAttribute( "type", "text/css" );
				themecss.setAttribute( "href", themecssurl );
		} else {
				themecss.rel = "stylesheet";
				themecss.href = themecssurl;
		}
		//document.getElementById("syntaxhighlighteranchor").appendChild(themecss);
		document.getElementsByTagName("head")[0].insertBefore( themecss, document.getElementById("syntaxhighlighteranchor") );
	})();
	SyntaxHighlighter.config.strings.expandSource = '+ expand source';
	SyntaxHighlighter.config.strings.help = '?';
	SyntaxHighlighter.config.strings.alert = 'SyntaxHighlighter\n\n';
	SyntaxHighlighter.config.strings.noBrush = 'Can\'t find brush for: ';
	SyntaxHighlighter.config.strings.brushNotHtmlScript = 'Brush wasn\'t configured for html-script option: ';
	SyntaxHighlighter.defaults['pad-line-numbers'] = false;
	SyntaxHighlighter.defaults['toolbar'] = false;
	SyntaxHighlighter.all();
</script>
<!--stats_footer_test--><script src="../../../stats.wordpress.com/e-201148.js" type="text/javascript"></script>
<script type="text/javascript">
st_go({blog:'3928254',v:'ext',post:'180'});
var load_cmc = function(){linktracker_init(3928254,180,2);};
if ( typeof addLoadEvent != 'undefined' ) addLoadEvent(load_cmc);
else load_cmc();
</script>

</td>
<!-- / Footer -->

</tr>
</table><!-- / layout -->
</div><!-- / container -->
</div><!-- / wrapper -->
</body>
</html>
<!-- Dynamic page generated in 0.489 seconds. -->
<!-- Cached page generated by WP-Super-Cache on 2011-12-02 06:36:28 -->
<!-- Compression = gzip -->