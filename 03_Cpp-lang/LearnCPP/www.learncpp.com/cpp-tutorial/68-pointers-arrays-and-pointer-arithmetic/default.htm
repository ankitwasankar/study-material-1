<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd"><meta http-equiv="Content-Type" content="text/html; charset=utf-8"><!-- saved from url=(0090)http://www.learncpp.com/cpp-tutorial/68-pointers-arrays-and-pointer-arithmetic/default.htm -->

<html xmlns="http://www.w3.org/1999/xhtml" dir="ltr" lang="en-US">
<head>
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8" />
<meta http-equiv="X-UA-Compatible" content="IE=EmulateIE7" />
<title>6.8 &#8212; Pointers, arrays, and pointer arithmetic &laquo; Learn C++</title>
<link rel="shortcut icon" href="../../blog/wp-content/themes/atahualpa353/images/favicon/learncpp.ico" /><link rel="canonical" href="default.htm" /><link rel="alternate" type="application/rss+xml" title="Learn C++ RSS Feed" href="../../feed/default.htm" />
<link rel="alternate" type="application/atom+xml" title="Learn C++ Atom Feed" href="../../feed/atom/default.htm" />
<link rel="pingback" href="http://www.learncpp.com/blog/xmlrpc.php" />
<link rel="alternate" type="application/rss+xml" title="Learn C++ &raquo; 6.8 &#8212; Pointers, arrays, and pointer arithmetic Comments Feed" href="feed/default.htm" />
<script type='text/javascript' src='../../blog/wp-includes/js/l10n.js@ver=20101110'></script>
<script type='text/javascript' src='../../blog/wp-includes/js/jquery/jquery.js@ver=1.6.1'></script>
<script type='text/javascript' src='../../blog/wp-includes/js/comment-reply.js@ver=20090102'></script>
<script type='text/javascript' src='../../blog/wp-content/plugins/google-analyticator/external-tracking.min.js@ver=6.2'></script>
<link rel="EditURI" type="application/rsd+xml" title="RSD" href="http://www.learncpp.com/blog/xmlrpc.php?rsd" />
<link rel="wlwmanifest" type="application/wlwmanifest+xml" href="../../blog/wp-includes/wlwmanifest.xml" /> 
<link rel='index' title='Learn C++' href='../../default.htm' />
<link rel='start' title='Welcome to LearnCpp.com!' href='../../site-news/this-is-a-news-test-post/default.htm' />
<link rel='prev' title='6.7 &#8212; Introduction to pointers' href='../67-introduction-to-pointers/default.htm' />
<link rel='next' title='6.9 &#8212; Dynamic memory allocation with new and delete' href='../69-dynamic-memory-allocation-with-new-and-delete/default.htm' />
<link rel='canonical' href='default.htm' />
<link rel='shortlink' href='../../../wp.me/pgtuw-1c' />
<meta name="ROBOTS" content="INDEX" />

<!-- Powered by AdSense-Deluxe WordPress Plugin v0.8 - http://www.acmetech.com/blog/adsense-deluxe/ -->
<!-- wpSolution Code -->
        <script type="text/javascript">
            function wpSolutionToggle(solution, link, showtext, hidetext) {
                if (solution.style.display != 'none') {
                    solution.style.display = 'none';
                    link.innerHTML = showtext;
                    link.className = 'solution_link_show';
                } else {
                    solution.style.display = 'block';
                    link.innerHTML = hidetext;
                    link.className = 'solution_link_hide';
                }
            }
          </script>
<style type="text/css">body{text-align:center;margin:0;padding:0;font-family:verdana,arial,sans-serif;font-size:13px;line-height:1.4;color:#000000;background:#ddd;padding-top:20px;padding-bottom:20px}a:link,a:visited,a:active{color:#365DA0;font-weight:bold;text-decoration:none;}a:hover{color:#365DA0;font-weight:bold;text-decoration:underline}ul,ol,dl,p,h1,h2,h3,h4,h5,h6{margin-top:10px;margin-bottom:10px;padding-top:0;padding-bottom:0;}ul ul,ul ol,ol ul,ol ol{margin-top:0;margin-bottom:0}code,pre{font-family:"Courier New",Courier,monospace;font-size:1em}pre{overflow:auto;word-wrap:normal;padding-bottom:1.5em;overflow-y:hidden;width:99%}abbr[title],acronym[title]{border-bottom:1px dotted}hr{display:block;height:2px;border:none;margin:0.5em auto;color:#cccccc;background-color:#cccccc}table{font-size:1em;}div.post,ul.commentlist li,ol.commentlist li{word-wrap:break-word;}pre,.wp_syntax{word-wrap:normal;}div#wrapper{text-align:center;margin-left:auto;margin-right:auto;display:block;width:98%}* html div#wrapper{<!--width:expression"98%");-->}div#container{padding:20px;background:#fff;box-shadow:0 0 15px #333;-moz-box-shadow:0 0 15px #333;padding-left:20px;padding-right:20px;width:auto;margin-left:auto;margin-right:auto;text-align:left;display:block}table#layout{font-size:100%;width:100%;table-layout:fixed}.colone{width:200px}.colone-inner{width:200px}.coltwo{width:100% }.colthree-inner{width:200px}.colthree{width:200px}td#header{width:auto;padding:0}table#logoarea,table#logoarea tr,table#logoarea td{margin:0;padding:0;background:none;border:0}table#logoarea{width:100%;border-spacing:0px}img.logo{display:block;margin:0 10px 0 0}td.logoarea-logo{width:1%}h1.blogtitle,h2.blogtitle{ display:block;margin:0;padding:0;letter-spacing:-1px;line-height:1.0em;font-size:200%;text-transform:uppercase;font-smooth:always}h1.blogtitle a:link,h1.blogtitle a:visited,h1.blogtitle a:active,h2.blogtitle a:link,h2.blogtitle a:visited,h2.blogtitle a:active{ text-decoration:none;color:#000000;font-weight:normal;font-smooth:always}h1.blogtitle a:hover,h2.blogtitle a:hover{ text-decoration:none;color:#AC161B;font-weight:normal}p.tagline{margin:0;padding:0;font-size:1.2em;font-weight:normal;color:#444}td.feed-icons{white-space:nowrap;}div.rss-box{height:1%;display:block;padding:10px 0 10px 10px;margin:0;width:280px}a.comments-icon{height:22px;line-height:22px;margin:0 5px 0 5px;padding-left:22px;display:block;text-decoration:none;float:right;white-space:nowrap}a.comments-icon:link,a.commentss-icon:active,a.comments-icon:visited{background:transparent url(../../blog/wp-content/themes/atahualpa353/images/comment-gray.png) no-repeat scroll center left}a.comments-icon:hover{background:transparent url(../../blog/wp-content/themes/atahualpa353/images/comment.png) no-repeat scroll center left}a.posts-icon{height:22px;line-height:22px;margin:0 5px 0 0;padding-left:20px;display:block;text-decoration:none;float:right;white-space:nowrap}a.posts-icon:link,a.posts-icon:active,a.posts-icon:visited{background:transparent url(../../blog/wp-content/themes/atahualpa353/images/rss-gray.png) no-repeat scroll center left}a.posts-icon:hover{background:transparent url(../../blog/wp-content/themes/atahualpa353/images/rss.png) no-repeat scroll center left}a.email-icon{height:22px;line-height:22px;margin:0 5px 0 5px;padding-left:24px;display:block;text-decoration:none;float:right;white-space:nowrap}a.email-icon:link,a.email-icon:active,a.email-icon:visited{background:transparent url(../../blog/wp-content/themes/atahualpa353/images/email-gray.png) no-repeat scroll center left}a.email-icon:hover{background:transparent url(../../blog/wp-content/themes/atahualpa353/images/email.png) no-repeat scroll center left}td.search-box{height:1%}div.searchbox{height:35px;border-bottom:0;width:200px;margin:0;padding:0}div.searchbox-form{margin:5px 10px 5px 10px}div.horbar1,div.horbar2{font-size:1px;clear:both;display:block;position:relative;padding:0;margin:0;width:100%;}div.horbar1{height:0px;background:#ffffff;border-top:dashed 1px #cccccc}div.horbar2{height:0px;background:#ffffff;border-bottom:dashed 1px #cccccc}div.header-image-container{position:relative;margin:0;padding:0;height:150px;}div.clickable{position:absolute;top:0;left:0;z-index:3;margin:0;padding:0;width:100%;height:150px;}a.divclick:link,a.divclick:visited,a.divclick:active,a.divclick:hover{width:100%;height:100%;display:block;text-decoration:none}td#left{vertical-align:top;padding-right:20px}td#left-inner{vertical-align:top;padding-right:10px}td#right{vertical-align:top;padding-left:20px}td#right-inner{vertical-align:top;padding-left:10px}td#middle{vertical-align:top;width:100%;padding:10px 15px}td#footer{width:auto;background-color:#f7f7f7;border-top:solid 4px #eee;padding:10px;text-align:center;color:#888;font-size:11px}td#footer a:link,td#footer a:visited,td#footer a:active{text-decoration:none;color:#777777;font-weight:normal}td#footer a:hover{text-decoration:none;color:#777777;font-weight:normal}div.widget{display:block;width:auto;font-size:12px;margin:0 0 10px 0;padding:10px;border:solid 4px #eee}div.widget-title{display:block;width:auto}div.widget-title h3,td#left h3.tw-widgettitle,td#right h3.tw-widgettitle,td#left ul.tw-nav-list,td#right ul.tw-nav-list{padding:0;margin:0;font-size:0.9em;text-align:center;font-weight:normal;text-transform:uppercase;letter-spacing:1px;color:#333;border-bottom:solid 1px #eee;padding-bottom:10px;margin-bottom:10px}div.widget ul,div.textwidget{display:block;width:auto}div.widget select{width:98%;margin-top:5px;}div.widget ul{list-style-type:none;margin:0;padding:0;width:auto}div.widget ul li{display:block;margin:2px 0 2px 0px;padding:0 0 0 0px;border-left:solid 0px #CCCCCC}div.widget ul li:hover,div.widget ul li.sfhover{display:block;width:auto;border-left:solid 0px #000000;}div.widget ul li ul li{margin:2px 0 2px 5px;padding:0 0 0 0px;border-left:solid 0px #CCCCCC;}div.widget ul li ul li:hover,div.widget ul li ul li.sfhover{border-left:solid 0px #000000;}div.widget ul li ul li ul li{margin:2px 0 2px 5px;padding:0 0 0 0px;border-left:solid 0px #CCCCCC;}div.widget ul li ul li ul li:hover,div.widget ul li ul li ul li.sfhover{border-left:solid 0px #000000;}div.widget td a:link,div.widget td a:visited,div.widget td a:active,div.widget ul li a:link,div.widget ul li a:visited,div.widget ul li a:active{text-decoration:none;font-weight:normal;color:#365DA0;font-weight:normal;}div.widget ul li ul li a:link,div.widget ul li ul li a:visited,div.widget ul li ul li a:active{color:#365DA0;font-weight:normal;}div.widget ul li ul li ul li a:link,div.widget ul li ul li ul li a:visited,div.widget ul li ul li ul li a:active{color:#365DA0;font-weight:normal;}div.widget ul li a:hover{color:#365DA0;}div.widget ul li ul li a:hover{color:#365DA0;}div.widget ul li ul li ul li a:hover{color:#365DA0;}div.widget ul li a:link,div.widget ul li a:visited,div.widget ul li a:active,div.widget ul li a:hover{display:inline}* html div.widget ul li a:link,* html div.widget ul li a:visited,* html div.widget ul li a:active,* html div.widget ul li a:hover{height:1%; } div.widget_pages ul li,div.widget_categories ul li{border-left:0 !important;padding:0 !important}div.widget_pages ul li a:link,div.widget_pages ul li a:visited,div.widget_pages ul li a:active,div.widget_categories ul li a:link,div.widget_categories ul li a:visited,div.widget_categories ul li a:active{padding:0 0 0 0px;border-left:solid 0px #CCCCCC}div.widget_pages ul li a:hover,div.widget_categories ul li a:hover{border-left:solid 0px #000000;}div.widget_pages ul li ul li a:link,div.widget_pages ul li ul li a:visited,div.widget_pages ul li ul li a:active,div.widget_categories ul li ul li a:link,div.widget_categories ul li ul li a:visited,div.widget_categories ul li ul li a:active{padding:0 0 0 0px;border-left:solid 0px #CCCCCC}div.widget_pages ul li ul li a:hover,div.widget_categories ul li ul li a:hover{border-left:solid 0px #000000;}div.widget_pages ul li ul li ul li a:link,div.widget_pages ul li ul li ul li a:visited,div.widget_pages ul li ul li ul li a:active,div.widget_categories ul li ul li ul li a:link,div.widget_categories ul li ul li ul li a:visited,div.widget_categories ul li ul li ul li a:active{padding:0 0 0 0px;border-left:solid 0px #CCCCCC}div.widget_pages ul li ul li ul li a:hover,div.widget_categories ul li ul li ul li a:hover{border-left:solid 0px #000000;}div.widget_pages ul li a:link,div.widget_pages ul li a:active,div.widget_pages ul li a:visited,div.widget_pages ul li a:hover{display:block !important}div.widget_categories ul li a:link,div.widget_categories ul li a:active,div.widget_categories ul li a:visited,div.widget_categories ul li a:hover{display:inline !important}table.subscribe{width:100%}table.subscribe td.email-text{padding:0 0 5px 0;vertical-align:top}table.subscribe td.email-field{padding:0;width:100%}table.subscribe td.email-button{padding:0 0 0 5px}table.subscribe td.post-text{padding:7px 0 0 0;vertical-align:top}table.subscribe td.comment-text{padding:7px 0 0 0;vertical-align:top}div.post,div.page{display:block;margin:0 0 30px 0;border-top:solid 4px #eee;padding-top:20px}div.sticky{background:#eee url('../../blog/wp-content/themes/atahualpa353/images/sticky.gif') 99% 5% no-repeat;border:dashed 1px #cccccc;padding:10px}div.post-kicker{margin:0 0 5px 0}div.post-kicker a:link,div.post-kicker a:visited,div.post-kicker a:active{color:#999;text-decoration:none;text-transform:uppercase;letter-spacing:1px}div.post-kicker a:hover{color:#cc0000}div.post-headline{}div.post-headline h1,div.post-headline h2{ margin:0; padding:0;padding:0;margin:0;font-size:1.7em}div.post-headline h2 a:link,div.post-headline h2 a:visited,div.post-headline h2 a:active,div.post-headline h1 a:link,div.post-headline h1 a:visited,div.post-headline h1 a:active{}div.post-headline h2 a:hover,div.post-headline h1 a:hover{}div.post-byline{margin:5px 0 10px 0;color:#999;text-transform:uppercase;letter-spacing:1px;font-size:11px}div.post-byline a:link,div.post-byline a:visited,div.post-byline a:active{}div.post-byline a:hover{}div.post-bodycopy{}div.post-bodycopy p{margin:1em 0;padding:0;display:block}div.post-pagination{}div.post-footer{clear:both;display:block;color:#999;text-transform:uppercase;letter-spacing:1px;font-size:11px}div.post-footer a:link,div.post-footer a:visited,div.post-footer a:active{color:#999;font-weight:normal;text-decoration:none}div.post-footer a:hover{color:#333;font-weight:normal;text-decoration:underline}div.post-kicker img,div.post-byline img,div.post-footer img{border:0;padding:0;margin:0 0 -1px 0;background:none}span.post-ratings{display:inline-block;width:auto;white-space:nowrap}div.navigation-top{border-top:solid 4px #eee;padding:8px 0}div.navigation-middle{margin:10px 0 20px 0;padding:8px 0;border-top:solid 4px #eee;border-bottom:solid 4px #eee}div.navigation-bottom{margin:20px 0 0 0;padding:10px 0 0 0;border-top:solid 4px #eee}div.navigation-comments-above{margin:0 0 10px 0;padding:5px 0 5px 0}div.navigation-comments-below{margin:0 0 10px 0;padding:5px 0 5px 0}div.older{float:left;width:48%;text-align:left;margin:0;padding:0}div.newer{float:right;width:48%;text-align:right;margin:0;padding:0;}div.older-home{float:left;width:44%;text-align:left;margin:0;padding:0}div.newer-home{float:right;width:44%;text-align:right;margin:0;padding:0;}div.home{float:left;width:8%;text-align:center;margin:0;padding:0}form,.feedburner-email-form{margin:0;padding:0;}fieldset{border:1px solid #cccccc;width:auto;padding:0.35em 0.625em 0.75em;display:block;}legend{color:#000000;background:#f4f4f4;border:1px solid #cccccc;padding:2px 6px;margin-bottom:15px;}form p{margin:5px 0 0 0;padding:0;}div.xhtml-tags p{margin:0}label{margin-right:0.5em;font-family:arial;cursor:pointer;}input.text,input.textbox,input.password,input.file,input.TextField,textarea{padding:3px;color:#000000;border-top:solid 1px #333333;border-left:solid 1px #333333;border-right:solid 1px #999999;border-bottom:solid 1px #cccccc;background:url(../../blog/wp-content/themes/atahualpa353/images/inputbackgr.gif) top left no-repeat}textarea{width:96%;}input.inputblur{color:#777777;width:95%}input.inputfocus{color:#000000;width:95%}input.highlight,textarea.highlight{background:#e8eff7;border-color:#37699f}.button,.Button{padding:0 2px;height:24px;line-height:16px;background-color:#777777;color:#ffffff;border:solid 2px #555555;font-weight:bold}.buttonhover{padding:0 2px;cursor:pointer;background-color:#6b9c6b;color:#ffffff;border:solid 2px #496d49}form#commentform input#submit{ padding:0 .25em; width:0; overflow:visible}form#commentform input#submit[class]{width:auto}form#commentform input#submit{padding:4px 10px 4px 10px;font-size:1.2em;line-height:1.5em;height:36px}table.searchform{width:100%}table.searchform td.searchfield{padding:0;width:100%}table.searchform td.searchbutton{padding:0 0 0 5px}table.searchform td.searchbutton input{padding:0 0 0 5px}blockquote{height:1%;display:block;clear:both;color:#555555;padding:1em 1em;background:#f4f4f4;border:solid 1px #e1e1e1}blockquote blockquote{height:1%;display:block;clear:both;color:#444444;padding:1em 1em;background:#e1e1e1;border:solid 1px #d3d3d3}div.post table{border-collapse:collapse;margin:10px 0}div.post table caption{width:auto;margin:0 auto;background:#eeeeee;border:#999999;padding:4px 8px;color:#666666}div.post table th{background:#888888;color:#ffffff;font-weight:bold;font-size:90%;padding:4px 8px;border:solid 1px #ffffff;text-align:left}div.post table td{padding:4px 8px;background-color:#ffffff;border-bottom:1px solid #dddddd;text-align:left}div.post table tfoot td{}div.post table tr.alt td{background:#f4f4f4}div.post table tr.over td{background:#e2e2e2}#calendar_wrap{padding:0;border:none}table#wp-calendar{width:100%;font-size:90%;border-collapse:collapse;background-color:#ffffff;margin:0 auto}table#wp-calendar caption{width:auto;background:#eeeeee;border:none;;padding:3px;margin:0 auto;font-size:1em}table#wp-calendar th{border:solid 1px #eeeeee;background-color:#999999;color:#ffffff;font-weight:bold;padding:2px;text-align:center}table#wp-calendar td{padding:0;line-height:18px;background-color:#ffffff;border:1px solid #dddddd;text-align:center}table#wp-calendar tfoot td{border:solid 1px #eeeeee;background-color:#eeeeee}table#wp-calendar td a{display:block;background-color:#eeeeee;width:100%;height:100%;padding:0}div#respond{margin:25px 0;padding:25px;background:#eee;-moz-border-radius:8px;-khtml-border-radius:8px;-webkit-border-radius:8px;border-radius:8px;}p.thesetags{margin:10px 0}h3.reply{margin:0;padding:0 0 10px 0}ol.commentlist{margin:15px 0 25px 0;list-style-type:none;padding:0;display:block;border-top:dotted 1px #cccccc}ol.commentlist li{padding:15px 10px;display:block;height:1%;margin:0;background-color:#FFFFFF;border-bottom:dotted 1px #cccccc}ol.commentlist li.alt{display:block;height:1%;background-color:#EEEEEE;border-bottom:dotted 1px #cccccc}ol.commentlist li.authorcomment{display:block;height:1%;background-color:#D8D8FA}ol.commentlist span.authorname{font-weight:bold;font-size:110%}ol.commentlist span.commentdate{color:#666666;font-size:90%;margin-bottom:5px;display:block}ol.commentlist span.editcomment{display:block}ol.commentlist li p{margin:2px 0 5px 0}div.comment-number{float:right;font-size:2em;line-height:2em;font-family:georgia,serif;font-weight:bold;color:#ddd;margin:-10px 0 0 0;position:relative;height:1%}div.comment-number a:link,div.comment-number a:visited,div.comment-number a:active{color:#ccc}textarea#comment{width:98%;margin:10px 0;display:block}ul.commentlist{margin:15px 0 15px 0;list-style-type:none;padding:0;display:block;border-top:dotted 1px #cccccc}ul.commentlist ul{margin:0;border:none;list-style-type:none;padding:0}ul.commentlist li{padding:0; margin:0;display:block;clear:both;height:1%;}ul.commentlist ul.children li{ margin-left:30px}ul.commentlist div.comment-container{padding:10px;margin:0}ul.children div.comment-container{background-color:transparent;border:dotted 1px #ccc;padding:10px;margin:0 10px 8px 0; -moz-border-radius:5px; -khtml-border-radius:5px; -webkit-border-radius:5px; border-radius:5px}ul.children div.bypostauthor{}ul.commentlist li.thread-even{background-color:#FFFFFF;border-bottom:dotted 1px #cccccc}ul.commentlist li.thread-odd{background-color:#EEEEEE;border-bottom:dotted 1px #cccccc}ul.commentlist div.bypostauthor{background-color:#D8D8FA}ul.children div.bypostauthor{border:dotted 1px #BFBCFB}ul.commentlist span.authorname{font-size:110%}div.comment-meta a:link,div.comment-meta a:visited,div.comment-meta a:active,div.comment-meta a:hover{font-weight:normal}div#cancel-comment-reply{margin:-5px 0 10px 0}div.comment-number{float:right;font-size:2em;line-height:2em;font-family:georgia,serif;font-weight:bold;color:#ddd;margin:-10px 0 0 0;position:relative;height:1%}div.comment-number a:link,div.comment-number a:visited,div.comment-number a:active{color:#ccc}.page-numbers{padding:2px 6px;border:solid 1px #000000;-moz-border-radius:6px;-khtml-border-radius:6px;-webkit-border-radius:6px;border-radius:6px}span.current{background:#ddd}a.prev,a.next{border:none}a.page-numbers:link,a.page-numbers:visited,a.page-numbers:active{text-decoration:none;color:#365DA0;border-color:#365DA0}a.page-numbers:hover{text-decoration:none;color:#365DA0;border-color:#365DA0}div.xhtml-tags{display:none}abbr em{border:none !important;border-top:dashed 1px #aaa !important;display:-moz-inline-box !important;display:inline-block !important;background:url(../../blog/wp-content/themes/atahualpa353/images/commentluv.gif) 0% 90% no-repeat;margin-top:8px;padding:5px 5px 2px 20px !important;font-style:normal}p.subscribe-to-comments{margin-bottom:10px}div#gsHeader{display:none;}div.g2_column{margin:0 !important;width:100% !important;font-size:1.2em}div#gsNavBar{border-top-width:0 !important}p.giDescription{font-size:1.2em;line-height:1 !important}p.giTitle{margin:0.3em 0 !important;font-size:1em;font-weight:normal;color:#666}div#wp-email img{border:0;padding:0}div#wp-email input,div#wp-email textarea{margin-top:5px;margin-bottom:2px}div#wp-email p{margin-bottom:10px}input#wp-email-submit{ padding:0; font-size:30px; height:50px; line-height:50px; overflow:visible;}img.WP-EmailIcon{ vertical-align:text-bottom !important}.tw-accordion .tw-widgettitle,.tw-accordion .tw-widgettitle:hover,.tw-accordion .tw-hovered,.tw-accordion .selected,.tw-accordion .selected:hover{ background:transparent !important; background-image:none !important}.tw-accordion .tw-widgettitle span{ padding-left:0 !important}.tw-accordion h3.tw-widgettitle{border-bottom:solid 1px #ccc}.tw-accordion h3.selected{border-bottom:none}td#left .without_title,td#right .without_title{ margin-top:0;margin-bottom:0}ul.tw-nav-list{border-bottom:solid 1px #999;display:block;margin-bottom:5px !important}td#left ul.tw-nav-list li,td#right ul.tw-nav-list li{padding:0 0 1px 0;margin:0 0 -1px 5px; border:solid 1px #ccc;border-bottom:none;-moz-border-radius:5px;-khtml-border-radius:5px;-webkit-border-radius:5px;border-radius:5px;-moz-border-radius-bottomright:0;-moz-border-radius-bottomleft:0;-webkit-border-bottom-right-radius:0;-webkit-border-bottom-left-radius:0;border-bottom-right-radius:0;border-bottom-left-radius:0;background:#eee}td#left ul.tw-nav-list li.ui-tabs-selected,td#right ul.tw-nav-list li.ui-tabs-selected{ background:none;border:solid 1px #999;border-bottom:solid 1px #fff !important}ul.tw-nav-list li a:link,ul.tw-nav-list li a:visited,ul.tw-nav-list li a:active,ul.tw-nav-list li a:hover{padding:0 8px !important;background:none;border-left:none !important;outline:none}td#left ul.tw-nav-list li.ui-tabs-selected a,td#left li.ui-tabs-selected a:hover,td#right ul.tw-nav-list li.ui-tabs-selected a,td#right li.ui-tabs-selected a:hover{ color:#000000; text-decoration:none;font-weight:bold;background:none !important;outline:none}td#left .ui-tabs-panel,td#right .ui-tabs-panel{ margin:0; padding:0}img{border:0}#dbem-location-map img{ background:none !important}.post img{padding:5px;border:solid 1px #dddddd;background-color:#f3f3f3;-moz-border-radius:3px;-khtml-border-radius:3px;-webkit-border-radius:3px;border-radius:3px;}.post img.size-full{max-width:96%;width:auto 100%;margin:5px 0 5px 0}div.post img[class~=size-full]{height:auto;}.post img.alignleft{float:left;margin:10px 10px 5px 0;}.post img.alignright{float:right;margin:10px 0 5px 10px;}.post img.aligncenter{display:block;margin:10px auto}.aligncenter,div.aligncenter{ display:block; margin-left:auto; margin-right:auto}.alignleft,div.alignleft{float:left;margin:10px 10px 5px 0}.alignright,div.alignright{ float:right; margin:10px 0 5px 10px}div.archives-page img{border:0;padding:0;background:none;margin-bottom:0;vertical-align:-10%}.wp-caption{max-width:96%;width:auto 100%;height:auto;display:block;border:1px solid #dddddd;text-align:center;background-color:#f3f3f3;padding-top:4px;margin:10px 0 0 0;-moz-border-radius:3px;-khtml-border-radius:3px;-webkit-border-radius:3px;border-radius:3px;}* html .wp-caption{height:100%;}.wp-caption img{ margin:0 !important; padding:0 !important; border:0 none !important}.wp-caption p.wp-caption-text{font-size:0.8em;line-height:13px;padding:2px 4px 5px;margin:0;color:#666666}img.wp-post-image{float:left;border:0;padding:0;background:none;margin:0 10px 5px 0}img.wp-smiley{ float:none;border:none !important;margin:0 1px -1px 1px;padding:0 !important;background:none !important}img.avatar{float:left;display:block;margin:0 8px 1px 0;padding:3px;border:solid 1px #ddd;background-color:#f3f3f3;-moz-border-radius:3px;-khtml-border-radius:3px;-webkit-border-radius:3px;border-radius:3px;}#comment_quicktags{text-align:left;padding:10px 0 2px 0;display:block}#comment_quicktags input.ed_button{background:#f4f4f4;border:2px solid #cccccc;color:#444444;margin:2px 4px 2px 0;width:auto;padding:0 4px;height:24px;line-height:16px}#comment_quicktags input.ed_button_hover{background:#dddddd;border:2px solid #666666;color:#000000;margin:2px 4px 2px 0;width:auto;padding:0 4px;height:24px;line-height:16px;cursor:pointer}#comment_quicktags #ed_strong{font-weight:bold}#comment_quicktags #ed_em{font-style:italic}@media print{body{background:white;color:black;margin:0;font-size:10pt !important;font-family:arial,sans-serif;}div.post-footer{line-height:normal !important;color:#555 !important;font-size:9pt !important}a:link,a:visited,a:active,a:hover{text-decoration:underline !important;color:#000}h2{color:#000;font-size:14pt !important;font-weight:normal !important}h3{color:#000;font-size:12pt !important;}#header,#footer,.colone,.colthree,.navigation,.navigation-top,.navigation-middle,.navigation-bottom,.wp-pagenavi-navigation,#comment,#respond,.remove-for-print{display:none}td#left,td#right,td#left-inner,td#right-inner{width:0}td#middle{width:100%}*:lang(en) td#left{ display:none}*:lang(en) td#right{ display:none}*:lang(en) td#left-inner{ display:none}*:lang(en) td#right-inner{ display:none}td#left:empty{ display:none}td#right:empty{ display:none}td#left-inner:empty{ display:none}td#right-inner:empty{ display:none}}ul.rMenu,ul.rMenu ul,ul.rMenu li,ul.rMenu a{display:block;margin:0;padding:0}ul.rMenu,ul.rMenu li,ul.rMenu ul{list-style:none}ul.rMenu ul{display:none}ul.rMenu li{position:relative;z-index:1}ul.rMenu li:hover{z-index:999}ul.rMenu li:hover > ul{display:block;position:absolute}ul.rMenu li:hover{background-position:0 0} ul.rMenu-hor li{float:left;width:auto}ul.rMenu-hRight li{float:right}ul.rMenu-ver li{float:none}.clearfix:after{ content:".";display:block;height:0;clear:both;visibility:hidden}.clearfix{min-width:0;display:inline-block;display:block}* html .clearfix{height:1%;}.clearboth{clear:both;height:1%;font-size:1%;line-height:1%;display:block;padding:0;margin:0}td#header{padding-bottom:15px;}td#middle{padding:0}div.searchbox-form{margin:5px 0 15px 5px}div#menu1 ul.rMenu{background:transparent;border:none}div#imagecontainer{border-top:solid 0px #333;border-bottom:solid 5px #333;}div.widget ul li{padding:1px 5px 1px 12px !important;background:url('../../blog/wp-content/themes/atahualpa353/images/bullets/round-gray.gif') no-repeat 0 7px}ul.rMenu-hor ul,ul.rMenu-hRight ul{margin-top:0px;}ul.rMenu-hor li{margin-bottom:0px;margin-top:0px;margin-left:0px;}ul.rMenu-hor{padding-left:0px;}ul.rMenu-ver li{margin-top:0xp;}div#menu1 ul.rMenu li a,div#menu2 ul.rMenu li a{padding:6px 10px}div#menu1 ul.rMenu li{margin-right:5px}div#menu1 ul.rMenu li li{margin-right:0}div#menu1 ul.rMenu li,div#menu1 ul.rMenu li a{-webkit-border-top-left-radius:5px;-webkit-border-top-right-radius:5px;-moz-border-radius-topleft:5px;-moz-border-radius-topright:5px;border-top-left-radius:5px;border-top-right-radius:5px}div#menu1 ul.rMenu li li,div#menu1 ul.rMenu li li a{-webkit-border-top-left-radius:0;-webkit-border-top-right-radius:0;-moz-border-radius-topleft:0;-moz-border-radius-topright:0;border-top-left-radius:0;border-top-right-radius:0}div#menu2{ border:dashed 1px #ffffff}</style>
<script type="text/javascript">
//<![CDATA[




/* JQUERY */
jQuery(document).ready(function(){  


	/* jQuery('ul#rmenu').superfish(); */
	/* jQuery('ul#rmenu').superfish().find('ul').bgIframe({opacity:false}); */
 
	/* For IE6 */
	if (jQuery.browser.msie && /MSIE 6\.0/i.test(window.navigator.userAgent) && !/MSIE 7\.0/i.test(window.navigator.userAgent) && !/MSIE 8\.0/i.test(window.navigator.userAgent)) {

		/* Max-width for images in IE6 */		
		var centerwidth = jQuery("td#middle").width(); 
		
		/* Images without caption */
		jQuery(".post img").each(function() { 
			var maxwidth = centerwidth - 10 + 'px';
			var imgwidth = jQuery(this).width(); 
			var imgheight = jQuery(this).height(); 
			var newimgheight = (centerwidth / imgwidth * imgheight) + 'px';	
			if (imgwidth > centerwidth) { 
				jQuery(this).css({width: maxwidth}); 
				jQuery(this).css({height: newimgheight}); 
			}
		});
		
		/* Images with caption */
		jQuery("div.wp-caption").each(function() { 
			var captionwidth = jQuery(this).width(); 
			var maxcaptionwidth = centerwidth + 'px';
			var captionheight = jQuery(this).height();
			var captionimgwidth =  jQuery("div.wp-caption img").width();
			var captionimgheight =  jQuery("div.wp-caption img").height();
			if (captionwidth > centerwidth) { 
				jQuery(this).css({width: maxcaptionwidth}); 
				var newcaptionheight = (centerwidth / captionwidth * captionheight) + 'px';
				var newcaptionimgheight = (centerwidth / captionimgwidth * captionimgheight) + 'px';
				jQuery(this).css({height: newcaptionheight}); 
				jQuery("div.wp-caption img").css({height: newcaptionimgheight}); 
				}
		});
		
		/* sfhover for LI:HOVER support in IE6: */
		jQuery("ul li").
			hover( function() {
					jQuery(this).addClass("sfhover")
				}, 
				function() {
					jQuery(this).removeClass("sfhover")
				} 
			); 

	/* End IE6 */
	}
	
	jQuery(".post table tr").
		mouseover(function() {
			jQuery(this).addClass("over");
		}).
		mouseout(function() {
			jQuery(this).removeClass("over");
		});

	
	jQuery(".post table tr:even").
		addClass("alt");

	
	jQuery("input.text, input.TextField, input.file, input.password, textarea").
		focus(function () {  
			jQuery(this).addClass("highlight"); 
		}).
		blur(function () { 
			jQuery(this).removeClass("highlight"); 
		})
	
	jQuery("input.inputblur").
		focus(function () {  
			jQuery(this).addClass("inputfocus"); 
		}).
		blur(function () { 
			jQuery(this).removeClass("inputfocus"); 
		})

		

	
	jQuery("input.button, input.Button").
		mouseover(function() {
			jQuery(this).addClass("buttonhover");
		}).
		mouseout(function() {
			jQuery(this).removeClass("buttonhover");
		});

	/* toggle "you can use these xhtml tags" */
	jQuery("a.xhtmltags").
		click(function(){ 
			jQuery("div.xhtml-tags").slideToggle(300); 
		});

	/* For the Tabbed Widgets plugin: */
	jQuery("ul.tw-nav-list").
		addClass("clearfix");

		
	
});

//]]>
</script>
<meta id="syntaxhighlighteranchor" name="syntaxhighlighter-version" content="3.1.3" />
<!-- Google Analytics Tracking by Google Analyticator 6.2: http://ronaldheft.com/code/analyticator/ -->
<script type="text/javascript">
	var analyticsFileTypes = [''];
	var analyticsEventTracking = 'enabled';
</script>
<script type="text/javascript">
	var _gaq = _gaq || [];
	_gaq.push(['_setAccount', 'UA-2173612-1']);
	_gaq.push(['_trackPageview']);
	_gaq.push(['_trackPageLoadTime']);

	(function() {
		var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true;
		ga.src = ('https:' == document.location.protocol ? '../../../https@ssl_2f\default.htm' : '../../../www/default.htm') + '.google-analytics.com/ga.js';
		var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s);
	})();
</script>
<!--[if IE 6]>
<script type="text/javascript" src="../../blog/wp-content/themes/atahualpa353/js/dd_roundies.js"></script>
<script type="text/javascript">DD_roundies.addRule('a.posts-icon,%20a.comments-icon,%20a.email-icon,%20img.logo');</script>
<![endif]-->
</head>
<body class="single single-post postid-100 single-format-standard">
<div id="wrapper">
<div id="container">
<table id="layout" border="0" cellspacing="0" cellpadding="0">
<colgroup>
<col class="colone" /><col class="coltwo" />
<col class="colthree" /></colgroup> 
	<tr>

		<!-- Header -->
		<td id="header" colspan="3">

		<div id="imagecontainer" class="header-image-container" style="background: url('../../blog/wp-content/themes/atahualpa353/images/header/learncppheader3_800.jpg') top center no-repeat;"><div class="clickable"><a class="divclick" title="Learn C++" href ="../../default.htm">&nbsp;</a></div></div>
		</td>
		<!-- / Header -->

	</tr>

	<!-- Main Body -->	
	<tr id="bodyrow">

				<!-- Left Sidebar -->
		<td id="left">

			<div id="text-5" class="widget widget_text"><div class="widget-title"><h3>Navigation</h3></div>			<div class="textwidget"><ul>
<li><a href="../../default.htm"><big><big>Main Page</big></big></a>
<li><a href="
../../featured-articles/default.htm"><big><big>Featured Articles</big></big></a>
</ul>
<hr>
<ul>
<li><a href="../../about/default.htm">About / Contact</a>
<li><a href="../../about/#Support">Support LearnCpp</a>
</ul>
<hr>

<!-- SiteSearch Google -->
<form method="get" action="http://www.google.com/custom" target="google_window">
<table border="0" bgcolor="#ffffff">
<tr><td nowrap="nowrap" valign="top" align="left">

<!--<br/>-->
<input type="hidden" name="domains" value="LearnCpp.com"></input>
<label for="sbi" style="display: none">Enter your search terms</label>
<input type="text" name="q" size="20" maxlength="255" value="" id="sbi"></input>
</td></tr>
<tr>
<td nowrap="nowrap">
<table>
<tr>
<td>
<input type="radio" name="sitesearch" value="" checked id="ss0"></input>
<label for="ss0" title="Search the Web"><font size="-1" color="#000000">Web</font></label></td>
<td>
<input type="radio" name="sitesearch" value="www.LearnCpp.com" id="ss1"></input>
<label for="ss1" title="Search LearnCpp.com"><font size="-1" color="#000000">LearnCpp</font></label></td>
</tr>
</table>
<label for="sbb" style="display: none">Submit search form</label>
<input type="submit" name="sa" value="Google Search" id="sbb"></input>
<input type="hidden" name="client" value="pub-0588844875925051"></input>
<input type="hidden" name="forid" value="1"></input>
<input type="hidden" name="channel" value="7774154974"></input>
<input type="hidden" name="ie" value="ISO-8859-1"></input>
<input type="hidden" name="oe" value="ISO-8859-1"></input>
<input type="hidden" name="safe" value="active"></input>
<input type="hidden" name="flav" value="0000"></input>
<input type="hidden" name="sig" value="q6fLrjobHHgL00cW"></input>
<input type="hidden" name="cof" value="GALT:#008000;GL:1;DIV:#336699;VLC:663399;AH:center;BGC:FFFFFF;LBGC:336699;ALC:0000FF;LC:0000FF;T:000000;GFNT:0000FF;GIMP:0000FF;FORID:1"></input>
<input type="hidden" name="hl" value="en"></input>
</td></tr></table>
</form>
<!-- SiteSearch Google --></div>
		</div><div id="meta-2" class="widget widget_meta"><div class="widget-title"><h3>Meta</h3></div>			<ul>
			<li><a href="../../blog/wp-login.php@action=register.htm">Register</a></li>			<li><a href="../../blog/wp-login.php.htm">Log in</a></li>
			<li><a href="../../feed/default.htm" title="Syndicate this site using RSS 2.0">Entries <abbr title="Really Simple Syndication">RSS</abbr></a></li>
			<li><a href="../../comments/feed/default.htm" title="The latest comments to all posts in RSS">Comments <abbr title="Really Simple Syndication">RSS</abbr></a></li>
			<li><a href="../../../wordpress.org/default.htm" title="Powered by WordPress, state-of-the-art semantic personal publishing platform.">WordPress.org</a></li>
						</ul>
</div>		<div id="recent-posts-2" class="widget widget_recent_entries">		<div class="widget-title"><h3>Recent Posts</h3></div>		<ul>
				<li><a href="../b-6-new-virtual-function-controls-override-final-default-and-delete/default.htm" title="B.6 &#8212; New virtual function controls: override, final, default, and delete">B.6 &#8212; New virtual function controls: override, final, default, and delete</a></li>
				<li><a href="../b-5-delegating-constructors/default.htm" title="B.5 &#8212; Delegating constructors">B.5 &#8212; Delegating constructors</a></li>
				<li><a href="../b-4-initializer-lists-and-uniform-initialization/default.htm" title="B.4 &#8212; Initializer lists and uniform initialization">B.4 &#8212; Initializer lists and uniform initialization</a></li>
				<li><a href="../b-3-range-based-for-statements-and-static_assert/default.htm" title="B.3 &#8212; Range-based for statements and static_assert">B.3 &#8212; Range-based for statements and static_assert</a></li>
				<li><a href="../b-2-long-long-auto-decltype-nullptr-and-enum-classes/default.htm" title="B.2 &#8212; Long long, auto, decltype, nullptr, and enum classes">B.2 &#8212; Long long, auto, decltype, nullptr, and enum classes</a></li>
				<li><a href="../b-1-introduction-to-c11/default.htm" title="B.1 &#8212; Introduction to C++11">B.1 &#8212; Introduction to C++11</a></li>
				<li><a href="../a-6-fixed-width-integers/default.htm" title="A.6 &#8212; Fixed-width integers">A.6 &#8212; Fixed-width integers</a></li>
				<li><a href="../../site-news/site-software-updated-1123/default.htm" title="Site software updated 11/23">Site software updated 11/23</a></li>
				<li><a href="../../site-news/this-is-why-we-cant-have-nice-things-part-2/default.htm" title="This is why we can&#8217;t have nice things, part 2">This is why we can&#8217;t have nice things, part 2</a></li>
				<li><a href="../../site-news/this-is-why-we-cant-have-nice-things/default.htm" title="This is why we can&#8217;t have nice things">This is why we can&#8217;t have nice things</a></li>
				</ul>
		</div><div id="categories-1" class="widget widget_categories"><div class="widget-title"><h3>Category Indexes</h3></div>		<ul>
	<li class="cat-item cat-item-11"><a href="../../category/breaktime/default.htm" title="Games and fun activities">Break Time</a> (3)
</li>
	<li class="cat-item cat-item-6"><a href="../../category/cpp-programming/default.htm" title="View all posts filed under C++ Programming">C++ Programming</a> (11)
</li>
	<li class="cat-item cat-item-3"><a href="../../category/cpp-tutorial/default.htm" title="View all posts filed under C++ Tutorial">C++ Tutorial</a> (163)
</li>
	<li class="cat-item cat-item-10"><a href="../../category/computer-game-programming/default.htm" title="View all posts filed under Game Programming">Game Programming</a> (4)
</li>
	<li class="cat-item cat-item-14"><a href="../../category/gaming/default.htm" title="View all posts filed under Gaming">Gaming</a> (1)
</li>
	<li class="cat-item cat-item-13"><a href="../../category/general-programming/default.htm" title="View all posts filed under General Programming">General Programming</a> (3)
</li>
	<li class="cat-item cat-item-4"><a href="../../category/site-news/default.htm" title="View all posts filed under Site News">Site News</a> (23)
</li>
	<li class="cat-item cat-item-5"><a href="../../category/wordpress/default.htm" title="View all posts filed under WordPress">WordPress</a> (8)
</li>
		</ul>
</div>
		</td>
		<!-- / Left Sidebar -->
		
				

		<!-- Main Column -->
		<td id="middle">

	

		
		 

		<div class="clearfix navigation-top">
		<div class="older">&laquo; <a href="../67-introduction-to-pointers/default.htm" rel="prev">6.7 &#8212; Introduction to pointers</a> &nbsp;</div><div class="newer">&nbsp; <a href="../69-dynamic-memory-allocation-with-new-and-delete/default.htm" rel="next">6.9 &#8212; Dynamic memory allocation with new and delete</a> &raquo;</div></div>
<div class="post-100 post type-post status-publish format-standard hentry category-cpp-tutorial" id="post-100">


<div class="post-headline">		<h1>6.8 &#8212; Pointers, arrays, and pointer arithmetic</h1>
		</div>
<div class="post-byline">By Alex, on July 11th, 2007</div>
<div class="post-bodycopy clearfix"><div style='float:left;padding:8px 8px 8px 0px;'><script type="text/javascript"><!--
google_ad_client = "ca-pub-0588844875925051";
/* Content Page Top Large */
google_ad_slot = "7945645163";
google_ad_width = 336;
google_ad_height = 280;
//-->
</script>
<acript type="text/javascript"
src="../../../pagead2.googlesyndication.com/pagead/show_ads.js">
</script></div><p><strong>Pointers and arrays</strong><br />
Pointers and arrays are intricately linked in the C language.  In previous lessons, you learned how to declare an array of variables:</p>
<pre class="brush: cpp; title: ; notranslate" title="">
int anArray[5]; // declare array of 5 integers
</pre>
<p>anArray is actually a pointer that points to the first element of the array!  Because the array variable is a pointer, you can dereference it, which returns array element 0:</p>
<pre class="brush: cpp; title: ; notranslate" title="">
int anArray[5] = { 9, 7, 5, 3, 1 };

// dereferencing an array returns the first element (element 0)
cout &lt;&lt; *anArray; // prints 9!

char szName[] = &quot;Jason&quot;; // C-style string (also an array)
cout &lt;&lt; *szName; // prints 'J'
</pre>
<p><strong>Pointer arithmetic</strong></p>
<p>The C language allows you to perform integer addition or subtraction operations on pointers.  If pnPtr points to an integer, <code>pnPtr + 1</code> is the address of the next integer in memory after pnPtr.  <code>pnPtr - 1</code> is the address of the previous integer before pnPtr.</p>
<p>Note that <code>pnPtr+1</code> does not return the <em>address</em> after pnPtr, but the <em>next object of the type</em> that pnPtr points to.  If pnPtr points to an integer (assuming 4 bytes), <code>pnPtr+3</code> means 3 integers after pnPtr, which is 12 addresses after pnPtr.  If pnPtr points to a char, which is always 1 byte, <code>pnPtr+3</code> means 3 chars after pnPtr, which is 3 addresses after pnPtr.</p>
<p>When calculating the result of a pointer arithmetic expression, the compiler always multiplies the integer operand by the size of the object being pointed to.  This is called <strong>scaling</strong>.</p>
<p>The following program:</p>
<pre class="brush: cpp; title: ; notranslate" title="">
int nValue = 7;
int *pnPtr = &amp;nValue;

cout &lt;&lt; pnPtr &lt;&lt; endl;
cout &lt;&lt; pnPtr+1 &lt;&lt; endl;
cout &lt;&lt; pnPtr+2 &lt;&lt; endl;
cout &lt;&lt; pnPtr+3 &lt;&lt; endl;
</pre>
<p>Outputs:</p>
<pre>
0012FF7C
0012FF80
0012FF84
0012FF88
</pre>
<p>As you can see, each of these addresses differs by 4 (7C + 4 = 80 in hexadecimal).  This is because an integer is 4 bytes on the author&#8217;s machine.</p>
<p>The same program using short instead of int:</p>
<pre class="brush: cpp; title: ; notranslate" title="">
short nValue = 7;
short *pnPtr = &amp;nValue;

cout &lt;&lt; pnPtr &lt;&lt; endl;
cout &lt;&lt; pnPtr+1 &lt;&lt; endl;
cout &lt;&lt; pnPtr+2 &lt;&lt; endl;
cout &lt;&lt; pnPtr+3 &lt;&lt; endl;
</pre>
<p>Outputs:</p>
<pre>
0012FF7C
0012FF7E
0012FF80
0012FF82
</pre>
<p>Because a short is 2 bytes, each address differs by 2.</p>
<p>It is rare to see the + and &#8211; operator used in such a manner with pointers.  However, it is more common to see the ++ or &#8212; operator being used to increment or decrement a pointer to point to the next or previous element in an array.</p>
<p><strong>Pointer arithmetic and arrays</strong></p>
<p>If anArray is a pointer that points to the first element (element 0) of the array, and adding 1 to a pointer already returns the next object, then anArray+1 must point to the second element (element 1) of the array!  We can verify experimentally that this is true:</p>
<pre class="brush: cpp; title: ; notranslate" title="">
int anArray[5] = { 9, 7, 5, 3, 1 };
cout &lt;&lt; *(anArray+1) &lt;&lt; endl; // prints 7
</pre>
<p>The parentheses are necessary to ensure the operator precedence is correct &#8212; operator * has higher precedence than operator +.</p>
<p>Note that *(anArray+1) has the same effect as anArray[1].  It turns out that the array indexing operator ([]) actually does an implicit pointer addition and dereference!  It just looks prettier.</p>
<p>We can use a pointer and pointer arithmetic to loop through an array.  Although not commonly done this way (using indices is generally easier to read and less error prone), the following example goes to show it is possible:</p>
<pre class="brush: cpp; title: ; notranslate" title="">
const int nArraySize = 7;
char szName[nArraySize] = &quot;Mollie&quot;;
int nVowels = 0;
for (char *pnPtr = szName; pnPtr &lt; szName + nArraySize; pnPtr++)
{
    switch (*pnPtr)
    {
        case 'A':
        case 'a':
        case 'E':
        case 'e':
        case 'I':
        case 'i':
        case 'O':
        case 'o':
        case 'U':
        case 'u':
            nVowels++;
            break;
    }
}

cout &lt;&lt; szName &lt;&lt; &quot; has &quot; &lt;&lt; nVowels &lt;&lt; &quot; vowels&quot; &lt;&lt; endl;
</pre>
<p>This program uses a pointer to step through each of the elements in an array.  Each element is dereferenced by the switch expression, and if the element is a vowel, nVowels is incremented.  The for loop then uses the ++ operator to advance the pointer to the next character in the array.  The for loop terminates when all characters have been examined.</p>
<p>The above program produces the result:</p>
<pre>
Mollie has 3 vowels
</pre>
<table border=0 cellpadding=3>
<tr>
<td>
        <a href="../69-dynamic-memory-allocation-with-new-and-delete/default.htm" style="text-decoration:none"><img src="../../images/cpptutorial/next.png" align=middle> 6.9 &#8212; Dynamic memory allocation with new and delete</a>
</td>
</tr>
<tr>
<td>
        <a href="../../#Chapter6" style="text-decoration:none"><img src="../../images/cpptutorial/up.png" align=middle> Index</a>
</td>
</tr>
<tr>
<td>
        <a href="../67-introduction-to-pointers/default.htm" style="text-decoration:none"><img src="../../images/cpptutorial/prev.png" align=middle> 6.7 &#8212; Introduction to pointers</a>
</td>
</tr>
</table>
<div style='padding-top:8px; padding-bottom:8px'><script type="text/javascript"><!--
google_ad_client = "ca-pub-0588844875925051";
/* Content Page Bottom - Medium Rectangle */
google_ad_slot = "2751429778";
google_ad_width = 300;
google_ad_height = 250;
//-->
</script>
<acript type="text/javascript"
src="../../../pagead2.googlesyndication.com/pagead/show_ads.js">
</script>
</div><!-- Powered by Ad Inserter Wordpress Plugin, Author: Igor Funa --></div>

<div class="post-footer"><img src="../../blog/wp-content/themes/atahualpa353/images/icons/folder-gray.gif" alt="" /> <a href="../../category/cpp-tutorial/default.htm" title="View all posts in C++ Tutorial" rel="category tag">C++ Tutorial</a>   | <a href="print/default.htm" title="Print This Post" rel="nofollow"><img class="WP-PrintIcon" src="../../blog/wp-content/plugins/wp-print/images/print.gif" alt="Print This Post" title="Print This Post" style="border: 0px;" /></a>&nbsp;<a href="print/default.htm" title="Print This Post" rel="nofollow">Print This Post</a></div>
</div><!-- / Post -->						
	
	<div class="clearfix navigation-middle">
		<div class="older">&laquo; <a href="../67-introduction-to-pointers/default.htm" rel="prev">6.7 &#8212; Introduction to pointers</a> &nbsp;</div><div class="newer">&nbsp; <a href="../69-dynamic-memory-allocation-with-new-and-delete/default.htm" rel="next">6.9 &#8212; Dynamic memory allocation with new and delete</a> &raquo;</div></div>


	<a name="comments"></a><!-- named anchor for skip links -->
	<h3 id="comments">41 comments to 6.8 &#8212; Pointers, arrays, and pointer arithmetic</h3>

	
	<!-- Comment List -->
	<ul class="commentlist">
		
			<li class="comment even thread-even depth-1 clearfix" id="comment-5058">
		<div id="div-comment-5058" class="clearfix comment-container">
		<div class="comment-author vcard">
		<img alt='' src='../../../1.gravatar.com/avatar/f1cc6f1ccd100b40f927fb01c4a7ed90@s=65&d=http_253a_252f_252f1.gravatar.com_252favatar_252fad516503a11cd5ca435acc9bb6523536_253fs_253d65&r=g' class='avatar avatar-65 photo' height='65' width='65' />		<span class="authorname">Jacob</span>
		</div>
				<div class="comment-meta commentmetadata">
		<a href="comment-page-1/#comment-5058">
		December 27, 2007 at 1:43 pm</a>
        <span class="comment-reply-link"><a rel="nofollow" class="comment-reply-login" href="../../blog/wp-login.php@redirect_to=http_253a_252f_252fwww.learncpp.com_252fcpp-tutorial_252f68-pointers-arrays-and-pointer-arithmetic_252f">Log in to Reply</a></span>		 
		</div>
		<p>Hi Alex!</p>
<p>I&#8217;ve been learning C   from your tutorial &#8211; and I think it&#8217;s really great, so thanks.<br />
However I just wanted to point (speaking of pointers ;-)) out, that the guy behind these two articles<br />
<a href="../../../www.cplusplus.com/articles/siavoshkc1.html" rel="nofollow">http://www.cplusplus.com/articles/siavoshkc1.html</a><br />
<a href="../../../www.cplusplus.com/articles/arrptr.html" rel="nofollow">http://www.cplusplus.com/articles/Arrptr.html</a><br />
would have to disagree with you on whether arrays and pointers are the same. Personally, I don&#8217;t care if he is right, since the code presented here still works intentionally.</p>
<p>Best regards<br />
Jacob</p>
		</div>
</li>
		<li class="comment byuser comment-author-Tarindel bypostauthor odd alt thread-odd thread-alt depth-1 clearfix" id="comment-5060">
		<div id="div-comment-5060" class="clearfix comment-container bypostauthor">
		<div class="comment-author vcard">
		<img alt='' src='../../../0.gravatar.com/avatar/2bcdbab687c32f64f9208e016cafe4cc@s=65&d=http_253a_252f_252f0.gravatar.com_252favatar_252fad516503a11cd5ca435acc9bb6523536_253fs_253d65&r=g' class='avatar avatar-65 photo' height='65' width='65' />		<span class="authorname"><a href='../../../www.tarindel.com/default.htm' rel='external nofollow' class='url'>Alex</a></span>
		</div>
				<div class="comment-meta commentmetadata">
		<a href="comment-page-1/#comment-5060">
		December 27, 2007 at 3:33 pm</a>
        <span class="comment-reply-link"><a rel="nofollow" class="comment-reply-login" href="../../blog/wp-login.php@redirect_to=http_253a_252f_252fwww.learncpp.com_252fcpp-tutorial_252f68-pointers-arrays-and-pointer-arithmetic_252f">Log in to Reply</a></span>		 
		</div>
		<p>The author of those articles is right on some points and wrong on others.  However, I find his logic and examples to be quite misleading.  Rather than refute his arguments, instead, let me see if I can shed some light on the situation as I understand it.</p>
<p>Arrays and pointers are not strictly identical.    Although arrays are implemented using pointers, arrays also contain slightly more information.  When you create an array, the compiler has to keep track of how many elements the array has.  Otherwise, the compiler would not know how many elements to delete when it came time to delete[] the array.</p>
<p>With a non-dynamically allocated array, it&#8217;s possible to see the actual size of the array:</p>
<p><code>int anArray[5];  cout < < sizeof(anArray);</code></p>
<p>This program prints out 20 (assuming 4-byte integers).  This is the size of the array.</p>
<p>On the other hand:</p>
<p></code><code>int *ptr = anArray;  cout < < sizeof(ptr); </code></p>
<p>prints 4.  This is the size of the pointer.</p>
<p>When you access an array through a pointer, you're accessing it in a slightly limited manner, because you lose access to the size and type information of the original array.  This can be a pain (because it means you have to store the size of the array in a separate variable) but that's about the extent of the practical consequences.</p>
<p>Note that for dynamically allocated arrays:</p>
<p></code><code>int *pnArray = new int[5]</code></p>
<p>the new operator returns a pointer to the array, and that's all you ever have to work with.  You never get access to the actual array object.</p>
<p>Functionally, in terms of how you access an array, there is no real difference between accessing the elements of an actual array and accessing the elements of an array through a pointer.</p>
<p>So technically, it is correct that arrays and pointers aren't identical.  Pointers give you access to a limited subset of the array information.  Practically speaking, it's generally not even worth worrying about.</p>
		</div>
</li>
		<li class="comment even thread-even depth-1 clearfix" id="comment-10935">
		<div id="div-comment-10935" class="clearfix comment-container">
		<div class="comment-author vcard">
		<img alt='' src='../../../0.gravatar.com/avatar/e6144fa59f1e06c990c9fdcdf85f1f9c@s=65&d=http_253a_252f_252f0.gravatar.com_252favatar_252fad516503a11cd5ca435acc9bb6523536_253fs_253d65&r=g' class='avatar avatar-65 photo' height='65' width='65' />		<span class="authorname"><a href='../../../none/default.htm' rel='external nofollow' class='url'>Pete</a></span>
		</div>
				<div class="comment-meta commentmetadata">
		<a href="comment-page-1/#comment-10935">
		April 4, 2008 at 11:31 am</a>
        <span class="comment-reply-link"><a rel="nofollow" class="comment-reply-login" href="../../blog/wp-login.php@redirect_to=http_253a_252f_252fwww.learncpp.com_252fcpp-tutorial_252f68-pointers-arrays-and-pointer-arithmetic_252f">Log in to Reply</a></span>		 
		</div>
		<p>Alex,</p>
<p>Your site is wonderful, thanks for providing it.  I was editing some of the examples you provide to see what happens with the output and I noticed something I cannot explain.  When I substitute the following into your last example (Mollie/Vowels) I get the output 3, which makes sense.</p>
<pre>
const int nArraySize = 14;
char szName[nArraySize] = "Lazy BrownFox";
</pre>
<p>But When I change the code to the below, the result becomes 4, which I do not understand.  It is as if the program is counting the last whitespace character as a vowel.  Can you explain this to me?</p>
<pre>
const int nArraySize = 15;
char szName[nArraySize] = "Lazy Brown Fox";
</pre>
<p>BTW, I am using Cygwin with Dev-C++ and the GNU compilers.</p>
<p>Thanks and best regards,<br />
Pete</p>
		</div>
<ul class='children'>
		<li class="comment byuser comment-author-Tarindel bypostauthor odd alt depth-2 clearfix" id="comment-10964">
		<div id="div-comment-10964" class="clearfix comment-container bypostauthor">
		<div class="comment-author vcard">
		<img alt='' src='../../../0.gravatar.com/avatar/2bcdbab687c32f64f9208e016cafe4cc@s=65&d=http_253a_252f_252f0.gravatar.com_252favatar_252fad516503a11cd5ca435acc9bb6523536_253fs_253d65&r=g' class='avatar avatar-65 photo' height='65' width='65' />		<span class="authorname"><a href='../../../www.tarindel.com/default.htm' rel='external nofollow' class='url'>Alex</a></span>
		</div>
				<div class="comment-meta commentmetadata">
		<a href="comment-page-1/#comment-10964">
		April 4, 2008 at 7:59 pm</a>
        <span class="comment-reply-link"><a rel="nofollow" class="comment-reply-login" href="../../blog/wp-login.php@redirect_to=http_253a_252f_252fwww.learncpp.com_252fcpp-tutorial_252f68-pointers-arrays-and-pointer-arithmetic_252f">Log in to Reply</a></span>		 
		</div>
		<p>When I ran your Lazy Brown Fox example with Visual C++ 2005, I got 3 vowels, not 4.  So at the moment I&#8217;m not sure why you&#8217;re getting a different result.</p>
<p>My advise to you would be to run your program using a debugger, and step through the code.  Put a watch on nVowels and then watch it count up &#8212; when it becomes 4, you&#8217;ll at least know what&#8217;s causing it.</p>
		</div>
<ul class='children'>
		<li class="comment even depth-3 clearfix" id="comment-90124">
		<div id="div-comment-90124" class="clearfix comment-container">
		<div class="comment-author vcard">
		<img alt='' src='../../../1.gravatar.com/avatar/794261a39d5f7663abb024fcf500bde1@s=65&d=http_253a_252f_252f1.gravatar.com_252favatar_252fad516503a11cd5ca435acc9bb6523536_253fs_253d65&r=g' class='avatar avatar-65 photo' height='65' width='65' />		<span class="authorname">bla</span>
		</div>
				<div class="comment-meta commentmetadata">
		<a href="comment-page-1/#comment-90124">
		August 12, 2010 at 7:52 am</a>
        <span class="comment-reply-link"><a rel="nofollow" class="comment-reply-login" href="../../blog/wp-login.php@redirect_to=http_253a_252f_252fwww.learncpp.com_252fcpp-tutorial_252f68-pointers-arrays-and-pointer-arithmetic_252f">Log in to Reply</a></span>		 
		</div>
		<p>didn&#8217;t read the first post&#8230;<br />
this can be deleted</p>
		</div>
</li>
</ul>
</li>
</ul>
</li>
		<li class="pingback odd alt thread-odd thread-alt depth-1 clearfix" id="comment-13478">
		<div id="div-comment-13478" class="clearfix comment-container">
		<div class="comment-author vcard">
				<span class="authorname"><a href='../67-introduction-to-pointers/default.htm' rel='external nofollow' class='url'>Learn C++ - &raquo; 6.7 &#8212; Introduction to pointers</a></span>
		</div>
				<div class="comment-meta commentmetadata">
		<a href="comment-page-1/#comment-13478">
		April 28, 2008 at 8:53 pm</a>
        <span class="comment-reply-link"><a rel="nofollow" class="comment-reply-login" href="../../blog/wp-login.php@redirect_to=http_253a_252f_252fwww.learncpp.com_252fcpp-tutorial_252f68-pointers-arrays-and-pointer-arithmetic_252f">Log in to Reply</a></span>		 
		</div>
		<p>[...] 2007      Prev/Next Posts   &laquo; A PHP script to unzip files with file overwriting | Home | 6.8 &#8212; Pointers, arrays, and pointer arithmetic &raquo;     Tuesday, July 10th, 2007 at 6:52 [...]</p>
		</div>
</li>
		<li class="comment even thread-even depth-1 clearfix" id="comment-17259">
		<div id="div-comment-17259" class="clearfix comment-container">
		<div class="comment-author vcard">
		<img alt='' src='../../../0.gravatar.com/avatar/02c1c5ea8d78232b5c07affcb08c6984@s=65&d=http_253a_252f_252f0.gravatar.com_252favatar_252fad516503a11cd5ca435acc9bb6523536_253fs_253d65&r=g' class='avatar avatar-65 photo' height='65' width='65' />		<span class="authorname">Stuart</span>
		</div>
				<div class="comment-meta commentmetadata">
		<a href="comment-page-1/#comment-17259">
		May 22, 2008 at 11:41 am</a>
        <span class="comment-reply-link"><a rel="nofollow" class="comment-reply-login" href="../../blog/wp-login.php@redirect_to=http_253a_252f_252fwww.learncpp.com_252fcpp-tutorial_252f68-pointers-arrays-and-pointer-arithmetic_252f">Log in to Reply</a></span>		 
		</div>
		<p>This is going over my head:</p>
<pre>for (char *pnPtr = szName; pnPtr &lt;= szName + nArraySize; pnPtr++)</pre>
<p>Could you explain it, please?</p>
		</div>
<ul class='children'>
		<li class="comment byuser comment-author-miroslav odd alt depth-2 clearfix" id="comment-31180">
		<div id="div-comment-31180" class="clearfix comment-container">
		<div class="comment-author vcard">
		<img alt='' src='../../../1.gravatar.com/avatar/532d0a1b3e586b934262bada12f1fdca@s=65&d=http_253a_252f_252f1.gravatar.com_252favatar_252fad516503a11cd5ca435acc9bb6523536_253fs_253d65&r=g' class='avatar avatar-65 photo' height='65' width='65' />		<span class="authorname">miroslav</span>
		</div>
				<div class="comment-meta commentmetadata">
		<a href="comment-page-1/#comment-31180">
		October 27, 2008 at 3:32 am</a>
        <span class="comment-reply-link"><a rel="nofollow" class="comment-reply-login" href="../../blog/wp-login.php@redirect_to=http_253a_252f_252fwww.learncpp.com_252fcpp-tutorial_252f68-pointers-arrays-and-pointer-arithmetic_252f">Log in to Reply</a></span>		 
		</div>
		<p>I&#8217;m sorry but would it be possible to explain? For example the &#8216;pnPtr &lt;= szName + nArraySize)&#8217;</p>
		</div>
<ul class='children'>
		<li class="comment byuser comment-author-Tarindel bypostauthor even depth-3 clearfix" id="comment-31560">
		<div id="div-comment-31560" class="clearfix comment-container bypostauthor">
		<div class="comment-author vcard">
		<img alt='' src='../../../0.gravatar.com/avatar/2bcdbab687c32f64f9208e016cafe4cc@s=65&d=http_253a_252f_252f0.gravatar.com_252favatar_252fad516503a11cd5ca435acc9bb6523536_253fs_253d65&r=g' class='avatar avatar-65 photo' height='65' width='65' />		<span class="authorname"><a href='../../../www.tarindel.com/default.htm' rel='external nofollow' class='url'>Alex</a></span>
		</div>
				<div class="comment-meta commentmetadata">
		<a href="comment-page-1/#comment-31560">
		November 3, 2008 at 6:19 pm</a>
        <span class="comment-reply-link"><a rel="nofollow" class="comment-reply-login" href="../../blog/wp-login.php@redirect_to=http_253a_252f_252fwww.learncpp.com_252fcpp-tutorial_252f68-pointers-arrays-and-pointer-arithmetic_252f">Log in to Reply</a></span>		 
		</div>
		<p>Hmmm, not sure how I missed the original comment here.  Sure, here&#8217;s the explanation.</p>
<p>In this example, szName is an array.  As you have learned, arrays and pointers are intricately linked in C++.  Let&#8217;s break this for loop into it&#8217;s 3 components and examine each one:</p>
<pre>for (char *pnPtr = szName;</pre>
<p>This is creating a new pointer named pnPtr and setting it to point to the first character in the name array.  After this, pnPtr and szName will be holding the same address.</p>
<pre>pnPtr &lt;= szName + nArraySize</pre>
<p>The tricky part of this is determining what szName + nArraySize means.  Arrays are laid out contiguously in memory.  If szName is the start of the array, and nArraySize is the length of the array, then szName + nArraySize must be the end of the array.  So what this is really saying is, &#8220;while pnPtr hasn&#8217;t reached the end of the array, keep looping&#8221;.</p>
<pre>pnPtr++</pre>
<p>Increment the pnPtr pointer to the next character.</p>
<p>So, putting it all together: &#8220;pnPtr is set to the start of the array.  While it hasn&#8217;t reach the end of the array, do the loop, and then increment pnPtr to the next character&#8221;.</p>
<p>That&#8217;s it.</p>
		</div>
<ul class='children'>
		<li class="comment odd alt depth-4 clearfix" id="comment-89253">
		<div id="div-comment-89253" class="clearfix comment-container">
		<div class="comment-author vcard">
		<img alt='' src='../../../0.gravatar.com/avatar/eb94fb2e9f8a04f061528fee65ee147c@s=65&d=http_253a_252f_252f0.gravatar.com_252favatar_252fad516503a11cd5ca435acc9bb6523536_253fs_253d65&r=g' class='avatar avatar-65 photo' height='65' width='65' />		<span class="authorname">Cory</span>
		</div>
				<div class="comment-meta commentmetadata">
		<a href="comment-page-1/#comment-89253">
		July 29, 2010 at 7:57 am</a>
        <span class="comment-reply-link"><a rel="nofollow" class="comment-reply-login" href="../../blog/wp-login.php@redirect_to=http_253a_252f_252fwww.learncpp.com_252fcpp-tutorial_252f68-pointers-arrays-and-pointer-arithmetic_252f">Log in to Reply</a></span>		 
		</div>
		<p>For the last part, &#8220;Increment the pnPtr pointer to the next character.&#8221;, did you mean increment the point to the address of the next character?</p>
		</div>
<ul class='children'>
		<li class="comment byuser comment-author-moogie even depth-5 clearfix" id="comment-95170">
		<div id="div-comment-95170" class="clearfix comment-container">
		<div class="comment-author vcard">
		<img alt='' src='../../../1.gravatar.com/avatar/16f9c07dceab1393fde1ff840219456d@s=65&d=http_253a_252f_252f1.gravatar.com_252favatar_252fad516503a11cd5ca435acc9bb6523536_253fs_253d65&r=g' class='avatar avatar-65 photo' height='65' width='65' />		<span class="authorname">Moogie</span>
		</div>
				<div class="comment-meta commentmetadata">
		<a href="comment-page-1/#comment-95170">
		February 9, 2011 at 11:44 pm</a>
        <span class="comment-reply-link"><a rel="nofollow" class="comment-reply-login" href="../../blog/wp-login.php@redirect_to=http_253a_252f_252fwww.learncpp.com_252fcpp-tutorial_252f68-pointers-arrays-and-pointer-arithmetic_252f">Log in to Reply</a></span>		 
		</div>
		<p>For what it&#8217;s worth (maybe more for others who read this, not necessarily Cory, who probably stopped caring about a response to this message months ago :)) I think the answer is: yes. Although, it&#8217;ll really be looking at the <b>character</b> at that address, as Alex said, not the address itself. But yes, you&#8217;re thinking along the right lines there.</p>
		</div>
</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
		<li class="comment odd alt thread-odd thread-alt depth-1 clearfix" id="comment-17269">
		<div id="div-comment-17269" class="clearfix comment-container">
		<div class="comment-author vcard">
		<img alt='' src='../../../0.gravatar.com/avatar/02c1c5ea8d78232b5c07affcb08c6984@s=65&d=http_253a_252f_252f0.gravatar.com_252favatar_252fad516503a11cd5ca435acc9bb6523536_253fs_253d65&r=g' class='avatar avatar-65 photo' height='65' width='65' />		<span class="authorname">Stuart</span>
		</div>
				<div class="comment-meta commentmetadata">
		<a href="comment-page-1/#comment-17269">
		May 22, 2008 at 1:28 pm</a>
        <span class="comment-reply-link"><a rel="nofollow" class="comment-reply-login" href="../../blog/wp-login.php@redirect_to=http_253a_252f_252fwww.learncpp.com_252fcpp-tutorial_252f68-pointers-arrays-and-pointer-arithmetic_252f">Log in to Reply</a></span>		 
		</div>
		<p>It&#8217;s okay &#8211; I&#8217;ve come back to it with a clear head and I get it now. (And I realize that nArraySize-2 works.) :)</p>
<p>Thanks for tutorials, BTW.</p>
		</div>
</li>
		<li class="comment even thread-even depth-1 clearfix" id="comment-23671">
		<div id="div-comment-23671" class="clearfix comment-container">
		<div class="comment-author vcard">
		<img alt='' src='../../../0.gravatar.com/avatar/8d85e9be3b895fa2daadf415b18505a6@s=65&d=http_253a_252f_252f0.gravatar.com_252favatar_252fad516503a11cd5ca435acc9bb6523536_253fs_253d65&r=g' class='avatar avatar-65 photo' height='65' width='65' />		<span class="authorname"><a href='../../../usp/default.htm' rel='external nofollow' class='url'>Savenaca Yauyau</a></span>
		</div>
				<div class="comment-meta commentmetadata">
		<a href="comment-page-1/#comment-23671">
		August 14, 2008 at 12:01 am</a>
        <span class="comment-reply-link"><a rel="nofollow" class="comment-reply-login" href="../../blog/wp-login.php@redirect_to=http_253a_252f_252fwww.learncpp.com_252fcpp-tutorial_252f68-pointers-arrays-and-pointer-arithmetic_252f">Log in to Reply</a></span>		 
		</div>
		<p>I am thankfull for above Information.I am doing C++ programming&#8230;and am doing a Project In Multiple Arrays, using Functions.</p>
<p>Hope To Get More Information in this web.</p>
<p>Thank you very much</p>
<p>Savenaca yauyau</p>
		</div>
</li>
		<li class="comment odd alt thread-odd thread-alt depth-1 clearfix" id="comment-29710">
		<div id="div-comment-29710" class="clearfix comment-container">
		<div class="comment-author vcard">
		<img alt='' src='../../../0.gravatar.com/avatar/410c7bca3234601b5cd5770f29cee80c@s=65&d=http_253a_252f_252f0.gravatar.com_252favatar_252fad516503a11cd5ca435acc9bb6523536_253fs_253d65&r=g' class='avatar avatar-65 photo' height='65' width='65' />		<span class="authorname">Nickell</span>
		</div>
				<div class="comment-meta commentmetadata">
		<a href="comment-page-1/#comment-29710">
		October 11, 2008 at 4:30 pm</a>
        <span class="comment-reply-link"><a rel="nofollow" class="comment-reply-login" href="../../blog/wp-login.php@redirect_to=http_253a_252f_252fwww.learncpp.com_252fcpp-tutorial_252f68-pointers-arrays-and-pointer-arithmetic_252f">Log in to Reply</a></span>		 
		</div>
		<p>how would you sort an char array using pointers like you did above?</p>
		</div>
<ul class='children'>
		<li class="comment byuser comment-author-Tarindel bypostauthor even depth-2 clearfix" id="comment-30013">
		<div id="div-comment-30013" class="clearfix comment-container bypostauthor">
		<div class="comment-author vcard">
		<img alt='' src='../../../0.gravatar.com/avatar/2bcdbab687c32f64f9208e016cafe4cc@s=65&d=http_253a_252f_252f0.gravatar.com_252favatar_252fad516503a11cd5ca435acc9bb6523536_253fs_253d65&r=g' class='avatar avatar-65 photo' height='65' width='65' />		<span class="authorname"><a href='../../../www.tarindel.com/default.htm' rel='external nofollow' class='url'>Alex</a></span>
		</div>
				<div class="comment-meta commentmetadata">
		<a href="comment-page-1/#comment-30013">
		October 14, 2008 at 6:50 pm</a>
        <span class="comment-reply-link"><a rel="nofollow" class="comment-reply-login" href="../../blog/wp-login.php@redirect_to=http_253a_252f_252fwww.learncpp.com_252fcpp-tutorial_252f68-pointers-arrays-and-pointer-arithmetic_252f">Log in to Reply</a></span>		 
		</div>
		<p>I do not see where I sorted an array in this lesson.  Perhaps this comment was posted on the wrong lesson?</p>
		</div>
</li>
</ul>
</li>
		<li class="comment odd alt thread-even depth-1 clearfix" id="comment-32373">
		<div id="div-comment-32373" class="clearfix comment-container">
		<div class="comment-author vcard">
		<img alt='' src='../../../0.gravatar.com/avatar/4ec209f8479299ce9998b27c71025542@s=65&d=http_253a_252f_252f0.gravatar.com_252favatar_252fad516503a11cd5ca435acc9bb6523536_253fs_253d65&r=g' class='avatar avatar-65 photo' height='65' width='65' />		<span class="authorname">Alan Hurley</span>
		</div>
				<div class="comment-meta commentmetadata">
		<a href="comment-page-1/#comment-32373">
		November 18, 2008 at 11:16 am</a>
        <span class="comment-reply-link"><a rel="nofollow" class="comment-reply-login" href="../../blog/wp-login.php@redirect_to=http_253a_252f_252fwww.learncpp.com_252fcpp-tutorial_252f68-pointers-arrays-and-pointer-arithmetic_252f">Log in to Reply</a></span>		 
		</div>
		<p>&#8220;It turns out the the array&#8221; should read, &#8220;It turns out that the array&#8221;.</p>
<p>[ Indeed!  Thank you.  -Alex ]</p>
		</div>
</li>
		<li class="comment even thread-odd thread-alt depth-1 clearfix" id="comment-33286">
		<div id="div-comment-33286" class="clearfix comment-container">
		<div class="comment-author vcard">
		<img alt='' src='../../../0.gravatar.com/avatar/e6fad4a61336764a98f28ce2660b2b9a@s=65&d=http_253a_252f_252f0.gravatar.com_252favatar_252fad516503a11cd5ca435acc9bb6523536_253fs_253d65&r=g' class='avatar avatar-65 photo' height='65' width='65' />		<span class="authorname">runner</span>
		</div>
				<div class="comment-meta commentmetadata">
		<a href="comment-page-1/#comment-33286">
		November 30, 2008 at 3:15 am</a>
        <span class="comment-reply-link"><a rel="nofollow" class="comment-reply-login" href="../../blog/wp-login.php@redirect_to=http_253a_252f_252fwww.learncpp.com_252fcpp-tutorial_252f68-pointers-arrays-and-pointer-arithmetic_252f">Log in to Reply</a></span>		 
		</div>
		<p>You&#8217;re making a one-off error here, I think:</p>
<pre>for (char *pnPtr = szName; pnPtr &lt;= szName + nArraySize; pnPtr++)<!--formatted--></pre>
<p>The for loop should run for
<pre>pnPtr &lt;= szName + nArraySize-1;<!--formatted--></pre>
<p>or
<pre>pnPtr &lt;= szName + nArraySize-2;<!--formatted--></pre>
<p>since the junk data after szString[nArraySize - 1] might end up being a vowel (right?)</p>
<p>[ You are correct.  I changed the example so it loops the correct number of times.  It still goes through the loop once when pnPtr is pointing to the terminating NULL, but this doesn't hurt anything.  -Alex ]</p>
		</div>
</li>
		<li class="comment odd alt thread-even depth-1 clearfix" id="comment-37244">
		<div id="div-comment-37244" class="clearfix comment-container">
		<div class="comment-author vcard">
		<img alt='' src='../../../1.gravatar.com/avatar/35bc1ced8fa9605875c23ad3faeb8246@s=65&d=http_253a_252f_252f1.gravatar.com_252favatar_252fad516503a11cd5ca435acc9bb6523536_253fs_253d65&r=g' class='avatar avatar-65 photo' height='65' width='65' />		<span class="authorname">Noha</span>
		</div>
				<div class="comment-meta commentmetadata">
		<a href="comment-page-1/#comment-37244">
		January 12, 2009 at 11:38 am</a>
        <span class="comment-reply-link"><a rel="nofollow" class="comment-reply-login" href="../../blog/wp-login.php@redirect_to=http_253a_252f_252fwww.learncpp.com_252fcpp-tutorial_252f68-pointers-arrays-and-pointer-arithmetic_252f">Log in to Reply</a></span>		 
		</div>
		<p>I just wonder why did write in the last example (in for loop):<br />
char *pnPtr = szName<br />
in place of:<br />
char *pnPtr = *szName<br />
since you need the pointer of the first element in the array not the element itself!</p>
		</div>
<ul class='children'>
		<li class="comment even depth-2 clearfix" id="comment-37247">
		<div id="div-comment-37247" class="clearfix comment-container">
		<div class="comment-author vcard">
		<img alt='' src='../../../1.gravatar.com/avatar/35bc1ced8fa9605875c23ad3faeb8246@s=65&d=http_253a_252f_252f1.gravatar.com_252favatar_252fad516503a11cd5ca435acc9bb6523536_253fs_253d65&r=g' class='avatar avatar-65 photo' height='65' width='65' />		<span class="authorname">Noha</span>
		</div>
				<div class="comment-meta commentmetadata">
		<a href="comment-page-1/#comment-37247">
		January 12, 2009 at 11:44 am</a>
        <span class="comment-reply-link"><a rel="nofollow" class="comment-reply-login" href="../../blog/wp-login.php@redirect_to=http_253a_252f_252fwww.learncpp.com_252fcpp-tutorial_252f68-pointers-arrays-and-pointer-arithmetic_252f">Log in to Reply</a></span>		 
		</div>
		<p>im wrong&#8230; now got it!</p>
		</div>
</li>
</ul>
</li>
		<li class="comment odd alt thread-odd thread-alt depth-1 clearfix" id="comment-47735">
		<div id="div-comment-47735" class="clearfix comment-container">
		<div class="comment-author vcard">
		<img alt='' src='../../../0.gravatar.com/avatar/22d43bd21ea70aab067ad985a468ed4e@s=65&d=http_253a_252f_252f0.gravatar.com_252favatar_252fad516503a11cd5ca435acc9bb6523536_253fs_253d65&r=g' class='avatar avatar-65 photo' height='65' width='65' />		<span class="authorname">Yogesh Shastri</span>
		</div>
				<div class="comment-meta commentmetadata">
		<a href="comment-page-1/#comment-47735">
		February 27, 2009 at 8:48 am</a>
        <span class="comment-reply-link"><a rel="nofollow" class="comment-reply-login" href="../../blog/wp-login.php@redirect_to=http_253a_252f_252fwww.learncpp.com_252fcpp-tutorial_252f68-pointers-arrays-and-pointer-arithmetic_252f">Log in to Reply</a></span>		 
		</div>
		<p>Great Site. A lot of things are said about sharing learning and wisdom, but a few are able to do it. You are one of them, and since you have done it with excellence, so kudos to you! I have tried to write tutorials for another programming language that I have learnt, but couldn&#8217;t do it, because of so many factors &#8211; so I can really appreciate your efforts. Thanks to you!</p>
		</div>
</li>
		<li class="comment even thread-even depth-1 clearfix" id="comment-49771">
		<div id="div-comment-49771" class="clearfix comment-container">
		<div class="comment-author vcard">
		<img alt='' src='../../../0.gravatar.com/avatar/22d43bd21ea70aab067ad985a468ed4e@s=65&d=http_253a_252f_252f0.gravatar.com_252favatar_252fad516503a11cd5ca435acc9bb6523536_253fs_253d65&r=g' class='avatar avatar-65 photo' height='65' width='65' />		<span class="authorname">Yogesh Shastri</span>
		</div>
				<div class="comment-meta commentmetadata">
		<a href="comment-page-1/#comment-49771">
		March 9, 2009 at 12:15 pm</a>
        <span class="comment-reply-link"><a rel="nofollow" class="comment-reply-login" href="../../blog/wp-login.php@redirect_to=http_253a_252f_252fwww.learncpp.com_252fcpp-tutorial_252f68-pointers-arrays-and-pointer-arithmetic_252f">Log in to Reply</a></span>		 
		</div>
		<p>Dear Alex,</p>
<p>Thank you for providing this wonderful resource for learning C++. I was trying my luck at pointers, but when I wrote a code like this:</p>
<p>#include<br />
#include<br />
void main()<br />
{<br />
	clrscr();<br />
	int arr[5]={1,2,3,4,5};<br />
	char name[]=&#8221;Pratyush&#8221;;<br />
	cout&lt;&lt; *arr++ &lt;&lt;endl;<br />
	cout&lt;&lt; *name++ &lt;&lt;endl;<br />
	getch();<br />
}</p>
<p>I get error on line on which I use *arr++ and *name++ saying that an Lvalue is required. Could you please explain.</p>
<p>Regards and bets wishes.</p>
		</div>
<ul class='children'>
		<li class="comment odd alt depth-2 clearfix" id="comment-57944">
		<div id="div-comment-57944" class="clearfix comment-container">
		<div class="comment-author vcard">
		<img alt='' src='../../../1.gravatar.com/avatar/1bc59382f74b6b031e6b2f58e34c26bf@s=65&d=http_253a_252f_252f1.gravatar.com_252favatar_252fad516503a11cd5ca435acc9bb6523536_253fs_253d65&r=g' class='avatar avatar-65 photo' height='65' width='65' />		<span class="authorname">Sandesh</span>
		</div>
				<div class="comment-meta commentmetadata">
		<a href="comment-page-1/#comment-57944">
		April 15, 2009 at 9:00 am</a>
        <span class="comment-reply-link"><a rel="nofollow" class="comment-reply-login" href="../../blog/wp-login.php@redirect_to=http_253a_252f_252fwww.learncpp.com_252fcpp-tutorial_252f68-pointers-arrays-and-pointer-arithmetic_252f">Log in to Reply</a></span>		 
		</div>
		<p>Yogesh,</p>
<p>L-Value means a quantity on left side of any equation or assignment.L-Values are always variables while values on right side(R-Values) are numbers or characters.The ++ operator requires varibles  that is L-Values.</p>
<p>The dereferencing operator &#8220;*&#8221; has higher precedency than the increment by 1 &#8220;++&#8221; operator.If the program would have exceuted,while excecuting the first cout, the operation *arr would be excecuted first then ++.*arr would result the address of first element of array &#8216;arr&#8217; as array name is a pointer that addresses the first element.the address would be a hexadecimal number and therefore not a variable and ++ statement would not execute.Therefore,it shows L-value(variable) required.</p>
<p>it is the same with second cout.* operator would now be the value of first element and therefore ++ would not execute.</p>
<p>i hope you understood it.</p>
<p>Cheers;Sandesh</p>
		</div>
<ul class='children'>
		<li class="comment even depth-3 clearfix" id="comment-62826">
		<div id="div-comment-62826" class="clearfix comment-container">
		<div class="comment-author vcard">
		<img alt='' src='../../../0.gravatar.com/avatar/e29c596c93306cf2127565e9ae780348@s=65&d=http_253a_252f_252f0.gravatar.com_252favatar_252fad516503a11cd5ca435acc9bb6523536_253fs_253d65&r=g' class='avatar avatar-65 photo' height='65' width='65' />		<span class="authorname">rawr</span>
		</div>
				<div class="comment-meta commentmetadata">
		<a href="comment-page-1/#comment-62826">
		June 21, 2009 at 3:23 pm</a>
        <span class="comment-reply-link"><a rel="nofollow" class="comment-reply-login" href="../../blog/wp-login.php@redirect_to=http_253a_252f_252fwww.learncpp.com_252fcpp-tutorial_252f68-pointers-arrays-and-pointer-arithmetic_252f">Log in to Reply</a></span>		 
		</div>
		<p>You say that *arr results in a hexadecimal number, yet when I type *arr it uses the value. Also, the code works with (*arr)++.</p>
<p>Is this because addresses are simply treated differently to pointers by the compiler?</p>
		</div>
</li>
		<li class="comment byuser comment-author-auasp odd alt depth-3 clearfix" id="comment-95689">
		<div id="div-comment-95689" class="clearfix comment-container">
		<div class="comment-author vcard">
		<img alt='' src='../../../0.gravatar.com/avatar/287e685c290e9c5c3628aa93c9bef739@s=65&d=http_253a_252f_252f0.gravatar.com_252favatar_252fad516503a11cd5ca435acc9bb6523536_253fs_253d65&r=g' class='avatar avatar-65 photo' height='65' width='65' />		<span class="authorname">AUASP</span>
		</div>
				<div class="comment-meta commentmetadata">
		<a href="comment-page-1/#comment-95689">
		July 8, 2011 at 9:36 pm</a>
        <span class="comment-reply-link"><a rel="nofollow" class="comment-reply-login" href="../../blog/wp-login.php@redirect_to=http_253a_252f_252fwww.learncpp.com_252fcpp-tutorial_252f68-pointers-arrays-and-pointer-arithmetic_252f">Log in to Reply</a></span>		 
		</div>
		<p>&#8220;the dereferencing operator “*” has higher precedency than the increment by 1 “++” operator&#8221;<br />
Actually the reverse is true.check any c++ associativity and precedence list.</p>
		</div>
</li>
</ul>
</li>
</ul>
</li>
		<li class="comment even thread-odd thread-alt depth-1 clearfix" id="comment-63207">
		<div id="div-comment-63207" class="clearfix comment-container">
		<div class="comment-author vcard">
		<img alt='' src='../../../1.gravatar.com/avatar/38951bbe9e5af5510aadabe5f5dace4e@s=65&d=http_253a_252f_252f1.gravatar.com_252favatar_252fad516503a11cd5ca435acc9bb6523536_253fs_253d65&r=g' class='avatar avatar-65 photo' height='65' width='65' />		<span class="authorname">Jacob Quadro</span>
		</div>
				<div class="comment-meta commentmetadata">
		<a href="comment-page-1/#comment-63207">
		June 26, 2009 at 6:48 pm</a>
        <span class="comment-reply-link"><a rel="nofollow" class="comment-reply-login" href="../../blog/wp-login.php@redirect_to=http_253a_252f_252fwww.learncpp.com_252fcpp-tutorial_252f68-pointers-arrays-and-pointer-arithmetic_252f">Log in to Reply</a></span>		 
		</div>
		<p>Thanks for the great tutorial Alex.</p>
<p>In the above code:<br />
const int nArraySize = 7;<br />
char szName[nArraySize] = &#8220;Mollie&#8221;;<br />
&#8230;<br />
I&#8217;m confused why should nArraySize = 7, when Mollie is just six characters.<br />
I tried replacing it with 6 but it won&#8217;t compile.</p>
<p>Thanks again.</p>
		</div>
<ul class='children'>
		<li class="comment odd alt depth-2 clearfix" id="comment-63798">
		<div id="div-comment-63798" class="clearfix comment-container">
		<div class="comment-author vcard">
		<img alt='' src='../../../1.gravatar.com/avatar/b7049051adbf6ef4625b968315004896@s=65&d=http_253a_252f_252f1.gravatar.com_252favatar_252fad516503a11cd5ca435acc9bb6523536_253fs_253d65&r=g' class='avatar avatar-65 photo' height='65' width='65' />		<span class="authorname">Quinn</span>
		</div>
				<div class="comment-meta commentmetadata">
		<a href="comment-page-1/#comment-63798">
		July 5, 2009 at 11:12 pm</a>
        <span class="comment-reply-link"><a rel="nofollow" class="comment-reply-login" href="../../blog/wp-login.php@redirect_to=http_253a_252f_252fwww.learncpp.com_252fcpp-tutorial_252f68-pointers-arrays-and-pointer-arithmetic_252f">Log in to Reply</a></span>		 
		</div>
		<p>You had forgotten to include the null terminating character, . Every C-string must end with the null terminating character, and as a direct result, all C-strings are sized to one larger than the string you&#8217;re putting into it. In essence, it would work out like this&#8230;</p>
<pre>const int nArraySize = 7;
char szName[nArraySize] = &quot;Mollie&quot;;

// This produces an array of characters like so.
// szName[0] = &#39;M&#39; ,  szName[1] = &#39;o&#39;
// szName[2] = &#39;l&#39; ,  szName[3] = &#39;l&#39;
// szName[4] = &#39;i&#39; ,  szName[5] = &#39;e&#39;
// szName[6] = &#39;&#39;.</pre>
<p>Alex covered this in much more detail in <a href="../66-c-style-strings/default.htm" title="Lesson 6.6" rel="nofollow">C-Style Strings</a>, so I&#8217;d suggest revisiting that section to see it in action.</p>
<p>When you change nArraySize to equal 6, that meant that the szName array could only contain a string of five characters (because it MUST end with a null-terminating character, if it doesn&#8217;t, it causes overflows). So the compiler realizing this, issued a build error since this would inevitably, without fail, lead to an overflow. This is just one of the many little quirks of the C/C++ language, and computer programming in general, you&#8217;ll have to get used to. :)</p>
		</div>
</li>
</ul>
</li>
		<li class="comment even thread-even depth-1 clearfix" id="comment-64195">
		<div id="div-comment-64195" class="clearfix comment-container">
		<div class="comment-author vcard">
		<img alt='' src='../../../0.gravatar.com/avatar/4809981830a1518a5d20953268d9db95@s=65&d=http_253a_252f_252f0.gravatar.com_252favatar_252fad516503a11cd5ca435acc9bb6523536_253fs_253d65&r=g' class='avatar avatar-65 photo' height='65' width='65' />		<span class="authorname">kanks</span>
		</div>
				<div class="comment-meta commentmetadata">
		<a href="comment-page-1/#comment-64195">
		July 12, 2009 at 7:18 am</a>
        <span class="comment-reply-link"><a rel="nofollow" class="comment-reply-login" href="../../blog/wp-login.php@redirect_to=http_253a_252f_252fwww.learncpp.com_252fcpp-tutorial_252f68-pointers-arrays-and-pointer-arithmetic_252f">Log in to Reply</a></span>		 
		</div>
		<p>Actually, there is one place difference could matter</p>
<pre>
//file1.cpp
int myarray[10];

//file2.cpp
extern int* myarray;

void foo()
{
    myarray[0] = 0;
}
</pre>
<p>a main function in file2.cpp calling &#8220;foo&#8221; will crash</p>
		</div>
</li>
		<li class="comment odd alt thread-odd thread-alt depth-1 clearfix" id="comment-64584">
		<div id="div-comment-64584" class="clearfix comment-container">
		<div class="comment-author vcard">
		<img alt='' src='../../../1.gravatar.com/avatar/30cbb622a03025918fae6e89edd664d8@s=65&d=http_253a_252f_252f1.gravatar.com_252favatar_252fad516503a11cd5ca435acc9bb6523536_253fs_253d65&r=g' class='avatar avatar-65 photo' height='65' width='65' />		<span class="authorname">Realth</span>
		</div>
				<div class="comment-meta commentmetadata">
		<a href="comment-page-1/#comment-64584">
		July 19, 2009 at 1:36 am</a>
        <span class="comment-reply-link"><a rel="nofollow" class="comment-reply-login" href="../../blog/wp-login.php@redirect_to=http_253a_252f_252fwww.learncpp.com_252fcpp-tutorial_252f68-pointers-arrays-and-pointer-arithmetic_252f">Log in to Reply</a></span>		 
		</div>
		<pre>
#include 

int main()
{
    using namespace std;
    char szName[7] = "Mollie";

    cout &lt;&lt; *(&amp;szName); // Returns  Mollie

    cout &lt;&lt; &#38;szName; // Returns Address of first element of szName

    cin.clear();
    cin.ignore(255, 'n');
    cin.get();
}
<!--formatted--></pre>
<p>Why does cout &lt;&lt; *(&amp;szName) output the entire string ? Shouldn&#8217;t it only return the first character of szName ? &amp;szName returns the address of the first element right ? So derefrencing it should give the first character.</p>
<p>Also why does my compiler complain when I try this :</p>
<pre>
char *pnPntr = &amp;szName;
</pre>
<p>I want pnPntr to point to the first Address of szName.</p>
<p>Yet this works,</p>
<pre>
char *pnPntr = szName;
</pre>
<p>Depending on what is on the left of szName, szName means completely different things! </p>
<pre>
cout &lt;&lt; szName ;
<!--formatted--></pre>
<p>I get mollie..</p>
<pre>
char *pnPntr=szName;
</pre>
<p>put a pointer declaration and suddenly szname is and address! </p>
<pre>
cout &lt;&lt; *pnPntr;
<!--formatted--></pre>
<p>It&#8217;s and address again! ??</p>
<p>Is this just how it is ?</p>
<p>Excellent tutorials by the way!</p>
		</div>
<ul class='children'>
		<li class="comment even depth-2 clearfix" id="comment-65083">
		<div id="div-comment-65083" class="clearfix comment-container">
		<div class="comment-author vcard">
		<img alt='' src='../../../0.gravatar.com/avatar/8cd11a1ee9d39e519f665b70496dcaac@s=65&d=http_253a_252f_252f0.gravatar.com_252favatar_252fad516503a11cd5ca435acc9bb6523536_253fs_253d65&r=g' class='avatar avatar-65 photo' height='65' width='65' />		<span class="authorname">eric</span>
		</div>
				<div class="comment-meta commentmetadata">
		<a href="comment-page-1/#comment-65083">
		July 26, 2009 at 3:18 pm</a>
        <span class="comment-reply-link"><a rel="nofollow" class="comment-reply-login" href="../../blog/wp-login.php@redirect_to=http_253a_252f_252fwww.learncpp.com_252fcpp-tutorial_252f68-pointers-arrays-and-pointer-arithmetic_252f">Log in to Reply</a></span>		 
		</div>
		<p>*(&amp;szName) is doing inverse operations, so it ends up just szName. The value of szName is actually an address (because it&#8217;s a pointer to the first address in the array), but the compilers treat it differently because it&#8217;s a string. The compiler jumps to the address in szName and reads the values starting from that address until it hits a null.<br />
This is probably done for convenience, because when you&#8217;re looking at an array you usually want to see its contents and not its address. To access the first element, use *szName or szName[0]</p>
<p>After playing with it for awhile, I found that this will work setting to the address of the szName. I have no idea why, however. Intuitively, this should set pnPntr to the address of the first element in the array which szName points to, but the value of (int*)szName matches &amp;szName:</p>
<pre>int *pnPntr = (int*)szName;</pre>
<p>However, changing the contents via &#8220;*pnPntr = &#8220;doesn&#8217;t work too well, as you&#8217;re limited to the first 4 characters&#8217; ASCII values (my compiler had the added annoyance of outputting these in decimal rather than hex).</p>
<p>Hopefully someone else can be a little more clear on all this, because I don&#8217;t know enough about it to say, yet.</p>
		</div>
</li>
</ul>
</li>
		<li class="comment odd alt thread-even depth-1 clearfix" id="comment-74230">
		<div id="div-comment-74230" class="clearfix comment-container">
		<div class="comment-author vcard">
		<img alt='' src='../../../1.gravatar.com/avatar/99f543fafe2bc7d30352daeea812da4e@s=65&d=http_253a_252f_252f1.gravatar.com_252favatar_252fad516503a11cd5ca435acc9bb6523536_253fs_253d65&r=g' class='avatar avatar-65 photo' height='65' width='65' />		<span class="authorname"><a href='../../../n/a' rel='external nofollow' class='url'>Biosci3c</a></span>
		</div>
				<div class="comment-meta commentmetadata">
		<a href="comment-page-1/#comment-74230">
		December 14, 2009 at 9:08 pm</a>
        <span class="comment-reply-link"><a rel="nofollow" class="comment-reply-login" href="../../blog/wp-login.php@redirect_to=http_253a_252f_252fwww.learncpp.com_252fcpp-tutorial_252f68-pointers-arrays-and-pointer-arithmetic_252f">Log in to Reply</a></span>		 
		</div>
		<p>Wow. I finally understand pointers! Yay!</p>
<p>That is a pretty hand way of stepping through an array.</p>
		</div>
</li>
		<li class="comment even thread-odd thread-alt depth-1 clearfix" id="comment-83629">
		<div id="div-comment-83629" class="clearfix comment-container">
		<div class="comment-author vcard">
		<img alt='' src='../../../0.gravatar.com/avatar/a7cfd9899d7724cc70300b340c2185e9@s=65&d=http_253a_252f_252f0.gravatar.com_252favatar_252fad516503a11cd5ca435acc9bb6523536_253fs_253d65&r=g' class='avatar avatar-65 photo' height='65' width='65' />		<span class="authorname">Andreas</span>
		</div>
				<div class="comment-meta commentmetadata">
		<a href="comment-page-1/#comment-83629">
		April 26, 2010 at 2:03 pm</a>
        <span class="comment-reply-link"><a rel="nofollow" class="comment-reply-login" href="../../blog/wp-login.php@redirect_to=http_253a_252f_252fwww.learncpp.com_252fcpp-tutorial_252f68-pointers-arrays-and-pointer-arithmetic_252f">Log in to Reply</a></span>		 
		</div>
		<p>I really appreciate your guide! THANKS</p>
		</div>
</li>
		<li class="comment odd alt thread-even depth-1 clearfix" id="comment-90157">
		<div id="div-comment-90157" class="clearfix comment-container">
		<div class="comment-author vcard">
		<img alt='' src='../../../1.gravatar.com/avatar/3e89572528d7b4d262e67f6df6620cc9@s=65&d=http_253a_252f_252f1.gravatar.com_252favatar_252fad516503a11cd5ca435acc9bb6523536_253fs_253d65&r=g' class='avatar avatar-65 photo' height='65' width='65' />		<span class="authorname"><a href='../../../www.blackninjagames.com/default.htm' rel='external nofollow' class='url'>GManNickG</a></span>
		</div>
				<div class="comment-meta commentmetadata">
		<a href="comment-page-1/#comment-90157">
		August 12, 2010 at 6:33 pm</a>
        <span class="comment-reply-link"><a rel="nofollow" class="comment-reply-login" href="../../blog/wp-login.php@redirect_to=http_253a_252f_252fwww.learncpp.com_252fcpp-tutorial_252f68-pointers-arrays-and-pointer-arithmetic_252f">Log in to Reply</a></span>		 
		</div>
		<p>This contains misinformation: &#8220;anArray is actually a pointer that points to the first element of the array&#8221;.</p>
<p>An array is not a pointer, ever. An array is an array, a pointer is a pointer. This isn&#8217;t up for discussion, read the language standard. An array has an implicit array-to-pointer conversion, but that doesn&#8217;t make it a pointer anymore than it makes a function a pointer because a function-to-pointer conversion exists.</p>
<p>The type of
<pre>a</pre>
<p> in
<pre>int a[10]</pre>
<p> is
<pre>int[10]</pre>
<p> There are no pointers there.</p>
		</div>
<ul class='children'>
		<li class="comment even depth-2 clearfix" id="comment-91828">
		<div id="div-comment-91828" class="clearfix comment-container">
		<div class="comment-author vcard">
		<img alt='' src='../../../0.gravatar.com/avatar/ed899b5d525d91fb6bd98319502a1d65@s=65&d=http_253a_252f_252f0.gravatar.com_252favatar_252fad516503a11cd5ca435acc9bb6523536_253fs_253d65&r=g' class='avatar avatar-65 photo' height='65' width='65' />		<span class="authorname">Chris</span>
		</div>
				<div class="comment-meta commentmetadata">
		<a href="comment-page-1/#comment-91828">
		September 10, 2010 at 10:39 pm</a>
        <span class="comment-reply-link"><a rel="nofollow" class="comment-reply-login" href="../../blog/wp-login.php@redirect_to=http_253a_252f_252fwww.learncpp.com_252fcpp-tutorial_252f68-pointers-arrays-and-pointer-arithmetic_252f">Log in to Reply</a></span>		 
		</div>
		<p>First, thanks so much for your work on this&#8230;your tutorial is a huge help, Alex!  </p>
<p>Walking through this portion on the use of pointers with arrays, I&#8217;m slightly confused by why using the reference operator (&amp;) on a pointer created for a char array won&#8217;t return the value&#8217;s address, while one created for an int array will.  </p>
<p>For example the following code:</p>
<pre>
#include &lt;iostream&gt;

int main()
{
	using namespace std;
	//string myString = &quot;Christopher&quot;;
	char myStringArray[] = &quot;Christopher&quot;;
	int arraySize = sizeof(myStringArray)/sizeof(myStringArray[0]);
	int nVowels = 0;

	for (char *pnPtr = myStringArray; pnPtr &lt; myStringArray + arraySize; pnPtr += 1)
	{
		switch (toupper(*pnPtr))
		{
			case &#39;A&#39;:
			case &#39;E&#39;:
			case &#39;I&#39;:
			case &#39;O&#39;:
			case &#39;U&#39;:
				nVowels++;
				break;
		}
		cout &lt;&lt; &quot;pnPtr: &quot; &lt;&lt; pnPtr &lt;&lt; &quot;\t*pnPtr: &quot; &lt;&lt; *pnPtr &lt;&lt; endl;
	}
		//cout &lt;&lt; myStringArray &lt;&lt; &quot; has &quot; &lt;&lt; nVowels &lt;&lt; &quot; vowels.&quot; &lt;&lt; endl;
}</pre>
<p>Will output the following:<br />
<code><br />
pnPtr: Christopher	*pnPtr: C<br />
pnPtr: hristopher	*pnPtr: h<br />
pnPtr: ristopher	*pnPtr: r<br />
pnPtr: istopher	*pnPtr: i<br />
pnPtr: stopher	*pnPtr: s<br />
pnPtr: topher	*pnPtr: t<br />
pnPtr: opher	*pnPtr: o<br />
pnPtr: pher	*pnPtr: p<br />
pnPtr: her	*pnPtr: h<br />
pnPtr: er	*pnPtr: e<br />
pnPtr: r	*pnPtr: r<br />
pnPtr: 	*pnPtr:<br />
Christopher has 3 vowels.<br />
</code></p>
<p>&#8230;rather than a hex address for pnPtr.</p>
<p>While setting up a random integer array and carrying out the same process (sans vowel counting)&#8230;</p>
<pre>
#include &lt;iostream&gt;

int main()
{
	using namespace std;
	int myStringArray[] = {1, 2, 3, 4, 5, 10, 20};
	int arraySize = sizeof(myStringArray)/sizeof(myStringArray[0]);

	for (int *pnPtr = myStringArray; pnPtr &lt; myStringArray + arraySize; pnPtr += 1)
		cout &lt;&lt; &quot;pnPtr: &quot; &lt;&lt; pnPtr &lt;&lt; &quot;\t*pnPtr: &quot; &lt;&lt; *pnPtr &lt;&lt; endl;

}</pre>
<p>&#8230;generates this output, with address output for the value of pnPtr and specific array entries for *pnPtr.  (I expected the char array output to similar to this.)  </p>
<p><code><br />
pnPtr: 0xbfc6e1d8	*pnPtr: 1<br />
pnPtr: 0xbfc6e1dc	*pnPtr: 2<br />
pnPtr: 0xbfc6e1e0	*pnPtr: 3<br />
pnPtr: 0xbfc6e1e4	*pnPtr: 4<br />
pnPtr: 0xbfc6e1e8	*pnPtr: 5<br />
pnPtr: 0xbfc6e1ec	*pnPtr: 10<br />
pnPtr: 0xbfc6e1f0	*pnPtr: 20<br />
</code></p>
<p>Can you explain why C++ deals with them differently or what I&#8217;m doing improperly?</p>
		</div>
</li>
</ul>
</li>
		<li class="comment byuser comment-author-jeantle odd alt thread-odd thread-alt depth-1 clearfix" id="comment-92534">
		<div id="div-comment-92534" class="clearfix comment-container">
		<div class="comment-author vcard">
		<img alt='' src='../../../1.gravatar.com/avatar/7837ed0e56ec09eca9cfe1fcb8acce94@s=65&d=http_253a_252f_252f1.gravatar.com_252favatar_252fad516503a11cd5ca435acc9bb6523536_253fs_253d65&r=g' class='avatar avatar-65 photo' height='65' width='65' />		<span class="authorname"><a href='../../../www.jeantle.webs.com/default.htm' rel='external nofollow' class='url'>jeantle</a></span>
		</div>
				<div class="comment-meta commentmetadata">
		<a href="comment-page-1/#comment-92534">
		September 23, 2010 at 6:16 am</a>
        <span class="comment-reply-link"><a rel="nofollow" class="comment-reply-login" href="../../blog/wp-login.php@redirect_to=http_253a_252f_252fwww.learncpp.com_252fcpp-tutorial_252f68-pointers-arrays-and-pointer-arithmetic_252f">Log in to Reply</a></span>		 
		</div>
		<p>wow.! this site is great,<br />
it somehow helps me to learn more.</p>
<p>can i ask?<br />
how i can i determine the numbers even and odd inputs using the pointer arithmetic?</p>
		</div>
</li>
		<li class="comment even thread-even depth-1 clearfix" id="comment-92724">
		<div id="div-comment-92724" class="clearfix comment-container">
		<div class="comment-author vcard">
		<img alt='' src='../../../0.gravatar.com/avatar/641d0c54697cea1b890456cd9140331e@s=65&d=http_253a_252f_252f0.gravatar.com_252favatar_252fad516503a11cd5ca435acc9bb6523536_253fs_253d65&r=g' class='avatar avatar-65 photo' height='65' width='65' />		<span class="authorname">WGL</span>
		</div>
				<div class="comment-meta commentmetadata">
		<a href="comment-page-1/#comment-92724">
		September 26, 2010 at 6:02 am</a>
        <span class="comment-reply-link"><a rel="nofollow" class="comment-reply-login" href="../../blog/wp-login.php@redirect_to=http_253a_252f_252fwww.learncpp.com_252fcpp-tutorial_252f68-pointers-arrays-and-pointer-arithmetic_252f">Log in to Reply</a></span>		 
		</div>
		<p>I have a question regarding a simple program which indexes using pointer arithmetic in order to reverse the case of a string. The code is this:</p>
<pre>
#include &lt;iostream&gt;
#include &lt;cctype&gt;
using namespace std;

int main()
{
	char str[] = &quot;This is a String&quot;;
	char *p = str;

	cout &lt;&lt; &quot;Original string: &quot; &lt;&lt; str &lt;&lt; &#39;n&#39;;

	while(*p)
	{
		if(isupper(*p)) (*p) = tolower(*p);
		if(islower(*p)) (*p) = toupper(*p);
		p++;
	}

	cout &lt;&lt; &quot;Inverted-case string: &quot; &lt;&lt; str &lt;&lt; &#39;n&#39;;

	return 0;
}
<!--formatted--></pre>
<p>Unfortunately, the output gives a completely uppercase string, &#8220;THIS IS A STRING&#8221;, rather than the inverted case where a few letters should now be lowercase. I cannot see what the problem is! The code is not complicated, but admittedly I am not used to using pointers to index an array (I am a scientist writing a program which needs to be as efficient as possible &#8211; I have been led to believe that pointer arithmetic can produce faster code). </p>
<p>Any help would be appreciated!</p>
		</div>
<ul class='children'>
		<li class="comment byuser comment-author-ebscroggins odd alt depth-2 clearfix" id="comment-95024">
		<div id="div-comment-95024" class="clearfix comment-container">
		<div class="comment-author vcard">
		<img alt='' src='../../../0.gravatar.com/avatar/c3354e41abfde5b2e6170982fad8512a@s=65&d=http_253a_252f_252f0.gravatar.com_252favatar_252fad516503a11cd5ca435acc9bb6523536_253fs_253d65&r=g' class='avatar avatar-65 photo' height='65' width='65' />		<span class="authorname">Gene</span>
		</div>
				<div class="comment-meta commentmetadata">
		<a href="comment-page-1/#comment-95024">
		December 11, 2010 at 6:37 am</a>
        <span class="comment-reply-link"><a rel="nofollow" class="comment-reply-login" href="../../blog/wp-login.php@redirect_to=http_253a_252f_252fwww.learncpp.com_252fcpp-tutorial_252f68-pointers-arrays-and-pointer-arithmetic_252f">Log in to Reply</a></span>		 
		</div>
		<p>You probably discovered the reason for uppercase only a long time ago, but here&#8217;s an explanation in case you left this unsolved.  The teacher in me will explode unless the answer can be revealed ;-)</p>
<p>You need to add &#8220;else&#8221; in between the first and second &#8220;if&#8221; clause (or you could use switch&#8230;case conditional structure instead).</p>
<p>The current logic of your original code says, &#8220;if current character is uppercase, make it lowercase&#8221;, then &#8220;if current character is lowercase&#8221; (and it always will be at this point), &#8220;make it uppercase&#8221;.</p>
<p>I&#8217;ve been a programmer for 23 years and I STILL sometimes miss obvious mistakes like this, so don&#8217;t feel bad about missing something so obvious.</p>
<p>There is a valuable underlying principle here that might help you spot things like this in the future:</p>
<p>When logical conditions are not behaving as expected, start by checking on the simplest things first, not the complicated things.</p>
<p>In other words, your problem had nothing to do with pointers.</p>
<p>Another way to solve the problem is to swallow your pride and ask someone else to look your code over and tell you what&#8217;s wrong with it.  Just be warned that it will be embarassing!  I&#8217;ve spent hours at times trying to figure out why my code isn&#8217;t working, only to watch as someone who just glances at it sees the problem instantly!</p>
<p>It&#8217;s painful to do that, but you&#8217;ll help the other person feel smart and important.  And that&#8217;s actually more valuable in the long run than figuring the code out yourself most of the time.</p>
<p>And I agree with everybody else about this site.  One of the best C++ tutorials on the web.  Thanks, Alex!</p>
<p>Hope this helps&#8230;</p>
		</div>
</li>
</ul>
</li>
		<li class="comment byuser comment-author-dr-haxx even thread-odd thread-alt depth-1 clearfix" id="comment-94840">
		<div id="div-comment-94840" class="clearfix comment-container">
		<div class="comment-author vcard">
		<img alt='' src='../../../0.gravatar.com/avatar/861708630ff4438b182a5ce611c7a2e6@s=65&d=http_253a_252f_252f0.gravatar.com_252favatar_252fad516503a11cd5ca435acc9bb6523536_253fs_253d65&r=g' class='avatar avatar-65 photo' height='65' width='65' />		<span class="authorname">Dr. HaXX</span>
		</div>
				<div class="comment-meta commentmetadata">
		<a href="comment-page-1/#comment-94840">
		October 31, 2010 at 7:24 am</a>
        <span class="comment-reply-link"><a rel="nofollow" class="comment-reply-login" href="../../blog/wp-login.php@redirect_to=http_253a_252f_252fwww.learncpp.com_252fcpp-tutorial_252f68-pointers-arrays-and-pointer-arithmetic_252f">Log in to Reply</a></span>		 
		</div>
		<p>I keep seeing stuff like:</p>
<p>[ CODE ] somerandomstufftypedhere [ /CODE ]</p>
<p>How is that possible?</p>
		</div>
<ul class='children'>
		<li class="comment byuser comment-author-dr-haxx odd alt depth-2 clearfix" id="comment-94856">
		<div id="div-comment-94856" class="clearfix comment-container">
		<div class="comment-author vcard">
		<img alt='' src='../../../0.gravatar.com/avatar/861708630ff4438b182a5ce611c7a2e6@s=65&d=http_253a_252f_252f0.gravatar.com_252favatar_252fad516503a11cd5ca435acc9bb6523536_253fs_253d65&r=g' class='avatar avatar-65 photo' height='65' width='65' />		<span class="authorname">Dr. HaXX</span>
		</div>
				<div class="comment-meta commentmetadata">
		<a href="comment-page-1/#comment-94856">
		November 2, 2010 at 12:39 pm</a>
        <span class="comment-reply-link"><a rel="nofollow" class="comment-reply-login" href="../../blog/wp-login.php@redirect_to=http_253a_252f_252fwww.learncpp.com_252fcpp-tutorial_252f68-pointers-arrays-and-pointer-arithmetic_252f">Log in to Reply</a></span>		 
		</div>
		<p>Nvm, I see it has been fixed now. Maybe it was just my crappy pc.<br />
BTW: Thx for your tutorials!</p>
		</div>
</li>
</ul>
</li>
		<li class="comment byuser comment-author-matt even thread-even depth-1 clearfix" id="comment-95707">
		<div id="div-comment-95707" class="clearfix comment-container">
		<div class="comment-author vcard">
		<img alt='' src='../../../0.gravatar.com/avatar/ee1048793d9fec6ef95a5a7c6790ab1b@s=65&d=http_253a_252f_252f0.gravatar.com_252favatar_252fad516503a11cd5ca435acc9bb6523536_253fs_253d65&r=g' class='avatar avatar-65 photo' height='65' width='65' />		<span class="authorname">Matt</span>
		</div>
				<div class="comment-meta commentmetadata">
		<a href="comment-page-1/#comment-95707">
		July 14, 2011 at 4:45 pm</a>
        <span class="comment-reply-link"><a rel="nofollow" class="comment-reply-login" href="../../blog/wp-login.php@redirect_to=http_253a_252f_252fwww.learncpp.com_252fcpp-tutorial_252f68-pointers-arrays-and-pointer-arithmetic_252f">Log in to Reply</a></span>		 
		</div>
		<p>I have a question about the use of the test-condition in the loop of this example and was hoping you could clear it up for me Alex.</p>
<p>const int nArraySize = 7;<br />
char szName[nArraySize] = &#8220;Mollie&#8221;;<br />
int nVowels = 0;<br />
for (char *pnPtr = szName; pnPtr &lt; szName + nArraySize; pnPtr++)<br />
{<br />
    switch (*pnPtr)<br />
    {<br />
        case &#039;A&#039;:<br />
        case &#039;a&#039;:<br />
        case &#039;E&#039;:<br />
        case &#039;e&#039;:<br />
        case &#039;I&#039;:<br />
        case &#039;i&#039;:<br />
        case &#039;O&#039;:<br />
        case &#039;o&#039;:<br />
        case &#039;U&#039;:<br />
        case &#039;u&#039;:<br />
            nVowels++;<br />
            break;<br />
    }<br />
}</p>
<p>cout &lt;&lt; szName &lt;&lt; &quot; has &quot; &lt;&lt; nVowels &lt;&lt; &quot; vowels&quot; &lt;&lt; endl;</p>
<p>If I understand this correctly, in pnPtr &lt; szName + nArraySize;, szName is the name of the array which points to the address of element 0 in the array. nArraySize evaluates to 7, the actual size of the array which is equivalent to the pointer addition of pPtr (for the sake of making it similar to your earlier pointer arithmetic example) + 7. </p>
<p>szName points to element[0] or the &quot;M&quot;, pPtr + 1 to &quot;o&quot;, 2 to &quot;l&quot;, 3 to the second &quot;l&quot;, 4 to &quot;i&quot;, 5 to &quot;e&quot;, 6 to the null terminator, and because the less-than sign was used instead of &lt;=, the final element must be 1 integer higher than the size of the array so the loop ends. In this case though since you&#039;re using addresses, would it be that pPtr + 7 be the address of the next char in memory as opposed to some integer index number?</p>
		</div>
</li>
		<li class="comment byuser comment-author-matt odd alt thread-odd thread-alt depth-1 clearfix" id="comment-95708">
		<div id="div-comment-95708" class="clearfix comment-container">
		<div class="comment-author vcard">
		<img alt='' src='../../../0.gravatar.com/avatar/ee1048793d9fec6ef95a5a7c6790ab1b@s=65&d=http_253a_252f_252f0.gravatar.com_252favatar_252fad516503a11cd5ca435acc9bb6523536_253fs_253d65&r=g' class='avatar avatar-65 photo' height='65' width='65' />		<span class="authorname">Matt</span>
		</div>
				<div class="comment-meta commentmetadata">
		<a href="comment-page-1/#comment-95708">
		July 14, 2011 at 4:49 pm</a>
        <span class="comment-reply-link"><a rel="nofollow" class="comment-reply-login" href="../../blog/wp-login.php@redirect_to=http_253a_252f_252fwww.learncpp.com_252fcpp-tutorial_252f68-pointers-arrays-and-pointer-arithmetic_252f">Log in to Reply</a></span>		 
		</div>
		<p>Oh, In my haste writing my comment I forgot to mention that the main question was if I correctly understand how the test condition of the loop was working. That last bit at the end was something I just thought to ask at the last second.</p>
		</div>
<ul class='children'>
		<li class="comment byuser comment-author-zingmars even depth-2 clearfix" id="comment-95757">
		<div id="div-comment-95757" class="clearfix comment-container">
		<div class="comment-author vcard">
		<img alt='' src='../../../0.gravatar.com/avatar/21b2deaaa0bcf172aa88051b6cf7ba1f@s=65&d=http_253a_252f_252f0.gravatar.com_252favatar_252fad516503a11cd5ca435acc9bb6523536_253fs_253d65&r=g' class='avatar avatar-65 photo' height='65' width='65' />		<span class="authorname"><a href='../../../127.0.0.1/default.htm' rel='external nofollow' class='url'>zingmars</a></span>
		</div>
				<div class="comment-meta commentmetadata">
		<a href="comment-page-1/#comment-95757">
		July 19, 2011 at 3:34 am</a>
        <span class="comment-reply-link"><a rel="nofollow" class="comment-reply-login" href="../../blog/wp-login.php@redirect_to=http_253a_252f_252fwww.learncpp.com_252fcpp-tutorial_252f68-pointers-arrays-and-pointer-arithmetic_252f">Log in to Reply</a></span>		 
		</div>
		<p>You could&#8217;ve used a simple if statement, and no this code doesn&#8217;t work, and it will add to nVowels if there is a lowercase u.</p>
		</div>
</li>
</ul>
</li>
	
	</ul>
	<!-- / Comment List -->

	



	
	<p>You must be <a href="../../blog/wp-login.php@redirect_to=http_253a_252f_252fwww.learncpp.com_252fcpp-tutorial_252f68-pointers-arrays-and-pointer-arithmetic_252f">logged in</a> to post a comment.</p>

		

<div class="clearfix navigation-bottom">
		<div class="older">&laquo; <a href="../67-introduction-to-pointers/default.htm" rel="prev">6.7 &#8212; Introduction to pointers</a> &nbsp;</div><div class="newer">&nbsp; <a href="../69-dynamic-memory-allocation-with-new-and-delete/default.htm" rel="next">6.9 &#8212; Dynamic memory allocation with new and delete</a> &raquo;</div></div>		
			



</td>
<!-- / Main Column -->


<!-- Right Sidebar -->
<td id="right">

	<div id="text-1" class="widget widget_text">			<div class="textwidget"><script type="text/javascript"><!--
google_ad_client = "pub-0588844875925051";
/* Wide Skyscraper Right Bar */
google_ad_slot = "0955932809";
google_ad_width = 160;
google_ad_height = 600;
//-->
</script>
<acript type="text/javascript"
src="../../../pagead2.googlesyndication.com/pagead/show_ads.js">
</script></div>
		</div><div id="archives-2" class="widget widget_archive"><div class="widget-title"><h3>Archives</h3></div>		<ul>
			<li><a href='../../2011/11/default.htm' title='November 2011'>November 2011</a></li>
	<li><a href='../../2011/10/default.htm' title='October 2011'>October 2011</a></li>
	<li><a href='../../2011/09/default.htm' title='September 2011'>September 2011</a></li>
	<li><a href='../../2010/10/default.htm' title='October 2010'>October 2010</a></li>
	<li><a href='../../2010/07/default.htm' title='July 2010'>July 2010</a></li>
	<li><a href='../../2009/10/default.htm' title='October 2009'>October 2009</a></li>
	<li><a href='../../2009/09/default.htm' title='September 2009'>September 2009</a></li>
	<li><a href='../../2009/03/default.htm' title='March 2009'>March 2009</a></li>
	<li><a href='../../2008/12/default.htm' title='December 2008'>December 2008</a></li>
	<li><a href='../../2008/10/default.htm' title='October 2008'>October 2008</a></li>
	<li><a href='../../2008/09/default.htm' title='September 2008'>September 2008</a></li>
	<li><a href='../../2008/08/default.htm' title='August 2008'>August 2008</a></li>
	<li><a href='../../2008/06/default.htm' title='June 2008'>June 2008</a></li>
	<li><a href='../../2008/05/default.htm' title='May 2008'>May 2008</a></li>
	<li><a href='../../2008/04/default.htm' title='April 2008'>April 2008</a></li>
	<li><a href='../../2008/03/default.htm' title='March 2008'>March 2008</a></li>
	<li><a href='../../2008/02/default.htm' title='February 2008'>February 2008</a></li>
	<li><a href='../../2008/01/default.htm' title='January 2008'>January 2008</a></li>
	<li><a href='../../2007/12/default.htm' title='December 2007'>December 2007</a></li>
	<li><a href='../../2007/11/default.htm' title='November 2007'>November 2007</a></li>
	<li><a href='../../2007/10/default.htm' title='October 2007'>October 2007</a></li>
	<li><a href='../../2007/09/default.htm' title='September 2007'>September 2007</a></li>
	<li><a href='../../2007/08/default.htm' title='August 2007'>August 2007</a></li>
	<li><a href='../../2007/07/default.htm' title='July 2007'>July 2007</a></li>
	<li><a href='../../2007/06/default.htm' title='June 2007'>June 2007</a></li>
	<li><a href='../../2007/05/default.htm' title='May 2007'>May 2007</a></li>
		</ul>
</div>
</td>
<!-- / Right Sidebar -->

</tr>
<!-- / Main Body -->
<tr>

<!-- Footer -->
<td id="footer" colspan="3">

    <p>
    Copyright &copy; 2011 <a href="../../default.htm">Learn C++</a> - All Rights Reserved<br />Powered by <a href="../../../wordpress.org/default.htm">WordPress</a> &amp; the <a href="../../../wordpress.bytesforall.com/default.htm" title="Customizable WordPress themes">Atahualpa Theme</a> by <a href="../../../www.bytesforall.com/default.htm" title="BFA Webdesign">BytesForAll</a>. Discuss on our <a href="../../../forum.bytesforall.com/default.htm" title="Atahualpa &amp; WordPress">WP Forum</a>    </p>
    
    
    <script type='text/javascript' src='../../blog/wp-content/plugins/syntaxhighlighter/syntaxhighlighter3/scripts/shcore.js@ver=3.0.83c'></script>
<script type='text/javascript' src='../../blog/wp-content/plugins/syntaxhighlighter/syntaxhighlighter3/scripts/shbrushcpp.js@ver=3.0.83c'></script>
<script type='text/javascript'>
	(function(){
		var corecss = document.createElement('link');
		var themecss = document.createElement('link');
		var corecssurl = "../../blog/wp-content/plugins/syntaxhighlighter/syntaxhighlighter3/styles/shcore.css@ver=3.0.83c.css";
		if ( corecss.setAttribute ) {
				corecss.setAttribute( "rel", "stylesheet" );
				corecss.setAttribute( "type", "text/css" );
				corecss.setAttribute( "href", corecssurl );
		} else {
				corecss.rel = "stylesheet";
				corecss.href = corecssurl;
		}
		document.getElementsByTagName("head")[0].insertBefore( corecss, document.getElementById("syntaxhighlighteranchor") );
		var themecssurl = "../../blog/wp-content/plugins/syntaxhighlighter/syntaxhighlighter3/styles/shthemedefault.css@ver=3.0.83c.css";
		if ( themecss.setAttribute ) {
				themecss.setAttribute( "rel", "stylesheet" );
				themecss.setAttribute( "type", "text/css" );
				themecss.setAttribute( "href", themecssurl );
		} else {
				themecss.rel = "stylesheet";
				themecss.href = themecssurl;
		}
		//document.getElementById("syntaxhighlighteranchor").appendChild(themecss);
		document.getElementsByTagName("head")[0].insertBefore( themecss, document.getElementById("syntaxhighlighteranchor") );
	})();
	SyntaxHighlighter.config.strings.expandSource = '+ expand source';
	SyntaxHighlighter.config.strings.help = '?';
	SyntaxHighlighter.config.strings.alert = 'SyntaxHighlighter\n\n';
	SyntaxHighlighter.config.strings.noBrush = 'Can\'t find brush for: ';
	SyntaxHighlighter.config.strings.brushNotHtmlScript = 'Brush wasn\'t configured for html-script option: ';
	SyntaxHighlighter.defaults['pad-line-numbers'] = false;
	SyntaxHighlighter.defaults['toolbar'] = false;
	SyntaxHighlighter.all();
</script>
<!--stats_footer_test--><script src="../../../stats.wordpress.com/e-201148.js" type="text/javascript"></script>
<script type="text/javascript">
st_go({blog:'3928254',v:'ext',post:'100'});
var load_cmc = function(){linktracker_init(3928254,100,2);};
if ( typeof addLoadEvent != 'undefined' ) addLoadEvent(load_cmc);
else load_cmc();
</script>

</td>
<!-- / Footer -->

</tr>
</table><!-- / layout -->
</div><!-- / container -->
</div><!-- / wrapper -->
</body>
</html>
<!-- Dynamic page generated in 0.512 seconds. -->
<!-- Cached page generated by WP-Super-Cache on 2011-12-02 06:34:10 -->
<!-- Compression = gzip -->