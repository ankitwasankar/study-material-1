<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd"><meta http-equiv="Content-Type" content="text/html; charset=utf-8"><!-- saved from url=(0074)http://www.learncpp.com/cpp-tutorial/79-the-stack-and-the-heap/default.htm -->

<html xmlns="http://www.w3.org/1999/xhtml" dir="ltr" lang="en-US">
<head>
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8" />
<meta http-equiv="X-UA-Compatible" content="IE=EmulateIE7" />
<title>7.9 &#8212; The stack and the heap &laquo; Learn C++</title>
<link rel="shortcut icon" href="../../blog/wp-content/themes/atahualpa353/images/favicon/learncpp.ico" /><link rel="canonical" href="default.htm" /><link rel="alternate" type="application/rss+xml" title="Learn C++ RSS Feed" href="../../feed/default.htm" />
<link rel="alternate" type="application/atom+xml" title="Learn C++ Atom Feed" href="../../feed/atom/default.htm" />
<link rel="pingback" href="http://www.learncpp.com/blog/xmlrpc.php" />
<link rel="alternate" type="application/rss+xml" title="Learn C++ &raquo; 7.9 &#8212; The stack and the heap Comments Feed" href="feed/default.htm" />
<script type='text/javascript' src='../../blog/wp-includes/js/l10n.js@ver=20101110'></script>
<script type='text/javascript' src='../../blog/wp-includes/js/jquery/jquery.js@ver=1.6.1'></script>
<script type='text/javascript' src='../../blog/wp-includes/js/comment-reply.js@ver=20090102'></script>
<script type='text/javascript' src='../../blog/wp-content/plugins/google-analyticator/external-tracking.min.js@ver=6.2'></script>
<link rel="EditURI" type="application/rsd+xml" title="RSD" href="http://www.learncpp.com/blog/xmlrpc.php?rsd" />
<link rel="wlwmanifest" type="application/wlwmanifest+xml" href="../../blog/wp-includes/wlwmanifest.xml" /> 
<link rel='index' title='Learn C++' href='../../default.htm' />
<link rel='start' title='Welcome to LearnCpp.com!' href='../../site-news/this-is-a-news-test-post/default.htm' />
<link rel='prev' title='7.8 &#8212; Function Pointers' href='../78-function-pointers/default.htm' />
<link rel='next' title='7.10 &#8212; Recursion' href='../710-recursion/default.htm' />
<link rel='canonical' href='default.htm' />
<link rel='shortlink' href='../../../wp.me/pgtuw-1w' />
<meta name="ROBOTS" content="INDEX" />

<!-- Powered by AdSense-Deluxe WordPress Plugin v0.8 - http://www.acmetech.com/blog/adsense-deluxe/ -->
<!-- wpSolution Code -->
        <script type="text/javascript">
            function wpSolutionToggle(solution, link, showtext, hidetext) {
                if (solution.style.display != 'none') {
                    solution.style.display = 'none';
                    link.innerHTML = showtext;
                    link.className = 'solution_link_show';
                } else {
                    solution.style.display = 'block';
                    link.innerHTML = hidetext;
                    link.className = 'solution_link_hide';
                }
            }
          </script>
<style type="text/css">body{text-align:center;margin:0;padding:0;font-family:verdana,arial,sans-serif;font-size:13px;line-height:1.4;color:#000000;background:#ddd;padding-top:20px;padding-bottom:20px}a:link,a:visited,a:active{color:#365DA0;font-weight:bold;text-decoration:none;}a:hover{color:#365DA0;font-weight:bold;text-decoration:underline}ul,ol,dl,p,h1,h2,h3,h4,h5,h6{margin-top:10px;margin-bottom:10px;padding-top:0;padding-bottom:0;}ul ul,ul ol,ol ul,ol ol{margin-top:0;margin-bottom:0}code,pre{font-family:"Courier New",Courier,monospace;font-size:1em}pre{overflow:auto;word-wrap:normal;padding-bottom:1.5em;overflow-y:hidden;width:99%}abbr[title],acronym[title]{border-bottom:1px dotted}hr{display:block;height:2px;border:none;margin:0.5em auto;color:#cccccc;background-color:#cccccc}table{font-size:1em;}div.post,ul.commentlist li,ol.commentlist li{word-wrap:break-word;}pre,.wp_syntax{word-wrap:normal;}div#wrapper{text-align:center;margin-left:auto;margin-right:auto;display:block;width:98%}* html div#wrapper{<!--width:expression"98%");-->}div#container{padding:20px;background:#fff;box-shadow:0 0 15px #333;-moz-box-shadow:0 0 15px #333;padding-left:20px;padding-right:20px;width:auto;margin-left:auto;margin-right:auto;text-align:left;display:block}table#layout{font-size:100%;width:100%;table-layout:fixed}.colone{width:200px}.colone-inner{width:200px}.coltwo{width:100% }.colthree-inner{width:200px}.colthree{width:200px}td#header{width:auto;padding:0}table#logoarea,table#logoarea tr,table#logoarea td{margin:0;padding:0;background:none;border:0}table#logoarea{width:100%;border-spacing:0px}img.logo{display:block;margin:0 10px 0 0}td.logoarea-logo{width:1%}h1.blogtitle,h2.blogtitle{ display:block;margin:0;padding:0;letter-spacing:-1px;line-height:1.0em;font-size:200%;text-transform:uppercase;font-smooth:always}h1.blogtitle a:link,h1.blogtitle a:visited,h1.blogtitle a:active,h2.blogtitle a:link,h2.blogtitle a:visited,h2.blogtitle a:active{ text-decoration:none;color:#000000;font-weight:normal;font-smooth:always}h1.blogtitle a:hover,h2.blogtitle a:hover{ text-decoration:none;color:#AC161B;font-weight:normal}p.tagline{margin:0;padding:0;font-size:1.2em;font-weight:normal;color:#444}td.feed-icons{white-space:nowrap;}div.rss-box{height:1%;display:block;padding:10px 0 10px 10px;margin:0;width:280px}a.comments-icon{height:22px;line-height:22px;margin:0 5px 0 5px;padding-left:22px;display:block;text-decoration:none;float:right;white-space:nowrap}a.comments-icon:link,a.commentss-icon:active,a.comments-icon:visited{background:transparent url(../../blog/wp-content/themes/atahualpa353/images/comment-gray.png) no-repeat scroll center left}a.comments-icon:hover{background:transparent url(../../blog/wp-content/themes/atahualpa353/images/comment.png) no-repeat scroll center left}a.posts-icon{height:22px;line-height:22px;margin:0 5px 0 0;padding-left:20px;display:block;text-decoration:none;float:right;white-space:nowrap}a.posts-icon:link,a.posts-icon:active,a.posts-icon:visited{background:transparent url(../../blog/wp-content/themes/atahualpa353/images/rss-gray.png) no-repeat scroll center left}a.posts-icon:hover{background:transparent url(../../blog/wp-content/themes/atahualpa353/images/rss.png) no-repeat scroll center left}a.email-icon{height:22px;line-height:22px;margin:0 5px 0 5px;padding-left:24px;display:block;text-decoration:none;float:right;white-space:nowrap}a.email-icon:link,a.email-icon:active,a.email-icon:visited{background:transparent url(../../blog/wp-content/themes/atahualpa353/images/email-gray.png) no-repeat scroll center left}a.email-icon:hover{background:transparent url(../../blog/wp-content/themes/atahualpa353/images/email.png) no-repeat scroll center left}td.search-box{height:1%}div.searchbox{height:35px;border-bottom:0;width:200px;margin:0;padding:0}div.searchbox-form{margin:5px 10px 5px 10px}div.horbar1,div.horbar2{font-size:1px;clear:both;display:block;position:relative;padding:0;margin:0;width:100%;}div.horbar1{height:0px;background:#ffffff;border-top:dashed 1px #cccccc}div.horbar2{height:0px;background:#ffffff;border-bottom:dashed 1px #cccccc}div.header-image-container{position:relative;margin:0;padding:0;height:150px;}div.clickable{position:absolute;top:0;left:0;z-index:3;margin:0;padding:0;width:100%;height:150px;}a.divclick:link,a.divclick:visited,a.divclick:active,a.divclick:hover{width:100%;height:100%;display:block;text-decoration:none}td#left{vertical-align:top;padding-right:20px}td#left-inner{vertical-align:top;padding-right:10px}td#right{vertical-align:top;padding-left:20px}td#right-inner{vertical-align:top;padding-left:10px}td#middle{vertical-align:top;width:100%;padding:10px 15px}td#footer{width:auto;background-color:#f7f7f7;border-top:solid 4px #eee;padding:10px;text-align:center;color:#888;font-size:11px}td#footer a:link,td#footer a:visited,td#footer a:active{text-decoration:none;color:#777777;font-weight:normal}td#footer a:hover{text-decoration:none;color:#777777;font-weight:normal}div.widget{display:block;width:auto;font-size:12px;margin:0 0 10px 0;padding:10px;border:solid 4px #eee}div.widget-title{display:block;width:auto}div.widget-title h3,td#left h3.tw-widgettitle,td#right h3.tw-widgettitle,td#left ul.tw-nav-list,td#right ul.tw-nav-list{padding:0;margin:0;font-size:0.9em;text-align:center;font-weight:normal;text-transform:uppercase;letter-spacing:1px;color:#333;border-bottom:solid 1px #eee;padding-bottom:10px;margin-bottom:10px}div.widget ul,div.textwidget{display:block;width:auto}div.widget select{width:98%;margin-top:5px;}div.widget ul{list-style-type:none;margin:0;padding:0;width:auto}div.widget ul li{display:block;margin:2px 0 2px 0px;padding:0 0 0 0px;border-left:solid 0px #CCCCCC}div.widget ul li:hover,div.widget ul li.sfhover{display:block;width:auto;border-left:solid 0px #000000;}div.widget ul li ul li{margin:2px 0 2px 5px;padding:0 0 0 0px;border-left:solid 0px #CCCCCC;}div.widget ul li ul li:hover,div.widget ul li ul li.sfhover{border-left:solid 0px #000000;}div.widget ul li ul li ul li{margin:2px 0 2px 5px;padding:0 0 0 0px;border-left:solid 0px #CCCCCC;}div.widget ul li ul li ul li:hover,div.widget ul li ul li ul li.sfhover{border-left:solid 0px #000000;}div.widget td a:link,div.widget td a:visited,div.widget td a:active,div.widget ul li a:link,div.widget ul li a:visited,div.widget ul li a:active{text-decoration:none;font-weight:normal;color:#365DA0;font-weight:normal;}div.widget ul li ul li a:link,div.widget ul li ul li a:visited,div.widget ul li ul li a:active{color:#365DA0;font-weight:normal;}div.widget ul li ul li ul li a:link,div.widget ul li ul li ul li a:visited,div.widget ul li ul li ul li a:active{color:#365DA0;font-weight:normal;}div.widget ul li a:hover{color:#365DA0;}div.widget ul li ul li a:hover{color:#365DA0;}div.widget ul li ul li ul li a:hover{color:#365DA0;}div.widget ul li a:link,div.widget ul li a:visited,div.widget ul li a:active,div.widget ul li a:hover{display:inline}* html div.widget ul li a:link,* html div.widget ul li a:visited,* html div.widget ul li a:active,* html div.widget ul li a:hover{height:1%; } div.widget_pages ul li,div.widget_categories ul li{border-left:0 !important;padding:0 !important}div.widget_pages ul li a:link,div.widget_pages ul li a:visited,div.widget_pages ul li a:active,div.widget_categories ul li a:link,div.widget_categories ul li a:visited,div.widget_categories ul li a:active{padding:0 0 0 0px;border-left:solid 0px #CCCCCC}div.widget_pages ul li a:hover,div.widget_categories ul li a:hover{border-left:solid 0px #000000;}div.widget_pages ul li ul li a:link,div.widget_pages ul li ul li a:visited,div.widget_pages ul li ul li a:active,div.widget_categories ul li ul li a:link,div.widget_categories ul li ul li a:visited,div.widget_categories ul li ul li a:active{padding:0 0 0 0px;border-left:solid 0px #CCCCCC}div.widget_pages ul li ul li a:hover,div.widget_categories ul li ul li a:hover{border-left:solid 0px #000000;}div.widget_pages ul li ul li ul li a:link,div.widget_pages ul li ul li ul li a:visited,div.widget_pages ul li ul li ul li a:active,div.widget_categories ul li ul li ul li a:link,div.widget_categories ul li ul li ul li a:visited,div.widget_categories ul li ul li ul li a:active{padding:0 0 0 0px;border-left:solid 0px #CCCCCC}div.widget_pages ul li ul li ul li a:hover,div.widget_categories ul li ul li ul li a:hover{border-left:solid 0px #000000;}div.widget_pages ul li a:link,div.widget_pages ul li a:active,div.widget_pages ul li a:visited,div.widget_pages ul li a:hover{display:block !important}div.widget_categories ul li a:link,div.widget_categories ul li a:active,div.widget_categories ul li a:visited,div.widget_categories ul li a:hover{display:inline !important}table.subscribe{width:100%}table.subscribe td.email-text{padding:0 0 5px 0;vertical-align:top}table.subscribe td.email-field{padding:0;width:100%}table.subscribe td.email-button{padding:0 0 0 5px}table.subscribe td.post-text{padding:7px 0 0 0;vertical-align:top}table.subscribe td.comment-text{padding:7px 0 0 0;vertical-align:top}div.post,div.page{display:block;margin:0 0 30px 0;border-top:solid 4px #eee;padding-top:20px}div.sticky{background:#eee url('../../blog/wp-content/themes/atahualpa353/images/sticky.gif') 99% 5% no-repeat;border:dashed 1px #cccccc;padding:10px}div.post-kicker{margin:0 0 5px 0}div.post-kicker a:link,div.post-kicker a:visited,div.post-kicker a:active{color:#999;text-decoration:none;text-transform:uppercase;letter-spacing:1px}div.post-kicker a:hover{color:#cc0000}div.post-headline{}div.post-headline h1,div.post-headline h2{ margin:0; padding:0;padding:0;margin:0;font-size:1.7em}div.post-headline h2 a:link,div.post-headline h2 a:visited,div.post-headline h2 a:active,div.post-headline h1 a:link,div.post-headline h1 a:visited,div.post-headline h1 a:active{}div.post-headline h2 a:hover,div.post-headline h1 a:hover{}div.post-byline{margin:5px 0 10px 0;color:#999;text-transform:uppercase;letter-spacing:1px;font-size:11px}div.post-byline a:link,div.post-byline a:visited,div.post-byline a:active{}div.post-byline a:hover{}div.post-bodycopy{}div.post-bodycopy p{margin:1em 0;padding:0;display:block}div.post-pagination{}div.post-footer{clear:both;display:block;color:#999;text-transform:uppercase;letter-spacing:1px;font-size:11px}div.post-footer a:link,div.post-footer a:visited,div.post-footer a:active{color:#999;font-weight:normal;text-decoration:none}div.post-footer a:hover{color:#333;font-weight:normal;text-decoration:underline}div.post-kicker img,div.post-byline img,div.post-footer img{border:0;padding:0;margin:0 0 -1px 0;background:none}span.post-ratings{display:inline-block;width:auto;white-space:nowrap}div.navigation-top{border-top:solid 4px #eee;padding:8px 0}div.navigation-middle{margin:10px 0 20px 0;padding:8px 0;border-top:solid 4px #eee;border-bottom:solid 4px #eee}div.navigation-bottom{margin:20px 0 0 0;padding:10px 0 0 0;border-top:solid 4px #eee}div.navigation-comments-above{margin:0 0 10px 0;padding:5px 0 5px 0}div.navigation-comments-below{margin:0 0 10px 0;padding:5px 0 5px 0}div.older{float:left;width:48%;text-align:left;margin:0;padding:0}div.newer{float:right;width:48%;text-align:right;margin:0;padding:0;}div.older-home{float:left;width:44%;text-align:left;margin:0;padding:0}div.newer-home{float:right;width:44%;text-align:right;margin:0;padding:0;}div.home{float:left;width:8%;text-align:center;margin:0;padding:0}form,.feedburner-email-form{margin:0;padding:0;}fieldset{border:1px solid #cccccc;width:auto;padding:0.35em 0.625em 0.75em;display:block;}legend{color:#000000;background:#f4f4f4;border:1px solid #cccccc;padding:2px 6px;margin-bottom:15px;}form p{margin:5px 0 0 0;padding:0;}div.xhtml-tags p{margin:0}label{margin-right:0.5em;font-family:arial;cursor:pointer;}input.text,input.textbox,input.password,input.file,input.TextField,textarea{padding:3px;color:#000000;border-top:solid 1px #333333;border-left:solid 1px #333333;border-right:solid 1px #999999;border-bottom:solid 1px #cccccc;background:url(../../blog/wp-content/themes/atahualpa353/images/inputbackgr.gif) top left no-repeat}textarea{width:96%;}input.inputblur{color:#777777;width:95%}input.inputfocus{color:#000000;width:95%}input.highlight,textarea.highlight{background:#e8eff7;border-color:#37699f}.button,.Button{padding:0 2px;height:24px;line-height:16px;background-color:#777777;color:#ffffff;border:solid 2px #555555;font-weight:bold}.buttonhover{padding:0 2px;cursor:pointer;background-color:#6b9c6b;color:#ffffff;border:solid 2px #496d49}form#commentform input#submit{ padding:0 .25em; width:0; overflow:visible}form#commentform input#submit[class]{width:auto}form#commentform input#submit{padding:4px 10px 4px 10px;font-size:1.2em;line-height:1.5em;height:36px}table.searchform{width:100%}table.searchform td.searchfield{padding:0;width:100%}table.searchform td.searchbutton{padding:0 0 0 5px}table.searchform td.searchbutton input{padding:0 0 0 5px}blockquote{height:1%;display:block;clear:both;color:#555555;padding:1em 1em;background:#f4f4f4;border:solid 1px #e1e1e1}blockquote blockquote{height:1%;display:block;clear:both;color:#444444;padding:1em 1em;background:#e1e1e1;border:solid 1px #d3d3d3}div.post table{border-collapse:collapse;margin:10px 0}div.post table caption{width:auto;margin:0 auto;background:#eeeeee;border:#999999;padding:4px 8px;color:#666666}div.post table th{background:#888888;color:#ffffff;font-weight:bold;font-size:90%;padding:4px 8px;border:solid 1px #ffffff;text-align:left}div.post table td{padding:4px 8px;background-color:#ffffff;border-bottom:1px solid #dddddd;text-align:left}div.post table tfoot td{}div.post table tr.alt td{background:#f4f4f4}div.post table tr.over td{background:#e2e2e2}#calendar_wrap{padding:0;border:none}table#wp-calendar{width:100%;font-size:90%;border-collapse:collapse;background-color:#ffffff;margin:0 auto}table#wp-calendar caption{width:auto;background:#eeeeee;border:none;;padding:3px;margin:0 auto;font-size:1em}table#wp-calendar th{border:solid 1px #eeeeee;background-color:#999999;color:#ffffff;font-weight:bold;padding:2px;text-align:center}table#wp-calendar td{padding:0;line-height:18px;background-color:#ffffff;border:1px solid #dddddd;text-align:center}table#wp-calendar tfoot td{border:solid 1px #eeeeee;background-color:#eeeeee}table#wp-calendar td a{display:block;background-color:#eeeeee;width:100%;height:100%;padding:0}div#respond{margin:25px 0;padding:25px;background:#eee;-moz-border-radius:8px;-khtml-border-radius:8px;-webkit-border-radius:8px;border-radius:8px;}p.thesetags{margin:10px 0}h3.reply{margin:0;padding:0 0 10px 0}ol.commentlist{margin:15px 0 25px 0;list-style-type:none;padding:0;display:block;border-top:dotted 1px #cccccc}ol.commentlist li{padding:15px 10px;display:block;height:1%;margin:0;background-color:#FFFFFF;border-bottom:dotted 1px #cccccc}ol.commentlist li.alt{display:block;height:1%;background-color:#EEEEEE;border-bottom:dotted 1px #cccccc}ol.commentlist li.authorcomment{display:block;height:1%;background-color:#D8D8FA}ol.commentlist span.authorname{font-weight:bold;font-size:110%}ol.commentlist span.commentdate{color:#666666;font-size:90%;margin-bottom:5px;display:block}ol.commentlist span.editcomment{display:block}ol.commentlist li p{margin:2px 0 5px 0}div.comment-number{float:right;font-size:2em;line-height:2em;font-family:georgia,serif;font-weight:bold;color:#ddd;margin:-10px 0 0 0;position:relative;height:1%}div.comment-number a:link,div.comment-number a:visited,div.comment-number a:active{color:#ccc}textarea#comment{width:98%;margin:10px 0;display:block}ul.commentlist{margin:15px 0 15px 0;list-style-type:none;padding:0;display:block;border-top:dotted 1px #cccccc}ul.commentlist ul{margin:0;border:none;list-style-type:none;padding:0}ul.commentlist li{padding:0; margin:0;display:block;clear:both;height:1%;}ul.commentlist ul.children li{ margin-left:30px}ul.commentlist div.comment-container{padding:10px;margin:0}ul.children div.comment-container{background-color:transparent;border:dotted 1px #ccc;padding:10px;margin:0 10px 8px 0; -moz-border-radius:5px; -khtml-border-radius:5px; -webkit-border-radius:5px; border-radius:5px}ul.children div.bypostauthor{}ul.commentlist li.thread-even{background-color:#FFFFFF;border-bottom:dotted 1px #cccccc}ul.commentlist li.thread-odd{background-color:#EEEEEE;border-bottom:dotted 1px #cccccc}ul.commentlist div.bypostauthor{background-color:#D8D8FA}ul.children div.bypostauthor{border:dotted 1px #BFBCFB}ul.commentlist span.authorname{font-size:110%}div.comment-meta a:link,div.comment-meta a:visited,div.comment-meta a:active,div.comment-meta a:hover{font-weight:normal}div#cancel-comment-reply{margin:-5px 0 10px 0}div.comment-number{float:right;font-size:2em;line-height:2em;font-family:georgia,serif;font-weight:bold;color:#ddd;margin:-10px 0 0 0;position:relative;height:1%}div.comment-number a:link,div.comment-number a:visited,div.comment-number a:active{color:#ccc}.page-numbers{padding:2px 6px;border:solid 1px #000000;-moz-border-radius:6px;-khtml-border-radius:6px;-webkit-border-radius:6px;border-radius:6px}span.current{background:#ddd}a.prev,a.next{border:none}a.page-numbers:link,a.page-numbers:visited,a.page-numbers:active{text-decoration:none;color:#365DA0;border-color:#365DA0}a.page-numbers:hover{text-decoration:none;color:#365DA0;border-color:#365DA0}div.xhtml-tags{display:none}abbr em{border:none !important;border-top:dashed 1px #aaa !important;display:-moz-inline-box !important;display:inline-block !important;background:url(../../blog/wp-content/themes/atahualpa353/images/commentluv.gif) 0% 90% no-repeat;margin-top:8px;padding:5px 5px 2px 20px !important;font-style:normal}p.subscribe-to-comments{margin-bottom:10px}div#gsHeader{display:none;}div.g2_column{margin:0 !important;width:100% !important;font-size:1.2em}div#gsNavBar{border-top-width:0 !important}p.giDescription{font-size:1.2em;line-height:1 !important}p.giTitle{margin:0.3em 0 !important;font-size:1em;font-weight:normal;color:#666}div#wp-email img{border:0;padding:0}div#wp-email input,div#wp-email textarea{margin-top:5px;margin-bottom:2px}div#wp-email p{margin-bottom:10px}input#wp-email-submit{ padding:0; font-size:30px; height:50px; line-height:50px; overflow:visible;}img.WP-EmailIcon{ vertical-align:text-bottom !important}.tw-accordion .tw-widgettitle,.tw-accordion .tw-widgettitle:hover,.tw-accordion .tw-hovered,.tw-accordion .selected,.tw-accordion .selected:hover{ background:transparent !important; background-image:none !important}.tw-accordion .tw-widgettitle span{ padding-left:0 !important}.tw-accordion h3.tw-widgettitle{border-bottom:solid 1px #ccc}.tw-accordion h3.selected{border-bottom:none}td#left .without_title,td#right .without_title{ margin-top:0;margin-bottom:0}ul.tw-nav-list{border-bottom:solid 1px #999;display:block;margin-bottom:5px !important}td#left ul.tw-nav-list li,td#right ul.tw-nav-list li{padding:0 0 1px 0;margin:0 0 -1px 5px; border:solid 1px #ccc;border-bottom:none;-moz-border-radius:5px;-khtml-border-radius:5px;-webkit-border-radius:5px;border-radius:5px;-moz-border-radius-bottomright:0;-moz-border-radius-bottomleft:0;-webkit-border-bottom-right-radius:0;-webkit-border-bottom-left-radius:0;border-bottom-right-radius:0;border-bottom-left-radius:0;background:#eee}td#left ul.tw-nav-list li.ui-tabs-selected,td#right ul.tw-nav-list li.ui-tabs-selected{ background:none;border:solid 1px #999;border-bottom:solid 1px #fff !important}ul.tw-nav-list li a:link,ul.tw-nav-list li a:visited,ul.tw-nav-list li a:active,ul.tw-nav-list li a:hover{padding:0 8px !important;background:none;border-left:none !important;outline:none}td#left ul.tw-nav-list li.ui-tabs-selected a,td#left li.ui-tabs-selected a:hover,td#right ul.tw-nav-list li.ui-tabs-selected a,td#right li.ui-tabs-selected a:hover{ color:#000000; text-decoration:none;font-weight:bold;background:none !important;outline:none}td#left .ui-tabs-panel,td#right .ui-tabs-panel{ margin:0; padding:0}img{border:0}#dbem-location-map img{ background:none !important}.post img{padding:5px;border:solid 1px #dddddd;background-color:#f3f3f3;-moz-border-radius:3px;-khtml-border-radius:3px;-webkit-border-radius:3px;border-radius:3px;}.post img.size-full{max-width:96%;width:auto 100%;margin:5px 0 5px 0}div.post img[class~=size-full]{height:auto;}.post img.alignleft{float:left;margin:10px 10px 5px 0;}.post img.alignright{float:right;margin:10px 0 5px 10px;}.post img.aligncenter{display:block;margin:10px auto}.aligncenter,div.aligncenter{ display:block; margin-left:auto; margin-right:auto}.alignleft,div.alignleft{float:left;margin:10px 10px 5px 0}.alignright,div.alignright{ float:right; margin:10px 0 5px 10px}div.archives-page img{border:0;padding:0;background:none;margin-bottom:0;vertical-align:-10%}.wp-caption{max-width:96%;width:auto 100%;height:auto;display:block;border:1px solid #dddddd;text-align:center;background-color:#f3f3f3;padding-top:4px;margin:10px 0 0 0;-moz-border-radius:3px;-khtml-border-radius:3px;-webkit-border-radius:3px;border-radius:3px;}* html .wp-caption{height:100%;}.wp-caption img{ margin:0 !important; padding:0 !important; border:0 none !important}.wp-caption p.wp-caption-text{font-size:0.8em;line-height:13px;padding:2px 4px 5px;margin:0;color:#666666}img.wp-post-image{float:left;border:0;padding:0;background:none;margin:0 10px 5px 0}img.wp-smiley{ float:none;border:none !important;margin:0 1px -1px 1px;padding:0 !important;background:none !important}img.avatar{float:left;display:block;margin:0 8px 1px 0;padding:3px;border:solid 1px #ddd;background-color:#f3f3f3;-moz-border-radius:3px;-khtml-border-radius:3px;-webkit-border-radius:3px;border-radius:3px;}#comment_quicktags{text-align:left;padding:10px 0 2px 0;display:block}#comment_quicktags input.ed_button{background:#f4f4f4;border:2px solid #cccccc;color:#444444;margin:2px 4px 2px 0;width:auto;padding:0 4px;height:24px;line-height:16px}#comment_quicktags input.ed_button_hover{background:#dddddd;border:2px solid #666666;color:#000000;margin:2px 4px 2px 0;width:auto;padding:0 4px;height:24px;line-height:16px;cursor:pointer}#comment_quicktags #ed_strong{font-weight:bold}#comment_quicktags #ed_em{font-style:italic}@media print{body{background:white;color:black;margin:0;font-size:10pt !important;font-family:arial,sans-serif;}div.post-footer{line-height:normal !important;color:#555 !important;font-size:9pt !important}a:link,a:visited,a:active,a:hover{text-decoration:underline !important;color:#000}h2{color:#000;font-size:14pt !important;font-weight:normal !important}h3{color:#000;font-size:12pt !important;}#header,#footer,.colone,.colthree,.navigation,.navigation-top,.navigation-middle,.navigation-bottom,.wp-pagenavi-navigation,#comment,#respond,.remove-for-print{display:none}td#left,td#right,td#left-inner,td#right-inner{width:0}td#middle{width:100%}*:lang(en) td#left{ display:none}*:lang(en) td#right{ display:none}*:lang(en) td#left-inner{ display:none}*:lang(en) td#right-inner{ display:none}td#left:empty{ display:none}td#right:empty{ display:none}td#left-inner:empty{ display:none}td#right-inner:empty{ display:none}}ul.rMenu,ul.rMenu ul,ul.rMenu li,ul.rMenu a{display:block;margin:0;padding:0}ul.rMenu,ul.rMenu li,ul.rMenu ul{list-style:none}ul.rMenu ul{display:none}ul.rMenu li{position:relative;z-index:1}ul.rMenu li:hover{z-index:999}ul.rMenu li:hover > ul{display:block;position:absolute}ul.rMenu li:hover{background-position:0 0} ul.rMenu-hor li{float:left;width:auto}ul.rMenu-hRight li{float:right}ul.rMenu-ver li{float:none}.clearfix:after{ content:".";display:block;height:0;clear:both;visibility:hidden}.clearfix{min-width:0;display:inline-block;display:block}* html .clearfix{height:1%;}.clearboth{clear:both;height:1%;font-size:1%;line-height:1%;display:block;padding:0;margin:0}td#header{padding-bottom:15px;}td#middle{padding:0}div.searchbox-form{margin:5px 0 15px 5px}div#menu1 ul.rMenu{background:transparent;border:none}div#imagecontainer{border-top:solid 0px #333;border-bottom:solid 5px #333;}div.widget ul li{padding:1px 5px 1px 12px !important;background:url('../../blog/wp-content/themes/atahualpa353/images/bullets/round-gray.gif') no-repeat 0 7px}ul.rMenu-hor ul,ul.rMenu-hRight ul{margin-top:0px;}ul.rMenu-hor li{margin-bottom:0px;margin-top:0px;margin-left:0px;}ul.rMenu-hor{padding-left:0px;}ul.rMenu-ver li{margin-top:0xp;}div#menu1 ul.rMenu li a,div#menu2 ul.rMenu li a{padding:6px 10px}div#menu1 ul.rMenu li{margin-right:5px}div#menu1 ul.rMenu li li{margin-right:0}div#menu1 ul.rMenu li,div#menu1 ul.rMenu li a{-webkit-border-top-left-radius:5px;-webkit-border-top-right-radius:5px;-moz-border-radius-topleft:5px;-moz-border-radius-topright:5px;border-top-left-radius:5px;border-top-right-radius:5px}div#menu1 ul.rMenu li li,div#menu1 ul.rMenu li li a{-webkit-border-top-left-radius:0;-webkit-border-top-right-radius:0;-moz-border-radius-topleft:0;-moz-border-radius-topright:0;border-top-left-radius:0;border-top-right-radius:0}div#menu2{ border:dashed 1px #ffffff}</style>
<script type="text/javascript">
//<![CDATA[




/* JQUERY */
jQuery(document).ready(function(){  


	/* jQuery('ul#rmenu').superfish(); */
	/* jQuery('ul#rmenu').superfish().find('ul').bgIframe({opacity:false}); */
 
	/* For IE6 */
	if (jQuery.browser.msie && /MSIE 6\.0/i.test(window.navigator.userAgent) && !/MSIE 7\.0/i.test(window.navigator.userAgent) && !/MSIE 8\.0/i.test(window.navigator.userAgent)) {

		/* Max-width for images in IE6 */		
		var centerwidth = jQuery("td#middle").width(); 
		
		/* Images without caption */
		jQuery(".post img").each(function() { 
			var maxwidth = centerwidth - 10 + 'px';
			var imgwidth = jQuery(this).width(); 
			var imgheight = jQuery(this).height(); 
			var newimgheight = (centerwidth / imgwidth * imgheight) + 'px';	
			if (imgwidth > centerwidth) { 
				jQuery(this).css({width: maxwidth}); 
				jQuery(this).css({height: newimgheight}); 
			}
		});
		
		/* Images with caption */
		jQuery("div.wp-caption").each(function() { 
			var captionwidth = jQuery(this).width(); 
			var maxcaptionwidth = centerwidth + 'px';
			var captionheight = jQuery(this).height();
			var captionimgwidth =  jQuery("div.wp-caption img").width();
			var captionimgheight =  jQuery("div.wp-caption img").height();
			if (captionwidth > centerwidth) { 
				jQuery(this).css({width: maxcaptionwidth}); 
				var newcaptionheight = (centerwidth / captionwidth * captionheight) + 'px';
				var newcaptionimgheight = (centerwidth / captionimgwidth * captionimgheight) + 'px';
				jQuery(this).css({height: newcaptionheight}); 
				jQuery("div.wp-caption img").css({height: newcaptionimgheight}); 
				}
		});
		
		/* sfhover for LI:HOVER support in IE6: */
		jQuery("ul li").
			hover( function() {
					jQuery(this).addClass("sfhover")
				}, 
				function() {
					jQuery(this).removeClass("sfhover")
				} 
			); 

	/* End IE6 */
	}
	
	jQuery(".post table tr").
		mouseover(function() {
			jQuery(this).addClass("over");
		}).
		mouseout(function() {
			jQuery(this).removeClass("over");
		});

	
	jQuery(".post table tr:even").
		addClass("alt");

	
	jQuery("input.text, input.TextField, input.file, input.password, textarea").
		focus(function () {  
			jQuery(this).addClass("highlight"); 
		}).
		blur(function () { 
			jQuery(this).removeClass("highlight"); 
		})
	
	jQuery("input.inputblur").
		focus(function () {  
			jQuery(this).addClass("inputfocus"); 
		}).
		blur(function () { 
			jQuery(this).removeClass("inputfocus"); 
		})

		

	
	jQuery("input.button, input.Button").
		mouseover(function() {
			jQuery(this).addClass("buttonhover");
		}).
		mouseout(function() {
			jQuery(this).removeClass("buttonhover");
		});

	/* toggle "you can use these xhtml tags" */
	jQuery("a.xhtmltags").
		click(function(){ 
			jQuery("div.xhtml-tags").slideToggle(300); 
		});

	/* For the Tabbed Widgets plugin: */
	jQuery("ul.tw-nav-list").
		addClass("clearfix");

		
	
});

//]]>
</script>
<meta id="syntaxhighlighteranchor" name="syntaxhighlighter-version" content="3.1.3" />
<!-- Google Analytics Tracking by Google Analyticator 6.2: http://ronaldheft.com/code/analyticator/ -->
<script type="text/javascript">
	var analyticsFileTypes = [''];
	var analyticsEventTracking = 'enabled';
</script>
<script type="text/javascript">
	var _gaq = _gaq || [];
	_gaq.push(['_setAccount', 'UA-2173612-1']);
	_gaq.push(['_trackPageview']);
	_gaq.push(['_trackPageLoadTime']);

	(function() {
		var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true;
		ga.src = ('https:' == document.location.protocol ? '../../../https@ssl_2f\default.htm' : '../../../www/default.htm') + '.google-analytics.com/ga.js';
		var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s);
	})();
</script>
<!--[if IE 6]>
<script type="text/javascript" src="../../blog/wp-content/themes/atahualpa353/js/dd_roundies.js"></script>
<script type="text/javascript">DD_roundies.addRule('a.posts-icon,%20a.comments-icon,%20a.email-icon,%20img.logo');</script>
<![endif]-->
</head>
<body class="single single-post postid-120 single-format-standard">
<div id="wrapper">
<div id="container">
<table id="layout" border="0" cellspacing="0" cellpadding="0">
<colgroup>
<col class="colone" /><col class="coltwo" />
<col class="colthree" /></colgroup> 
	<tr>

		<!-- Header -->
		<td id="header" colspan="3">

		<div id="imagecontainer" class="header-image-container" style="background: url('../../blog/wp-content/themes/atahualpa353/images/header/learncppheader3_800.jpg') top center no-repeat;"><div class="clickable"><a class="divclick" title="Learn C++" href ="../../default.htm">&nbsp;</a></div></div>
		</td>
		<!-- / Header -->

	</tr>

	<!-- Main Body -->	
	<tr id="bodyrow">

				<!-- Left Sidebar -->
		<td id="left">

			<div id="text-5" class="widget widget_text"><div class="widget-title"><h3>Navigation</h3></div>			<div class="textwidget"><ul>
<li><a href="../../default.htm"><big><big>Main Page</big></big></a>
<li><a href="
../../featured-articles/default.htm"><big><big>Featured Articles</big></big></a>
</ul>
<hr>
<ul>
<li><a href="../../about/default.htm">About / Contact</a>
<li><a href="../../about/#Support">Support LearnCpp</a>
</ul>
<hr>

<!-- SiteSearch Google -->
<form method="get" action="http://www.google.com/custom" target="google_window">
<table border="0" bgcolor="#ffffff">
<tr><td nowrap="nowrap" valign="top" align="left">

<!--<br/>-->
<input type="hidden" name="domains" value="LearnCpp.com"></input>
<label for="sbi" style="display: none">Enter your search terms</label>
<input type="text" name="q" size="20" maxlength="255" value="" id="sbi"></input>
</td></tr>
<tr>
<td nowrap="nowrap">
<table>
<tr>
<td>
<input type="radio" name="sitesearch" value="" checked id="ss0"></input>
<label for="ss0" title="Search the Web"><font size="-1" color="#000000">Web</font></label></td>
<td>
<input type="radio" name="sitesearch" value="www.LearnCpp.com" id="ss1"></input>
<label for="ss1" title="Search LearnCpp.com"><font size="-1" color="#000000">LearnCpp</font></label></td>
</tr>
</table>
<label for="sbb" style="display: none">Submit search form</label>
<input type="submit" name="sa" value="Google Search" id="sbb"></input>
<input type="hidden" name="client" value="pub-0588844875925051"></input>
<input type="hidden" name="forid" value="1"></input>
<input type="hidden" name="channel" value="7774154974"></input>
<input type="hidden" name="ie" value="ISO-8859-1"></input>
<input type="hidden" name="oe" value="ISO-8859-1"></input>
<input type="hidden" name="safe" value="active"></input>
<input type="hidden" name="flav" value="0000"></input>
<input type="hidden" name="sig" value="q6fLrjobHHgL00cW"></input>
<input type="hidden" name="cof" value="GALT:#008000;GL:1;DIV:#336699;VLC:663399;AH:center;BGC:FFFFFF;LBGC:336699;ALC:0000FF;LC:0000FF;T:000000;GFNT:0000FF;GIMP:0000FF;FORID:1"></input>
<input type="hidden" name="hl" value="en"></input>
</td></tr></table>
</form>
<!-- SiteSearch Google --></div>
		</div><div id="meta-2" class="widget widget_meta"><div class="widget-title"><h3>Meta</h3></div>			<ul>
			<li><a href="../../blog/wp-login.php@action=register.htm">Register</a></li>			<li><a href="../../blog/wp-login.php.htm">Log in</a></li>
			<li><a href="../../feed/default.htm" title="Syndicate this site using RSS 2.0">Entries <abbr title="Really Simple Syndication">RSS</abbr></a></li>
			<li><a href="../../comments/feed/default.htm" title="The latest comments to all posts in RSS">Comments <abbr title="Really Simple Syndication">RSS</abbr></a></li>
			<li><a href="../../../wordpress.org/default.htm" title="Powered by WordPress, state-of-the-art semantic personal publishing platform.">WordPress.org</a></li>
						</ul>
</div>		<div id="recent-posts-2" class="widget widget_recent_entries">		<div class="widget-title"><h3>Recent Posts</h3></div>		<ul>
				<li><a href="../b-6-new-virtual-function-controls-override-final-default-and-delete/default.htm" title="B.6 &#8212; New virtual function controls: override, final, default, and delete">B.6 &#8212; New virtual function controls: override, final, default, and delete</a></li>
				<li><a href="../b-5-delegating-constructors/default.htm" title="B.5 &#8212; Delegating constructors">B.5 &#8212; Delegating constructors</a></li>
				<li><a href="../b-4-initializer-lists-and-uniform-initialization/default.htm" title="B.4 &#8212; Initializer lists and uniform initialization">B.4 &#8212; Initializer lists and uniform initialization</a></li>
				<li><a href="../b-3-range-based-for-statements-and-static_assert/default.htm" title="B.3 &#8212; Range-based for statements and static_assert">B.3 &#8212; Range-based for statements and static_assert</a></li>
				<li><a href="../b-2-long-long-auto-decltype-nullptr-and-enum-classes/default.htm" title="B.2 &#8212; Long long, auto, decltype, nullptr, and enum classes">B.2 &#8212; Long long, auto, decltype, nullptr, and enum classes</a></li>
				<li><a href="../b-1-introduction-to-c11/default.htm" title="B.1 &#8212; Introduction to C++11">B.1 &#8212; Introduction to C++11</a></li>
				<li><a href="../a-6-fixed-width-integers/default.htm" title="A.6 &#8212; Fixed-width integers">A.6 &#8212; Fixed-width integers</a></li>
				<li><a href="../../site-news/site-software-updated-1123/default.htm" title="Site software updated 11/23">Site software updated 11/23</a></li>
				<li><a href="../../site-news/this-is-why-we-cant-have-nice-things-part-2/default.htm" title="This is why we can&#8217;t have nice things, part 2">This is why we can&#8217;t have nice things, part 2</a></li>
				<li><a href="../../site-news/this-is-why-we-cant-have-nice-things/default.htm" title="This is why we can&#8217;t have nice things">This is why we can&#8217;t have nice things</a></li>
				</ul>
		</div><div id="categories-1" class="widget widget_categories"><div class="widget-title"><h3>Category Indexes</h3></div>		<ul>
	<li class="cat-item cat-item-11"><a href="../../category/breaktime/default.htm" title="Games and fun activities">Break Time</a> (3)
</li>
	<li class="cat-item cat-item-6"><a href="../../category/cpp-programming/default.htm" title="View all posts filed under C++ Programming">C++ Programming</a> (11)
</li>
	<li class="cat-item cat-item-3"><a href="../../category/cpp-tutorial/default.htm" title="View all posts filed under C++ Tutorial">C++ Tutorial</a> (163)
</li>
	<li class="cat-item cat-item-10"><a href="../../category/computer-game-programming/default.htm" title="View all posts filed under Game Programming">Game Programming</a> (4)
</li>
	<li class="cat-item cat-item-14"><a href="../../category/gaming/default.htm" title="View all posts filed under Gaming">Gaming</a> (1)
</li>
	<li class="cat-item cat-item-13"><a href="../../category/general-programming/default.htm" title="View all posts filed under General Programming">General Programming</a> (3)
</li>
	<li class="cat-item cat-item-4"><a href="../../category/site-news/default.htm" title="View all posts filed under Site News">Site News</a> (23)
</li>
	<li class="cat-item cat-item-5"><a href="../../category/wordpress/default.htm" title="View all posts filed under WordPress">WordPress</a> (8)
</li>
		</ul>
</div>
		</td>
		<!-- / Left Sidebar -->
		
				

		<!-- Main Column -->
		<td id="middle">

	

		
		 

		<div class="clearfix navigation-top">
		<div class="older">&laquo; <a href="../78-function-pointers/default.htm" rel="prev">7.8 &#8212; Function Pointers</a> &nbsp;</div><div class="newer">&nbsp; <a href="../710-recursion/default.htm" rel="next">7.10 &#8212; Recursion</a> &raquo;</div></div>
<div class="post-120 post type-post status-publish format-standard hentry category-cpp-tutorial" id="post-120">


<div class="post-headline">		<h1>7.9 &#8212; The stack and the heap</h1>
		</div>
<div class="post-byline">By Alex, on August 10th, 2007</div>
<div class="post-bodycopy clearfix"><div style='float:left;padding:8px 8px 8px 0px;'><script type="text/javascript"><!--
google_ad_client = "ca-pub-0588844875925051";
/* Content Page Top Large */
google_ad_slot = "7945645163";
google_ad_width = 336;
google_ad_height = 280;
//-->
</script>
<acript type="text/javascript"
src="../../../pagead2.googlesyndication.com/pagead/show_ads.js">
</script></div><p>The memory a program uses is typically divided into four different areas:</p>
<ul>
<li>The code area, where the compiled program sits in memory.
<li>The globals area, where global variables are stored.
<li>The heap, where dynamically allocated variables are allocated from.
<li>The stack, where parameters and local variables are allocated from.
</ul>
<p>There isn&#8217;t really much to say about the first two areas.  The heap and the stack are where most of the interesting stuff takes place, and those are the two that will be the focus of this section.</p>
<p><strong>The heap</strong></p>
<p>The heap (also known as the &#8220;free store&#8221;) is a large pool of memory used for dynamic allocation.  In C++, when you use the new operator to allocate memory, this memory is assigned from the heap.</p>
<pre class="brush: cpp; title: ; notranslate" title="">
int *pValue = new int; // pValue is assigned 4 bytes from the heap
int *pArray = new int[10]; // pArray is assigned 40 bytes from the heap
</pre>
<p>Because the precise location of the memory allocated is not known in advance, the memory allocated has to be accessed indirectly &#8212; which is why new returns a pointer.  You do not have to worry about the mechanics behind the process of how free memory is located and allocated to the user.  However, it is worth knowing that sequential memory requests may not result in sequential memory addresses being allocated!</p>
<pre class="brush: cpp; title: ; notranslate" title="">
int *pValue1 = new int;
int *pValue2 = new int;
// pValue1 and pValue2 may not have sequential addresses
</pre>
<p>When a dynamically allocated variable is deleted, the memory is &#8220;returned&#8221; to the heap and can then be reassigned as future allocation requests are received.</p>
<p>The heap has advantages and disadvantages:<br />
1) Allocated memory stays allocated until it is specifically deallocated (beware memory leaks).<br />
2) Dynamically allocated memory must be accessed through a pointer.<br />
3) Because the heap is a big pool of memory, large arrays, structures, or classes should be allocated here.</p>
<p><strong>The stack</strong></p>
<p>The call stack (usually referred to as &#8220;the stack&#8221;) has a much more interesting role to play.  Before we talk about the call stack, which refers to a particular portion of memory, let&#8217;s talk about what a stack is.</p>
<p>Consider a stack of plates in a cafeteria.  Because each plate is heavy and they are stacked, you can really only do one of three things:<br />
1) Look at the surface of the top plate<br />
2) Take the top plate off the stack<br />
3) Put a new plate on top of the stack</p>
<p>In computer programming, a stack is a container that holds other variables (much like an array).  However, whereas an array lets you access and modify elements in any order you wish, a stack is more limited.  The operations that can be performed on a stack are identical to the ones above:</p>
<p>1) Look at the top item on the stack (usually done via a function called top())<br />
2) Take the top item off of the stack (done via a function called pop())<br />
3) Put a new item on top of the stack (done via a function called push())</p>
<p>A stack is a last-in, first-out (LIFO) structure.  The last item pushed onto the stack will be the first item popped off.  If you put a new plate on top of the stack, anybody who takes a plate from the stack will take the plate you just pushed on first.  Last on, first off.  As items are pushed onto a stack, the stack grows larger &#8212; as items are popped off, the stack grows smaller.</p>
<p>The plate analogy is a pretty good analogy as to how the call stack works, but we can actually make an even better analogy.  Consider a bunch of mailboxes, all stacked on top of each other.  Each mailbox can only hold one item, and all mailboxes start out empty.  Furthermore, each mailbox is nailed to the mailbox below it, so the number of mailboxes can not be changed.  If we can&#8217;t change the number of mailboxes, how do we get a stack-like behavior?</p>
<p>First, we use a marker (like a post-it note) to keep track of where the bottom-most empty mailbox is.  In the beginning, this will be the lowest mailbox.  When we push an item onto our mailbox stack, we put it in the mailbox that is marked (which is the first empty mailbox), and move the marker up one mailbox.  When we pop an item off the stack, we move the marker down one mailbox and remove the item from that mailbox.  Anything below the marker is considered &#8220;on the stack&#8221;.  Anything at the marker or above the marker is not on the stack.</p>
<p>This is almost exactly analogous to how the call stack works.  The call stack is a fixed-size chunk of sequential memory addresses.  The mailboxes are memory addresses, and the &#8220;items&#8221; are pieces of data (typically either variables or addreses).  The &#8220;marker&#8221; is a register (a small piece of memory) in the CPU known as the stack pointer.  The stack pointer keeps track of where the top of the stack currently is.</p>
<p>The only difference between our hypothetical mailbox stack and the call stack is that when we pop an item off the call stack, we don&#8217;t have to erase the memory (the equivalent of emptying the mailbox).  We can just leave it to be overwritten by the next item pushed to that piece of memory.  Because the stack pointer will be below that memory location, we know that memory location is not on the stack.</p>
<p>So what do we push onto our call stack?  Parameters, local variables, and&#8230; function calls.</p>
<p><strong>The stack in action</strong></p>
<p>Because parameters and local variables essentially belong to a function, we really only need to consider what happens on the stack when we call a function.  Here is the sequence of steps that takes place when a function is called:</p>
<ol>
<li>The address of the instruction beyond the function call is pushed onto the stack.  This is how the CPU remembers where to go after the function returns.
<li>Room is made on the stack for the function&#8217;s return type.  This is just a placeholder for now.
<li>The CPU jumps to the function&#8217;s code.
<li>The current top of the stack is held in a special pointer called the stack frame.  Everything added to the stack after this point is considered &#8220;local&#8221; to the function.
<li>All function arguments are placed on the stack.
<li>The instructions inside of the function begin executing.
<li>Local variables are pushed onto the stack as they are defined.
</ol>
<p>When the function terminates, the following steps happen:</p>
<ol>
<li>The function&#8217;s return value is copied into the placeholder that was put on the stack for this purpose.
<li>Everything after the stack frame pointer is popped off.  This destroys all local variables and arguments.
<li>The return value is popped off the stack and is assigned as the value of the function.  If the value of the function isn&#8217;t assigned to anything, no assignment takes place, and the value is lost.
<li>The address of the next instruction to execute is popped off the stack, and the CPU resumes execution at that instruction.
</ol>
<p>Typically, it is not important to know all the details about how the call stack works.  However, understanding that functions are effectively pushed on the stack when they are called and popped off when they return gives you the fundamentals needed to understand recursion, as well as some other concepts that are useful when debugging.</p>
<p><strong>Stack overflow</strong></p>
<p>The stack has a limited size, and consequently can only hold a limited amount of information.  If the program tries to put too much information on the stack, stack overflow will result.  <strong>Stack overflow</strong> happens when all the memory in the stack has been allocated &#8212; in that case, further allocations begin overflowing into other sections of memory.</p>
<p>Stack overflow is generally the result of allocating too many variables on the stack, and/or making too many nested function calls (where function A calls function B calls function C calls function D etc&#8230;)  Overflowing the stack generally causes the program to crash.</p>
<p>Here is an example program that causes a stack overflow.  You can run it on your system and watch it crash:</p>
<pre class="brush: cpp; title: ; notranslate" title="">
int main()
{
    int nStack[100000000];
    return 0;
}
</pre>
<p>This program tries to allocate a huge array on the stack.  Because the stack is not large enough to handle this array, the array allocation overflows into portions of memory the program is not allowed to use.  Consequently, the program crashes.</p>
<p>The stack has advantages and disadvantages:</p>
<ul>
<li>Memory allocated on the stack stays in scope as long as it is on the stack.  It is destroyed when it is popped off the stack.
<li>All memory allocated on the stack is known at compile time.  Consequently, this memory can be accessed directly through a variable.
<li>Because the stack is relatively small, it is generally not a good idea to do anything that eats up lots of stack space.  This includes allocating large arrays, structures, and classes, as well as heavy recursion.
</ul>
<table border=0 cellpadding=3>
<tr>
<td>
        <a href="../710-recursion/default.htm" style="text-decoration:none"><img src="../../images/cpptutorial/next.png" align=middle> 7.10 &#8212; Recursion</a>
</td>
</tr>
<tr>
<td>
        <a href="../../#Chapter7" style="text-decoration:none"><img src="../../images/cpptutorial/up.png" align=middle> Index</a>
</td>
</tr>
<tr>
<td>
        <a href="../78-function-pointers/default.htm" style="text-decoration:none"><img src="../../images/cpptutorial/prev.png" align=middle> 7.8 &#8212; Function Pointers</a>
</td>
</tr>
</table>
<div style='padding-top:8px; padding-bottom:8px'><script type="text/javascript"><!--
google_ad_client = "ca-pub-0588844875925051";
/* Content Page Bottom - Medium Rectangle */
google_ad_slot = "2751429778";
google_ad_width = 300;
google_ad_height = 250;
//-->
</script>
<acript type="text/javascript"
src="../../../pagead2.googlesyndication.com/pagead/show_ads.js">
</script>
</div><!-- Powered by Ad Inserter Wordpress Plugin, Author: Igor Funa --></div>

<div class="post-footer"><img src="../../blog/wp-content/themes/atahualpa353/images/icons/folder-gray.gif" alt="" /> <a href="../../category/cpp-tutorial/default.htm" title="View all posts in C++ Tutorial" rel="category tag">C++ Tutorial</a>   | <a href="print/default.htm" title="Print This Post" rel="nofollow"><img class="WP-PrintIcon" src="../../blog/wp-content/plugins/wp-print/images/print.gif" alt="Print This Post" title="Print This Post" style="border: 0px;" /></a>&nbsp;<a href="print/default.htm" title="Print This Post" rel="nofollow">Print This Post</a></div>
</div><!-- / Post -->						
	
	<div class="clearfix navigation-middle">
		<div class="older">&laquo; <a href="../78-function-pointers/default.htm" rel="prev">7.8 &#8212; Function Pointers</a> &nbsp;</div><div class="newer">&nbsp; <a href="../710-recursion/default.htm" rel="next">7.10 &#8212; Recursion</a> &raquo;</div></div>


	<a name="comments"></a><!-- named anchor for skip links -->
	<h3 id="comments">35 comments to 7.9 &#8212; The stack and the heap</h3>

	
	<!-- Comment List -->
	<ul class="commentlist">
		
			<li class="pingback even thread-even depth-1 clearfix" id="comment-404">
		<div id="div-comment-404" class="clearfix comment-container">
		<div class="comment-author vcard">
				<span class="authorname"><a href='../710-recursion/default.htm' rel='external nofollow' class='url'>Learn C++ - &raquo; 7.10 -- Recursion</a></span>
		</div>
				<div class="comment-meta commentmetadata">
		<a href="comment-page-1/#comment-404">
		August 13, 2007 at 9:30 pm</a>
        <span class="comment-reply-link"><a rel="nofollow" class="comment-reply-login" href="../../blog/wp-login.php@redirect_to=http_253a_252f_252fwww.learncpp.com_252fcpp-tutorial_252f79-the-stack-and-the-heap_252f">Log in to Reply</a></span>		 
		</div>
		<p>[...] 7.9 &#8212; The stack and the heap [...]</p>
		</div>
</li>
		<li class="comment byuser comment-author-abhishek odd alt thread-odd thread-alt depth-1 clearfix" id="comment-5857">
		<div id="div-comment-5857" class="clearfix comment-container">
		<div class="comment-author vcard">
		<img alt='' src='../../../0.gravatar.com/avatar/0195bf75f2f76e29b4f52f919e1cec59@s=65&d=http_253a_252f_252f0.gravatar.com_252favatar_252fad516503a11cd5ca435acc9bb6523536_253fs_253d65&r=g' class='avatar avatar-65 photo' height='65' width='65' />		<span class="authorname">Abhishek</span>
		</div>
				<div class="comment-meta commentmetadata">
		<a href="comment-page-1/#comment-5857">
		January 11, 2008 at 5:57 am</a>
        <span class="comment-reply-link"><a rel="nofollow" class="comment-reply-login" href="../../blog/wp-login.php@redirect_to=http_253a_252f_252fwww.learncpp.com_252fcpp-tutorial_252f79-the-stack-and-the-heap_252f">Log in to Reply</a></span>		 
		</div>
		<p>Where can I find the stack in my CPU box?<br />
Is it a separate hardware or just a space in RAM or Hard disk?</p>
		</div>
<ul class='children'>
		<li class="comment byuser comment-author-Tarindel bypostauthor even depth-2 clearfix" id="comment-5864">
		<div id="div-comment-5864" class="clearfix comment-container bypostauthor">
		<div class="comment-author vcard">
		<img alt='' src='../../../0.gravatar.com/avatar/2bcdbab687c32f64f9208e016cafe4cc@s=65&d=http_253a_252f_252f0.gravatar.com_252favatar_252fad516503a11cd5ca435acc9bb6523536_253fs_253d65&r=g' class='avatar avatar-65 photo' height='65' width='65' />		<span class="authorname"><a href='../../../www.tarindel.com/default.htm' rel='external nofollow' class='url'>Alex</a></span>
		</div>
				<div class="comment-meta commentmetadata">
		<a href="comment-page-1/#comment-5864">
		January 11, 2008 at 8:10 am</a>
        <span class="comment-reply-link"><a rel="nofollow" class="comment-reply-login" href="../../blog/wp-login.php@redirect_to=http_253a_252f_252fwww.learncpp.com_252fcpp-tutorial_252f79-the-stack-and-the-heap_252f">Log in to Reply</a></span>		 
		</div>
		<p>According to <a href="../../../en.wikipedia.org/wiki/stack-based_memory_allocation" rel="nofollow">Wikipedia</a>, &#8220;In most modern computer systems, each thread has a reserved region of memory referred to as its stack&#8221;.  So it&#8217;s just RAM memory being used in a stack-like manner.  As soon as the thread/program is killed, that memory can be reused for other stuff.</p>
		</div>
</li>
</ul>
</li>
		<li class="comment odd alt thread-even depth-1 clearfix" id="comment-10265">
		<div id="div-comment-10265" class="clearfix comment-container">
		<div class="comment-author vcard">
		<img alt='' src='../../../0.gravatar.com/avatar/610e617df852214cfe41e0914a4112a5@s=65&d=http_253a_252f_252f0.gravatar.com_252favatar_252fad516503a11cd5ca435acc9bb6523536_253fs_253d65&r=g' class='avatar avatar-65 photo' height='65' width='65' />		<span class="authorname">Tom</span>
		</div>
				<div class="comment-meta commentmetadata">
		<a href="comment-page-1/#comment-10265">
		March 24, 2008 at 7:52 am</a>
        <span class="comment-reply-link"><a rel="nofollow" class="comment-reply-login" href="../../blog/wp-login.php@redirect_to=http_253a_252f_252fwww.learncpp.com_252fcpp-tutorial_252f79-the-stack-and-the-heap_252f">Log in to Reply</a></span>		 
		</div>
		<p>Hi Alex -</p>
<p>Good description of the stack. A few minor corrections:</p>
<p>&#8220;The plate analogy is <b>a</b> pretty good analogy&#8221;</p>
<p>Under &#8220;The stack in action&#8221;, items 5 &amp; 6 need periods at the end of the sentences.</p>
<p>Under &#8220;When the function terminates&#8230;&#8221;:</p>
<p>&#8220;The <b>address of the</b> next instruction to execute is popped off the stack, and the CPU resumes execution at that instruction.&#8221;</p>
<p>Keep up the good work!</p>
<p>[ Thanks! -Alex ]</p>
		</div>
</li>
		<li class="comment even thread-odd thread-alt depth-1 clearfix" id="comment-12951">
		<div id="div-comment-12951" class="clearfix comment-container">
		<div class="comment-author vcard">
		<img alt='' src='../../../0.gravatar.com/avatar/ab6f74596f82d109cdaee932d06cd05e@s=65&d=http_253a_252f_252f0.gravatar.com_252favatar_252fad516503a11cd5ca435acc9bb6523536_253fs_253d65&r=g' class='avatar avatar-65 photo' height='65' width='65' />		<span class="authorname">Jeff</span>
		</div>
				<div class="comment-meta commentmetadata">
		<a href="comment-page-1/#comment-12951">
		April 24, 2008 at 2:05 pm</a>
        <span class="comment-reply-link"><a rel="nofollow" class="comment-reply-login" href="../../blog/wp-login.php@redirect_to=http_253a_252f_252fwww.learncpp.com_252fcpp-tutorial_252f79-the-stack-and-the-heap_252f">Log in to Reply</a></span>		 
		</div>
		<p>Alex,</p>
<p>This is a really good section, very helpful for me!  Quick question:</p>
<p>Other than writing a function or program to test limits until it crashes, is there an easier to way to determine the size, or amount of memory, allocated to the call stack for a particular program?  Wouldn&#8217;t knowing this in advance help to avoid stack overflow in more complex programs?</p>
<p>Thanks,<br />
Jeff</p>
		</div>
<ul class='children'>
		<li class="comment byuser comment-author-Tarindel bypostauthor odd alt depth-2 clearfix" id="comment-13002">
		<div id="div-comment-13002" class="clearfix comment-container bypostauthor">
		<div class="comment-author vcard">
		<img alt='' src='../../../0.gravatar.com/avatar/2bcdbab687c32f64f9208e016cafe4cc@s=65&d=http_253a_252f_252f0.gravatar.com_252favatar_252fad516503a11cd5ca435acc9bb6523536_253fs_253d65&r=g' class='avatar avatar-65 photo' height='65' width='65' />		<span class="authorname"><a href='../../../www.tarindel.com/default.htm' rel='external nofollow' class='url'>Alex</a></span>
		</div>
				<div class="comment-meta commentmetadata">
		<a href="comment-page-1/#comment-13002">
		April 24, 2008 at 6:24 pm</a>
        <span class="comment-reply-link"><a rel="nofollow" class="comment-reply-login" href="../../blog/wp-login.php@redirect_to=http_253a_252f_252fwww.learncpp.com_252fcpp-tutorial_252f79-the-stack-and-the-heap_252f">Log in to Reply</a></span>		 
		</div>
		<p>I won&#8217;t say there isn&#8217;t a way to determine the stack size, but I&#8217;m not aware of how to do it.</p>
<p>In reality, the stack is large enough that it&#8217;s generally not an issue as long as you&#8217;re aware that you should use dynamic allocation for anything that requires a large amount of memory.</p>
		</div>
</li>
</ul>
</li>
		<li class="pingback even thread-even depth-1 clearfix" id="comment-13494">
		<div id="div-comment-13494" class="clearfix comment-container">
		<div class="comment-author vcard">
				<span class="authorname"><a href='../78-function-pointers/default.htm' rel='external nofollow' class='url'>Learn C++ - &raquo; 7.8 &#8212; Function Pointers</a></span>
		</div>
				<div class="comment-meta commentmetadata">
		<a href="comment-page-1/#comment-13494">
		April 28, 2008 at 9:05 pm</a>
        <span class="comment-reply-link"><a rel="nofollow" class="comment-reply-login" href="../../blog/wp-login.php@redirect_to=http_253a_252f_252fwww.learncpp.com_252fcpp-tutorial_252f79-the-stack-and-the-heap_252f">Log in to Reply</a></span>		 
		</div>
		<p>[...] 2007      Prev/Next Posts   &laquo; 7.7 &#8212; Default parameters | Home | 7.9 &#8212; The stack and the heap &raquo;     Wednesday, August 8th, 2007 at 4:52 [...]</p>
		</div>
</li>
		<li class="pingback odd alt thread-odd thread-alt depth-1 clearfix" id="comment-30972">
		<div id="div-comment-30972" class="clearfix comment-container">
		<div class="comment-author vcard">
				<span class="authorname"><a href='../153-exceptions-functions-and-stack-unwinding/default.htm' rel='external nofollow' class='url'>Learn C++ - &raquo; 15.3 &#8212; Exceptions, functions, and stack unwinding</a></span>
		</div>
				<div class="comment-meta commentmetadata">
		<a href="comment-page-1/#comment-30972">
		October 25, 2008 at 10:42 am</a>
        <span class="comment-reply-link"><a rel="nofollow" class="comment-reply-login" href="../../blog/wp-login.php@redirect_to=http_253a_252f_252fwww.learncpp.com_252fcpp-tutorial_252f79-the-stack-and-the-heap_252f">Log in to Reply</a></span>		 
		</div>
		<p>[...] is found, or until main() terminates. This process is called unwinding the stack (see the lesson on the stack and the heap if you need a refresher on what the call stack [...]</p>
		</div>
</li>
		<li class="comment even thread-even depth-1 clearfix" id="comment-31579">
		<div id="div-comment-31579" class="clearfix comment-container">
		<div class="comment-author vcard">
		<img alt='' src='../../../0.gravatar.com/avatar/23490d73ae5456568478541137e2a812@s=65&d=http_253a_252f_252f0.gravatar.com_252favatar_252fad516503a11cd5ca435acc9bb6523536_253fs_253d65&r=g' class='avatar avatar-65 photo' height='65' width='65' />		<span class="authorname">som shekhar</span>
		</div>
				<div class="comment-meta commentmetadata">
		<a href="comment-page-1/#comment-31579">
		November 4, 2008 at 12:08 am</a>
        <span class="comment-reply-link"><a rel="nofollow" class="comment-reply-login" href="../../blog/wp-login.php@redirect_to=http_253a_252f_252fwww.learncpp.com_252fcpp-tutorial_252f79-the-stack-and-the-heap_252f">Log in to Reply</a></span>		 
		</div>
		<p>Since malloc also allocates the size dynamically but it does on stack??? why?</p>
		</div>
<ul class='children'>
		<li class="comment byuser comment-author-Tarindel bypostauthor odd alt depth-2 clearfix" id="comment-31636">
		<div id="div-comment-31636" class="clearfix comment-container bypostauthor">
		<div class="comment-author vcard">
		<img alt='' src='../../../0.gravatar.com/avatar/2bcdbab687c32f64f9208e016cafe4cc@s=65&d=http_253a_252f_252f0.gravatar.com_252favatar_252fad516503a11cd5ca435acc9bb6523536_253fs_253d65&r=g' class='avatar avatar-65 photo' height='65' width='65' />		<span class="authorname"><a href='../../../www.tarindel.com/default.htm' rel='external nofollow' class='url'>Alex</a></span>
		</div>
				<div class="comment-meta commentmetadata">
		<a href="comment-page-1/#comment-31636">
		November 4, 2008 at 10:38 pm</a>
        <span class="comment-reply-link"><a rel="nofollow" class="comment-reply-login" href="../../blog/wp-login.php@redirect_to=http_253a_252f_252fwww.learncpp.com_252fcpp-tutorial_252f79-the-stack-and-the-heap_252f">Log in to Reply</a></span>		 
		</div>
		<p>I don&#8217;t understand the question.  Malloc allocates memory on the heap.  For those of you who don&#8217;t know what malloc is, it&#8217;s the old C-style way of dynamically allocating memory.  In C++, it is essentially deprecated in favor of the new operator.</p>
		</div>
<ul class='children'>
		<li class="comment even depth-3 clearfix" id="comment-31653">
		<div id="div-comment-31653" class="clearfix comment-container">
		<div class="comment-author vcard">
		<img alt='' src='../../../0.gravatar.com/avatar/23490d73ae5456568478541137e2a812@s=65&d=http_253a_252f_252f0.gravatar.com_252favatar_252fad516503a11cd5ca435acc9bb6523536_253fs_253d65&r=g' class='avatar avatar-65 photo' height='65' width='65' />		<span class="authorname">som shekhar</span>
		</div>
				<div class="comment-meta commentmetadata">
		<a href="comment-page-1/#comment-31653">
		November 5, 2008 at 3:18 am</a>
        <span class="comment-reply-link"><a rel="nofollow" class="comment-reply-login" href="../../blog/wp-login.php@redirect_to=http_253a_252f_252fwww.learncpp.com_252fcpp-tutorial_252f79-the-stack-and-the-heap_252f">Log in to Reply</a></span>		 
		</div>
		<p>Sorry its not malloc ..its alloca..<br />
i guess alloca dynamically creates memory on stack?</p>
		</div>
<ul class='children'>
		<li class="comment byuser comment-author-Tarindel bypostauthor odd alt depth-4 clearfix" id="comment-31816">
		<div id="div-comment-31816" class="clearfix comment-container bypostauthor">
		<div class="comment-author vcard">
		<img alt='' src='../../../0.gravatar.com/avatar/2bcdbab687c32f64f9208e016cafe4cc@s=65&d=http_253a_252f_252f0.gravatar.com_252favatar_252fad516503a11cd5ca435acc9bb6523536_253fs_253d65&r=g' class='avatar avatar-65 photo' height='65' width='65' />		<span class="authorname"><a href='../../../www.tarindel.com/default.htm' rel='external nofollow' class='url'>Alex</a></span>
		</div>
				<div class="comment-meta commentmetadata">
		<a href="comment-page-1/#comment-31816">
		November 8, 2008 at 11:25 am</a>
        <span class="comment-reply-link"><a rel="nofollow" class="comment-reply-login" href="../../blog/wp-login.php@redirect_to=http_253a_252f_252fwww.learncpp.com_252fcpp-tutorial_252f79-the-stack-and-the-heap_252f">Log in to Reply</a></span>		 
		</div>
		<p>It appears that way.  I&#8217;ve never used alloca.  It&#8217;s not part of standard C either, so I would avoid it&#8217;s use.</p>
		</div>
</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
		<li class="comment even thread-odd thread-alt depth-1 clearfix" id="comment-35475">
		<div id="div-comment-35475" class="clearfix comment-container">
		<div class="comment-author vcard">
		<img alt='' src='../../../1.gravatar.com/avatar/dc0ed0012055c31bc221698289cfaeff@s=65&d=http_253a_252f_252f1.gravatar.com_252favatar_252fad516503a11cd5ca435acc9bb6523536_253fs_253d65&r=g' class='avatar avatar-65 photo' height='65' width='65' />		<span class="authorname"><a href='../../default.htm' rel='external nofollow' class='url'>lalit</a></span>
		</div>
				<div class="comment-meta commentmetadata">
		<a href="comment-page-1/#comment-35475">
		December 23, 2008 at 2:12 pm</a>
        <span class="comment-reply-link"><a rel="nofollow" class="comment-reply-login" href="../../blog/wp-login.php@redirect_to=http_253a_252f_252fwww.learncpp.com_252fcpp-tutorial_252f79-the-stack-and-the-heap_252f">Log in to Reply</a></span>		 
		</div>
		<p>hello Alex,<br />
 who decides the amount of memory among stack,heap,global &amp; code allocated on ram &amp;<br />
on what baises.<br />
 thxs.</p>
		</div>
<ul class='children'>
		<li class="comment byuser comment-author-Tarindel bypostauthor odd alt depth-2 clearfix" id="comment-35920">
		<div id="div-comment-35920" class="clearfix comment-container bypostauthor">
		<div class="comment-author vcard">
		<img alt='' src='../../../0.gravatar.com/avatar/2bcdbab687c32f64f9208e016cafe4cc@s=65&d=http_253a_252f_252f0.gravatar.com_252favatar_252fad516503a11cd5ca435acc9bb6523536_253fs_253d65&r=g' class='avatar avatar-65 photo' height='65' width='65' />		<span class="authorname"><a href='../../../www.tarindel.com/default.htm' rel='external nofollow' class='url'>Alex</a></span>
		</div>
				<div class="comment-meta commentmetadata">
		<a href="comment-page-1/#comment-35920">
		December 29, 2008 at 8:38 pm</a>
        <span class="comment-reply-link"><a rel="nofollow" class="comment-reply-login" href="../../blog/wp-login.php@redirect_to=http_253a_252f_252fwww.learncpp.com_252fcpp-tutorial_252f79-the-stack-and-the-heap_252f">Log in to Reply</a></span>		 
		</div>
		<p>I believe the OS is responsible for these things.</p>
		</div>
</li>
</ul>
</li>
		<li class="comment byuser comment-author-crownabhisek even thread-even depth-1 clearfix" id="comment-37067">
		<div id="div-comment-37067" class="clearfix comment-container">
		<div class="comment-author vcard">
		<img alt='' src='../../../0.gravatar.com/avatar/8a4924b04ad0fa95cb4c53a0da3f6c25@s=65&d=http_253a_252f_252f0.gravatar.com_252favatar_252fad516503a11cd5ca435acc9bb6523536_253fs_253d65&r=g' class='avatar avatar-65 photo' height='65' width='65' />		<span class="authorname"><a href='../../../developa2z.tk/default.htm' rel='external nofollow' class='url'>absk007</a></span>
		</div>
				<div class="comment-meta commentmetadata">
		<a href="comment-page-1/#comment-37067">
		January 11, 2009 at 8:16 am</a>
        <span class="comment-reply-link"><a rel="nofollow" class="comment-reply-login" href="../../blog/wp-login.php@redirect_to=http_253a_252f_252fwww.learncpp.com_252fcpp-tutorial_252f79-the-stack-and-the-heap_252f">Log in to Reply</a></span>		 
		</div>
		<p>The bold word should be &#8220;last&#8221;.<br />
Read the paragraph.</p>
<p><cite>A stack is a last-in, first-out (LIFO) structure. The last item pushed onto the stack will be the first item popped off. If you put a new plate on top of the stack, anybody who takes a plate from the stack will take the plate you just pushed on <b>first</b>. Last on, first off. As items are pushed onto a stack, the stack grows larger — as items are popped off, the stack grows smaller.</cite></p>
		</div>
<ul class='children'>
		<li class="comment byuser comment-author-Tarindel bypostauthor odd alt depth-2 clearfix" id="comment-37107">
		<div id="div-comment-37107" class="clearfix comment-container bypostauthor">
		<div class="comment-author vcard">
		<img alt='' src='../../../0.gravatar.com/avatar/2bcdbab687c32f64f9208e016cafe4cc@s=65&d=http_253a_252f_252f0.gravatar.com_252favatar_252fad516503a11cd5ca435acc9bb6523536_253fs_253d65&r=g' class='avatar avatar-65 photo' height='65' width='65' />		<span class="authorname"><a href='../../../www.tarindel.com/default.htm' rel='external nofollow' class='url'>Alex</a></span>
		</div>
				<div class="comment-meta commentmetadata">
		<a href="comment-page-1/#comment-37107">
		January 11, 2009 at 2:55 pm</a>
        <span class="comment-reply-link"><a rel="nofollow" class="comment-reply-login" href="../../blog/wp-login.php@redirect_to=http_253a_252f_252fwww.learncpp.com_252fcpp-tutorial_252f79-the-stack-and-the-heap_252f">Log in to Reply</a></span>		 
		</div>
		<p>It is correct as written.  If I put a new plate on top of a stack of plates, it &#8220;buries&#8221; all of the other plates.  When someone comes along to take a plate, they will take the plate I just put on first because its the one on top.  So the LAST plate I put on is the FIRST one taken off.</p>
		</div>
<ul class='children'>
		<li class="comment even depth-3 clearfix" id="comment-84248">
		<div id="div-comment-84248" class="clearfix comment-container">
		<div class="comment-author vcard">
		<img alt='' src='../../../0.gravatar.com/avatar/04013835ceca97413715799d15804883@s=65&d=http_253a_252f_252f0.gravatar.com_252favatar_252fad516503a11cd5ca435acc9bb6523536_253fs_253d65&r=g' class='avatar avatar-65 photo' height='65' width='65' />		<span class="authorname"><a href='../../../www.answerpond.com/default.htm' rel='external nofollow' class='url'>Question</a></span>
		</div>
				<div class="comment-meta commentmetadata">
		<a href="comment-page-1/#comment-84248">
		May 6, 2010 at 8:23 am</a>
        <span class="comment-reply-link"><a rel="nofollow" class="comment-reply-login" href="../../blog/wp-login.php@redirect_to=http_253a_252f_252fwww.learncpp.com_252fcpp-tutorial_252f79-the-stack-and-the-heap_252f">Log in to Reply</a></span>		 
		</div>
		<p>Great article.  I believe absk007 is correct though.  The words &#8220;last&#8221; and &#8220;first&#8221; refer to the perspective of when the item is pushed on or popped off the stack.  So the way it is currently phrased, the word should be changed to &#8220;last&#8221;. </p>
<p><cite>&#8220;&#8230;anybody who takes a plate from the stack will take the plate you just pushed on <b>last</b>&#8220;.</cite></p>
		</div>
<ul class='children'>
		<li class="comment odd alt depth-4 clearfix" id="comment-92601">
		<div id="div-comment-92601" class="clearfix comment-container">
		<div class="comment-author vcard">
		<img alt='' src='../../../1.gravatar.com/avatar/3a8617d4777b58148c43f419bda211a3@s=65&d=http_253a_252f_252f1.gravatar.com_252favatar_252fad516503a11cd5ca435acc9bb6523536_253fs_253d65&r=g' class='avatar avatar-65 photo' height='65' width='65' />		<span class="authorname">MattRMunson</span>
		</div>
				<div class="comment-meta commentmetadata">
		<a href="comment-page-1/#comment-92601">
		September 24, 2010 at 7:24 am</a>
        <span class="comment-reply-link"><a rel="nofollow" class="comment-reply-login" href="../../blog/wp-login.php@redirect_to=http_253a_252f_252fwww.learncpp.com_252fcpp-tutorial_252f79-the-stack-and-the-heap_252f">Log in to Reply</a></span>		 
		</div>
		<p>Actually, the best way to phrase this would be</p>
<p>“…anybody who takes a plate from the stack will FIRST take the plate you just pushed on.“</p>
<p>however, since the sentence says &#8220;a plate&#8221;, singular, you could actually get away with just </p>
<p>“…anybody who takes a plate from the stack will take the plate you just pushed on.“</p>
<p>or perhaps better,</p>
<p>&#8220;the first person who takes a plate from the stack will take the plate you just pushed on.“</p>
<p>or </p>
<p>&#8220;the next person who takes a plate from the stack will take the plate you just pushed on.“</p>
		</div>
</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
		<li class="comment byuser comment-author-crownabhisek even thread-odd thread-alt depth-1 clearfix" id="comment-37068">
		<div id="div-comment-37068" class="clearfix comment-container">
		<div class="comment-author vcard">
		<img alt='' src='../../../0.gravatar.com/avatar/8a4924b04ad0fa95cb4c53a0da3f6c25@s=65&d=http_253a_252f_252f0.gravatar.com_252favatar_252fad516503a11cd5ca435acc9bb6523536_253fs_253d65&r=g' class='avatar avatar-65 photo' height='65' width='65' />		<span class="authorname"><a href='../../../developa2z.tk/default.htm' rel='external nofollow' class='url'>absk007</a></span>
		</div>
				<div class="comment-meta commentmetadata">
		<a href="comment-page-1/#comment-37068">
		January 11, 2009 at 8:26 am</a>
        <span class="comment-reply-link"><a rel="nofollow" class="comment-reply-login" href="../../blog/wp-login.php@redirect_to=http_253a_252f_252fwww.learncpp.com_252fcpp-tutorial_252f79-the-stack-and-the-heap_252f">Log in to Reply</a></span>		 
		</div>
		<p>What do you mean by &#8220;register in the CPU&#8221;?<br />
Please simplify..</p>
<p><cite>The “marker” is a <b>register in the CPU</b> known as the stack pointer.</cite></p>
		</div>
<ul class='children'>
		<li class="comment byuser comment-author-Tarindel bypostauthor odd alt depth-2 clearfix" id="comment-37109">
		<div id="div-comment-37109" class="clearfix comment-container bypostauthor">
		<div class="comment-author vcard">
		<img alt='' src='../../../0.gravatar.com/avatar/2bcdbab687c32f64f9208e016cafe4cc@s=65&d=http_253a_252f_252f0.gravatar.com_252favatar_252fad516503a11cd5ca435acc9bb6523536_253fs_253d65&r=g' class='avatar avatar-65 photo' height='65' width='65' />		<span class="authorname"><a href='../../../www.tarindel.com/default.htm' rel='external nofollow' class='url'>Alex</a></span>
		</div>
				<div class="comment-meta commentmetadata">
		<a href="comment-page-1/#comment-37109">
		January 11, 2009 at 2:58 pm</a>
        <span class="comment-reply-link"><a rel="nofollow" class="comment-reply-login" href="../../blog/wp-login.php@redirect_to=http_253a_252f_252fwww.learncpp.com_252fcpp-tutorial_252f79-the-stack-and-the-heap_252f">Log in to Reply</a></span>		 
		</div>
		<p>A register is just a small piece of memory inside the CPU that the CPU uses to perform its tasks.</p>
		</div>
</li>
</ul>
</li>
		<li class="comment even thread-even depth-1 clearfix" id="comment-65238">
		<div id="div-comment-65238" class="clearfix comment-container">
		<div class="comment-author vcard">
		<img alt='' src='../../../0.gravatar.com/avatar/c65f0ed9274dc88344ad11665303327f@s=65&d=http_253a_252f_252f0.gravatar.com_252favatar_252fad516503a11cd5ca435acc9bb6523536_253fs_253d65&r=g' class='avatar avatar-65 photo' height='65' width='65' />		<span class="authorname">Chris</span>
		</div>
				<div class="comment-meta commentmetadata">
		<a href="comment-page-1/#comment-65238">
		July 29, 2009 at 5:35 am</a>
        <span class="comment-reply-link"><a rel="nofollow" class="comment-reply-login" href="../../blog/wp-login.php@redirect_to=http_253a_252f_252fwww.learncpp.com_252fcpp-tutorial_252f79-the-stack-and-the-heap_252f">Log in to Reply</a></span>		 
		</div>
		<p>I think the advantages and disadvantages lists should mention the fact that heap allocation is significantly slower than stack allocation. So for relatively short lists of data, it is better to put them on the stack.</p>
<p>You may also want to show an example of stack allocation like you do for the heap.</p>
<p>For example:</p>
<pre>
int value; // value is assigned 4 bytes from the stack
int array[10]; // array is assigned 40 bytes from the stack
</pre>
		</div>
</li>
		<li class="comment odd alt thread-odd thread-alt depth-1 clearfix" id="comment-69989">
		<div id="div-comment-69989" class="clearfix comment-container">
		<div class="comment-author vcard">
		<img alt='' src='../../../1.gravatar.com/avatar/19c72679b8a311e15f1b9de3650f4280@s=65&d=http_253a_252f_252f1.gravatar.com_252favatar_252fad516503a11cd5ca435acc9bb6523536_253fs_253d65&r=g' class='avatar avatar-65 photo' height='65' width='65' />		<span class="authorname">Shai</span>
		</div>
				<div class="comment-meta commentmetadata">
		<a href="comment-page-1/#comment-69989">
		October 9, 2009 at 1:42 am</a>
        <span class="comment-reply-link"><a rel="nofollow" class="comment-reply-login" href="../../blog/wp-login.php@redirect_to=http_253a_252f_252fwww.learncpp.com_252fcpp-tutorial_252f79-the-stack-and-the-heap_252f">Log in to Reply</a></span>		 
		</div>
		<p>Great post, but there was something I noticed in this part of the text:</p>
<p>&#8221;<br />
The heap has advantages and disadvantages:<br />
1) Allocated memory stays allocated until it is specifically deallocated (beware memory leaks).<br />
2) Dynamically allocated memory must be accessed through a pointer.<br />
3) Because the heap is a big pool of memory, large arrays, structures, or classes should be allocated here.<br />
&#8221;</p>
<p>The 3rd part isn&#8217;t really a disadvantage or an advantage, just an attribute.<br />
If you want it to be an advantage you need to change the phrasing to</p>
<p>&#8220;Because the heap is a big pool of memory, large arrays, structures, or classes COULD be allocated THERE.</p>
<p>That sounds more like an advantage.</p>
		</div>
</li>
		<li class="pingback even thread-even depth-1 clearfix" id="comment-87409">
		<div id="div-comment-87409" class="clearfix comment-container">
		<div class="comment-author vcard">
				<span class="authorname"><a href='../../../cplusplus.psexam.com/c-tutorial-and-online-ebook/default.htm' rel='external nofollow' class='url'>C++ Tutorial and Online Ebook</a></span>
		</div>
				<div class="comment-meta commentmetadata">
		<a href="comment-page-1/#comment-87409">
		June 29, 2010 at 4:59 pm</a>
        <span class="comment-reply-link"><a rel="nofollow" class="comment-reply-login" href="../../blog/wp-login.php@redirect_to=http_253a_252f_252fwww.learncpp.com_252fcpp-tutorial_252f79-the-stack-and-the-heap_252f">Log in to Reply</a></span>		 
		</div>
		<p>[...] 7.9 The stack and the heap [...]</p>
		</div>
</li>
		<li class="comment odd alt thread-odd thread-alt depth-1 clearfix" id="comment-90377">
		<div id="div-comment-90377" class="clearfix comment-container">
		<div class="comment-author vcard">
		<img alt='' src='../../../1.gravatar.com/avatar/bd0670a2e95ece0462a271cad94fc0bc@s=65&d=http_253a_252f_252f1.gravatar.com_252favatar_252fad516503a11cd5ca435acc9bb6523536_253fs_253d65&r=g' class='avatar avatar-65 photo' height='65' width='65' />		<span class="authorname">Piyush</span>
		</div>
				<div class="comment-meta commentmetadata">
		<a href="comment-page-1/#comment-90377">
		August 15, 2010 at 11:24 pm</a>
        <span class="comment-reply-link"><a rel="nofollow" class="comment-reply-login" href="../../blog/wp-login.php@redirect_to=http_253a_252f_252fwww.learncpp.com_252fcpp-tutorial_252f79-the-stack-and-the-heap_252f">Log in to Reply</a></span>		 
		</div>
		<p>Why can&#8217;t we make stack as long as heap, if size becomes an issue in case of stacks?</p>
		</div>
</li>
		<li class="comment even thread-even depth-1 clearfix" id="comment-91060">
		<div id="div-comment-91060" class="clearfix comment-container">
		<div class="comment-author vcard">
		<img alt='' src='../../../0.gravatar.com/avatar/07919e64cf6715d571b01c5e58808c2c@s=65&d=http_253a_252f_252f0.gravatar.com_252favatar_252fad516503a11cd5ca435acc9bb6523536_253fs_253d65&r=g' class='avatar avatar-65 photo' height='65' width='65' />		<span class="authorname">dospy</span>
		</div>
				<div class="comment-meta commentmetadata">
		<a href="comment-page-1/#comment-91060">
		August 29, 2010 at 12:20 am</a>
        <span class="comment-reply-link"><a rel="nofollow" class="comment-reply-login" href="../../blog/wp-login.php@redirect_to=http_253a_252f_252fwww.learncpp.com_252fcpp-tutorial_252f79-the-stack-and-the-heap_252f">Log in to Reply</a></span>		 
		</div>
		<p>my stack capacity is 258500 :D ( i am on windows, 2gb ram, i dono if it matters anyways )<br />
code:</p>
<p>#include &gt;iostream&lt;  //this looks funny, but the forum wont let me use &quot;&#8221;</p>
<p>#define STACK_CAPACITY 258500</p>
<p>struct MyStruct<br />
{<br />
	int nArray[STACK_CAPACITY];<br />
};<br />
int main()<br />
{<br />
	MyStruct anStruct;</p>
<p>	char nChar;<br />
	cin.get(nChar);</p>
<p>	return 0;<br />
}</p>
<p>i have changed the value of STACK_CAPACITY until it reaches the limit,<br />
when i reached 258500, the program crashed when delcaring nChar</p>
		</div>
</li>
		<li class="comment odd alt thread-odd thread-alt depth-1 clearfix" id="comment-91636">
		<div id="div-comment-91636" class="clearfix comment-container">
		<div class="comment-author vcard">
		<img alt='' src='../../../1.gravatar.com/avatar/ff9f13e048ce8aa148ba72be526946db@s=65&d=http_253a_252f_252f1.gravatar.com_252favatar_252fad516503a11cd5ca435acc9bb6523536_253fs_253d65&r=g' class='avatar avatar-65 photo' height='65' width='65' />		<span class="authorname">ashwani</span>
		</div>
				<div class="comment-meta commentmetadata">
		<a href="comment-page-1/#comment-91636">
		September 8, 2010 at 12:34 am</a>
        <span class="comment-reply-link"><a rel="nofollow" class="comment-reply-login" href="../../blog/wp-login.php@redirect_to=http_253a_252f_252fwww.learncpp.com_252fcpp-tutorial_252f79-the-stack-and-the-heap_252f">Log in to Reply</a></span>		 
		</div>
		<p>why in stack first out &amp; last in takes place?</p>
		</div>
</li>
		<li class="comment even thread-even depth-1 clearfix" id="comment-93722">
		<div id="div-comment-93722" class="clearfix comment-container">
		<div class="comment-author vcard">
		<img alt='' src='../../../0.gravatar.com/avatar/cbd2994070ffe6b3ed0fa48ca07497c8@s=65&d=http_253a_252f_252f0.gravatar.com_252favatar_252fad516503a11cd5ca435acc9bb6523536_253fs_253d65&r=g' class='avatar avatar-65 photo' height='65' width='65' />		<span class="authorname">Jeff</span>
		</div>
				<div class="comment-meta commentmetadata">
		<a href="comment-page-1/#comment-93722">
		October 14, 2010 at 8:00 am</a>
        <span class="comment-reply-link"><a rel="nofollow" class="comment-reply-login" href="../../blog/wp-login.php@redirect_to=http_253a_252f_252fwww.learncpp.com_252fcpp-tutorial_252f79-the-stack-and-the-heap_252f">Log in to Reply</a></span>		 
		</div>
		<p>The parameters that are stacked are those of the calling function, not the called function. That way the return from the called function returns the state of the calling function. These are stacked prior to stacking the return address and value.</p>
		</div>
</li>
		<li class="pingback odd alt thread-odd thread-alt depth-1 clearfix" id="comment-95015">
		<div id="div-comment-95015" class="clearfix comment-container">
		<div class="comment-author vcard">
				<span class="authorname"><a href='../../../www.linuxquestions.org/questions/programming-9/memory-leak-in-c-a-few-questions-848945/#post4184361' rel='external nofollow' class='url'>Memory leak in C - A few questions</a></span>
		</div>
				<div class="comment-meta commentmetadata">
		<a href="comment-page-1/#comment-95015">
		December 8, 2010 at 12:00 am</a>
        <span class="comment-reply-link"><a rel="nofollow" class="comment-reply-login" href="../../blog/wp-login.php@redirect_to=http_253a_252f_252fwww.learncpp.com_252fcpp-tutorial_252f79-the-stack-and-the-heap_252f">Log in to Reply</a></span>		 
		</div>
		<p>[...] I found a nice link on stacks and heaps but: <a href="../../cpp-tutorial...-and-the-heap/default.htm" rel="nofollow">http://www.learncpp.com/cpp-tutorial&#8230;-and-the-heap/</a>  how to manually allocate memory from stack is still a question for [...]</p>
		</div>
</li>
		<li class="pingback even thread-even depth-1 clearfix" id="comment-95098">
		<div id="div-comment-95098" class="clearfix comment-container">
		<div class="comment-author vcard">
				<span class="authorname"><a href='../../../zhongliangliang.wordpress.com/2011/01/07/cc-miscellanea/default.htm' rel='external nofollow' class='url'>C/C++ Miscellanea &laquo; Zhongliang(Samuel) Liang&#039;s Technical Blog</a></span>
		</div>
				<div class="comment-meta commentmetadata">
		<a href="comment-page-1/#comment-95098">
		January 14, 2011 at 7:33 pm</a>
        <span class="comment-reply-link"><a rel="nofollow" class="comment-reply-login" href="../../blog/wp-login.php@redirect_to=http_253a_252f_252fwww.learncpp.com_252fcpp-tutorial_252f79-the-stack-and-the-heap_252f">Log in to Reply</a></span>		 
		</div>
		<p>[...] The stack and the heap, by Alex, on August 10th, 2007 [...]</p>
		</div>
</li>
		<li class="comment byuser comment-author-swengineer odd alt thread-odd thread-alt depth-1 clearfix" id="comment-95128">
		<div id="div-comment-95128" class="clearfix comment-container">
		<div class="comment-author vcard">
		<img alt='' src='../../../1.gravatar.com/avatar/55eddb03eeaf352cd86f04eaafe12131@s=65&d=http_253a_252f_252f1.gravatar.com_252favatar_252fad516503a11cd5ca435acc9bb6523536_253fs_253d65&r=g' class='avatar avatar-65 photo' height='65' width='65' />		<span class="authorname">SWEngineer</span>
		</div>
				<div class="comment-meta commentmetadata">
		<a href="comment-page-1/#comment-95128">
		January 24, 2011 at 1:56 am</a>
        <span class="comment-reply-link"><a rel="nofollow" class="comment-reply-login" href="../../blog/wp-login.php@redirect_to=http_253a_252f_252fwww.learncpp.com_252fcpp-tutorial_252f79-the-stack-and-the-heap_252f">Log in to Reply</a></span>		 
		</div>
		<p>When mentioned the following:</p>
<p>&#8230;anybody who takes a plate from the stack will take the plate you just pushed on &#8220;first&#8221;.</p>
<p>Shouldn&#8217;t &#8220;first&#8221; here be &#8220;last&#8221;?</p>
<p>Thanks.</p>
		</div>
</li>
		<li class="comment byuser comment-author-swengineer even thread-even depth-1 clearfix" id="comment-95129">
		<div id="div-comment-95129" class="clearfix comment-container">
		<div class="comment-author vcard">
		<img alt='' src='../../../1.gravatar.com/avatar/55eddb03eeaf352cd86f04eaafe12131@s=65&d=http_253a_252f_252f1.gravatar.com_252favatar_252fad516503a11cd5ca435acc9bb6523536_253fs_253d65&r=g' class='avatar avatar-65 photo' height='65' width='65' />		<span class="authorname">SWEngineer</span>
		</div>
				<div class="comment-meta commentmetadata">
		<a href="comment-page-1/#comment-95129">
		January 24, 2011 at 2:24 am</a>
        <span class="comment-reply-link"><a rel="nofollow" class="comment-reply-login" href="../../blog/wp-login.php@redirect_to=http_253a_252f_252fwww.learncpp.com_252fcpp-tutorial_252f79-the-stack-and-the-heap_252f">Log in to Reply</a></span>		 
		</div>
		<p>Simple well explained tutorial.</p>
<p>Thanks.</p>
		</div>
</li>
		<li class="comment byuser comment-author-ratep90 odd alt thread-odd thread-alt depth-1 clearfix" id="comment-95149">
		<div id="div-comment-95149" class="clearfix comment-container">
		<div class="comment-author vcard">
		<img alt='' src='../../../1.gravatar.com/avatar/d06a1350c60a2e762779e8c20d787176@s=65&d=http_253a_252f_252f1.gravatar.com_252favatar_252fad516503a11cd5ca435acc9bb6523536_253fs_253d65&r=g' class='avatar avatar-65 photo' height='65' width='65' />		<span class="authorname">ratep90</span>
		</div>
				<div class="comment-meta commentmetadata">
		<a href="comment-page-1/#comment-95149">
		February 2, 2011 at 8:19 am</a>
        <span class="comment-reply-link"><a rel="nofollow" class="comment-reply-login" href="../../blog/wp-login.php@redirect_to=http_253a_252f_252fwww.learncpp.com_252fcpp-tutorial_252f79-the-stack-and-the-heap_252f">Log in to Reply</a></span>		 
		</div>
		<p>Does this mean main() local variables are also on stack?</p>
		</div>
</li>
		<li class="comment byuser comment-author-cyberlynxs even thread-even depth-1 clearfix" id="comment-96389">
		<div id="div-comment-96389" class="clearfix comment-container">
		<div class="comment-author vcard">
		<img alt='' src='../../../1.gravatar.com/avatar/f57d7e2c4f2a652c20d987d2ddbf4d5f@s=65&d=http_253a_252f_252f1.gravatar.com_252favatar_252fad516503a11cd5ca435acc9bb6523536_253fs_253d65&r=g' class='avatar avatar-65 photo' height='65' width='65' />		<span class="authorname">cyberlynxs</span>
		</div>
				<div class="comment-meta commentmetadata">
		<a href="comment-page-1/#comment-96389">
		November 15, 2011 at 11:48 am</a>
        <span class="comment-reply-link"><a rel="nofollow" class="comment-reply-login" href="../../blog/wp-login.php@redirect_to=http_253a_252f_252fwww.learncpp.com_252fcpp-tutorial_252f79-the-stack-and-the-heap_252f">Log in to Reply</a></span>		 
		</div>
		<p>nice explanation</p>
		</div>
</li>
		<li class="comment byuser comment-author-shorawitz odd alt thread-odd thread-alt depth-1 clearfix" id="comment-96393">
		<div id="div-comment-96393" class="clearfix comment-container">
		<div class="comment-author vcard">
		<img alt='' src='../../../0.gravatar.com/avatar/ce544098ade6c9ec8119e073312c351e@s=65&d=http_253a_252f_252f0.gravatar.com_252favatar_252fad516503a11cd5ca435acc9bb6523536_253fs_253d65&r=g' class='avatar avatar-65 photo' height='65' width='65' />		<span class="authorname">shorawitz</span>
		</div>
				<div class="comment-meta commentmetadata">
		<a href="comment-page-1/#comment-96393">
		November 16, 2011 at 7:23 am</a>
        <span class="comment-reply-link"><a rel="nofollow" class="comment-reply-login" href="../../blog/wp-login.php@redirect_to=http_253a_252f_252fwww.learncpp.com_252fcpp-tutorial_252f79-the-stack-and-the-heap_252f">Log in to Reply</a></span>		 
		</div>
		<p>I&#8217;m surprised this hasn&#8217;t been asked yet, but being a relative noob&#8230; I&#8217;m wondering what would be considered &#8221; large arrays, structures, or classes&#8221;?  What would a reasonable threshold be?</p>
		</div>
</li>
		<li class="pingback even thread-even depth-1 clearfix" id="comment-96457">
		<div id="div-comment-96457" class="clearfix comment-container">
		<div class="comment-author vcard">
				<span class="authorname"><a href='../a5-debugging-your-program-watching-variables-and-the-call-stack/default.htm' rel='external nofollow' class='url'>A.5 &#8212; Debugging your program (watching variables and the call stack) &laquo; Learn C++</a></span>
		</div>
				<div class="comment-meta commentmetadata">
		<a href="comment-page-1/#comment-96457">
		November 25, 2011 at 7:54 pm</a>
        <span class="comment-reply-link"><a rel="nofollow" class="comment-reply-login" href="../../blog/wp-login.php@redirect_to=http_253a_252f_252fwww.learncpp.com_252fcpp-tutorial_252f79-the-stack-and-the-heap_252f">Log in to Reply</a></span>		 
		</div>
		<p>[...] Modern debuggers contain one more debugging information window that can be very useful in debugging your program. The call stack window shows you the state of the current call stack. If you need a refresher on what the call stack is, see the lesson on the stack and the heap. [...]</p>
		</div>
</li>
	
	</ul>
	<!-- / Comment List -->

	



	
	<p>You must be <a href="../../blog/wp-login.php@redirect_to=http_253a_252f_252fwww.learncpp.com_252fcpp-tutorial_252f79-the-stack-and-the-heap_252f">logged in</a> to post a comment.</p>

		

<div class="clearfix navigation-bottom">
		<div class="older">&laquo; <a href="../78-function-pointers/default.htm" rel="prev">7.8 &#8212; Function Pointers</a> &nbsp;</div><div class="newer">&nbsp; <a href="../710-recursion/default.htm" rel="next">7.10 &#8212; Recursion</a> &raquo;</div></div>		
			



</td>
<!-- / Main Column -->


<!-- Right Sidebar -->
<td id="right">

	<div id="text-1" class="widget widget_text">			<div class="textwidget"><script type="text/javascript"><!--
google_ad_client = "pub-0588844875925051";
/* Wide Skyscraper Right Bar */
google_ad_slot = "0955932809";
google_ad_width = 160;
google_ad_height = 600;
//-->
</script>
<acript type="text/javascript"
src="../../../pagead2.googlesyndication.com/pagead/show_ads.js">
</script></div>
		</div><div id="archives-2" class="widget widget_archive"><div class="widget-title"><h3>Archives</h3></div>		<ul>
			<li><a href='../../2011/11/default.htm' title='November 2011'>November 2011</a></li>
	<li><a href='../../2011/10/default.htm' title='October 2011'>October 2011</a></li>
	<li><a href='../../2011/09/default.htm' title='September 2011'>September 2011</a></li>
	<li><a href='../../2010/10/default.htm' title='October 2010'>October 2010</a></li>
	<li><a href='../../2010/07/default.htm' title='July 2010'>July 2010</a></li>
	<li><a href='../../2009/10/default.htm' title='October 2009'>October 2009</a></li>
	<li><a href='../../2009/09/default.htm' title='September 2009'>September 2009</a></li>
	<li><a href='../../2009/03/default.htm' title='March 2009'>March 2009</a></li>
	<li><a href='../../2008/12/default.htm' title='December 2008'>December 2008</a></li>
	<li><a href='../../2008/10/default.htm' title='October 2008'>October 2008</a></li>
	<li><a href='../../2008/09/default.htm' title='September 2008'>September 2008</a></li>
	<li><a href='../../2008/08/default.htm' title='August 2008'>August 2008</a></li>
	<li><a href='../../2008/06/default.htm' title='June 2008'>June 2008</a></li>
	<li><a href='../../2008/05/default.htm' title='May 2008'>May 2008</a></li>
	<li><a href='../../2008/04/default.htm' title='April 2008'>April 2008</a></li>
	<li><a href='../../2008/03/default.htm' title='March 2008'>March 2008</a></li>
	<li><a href='../../2008/02/default.htm' title='February 2008'>February 2008</a></li>
	<li><a href='../../2008/01/default.htm' title='January 2008'>January 2008</a></li>
	<li><a href='../../2007/12/default.htm' title='December 2007'>December 2007</a></li>
	<li><a href='../../2007/11/default.htm' title='November 2007'>November 2007</a></li>
	<li><a href='../../2007/10/default.htm' title='October 2007'>October 2007</a></li>
	<li><a href='../../2007/09/default.htm' title='September 2007'>September 2007</a></li>
	<li><a href='../../2007/08/default.htm' title='August 2007'>August 2007</a></li>
	<li><a href='../../2007/07/default.htm' title='July 2007'>July 2007</a></li>
	<li><a href='../../2007/06/default.htm' title='June 2007'>June 2007</a></li>
	<li><a href='../../2007/05/default.htm' title='May 2007'>May 2007</a></li>
		</ul>
</div>
</td>
<!-- / Right Sidebar -->

</tr>
<!-- / Main Body -->
<tr>

<!-- Footer -->
<td id="footer" colspan="3">

    <p>
    Copyright &copy; 2011 <a href="../../default.htm">Learn C++</a> - All Rights Reserved<br />Powered by <a href="../../../wordpress.org/default.htm">WordPress</a> &amp; the <a href="../../../wordpress.bytesforall.com/default.htm" title="Customizable WordPress themes">Atahualpa Theme</a> by <a href="../../../www.bytesforall.com/default.htm" title="BFA Webdesign">BytesForAll</a>. Discuss on our <a href="../../../forum.bytesforall.com/default.htm" title="Atahualpa &amp; WordPress">WP Forum</a>    </p>
    
    
    <script type='text/javascript' src='../../blog/wp-content/plugins/syntaxhighlighter/syntaxhighlighter3/scripts/shcore.js@ver=3.0.83c'></script>
<script type='text/javascript' src='../../blog/wp-content/plugins/syntaxhighlighter/syntaxhighlighter3/scripts/shbrushcpp.js@ver=3.0.83c'></script>
<script type='text/javascript'>
	(function(){
		var corecss = document.createElement('link');
		var themecss = document.createElement('link');
		var corecssurl = "../../blog/wp-content/plugins/syntaxhighlighter/syntaxhighlighter3/styles/shcore.css@ver=3.0.83c.css";
		if ( corecss.setAttribute ) {
				corecss.setAttribute( "rel", "stylesheet" );
				corecss.setAttribute( "type", "text/css" );
				corecss.setAttribute( "href", corecssurl );
		} else {
				corecss.rel = "stylesheet";
				corecss.href = corecssurl;
		}
		document.getElementsByTagName("head")[0].insertBefore( corecss, document.getElementById("syntaxhighlighteranchor") );
		var themecssurl = "../../blog/wp-content/plugins/syntaxhighlighter/syntaxhighlighter3/styles/shthemedefault.css@ver=3.0.83c.css";
		if ( themecss.setAttribute ) {
				themecss.setAttribute( "rel", "stylesheet" );
				themecss.setAttribute( "type", "text/css" );
				themecss.setAttribute( "href", themecssurl );
		} else {
				themecss.rel = "stylesheet";
				themecss.href = themecssurl;
		}
		//document.getElementById("syntaxhighlighteranchor").appendChild(themecss);
		document.getElementsByTagName("head")[0].insertBefore( themecss, document.getElementById("syntaxhighlighteranchor") );
	})();
	SyntaxHighlighter.config.strings.expandSource = '+ expand source';
	SyntaxHighlighter.config.strings.help = '?';
	SyntaxHighlighter.config.strings.alert = 'SyntaxHighlighter\n\n';
	SyntaxHighlighter.config.strings.noBrush = 'Can\'t find brush for: ';
	SyntaxHighlighter.config.strings.brushNotHtmlScript = 'Brush wasn\'t configured for html-script option: ';
	SyntaxHighlighter.defaults['pad-line-numbers'] = false;
	SyntaxHighlighter.defaults['toolbar'] = false;
	SyntaxHighlighter.all();
</script>
<!--stats_footer_test--><script src="../../../stats.wordpress.com/e-201148.js" type="text/javascript"></script>
<script type="text/javascript">
st_go({blog:'3928254',v:'ext',post:'120'});
var load_cmc = function(){linktracker_init(3928254,120,2);};
if ( typeof addLoadEvent != 'undefined' ) addLoadEvent(load_cmc);
else load_cmc();
</script>

</td>
<!-- / Footer -->

</tr>
</table><!-- / layout -->
</div><!-- / container -->
</div><!-- / wrapper -->
</body>
</html>
<!-- Dynamic page generated in 0.487 seconds. -->
<!-- Cached page generated by WP-Super-Cache on 2011-12-02 06:38:22 -->
<!-- Compression = gzip -->