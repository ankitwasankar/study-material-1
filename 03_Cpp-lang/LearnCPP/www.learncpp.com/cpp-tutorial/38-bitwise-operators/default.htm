<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd"><meta http-equiv="Content-Type" content="text/html; charset=utf-8"><!-- saved from url=(0069)http://www.learncpp.com/cpp-tutorial/38-bitwise-operators/default.htm -->

<html xmlns="http://www.w3.org/1999/xhtml" dir="ltr" lang="en-US">
<head>
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8" />
<meta http-equiv="X-UA-Compatible" content="IE=EmulateIE7" />
<title>3.8 &#8212; Bitwise operators &laquo; Learn C++</title>
<link rel="shortcut icon" href="../../blog/wp-content/themes/atahualpa353/images/favicon/learncpp.ico" /><link rel="canonical" href="default.htm" /><link rel="alternate" type="application/rss+xml" title="Learn C++ RSS Feed" href="../../feed/default.htm" />
<link rel="alternate" type="application/atom+xml" title="Learn C++ Atom Feed" href="../../feed/atom/default.htm" />
<link rel="pingback" href="http://www.learncpp.com/blog/xmlrpc.php" />
<link rel="alternate" type="application/rss+xml" title="Learn C++ &raquo; 3.8 &#8212; Bitwise operators Comments Feed" href="feed/default.htm" />
<script type='text/javascript' src='../../blog/wp-includes/js/l10n.js@ver=20101110'></script>
<script type='text/javascript' src='../../blog/wp-includes/js/jquery/jquery.js@ver=1.6.1'></script>
<script type='text/javascript' src='../../blog/wp-includes/js/comment-reply.js@ver=20090102'></script>
<script type='text/javascript' src='../../blog/wp-content/plugins/google-analyticator/external-tracking.min.js@ver=6.2'></script>
<link rel="EditURI" type="application/rsd+xml" title="RSD" href="http://www.learncpp.com/blog/xmlrpc.php?rsd" />
<link rel="wlwmanifest" type="application/wlwmanifest+xml" href="../../blog/wp-includes/wlwmanifest.xml" /> 
<link rel='index' title='Learn C++' href='../../default.htm' />
<link rel='start' title='Welcome to LearnCpp.com!' href='../../site-news/this-is-a-news-test-post/default.htm' />
<link rel='prev' title='3.7 &#8212; Converting between binary and decimal' href='../37-converting-between-binary-and-decimal/default.htm' />
<link rel='next' title='4.1 &#8212; Blocks (compound statements) and local variables' href='../41-blocks-compound-statements-and-local-variables/default.htm' />
<link rel='canonical' href='default.htm' />
<link rel='shortlink' href='../../../wp.me/pgtuw-z' />
<meta name="ROBOTS" content="INDEX" />

<!-- Powered by AdSense-Deluxe WordPress Plugin v0.8 - http://www.acmetech.com/blog/adsense-deluxe/ -->
<!-- wpSolution Code -->
        <script type="text/javascript">
            function wpSolutionToggle(solution, link, showtext, hidetext) {
                if (solution.style.display != 'none') {
                    solution.style.display = 'none';
                    link.innerHTML = showtext;
                    link.className = 'solution_link_show';
                } else {
                    solution.style.display = 'block';
                    link.innerHTML = hidetext;
                    link.className = 'solution_link_hide';
                }
            }
          </script>
<style type="text/css">body{text-align:center;margin:0;padding:0;font-family:verdana,arial,sans-serif;font-size:13px;line-height:1.4;color:#000000;background:#ddd;padding-top:20px;padding-bottom:20px}a:link,a:visited,a:active{color:#365DA0;font-weight:bold;text-decoration:none;}a:hover{color:#365DA0;font-weight:bold;text-decoration:underline}ul,ol,dl,p,h1,h2,h3,h4,h5,h6{margin-top:10px;margin-bottom:10px;padding-top:0;padding-bottom:0;}ul ul,ul ol,ol ul,ol ol{margin-top:0;margin-bottom:0}code,pre{font-family:"Courier New",Courier,monospace;font-size:1em}pre{overflow:auto;word-wrap:normal;padding-bottom:1.5em;overflow-y:hidden;width:99%}abbr[title],acronym[title]{border-bottom:1px dotted}hr{display:block;height:2px;border:none;margin:0.5em auto;color:#cccccc;background-color:#cccccc}table{font-size:1em;}div.post,ul.commentlist li,ol.commentlist li{word-wrap:break-word;}pre,.wp_syntax{word-wrap:normal;}div#wrapper{text-align:center;margin-left:auto;margin-right:auto;display:block;width:98%}* html div#wrapper{<!--width:expression"98%");-->}div#container{padding:20px;background:#fff;box-shadow:0 0 15px #333;-moz-box-shadow:0 0 15px #333;padding-left:20px;padding-right:20px;width:auto;margin-left:auto;margin-right:auto;text-align:left;display:block}table#layout{font-size:100%;width:100%;table-layout:fixed}.colone{width:200px}.colone-inner{width:200px}.coltwo{width:100% }.colthree-inner{width:200px}.colthree{width:200px}td#header{width:auto;padding:0}table#logoarea,table#logoarea tr,table#logoarea td{margin:0;padding:0;background:none;border:0}table#logoarea{width:100%;border-spacing:0px}img.logo{display:block;margin:0 10px 0 0}td.logoarea-logo{width:1%}h1.blogtitle,h2.blogtitle{ display:block;margin:0;padding:0;letter-spacing:-1px;line-height:1.0em;font-size:200%;text-transform:uppercase;font-smooth:always}h1.blogtitle a:link,h1.blogtitle a:visited,h1.blogtitle a:active,h2.blogtitle a:link,h2.blogtitle a:visited,h2.blogtitle a:active{ text-decoration:none;color:#000000;font-weight:normal;font-smooth:always}h1.blogtitle a:hover,h2.blogtitle a:hover{ text-decoration:none;color:#AC161B;font-weight:normal}p.tagline{margin:0;padding:0;font-size:1.2em;font-weight:normal;color:#444}td.feed-icons{white-space:nowrap;}div.rss-box{height:1%;display:block;padding:10px 0 10px 10px;margin:0;width:280px}a.comments-icon{height:22px;line-height:22px;margin:0 5px 0 5px;padding-left:22px;display:block;text-decoration:none;float:right;white-space:nowrap}a.comments-icon:link,a.commentss-icon:active,a.comments-icon:visited{background:transparent url(../../blog/wp-content/themes/atahualpa353/images/comment-gray.png) no-repeat scroll center left}a.comments-icon:hover{background:transparent url(../../blog/wp-content/themes/atahualpa353/images/comment.png) no-repeat scroll center left}a.posts-icon{height:22px;line-height:22px;margin:0 5px 0 0;padding-left:20px;display:block;text-decoration:none;float:right;white-space:nowrap}a.posts-icon:link,a.posts-icon:active,a.posts-icon:visited{background:transparent url(../../blog/wp-content/themes/atahualpa353/images/rss-gray.png) no-repeat scroll center left}a.posts-icon:hover{background:transparent url(../../blog/wp-content/themes/atahualpa353/images/rss.png) no-repeat scroll center left}a.email-icon{height:22px;line-height:22px;margin:0 5px 0 5px;padding-left:24px;display:block;text-decoration:none;float:right;white-space:nowrap}a.email-icon:link,a.email-icon:active,a.email-icon:visited{background:transparent url(../../blog/wp-content/themes/atahualpa353/images/email-gray.png) no-repeat scroll center left}a.email-icon:hover{background:transparent url(../../blog/wp-content/themes/atahualpa353/images/email.png) no-repeat scroll center left}td.search-box{height:1%}div.searchbox{height:35px;border-bottom:0;width:200px;margin:0;padding:0}div.searchbox-form{margin:5px 10px 5px 10px}div.horbar1,div.horbar2{font-size:1px;clear:both;display:block;position:relative;padding:0;margin:0;width:100%;}div.horbar1{height:0px;background:#ffffff;border-top:dashed 1px #cccccc}div.horbar2{height:0px;background:#ffffff;border-bottom:dashed 1px #cccccc}div.header-image-container{position:relative;margin:0;padding:0;height:150px;}div.clickable{position:absolute;top:0;left:0;z-index:3;margin:0;padding:0;width:100%;height:150px;}a.divclick:link,a.divclick:visited,a.divclick:active,a.divclick:hover{width:100%;height:100%;display:block;text-decoration:none}td#left{vertical-align:top;padding-right:20px}td#left-inner{vertical-align:top;padding-right:10px}td#right{vertical-align:top;padding-left:20px}td#right-inner{vertical-align:top;padding-left:10px}td#middle{vertical-align:top;width:100%;padding:10px 15px}td#footer{width:auto;background-color:#f7f7f7;border-top:solid 4px #eee;padding:10px;text-align:center;color:#888;font-size:11px}td#footer a:link,td#footer a:visited,td#footer a:active{text-decoration:none;color:#777777;font-weight:normal}td#footer a:hover{text-decoration:none;color:#777777;font-weight:normal}div.widget{display:block;width:auto;font-size:12px;margin:0 0 10px 0;padding:10px;border:solid 4px #eee}div.widget-title{display:block;width:auto}div.widget-title h3,td#left h3.tw-widgettitle,td#right h3.tw-widgettitle,td#left ul.tw-nav-list,td#right ul.tw-nav-list{padding:0;margin:0;font-size:0.9em;text-align:center;font-weight:normal;text-transform:uppercase;letter-spacing:1px;color:#333;border-bottom:solid 1px #eee;padding-bottom:10px;margin-bottom:10px}div.widget ul,div.textwidget{display:block;width:auto}div.widget select{width:98%;margin-top:5px;}div.widget ul{list-style-type:none;margin:0;padding:0;width:auto}div.widget ul li{display:block;margin:2px 0 2px 0px;padding:0 0 0 0px;border-left:solid 0px #CCCCCC}div.widget ul li:hover,div.widget ul li.sfhover{display:block;width:auto;border-left:solid 0px #000000;}div.widget ul li ul li{margin:2px 0 2px 5px;padding:0 0 0 0px;border-left:solid 0px #CCCCCC;}div.widget ul li ul li:hover,div.widget ul li ul li.sfhover{border-left:solid 0px #000000;}div.widget ul li ul li ul li{margin:2px 0 2px 5px;padding:0 0 0 0px;border-left:solid 0px #CCCCCC;}div.widget ul li ul li ul li:hover,div.widget ul li ul li ul li.sfhover{border-left:solid 0px #000000;}div.widget td a:link,div.widget td a:visited,div.widget td a:active,div.widget ul li a:link,div.widget ul li a:visited,div.widget ul li a:active{text-decoration:none;font-weight:normal;color:#365DA0;font-weight:normal;}div.widget ul li ul li a:link,div.widget ul li ul li a:visited,div.widget ul li ul li a:active{color:#365DA0;font-weight:normal;}div.widget ul li ul li ul li a:link,div.widget ul li ul li ul li a:visited,div.widget ul li ul li ul li a:active{color:#365DA0;font-weight:normal;}div.widget ul li a:hover{color:#365DA0;}div.widget ul li ul li a:hover{color:#365DA0;}div.widget ul li ul li ul li a:hover{color:#365DA0;}div.widget ul li a:link,div.widget ul li a:visited,div.widget ul li a:active,div.widget ul li a:hover{display:inline}* html div.widget ul li a:link,* html div.widget ul li a:visited,* html div.widget ul li a:active,* html div.widget ul li a:hover{height:1%; } div.widget_pages ul li,div.widget_categories ul li{border-left:0 !important;padding:0 !important}div.widget_pages ul li a:link,div.widget_pages ul li a:visited,div.widget_pages ul li a:active,div.widget_categories ul li a:link,div.widget_categories ul li a:visited,div.widget_categories ul li a:active{padding:0 0 0 0px;border-left:solid 0px #CCCCCC}div.widget_pages ul li a:hover,div.widget_categories ul li a:hover{border-left:solid 0px #000000;}div.widget_pages ul li ul li a:link,div.widget_pages ul li ul li a:visited,div.widget_pages ul li ul li a:active,div.widget_categories ul li ul li a:link,div.widget_categories ul li ul li a:visited,div.widget_categories ul li ul li a:active{padding:0 0 0 0px;border-left:solid 0px #CCCCCC}div.widget_pages ul li ul li a:hover,div.widget_categories ul li ul li a:hover{border-left:solid 0px #000000;}div.widget_pages ul li ul li ul li a:link,div.widget_pages ul li ul li ul li a:visited,div.widget_pages ul li ul li ul li a:active,div.widget_categories ul li ul li ul li a:link,div.widget_categories ul li ul li ul li a:visited,div.widget_categories ul li ul li ul li a:active{padding:0 0 0 0px;border-left:solid 0px #CCCCCC}div.widget_pages ul li ul li ul li a:hover,div.widget_categories ul li ul li ul li a:hover{border-left:solid 0px #000000;}div.widget_pages ul li a:link,div.widget_pages ul li a:active,div.widget_pages ul li a:visited,div.widget_pages ul li a:hover{display:block !important}div.widget_categories ul li a:link,div.widget_categories ul li a:active,div.widget_categories ul li a:visited,div.widget_categories ul li a:hover{display:inline !important}table.subscribe{width:100%}table.subscribe td.email-text{padding:0 0 5px 0;vertical-align:top}table.subscribe td.email-field{padding:0;width:100%}table.subscribe td.email-button{padding:0 0 0 5px}table.subscribe td.post-text{padding:7px 0 0 0;vertical-align:top}table.subscribe td.comment-text{padding:7px 0 0 0;vertical-align:top}div.post,div.page{display:block;margin:0 0 30px 0;border-top:solid 4px #eee;padding-top:20px}div.sticky{background:#eee url('../../blog/wp-content/themes/atahualpa353/images/sticky.gif') 99% 5% no-repeat;border:dashed 1px #cccccc;padding:10px}div.post-kicker{margin:0 0 5px 0}div.post-kicker a:link,div.post-kicker a:visited,div.post-kicker a:active{color:#999;text-decoration:none;text-transform:uppercase;letter-spacing:1px}div.post-kicker a:hover{color:#cc0000}div.post-headline{}div.post-headline h1,div.post-headline h2{ margin:0; padding:0;padding:0;margin:0;font-size:1.7em}div.post-headline h2 a:link,div.post-headline h2 a:visited,div.post-headline h2 a:active,div.post-headline h1 a:link,div.post-headline h1 a:visited,div.post-headline h1 a:active{}div.post-headline h2 a:hover,div.post-headline h1 a:hover{}div.post-byline{margin:5px 0 10px 0;color:#999;text-transform:uppercase;letter-spacing:1px;font-size:11px}div.post-byline a:link,div.post-byline a:visited,div.post-byline a:active{}div.post-byline a:hover{}div.post-bodycopy{}div.post-bodycopy p{margin:1em 0;padding:0;display:block}div.post-pagination{}div.post-footer{clear:both;display:block;color:#999;text-transform:uppercase;letter-spacing:1px;font-size:11px}div.post-footer a:link,div.post-footer a:visited,div.post-footer a:active{color:#999;font-weight:normal;text-decoration:none}div.post-footer a:hover{color:#333;font-weight:normal;text-decoration:underline}div.post-kicker img,div.post-byline img,div.post-footer img{border:0;padding:0;margin:0 0 -1px 0;background:none}span.post-ratings{display:inline-block;width:auto;white-space:nowrap}div.navigation-top{border-top:solid 4px #eee;padding:8px 0}div.navigation-middle{margin:10px 0 20px 0;padding:8px 0;border-top:solid 4px #eee;border-bottom:solid 4px #eee}div.navigation-bottom{margin:20px 0 0 0;padding:10px 0 0 0;border-top:solid 4px #eee}div.navigation-comments-above{margin:0 0 10px 0;padding:5px 0 5px 0}div.navigation-comments-below{margin:0 0 10px 0;padding:5px 0 5px 0}div.older{float:left;width:48%;text-align:left;margin:0;padding:0}div.newer{float:right;width:48%;text-align:right;margin:0;padding:0;}div.older-home{float:left;width:44%;text-align:left;margin:0;padding:0}div.newer-home{float:right;width:44%;text-align:right;margin:0;padding:0;}div.home{float:left;width:8%;text-align:center;margin:0;padding:0}form,.feedburner-email-form{margin:0;padding:0;}fieldset{border:1px solid #cccccc;width:auto;padding:0.35em 0.625em 0.75em;display:block;}legend{color:#000000;background:#f4f4f4;border:1px solid #cccccc;padding:2px 6px;margin-bottom:15px;}form p{margin:5px 0 0 0;padding:0;}div.xhtml-tags p{margin:0}label{margin-right:0.5em;font-family:arial;cursor:pointer;}input.text,input.textbox,input.password,input.file,input.TextField,textarea{padding:3px;color:#000000;border-top:solid 1px #333333;border-left:solid 1px #333333;border-right:solid 1px #999999;border-bottom:solid 1px #cccccc;background:url(../../blog/wp-content/themes/atahualpa353/images/inputbackgr.gif) top left no-repeat}textarea{width:96%;}input.inputblur{color:#777777;width:95%}input.inputfocus{color:#000000;width:95%}input.highlight,textarea.highlight{background:#e8eff7;border-color:#37699f}.button,.Button{padding:0 2px;height:24px;line-height:16px;background-color:#777777;color:#ffffff;border:solid 2px #555555;font-weight:bold}.buttonhover{padding:0 2px;cursor:pointer;background-color:#6b9c6b;color:#ffffff;border:solid 2px #496d49}form#commentform input#submit{ padding:0 .25em; width:0; overflow:visible}form#commentform input#submit[class]{width:auto}form#commentform input#submit{padding:4px 10px 4px 10px;font-size:1.2em;line-height:1.5em;height:36px}table.searchform{width:100%}table.searchform td.searchfield{padding:0;width:100%}table.searchform td.searchbutton{padding:0 0 0 5px}table.searchform td.searchbutton input{padding:0 0 0 5px}blockquote{height:1%;display:block;clear:both;color:#555555;padding:1em 1em;background:#f4f4f4;border:solid 1px #e1e1e1}blockquote blockquote{height:1%;display:block;clear:both;color:#444444;padding:1em 1em;background:#e1e1e1;border:solid 1px #d3d3d3}div.post table{border-collapse:collapse;margin:10px 0}div.post table caption{width:auto;margin:0 auto;background:#eeeeee;border:#999999;padding:4px 8px;color:#666666}div.post table th{background:#888888;color:#ffffff;font-weight:bold;font-size:90%;padding:4px 8px;border:solid 1px #ffffff;text-align:left}div.post table td{padding:4px 8px;background-color:#ffffff;border-bottom:1px solid #dddddd;text-align:left}div.post table tfoot td{}div.post table tr.alt td{background:#f4f4f4}div.post table tr.over td{background:#e2e2e2}#calendar_wrap{padding:0;border:none}table#wp-calendar{width:100%;font-size:90%;border-collapse:collapse;background-color:#ffffff;margin:0 auto}table#wp-calendar caption{width:auto;background:#eeeeee;border:none;;padding:3px;margin:0 auto;font-size:1em}table#wp-calendar th{border:solid 1px #eeeeee;background-color:#999999;color:#ffffff;font-weight:bold;padding:2px;text-align:center}table#wp-calendar td{padding:0;line-height:18px;background-color:#ffffff;border:1px solid #dddddd;text-align:center}table#wp-calendar tfoot td{border:solid 1px #eeeeee;background-color:#eeeeee}table#wp-calendar td a{display:block;background-color:#eeeeee;width:100%;height:100%;padding:0}div#respond{margin:25px 0;padding:25px;background:#eee;-moz-border-radius:8px;-khtml-border-radius:8px;-webkit-border-radius:8px;border-radius:8px;}p.thesetags{margin:10px 0}h3.reply{margin:0;padding:0 0 10px 0}ol.commentlist{margin:15px 0 25px 0;list-style-type:none;padding:0;display:block;border-top:dotted 1px #cccccc}ol.commentlist li{padding:15px 10px;display:block;height:1%;margin:0;background-color:#FFFFFF;border-bottom:dotted 1px #cccccc}ol.commentlist li.alt{display:block;height:1%;background-color:#EEEEEE;border-bottom:dotted 1px #cccccc}ol.commentlist li.authorcomment{display:block;height:1%;background-color:#D8D8FA}ol.commentlist span.authorname{font-weight:bold;font-size:110%}ol.commentlist span.commentdate{color:#666666;font-size:90%;margin-bottom:5px;display:block}ol.commentlist span.editcomment{display:block}ol.commentlist li p{margin:2px 0 5px 0}div.comment-number{float:right;font-size:2em;line-height:2em;font-family:georgia,serif;font-weight:bold;color:#ddd;margin:-10px 0 0 0;position:relative;height:1%}div.comment-number a:link,div.comment-number a:visited,div.comment-number a:active{color:#ccc}textarea#comment{width:98%;margin:10px 0;display:block}ul.commentlist{margin:15px 0 15px 0;list-style-type:none;padding:0;display:block;border-top:dotted 1px #cccccc}ul.commentlist ul{margin:0;border:none;list-style-type:none;padding:0}ul.commentlist li{padding:0; margin:0;display:block;clear:both;height:1%;}ul.commentlist ul.children li{ margin-left:30px}ul.commentlist div.comment-container{padding:10px;margin:0}ul.children div.comment-container{background-color:transparent;border:dotted 1px #ccc;padding:10px;margin:0 10px 8px 0; -moz-border-radius:5px; -khtml-border-radius:5px; -webkit-border-radius:5px; border-radius:5px}ul.children div.bypostauthor{}ul.commentlist li.thread-even{background-color:#FFFFFF;border-bottom:dotted 1px #cccccc}ul.commentlist li.thread-odd{background-color:#EEEEEE;border-bottom:dotted 1px #cccccc}ul.commentlist div.bypostauthor{background-color:#D8D8FA}ul.children div.bypostauthor{border:dotted 1px #BFBCFB}ul.commentlist span.authorname{font-size:110%}div.comment-meta a:link,div.comment-meta a:visited,div.comment-meta a:active,div.comment-meta a:hover{font-weight:normal}div#cancel-comment-reply{margin:-5px 0 10px 0}div.comment-number{float:right;font-size:2em;line-height:2em;font-family:georgia,serif;font-weight:bold;color:#ddd;margin:-10px 0 0 0;position:relative;height:1%}div.comment-number a:link,div.comment-number a:visited,div.comment-number a:active{color:#ccc}.page-numbers{padding:2px 6px;border:solid 1px #000000;-moz-border-radius:6px;-khtml-border-radius:6px;-webkit-border-radius:6px;border-radius:6px}span.current{background:#ddd}a.prev,a.next{border:none}a.page-numbers:link,a.page-numbers:visited,a.page-numbers:active{text-decoration:none;color:#365DA0;border-color:#365DA0}a.page-numbers:hover{text-decoration:none;color:#365DA0;border-color:#365DA0}div.xhtml-tags{display:none}abbr em{border:none !important;border-top:dashed 1px #aaa !important;display:-moz-inline-box !important;display:inline-block !important;background:url(../../blog/wp-content/themes/atahualpa353/images/commentluv.gif) 0% 90% no-repeat;margin-top:8px;padding:5px 5px 2px 20px !important;font-style:normal}p.subscribe-to-comments{margin-bottom:10px}div#gsHeader{display:none;}div.g2_column{margin:0 !important;width:100% !important;font-size:1.2em}div#gsNavBar{border-top-width:0 !important}p.giDescription{font-size:1.2em;line-height:1 !important}p.giTitle{margin:0.3em 0 !important;font-size:1em;font-weight:normal;color:#666}div#wp-email img{border:0;padding:0}div#wp-email input,div#wp-email textarea{margin-top:5px;margin-bottom:2px}div#wp-email p{margin-bottom:10px}input#wp-email-submit{ padding:0; font-size:30px; height:50px; line-height:50px; overflow:visible;}img.WP-EmailIcon{ vertical-align:text-bottom !important}.tw-accordion .tw-widgettitle,.tw-accordion .tw-widgettitle:hover,.tw-accordion .tw-hovered,.tw-accordion .selected,.tw-accordion .selected:hover{ background:transparent !important; background-image:none !important}.tw-accordion .tw-widgettitle span{ padding-left:0 !important}.tw-accordion h3.tw-widgettitle{border-bottom:solid 1px #ccc}.tw-accordion h3.selected{border-bottom:none}td#left .without_title,td#right .without_title{ margin-top:0;margin-bottom:0}ul.tw-nav-list{border-bottom:solid 1px #999;display:block;margin-bottom:5px !important}td#left ul.tw-nav-list li,td#right ul.tw-nav-list li{padding:0 0 1px 0;margin:0 0 -1px 5px; border:solid 1px #ccc;border-bottom:none;-moz-border-radius:5px;-khtml-border-radius:5px;-webkit-border-radius:5px;border-radius:5px;-moz-border-radius-bottomright:0;-moz-border-radius-bottomleft:0;-webkit-border-bottom-right-radius:0;-webkit-border-bottom-left-radius:0;border-bottom-right-radius:0;border-bottom-left-radius:0;background:#eee}td#left ul.tw-nav-list li.ui-tabs-selected,td#right ul.tw-nav-list li.ui-tabs-selected{ background:none;border:solid 1px #999;border-bottom:solid 1px #fff !important}ul.tw-nav-list li a:link,ul.tw-nav-list li a:visited,ul.tw-nav-list li a:active,ul.tw-nav-list li a:hover{padding:0 8px !important;background:none;border-left:none !important;outline:none}td#left ul.tw-nav-list li.ui-tabs-selected a,td#left li.ui-tabs-selected a:hover,td#right ul.tw-nav-list li.ui-tabs-selected a,td#right li.ui-tabs-selected a:hover{ color:#000000; text-decoration:none;font-weight:bold;background:none !important;outline:none}td#left .ui-tabs-panel,td#right .ui-tabs-panel{ margin:0; padding:0}img{border:0}#dbem-location-map img{ background:none !important}.post img{padding:5px;border:solid 1px #dddddd;background-color:#f3f3f3;-moz-border-radius:3px;-khtml-border-radius:3px;-webkit-border-radius:3px;border-radius:3px;}.post img.size-full{max-width:96%;width:auto 100%;margin:5px 0 5px 0}div.post img[class~=size-full]{height:auto;}.post img.alignleft{float:left;margin:10px 10px 5px 0;}.post img.alignright{float:right;margin:10px 0 5px 10px;}.post img.aligncenter{display:block;margin:10px auto}.aligncenter,div.aligncenter{ display:block; margin-left:auto; margin-right:auto}.alignleft,div.alignleft{float:left;margin:10px 10px 5px 0}.alignright,div.alignright{ float:right; margin:10px 0 5px 10px}div.archives-page img{border:0;padding:0;background:none;margin-bottom:0;vertical-align:-10%}.wp-caption{max-width:96%;width:auto 100%;height:auto;display:block;border:1px solid #dddddd;text-align:center;background-color:#f3f3f3;padding-top:4px;margin:10px 0 0 0;-moz-border-radius:3px;-khtml-border-radius:3px;-webkit-border-radius:3px;border-radius:3px;}* html .wp-caption{height:100%;}.wp-caption img{ margin:0 !important; padding:0 !important; border:0 none !important}.wp-caption p.wp-caption-text{font-size:0.8em;line-height:13px;padding:2px 4px 5px;margin:0;color:#666666}img.wp-post-image{float:left;border:0;padding:0;background:none;margin:0 10px 5px 0}img.wp-smiley{ float:none;border:none !important;margin:0 1px -1px 1px;padding:0 !important;background:none !important}img.avatar{float:left;display:block;margin:0 8px 1px 0;padding:3px;border:solid 1px #ddd;background-color:#f3f3f3;-moz-border-radius:3px;-khtml-border-radius:3px;-webkit-border-radius:3px;border-radius:3px;}#comment_quicktags{text-align:left;padding:10px 0 2px 0;display:block}#comment_quicktags input.ed_button{background:#f4f4f4;border:2px solid #cccccc;color:#444444;margin:2px 4px 2px 0;width:auto;padding:0 4px;height:24px;line-height:16px}#comment_quicktags input.ed_button_hover{background:#dddddd;border:2px solid #666666;color:#000000;margin:2px 4px 2px 0;width:auto;padding:0 4px;height:24px;line-height:16px;cursor:pointer}#comment_quicktags #ed_strong{font-weight:bold}#comment_quicktags #ed_em{font-style:italic}@media print{body{background:white;color:black;margin:0;font-size:10pt !important;font-family:arial,sans-serif;}div.post-footer{line-height:normal !important;color:#555 !important;font-size:9pt !important}a:link,a:visited,a:active,a:hover{text-decoration:underline !important;color:#000}h2{color:#000;font-size:14pt !important;font-weight:normal !important}h3{color:#000;font-size:12pt !important;}#header,#footer,.colone,.colthree,.navigation,.navigation-top,.navigation-middle,.navigation-bottom,.wp-pagenavi-navigation,#comment,#respond,.remove-for-print{display:none}td#left,td#right,td#left-inner,td#right-inner{width:0}td#middle{width:100%}*:lang(en) td#left{ display:none}*:lang(en) td#right{ display:none}*:lang(en) td#left-inner{ display:none}*:lang(en) td#right-inner{ display:none}td#left:empty{ display:none}td#right:empty{ display:none}td#left-inner:empty{ display:none}td#right-inner:empty{ display:none}}ul.rMenu,ul.rMenu ul,ul.rMenu li,ul.rMenu a{display:block;margin:0;padding:0}ul.rMenu,ul.rMenu li,ul.rMenu ul{list-style:none}ul.rMenu ul{display:none}ul.rMenu li{position:relative;z-index:1}ul.rMenu li:hover{z-index:999}ul.rMenu li:hover > ul{display:block;position:absolute}ul.rMenu li:hover{background-position:0 0} ul.rMenu-hor li{float:left;width:auto}ul.rMenu-hRight li{float:right}ul.rMenu-ver li{float:none}.clearfix:after{ content:".";display:block;height:0;clear:both;visibility:hidden}.clearfix{min-width:0;display:inline-block;display:block}* html .clearfix{height:1%;}.clearboth{clear:both;height:1%;font-size:1%;line-height:1%;display:block;padding:0;margin:0}td#header{padding-bottom:15px;}td#middle{padding:0}div.searchbox-form{margin:5px 0 15px 5px}div#menu1 ul.rMenu{background:transparent;border:none}div#imagecontainer{border-top:solid 0px #333;border-bottom:solid 5px #333;}div.widget ul li{padding:1px 5px 1px 12px !important;background:url('../../blog/wp-content/themes/atahualpa353/images/bullets/round-gray.gif') no-repeat 0 7px}ul.rMenu-hor ul,ul.rMenu-hRight ul{margin-top:0px;}ul.rMenu-hor li{margin-bottom:0px;margin-top:0px;margin-left:0px;}ul.rMenu-hor{padding-left:0px;}ul.rMenu-ver li{margin-top:0xp;}div#menu1 ul.rMenu li a,div#menu2 ul.rMenu li a{padding:6px 10px}div#menu1 ul.rMenu li{margin-right:5px}div#menu1 ul.rMenu li li{margin-right:0}div#menu1 ul.rMenu li,div#menu1 ul.rMenu li a{-webkit-border-top-left-radius:5px;-webkit-border-top-right-radius:5px;-moz-border-radius-topleft:5px;-moz-border-radius-topright:5px;border-top-left-radius:5px;border-top-right-radius:5px}div#menu1 ul.rMenu li li,div#menu1 ul.rMenu li li a{-webkit-border-top-left-radius:0;-webkit-border-top-right-radius:0;-moz-border-radius-topleft:0;-moz-border-radius-topright:0;border-top-left-radius:0;border-top-right-radius:0}div#menu2{ border:dashed 1px #ffffff}</style>
<script type="text/javascript">
//<![CDATA[




/* JQUERY */
jQuery(document).ready(function(){  


	/* jQuery('ul#rmenu').superfish(); */
	/* jQuery('ul#rmenu').superfish().find('ul').bgIframe({opacity:false}); */
 
	/* For IE6 */
	if (jQuery.browser.msie && /MSIE 6\.0/i.test(window.navigator.userAgent) && !/MSIE 7\.0/i.test(window.navigator.userAgent) && !/MSIE 8\.0/i.test(window.navigator.userAgent)) {

		/* Max-width for images in IE6 */		
		var centerwidth = jQuery("td#middle").width(); 
		
		/* Images without caption */
		jQuery(".post img").each(function() { 
			var maxwidth = centerwidth - 10 + 'px';
			var imgwidth = jQuery(this).width(); 
			var imgheight = jQuery(this).height(); 
			var newimgheight = (centerwidth / imgwidth * imgheight) + 'px';	
			if (imgwidth > centerwidth) { 
				jQuery(this).css({width: maxwidth}); 
				jQuery(this).css({height: newimgheight}); 
			}
		});
		
		/* Images with caption */
		jQuery("div.wp-caption").each(function() { 
			var captionwidth = jQuery(this).width(); 
			var maxcaptionwidth = centerwidth + 'px';
			var captionheight = jQuery(this).height();
			var captionimgwidth =  jQuery("div.wp-caption img").width();
			var captionimgheight =  jQuery("div.wp-caption img").height();
			if (captionwidth > centerwidth) { 
				jQuery(this).css({width: maxcaptionwidth}); 
				var newcaptionheight = (centerwidth / captionwidth * captionheight) + 'px';
				var newcaptionimgheight = (centerwidth / captionimgwidth * captionimgheight) + 'px';
				jQuery(this).css({height: newcaptionheight}); 
				jQuery("div.wp-caption img").css({height: newcaptionimgheight}); 
				}
		});
		
		/* sfhover for LI:HOVER support in IE6: */
		jQuery("ul li").
			hover( function() {
					jQuery(this).addClass("sfhover")
				}, 
				function() {
					jQuery(this).removeClass("sfhover")
				} 
			); 

	/* End IE6 */
	}
	
	jQuery(".post table tr").
		mouseover(function() {
			jQuery(this).addClass("over");
		}).
		mouseout(function() {
			jQuery(this).removeClass("over");
		});

	
	jQuery(".post table tr:even").
		addClass("alt");

	
	jQuery("input.text, input.TextField, input.file, input.password, textarea").
		focus(function () {  
			jQuery(this).addClass("highlight"); 
		}).
		blur(function () { 
			jQuery(this).removeClass("highlight"); 
		})
	
	jQuery("input.inputblur").
		focus(function () {  
			jQuery(this).addClass("inputfocus"); 
		}).
		blur(function () { 
			jQuery(this).removeClass("inputfocus"); 
		})

		

	
	jQuery("input.button, input.Button").
		mouseover(function() {
			jQuery(this).addClass("buttonhover");
		}).
		mouseout(function() {
			jQuery(this).removeClass("buttonhover");
		});

	/* toggle "you can use these xhtml tags" */
	jQuery("a.xhtmltags").
		click(function(){ 
			jQuery("div.xhtml-tags").slideToggle(300); 
		});

	/* For the Tabbed Widgets plugin: */
	jQuery("ul.tw-nav-list").
		addClass("clearfix");

		
	
});

//]]>
</script>
<meta id="syntaxhighlighteranchor" name="syntaxhighlighter-version" content="3.1.3" />
<!-- Google Analytics Tracking by Google Analyticator 6.2: http://ronaldheft.com/code/analyticator/ -->
<script type="text/javascript">
	var analyticsFileTypes = [''];
	var analyticsEventTracking = 'enabled';
</script>
<script type="text/javascript">
	var _gaq = _gaq || [];
	_gaq.push(['_setAccount', 'UA-2173612-1']);
	_gaq.push(['_trackPageview']);
	_gaq.push(['_trackPageLoadTime']);

	(function() {
		var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true;
		ga.src = ('https:' == document.location.protocol ? '../../../https@ssl_2f\default.htm' : '../../../www/default.htm') + '.google-analytics.com/ga.js';
		var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s);
	})();
</script>
<!--[if IE 6]>
<script type="text/javascript" src="../../blog/wp-content/themes/atahualpa353/js/dd_roundies.js"></script>
<script type="text/javascript">DD_roundies.addRule('a.posts-icon,%20a.comments-icon,%20a.email-icon,%20img.logo');</script>
<![endif]-->
</head>
<body class="single single-post postid-61 single-format-standard">
<div id="wrapper">
<div id="container">
<table id="layout" border="0" cellspacing="0" cellpadding="0">
<colgroup>
<col class="colone" /><col class="coltwo" />
<col class="colthree" /></colgroup> 
	<tr>

		<!-- Header -->
		<td id="header" colspan="3">

		<div id="imagecontainer" class="header-image-container" style="background: url('../../blog/wp-content/themes/atahualpa353/images/header/learncppheader3_800.jpg') top center no-repeat;"><div class="clickable"><a class="divclick" title="Learn C++" href ="../../default.htm">&nbsp;</a></div></div>
		</td>
		<!-- / Header -->

	</tr>

	<!-- Main Body -->	
	<tr id="bodyrow">

				<!-- Left Sidebar -->
		<td id="left">

			<div id="text-5" class="widget widget_text"><div class="widget-title"><h3>Navigation</h3></div>			<div class="textwidget"><ul>
<li><a href="../../default.htm"><big><big>Main Page</big></big></a>
<li><a href="
../../featured-articles/default.htm"><big><big>Featured Articles</big></big></a>
</ul>
<hr>
<ul>
<li><a href="../../about/default.htm">About / Contact</a>
<li><a href="../../about/#Support">Support LearnCpp</a>
</ul>
<hr>

<!-- SiteSearch Google -->
<form method="get" action="http://www.google.com/custom" target="google_window">
<table border="0" bgcolor="#ffffff">
<tr><td nowrap="nowrap" valign="top" align="left">

<!--<br/>-->
<input type="hidden" name="domains" value="LearnCpp.com"></input>
<label for="sbi" style="display: none">Enter your search terms</label>
<input type="text" name="q" size="20" maxlength="255" value="" id="sbi"></input>
</td></tr>
<tr>
<td nowrap="nowrap">
<table>
<tr>
<td>
<input type="radio" name="sitesearch" value="" checked id="ss0"></input>
<label for="ss0" title="Search the Web"><font size="-1" color="#000000">Web</font></label></td>
<td>
<input type="radio" name="sitesearch" value="www.LearnCpp.com" id="ss1"></input>
<label for="ss1" title="Search LearnCpp.com"><font size="-1" color="#000000">LearnCpp</font></label></td>
</tr>
</table>
<label for="sbb" style="display: none">Submit search form</label>
<input type="submit" name="sa" value="Google Search" id="sbb"></input>
<input type="hidden" name="client" value="pub-0588844875925051"></input>
<input type="hidden" name="forid" value="1"></input>
<input type="hidden" name="channel" value="7774154974"></input>
<input type="hidden" name="ie" value="ISO-8859-1"></input>
<input type="hidden" name="oe" value="ISO-8859-1"></input>
<input type="hidden" name="safe" value="active"></input>
<input type="hidden" name="flav" value="0000"></input>
<input type="hidden" name="sig" value="q6fLrjobHHgL00cW"></input>
<input type="hidden" name="cof" value="GALT:#008000;GL:1;DIV:#336699;VLC:663399;AH:center;BGC:FFFFFF;LBGC:336699;ALC:0000FF;LC:0000FF;T:000000;GFNT:0000FF;GIMP:0000FF;FORID:1"></input>
<input type="hidden" name="hl" value="en"></input>
</td></tr></table>
</form>
<!-- SiteSearch Google --></div>
		</div><div id="meta-2" class="widget widget_meta"><div class="widget-title"><h3>Meta</h3></div>			<ul>
			<li><a href="../../blog/wp-login.php@action=register.htm">Register</a></li>			<li><a href="../../blog/wp-login.php.htm">Log in</a></li>
			<li><a href="../../feed/default.htm" title="Syndicate this site using RSS 2.0">Entries <abbr title="Really Simple Syndication">RSS</abbr></a></li>
			<li><a href="../../comments/feed/default.htm" title="The latest comments to all posts in RSS">Comments <abbr title="Really Simple Syndication">RSS</abbr></a></li>
			<li><a href="../../../wordpress.org/default.htm" title="Powered by WordPress, state-of-the-art semantic personal publishing platform.">WordPress.org</a></li>
						</ul>
</div>		<div id="recent-posts-2" class="widget widget_recent_entries">		<div class="widget-title"><h3>Recent Posts</h3></div>		<ul>
				<li><a href="../b-6-new-virtual-function-controls-override-final-default-and-delete/default.htm" title="B.6 &#8212; New virtual function controls: override, final, default, and delete">B.6 &#8212; New virtual function controls: override, final, default, and delete</a></li>
				<li><a href="../b-5-delegating-constructors/default.htm" title="B.5 &#8212; Delegating constructors">B.5 &#8212; Delegating constructors</a></li>
				<li><a href="../b-4-initializer-lists-and-uniform-initialization/default.htm" title="B.4 &#8212; Initializer lists and uniform initialization">B.4 &#8212; Initializer lists and uniform initialization</a></li>
				<li><a href="../b-3-range-based-for-statements-and-static_assert/default.htm" title="B.3 &#8212; Range-based for statements and static_assert">B.3 &#8212; Range-based for statements and static_assert</a></li>
				<li><a href="../b-2-long-long-auto-decltype-nullptr-and-enum-classes/default.htm" title="B.2 &#8212; Long long, auto, decltype, nullptr, and enum classes">B.2 &#8212; Long long, auto, decltype, nullptr, and enum classes</a></li>
				<li><a href="../b-1-introduction-to-c11/default.htm" title="B.1 &#8212; Introduction to C++11">B.1 &#8212; Introduction to C++11</a></li>
				<li><a href="../a-6-fixed-width-integers/default.htm" title="A.6 &#8212; Fixed-width integers">A.6 &#8212; Fixed-width integers</a></li>
				<li><a href="../../site-news/site-software-updated-1123/default.htm" title="Site software updated 11/23">Site software updated 11/23</a></li>
				<li><a href="../../site-news/this-is-why-we-cant-have-nice-things-part-2/default.htm" title="This is why we can&#8217;t have nice things, part 2">This is why we can&#8217;t have nice things, part 2</a></li>
				<li><a href="../../site-news/this-is-why-we-cant-have-nice-things/default.htm" title="This is why we can&#8217;t have nice things">This is why we can&#8217;t have nice things</a></li>
				</ul>
		</div><div id="categories-1" class="widget widget_categories"><div class="widget-title"><h3>Category Indexes</h3></div>		<ul>
	<li class="cat-item cat-item-11"><a href="../../category/breaktime/default.htm" title="Games and fun activities">Break Time</a> (3)
</li>
	<li class="cat-item cat-item-6"><a href="../../category/cpp-programming/default.htm" title="View all posts filed under C++ Programming">C++ Programming</a> (11)
</li>
	<li class="cat-item cat-item-3"><a href="../../category/cpp-tutorial/default.htm" title="View all posts filed under C++ Tutorial">C++ Tutorial</a> (163)
</li>
	<li class="cat-item cat-item-10"><a href="../../category/computer-game-programming/default.htm" title="View all posts filed under Game Programming">Game Programming</a> (4)
</li>
	<li class="cat-item cat-item-14"><a href="../../category/gaming/default.htm" title="View all posts filed under Gaming">Gaming</a> (1)
</li>
	<li class="cat-item cat-item-13"><a href="../../category/general-programming/default.htm" title="View all posts filed under General Programming">General Programming</a> (3)
</li>
	<li class="cat-item cat-item-4"><a href="../../category/site-news/default.htm" title="View all posts filed under Site News">Site News</a> (23)
</li>
	<li class="cat-item cat-item-5"><a href="../../category/wordpress/default.htm" title="View all posts filed under WordPress">WordPress</a> (8)
</li>
		</ul>
</div>
		</td>
		<!-- / Left Sidebar -->
		
				

		<!-- Main Column -->
		<td id="middle">

	

		
		 

		<div class="clearfix navigation-top">
		<div class="older">&laquo; <a href="../37-converting-between-binary-and-decimal/default.htm" rel="prev">3.7 &#8212; Converting between binary and decimal</a> &nbsp;</div><div class="newer">&nbsp; <a href="../41-blocks-compound-statements-and-local-variables/default.htm" rel="next">4.1 &#8212; Blocks (compound statements) and local variables</a> &raquo;</div></div>
<div class="post-61 post type-post status-publish format-standard hentry category-cpp-tutorial" id="post-61">


<div class="post-headline">		<h1>3.8 &#8212; Bitwise operators</h1>
		</div>
<div class="post-byline">By Alex, on June 17th, 2007</div>
<div class="post-bodycopy clearfix"><div style='float:left;padding:8px 8px 8px 0px;'><script type="text/javascript"><!--
google_ad_client = "ca-pub-0588844875925051";
/* Content Page Top Large */
google_ad_slot = "7945645163";
google_ad_width = 336;
google_ad_height = 280;
//-->
</script>
<acript type="text/javascript"
src="../../../pagead2.googlesyndication.com/pagead/show_ads.js">
</script></div><p>Bit manipulation operators manipulate individual bits within a variable.</p>
<p><strong>Why bother with bitwise operators?</strong></p>
<p>In the past, memory was extremely expensive, and computers did not have much of it.  Consequently, there were incentives to make use of every bit of memory available.  Consider the bool data type &#8212; even though it only has two possible values (true and false), which can be represented by a single bit, it takes up an entire byte of memory!  This is because variables need unique addresses, and memory can only be addressed in bytes.  The bool uses 1 bit and the other 7 go to waste.</p>
<p>Using bitwise operators, it is possible to write functions that allow us to compact 8 booleans into a single byte-sized variable, enabling significant memory savings at the expense of more complex code.  In the past, this was a good trade-off.  Today, it is not.</p>
<p>Now memory is significantly cheaper, and programmers have found that it is often a better idea to code what is easiest to understand and maintain than what is most efficient.  Consequently, bitwise operators have somewhat fallen out of favor, except in certain circumstances where maximum optimization is needed (eg. scientific programs that use enormous data sets, or games where bit manipulation tricks can be used for extra speed).  Nevertheless, it is good to at least know about their existence.</p>
<p>There are 6 bit manipulation operators:</p>
<table border=1 cellspacing=0 cellpadding=3>
<tr>
<th>Operator</th>
<th>Symbol</th>
<th>Form</th>
<th>Operation</th>
</tr>
<tr>
<td>left shift</td>
<td>&lt;&lt;</td>
<td>x &lt;&lt; y</td>
<td>all bits in x shifted left y bits</td>
</tr>
<tr>
<td>right shift</td>
<td>&gt;&gt;</td>
<td>x &gt;&gt; y</td>
<td>all bits in x shifted right y bits</td>
</tr>
<tr>
<td>bitwise NOT</td>
<td>~</td>
<td>~x</td>
<td>all bits in x flipped</td>
</tr>
<tr>
<td>bitwise AND</td>
<td>&#038;</td>
<td>x &#038; y</td>
<td>each bit in x AND each bit in y</td>
</tr>
<tr>
<td>bitwise OR</td>
<td>|</td>
<td>x | y</td>
<td>each bit in x OR each bit in y</td>
</tr>
<tr>
<td>bitwise XOR</td>
<td>^</td>
<td>x ^ y</td>
<td>each bit in x XOR each bit in y</td>
</tr>
</table>
<p>Note: In the following examples, we will largely be working with 4-bit binary values.  This is for the sake of convenience and keeping the examples simple.  In C++, the number of bits used will be based on the size of the data type (8 bits per byte).</p>
<p><strong>Left shift and right shift operator</strong></p>
<p>The bitwise left shift (<<) shifts operator bits to the left.  For example, consider the number 3, which is binary 0011.  Left shifting by 1 (3 << 1) changes 0011 to 0110, which is decimal 6.  Note how each bit moved 1 place to the left.  Left shifting by 2 (3 << 2) changes 0011 to 1100, which is decimal 12.  Left shifting by 3 (3 << 3) changes 0011 to 1000.  Note that we shifted a bit off the end of the number!  Bits that are shifted off the end of the binary number are lost.</p>
<p>The bitwise right shift (>>) operator shifts bits to the right.  Right shifting by 1 (3 >> 1) changes 0011 to 0001, or decimal 1.  The rightmost bit shifted off the end and was lost!</p>
<p>Although our examples above are shifting literals, you can shift variables as well:</p>
<pre class="brush: cpp; title: ; notranslate" title="">
unsigned int nValue = 4;
nValue = nValue &lt;&lt; 1; // nValue will be 8
</pre>
<p><em>Rule: When dealing with bit operators, use unsigned variables.</em></p>
<p>Programs today typically do not make much use of the bitwise left and right shift operator in this capacity.  Rather, you tend to see the bitwise left shift operator used with cout in a way that doesn&#8217;t involve shifting bits at all!  If << is a bitwise left shift operator, then how does <code>cout &lt;&lt; &quot;Hello, world!&quot;;</code> print to the screen?  The answer is that cout has <strong>overridden</strong> (replaced) the default meaning of the << operator and given it a new meaning.  We will talk more about operator overloading in a future section!</p>
<p><strong>Bitwise NOT</strong></p>
<p>The bitwise NOT operator (~) is perhaps the easiest to understand of all the bitwise operators.  It simply flips each bit from a 0 to a 1, or vice versa.  Note that the result of a bitwise NOT is dependent on what size your data type is!  For example, with 4 bits, ~4 (0100 binary) evaluates to 1011, which is 11 in decimal.  In an 8 bit data type (such as an unsigned char), ~4 (represented as ~0000 0100) evaluates to 1111 1011, which is 251 in decimal!</p>
<p><strong>Bitwise AND, OR, and XOR</strong></p>
<p>Bitwise AND (&#038;) and bitwise OR (|) work similarly to their logical AND and logical OR counterparts.  However, rather than evaluating a single boolean value, they are applied to each bit!  For example, consider the expression <code>5 | 6</code>.  In binary, this is represented as 0101 | 0110.  To do (any) bitwise operations, it is easiest to line the two operands up like this:</p>
<pre>
0 1 0 1 // 5
0 1 1 0 // 6
</pre>
<p>and then apply the operation to each <em>column</em> of bits.  If you remember, logical OR evaluates to true (1) if either the left or the right or both operands are true (1).  Bitwise OR evaluates to 1 if either bit (or both) is 1.  Consequently, 5 | 6 evaluates like this:</p>
<pre>
0 1 0 1 // 5
0 1 1 0 // 6
-------
0 1 1 1 // 7
</pre>
<p>Our result is 0111 binary (7 decimal).</p>
<p>We can do the same thing to compound OR expressions, such as <code>1 | 4 | 6</code>.  If any of the bits in a column are 1, the result of that column is 1.</p>
<pre>
0 0 0 1 // 1
0 1 0 0 // 4
0 1 1 0 // 6
--------
0 1 1 1 // 7
</pre>
<p>1 | 4 | 6 evaluates to 7.</p>
<p>Bitwise AND works similarly.  Logical AND evaluates to true if both the left and right operand evaluate to true.  Bitwise AND evaluates to true if both bits in the column are 1)  Consider the expression <code>5 &amp; 6</code>.  Lining each of the bits up and applying an AND operation to each column of bits:</p>
<pre>
0 1 0 1 // 5
0 1 1 0 // 6
--------
0 1 0 0 // 4
</pre>
<p>Similarly, we can do the same thing to compound AND expressions, such as <code>1 &amp; 3 &amp; 7</code>.  If all of the bits in a column are 1, the result of that column is 1.</p>
<pre>
0 0 0 1 // 1
0 0 1 1 // 3
0 1 1 1 // 7
--------
0 0 0 1 // 1
</pre>
<p>The last operator is the bitwise XOR (^), also known as <em>exclusive or</em>. When evaluating two operands, XOR evaluates to true (1) if one <em>and only one</em> of it's operands is true (1).  If neither or both are true, it evaluates to 0.  Consider the expression <code>6 ^ 3</code>:</p>
<pre>
0 1 1 0 // 6
0 0 1 1 // 3
-------
0 1 0 1 // 5
</pre>
<p>It is also possible to evaluate compound XOR expression column style, such as <code>1 ^ 3 ^ 7</code>.  If there are an even number of 1 bits in a column, the result is 0.  If there are an odd number of 1 bits in a column, the result is 1.</p>
<pre>
0 0 0 1 // 1
0 0 1 1 // 3
0 1 1 1 // 7
--------
0 1 0 1 // 5
</pre>
<p><strong>Bitwise assignment operators</strong></p>
<p>As with the arithmetic assignment operators, C++ provides bitwise assignment operators in order to facilitate easy modification of variables.</p>
<table border=1 cellspacing=0 cellpadding=3>
<tr>
<th>Operator</th>
<th>Symbol</th>
<th>Form</th>
<th>Operation</th>
</tr>
<tr>
<td>Left shift assignment</td>
<td>&lt;&lt;=</td>
<td>x <<= y</td>
<td>Shift x left by y bits</td>
</tr>
<tr>
<td>Right shift assignment</td>
<td>&gt;&gt;=</td>
<td>x >>= y</td>
<td>Shift x right by y bits</td>
</tr>
<tr>
<td>Bitwise OR assignment</td>
<td>|=</td>
<td>x |= y</td>
<td>Assign x | y to x</td>
</tr>
<tr>
<td>Bitwise AND assignment</td>
<td>&#038;=</td>
<td>x &#038;= y</td>
<td>Assign x &#038; y to x</td>
</tr>
<tr>
<td>Bitwise XOR assignment</td>
<td>^=</td>
<td>x ^= y</td>
<td>Assign x ^ y to x</td>
</tr>
</table>
<p>For example, instead of writing <code>nValue = nValue &lt;&lt; 1;</code>, you can write <code>nValue &lt;&lt;= 1;</code>.</p>
<p><strong>Summary</strong></p>
<p>Summarizing how to evaluate bitwise operations utilizing the column method:</p>
<p>When evaluating bitwise OR, if any bit in a column is 1, the result for that column is 1.<br />
When evaluating bitwise AND, if all bits in a column are 1, the result for that column is 1.<br />
When evaluating bitwise XOR, if there are an odd number of 1 bits in a column, the result for that column is 1.</p>
<p><strong>Quiz</strong></p>
<p>1) What does 0110 >> 2 evaluate to in binary?<br />
2) What does 5 | 6 evaluate to in decimal?<br />
3) What does 5 &#038; 6 evaluate to in decimal?<br />
4) What does 5 ^ 6 evaluate to in decimal?</p>
<p><strong>Quiz answers</strong></p>
<p>1) <a class="solution_link_show" href="javascript:void(0)" onclick="wpSolutionToggle(document.getElementById('id1632292720'), this, 'Show Solution', 'Hide Solution')">Show Solution</a></p>
<div class="solution_div" id="id1632292720" style="display:none">
0110 >> 2 evaluates to 0001
</div>
<p>2) <a class="solution_link_show" href="javascript:void(0)" onclick="wpSolutionToggle(document.getElementById('id990194190'), this, 'Show Solution', 'Hide Solution')">Show Solution</a></p>
<div class="solution_div" id="id990194190" style="display:none">
5 | 6 =<br />
0 1 0 1<br />
0 1 1 0<br />
--------<br />
0 1 1 1 = 7
</div>
<p>3) <a class="solution_link_show" href="javascript:void(0)" onclick="wpSolutionToggle(document.getElementById('id1214052015'), this, 'Show Solution', 'Hide Solution')">Show Solution</a></p>
<div class="solution_div" id="id1214052015" style="display:none">
5 &#038; 6 =<br />
0 1 0 1<br />
0 1 1 0<br />
--------<br />
0 1 0 0 = 4
</div>
<p>4) <a class="solution_link_show" href="javascript:void(0)" onclick="wpSolutionToggle(document.getElementById('id1235530799'), this, 'Show Solution', 'Hide Solution')">Show Solution</a></p>
<div class="solution_div" id="id1235530799" style="display:none">
5 ^ 6 =<br />
0 1 0 1<br />
0 1 1 0<br />
--------<br />
0 0 1 1 = 3
</div>
<table border=0 cellpadding=3>
<tr>
<td>
        <a href="../../cpp-programming/3-x-comprehensive-quiz/default.htm" style="text-decoration:none"><img src="../../images/cpptutorial/next.png" align=middle> 3.x -- Comprehensive quiz</a>
</td>
</tr>
<tr>
<td>
        <a href="../../#Chapter3" style="text-decoration:none"><img src="../../images/cpptutorial/up.png" align=middle> Index</a>
</td>
</tr>
<tr>
<td>
        <a href="../37-converting-between-binary-and-decimal/default.htm" style="text-decoration:none"><img src="../../images/cpptutorial/prev.png" align=middle> 3.7 -- Converting between binary and decimal</a>
</td>
</tr>
</table>
<div style='padding-top:8px; padding-bottom:8px'><script type="text/javascript"><!--
google_ad_client = "ca-pub-0588844875925051";
/* Content Page Bottom - Medium Rectangle */
google_ad_slot = "2751429778";
google_ad_width = 300;
google_ad_height = 250;
//-->
</script>
<acript type="text/javascript"
src="../../../pagead2.googlesyndication.com/pagead/show_ads.js">
</script>
</div><!-- Powered by Ad Inserter Wordpress Plugin, Author: Igor Funa --></div>

<div class="post-footer"><img src="../../blog/wp-content/themes/atahualpa353/images/icons/folder-gray.gif" alt="" /> <a href="../../category/cpp-tutorial/default.htm" title="View all posts in C++ Tutorial" rel="category tag">C++ Tutorial</a>   | <a href="print/default.htm" title="Print This Post" rel="nofollow"><img class="WP-PrintIcon" src="../../blog/wp-content/plugins/wp-print/images/print.gif" alt="Print This Post" title="Print This Post" style="border: 0px;" /></a>&nbsp;<a href="print/default.htm" title="Print This Post" rel="nofollow">Print This Post</a></div>
</div><!-- / Post -->						
	
	<div class="clearfix navigation-middle">
		<div class="older">&laquo; <a href="../37-converting-between-binary-and-decimal/default.htm" rel="prev">3.7 &#8212; Converting between binary and decimal</a> &nbsp;</div><div class="newer">&nbsp; <a href="../41-blocks-compound-statements-and-local-variables/default.htm" rel="next">4.1 &#8212; Blocks (compound statements) and local variables</a> &raquo;</div></div>


	<a name="comments"></a><!-- named anchor for skip links -->
	<h3 id="comments">28 comments to 3.8 &#8212; Bitwise operators</h3>

	
	<!-- Comment List -->
	<ul class="commentlist">
		
			<li class="comment even thread-even depth-1 clearfix" id="comment-4790">
		<div id="div-comment-4790" class="clearfix comment-container">
		<div class="comment-author vcard">
		<img alt='' src='../../../0.gravatar.com/avatar/66ac6df2d5b3175463af0df308d3c747@s=65&d=http_253a_252f_252f0.gravatar.com_252favatar_252fad516503a11cd5ca435acc9bb6523536_253fs_253d65&r=g' class='avatar avatar-65 photo' height='65' width='65' />		<span class="authorname">Cody</span>
		</div>
				<div class="comment-meta commentmetadata">
		<a href="comment-page-1/#comment-4790">
		December 22, 2007 at 7:13 am</a>
        <span class="comment-reply-link"><a rel="nofollow" class="comment-reply-login" href="../../blog/wp-login.php@redirect_to=http_253a_252f_252fwww.learncpp.com_252fcpp-tutorial_252f38-bitwise-operators_252f">Log in to Reply</a></span>		 
		</div>
		<p>you put in the table that AND, OR, and XOR flip all digits in x but they do not.</p>
<p>[ Aah, the perils of copy and paste. :)  Fixed. -Alex ]</p>
		</div>
</li>
		<li class="comment odd alt thread-odd thread-alt depth-1 clearfix" id="comment-4791">
		<div id="div-comment-4791" class="clearfix comment-container">
		<div class="comment-author vcard">
		<img alt='' src='../../../0.gravatar.com/avatar/66ac6df2d5b3175463af0df308d3c747@s=65&d=http_253a_252f_252f0.gravatar.com_252favatar_252fad516503a11cd5ca435acc9bb6523536_253fs_253d65&r=g' class='avatar avatar-65 photo' height='65' width='65' />		<span class="authorname">Cody</span>
		</div>
				<div class="comment-meta commentmetadata">
		<a href="comment-page-1/#comment-4791">
		December 22, 2007 at 7:16 am</a>
        <span class="comment-reply-link"><a rel="nofollow" class="comment-reply-login" href="../../blog/wp-login.php@redirect_to=http_253a_252f_252fwww.learncpp.com_252fcpp-tutorial_252f38-bitwise-operators_252f">Log in to Reply</a></span>		 
		</div>
		<p>When you do the compound XOR expression the result 0101 would equal 5 not 1.</p>
<p>[ Fixed. -Alex ]</p>
		</div>
</li>
		<li class="pingback even thread-even depth-1 clearfix" id="comment-12645">
		<div id="div-comment-12645" class="clearfix comment-container">
		<div class="comment-author vcard">
				<span class="authorname"><a href='../37-converting-between-binary-and-decimal/default.htm' rel='external nofollow' class='url'>Learn C++ - &raquo; 3.7 &#8212; Converting between binary and decimal</a></span>
		</div>
				<div class="comment-meta commentmetadata">
		<a href="comment-page-1/#comment-12645">
		April 22, 2008 at 6:37 pm</a>
        <span class="comment-reply-link"><a rel="nofollow" class="comment-reply-login" href="../../blog/wp-login.php@redirect_to=http_253a_252f_252fwww.learncpp.com_252fcpp-tutorial_252f38-bitwise-operators_252f">Log in to Reply</a></span>		 
		</div>
		<p>[...] 2007      Prev/Next Posts   &laquo; 3.6 &#8212; Logical operators | Home | 3.8 &#8212; Bitwise operators &raquo;     Sunday, June 17th, 2007 at 11:14 [...]</p>
		</div>
</li>
		<li class="comment odd alt thread-odd thread-alt depth-1 clearfix" id="comment-20065">
		<div id="div-comment-20065" class="clearfix comment-container">
		<div class="comment-author vcard">
		<img alt='' src='../../../0.gravatar.com/avatar/02c1c5ea8d78232b5c07affcb08c6984@s=65&d=http_253a_252f_252f0.gravatar.com_252favatar_252fad516503a11cd5ca435acc9bb6523536_253fs_253d65&r=g' class='avatar avatar-65 photo' height='65' width='65' />		<span class="authorname">Stuart</span>
		</div>
				<div class="comment-meta commentmetadata">
		<a href="comment-page-1/#comment-20065">
		June 29, 2008 at 2:20 pm</a>
        <span class="comment-reply-link"><a rel="nofollow" class="comment-reply-login" href="../../blog/wp-login.php@redirect_to=http_253a_252f_252fwww.learncpp.com_252fcpp-tutorial_252f38-bitwise-operators_252f">Log in to Reply</a></span>		 
		</div>
		<p>What&#8217;s the difference in these: 3 &lt;&lt; 1 and 3 &lt;&lt;= 1?</p>
		</div>
<ul class='children'>
		<li class="comment even depth-2 clearfix" id="comment-20586">
		<div id="div-comment-20586" class="clearfix comment-container">
		<div class="comment-author vcard">
		<img alt='' src='../../../0.gravatar.com/avatar/ecdc5e2d152fa3662482535de0bab679@s=65&d=http_253a_252f_252f0.gravatar.com_252favatar_252fad516503a11cd5ca435acc9bb6523536_253fs_253d65&r=g' class='avatar avatar-65 photo' height='65' width='65' />		<span class="authorname"><a href='../../../www.moonrat.co.uk/default.htm' rel='external nofollow' class='url'>moonrat</a></span>
		</div>
				<div class="comment-meta commentmetadata">
		<a href="comment-page-1/#comment-20586">
		July 9, 2008 at 6:30 am</a>
        <span class="comment-reply-link"><a rel="nofollow" class="comment-reply-login" href="../../blog/wp-login.php@redirect_to=http_253a_252f_252fwww.learncpp.com_252fcpp-tutorial_252f38-bitwise-operators_252f">Log in to Reply</a></span>		 
		</div>
		<p>From what I understand, the end answer is the same, but in the second case the 3 itself changes to 6 (3 becomes bitwise shifted to the left 1, which is decimal 6). Whereas in the first case 3 stays 3 even after the operation; you&#8217;d need an x = 3 &lt;&lt; 1 for example for it to have any context.</p>
		</div>
<ul class='children'>
		<li class="comment odd alt depth-3 clearfix" id="comment-20587">
		<div id="div-comment-20587" class="clearfix comment-container">
		<div class="comment-author vcard">
		<img alt='' src='../../../0.gravatar.com/avatar/6c8d5e3abe53673aa6b7c2ce1a62d60e@s=65&d=http_253a_252f_252f0.gravatar.com_252favatar_252fad516503a11cd5ca435acc9bb6523536_253fs_253d65&r=g' class='avatar avatar-65 photo' height='65' width='65' />		<span class="authorname">boudiaf</span>
		</div>
				<div class="comment-meta commentmetadata">
		<a href="comment-page-1/#comment-20587">
		July 9, 2008 at 7:11 am</a>
        <span class="comment-reply-link"><a rel="nofollow" class="comment-reply-login" href="../../blog/wp-login.php@redirect_to=http_253a_252f_252fwww.learncpp.com_252fcpp-tutorial_252f38-bitwise-operators_252f">Log in to Reply</a></span>		 
		</div>
		<p>3 &lt;&lt; 1 returns 6 whereas 3 &lt;&lt;= 1 does not compile since &#8220;3&#8243; is not a variable name&#8230;</p>
<p> int x = 3; x = x &lt;&lt; 1 ;  and  int x = 3 ; x &lt;&lt;= 1 ;  are equivalent; eventually x = 6.</p>
		</div>
</li>
</ul>
</li>
		<li class="comment byuser comment-author-Tarindel bypostauthor even depth-2 clearfix" id="comment-20677">
		<div id="div-comment-20677" class="clearfix comment-container bypostauthor">
		<div class="comment-author vcard">
		<img alt='' src='../../../0.gravatar.com/avatar/2bcdbab687c32f64f9208e016cafe4cc@s=65&d=http_253a_252f_252f0.gravatar.com_252favatar_252fad516503a11cd5ca435acc9bb6523536_253fs_253d65&r=g' class='avatar avatar-65 photo' height='65' width='65' />		<span class="authorname"><a href='../../../www.tarindel.com/default.htm' rel='external nofollow' class='url'>Alex</a></span>
		</div>
				<div class="comment-meta commentmetadata">
		<a href="comment-page-1/#comment-20677">
		July 10, 2008 at 5:49 pm</a>
        <span class="comment-reply-link"><a rel="nofollow" class="comment-reply-login" href="../../blog/wp-login.php@redirect_to=http_253a_252f_252fwww.learncpp.com_252fcpp-tutorial_252f38-bitwise-operators_252f">Log in to Reply</a></span>		 
		</div>
		<p>x <<= y is the same as x = x << y.  Because of this, 3 <<= 1 is the same as 3 = 3 << 1, which obviously makes no sense since you can&#8217;t assign a value to the number 3!</p>
		</div>
</li>
</ul>
</li>
		<li class="comment odd alt thread-even depth-1 clearfix" id="comment-23495">
		<div id="div-comment-23495" class="clearfix comment-container">
		<div class="comment-author vcard">
		<img alt='' src='../../../0.gravatar.com/avatar/255995609544f26c61ede79f89fa4c41@s=65&d=http_253a_252f_252f0.gravatar.com_252favatar_252fad516503a11cd5ca435acc9bb6523536_253fs_253d65&r=g' class='avatar avatar-65 photo' height='65' width='65' />		<span class="authorname">Argon</span>
		</div>
				<div class="comment-meta commentmetadata">
		<a href="comment-page-1/#comment-23495">
		August 12, 2008 at 5:26 pm</a>
        <span class="comment-reply-link"><a rel="nofollow" class="comment-reply-login" href="../../blog/wp-login.php@redirect_to=http_253a_252f_252fwww.learncpp.com_252fcpp-tutorial_252f38-bitwise-operators_252f">Log in to Reply</a></span>		 
		</div>
		<p>Phun to look at ASCII table and how it is built up regarding bitwise operations.<br />
I.e. Converting from upper to lower case.</p>
<p>A=65=01000001<br />
a=97=01100001<br />
&nbsp;&nbsp;32=00100000</p>
<p>So 65^32 (or A^32) gives 97 (or a).<br />
So 97^32 (or a^32) gives 65 (or A).</p>
<p>#include &lt;iostream&gt;</p>
<p>int main()<br />
{<br />
&nbsp;&nbsp;&nbsp;&nbsp;using namespace std;<br />
&nbsp;&nbsp;&nbsp;&nbsp;char chX,chX32;<br />
&nbsp;&nbsp;&nbsp;&nbsp;for(int i=65;i&lt;91;i++)<br />
&nbsp;&nbsp;&nbsp;&nbsp;{<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;chX = i;<br />
&nbsp;&nbsp;&nbsp;&nbsp;chX32 = i^32;<br />
&nbsp;&nbsp;&nbsp;&nbsp;cout &lt;&lt; i &lt;&lt; &quot;:t&quot; &lt;&lt; chX &lt;&lt; &quot;tt&quot; &lt;&lt; int(chX32) &lt;&lt; &quot;:t&quot; &lt;&lt; chX32 &lt;&lt; &quot;tt&quot;;<br />
&nbsp;&nbsp;&nbsp;&nbsp;chX32 = chX32^32;<br />
&nbsp;&nbsp;&nbsp;&nbsp;cout &lt;&lt; int(chX32) &lt;&lt; &quot;:t&quot; &lt;&lt; chX32 &lt;&lt; endl;<br />
&nbsp;&nbsp;&nbsp;&nbsp;}<br />
&nbsp;&nbsp;&nbsp;&nbsp;return 0;<br />
}</p>
		</div>
<ul class='children'>
		<li class="comment even depth-2 clearfix" id="comment-36923">
		<div id="div-comment-36923" class="clearfix comment-container">
		<div class="comment-author vcard">
		<img alt='' src='../../../0.gravatar.com/avatar/8a4924b04ad0fa95cb4c53a0da3f6c25@s=65&d=http_253a_252f_252f0.gravatar.com_252favatar_252fad516503a11cd5ca435acc9bb6523536_253fs_253d65&r=g' class='avatar avatar-65 photo' height='65' width='65' />		<span class="authorname"><a href='../../../developa2z.co.cc/default.htm' rel='external nofollow' class='url'>Abhisek</a></span>
		</div>
				<div class="comment-meta commentmetadata">
		<a href="comment-page-1/#comment-36923">
		January 9, 2009 at 9:37 pm</a>
        <span class="comment-reply-link"><a rel="nofollow" class="comment-reply-login" href="../../blog/wp-login.php@redirect_to=http_253a_252f_252fwww.learncpp.com_252fcpp-tutorial_252f38-bitwise-operators_252f">Log in to Reply</a></span>		 
		</div>
		<p>I couldn&#8217;t understand the above comment.<br />
Why he has mentioned of the digit 32 ?</p>
<p>Please make it clear&#8230;</p>
		</div>
<ul class='children'>
		<li class="comment byuser comment-author-Tarindel bypostauthor odd alt depth-3 clearfix" id="comment-37102">
		<div id="div-comment-37102" class="clearfix comment-container bypostauthor">
		<div class="comment-author vcard">
		<img alt='' src='../../../0.gravatar.com/avatar/2bcdbab687c32f64f9208e016cafe4cc@s=65&d=http_253a_252f_252f0.gravatar.com_252favatar_252fad516503a11cd5ca435acc9bb6523536_253fs_253d65&r=g' class='avatar avatar-65 photo' height='65' width='65' />		<span class="authorname"><a href='../../../www.tarindel.com/default.htm' rel='external nofollow' class='url'>Alex</a></span>
		</div>
				<div class="comment-meta commentmetadata">
		<a href="comment-page-1/#comment-37102">
		January 11, 2009 at 2:44 pm</a>
        <span class="comment-reply-link"><a rel="nofollow" class="comment-reply-login" href="../../blog/wp-login.php@redirect_to=http_253a_252f_252fwww.learncpp.com_252fcpp-tutorial_252f38-bitwise-operators_252f">Log in to Reply</a></span>		 
		</div>
		<p>In ASCII, upper case and lower case letters are separated by 32 bits.  As he says, 65=&#8217;A', 97=&#8217;a&#8217;.  &#8216;a&#8217;-'A&#8217; = 32.  By XORing 32 onto a lower or upper case letter, we can convert it from lower case to upper case or vice versa.</p>
		</div>
</li>
</ul>
</li>
</ul>
</li>
		<li class="pingback even thread-odd thread-alt depth-1 clearfix" id="comment-24085">
		<div id="div-comment-24085" class="clearfix comment-container">
		<div class="comment-author vcard">
				<span class="authorname"><a href='../145-class-template-specialization/default.htm' rel='external nofollow' class='url'>Learn C++ - &raquo; 14.5 &#8212; Class template specialization</a></span>
		</div>
				<div class="comment-meta commentmetadata">
		<a href="comment-page-1/#comment-24085">
		August 17, 2008 at 7:00 pm</a>
        <span class="comment-reply-link"><a rel="nofollow" class="comment-reply-login" href="../../blog/wp-login.php@redirect_to=http_253a_252f_252fwww.learncpp.com_252fcpp-tutorial_252f38-bitwise-operators_252f">Log in to Reply</a></span>		 
		</div>
		<p>[...] how the bit-logic works in order to use the class (though here&#8217;s a link to the lesson on bitwise operators if you want to figure it out, but need a refresher on how bitwise operators [...]</p>
		</div>
</li>
		<li class="comment byuser comment-author-miroslav odd alt thread-even depth-1 clearfix" id="comment-30572">
		<div id="div-comment-30572" class="clearfix comment-container">
		<div class="comment-author vcard">
		<img alt='' src='../../../1.gravatar.com/avatar/532d0a1b3e586b934262bada12f1fdca@s=65&d=http_253a_252f_252f1.gravatar.com_252favatar_252fad516503a11cd5ca435acc9bb6523536_253fs_253d65&r=g' class='avatar avatar-65 photo' height='65' width='65' />		<span class="authorname">miroslav</span>
		</div>
				<div class="comment-meta commentmetadata">
		<a href="comment-page-1/#comment-30572">
		October 22, 2008 at 4:54 am</a>
        <span class="comment-reply-link"><a rel="nofollow" class="comment-reply-login" href="../../blog/wp-login.php@redirect_to=http_253a_252f_252fwww.learncpp.com_252fcpp-tutorial_252f38-bitwise-operators_252f">Log in to Reply</a></span>		 
		</div>
		<p>please,..is it possible to give me a usage (or compare use of bitwise operands and normal byte variables)? I understand the bit operation, but can not fing the &#8216;added value&#8217; (for example in gaming).</p>
<p>thanks&#8230;</p>
		</div>
<ul class='children'>
		<li class="comment byuser comment-author-anas-s even depth-2 clearfix" id="comment-95131">
		<div id="div-comment-95131" class="clearfix comment-container">
		<div class="comment-author vcard">
		<img alt='' src='../../../1.gravatar.com/avatar/931933f8cc7081668ded73cc46c95c59@s=65&d=http_253a_252f_252f1.gravatar.com_252favatar_252fad516503a11cd5ca435acc9bb6523536_253fs_253d65&r=g' class='avatar avatar-65 photo' height='65' width='65' />		<span class="authorname">anas.s</span>
		</div>
				<div class="comment-meta commentmetadata">
		<a href="comment-page-1/#comment-95131">
		January 24, 2011 at 7:18 pm</a>
        <span class="comment-reply-link"><a rel="nofollow" class="comment-reply-login" href="../../blog/wp-login.php@redirect_to=http_253a_252f_252fwww.learncpp.com_252fcpp-tutorial_252f38-bitwise-operators_252f">Log in to Reply</a></span>		 
		</div>
		<p>to miroslav, jeff &amp; sunilla,</p>
<p>there&#8217;s a lot of use for bitwise operation.</p>
<p>there might be time when you will have to deal with data represented in binary or some other kind of number base other than decimal or words (as in ASCII)</p>
<p>example 1,</p>
<p>you want to write a software that would evaluate poker hands.<br />
you could encode the hands in binary form.<br />
every suite has 13 cards, there are 4 suites.<br />
assign every suite 2 bytes, which give 16 bits, of which we&#8217;ll use 13bits.<br />
each of that bit represent one of the card from A, K, Q, J, 10, 9&#8230;.. (from bit12 to bit10).<br />
to represent all 4 suites, there are 8 bytes&#8230; (32 bit)</p>
<p>if you represent each card in ASCII, like 7d for Seven Diamonds, it takes 2 bytes (1 byte for each ASCII character).<br />
if you want to pass information of 10 cards, it takes you 10 x 2 bytes = 20 bytes.<br />
where as if you use binary information it still gonna take 8 bytes.</p>
<p>plus, if you represent it in ASCII, you&#8217;d have to do loopings to sort the hands in order from the highest value to the lowest value. if you do it in binary, you dont have to worry about the order, it&#8217;s already in order.</p>
<p>You could also do bitwise operation on your 8-bytes representation of the cards to do comparison, or check if certain card is there or if it&#8217;s a flush&#8230;. and many more.</p>
<p>It&#8217;s an invaluable tool when you need to work smart instead of work hard.</p>
<p>another use is when you decide to take up microcontroller as a hobby. Like Arduino for example, where memory is still a precious commodity and speed is important.</p>
<p>when doing programming you will deal with logic a lot of times&#8230;..<br />
sometime your IF statement is gonna be a very long one that it&#8217;s hard to read, all entangled in nested parenthesis.<br />
encoding them into binary representation can make it a lot easier.</p>
<p>Maybe if you have electronics background or at least some appreciation in digital logic design, it help you to appreciate bitwise operation more.</p>
		</div>
<ul class='children'>
		<li class="comment byuser comment-author-anas-s odd alt depth-3 clearfix" id="comment-95132">
		<div id="div-comment-95132" class="clearfix comment-container">
		<div class="comment-author vcard">
		<img alt='' src='../../../1.gravatar.com/avatar/931933f8cc7081668ded73cc46c95c59@s=65&d=http_253a_252f_252f1.gravatar.com_252favatar_252fad516503a11cd5ca435acc9bb6523536_253fs_253d65&r=g' class='avatar avatar-65 photo' height='65' width='65' />		<span class="authorname">anas.s</span>
		</div>
				<div class="comment-meta commentmetadata">
		<a href="comment-page-1/#comment-95132">
		January 24, 2011 at 7:29 pm</a>
        <span class="comment-reply-link"><a rel="nofollow" class="comment-reply-login" href="../../blog/wp-login.php@redirect_to=http_253a_252f_252fwww.learncpp.com_252fcpp-tutorial_252f38-bitwise-operators_252f">Log in to Reply</a></span>		 
		</div>
		<p>correction </p>
<blockquote><p>you want to write a software that would evaluate poker hands.<br />
you could encode the hands in binary form.<br />
every suite has 13 cards, there are 4 suites.<br />
assign every suite 2 bytes, which give 16 bits, of which we’ll use 13bits.<br />
each of that bit represent one of the card from A, K, Q, J, 10, 9….. (from bit12 to bit10).<br />
to represent all 4 suites, there are 8 bytes… (32 bit)</p></blockquote>
<p>correction :  each of that bit represent one of the card from A, K, Q, J, 10, 9….. (from bit12 to <b>bit0</b>).</p>
		</div>
</li>
</ul>
</li>
</ul>
</li>
		<li class="comment even thread-odd thread-alt depth-1 clearfix" id="comment-36003">
		<div id="div-comment-36003" class="clearfix comment-container">
		<div class="comment-author vcard">
		<img alt='' src='../../../0.gravatar.com/avatar/c4bb223d7260773ac25d24b70ebe13a2@s=65&d=http_253a_252f_252f0.gravatar.com_252favatar_252fad516503a11cd5ca435acc9bb6523536_253fs_253d65&r=g' class='avatar avatar-65 photo' height='65' width='65' />		<span class="authorname">jeff</span>
		</div>
				<div class="comment-meta commentmetadata">
		<a href="comment-page-1/#comment-36003">
		December 31, 2008 at 12:40 am</a>
        <span class="comment-reply-link"><a rel="nofollow" class="comment-reply-login" href="../../blog/wp-login.php@redirect_to=http_253a_252f_252fwww.learncpp.com_252fcpp-tutorial_252f38-bitwise-operators_252f">Log in to Reply</a></span>		 
		</div>
		<p>thanks to you alex, i learned the operation of bitwise operators but i dont know where can i use it. can you give me a site of example for program application.</p>
		</div>
</li>
		<li class="comment odd alt thread-even depth-1 clearfix" id="comment-38557">
		<div id="div-comment-38557" class="clearfix comment-container">
		<div class="comment-author vcard">
		<img alt='' src='../../../1.gravatar.com/avatar/ffc0b1cda97e1f2a6af62d35784eb1ad@s=65&d=http_253a_252f_252f1.gravatar.com_252favatar_252fad516503a11cd5ca435acc9bb6523536_253fs_253d65&r=g' class='avatar avatar-65 photo' height='65' width='65' />		<span class="authorname">sunilla</span>
		</div>
				<div class="comment-meta commentmetadata">
		<a href="comment-page-1/#comment-38557">
		January 21, 2009 at 11:19 am</a>
        <span class="comment-reply-link"><a rel="nofollow" class="comment-reply-login" href="../../blog/wp-login.php@redirect_to=http_253a_252f_252fwww.learncpp.com_252fcpp-tutorial_252f38-bitwise-operators_252f">Log in to Reply</a></span>		 
		</div>
		<pre> i want to write the bits on an output file, that is supposed to be compressed file of an original file using the huffman technique just like if the code for A is 110, then i want to write these 3-bits on output file. how can i manage it.from the above mentioned explanations i got an idea about bit manipulation but i still dont get the complete idea of resolving my issue.</pre>
		</div>
</li>
		<li class="comment even thread-odd thread-alt depth-1 clearfix" id="comment-59603">
		<div id="div-comment-59603" class="clearfix comment-container">
		<div class="comment-author vcard">
		<img alt='' src='../../../1.gravatar.com/avatar/52abded2c1f9761b8729d93dcfd5fd70@s=65&d=http_253a_252f_252f1.gravatar.com_252favatar_252fad516503a11cd5ca435acc9bb6523536_253fs_253d65&r=g' class='avatar avatar-65 photo' height='65' width='65' />		<span class="authorname">CompNerd</span>
		</div>
				<div class="comment-meta commentmetadata">
		<a href="comment-page-1/#comment-59603">
		April 30, 2009 at 11:50 am</a>
        <span class="comment-reply-link"><a rel="nofollow" class="comment-reply-login" href="../../blog/wp-login.php@redirect_to=http_253a_252f_252fwww.learncpp.com_252fcpp-tutorial_252f38-bitwise-operators_252f">Log in to Reply</a></span>		 
		</div>
		<p>I&#8217;m looking to create a new PRNG, and I need to be able to assign individual bits within a byte&#8230; Is there a way to decide what each bit will be within a byte without changing the other bits, and without finding out what symbol (letter/number/other) uses the specific binary code I need and then assigning it?</p>
		</div>
</li>
		<li class="comment odd alt thread-even depth-1 clearfix" id="comment-61081">
		<div id="div-comment-61081" class="clearfix comment-container">
		<div class="comment-author vcard">
		<img alt='' src='../../../0.gravatar.com/avatar/c31bb72f2562f3ec6eebac3c97446bf1@s=65&d=http_253a_252f_252f0.gravatar.com_252favatar_252fad516503a11cd5ca435acc9bb6523536_253fs_253d65&r=g' class='avatar avatar-65 photo' height='65' width='65' />		<span class="authorname">JTO</span>
		</div>
				<div class="comment-meta commentmetadata">
		<a href="comment-page-1/#comment-61081">
		May 18, 2009 at 3:48 pm</a>
        <span class="comment-reply-link"><a rel="nofollow" class="comment-reply-login" href="../../blog/wp-login.php@redirect_to=http_253a_252f_252fwww.learncpp.com_252fcpp-tutorial_252f38-bitwise-operators_252f">Log in to Reply</a></span>		 
		</div>
		<p>Hey Alex, This site is great. Do you know any site that with give an example to try this stuff out.<br />
Thanks alot.</p>
		</div>
</li>
		<li class="comment even thread-odd thread-alt depth-1 clearfix" id="comment-61751">
		<div id="div-comment-61751" class="clearfix comment-container">
		<div class="comment-author vcard">
		<img alt='' src='../../../0.gravatar.com/avatar/228501151e8d02f87c45143762e50c9b@s=65&d=http_253a_252f_252f0.gravatar.com_252favatar_252fad516503a11cd5ca435acc9bb6523536_253fs_253d65&r=g' class='avatar avatar-65 photo' height='65' width='65' />		<span class="authorname">DB</span>
		</div>
				<div class="comment-meta commentmetadata">
		<a href="comment-page-1/#comment-61751">
		May 31, 2009 at 3:47 pm</a>
        <span class="comment-reply-link"><a rel="nofollow" class="comment-reply-login" href="../../blog/wp-login.php@redirect_to=http_253a_252f_252fwww.learncpp.com_252fcpp-tutorial_252f38-bitwise-operators_252f">Log in to Reply</a></span>		 
		</div>
		<p>An easy example is in things like compression.. you can easily add 0&#8242;s and 1&#8242;s to things like characters.</p>
<p>An easy use to display the &lt;&gt; operators:</p>
<p>You have a character. Display its binary. Using bitwise &lt;&gt;, it is quite easy to.</p>
<p>char decode = (somesortofcharactefgettingthinghere);<br />
char tempChar;<br />
for (int i = 0; i &lt; 8; i++) // we are using a character. It is 1 byte, or 8 bits (or is on my computer).<br />
{<br />
   tempChar = decode<br />
   tempChar &lt;&lt; i;<br />
   tempChar &gt;&gt; 7;      // because bits are lost, we can seperate 0&#8242;s and 1&#8242;s by themselves.<br />
   cout &lt;&lt; char;<br />
}</p>
<p>I can&#8217;t easily explain that, but if you think it out in your head&#8230;</p>
<p>lets say our character is the number 97 (I think thats A, but it does not matter. It is only outputted as A, internally it is a number)</p>
<p>0 1 1 0 0 0 0 1</p>
<p>Alright, in our loop, we start by shifting it 0 units to the left. we then shift it to the right 7.</p>
<p>Our result? 0. Next time, move it 1 unit to the left, 7 to the right. 1. So on and so forth. You could have alternatively used a calculation, but this was just an example.</p>
		</div>
<ul class='children'>
		<li class="comment odd alt depth-2 clearfix" id="comment-61754">
		<div id="div-comment-61754" class="clearfix comment-container">
		<div class="comment-author vcard">
		<img alt='' src='../../../0.gravatar.com/avatar/228501151e8d02f87c45143762e50c9b@s=65&d=http_253a_252f_252f0.gravatar.com_252favatar_252fad516503a11cd5ca435acc9bb6523536_253fs_253d65&r=g' class='avatar avatar-65 photo' height='65' width='65' />		<span class="authorname">DB</span>
		</div>
				<div class="comment-meta commentmetadata">
		<a href="comment-page-1/#comment-61754">
		May 31, 2009 at 5:48 pm</a>
        <span class="comment-reply-link"><a rel="nofollow" class="comment-reply-login" href="../../blog/wp-login.php@redirect_to=http_253a_252f_252fwww.learncpp.com_252fcpp-tutorial_252f38-bitwise-operators_252f">Log in to Reply</a></span>		 
		</div>
		<p>How about a simple encryption program? Have a secret list of passwords in a text file? Render it useless to hackers with a simple changing of 0&#8242;s to 1&#8242;s, and 1&#8242;s to 0&#8242;s! (this both encrypts and unencrypts it):</p>
<p>#include fstream<br />
#include iostream</p>
<p>using namespace std;</p>
<p>int main()<br />
{<br />
	char choice[250];<br />
	fstream file;<br />
	cout &lt;&gt; choice;  //EDIT: this is wtf scrweed up by the site.. youi know how to use cin I assume &gt;.&gt;</p>
<p>	file.open(choice, ios::binary | ios::in);<br />
	if (!file.is_open())<br />
		return 0;<br />
	char *data;<br />
	long begin, end, size;<br />
	file.seekg(0, ios::beg);<br />
	begin = file.tellg();<br />
	file.seekg(0, ios::end);<br />
	end = file.tellg();<br />
	size = end &#8211; begin;<br />
	data = new char[size];<br />
	file.seekg(0, ios::beg);<br />
	file.read(data, size);<br />
	file.close();<br />
	for (long i = 0; i &lt; size; i++)<br />
		data[i] = ~data[i];<br />
	file.open(&#8220;output.woo&#8221;, ios::out | ios::binary);<br />
	file.seekp(0, ios::beg);<br />
	file.write(data, size);</p>
<p>	return 0;<br />
}</p>
		</div>
</li>
</ul>
</li>
		<li class="comment even thread-even depth-1 clearfix" id="comment-62946">
		<div id="div-comment-62946" class="clearfix comment-container">
		<div class="comment-author vcard">
		<img alt='' src='../../../1.gravatar.com/avatar/3cf2a89a76de64e73fb99900732c0930@s=65&d=http_253a_252f_252f1.gravatar.com_252favatar_252fad516503a11cd5ca435acc9bb6523536_253fs_253d65&r=g' class='avatar avatar-65 photo' height='65' width='65' />		<span class="authorname">Zak</span>
		</div>
				<div class="comment-meta commentmetadata">
		<a href="comment-page-1/#comment-62946">
		June 23, 2009 at 10:02 am</a>
        <span class="comment-reply-link"><a rel="nofollow" class="comment-reply-login" href="../../blog/wp-login.php@redirect_to=http_253a_252f_252fwww.learncpp.com_252fcpp-tutorial_252f38-bitwise-operators_252f">Log in to Reply</a></span>		 
		</div>
		<p>So if you did (7 &gt;&gt; 2), you get from 0111 to 0001, which is the number 1. Now how can you get back from that to 7? So the main use for this is so noone understands it except for the person who changed the value? To me, these bitwise operators seem useless except for Bitwise Not (~). I really do not understand what good you can get out of doing 5|6.</p>
		</div>
</li>
		<li class="comment odd alt thread-odd thread-alt depth-1 clearfix" id="comment-79973">
		<div id="div-comment-79973" class="clearfix comment-container">
		<div class="comment-author vcard">
		<img alt='' src='../../../0.gravatar.com/avatar/2340a43a315113b52cc9ec2f364a4c38@s=65&d=http_253a_252f_252f0.gravatar.com_252favatar_252fad516503a11cd5ca435acc9bb6523536_253fs_253d65&r=g' class='avatar avatar-65 photo' height='65' width='65' />		<span class="authorname"><a href='../../../chokingmankind.blogspot.com/default.htm' rel='external nofollow' class='url'>prashant ganesha</a></span>
		</div>
				<div class="comment-meta commentmetadata">
		<a href="comment-page-1/#comment-79973">
		March 7, 2010 at 6:03 am</a>
        <span class="comment-reply-link"><a rel="nofollow" class="comment-reply-login" href="../../blog/wp-login.php@redirect_to=http_253a_252f_252fwww.learncpp.com_252fcpp-tutorial_252f38-bitwise-operators_252f">Log in to Reply</a></span>		 
		</div>
		<p>i had read a c++ book..i dint have this kind of satisfaction after reading the book.. its truly amazing..thank you guru alex.. god bless you..</p>
		</div>
</li>
		<li class="comment even thread-even depth-1 clearfix" id="comment-85504">
		<div id="div-comment-85504" class="clearfix comment-container">
		<div class="comment-author vcard">
		<img alt='' src='../../../1.gravatar.com/avatar/9346d1c9a6d7f591cc38728df6e1c563@s=65&d=http_253a_252f_252f1.gravatar.com_252favatar_252fad516503a11cd5ca435acc9bb6523536_253fs_253d65&r=g' class='avatar avatar-65 photo' height='65' width='65' />		<span class="authorname">Mkc</span>
		</div>
				<div class="comment-meta commentmetadata">
		<a href="comment-page-1/#comment-85504">
		May 28, 2010 at 4:50 am</a>
        <span class="comment-reply-link"><a rel="nofollow" class="comment-reply-login" href="../../blog/wp-login.php@redirect_to=http_253a_252f_252fwww.learncpp.com_252fcpp-tutorial_252f38-bitwise-operators_252f">Log in to Reply</a></span>		 
		</div>
		<p>I&#8217;ve really enjoyed the tutorial so far, mainly because of the real life examples we&#8217;ve been given along the way.</p>
<p>The brief elucidation at the top of this page is great but could you go a bit further and tell us why it&#8217;s useful to be able to turn an 8bit 4 into a 251?! What&#8217;s the practical use of these operators?</p>
<p>Thanks in advance and thanks for an already brilliant tutorial.</p>
<p>M</p>
		</div>
<ul class='children'>
		<li class="comment byuser comment-author-posentel odd alt depth-2 clearfix" id="comment-96193">
		<div id="div-comment-96193" class="clearfix comment-container">
		<div class="comment-author vcard">
		<img alt='' src='../../../0.gravatar.com/avatar/8f75982202ee44c0a7f8bb446205d594@s=65&d=http_253a_252f_252f0.gravatar.com_252favatar_252fad516503a11cd5ca435acc9bb6523536_253fs_253d65&r=g' class='avatar avatar-65 photo' height='65' width='65' />		<span class="authorname">posentel</span>
		</div>
				<div class="comment-meta commentmetadata">
		<a href="comment-page-1/#comment-96193">
		October 24, 2011 at 6:28 pm</a>
        <span class="comment-reply-link"><a rel="nofollow" class="comment-reply-login" href="../../blog/wp-login.php@redirect_to=http_253a_252f_252fwww.learncpp.com_252fcpp-tutorial_252f38-bitwise-operators_252f">Log in to Reply</a></span>		 
		</div>
		<p>I am a college instructor, and have taught Discrete Mathematics using C++, and have also taught video game programming using C++.  I&#8217;m going through the learncpp website to pick up teaching hints and language details I may have missed.  This is the first section that I felt was poorly explained.  He should not have been explaining bitwise operators in terms of their integer representations, in general, such as changing a 4 into a 251.  That isn&#8217;t how they are used.</p>
<p>Back in the dinosaur days of computers, memory was precious, and most real programming was done in assembly language.  Many home computers only had 16K of RAM, and multiplication wasn&#8217;t built into the processor.  If you wanted to do multiplication quickly (the computers weren&#8217;t that fast), you often wanted a precomputed multiplication table.  But if you needed it for 1-100, that was 10000 entries, most of the 16K.  Here&#8217;s what we did: x*y = ((x+y)^2-(x-y)^2))/4.  Addition and subtraction were built into the processor, and now we only need a table of squares up to 200, so 200 entries, not 10000!  And division by 4?  Super easy, just do a right shift of 2, so &gt;&gt;2.  Just like in decimal dividing by 100 corresponds to moving the decimal 2 places, dividing by 4 corresponds to moving the &#8220;decimal point&#8221; 2 places in binary, and dropping the remainder.  So left and right shifts correspond to multiplying and dividing by powers of two.  With optimized compilers, this isn&#8217;t as useful as it used to be.</p>
<p>Bitwise &amp; and | are still used often for masks, especially graphically.  For example, suppose we want a flashlight effect on the screen, and only the 4 middle bits of 8 bits should be lit.  The mask 0011 1100 will turn off the bits on each side, and leave the middle 4 alone, with bitwise and:</p>
<p> 1101 1101<br />
&amp;0011 1100<br />
&#8212;&#8212;&#8212;-<br />
 0001 1100</p>
<p>And notice what the same mask does with bitwise or:</p>
<p> 1101 1101<br />
|0011 1100<br />
&#8212;&#8212;&#8212;-<br />
 1111 1101</p>
<p>It turns the 4 middle bits on, and leaves the outer 4 alone.</p>
<p>What if we wanted to turn the high bit of a byte on, and leave the remaining bits alone, well then we do bitwise or with 1000 0000:</p>
<p> 0101 1100<br />
|1000 0000<br />
&#8212;&#8212;&#8212;-<br />
 1101 1100</p>
<p>This is one of the main uses of the bitwise operators.  Think how much they were used with the original black and white Mac Classic graphically.  Bitwise and would dim sections of the screen, and then bitwise or could be used to draw something else in place.  And bitwise or could also be used to draw a pattern on top of an existing picture in paint programs.</p>
		</div>
</li>
</ul>
</li>
		<li class="comment even thread-odd thread-alt depth-1 clearfix" id="comment-87132">
		<div id="div-comment-87132" class="clearfix comment-container">
		<div class="comment-author vcard">
		<img alt='' src='../../../1.gravatar.com/avatar/5f8f20fd8a75b956705e9a06f7e183c5@s=65&d=http_253a_252f_252f1.gravatar.com_252favatar_252fad516503a11cd5ca435acc9bb6523536_253fs_253d65&r=g' class='avatar avatar-65 photo' height='65' width='65' />		<span class="authorname">joe</span>
		</div>
				<div class="comment-meta commentmetadata">
		<a href="comment-page-1/#comment-87132">
		June 24, 2010 at 8:30 pm</a>
        <span class="comment-reply-link"><a rel="nofollow" class="comment-reply-login" href="../../blog/wp-login.php@redirect_to=http_253a_252f_252fwww.learncpp.com_252fcpp-tutorial_252f38-bitwise-operators_252f">Log in to Reply</a></span>		 
		</div>
		<p>Is there a logical XOR operator.</p>
		</div>
</li>
		<li class="comment odd alt thread-even depth-1 clearfix" id="comment-87178">
		<div id="div-comment-87178" class="clearfix comment-container">
		<div class="comment-author vcard">
		<img alt='' src='../../../0.gravatar.com/avatar/078c31d475b93bc4c3474f5418d07909@s=65&d=http_253a_252f_252f0.gravatar.com_252favatar_252fad516503a11cd5ca435acc9bb6523536_253fs_253d65&r=g' class='avatar avatar-65 photo' height='65' width='65' />		<span class="authorname">MattFraust10</span>
		</div>
				<div class="comment-meta commentmetadata">
		<a href="comment-page-1/#comment-87178">
		June 25, 2010 at 2:37 pm</a>
        <span class="comment-reply-link"><a rel="nofollow" class="comment-reply-login" href="../../blog/wp-login.php@redirect_to=http_253a_252f_252fwww.learncpp.com_252fcpp-tutorial_252f38-bitwise-operators_252f">Log in to Reply</a></span>		 
		</div>
		<p>Hey joe,</p>
<p>If you look back on section 3.6, the 8th comment from the top of the comments is one posted by Florian in response to the 7th comment, made by RonnieTheBear.<br />
The post begins as stated below:</p>
<p>Comment by Florian<br />
2009-12-04 13:36:39<br />
Hey Ronnie, </p>
<p>This should answer your question. There is no logical XOR in C++, but Florian gives an alternate option one could use to achieve the same ends.</p>
		</div>
</li>
		<li class="pingback even thread-odd thread-alt depth-1 clearfix" id="comment-95849">
		<div id="div-comment-95849" class="clearfix comment-container">
		<div class="comment-author vcard">
				<span class="authorname"><a href='../../../www.rune-server.org/programming/application-development/projects/337576-binary-c.html#post2813216' rel='external nofollow' class='url'>Binary with C++!</a></span>
		</div>
				<div class="comment-meta commentmetadata">
		<a href="comment-page-1/#comment-95849">
		August 11, 2011 at 6:21 pm</a>
        <span class="comment-reply-link"><a rel="nofollow" class="comment-reply-login" href="../../blog/wp-login.php@redirect_to=http_253a_252f_252fwww.learncpp.com_252fcpp-tutorial_252f38-bitwise-operators_252f">Log in to Reply</a></span>		 
		</div>
		<p>[...]  [...]</p>
		</div>
</li>
		<li class="pingback odd alt thread-even depth-1 clearfix" id="comment-96013">
		<div id="div-comment-96013" class="clearfix comment-container">
		<div class="comment-author vcard">
				<span class="authorname"><a href='../../cpp-programming/3-x-comprehensive-quiz/default.htm' rel='external nofollow' class='url'>3.x &#8212; Comprehensive Quiz &laquo; Learn C++</a></span>
		</div>
				<div class="comment-meta commentmetadata">
		<a href="comment-page-1/#comment-96013">
		September 11, 2011 at 5:05 pm</a>
        <span class="comment-reply-link"><a rel="nofollow" class="comment-reply-login" href="../../blog/wp-login.php@redirect_to=http_253a_252f_252fwww.learncpp.com_252fcpp-tutorial_252f38-bitwise-operators_252f">Log in to Reply</a></span>		 
		</div>
		<p>[...]  3.8 &#8212; Bitwise operators      C++ Programming | &nbsp;Print This Post   &laquo; 16.4 &#8212; STL algorithms overview &nbsp;&nbsp; [...]</p>
		</div>
</li>
	
	</ul>
	<!-- / Comment List -->

	



	
	<p>You must be <a href="../../blog/wp-login.php@redirect_to=http_253a_252f_252fwww.learncpp.com_252fcpp-tutorial_252f38-bitwise-operators_252f">logged in</a> to post a comment.</p>

		

<div class="clearfix navigation-bottom">
		<div class="older">&laquo; <a href="../37-converting-between-binary-and-decimal/default.htm" rel="prev">3.7 &#8212; Converting between binary and decimal</a> &nbsp;</div><div class="newer">&nbsp; <a href="../41-blocks-compound-statements-and-local-variables/default.htm" rel="next">4.1 &#8212; Blocks (compound statements) and local variables</a> &raquo;</div></div>		
			



</td>
<!-- / Main Column -->


<!-- Right Sidebar -->
<td id="right">

	<div id="text-1" class="widget widget_text">			<div class="textwidget"><script type="text/javascript"><!--
google_ad_client = "pub-0588844875925051";
/* Wide Skyscraper Right Bar */
google_ad_slot = "0955932809";
google_ad_width = 160;
google_ad_height = 600;
//-->
</script>
<acript type="text/javascript"
src="../../../pagead2.googlesyndication.com/pagead/show_ads.js">
</script></div>
		</div><div id="archives-2" class="widget widget_archive"><div class="widget-title"><h3>Archives</h3></div>		<ul>
			<li><a href='../../2011/11/default.htm' title='November 2011'>November 2011</a></li>
	<li><a href='../../2011/10/default.htm' title='October 2011'>October 2011</a></li>
	<li><a href='../../2011/09/default.htm' title='September 2011'>September 2011</a></li>
	<li><a href='../../2010/10/default.htm' title='October 2010'>October 2010</a></li>
	<li><a href='../../2010/07/default.htm' title='July 2010'>July 2010</a></li>
	<li><a href='../../2009/10/default.htm' title='October 2009'>October 2009</a></li>
	<li><a href='../../2009/09/default.htm' title='September 2009'>September 2009</a></li>
	<li><a href='../../2009/03/default.htm' title='March 2009'>March 2009</a></li>
	<li><a href='../../2008/12/default.htm' title='December 2008'>December 2008</a></li>
	<li><a href='../../2008/10/default.htm' title='October 2008'>October 2008</a></li>
	<li><a href='../../2008/09/default.htm' title='September 2008'>September 2008</a></li>
	<li><a href='../../2008/08/default.htm' title='August 2008'>August 2008</a></li>
	<li><a href='../../2008/06/default.htm' title='June 2008'>June 2008</a></li>
	<li><a href='../../2008/05/default.htm' title='May 2008'>May 2008</a></li>
	<li><a href='../../2008/04/default.htm' title='April 2008'>April 2008</a></li>
	<li><a href='../../2008/03/default.htm' title='March 2008'>March 2008</a></li>
	<li><a href='../../2008/02/default.htm' title='February 2008'>February 2008</a></li>
	<li><a href='../../2008/01/default.htm' title='January 2008'>January 2008</a></li>
	<li><a href='../../2007/12/default.htm' title='December 2007'>December 2007</a></li>
	<li><a href='../../2007/11/default.htm' title='November 2007'>November 2007</a></li>
	<li><a href='../../2007/10/default.htm' title='October 2007'>October 2007</a></li>
	<li><a href='../../2007/09/default.htm' title='September 2007'>September 2007</a></li>
	<li><a href='../../2007/08/default.htm' title='August 2007'>August 2007</a></li>
	<li><a href='../../2007/07/default.htm' title='July 2007'>July 2007</a></li>
	<li><a href='../../2007/06/default.htm' title='June 2007'>June 2007</a></li>
	<li><a href='../../2007/05/default.htm' title='May 2007'>May 2007</a></li>
		</ul>
</div>
</td>
<!-- / Right Sidebar -->

</tr>
<!-- / Main Body -->
<tr>

<!-- Footer -->
<td id="footer" colspan="3">

    <p>
    Copyright &copy; 2011 <a href="../../default.htm">Learn C++</a> - All Rights Reserved<br />Powered by <a href="../../../wordpress.org/default.htm">WordPress</a> &amp; the <a href="../../../wordpress.bytesforall.com/default.htm" title="Customizable WordPress themes">Atahualpa Theme</a> by <a href="../../../www.bytesforall.com/default.htm" title="BFA Webdesign">BytesForAll</a>. Discuss on our <a href="../../../forum.bytesforall.com/default.htm" title="Atahualpa &amp; WordPress">WP Forum</a>    </p>
    
    
    <script type='text/javascript' src='../../blog/wp-content/plugins/syntaxhighlighter/syntaxhighlighter3/scripts/shcore.js@ver=3.0.83c'></script>
<script type='text/javascript' src='../../blog/wp-content/plugins/syntaxhighlighter/syntaxhighlighter3/scripts/shbrushcpp.js@ver=3.0.83c'></script>
<script type='text/javascript'>
	(function(){
		var corecss = document.createElement('link');
		var themecss = document.createElement('link');
		var corecssurl = "../../blog/wp-content/plugins/syntaxhighlighter/syntaxhighlighter3/styles/shcore.css@ver=3.0.83c.css";
		if ( corecss.setAttribute ) {
				corecss.setAttribute( "rel", "stylesheet" );
				corecss.setAttribute( "type", "text/css" );
				corecss.setAttribute( "href", corecssurl );
		} else {
				corecss.rel = "stylesheet";
				corecss.href = corecssurl;
		}
		document.getElementsByTagName("head")[0].insertBefore( corecss, document.getElementById("syntaxhighlighteranchor") );
		var themecssurl = "../../blog/wp-content/plugins/syntaxhighlighter/syntaxhighlighter3/styles/shthemedefault.css@ver=3.0.83c.css";
		if ( themecss.setAttribute ) {
				themecss.setAttribute( "rel", "stylesheet" );
				themecss.setAttribute( "type", "text/css" );
				themecss.setAttribute( "href", themecssurl );
		} else {
				themecss.rel = "stylesheet";
				themecss.href = themecssurl;
		}
		//document.getElementById("syntaxhighlighteranchor").appendChild(themecss);
		document.getElementsByTagName("head")[0].insertBefore( themecss, document.getElementById("syntaxhighlighteranchor") );
	})();
	SyntaxHighlighter.config.strings.expandSource = '+ expand source';
	SyntaxHighlighter.config.strings.help = '?';
	SyntaxHighlighter.config.strings.alert = 'SyntaxHighlighter\n\n';
	SyntaxHighlighter.config.strings.noBrush = 'Can\'t find brush for: ';
	SyntaxHighlighter.config.strings.brushNotHtmlScript = 'Brush wasn\'t configured for html-script option: ';
	SyntaxHighlighter.defaults['pad-line-numbers'] = false;
	SyntaxHighlighter.defaults['toolbar'] = false;
	SyntaxHighlighter.all();
</script>
<!--stats_footer_test--><script src="../../../stats.wordpress.com/e-201148.js" type="text/javascript"></script>
<script type="text/javascript">
st_go({blog:'3928254',v:'ext',post:'61'});
var load_cmc = function(){linktracker_init(3928254,61,2);};
if ( typeof addLoadEvent != 'undefined' ) addLoadEvent(load_cmc);
else load_cmc();
</script>

</td>
<!-- / Footer -->

</tr>
</table><!-- / layout -->
</div><!-- / container -->
</div><!-- / wrapper -->
</body>
</html>
<!-- Dynamic page generated in 0.464 seconds. -->
<!-- Cached page generated by WP-Super-Cache on 2011-12-02 06:52:08 -->
<!-- Compression = gzip -->