<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd"><meta http-equiv="Content-Type" content="text/html; charset=utf-8"><!-- saved from url=(0076)http://www.learncpp.com/cpp-tutorial/912-shallow-vs-deep-copying/default.htm -->

<html xmlns="http://www.w3.org/1999/xhtml" dir="ltr" lang="en-US">
<head>
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8" />
<meta http-equiv="X-UA-Compatible" content="IE=EmulateIE7" />
<title>9.12 &#8212; Shallow vs. deep copying &laquo; Learn C++</title>
<link rel="shortcut icon" href="../../blog/wp-content/themes/atahualpa353/images/favicon/learncpp.ico" /><link rel="canonical" href="default.htm" /><link rel="alternate" type="application/rss+xml" title="Learn C++ RSS Feed" href="../../feed/default.htm" />
<link rel="alternate" type="application/atom+xml" title="Learn C++ Atom Feed" href="../../feed/atom/default.htm" />
<link rel="pingback" href="http://www.learncpp.com/blog/xmlrpc.php" />
<link rel="alternate" type="application/rss+xml" title="Learn C++ &raquo; 9.12 &#8212; Shallow vs. deep copying Comments Feed" href="feed/default.htm" />
<script type='text/javascript' src='../../blog/wp-includes/js/l10n.js@ver=20101110'></script>
<script type='text/javascript' src='../../blog/wp-includes/js/jquery/jquery.js@ver=1.6.1'></script>
<script type='text/javascript' src='../../blog/wp-includes/js/comment-reply.js@ver=20090102'></script>
<script type='text/javascript' src='../../blog/wp-content/plugins/google-analyticator/external-tracking.min.js@ver=6.2'></script>
<link rel="EditURI" type="application/rsd+xml" title="RSD" href="http://www.learncpp.com/blog/xmlrpc.php?rsd" />
<link rel="wlwmanifest" type="application/wlwmanifest+xml" href="../../blog/wp-includes/wlwmanifest.xml" /> 
<link rel='index' title='Learn C++' href='../../default.htm' />
<link rel='start' title='Welcome to LearnCpp.com!' href='../../site-news/this-is-a-news-test-post/default.htm' />
<link rel='prev' title='9.11 &#8212; The copy constructor and overloading the assignment operator' href='../911-the-copy-constructor-and-overloading-the-assignment-operator/default.htm' />
<link rel='next' title='LearnCpp.com tutorials: Now with syntax highlighting!' href='../../site-news/learncppcom-tutorials-now-with-syntax-highlighting/default.htm' />
<link rel='canonical' href='default.htm' />
<link rel='shortlink' href='../../../wp.me/pgtuw-2r' />
<meta name="ROBOTS" content="INDEX" />

<!-- Powered by AdSense-Deluxe WordPress Plugin v0.8 - http://www.acmetech.com/blog/adsense-deluxe/ -->
<!-- wpSolution Code -->
        <script type="text/javascript">
            function wpSolutionToggle(solution, link, showtext, hidetext) {
                if (solution.style.display != 'none') {
                    solution.style.display = 'none';
                    link.innerHTML = showtext;
                    link.className = 'solution_link_show';
                } else {
                    solution.style.display = 'block';
                    link.innerHTML = hidetext;
                    link.className = 'solution_link_hide';
                }
            }
          </script>
<style type="text/css">body{text-align:center;margin:0;padding:0;font-family:verdana,arial,sans-serif;font-size:13px;line-height:1.4;color:#000000;background:#ddd;padding-top:20px;padding-bottom:20px}a:link,a:visited,a:active{color:#365DA0;font-weight:bold;text-decoration:none;}a:hover{color:#365DA0;font-weight:bold;text-decoration:underline}ul,ol,dl,p,h1,h2,h3,h4,h5,h6{margin-top:10px;margin-bottom:10px;padding-top:0;padding-bottom:0;}ul ul,ul ol,ol ul,ol ol{margin-top:0;margin-bottom:0}code,pre{font-family:"Courier New",Courier,monospace;font-size:1em}pre{overflow:auto;word-wrap:normal;padding-bottom:1.5em;overflow-y:hidden;width:99%}abbr[title],acronym[title]{border-bottom:1px dotted}hr{display:block;height:2px;border:none;margin:0.5em auto;color:#cccccc;background-color:#cccccc}table{font-size:1em;}div.post,ul.commentlist li,ol.commentlist li{word-wrap:break-word;}pre,.wp_syntax{word-wrap:normal;}div#wrapper{text-align:center;margin-left:auto;margin-right:auto;display:block;width:98%}* html div#wrapper{<!--width:expression"98%");-->}div#container{padding:20px;background:#fff;box-shadow:0 0 15px #333;-moz-box-shadow:0 0 15px #333;padding-left:20px;padding-right:20px;width:auto;margin-left:auto;margin-right:auto;text-align:left;display:block}table#layout{font-size:100%;width:100%;table-layout:fixed}.colone{width:200px}.colone-inner{width:200px}.coltwo{width:100% }.colthree-inner{width:200px}.colthree{width:200px}td#header{width:auto;padding:0}table#logoarea,table#logoarea tr,table#logoarea td{margin:0;padding:0;background:none;border:0}table#logoarea{width:100%;border-spacing:0px}img.logo{display:block;margin:0 10px 0 0}td.logoarea-logo{width:1%}h1.blogtitle,h2.blogtitle{ display:block;margin:0;padding:0;letter-spacing:-1px;line-height:1.0em;font-size:200%;text-transform:uppercase;font-smooth:always}h1.blogtitle a:link,h1.blogtitle a:visited,h1.blogtitle a:active,h2.blogtitle a:link,h2.blogtitle a:visited,h2.blogtitle a:active{ text-decoration:none;color:#000000;font-weight:normal;font-smooth:always}h1.blogtitle a:hover,h2.blogtitle a:hover{ text-decoration:none;color:#AC161B;font-weight:normal}p.tagline{margin:0;padding:0;font-size:1.2em;font-weight:normal;color:#444}td.feed-icons{white-space:nowrap;}div.rss-box{height:1%;display:block;padding:10px 0 10px 10px;margin:0;width:280px}a.comments-icon{height:22px;line-height:22px;margin:0 5px 0 5px;padding-left:22px;display:block;text-decoration:none;float:right;white-space:nowrap}a.comments-icon:link,a.commentss-icon:active,a.comments-icon:visited{background:transparent url(../../blog/wp-content/themes/atahualpa353/images/comment-gray.png) no-repeat scroll center left}a.comments-icon:hover{background:transparent url(../../blog/wp-content/themes/atahualpa353/images/comment.png) no-repeat scroll center left}a.posts-icon{height:22px;line-height:22px;margin:0 5px 0 0;padding-left:20px;display:block;text-decoration:none;float:right;white-space:nowrap}a.posts-icon:link,a.posts-icon:active,a.posts-icon:visited{background:transparent url(../../blog/wp-content/themes/atahualpa353/images/rss-gray.png) no-repeat scroll center left}a.posts-icon:hover{background:transparent url(../../blog/wp-content/themes/atahualpa353/images/rss.png) no-repeat scroll center left}a.email-icon{height:22px;line-height:22px;margin:0 5px 0 5px;padding-left:24px;display:block;text-decoration:none;float:right;white-space:nowrap}a.email-icon:link,a.email-icon:active,a.email-icon:visited{background:transparent url(../../blog/wp-content/themes/atahualpa353/images/email-gray.png) no-repeat scroll center left}a.email-icon:hover{background:transparent url(../../blog/wp-content/themes/atahualpa353/images/email.png) no-repeat scroll center left}td.search-box{height:1%}div.searchbox{height:35px;border-bottom:0;width:200px;margin:0;padding:0}div.searchbox-form{margin:5px 10px 5px 10px}div.horbar1,div.horbar2{font-size:1px;clear:both;display:block;position:relative;padding:0;margin:0;width:100%;}div.horbar1{height:0px;background:#ffffff;border-top:dashed 1px #cccccc}div.horbar2{height:0px;background:#ffffff;border-bottom:dashed 1px #cccccc}div.header-image-container{position:relative;margin:0;padding:0;height:150px;}div.clickable{position:absolute;top:0;left:0;z-index:3;margin:0;padding:0;width:100%;height:150px;}a.divclick:link,a.divclick:visited,a.divclick:active,a.divclick:hover{width:100%;height:100%;display:block;text-decoration:none}td#left{vertical-align:top;padding-right:20px}td#left-inner{vertical-align:top;padding-right:10px}td#right{vertical-align:top;padding-left:20px}td#right-inner{vertical-align:top;padding-left:10px}td#middle{vertical-align:top;width:100%;padding:10px 15px}td#footer{width:auto;background-color:#f7f7f7;border-top:solid 4px #eee;padding:10px;text-align:center;color:#888;font-size:11px}td#footer a:link,td#footer a:visited,td#footer a:active{text-decoration:none;color:#777777;font-weight:normal}td#footer a:hover{text-decoration:none;color:#777777;font-weight:normal}div.widget{display:block;width:auto;font-size:12px;margin:0 0 10px 0;padding:10px;border:solid 4px #eee}div.widget-title{display:block;width:auto}div.widget-title h3,td#left h3.tw-widgettitle,td#right h3.tw-widgettitle,td#left ul.tw-nav-list,td#right ul.tw-nav-list{padding:0;margin:0;font-size:0.9em;text-align:center;font-weight:normal;text-transform:uppercase;letter-spacing:1px;color:#333;border-bottom:solid 1px #eee;padding-bottom:10px;margin-bottom:10px}div.widget ul,div.textwidget{display:block;width:auto}div.widget select{width:98%;margin-top:5px;}div.widget ul{list-style-type:none;margin:0;padding:0;width:auto}div.widget ul li{display:block;margin:2px 0 2px 0px;padding:0 0 0 0px;border-left:solid 0px #CCCCCC}div.widget ul li:hover,div.widget ul li.sfhover{display:block;width:auto;border-left:solid 0px #000000;}div.widget ul li ul li{margin:2px 0 2px 5px;padding:0 0 0 0px;border-left:solid 0px #CCCCCC;}div.widget ul li ul li:hover,div.widget ul li ul li.sfhover{border-left:solid 0px #000000;}div.widget ul li ul li ul li{margin:2px 0 2px 5px;padding:0 0 0 0px;border-left:solid 0px #CCCCCC;}div.widget ul li ul li ul li:hover,div.widget ul li ul li ul li.sfhover{border-left:solid 0px #000000;}div.widget td a:link,div.widget td a:visited,div.widget td a:active,div.widget ul li a:link,div.widget ul li a:visited,div.widget ul li a:active{text-decoration:none;font-weight:normal;color:#365DA0;font-weight:normal;}div.widget ul li ul li a:link,div.widget ul li ul li a:visited,div.widget ul li ul li a:active{color:#365DA0;font-weight:normal;}div.widget ul li ul li ul li a:link,div.widget ul li ul li ul li a:visited,div.widget ul li ul li ul li a:active{color:#365DA0;font-weight:normal;}div.widget ul li a:hover{color:#365DA0;}div.widget ul li ul li a:hover{color:#365DA0;}div.widget ul li ul li ul li a:hover{color:#365DA0;}div.widget ul li a:link,div.widget ul li a:visited,div.widget ul li a:active,div.widget ul li a:hover{display:inline}* html div.widget ul li a:link,* html div.widget ul li a:visited,* html div.widget ul li a:active,* html div.widget ul li a:hover{height:1%; } div.widget_pages ul li,div.widget_categories ul li{border-left:0 !important;padding:0 !important}div.widget_pages ul li a:link,div.widget_pages ul li a:visited,div.widget_pages ul li a:active,div.widget_categories ul li a:link,div.widget_categories ul li a:visited,div.widget_categories ul li a:active{padding:0 0 0 0px;border-left:solid 0px #CCCCCC}div.widget_pages ul li a:hover,div.widget_categories ul li a:hover{border-left:solid 0px #000000;}div.widget_pages ul li ul li a:link,div.widget_pages ul li ul li a:visited,div.widget_pages ul li ul li a:active,div.widget_categories ul li ul li a:link,div.widget_categories ul li ul li a:visited,div.widget_categories ul li ul li a:active{padding:0 0 0 0px;border-left:solid 0px #CCCCCC}div.widget_pages ul li ul li a:hover,div.widget_categories ul li ul li a:hover{border-left:solid 0px #000000;}div.widget_pages ul li ul li ul li a:link,div.widget_pages ul li ul li ul li a:visited,div.widget_pages ul li ul li ul li a:active,div.widget_categories ul li ul li ul li a:link,div.widget_categories ul li ul li ul li a:visited,div.widget_categories ul li ul li ul li a:active{padding:0 0 0 0px;border-left:solid 0px #CCCCCC}div.widget_pages ul li ul li ul li a:hover,div.widget_categories ul li ul li ul li a:hover{border-left:solid 0px #000000;}div.widget_pages ul li a:link,div.widget_pages ul li a:active,div.widget_pages ul li a:visited,div.widget_pages ul li a:hover{display:block !important}div.widget_categories ul li a:link,div.widget_categories ul li a:active,div.widget_categories ul li a:visited,div.widget_categories ul li a:hover{display:inline !important}table.subscribe{width:100%}table.subscribe td.email-text{padding:0 0 5px 0;vertical-align:top}table.subscribe td.email-field{padding:0;width:100%}table.subscribe td.email-button{padding:0 0 0 5px}table.subscribe td.post-text{padding:7px 0 0 0;vertical-align:top}table.subscribe td.comment-text{padding:7px 0 0 0;vertical-align:top}div.post,div.page{display:block;margin:0 0 30px 0;border-top:solid 4px #eee;padding-top:20px}div.sticky{background:#eee url('../../blog/wp-content/themes/atahualpa353/images/sticky.gif') 99% 5% no-repeat;border:dashed 1px #cccccc;padding:10px}div.post-kicker{margin:0 0 5px 0}div.post-kicker a:link,div.post-kicker a:visited,div.post-kicker a:active{color:#999;text-decoration:none;text-transform:uppercase;letter-spacing:1px}div.post-kicker a:hover{color:#cc0000}div.post-headline{}div.post-headline h1,div.post-headline h2{ margin:0; padding:0;padding:0;margin:0;font-size:1.7em}div.post-headline h2 a:link,div.post-headline h2 a:visited,div.post-headline h2 a:active,div.post-headline h1 a:link,div.post-headline h1 a:visited,div.post-headline h1 a:active{}div.post-headline h2 a:hover,div.post-headline h1 a:hover{}div.post-byline{margin:5px 0 10px 0;color:#999;text-transform:uppercase;letter-spacing:1px;font-size:11px}div.post-byline a:link,div.post-byline a:visited,div.post-byline a:active{}div.post-byline a:hover{}div.post-bodycopy{}div.post-bodycopy p{margin:1em 0;padding:0;display:block}div.post-pagination{}div.post-footer{clear:both;display:block;color:#999;text-transform:uppercase;letter-spacing:1px;font-size:11px}div.post-footer a:link,div.post-footer a:visited,div.post-footer a:active{color:#999;font-weight:normal;text-decoration:none}div.post-footer a:hover{color:#333;font-weight:normal;text-decoration:underline}div.post-kicker img,div.post-byline img,div.post-footer img{border:0;padding:0;margin:0 0 -1px 0;background:none}span.post-ratings{display:inline-block;width:auto;white-space:nowrap}div.navigation-top{border-top:solid 4px #eee;padding:8px 0}div.navigation-middle{margin:10px 0 20px 0;padding:8px 0;border-top:solid 4px #eee;border-bottom:solid 4px #eee}div.navigation-bottom{margin:20px 0 0 0;padding:10px 0 0 0;border-top:solid 4px #eee}div.navigation-comments-above{margin:0 0 10px 0;padding:5px 0 5px 0}div.navigation-comments-below{margin:0 0 10px 0;padding:5px 0 5px 0}div.older{float:left;width:48%;text-align:left;margin:0;padding:0}div.newer{float:right;width:48%;text-align:right;margin:0;padding:0;}div.older-home{float:left;width:44%;text-align:left;margin:0;padding:0}div.newer-home{float:right;width:44%;text-align:right;margin:0;padding:0;}div.home{float:left;width:8%;text-align:center;margin:0;padding:0}form,.feedburner-email-form{margin:0;padding:0;}fieldset{border:1px solid #cccccc;width:auto;padding:0.35em 0.625em 0.75em;display:block;}legend{color:#000000;background:#f4f4f4;border:1px solid #cccccc;padding:2px 6px;margin-bottom:15px;}form p{margin:5px 0 0 0;padding:0;}div.xhtml-tags p{margin:0}label{margin-right:0.5em;font-family:arial;cursor:pointer;}input.text,input.textbox,input.password,input.file,input.TextField,textarea{padding:3px;color:#000000;border-top:solid 1px #333333;border-left:solid 1px #333333;border-right:solid 1px #999999;border-bottom:solid 1px #cccccc;background:url(../../blog/wp-content/themes/atahualpa353/images/inputbackgr.gif) top left no-repeat}textarea{width:96%;}input.inputblur{color:#777777;width:95%}input.inputfocus{color:#000000;width:95%}input.highlight,textarea.highlight{background:#e8eff7;border-color:#37699f}.button,.Button{padding:0 2px;height:24px;line-height:16px;background-color:#777777;color:#ffffff;border:solid 2px #555555;font-weight:bold}.buttonhover{padding:0 2px;cursor:pointer;background-color:#6b9c6b;color:#ffffff;border:solid 2px #496d49}form#commentform input#submit{ padding:0 .25em; width:0; overflow:visible}form#commentform input#submit[class]{width:auto}form#commentform input#submit{padding:4px 10px 4px 10px;font-size:1.2em;line-height:1.5em;height:36px}table.searchform{width:100%}table.searchform td.searchfield{padding:0;width:100%}table.searchform td.searchbutton{padding:0 0 0 5px}table.searchform td.searchbutton input{padding:0 0 0 5px}blockquote{height:1%;display:block;clear:both;color:#555555;padding:1em 1em;background:#f4f4f4;border:solid 1px #e1e1e1}blockquote blockquote{height:1%;display:block;clear:both;color:#444444;padding:1em 1em;background:#e1e1e1;border:solid 1px #d3d3d3}div.post table{border-collapse:collapse;margin:10px 0}div.post table caption{width:auto;margin:0 auto;background:#eeeeee;border:#999999;padding:4px 8px;color:#666666}div.post table th{background:#888888;color:#ffffff;font-weight:bold;font-size:90%;padding:4px 8px;border:solid 1px #ffffff;text-align:left}div.post table td{padding:4px 8px;background-color:#ffffff;border-bottom:1px solid #dddddd;text-align:left}div.post table tfoot td{}div.post table tr.alt td{background:#f4f4f4}div.post table tr.over td{background:#e2e2e2}#calendar_wrap{padding:0;border:none}table#wp-calendar{width:100%;font-size:90%;border-collapse:collapse;background-color:#ffffff;margin:0 auto}table#wp-calendar caption{width:auto;background:#eeeeee;border:none;;padding:3px;margin:0 auto;font-size:1em}table#wp-calendar th{border:solid 1px #eeeeee;background-color:#999999;color:#ffffff;font-weight:bold;padding:2px;text-align:center}table#wp-calendar td{padding:0;line-height:18px;background-color:#ffffff;border:1px solid #dddddd;text-align:center}table#wp-calendar tfoot td{border:solid 1px #eeeeee;background-color:#eeeeee}table#wp-calendar td a{display:block;background-color:#eeeeee;width:100%;height:100%;padding:0}div#respond{margin:25px 0;padding:25px;background:#eee;-moz-border-radius:8px;-khtml-border-radius:8px;-webkit-border-radius:8px;border-radius:8px;}p.thesetags{margin:10px 0}h3.reply{margin:0;padding:0 0 10px 0}ol.commentlist{margin:15px 0 25px 0;list-style-type:none;padding:0;display:block;border-top:dotted 1px #cccccc}ol.commentlist li{padding:15px 10px;display:block;height:1%;margin:0;background-color:#FFFFFF;border-bottom:dotted 1px #cccccc}ol.commentlist li.alt{display:block;height:1%;background-color:#EEEEEE;border-bottom:dotted 1px #cccccc}ol.commentlist li.authorcomment{display:block;height:1%;background-color:#D8D8FA}ol.commentlist span.authorname{font-weight:bold;font-size:110%}ol.commentlist span.commentdate{color:#666666;font-size:90%;margin-bottom:5px;display:block}ol.commentlist span.editcomment{display:block}ol.commentlist li p{margin:2px 0 5px 0}div.comment-number{float:right;font-size:2em;line-height:2em;font-family:georgia,serif;font-weight:bold;color:#ddd;margin:-10px 0 0 0;position:relative;height:1%}div.comment-number a:link,div.comment-number a:visited,div.comment-number a:active{color:#ccc}textarea#comment{width:98%;margin:10px 0;display:block}ul.commentlist{margin:15px 0 15px 0;list-style-type:none;padding:0;display:block;border-top:dotted 1px #cccccc}ul.commentlist ul{margin:0;border:none;list-style-type:none;padding:0}ul.commentlist li{padding:0; margin:0;display:block;clear:both;height:1%;}ul.commentlist ul.children li{ margin-left:30px}ul.commentlist div.comment-container{padding:10px;margin:0}ul.children div.comment-container{background-color:transparent;border:dotted 1px #ccc;padding:10px;margin:0 10px 8px 0; -moz-border-radius:5px; -khtml-border-radius:5px; -webkit-border-radius:5px; border-radius:5px}ul.children div.bypostauthor{}ul.commentlist li.thread-even{background-color:#FFFFFF;border-bottom:dotted 1px #cccccc}ul.commentlist li.thread-odd{background-color:#EEEEEE;border-bottom:dotted 1px #cccccc}ul.commentlist div.bypostauthor{background-color:#D8D8FA}ul.children div.bypostauthor{border:dotted 1px #BFBCFB}ul.commentlist span.authorname{font-size:110%}div.comment-meta a:link,div.comment-meta a:visited,div.comment-meta a:active,div.comment-meta a:hover{font-weight:normal}div#cancel-comment-reply{margin:-5px 0 10px 0}div.comment-number{float:right;font-size:2em;line-height:2em;font-family:georgia,serif;font-weight:bold;color:#ddd;margin:-10px 0 0 0;position:relative;height:1%}div.comment-number a:link,div.comment-number a:visited,div.comment-number a:active{color:#ccc}.page-numbers{padding:2px 6px;border:solid 1px #000000;-moz-border-radius:6px;-khtml-border-radius:6px;-webkit-border-radius:6px;border-radius:6px}span.current{background:#ddd}a.prev,a.next{border:none}a.page-numbers:link,a.page-numbers:visited,a.page-numbers:active{text-decoration:none;color:#365DA0;border-color:#365DA0}a.page-numbers:hover{text-decoration:none;color:#365DA0;border-color:#365DA0}div.xhtml-tags{display:none}abbr em{border:none !important;border-top:dashed 1px #aaa !important;display:-moz-inline-box !important;display:inline-block !important;background:url(../../blog/wp-content/themes/atahualpa353/images/commentluv.gif) 0% 90% no-repeat;margin-top:8px;padding:5px 5px 2px 20px !important;font-style:normal}p.subscribe-to-comments{margin-bottom:10px}div#gsHeader{display:none;}div.g2_column{margin:0 !important;width:100% !important;font-size:1.2em}div#gsNavBar{border-top-width:0 !important}p.giDescription{font-size:1.2em;line-height:1 !important}p.giTitle{margin:0.3em 0 !important;font-size:1em;font-weight:normal;color:#666}div#wp-email img{border:0;padding:0}div#wp-email input,div#wp-email textarea{margin-top:5px;margin-bottom:2px}div#wp-email p{margin-bottom:10px}input#wp-email-submit{ padding:0; font-size:30px; height:50px; line-height:50px; overflow:visible;}img.WP-EmailIcon{ vertical-align:text-bottom !important}.tw-accordion .tw-widgettitle,.tw-accordion .tw-widgettitle:hover,.tw-accordion .tw-hovered,.tw-accordion .selected,.tw-accordion .selected:hover{ background:transparent !important; background-image:none !important}.tw-accordion .tw-widgettitle span{ padding-left:0 !important}.tw-accordion h3.tw-widgettitle{border-bottom:solid 1px #ccc}.tw-accordion h3.selected{border-bottom:none}td#left .without_title,td#right .without_title{ margin-top:0;margin-bottom:0}ul.tw-nav-list{border-bottom:solid 1px #999;display:block;margin-bottom:5px !important}td#left ul.tw-nav-list li,td#right ul.tw-nav-list li{padding:0 0 1px 0;margin:0 0 -1px 5px; border:solid 1px #ccc;border-bottom:none;-moz-border-radius:5px;-khtml-border-radius:5px;-webkit-border-radius:5px;border-radius:5px;-moz-border-radius-bottomright:0;-moz-border-radius-bottomleft:0;-webkit-border-bottom-right-radius:0;-webkit-border-bottom-left-radius:0;border-bottom-right-radius:0;border-bottom-left-radius:0;background:#eee}td#left ul.tw-nav-list li.ui-tabs-selected,td#right ul.tw-nav-list li.ui-tabs-selected{ background:none;border:solid 1px #999;border-bottom:solid 1px #fff !important}ul.tw-nav-list li a:link,ul.tw-nav-list li a:visited,ul.tw-nav-list li a:active,ul.tw-nav-list li a:hover{padding:0 8px !important;background:none;border-left:none !important;outline:none}td#left ul.tw-nav-list li.ui-tabs-selected a,td#left li.ui-tabs-selected a:hover,td#right ul.tw-nav-list li.ui-tabs-selected a,td#right li.ui-tabs-selected a:hover{ color:#000000; text-decoration:none;font-weight:bold;background:none !important;outline:none}td#left .ui-tabs-panel,td#right .ui-tabs-panel{ margin:0; padding:0}img{border:0}#dbem-location-map img{ background:none !important}.post img{padding:5px;border:solid 1px #dddddd;background-color:#f3f3f3;-moz-border-radius:3px;-khtml-border-radius:3px;-webkit-border-radius:3px;border-radius:3px;}.post img.size-full{max-width:96%;width:auto 100%;margin:5px 0 5px 0}div.post img[class~=size-full]{height:auto;}.post img.alignleft{float:left;margin:10px 10px 5px 0;}.post img.alignright{float:right;margin:10px 0 5px 10px;}.post img.aligncenter{display:block;margin:10px auto}.aligncenter,div.aligncenter{ display:block; margin-left:auto; margin-right:auto}.alignleft,div.alignleft{float:left;margin:10px 10px 5px 0}.alignright,div.alignright{ float:right; margin:10px 0 5px 10px}div.archives-page img{border:0;padding:0;background:none;margin-bottom:0;vertical-align:-10%}.wp-caption{max-width:96%;width:auto 100%;height:auto;display:block;border:1px solid #dddddd;text-align:center;background-color:#f3f3f3;padding-top:4px;margin:10px 0 0 0;-moz-border-radius:3px;-khtml-border-radius:3px;-webkit-border-radius:3px;border-radius:3px;}* html .wp-caption{height:100%;}.wp-caption img{ margin:0 !important; padding:0 !important; border:0 none !important}.wp-caption p.wp-caption-text{font-size:0.8em;line-height:13px;padding:2px 4px 5px;margin:0;color:#666666}img.wp-post-image{float:left;border:0;padding:0;background:none;margin:0 10px 5px 0}img.wp-smiley{ float:none;border:none !important;margin:0 1px -1px 1px;padding:0 !important;background:none !important}img.avatar{float:left;display:block;margin:0 8px 1px 0;padding:3px;border:solid 1px #ddd;background-color:#f3f3f3;-moz-border-radius:3px;-khtml-border-radius:3px;-webkit-border-radius:3px;border-radius:3px;}#comment_quicktags{text-align:left;padding:10px 0 2px 0;display:block}#comment_quicktags input.ed_button{background:#f4f4f4;border:2px solid #cccccc;color:#444444;margin:2px 4px 2px 0;width:auto;padding:0 4px;height:24px;line-height:16px}#comment_quicktags input.ed_button_hover{background:#dddddd;border:2px solid #666666;color:#000000;margin:2px 4px 2px 0;width:auto;padding:0 4px;height:24px;line-height:16px;cursor:pointer}#comment_quicktags #ed_strong{font-weight:bold}#comment_quicktags #ed_em{font-style:italic}@media print{body{background:white;color:black;margin:0;font-size:10pt !important;font-family:arial,sans-serif;}div.post-footer{line-height:normal !important;color:#555 !important;font-size:9pt !important}a:link,a:visited,a:active,a:hover{text-decoration:underline !important;color:#000}h2{color:#000;font-size:14pt !important;font-weight:normal !important}h3{color:#000;font-size:12pt !important;}#header,#footer,.colone,.colthree,.navigation,.navigation-top,.navigation-middle,.navigation-bottom,.wp-pagenavi-navigation,#comment,#respond,.remove-for-print{display:none}td#left,td#right,td#left-inner,td#right-inner{width:0}td#middle{width:100%}*:lang(en) td#left{ display:none}*:lang(en) td#right{ display:none}*:lang(en) td#left-inner{ display:none}*:lang(en) td#right-inner{ display:none}td#left:empty{ display:none}td#right:empty{ display:none}td#left-inner:empty{ display:none}td#right-inner:empty{ display:none}}ul.rMenu,ul.rMenu ul,ul.rMenu li,ul.rMenu a{display:block;margin:0;padding:0}ul.rMenu,ul.rMenu li,ul.rMenu ul{list-style:none}ul.rMenu ul{display:none}ul.rMenu li{position:relative;z-index:1}ul.rMenu li:hover{z-index:999}ul.rMenu li:hover > ul{display:block;position:absolute}ul.rMenu li:hover{background-position:0 0} ul.rMenu-hor li{float:left;width:auto}ul.rMenu-hRight li{float:right}ul.rMenu-ver li{float:none}.clearfix:after{ content:".";display:block;height:0;clear:both;visibility:hidden}.clearfix{min-width:0;display:inline-block;display:block}* html .clearfix{height:1%;}.clearboth{clear:both;height:1%;font-size:1%;line-height:1%;display:block;padding:0;margin:0}td#header{padding-bottom:15px;}td#middle{padding:0}div.searchbox-form{margin:5px 0 15px 5px}div#menu1 ul.rMenu{background:transparent;border:none}div#imagecontainer{border-top:solid 0px #333;border-bottom:solid 5px #333;}div.widget ul li{padding:1px 5px 1px 12px !important;background:url('../../blog/wp-content/themes/atahualpa353/images/bullets/round-gray.gif') no-repeat 0 7px}ul.rMenu-hor ul,ul.rMenu-hRight ul{margin-top:0px;}ul.rMenu-hor li{margin-bottom:0px;margin-top:0px;margin-left:0px;}ul.rMenu-hor{padding-left:0px;}ul.rMenu-ver li{margin-top:0xp;}div#menu1 ul.rMenu li a,div#menu2 ul.rMenu li a{padding:6px 10px}div#menu1 ul.rMenu li{margin-right:5px}div#menu1 ul.rMenu li li{margin-right:0}div#menu1 ul.rMenu li,div#menu1 ul.rMenu li a{-webkit-border-top-left-radius:5px;-webkit-border-top-right-radius:5px;-moz-border-radius-topleft:5px;-moz-border-radius-topright:5px;border-top-left-radius:5px;border-top-right-radius:5px}div#menu1 ul.rMenu li li,div#menu1 ul.rMenu li li a{-webkit-border-top-left-radius:0;-webkit-border-top-right-radius:0;-moz-border-radius-topleft:0;-moz-border-radius-topright:0;border-top-left-radius:0;border-top-right-radius:0}div#menu2{ border:dashed 1px #ffffff}</style>
<script type="text/javascript">
//<![CDATA[




/* JQUERY */
jQuery(document).ready(function(){  


	/* jQuery('ul#rmenu').superfish(); */
	/* jQuery('ul#rmenu').superfish().find('ul').bgIframe({opacity:false}); */
 
	/* For IE6 */
	if (jQuery.browser.msie && /MSIE 6\.0/i.test(window.navigator.userAgent) && !/MSIE 7\.0/i.test(window.navigator.userAgent) && !/MSIE 8\.0/i.test(window.navigator.userAgent)) {

		/* Max-width for images in IE6 */		
		var centerwidth = jQuery("td#middle").width(); 
		
		/* Images without caption */
		jQuery(".post img").each(function() { 
			var maxwidth = centerwidth - 10 + 'px';
			var imgwidth = jQuery(this).width(); 
			var imgheight = jQuery(this).height(); 
			var newimgheight = (centerwidth / imgwidth * imgheight) + 'px';	
			if (imgwidth > centerwidth) { 
				jQuery(this).css({width: maxwidth}); 
				jQuery(this).css({height: newimgheight}); 
			}
		});
		
		/* Images with caption */
		jQuery("div.wp-caption").each(function() { 
			var captionwidth = jQuery(this).width(); 
			var maxcaptionwidth = centerwidth + 'px';
			var captionheight = jQuery(this).height();
			var captionimgwidth =  jQuery("div.wp-caption img").width();
			var captionimgheight =  jQuery("div.wp-caption img").height();
			if (captionwidth > centerwidth) { 
				jQuery(this).css({width: maxcaptionwidth}); 
				var newcaptionheight = (centerwidth / captionwidth * captionheight) + 'px';
				var newcaptionimgheight = (centerwidth / captionimgwidth * captionimgheight) + 'px';
				jQuery(this).css({height: newcaptionheight}); 
				jQuery("div.wp-caption img").css({height: newcaptionimgheight}); 
				}
		});
		
		/* sfhover for LI:HOVER support in IE6: */
		jQuery("ul li").
			hover( function() {
					jQuery(this).addClass("sfhover")
				}, 
				function() {
					jQuery(this).removeClass("sfhover")
				} 
			); 

	/* End IE6 */
	}
	
	jQuery(".post table tr").
		mouseover(function() {
			jQuery(this).addClass("over");
		}).
		mouseout(function() {
			jQuery(this).removeClass("over");
		});

	
	jQuery(".post table tr:even").
		addClass("alt");

	
	jQuery("input.text, input.TextField, input.file, input.password, textarea").
		focus(function () {  
			jQuery(this).addClass("highlight"); 
		}).
		blur(function () { 
			jQuery(this).removeClass("highlight"); 
		})
	
	jQuery("input.inputblur").
		focus(function () {  
			jQuery(this).addClass("inputfocus"); 
		}).
		blur(function () { 
			jQuery(this).removeClass("inputfocus"); 
		})

		

	
	jQuery("input.button, input.Button").
		mouseover(function() {
			jQuery(this).addClass("buttonhover");
		}).
		mouseout(function() {
			jQuery(this).removeClass("buttonhover");
		});

	/* toggle "you can use these xhtml tags" */
	jQuery("a.xhtmltags").
		click(function(){ 
			jQuery("div.xhtml-tags").slideToggle(300); 
		});

	/* For the Tabbed Widgets plugin: */
	jQuery("ul.tw-nav-list").
		addClass("clearfix");

		
	
});

//]]>
</script>
<meta id="syntaxhighlighteranchor" name="syntaxhighlighter-version" content="3.1.3" />
<!-- Google Analytics Tracking by Google Analyticator 6.2: http://ronaldheft.com/code/analyticator/ -->
<script type="text/javascript">
	var analyticsFileTypes = [''];
	var analyticsEventTracking = 'enabled';
</script>
<script type="text/javascript">
	var _gaq = _gaq || [];
	_gaq.push(['_setAccount', 'UA-2173612-1']);
	_gaq.push(['_trackPageview']);
	_gaq.push(['_trackPageLoadTime']);

	(function() {
		var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true;
		ga.src = ('https:' == document.location.protocol ? '../../../https@ssl_2f\default.htm' : '../../../www/default.htm') + '.google-analytics.com/ga.js';
		var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s);
	})();
</script>
<!--[if IE 6]>
<script type="text/javascript" src="../../blog/wp-content/themes/atahualpa353/js/dd_roundies.js"></script>
<script type="text/javascript">DD_roundies.addRule('a.posts-icon,%20a.comments-icon,%20a.email-icon,%20img.logo');</script>
<![endif]-->
</head>
<body class="single single-post postid-151 single-format-standard">
<div id="wrapper">
<div id="container">
<table id="layout" border="0" cellspacing="0" cellpadding="0">
<colgroup>
<col class="colone" /><col class="coltwo" />
<col class="colthree" /></colgroup> 
	<tr>

		<!-- Header -->
		<td id="header" colspan="3">

		<div id="imagecontainer" class="header-image-container" style="background: url('../../blog/wp-content/themes/atahualpa353/images/header/learncppheader3_800.jpg') top center no-repeat;"><div class="clickable"><a class="divclick" title="Learn C++" href ="../../default.htm">&nbsp;</a></div></div>
		</td>
		<!-- / Header -->

	</tr>

	<!-- Main Body -->	
	<tr id="bodyrow">

				<!-- Left Sidebar -->
		<td id="left">

			<div id="text-5" class="widget widget_text"><div class="widget-title"><h3>Navigation</h3></div>			<div class="textwidget"><ul>
<li><a href="../../default.htm"><big><big>Main Page</big></big></a>
<li><a href="
../../featured-articles/default.htm"><big><big>Featured Articles</big></big></a>
</ul>
<hr>
<ul>
<li><a href="../../about/default.htm">About / Contact</a>
<li><a href="../../about/#Support">Support LearnCpp</a>
</ul>
<hr>

<!-- SiteSearch Google -->
<form method="get" action="http://www.google.com/custom" target="google_window">
<table border="0" bgcolor="#ffffff">
<tr><td nowrap="nowrap" valign="top" align="left">

<!--<br/>-->
<input type="hidden" name="domains" value="LearnCpp.com"></input>
<label for="sbi" style="display: none">Enter your search terms</label>
<input type="text" name="q" size="20" maxlength="255" value="" id="sbi"></input>
</td></tr>
<tr>
<td nowrap="nowrap">
<table>
<tr>
<td>
<input type="radio" name="sitesearch" value="" checked id="ss0"></input>
<label for="ss0" title="Search the Web"><font size="-1" color="#000000">Web</font></label></td>
<td>
<input type="radio" name="sitesearch" value="www.LearnCpp.com" id="ss1"></input>
<label for="ss1" title="Search LearnCpp.com"><font size="-1" color="#000000">LearnCpp</font></label></td>
</tr>
</table>
<label for="sbb" style="display: none">Submit search form</label>
<input type="submit" name="sa" value="Google Search" id="sbb"></input>
<input type="hidden" name="client" value="pub-0588844875925051"></input>
<input type="hidden" name="forid" value="1"></input>
<input type="hidden" name="channel" value="7774154974"></input>
<input type="hidden" name="ie" value="ISO-8859-1"></input>
<input type="hidden" name="oe" value="ISO-8859-1"></input>
<input type="hidden" name="safe" value="active"></input>
<input type="hidden" name="flav" value="0000"></input>
<input type="hidden" name="sig" value="q6fLrjobHHgL00cW"></input>
<input type="hidden" name="cof" value="GALT:#008000;GL:1;DIV:#336699;VLC:663399;AH:center;BGC:FFFFFF;LBGC:336699;ALC:0000FF;LC:0000FF;T:000000;GFNT:0000FF;GIMP:0000FF;FORID:1"></input>
<input type="hidden" name="hl" value="en"></input>
</td></tr></table>
</form>
<!-- SiteSearch Google --></div>
		</div><div id="meta-2" class="widget widget_meta"><div class="widget-title"><h3>Meta</h3></div>			<ul>
			<li><a href="../../blog/wp-login.php@action=register.htm">Register</a></li>			<li><a href="../../blog/wp-login.php.htm">Log in</a></li>
			<li><a href="../../feed/default.htm" title="Syndicate this site using RSS 2.0">Entries <abbr title="Really Simple Syndication">RSS</abbr></a></li>
			<li><a href="../../comments/feed/default.htm" title="The latest comments to all posts in RSS">Comments <abbr title="Really Simple Syndication">RSS</abbr></a></li>
			<li><a href="../../../wordpress.org/default.htm" title="Powered by WordPress, state-of-the-art semantic personal publishing platform.">WordPress.org</a></li>
						</ul>
</div>		<div id="recent-posts-2" class="widget widget_recent_entries">		<div class="widget-title"><h3>Recent Posts</h3></div>		<ul>
				<li><a href="../b-6-new-virtual-function-controls-override-final-default-and-delete/default.htm" title="B.6 &#8212; New virtual function controls: override, final, default, and delete">B.6 &#8212; New virtual function controls: override, final, default, and delete</a></li>
				<li><a href="../b-5-delegating-constructors/default.htm" title="B.5 &#8212; Delegating constructors">B.5 &#8212; Delegating constructors</a></li>
				<li><a href="../b-4-initializer-lists-and-uniform-initialization/default.htm" title="B.4 &#8212; Initializer lists and uniform initialization">B.4 &#8212; Initializer lists and uniform initialization</a></li>
				<li><a href="../b-3-range-based-for-statements-and-static_assert/default.htm" title="B.3 &#8212; Range-based for statements and static_assert">B.3 &#8212; Range-based for statements and static_assert</a></li>
				<li><a href="../b-2-long-long-auto-decltype-nullptr-and-enum-classes/default.htm" title="B.2 &#8212; Long long, auto, decltype, nullptr, and enum classes">B.2 &#8212; Long long, auto, decltype, nullptr, and enum classes</a></li>
				<li><a href="../b-1-introduction-to-c11/default.htm" title="B.1 &#8212; Introduction to C++11">B.1 &#8212; Introduction to C++11</a></li>
				<li><a href="../a-6-fixed-width-integers/default.htm" title="A.6 &#8212; Fixed-width integers">A.6 &#8212; Fixed-width integers</a></li>
				<li><a href="../../site-news/site-software-updated-1123/default.htm" title="Site software updated 11/23">Site software updated 11/23</a></li>
				<li><a href="../../site-news/this-is-why-we-cant-have-nice-things-part-2/default.htm" title="This is why we can&#8217;t have nice things, part 2">This is why we can&#8217;t have nice things, part 2</a></li>
				<li><a href="../../site-news/this-is-why-we-cant-have-nice-things/default.htm" title="This is why we can&#8217;t have nice things">This is why we can&#8217;t have nice things</a></li>
				</ul>
		</div><div id="categories-1" class="widget widget_categories"><div class="widget-title"><h3>Category Indexes</h3></div>		<ul>
	<li class="cat-item cat-item-11"><a href="../../category/breaktime/default.htm" title="Games and fun activities">Break Time</a> (3)
</li>
	<li class="cat-item cat-item-6"><a href="../../category/cpp-programming/default.htm" title="View all posts filed under C++ Programming">C++ Programming</a> (11)
</li>
	<li class="cat-item cat-item-3"><a href="../../category/cpp-tutorial/default.htm" title="View all posts filed under C++ Tutorial">C++ Tutorial</a> (163)
</li>
	<li class="cat-item cat-item-10"><a href="../../category/computer-game-programming/default.htm" title="View all posts filed under Game Programming">Game Programming</a> (4)
</li>
	<li class="cat-item cat-item-14"><a href="../../category/gaming/default.htm" title="View all posts filed under Gaming">Gaming</a> (1)
</li>
	<li class="cat-item cat-item-13"><a href="../../category/general-programming/default.htm" title="View all posts filed under General Programming">General Programming</a> (3)
</li>
	<li class="cat-item cat-item-4"><a href="../../category/site-news/default.htm" title="View all posts filed under Site News">Site News</a> (23)
</li>
	<li class="cat-item cat-item-5"><a href="../../category/wordpress/default.htm" title="View all posts filed under WordPress">WordPress</a> (8)
</li>
		</ul>
</div>
		</td>
		<!-- / Left Sidebar -->
		
				

		<!-- Main Column -->
		<td id="middle">

	

		
		 

		<div class="clearfix navigation-top">
		<div class="older">&laquo; <a href="../911-the-copy-constructor-and-overloading-the-assignment-operator/default.htm" rel="prev">9.11 &#8212; The copy constructor and overloading the assignment operator</a> &nbsp;</div><div class="newer">&nbsp; <a href="../101-constructor-initialization-lists/default.htm" rel="next">10.1 &#8212; Constructor initialization lists</a> &raquo;</div></div>
<div class="post-151 post type-post status-publish format-standard hentry category-cpp-tutorial" id="post-151">


<div class="post-headline">		<h1>9.12 &#8212; Shallow vs. deep copying</h1>
		</div>
<div class="post-byline">By Alex, on November 9th, 2007</div>
<div class="post-bodycopy clearfix"><div style='float:left;padding:8px 8px 8px 0px;'><script type="text/javascript"><!--
google_ad_client = "ca-pub-0588844875925051";
/* Content Page Top Large */
google_ad_slot = "7945645163";
google_ad_width = 336;
google_ad_height = 280;
//-->
</script>
<acript type="text/javascript"
src="../../../pagead2.googlesyndication.com/pagead/show_ads.js">
</script></div><p>In the previous lesson on <a href="../911-the-copy-constructor-and-overloading-the-assignment-operator/default.htm">The copy constructor and overloading the assignment operator</a>, you learned about the differences and similarities of the copy constructor and the assignment operator.  This lesson is a follow-up to that one.</p>
<p><strong>Shallow copying</strong></p>
<p>Because C++ does not know much about your class, the default copy constructor and default assignment operators it provides use a copying method known as a shallow copy (also known as a memberwise copy).  A <strong>shallow copy</strong> means that C++ copies each member of the class individually using the assignment operator.  When classes are simple (eg. do not contain any dynamically allocated memory), this works very well.</p>
<p>For example, let&#8217;s take a look at our Cents class:</p>
<pre class="brush: cpp; title: ; notranslate" title="">
class Cents
{
private:
    int m_nCents;
public:
    Cents(int nCents=0)
    {
        m_nCents = nCents;
    }
};
</pre>
<p>When C++ does a shallow copy of this class, it will copy m_nCents using the standard integer assignment operator.  Since this is exactly what we&#8217;d be doing anyway if we wrote our own copy constructor or overloaded assignment operator, there&#8217;s really no reason to write our own version of these functions!</p>
<p>However, when designing classes that handle dynamically allocated memory, memberwise (shallow) copying can get us in a lot of trouble!  This is because the standard pointer assignment operator just copies the address of the pointer &#8212; it does not allocate any memory or copy the contents being pointed to!</p>
<p>Let&#8217;s take a look at an example of this:</p>
<pre class="brush: cpp; title: ; notranslate" title="">
class MyString
{
private:
    char *m_pchString;
    int m_nLength;

public:
    MyString(char *pchString=&quot;&quot;)
    {
        // Find the length of the string
        // Plus one character for a terminator
        m_nLength = strlen(pchString) + 1;

        // Allocate a buffer equal to this length
        m_pchString= new char[m_nLength];

        // Copy the parameter into our internal buffer
        strncpy(m_pchString, pchString, m_nLength);

        // Make sure the string is terminated
        m_pchString[m_nLength-1] = '\\0';
    }

    ~MyString() // destructor
    {
        // We need to deallocate our buffer
        delete[] m_pchString;

        // Set m_pchString to null just in case
        m_pchString = 0;
    }

    char* GetString() { return m_pchString; }
    int GetLength() { return m_nLength; }
};
</pre>
<p>The above is a simple string class that allocates memory to hold a string that we pass in.  Note that we have not defined a copy constructor or overloaded assignment operator.  Consequently, C++ will provide a default copy constructor and default assignment operator that do a shallow copy.</p>
<p>Now, consider the following snippet of code:</p>
<pre class="brush: cpp; title: ; notranslate" title="">
MyString cHello(&quot;Hello, world!&quot;);

{
    MyString cCopy = cHello; // use default copy constructor
} // cCopy goes out of scope here

std::cout &lt;&lt; cHello.GetString() &lt;&lt; std::endl; // this will crash
</pre>
<p>While this code looks harmless enough, it contains an insidious problem that will cause the program to crash!  Can you spot it?  Don&#8217;t worry if you can&#8217;t, it&#8217;s rather subtle.</p>
<p>Let&#8217;s break down this example line by line:</p>
<pre class="brush: cpp; title: ; notranslate" title="">
MyString cHello(&quot;Hello, world!&quot;);
</pre>
<p>This line is harmless enough.  This calls the MyString constructor, which allocates some memory, sets cHello.m_pchString to point to it, and then copies the string &#8220;Hello, world!&#8221; into it.</p>
<pre class="brush: cpp; title: ; notranslate" title="">
    MyString cCopy = cHello; // use default copy constructor
</pre>
<p>This line seems harmless enough as well, but it&#8217;s actually the source of our problem!  When this line is evaluated, C++ will use the default copy constructor (because we haven&#8217;t provided our own), which does a shallow pointer copy on cHello.m_pchString.  Because a shallow pointer copy just copies the address of the pointer, the address of cHello.m_pchString is copied into cCopy.m_pchString.  As a result, cCopy.m_pchString and cHello.m_pchString are now both pointing to the same piece of memory!</p>
<pre class="brush: cpp; title: ; notranslate" title="">
} // cCopy goes out of scope here
</pre>
<p>When cCopy goes out of scope, the MyString destructor is called on cCopy.  The destructor deletes the dynamically allocated memory that both cCopy.m_pchString and cHello.m_pchString are pointing to!  Consequently, by deleting cCopy, we&#8217;ve also (inadvertently) affected cHello.  Note that the destructor will set cCopy.m_pchString to 0, but cHello.m_pchString will be left pointing to the deleted (invalid) memory!</p>
<pre class="brush: cpp; title: ; notranslate" title="">
std::cout &lt;&lt; cHello.GetString() &lt;&lt; std::endl; // this will crash
</pre>
<p>Now you can see why this crashes.  We deleted the string that cHello was pointing to, and now we are trying to print the value of memory that is no longer allocated.</p>
<p>The root of this problem is the shallow copy done by the copy constructor &#8212; doing a shallow copy on pointer values in a copy constructor or overloaded assignment operator is almost always asking for trouble.</p>
<p><strong>Deep copying</strong></p>
<p>The answer to this problem is to do a deep copy on any non-null pointers being copied.  A <strong>deep copy</strong> duplicates the object or variable being pointed to so that the destination (the object being assigned to) receives it&#8217;s own local copy.  This way, the destination can do whatever it wants to it&#8217;s local copy and the object that was copied from will not be affected.  Doing deep copies requires that we write our own copy constructors and overloaded assignment operators.</p>
<p>Let&#8217;s go ahead and show how this is done for our MyString class:</p>
<pre class="brush: cpp; title: ; notranslate" title="">
// Copy constructor
MyString::MyString(const MyString&amp; cSource)
{
    // because m_nLength is not a pointer, we can shallow copy it
    m_nLength = cSource.m_nLength;

    // m_pchString is a pointer, so we need to deep copy it if it is non-null
    if (cSource.m_pchString)
    {
        // allocate memory for our copy
        m_pchString = new char[m_nLength];

        // Copy the string into our newly allocated memory
        strncpy(m_pchString, cSource.m_pchString, m_nLength);
    }
    else
        m_pchString = 0;
}
</pre>
<p>As you can see, this is quite a bit more involved than a simple shallow copy!  First, we have to check to make sure cSource even has a string (line 8).  If it does, then we allocate enough memory to hold a copy of that string (line 11).  Finally, we have to manually copy the string using strncpy() (line 14).</p>
<p>Now let&#8217;s do the overloaded assignment operator.  The overloaded assignment operator is a tad bit trickier:</p>
<pre class="brush: cpp; title: ; notranslate" title="">
// Assignment operator
MyString&amp; MyString::operator=(const MyString&amp; cSource)
{
    // check for self-assignment
    if (this == &amp;cSource)
        return *this;

    // first we need to deallocate any value that this string is holding!
    delete[] m_pchString;

    // because m_nLength is not a pointer, we can shallow copy it
    m_nLength = cSource.m_nLength;

    // now we need to deep copy m_pchString
    if (cSource.m_pchString)
    {
        // allocate memory for our copy
        m_pchString = new char[m_nLength];

        // Copy the parameter the newly allocated memory
        strncpy(m_pchString, cSource.m_pchString, m_nLength);
    }
    else
        m_pchString = 0;

    return *this;
}
</pre>
<p>Note that our assignment operator is very similar to our copy constructor, but there are three major differences:</p>
<ul>
<li> We added a self-assignment check (line 5).
<li> We return *this so we can chain the assignment operator (line 26).
<li> We need to explicitly deallocate any value that the string is already holding (line 9).
</ul>
<p>When the overloaded assignment operator is called, the item being assigned to may already contain a previous value, which we need to make sure we clean up before we assign memory for new values.  For non-dynamically allocated variables (which are a fixed size), we don&#8217;t have to bother because the new value just overwrite the old one.  However, for dynamically allocated variables, we need to explicitly deallocate any old memory before we allocate any new memory.  If we don&#8217;t, the code will not crash, but we will have a memory leak that will eat away our free memory every time we do an assignment!</p>
<p><strong>Checking for self-assignment</strong></p>
<p>In our overloaded assignment operators, the first thing we do is check for self assignment.  There are two reasons for this.  One is simple efficiency: if we don&#8217;t need to make a copy, why make one?  The second reason is because not checking for self-assignment when doing a deep copy will cause problems if the class uses dynamically allocated memory.  Let&#8217;s take a look at an example of this.</p>
<p>Consider the following overloaded assignment operator that does not do a self-assignment check:</p>
<pre class="brush: cpp; title: ; notranslate" title="">
// Problematic assignment operator
MyString&amp; MyString::operator=(const MyString&amp; cSource)
{
    // Note: No check for self-assignment!

    // first we need to deallocate any value that this string is holding!
    delete[] m_pchString;

    // because m_nLength is not a pointer, we can shallow copy it
    m_nLength = cSource.m_nLength;

    // now we need to deep copy m_pchString
    if (cSource.m_pchString)
    {
        // allocate memory for our copy
        m_pchString = new char[m_nLength];

        // Copy the parameter the newly allocated memory
        strncpy(m_pchString, cSource.m_pchString, m_nLength);
    }
    else
        m_pchString = 0;

    return *this;
}
</pre>
<p>What happens when we do the following?</p>
<pre class="brush: cpp; title: ; notranslate" title="">
cHello = cHello;
</pre>
<p>This statement will call our overloaded assignment operator.  The <i>this</i> pointer will point to the address of cHello (because it&#8217;s the left operand), and cSource will be a reference to cHello (because it&#8217;s the right operand).  Consequently, m_pchString is the same as cSource.m_pchString.  </p>
<p>Now look at the first line of code that would be executed: <code>delete[] m_pchString;</code>.  </p>
<p>This line is meant to deallocate any previously allocated memory in cHello so we can copy the new string from the source without a memory leak.  However, in this case, when we delete m_pchString, we also delete cSource.m_pchString!  We&#8217;ve now destroyed our source string, and have lost the information we wanted to copy in the first place.  The rest of the code will allocate a new string, then copy the uninitialized garbage in that string to itself.  As a final result, you will end up with a new string of the correct length that contain garbage characters.</p>
<p>The self-assignment check prevents this from happening.</p>
<p><strong>Preventing copying</strong></p>
<p>Sometimes we simply don&#8217;t want our classes to be copied at all.  The best way to do this is to add the prototypes for the copy constructor and overloaded operator= to the private section of your class.</p>
<pre class="brush: cpp; title: ; notranslate" title="">
class MyString
{
private:
    char *m_pchString;
    int m_nLength;

    MyString(const MyString&amp; cSource);
    MyString&amp; operator=(const MyString&amp; cSource);
public:
    // Rest of code here
};
</pre>
<p>In this case, C++ will not automatically create a default copy constructor and default assignment operator, because we&#8217;ve told the compiler we&#8217;re defining our own functions.  Furthermore, any code located outside the class will not be able to access these functions because they&#8217;re private.</p>
<p><strong>Summary</strong></p>
<ul>
<li>The default copy constructor and default assignment operators do shallow copies, which is fine for classes that contain no dynamically allocated variables.
<li>Classes with dynamically allocated variables need to have a copy constructor and assignment operator that do a deep copy.
<li>The assignment operator is usually implemented using the same code as the copy constructor, but it checks for self-assignment, returns *this, and deallocates any previously allocated memory before deep copying.
<li>If you don&#8217;t want a class to be copyable, use a private copy constructor and assignment operator prototype in the class header.
</ul>
<table border=0 cellpadding=3>
<tr>
<td>
        <a href="../101-constructor-initialization-lists/default.htm" style="text-decoration:none"><img src="../../images/cpptutorial/next.png" align=middle> 10.1 &#8212; Constructor initialization lists</a>
</td>
</tr>
<tr>
<td>
        <a href="../../#Chapter9" style="text-decoration:none"><img src="../../images/cpptutorial/up.png" align=middle> Index</a>
</td>
</tr>
<tr>
<td>
        <a href="../911-the-copy-constructor-and-overloading-the-assignment-operator/default.htm" style="text-decoration:none"><img src="../../images/cpptutorial/prev.png" align=middle> 9.11 &#8212; The copy constructor and overloading the assignment operator</a>
</td>
</tr>
</table>
<div style='padding-top:8px; padding-bottom:8px'><script type="text/javascript"><!--
google_ad_client = "ca-pub-0588844875925051";
/* Content Page Bottom - Medium Rectangle */
google_ad_slot = "2751429778";
google_ad_width = 300;
google_ad_height = 250;
//-->
</script>
<acript type="text/javascript"
src="../../../pagead2.googlesyndication.com/pagead/show_ads.js">
</script>
</div><!-- Powered by Ad Inserter Wordpress Plugin, Author: Igor Funa --></div>

<div class="post-footer"><img src="../../blog/wp-content/themes/atahualpa353/images/icons/folder-gray.gif" alt="" /> <a href="../../category/cpp-tutorial/default.htm" title="View all posts in C++ Tutorial" rel="category tag">C++ Tutorial</a>   | <a href="print/default.htm" title="Print This Post" rel="nofollow"><img class="WP-PrintIcon" src="../../blog/wp-content/plugins/wp-print/images/print.gif" alt="Print This Post" title="Print This Post" style="border: 0px;" /></a>&nbsp;<a href="print/default.htm" title="Print This Post" rel="nofollow">Print This Post</a></div>
</div><!-- / Post -->						
	
	<div class="clearfix navigation-middle">
		<div class="older">&laquo; <a href="../911-the-copy-constructor-and-overloading-the-assignment-operator/default.htm" rel="prev">9.11 &#8212; The copy constructor and overloading the assignment operator</a> &nbsp;</div><div class="newer">&nbsp; <a href="../101-constructor-initialization-lists/default.htm" rel="next">10.1 &#8212; Constructor initialization lists</a> &raquo;</div></div>


	<a name="comments"></a><!-- named anchor for skip links -->
	<h3 id="comments">30 comments to 9.12 &#8212; Shallow vs. deep copying</h3>

	
	<!-- Comment List -->
	<ul class="commentlist">
		
			<li class="comment even thread-even depth-1 clearfix" id="comment-2616">
		<div id="div-comment-2616" class="clearfix comment-container">
		<div class="comment-author vcard">
		<img alt='' src='../../../0.gravatar.com/avatar/e8765a201bced99b7a255fba0a2ac665@s=65&d=http_253a_252f_252f0.gravatar.com_252favatar_252fad516503a11cd5ca435acc9bb6523536_253fs_253d65&r=g' class='avatar avatar-65 photo' height='65' width='65' />		<span class="authorname">sergk</span>
		</div>
				<div class="comment-meta commentmetadata">
		<a href="comment-page-1/#comment-2616">
		November 10, 2007 at 4:22 am</a>
        <span class="comment-reply-link"><a rel="nofollow" class="comment-reply-login" href="../../blog/wp-login.php@redirect_to=http_253a_252f_252fwww.learncpp.com_252fcpp-tutorial_252f912-shallow-vs-deep-copying_252f">Log in to Reply</a></span>		 
		</div>
		<p>I&#8217;d like to note, to avoid problems with inherited classes, one have to make destructor and assignment operators to be virtual.</p>
<p>&#8211; serg.</p>
		</div>
</li>
		<li class="comment odd alt thread-odd thread-alt depth-1 clearfix" id="comment-6921">
		<div id="div-comment-6921" class="clearfix comment-container">
		<div class="comment-author vcard">
		<img alt='' src='../../../0.gravatar.com/avatar/a02e953e5f6741f0f8633c05c2ed4421@s=65&d=http_253a_252f_252f0.gravatar.com_252favatar_252fad516503a11cd5ca435acc9bb6523536_253fs_253d65&r=g' class='avatar avatar-65 photo' height='65' width='65' />		<span class="authorname"><a href='../../../test.com/default.htm' rel='external nofollow' class='url'>test</a></span>
		</div>
				<div class="comment-meta commentmetadata">
		<a href="comment-page-1/#comment-6921">
		January 31, 2008 at 12:06 am</a>
        <span class="comment-reply-link"><a rel="nofollow" class="comment-reply-login" href="../../blog/wp-login.php@redirect_to=http_253a_252f_252fwww.learncpp.com_252fcpp-tutorial_252f912-shallow-vs-deep-copying_252f">Log in to Reply</a></span>		 
		</div>
		<p>&#8220;// Problematic copy constructor&#8221; ==> &#8220;//Problematic assigment operator&#8221;?</p>
<p>[ Fixed!  Thanks.  -Alex ]</p>
		</div>
</li>
		<li class="comment even thread-even depth-1 clearfix" id="comment-7288">
		<div id="div-comment-7288" class="clearfix comment-container">
		<div class="comment-author vcard">
		<img alt='' src='../../../0.gravatar.com/avatar/e69bbbbbc25be0ff13b7dd5f7038f504@s=65&d=http_253a_252f_252f0.gravatar.com_252favatar_252fad516503a11cd5ca435acc9bb6523536_253fs_253d65&r=g' class='avatar avatar-65 photo' height='65' width='65' />		<span class="authorname">Zafer</span>
		</div>
				<div class="comment-meta commentmetadata">
		<a href="comment-page-1/#comment-7288">
		February 5, 2008 at 7:42 am</a>
        <span class="comment-reply-link"><a rel="nofollow" class="comment-reply-login" href="../../blog/wp-login.php@redirect_to=http_253a_252f_252fwww.learncpp.com_252fcpp-tutorial_252f912-shallow-vs-deep-copying_252f">Log in to Reply</a></span>		 
		</div>
		<p>In the last example, when we say delete [] m_pchString, the program is likely to crash because of </p>
<p>if (cSource.m_pchString)</p>
<p>or </p>
<p>strncpy(m_pchString, cSource.m_pchString, m_nLength)?</p>
<p>When we delete a pointer using delete [], does it still contain a valid memory address?</p>
		</div>
<ul class='children'>
		<li class="comment byuser comment-author-Tarindel bypostauthor odd alt depth-2 clearfix" id="comment-7291">
		<div id="div-comment-7291" class="clearfix comment-container bypostauthor">
		<div class="comment-author vcard">
		<img alt='' src='../../../0.gravatar.com/avatar/2bcdbab687c32f64f9208e016cafe4cc@s=65&d=http_253a_252f_252f0.gravatar.com_252favatar_252fad516503a11cd5ca435acc9bb6523536_253fs_253d65&r=g' class='avatar avatar-65 photo' height='65' width='65' />		<span class="authorname"><a href='../../../www.tarindel.com/default.htm' rel='external nofollow' class='url'>Alex</a></span>
		</div>
				<div class="comment-meta commentmetadata">
		<a href="comment-page-1/#comment-7291">
		February 5, 2008 at 8:37 am</a>
        <span class="comment-reply-link"><a rel="nofollow" class="comment-reply-login" href="../../blog/wp-login.php@redirect_to=http_253a_252f_252fwww.learncpp.com_252fcpp-tutorial_252f912-shallow-vs-deep-copying_252f">Log in to Reply</a></span>		 
		</div>
		<p>In the last example, we omitted the check for self-assignment.  This means that if the user does a self-assignment, m_pchString will equal cString.m_pchString.  When we delete m_pchString, we will also delete cString.m_pchString.</p>
<p>When we delete a pointer using delete or delete[], it does not contain a valid memory address any longer.  However, that does not necessarily mean the program will crash if you use the pointer for reading.</p>
<p>Consequently, in the last example, the if statement will succeed because cString.m_pchString is non-zero.  It will then allocate new memory for m_pchString (and cSource.m_pchString).  Then it copies cSource.m_pchString, which is that uninitialized new memory (aka. garbage) into m_pchString, which is itself.</p>
<p>The end result of the self-assignment without the self-assignment check is that you&#8217;ll get a new string of the correct length, but it will be filled with garbage.</p>
		</div>
<ul class='children'>
		<li class="comment even depth-3 clearfix" id="comment-7294">
		<div id="div-comment-7294" class="clearfix comment-container">
		<div class="comment-author vcard">
		<img alt='' src='../../../0.gravatar.com/avatar/e69bbbbbc25be0ff13b7dd5f7038f504@s=65&d=http_253a_252f_252f0.gravatar.com_252favatar_252fad516503a11cd5ca435acc9bb6523536_253fs_253d65&r=g' class='avatar avatar-65 photo' height='65' width='65' />		<span class="authorname">Zafer</span>
		</div>
				<div class="comment-meta commentmetadata">
		<a href="comment-page-1/#comment-7294">
		February 5, 2008 at 9:15 am</a>
        <span class="comment-reply-link"><a rel="nofollow" class="comment-reply-login" href="../../blog/wp-login.php@redirect_to=http_253a_252f_252fwww.learncpp.com_252fcpp-tutorial_252f912-shallow-vs-deep-copying_252f">Log in to Reply</a></span>		 
		</div>
		<p>In that case how can the program crash? Also, it&#8217;s still counterintuitive for a pointer not to contain a valid memory address but point to some garbage region and be copiable.</p>
		</div>
<ul class='children'>
		<li class="comment byuser comment-author-Tarindel bypostauthor odd alt depth-4 clearfix" id="comment-7299">
		<div id="div-comment-7299" class="clearfix comment-container bypostauthor">
		<div class="comment-author vcard">
		<img alt='' src='../../../0.gravatar.com/avatar/2bcdbab687c32f64f9208e016cafe4cc@s=65&d=http_253a_252f_252f0.gravatar.com_252favatar_252fad516503a11cd5ca435acc9bb6523536_253fs_253d65&r=g' class='avatar avatar-65 photo' height='65' width='65' />		<span class="authorname"><a href='../../../www.tarindel.com/default.htm' rel='external nofollow' class='url'>Alex</a></span>
		</div>
				<div class="comment-meta commentmetadata">
		<a href="comment-page-1/#comment-7299">
		February 5, 2008 at 10:18 am</a>
        <span class="comment-reply-link"><a rel="nofollow" class="comment-reply-login" href="../../blog/wp-login.php@redirect_to=http_253a_252f_252fwww.learncpp.com_252fcpp-tutorial_252f912-shallow-vs-deep-copying_252f">Log in to Reply</a></span>		 
		</div>
		<p>The way the above code without the self-assignment check is written, the program won&#8217;t crash (it just produces an unexpectedly incorrect result, which in some ways can be worse).  I changed the wording of the text to be more accurate in that regard.  However, any time you are dealing with a pointer to unallocated memory, you are &#8220;living on the edge&#8221; so to speak and are just begging for a crash, corrupted memory, or some other bit of nastiness to happen.</p>
<p>I should be slightly more clear about my terminology &#8212; when I said &#8220;valid memory address&#8221; in the above comment, I really meant &#8220;allocated memory address&#8221;.  Also, to be a bit more clear, accessing an unassigned bit of memory won&#8217;t necessarily cause a crash.  It may or it may not, depending on where the piece of memory is and whether the operating system has protected that memory.  Windows, for example, prevents programs from reading and writing to certain memory addresses in order to prevent malicious code from overwriting parts of the operating system.  If you try to do that, you will get an access violation.</p>
<p>For example, consider the following program:</p>
<pre>
// Assign some memory to pnValue
int *pnValue = new int;
// Write a value into that memory.  This is fine
*pnValue = 6;
// Delete the memory
delete pnValue;

// The following is not a good idea, but it probably
// won't crash
cout < < *pnValue;

// Now, let's set the pointer to a protected address
pnValue = (int*)0xFFFFFFFF;

// This will definitely crash
cout << *pnValue;
</pre>
</pre>
		</div>
</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
		<li class="comment even thread-odd thread-alt depth-1 clearfix" id="comment-11147">
		<div id="div-comment-11147" class="clearfix comment-container">
		<div class="comment-author vcard">
		<img alt='' src='../../../0.gravatar.com/avatar/610e617df852214cfe41e0914a4112a5@s=65&d=http_253a_252f_252f0.gravatar.com_252favatar_252fad516503a11cd5ca435acc9bb6523536_253fs_253d65&r=g' class='avatar avatar-65 photo' height='65' width='65' />		<span class="authorname">Tom</span>
		</div>
				<div class="comment-meta commentmetadata">
		<a href="comment-page-1/#comment-11147">
		April 7, 2008 at 7:26 am</a>
        <span class="comment-reply-link"><a rel="nofollow" class="comment-reply-login" href="../../blog/wp-login.php@redirect_to=http_253a_252f_252fwww.learncpp.com_252fcpp-tutorial_252f912-shallow-vs-deep-copying_252f">Log in to Reply</a></span>		 
		</div>
		<p>Hello Alex -</p>
<p>In the code box after the paragraph that begins with the sentence &#8220;Now letâ€™s do the overloaded assignment operator.&#8221;, I think line 1 of the code should be:</p>
<pre>

01. // Assignment operator
</pre>
<p>Not:</p>
<pre>
01. // Copy constructor
</pre>
<p>Thanks.</p>
<p>[ Good eye.  Fixed!  Thanks.  -Alex ]</p>
		</div>
</li>
		<li class="pingback odd alt thread-even depth-1 clearfix" id="comment-14412">
		<div id="div-comment-14412" class="clearfix comment-container">
		<div class="comment-author vcard">
				<span class="authorname"><a href='../911-the-copy-constructor-and-overloading-the-assignment-operator/default.htm' rel='external nofollow' class='url'>Learn C++ - &raquo; 9.11 &#8212; The copy constructor and overloading the assignment operator</a></span>
		</div>
				<div class="comment-meta commentmetadata">
		<a href="comment-page-1/#comment-14412">
		May 4, 2008 at 6:11 pm</a>
        <span class="comment-reply-link"><a rel="nofollow" class="comment-reply-login" href="../../blog/wp-login.php@redirect_to=http_253a_252f_252fwww.learncpp.com_252fcpp-tutorial_252f912-shallow-vs-deep-copying_252f">Log in to Reply</a></span>		 
		</div>
		<p>[...] 2007      Prev/Next Posts   &laquo; 9.10 &#8212; Overloading typecasts | Home | 9.12 &#8212; Shallow vs. deep copying &raquo;     Sunday, November 4th, 2007 at 8:52 [...]</p>
		</div>
</li>
		<li class="comment even thread-odd thread-alt depth-1 clearfix" id="comment-27073">
		<div id="div-comment-27073" class="clearfix comment-container">
		<div class="comment-author vcard">
		<img alt='' src='../../../1.gravatar.com/avatar/dda3ec6d5168ba9ba89a845dcc1f8139@s=65&d=http_253a_252f_252f1.gravatar.com_252favatar_252fad516503a11cd5ca435acc9bb6523536_253fs_253d65&r=g' class='avatar avatar-65 photo' height='65' width='65' />		<span class="authorname">Mark</span>
		</div>
				<div class="comment-meta commentmetadata">
		<a href="comment-page-1/#comment-27073">
		September 11, 2008 at 1:24 pm</a>
        <span class="comment-reply-link"><a rel="nofollow" class="comment-reply-login" href="../../blog/wp-login.php@redirect_to=http_253a_252f_252fwww.learncpp.com_252fcpp-tutorial_252f912-shallow-vs-deep-copying_252f">Log in to Reply</a></span>		 
		</div>
		<p>Hello Alex:<br />
Really like this tutorial. Just tried your example here and found some<br />
speling errors: Mystring should be MyString with upper S.  Thanks.</p>
<p>[ Fixed.  Thanks.  -Alex ]</p>
		</div>
</li>
		<li class="comment odd alt thread-even depth-1 clearfix" id="comment-27664">
		<div id="div-comment-27664" class="clearfix comment-container">
		<div class="comment-author vcard">
		<img alt='' src='../../../0.gravatar.com/avatar/26a804036b8ab921a5ba422364bd2055@s=65&d=http_253a_252f_252f0.gravatar.com_252favatar_252fad516503a11cd5ca435acc9bb6523536_253fs_253d65&r=g' class='avatar avatar-65 photo' height='65' width='65' />		<span class="authorname">davidv</span>
		</div>
				<div class="comment-meta commentmetadata">
		<a href="comment-page-1/#comment-27664">
		September 16, 2008 at 6:34 pm</a>
        <span class="comment-reply-link"><a rel="nofollow" class="comment-reply-login" href="../../blog/wp-login.php@redirect_to=http_253a_252f_252fwww.learncpp.com_252fcpp-tutorial_252f912-shallow-vs-deep-copying_252f">Log in to Reply</a></span>		 
		</div>
		<p>Here&#8217;s a silly question.<br />
If we add the prototypes for the copy constructor and overloaded operator= to the private section of the class in order to prevent copying, do we actually need to write them down later, given that we&#8217;re not really planning to use them?<br />
Thanks.</p>
		</div>
<ul class='children'>
		<li class="comment byuser comment-author-Tarindel bypostauthor even depth-2 clearfix" id="comment-28041">
		<div id="div-comment-28041" class="clearfix comment-container bypostauthor">
		<div class="comment-author vcard">
		<img alt='' src='../../../0.gravatar.com/avatar/2bcdbab687c32f64f9208e016cafe4cc@s=65&d=http_253a_252f_252f0.gravatar.com_252favatar_252fad516503a11cd5ca435acc9bb6523536_253fs_253d65&r=g' class='avatar avatar-65 photo' height='65' width='65' />		<span class="authorname"><a href='../../../www.tarindel.com/default.htm' rel='external nofollow' class='url'>Alex</a></span>
		</div>
				<div class="comment-meta commentmetadata">
		<a href="comment-page-1/#comment-28041">
		September 21, 2008 at 9:18 am</a>
        <span class="comment-reply-link"><a rel="nofollow" class="comment-reply-login" href="../../blog/wp-login.php@redirect_to=http_253a_252f_252fwww.learncpp.com_252fcpp-tutorial_252f912-shallow-vs-deep-copying_252f">Log in to Reply</a></span>		 
		</div>
		<p>By write them down, I presume you mean implement them.  The answer is no, as long as you don&#8217;t call them.  Don&#8217;t forget that private members can still be called by other members of the class, so you&#8217;ll have to ensure you don&#8217;t use them internally within the class.  If you try to do so, you&#8217;ll get a linker error.</p>
		</div>
<ul class='children'>
		<li class="comment odd alt depth-3 clearfix" id="comment-35729">
		<div id="div-comment-35729" class="clearfix comment-container">
		<div class="comment-author vcard">
		<img alt='' src='../../../0.gravatar.com/avatar/ef9443c1cffc0bc54f3cd080bad7427b@s=65&d=http_253a_252f_252f0.gravatar.com_252favatar_252fad516503a11cd5ca435acc9bb6523536_253fs_253d65&r=g' class='avatar avatar-65 photo' height='65' width='65' />		<span class="authorname">kudleep</span>
		</div>
				<div class="comment-meta commentmetadata">
		<a href="comment-page-1/#comment-35729">
		December 26, 2008 at 7:51 pm</a>
        <span class="comment-reply-link"><a rel="nofollow" class="comment-reply-login" href="../../blog/wp-login.php@redirect_to=http_253a_252f_252fwww.learncpp.com_252fcpp-tutorial_252f912-shallow-vs-deep-copying_252f">Log in to Reply</a></span>		 
		</div>
		<p>Hi Alex,</p>
<p>can you give an example , how and in which case , one would need  to use copy constructor from other class such as derived one ! The statement  &#8211; &#8220;Sometimes we simply don’t want our classes to be copied at all.&#8221; , can you please explain a bit, what i understood is we don&#8217;t want compiler to provide a default copy constructor for our program.</p>
		</div>
<ul class='children'>
		<li class="comment byuser comment-author-Tarindel bypostauthor even depth-4 clearfix" id="comment-35923">
		<div id="div-comment-35923" class="clearfix comment-container bypostauthor">
		<div class="comment-author vcard">
		<img alt='' src='../../../0.gravatar.com/avatar/2bcdbab687c32f64f9208e016cafe4cc@s=65&d=http_253a_252f_252f0.gravatar.com_252favatar_252fad516503a11cd5ca435acc9bb6523536_253fs_253d65&r=g' class='avatar avatar-65 photo' height='65' width='65' />		<span class="authorname"><a href='../../../www.tarindel.com/default.htm' rel='external nofollow' class='url'>Alex</a></span>
		</div>
				<div class="comment-meta commentmetadata">
		<a href="comment-page-1/#comment-35923">
		December 29, 2008 at 8:54 pm</a>
        <span class="comment-reply-link"><a rel="nofollow" class="comment-reply-login" href="../../blog/wp-login.php@redirect_to=http_253a_252f_252fwww.learncpp.com_252fcpp-tutorial_252f912-shallow-vs-deep-copying_252f">Log in to Reply</a></span>		 
		</div>
		<p>I&#8217;m not sure what you mean by using copy constructors from other classes.  The copy constructor is used to instantiate an object of a particular class, so the copy constructor for that class should always be used.</p>
<p>As for not wanting your classes to be copied, sometimes there are legitimate reasons for this &#8212; eg. doing an assignment would be too expensive, or you simply don&#8217;t have time to implement a deep copy and want to prevent people from accidentally using the shallow copy provided by the default copy constructor and default assignment operator the compiler provides for all classes.  By making these private, we tell the compiler not to create default versions, thus circumventing the issue.</p>
		</div>
<ul class='children'>
		<li class="comment byuser comment-author-rajeshperumal odd alt depth-5 clearfix" id="comment-95162">
		<div id="div-comment-95162" class="clearfix comment-container">
		<div class="comment-author vcard">
		<img alt='' src='../../../0.gravatar.com/avatar/c8a0c0fc3aa2182c46210e0257253dac@s=65&d=http_253a_252f_252f0.gravatar.com_252favatar_252fad516503a11cd5ca435acc9bb6523536_253fs_253d65&r=g' class='avatar avatar-65 photo' height='65' width='65' />		<span class="authorname">cooltoad</span>
		</div>
				<div class="comment-meta commentmetadata">
		<a href="comment-page-1/#comment-95162">
		February 7, 2011 at 6:14 pm</a>
        <span class="comment-reply-link"><a rel="nofollow" class="comment-reply-login" href="../../blog/wp-login.php@redirect_to=http_253a_252f_252fwww.learncpp.com_252fcpp-tutorial_252f912-shallow-vs-deep-copying_252f">Log in to Reply</a></span>		 
		</div>
		<p>I kinda understand why kudleep got confused. It is actually copying objects not classes.</p>
<p>Kuldeep: In a singleton class (only one stance is allowed), the copy constructor is private(hidden) so that a duplicate instance is not created.</p>
<p>eg.<br />
main.cpp<br />
&#8212;&#8212;&#8211;<br />
Singleton obj1 = Singleton();<br />
Singleton duplicate_obj(obj1); // If you hide the copy constructor this will be caught at compilation.</p>
		</div>
</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
		<li class="comment even thread-odd thread-alt depth-1 clearfix" id="comment-31651">
		<div id="div-comment-31651" class="clearfix comment-container">
		<div class="comment-author vcard">
		<img alt='' src='../../../0.gravatar.com/avatar/23490d73ae5456568478541137e2a812@s=65&d=http_253a_252f_252f0.gravatar.com_252favatar_252fad516503a11cd5ca435acc9bb6523536_253fs_253d65&r=g' class='avatar avatar-65 photo' height='65' width='65' />		<span class="authorname">som shekhar</span>
		</div>
				<div class="comment-meta commentmetadata">
		<a href="comment-page-1/#comment-31651">
		November 5, 2008 at 3:16 am</a>
        <span class="comment-reply-link"><a rel="nofollow" class="comment-reply-login" href="../../blog/wp-login.php@redirect_to=http_253a_252f_252fwww.learncpp.com_252fcpp-tutorial_252f912-shallow-vs-deep-copying_252f">Log in to Reply</a></span>		 
		</div>
		<p>in the first example for deep copying , while using strncpy the m_nlength<br />
should be m_nlength+1..(line num 15)</p>
<pre>

// Assignment operator
MyString&amp; MyString::operator=(const MyString&amp; cSource)
{
    // check for self-assignment
    if (this == &amp;cSource)
        return *this;

    // first we need to deallocate any value that this string is holding!
    delete[] m_pchString;

    // because m_nLength is not a pointer, we can shallow copy it
    m_nLength = cSource.m_nLength;

    // now we need to deep copy m_pchString
    if (cSource.m_pchString)
    {
        // allocate memory for our copy
        m_pchString = new char[m_nLength];

        // Copy the parameter the newly allocated memory
        strncpy(m_pchString, cSource.m_pchString, m_nLength + 1);
    }
    else
        m_pchString = 0;

    return *this;
}
</pre>
		</div>
</li>
		<li class="comment odd alt thread-even depth-1 clearfix" id="comment-35728">
		<div id="div-comment-35728" class="clearfix comment-container">
		<div class="comment-author vcard">
		<img alt='' src='../../../0.gravatar.com/avatar/ef9443c1cffc0bc54f3cd080bad7427b@s=65&d=http_253a_252f_252f0.gravatar.com_252favatar_252fad516503a11cd5ca435acc9bb6523536_253fs_253d65&r=g' class='avatar avatar-65 photo' height='65' width='65' />		<span class="authorname">kuldeep</span>
		</div>
				<div class="comment-meta commentmetadata">
		<a href="comment-page-1/#comment-35728">
		December 26, 2008 at 7:39 pm</a>
        <span class="comment-reply-link"><a rel="nofollow" class="comment-reply-login" href="../../blog/wp-login.php@redirect_to=http_253a_252f_252fwww.learncpp.com_252fcpp-tutorial_252f912-shallow-vs-deep-copying_252f">Log in to Reply</a></span>		 
		</div>
		<p>Hi Alex,</p>
<p>This tutorial was really helpful, I&#8217;ve one doubt, is it necessary to have assignment operator ,if  copy constructor is already present, if we are sure that we are not using any assignment ( only instantiating  the new object from existing one, in this case only copy constructor is enough rt ? ), do we still need to overload assignment operator ?</p>
		</div>
<ul class='children'>
		<li class="comment byuser comment-author-Tarindel bypostauthor even depth-2 clearfix" id="comment-35922">
		<div id="div-comment-35922" class="clearfix comment-container bypostauthor">
		<div class="comment-author vcard">
		<img alt='' src='../../../0.gravatar.com/avatar/2bcdbab687c32f64f9208e016cafe4cc@s=65&d=http_253a_252f_252f0.gravatar.com_252favatar_252fad516503a11cd5ca435acc9bb6523536_253fs_253d65&r=g' class='avatar avatar-65 photo' height='65' width='65' />		<span class="authorname"><a href='../../../www.tarindel.com/default.htm' rel='external nofollow' class='url'>Alex</a></span>
		</div>
				<div class="comment-meta commentmetadata">
		<a href="comment-page-1/#comment-35922">
		December 29, 2008 at 8:44 pm</a>
        <span class="comment-reply-link"><a rel="nofollow" class="comment-reply-login" href="../../blog/wp-login.php@redirect_to=http_253a_252f_252fwww.learncpp.com_252fcpp-tutorial_252f912-shallow-vs-deep-copying_252f">Log in to Reply</a></span>		 
		</div>
		<p>No, it&#8217;s not required to have an assignment operator (if you don&#8217;t create one, the compiler will create one for you and it will do a shallow copy).  However, this is generally a bad idea because when you look at your code in 3 months you&#8217;re likely to forget you didn&#8217;t overload the assignment operator and then when you try and use it, you won&#8217;t get the results you expect.</p>
		</div>
</li>
</ul>
</li>
		<li class="comment odd alt thread-odd thread-alt depth-1 clearfix" id="comment-56966">
		<div id="div-comment-56966" class="clearfix comment-container">
		<div class="comment-author vcard">
		<img alt='' src='../../../0.gravatar.com/avatar/0183daeccdd0487da019c5177a5ec7e1@s=65&d=http_253a_252f_252f0.gravatar.com_252favatar_252fad516503a11cd5ca435acc9bb6523536_253fs_253d65&r=g' class='avatar avatar-65 photo' height='65' width='65' />		<span class="authorname">Joris</span>
		</div>
				<div class="comment-meta commentmetadata">
		<a href="comment-page-1/#comment-56966">
		April 9, 2009 at 11:39 am</a>
        <span class="comment-reply-link"><a rel="nofollow" class="comment-reply-login" href="../../blog/wp-login.php@redirect_to=http_253a_252f_252fwww.learncpp.com_252fcpp-tutorial_252f912-shallow-vs-deep-copying_252f">Log in to Reply</a></span>		 
		</div>
		<p>Can you explain how self-assignments can show up in realistic code? Could they be auto-generated somehow?</p>
<p>I feel maybe an assert should be appropriate if it is a real issue to get rid of them :-/</p>
		</div>
<ul class='children'>
		<li class="comment byuser comment-author-Tarindel bypostauthor even depth-2 clearfix" id="comment-59755">
		<div id="div-comment-59755" class="clearfix comment-container bypostauthor">
		<div class="comment-author vcard">
		<img alt='' src='../../../0.gravatar.com/avatar/2bcdbab687c32f64f9208e016cafe4cc@s=65&d=http_253a_252f_252f0.gravatar.com_252favatar_252fad516503a11cd5ca435acc9bb6523536_253fs_253d65&r=g' class='avatar avatar-65 photo' height='65' width='65' />		<span class="authorname"><a href='../../../www.tarindel.com/default.htm' rel='external nofollow' class='url'>Alex</a></span>
		</div>
				<div class="comment-meta commentmetadata">
		<a href="comment-page-1/#comment-59755">
		May 1, 2009 at 9:04 pm</a>
        <span class="comment-reply-link"><a rel="nofollow" class="comment-reply-login" href="../../blog/wp-login.php@redirect_to=http_253a_252f_252fwww.learncpp.com_252fcpp-tutorial_252f912-shallow-vs-deep-copying_252f">Log in to Reply</a></span>		 
		</div>
		<p>Self-assignments aren&#8217;t common (particularly in string classes) but it is possible to inadvertently get them in other cases (I can&#8217;t think of any good examples).</p>
<p>There&#8217;s really no reason for a self-assignment to fail.  The generally-intended end-result of the following statement:</p>
<pre>
a = a;
</pre>
<p>is that &#8220;a&#8221; should equal whatever it did before this statement (unless you overloaded operator= to do something weird, like reference counting).</p>
<p>So we just special-case the self-assignment case and go on with life. :)</p>
		</div>
</li>
</ul>
</li>
		<li class="comment odd alt thread-even depth-1 clearfix" id="comment-66460">
		<div id="div-comment-66460" class="clearfix comment-container">
		<div class="comment-author vcard">
		<img alt='' src='../../../0.gravatar.com/avatar/a07fa97be2555e0554284061e6bb659a@s=65&d=http_253a_252f_252f0.gravatar.com_252favatar_252fad516503a11cd5ca435acc9bb6523536_253fs_253d65&r=g' class='avatar avatar-65 photo' height='65' width='65' />		<span class="authorname">Mario</span>
		</div>
				<div class="comment-meta commentmetadata">
		<a href="comment-page-1/#comment-66460">
		August 17, 2009 at 4:32 am</a>
        <span class="comment-reply-link"><a rel="nofollow" class="comment-reply-login" href="../../blog/wp-login.php@redirect_to=http_253a_252f_252fwww.learncpp.com_252fcpp-tutorial_252f912-shallow-vs-deep-copying_252f">Log in to Reply</a></span>		 
		</div>
		<p>Hi Alex,</p>
<p>I would like to dynamically allocate an array of my own class, which in turn has a member variable witch has to by dinamically allocated. In my concrete case I&#8217;ve got the following problem:<br />
A frame buffer (class FrameBuffer) of arbitrary size should store frames, also of arbitrary size. Once initialized, the size of the frames doesn&#8217;t change. Because I&#8217;d like to store some other informations in one frame buffer entry, I use for every entry of the frame buffer a class called FrameBufferItem.</p>
<p>My problem is now : How could I dynamically allocate memory for an array of my own class, which needs parameters in the standard- and copy-constructor?</p>
<p>Here is my code:</p>
<pre>
#ifndef FRAMEBUFFER_H
#define FRAMEBUFFER_H

#include 

class FrameBufferItem;

class FrameBuffer
{
public:
  FrameBuffer(unsigned int p_uiFrameSize, IppiRect p_imageRect);
  ~FrameBuffer();

private:
  FrameBufferItem *m_cFrameBufferItems;
  unsigned int m_uiFrameSize;
  IppiRect m_imageRect;
  unsigned int m_uiActualFrame;
};

#endif  // FRAMEBUFFER_H
</pre>
<pre>
#include "framebuffer.h"
#include "framebufferitem.h"

FrameBuffer::FrameBuffer(unsigned int p_uiFrameSize, IppiRect p_imageRect)
  : m_uiFrameSize(p_uiFrameSize), m_imageRect(p_imageRect)
{
  // Here I've got a Problem:
  // When compiling with VS2005 I got the Error C2075
  m_cFrameBufferItems = new FrameBufferItem[p_uiFrameSize](m_imageRect);

  // When using the following line, then I got the Error C2512
  // m_cFrameBufferItems = new FrameBufferItem[p_uiFrameSize];
}

FrameBuffer::~FrameBuffer()
{
  delete[] m_cFrameBufferItems;
  m_cFrameBufferItems = 0;
}
</pre>
<pre>
#ifndef FRAMEBUFFERITEM_H
#define FRAMEBUFFERITEM_H

#include
#include 	// for std::memcpy

class FrameBufferItem
{
public:
  /*  when I use the next line, then the error C2512 for the second solution doesn't occure
      but I need a Parameter to allocate the right ammount of memory */
  //FrameBufferItem(){};

  FrameBufferItem(IppiRect imageRect);
  ~FrameBufferItem();
  FrameBufferItem(const FrameBufferItem &amp;cSource);              // Copy constructor
  FrameBufferItem&amp; operator= (const FrameBufferItem &amp; cSource);	// assignement-Operator

  IppiRect m_imageRect;         // Framesize and position
  Ipp8u *m_imageData;           // Dynamically alocated Imagedata

private:
  void copyItem(const FrameBufferItem &amp;cSource);

};

#endif  // FRAMEBUFFERITEM_H
</pre>
<pre>
#include "framebufferitem.h"

FrameBufferItem::FrameBufferItem(IppiRect imageRect)
  : m_imageRect(imageRect)
{
  m_imageData = new Ipp8u[m_imageRect.width*m_imageRect.height];
}

FrameBufferItem::~FrameBufferItem()
{
  delete[] m_imageData;
  m_brightImageData = 0;
}

FrameBufferItem::FrameBufferItem(const FrameBufferItem &amp;cSource)
{
  copyItem(cSource);
}

FrameBufferItem&amp; FrameBufferItem::operator= (const FrameBufferItem &amp;cSource)
{
  // check for self-assignement
  if (this == &amp;cSource)
    return *this;

  // first we need to deallocate any value that this FrameBufferItm is holding!
  delete[] m_imageData;

  // do the copy
  copyItem(cSource);

  // return the existing object
  return *this;
}

void FrameBufferItem::copyItem(const FrameBufferItem &amp;cSource)
{
  m_imageRect = cSource.m_imageRect;

  if( cSource.m_brightImageData )
  {
    // Allocate memory
    m_imageData = new Ipp8u[m_imageRect.width*m_imageRect.height];

    // copy
    memcpy( m_imageData, cSource.m_imageData, m_imageRect.width*m_imageRect.height );

  } else {
    m_imageData = 0;
  }
}

Thanks.</pre>
		</div>
</li>
		<li class="comment even thread-odd thread-alt depth-1 clearfix" id="comment-79872">
		<div id="div-comment-79872" class="clearfix comment-container">
		<div class="comment-author vcard">
		<img alt='' src='../../../0.gravatar.com/avatar/490e8f34d16490201004f40191614c31@s=65&d=http_253a_252f_252f0.gravatar.com_252favatar_252fad516503a11cd5ca435acc9bb6523536_253fs_253d65&r=g' class='avatar avatar-65 photo' height='65' width='65' />		<span class="authorname">Hunter</span>
		</div>
				<div class="comment-meta commentmetadata">
		<a href="comment-page-1/#comment-79872">
		March 6, 2010 at 5:29 am</a>
        <span class="comment-reply-link"><a rel="nofollow" class="comment-reply-login" href="../../blog/wp-login.php@redirect_to=http_253a_252f_252fwww.learncpp.com_252fcpp-tutorial_252f912-shallow-vs-deep-copying_252f">Log in to Reply</a></span>		 
		</div>
		<p>after the line</p>
<pre>
delete[] m_pchString</pre>
<p>where will be m_pchString pointing to? and what will be the length of the memory its pointing to?</p>
		</div>
</li>
		<li class="comment odd alt thread-even depth-1 clearfix" id="comment-80369">
		<div id="div-comment-80369" class="clearfix comment-container">
		<div class="comment-author vcard">
		<img alt='' src='../../../0.gravatar.com/avatar/c372f71b8c269343560ebac4ffc757b2@s=65&d=http_253a_252f_252f0.gravatar.com_252favatar_252fad516503a11cd5ca435acc9bb6523536_253fs_253d65&r=g' class='avatar avatar-65 photo' height='65' width='65' />		<span class="authorname">Phil Braun</span>
		</div>
				<div class="comment-meta commentmetadata">
		<a href="comment-page-1/#comment-80369">
		March 12, 2010 at 8:52 am</a>
        <span class="comment-reply-link"><a rel="nofollow" class="comment-reply-login" href="../../blog/wp-login.php@redirect_to=http_253a_252f_252fwww.learncpp.com_252fcpp-tutorial_252f912-shallow-vs-deep-copying_252f">Log in to Reply</a></span>		 
		</div>
		<p>In the following example pulled from the article, there seems to be two problems that can occur.</p>
<pre>
// Assignment operator
MyString&amp; MyString::operator=(const MyString&amp; cSource)
{
    // check for self-assignment
    if (this == &amp;cSource)
        return *this;

    // first we need to deallocate any value that this string is holding!
    delete[] m_pchString;

    // because m_nLength is not a pointer, we can shallow copy it
    m_nLength = cSource.m_nLength;

    // now we need to deep copy m_pchString
    if (cSource.m_pchString)
    {
        // allocate memory for our copy
        m_pchString = new char[m_nLength];

        // Copy the parameter the newly allocated memory
        strncpy(m_pchString, cSource.m_pchString, m_nLength);
    }
    else
        m_pchString = 0;

    return *this;
}</pre>
<p>The first problem is the line &#8220;delete[] m_pchString;&#8221;. If &#8220;m_pchString&#8221; is not allocated, could this cause an exception? Would it not be better to check if &#8220;m_pchString&#8221; is valid before attempting to delete the memory?</p>
<p>The second problem occurs if &#8220;cSource.m_pchString&#8221; is a zero length string. Would it not be better to assign NULL to m_pchString if &#8220;cSource.m_pchString&#8221; has zero length? Oh, and what happens when an attempt is made to create a zero length string in the &#8220;new&#8221; statement and when &#8220;strncpy&#8221; attempts to copy a zero length string?</p>
<p>Otherwise this code is a good learning tool.</p>
<p>Phil</p>
		</div>
</li>
		<li class="comment even thread-odd thread-alt depth-1 clearfix" id="comment-82524">
		<div id="div-comment-82524" class="clearfix comment-container">
		<div class="comment-author vcard">
		<img alt='' src='../../../1.gravatar.com/avatar/9ce0d3b45535529a26fe86a68e4af714@s=65&d=http_253a_252f_252f1.gravatar.com_252favatar_252fad516503a11cd5ca435acc9bb6523536_253fs_253d65&r=g' class='avatar avatar-65 photo' height='65' width='65' />		<span class="authorname">intelliplay2000</span>
		</div>
				<div class="comment-meta commentmetadata">
		<a href="comment-page-1/#comment-82524">
		April 8, 2010 at 5:46 pm</a>
        <span class="comment-reply-link"><a rel="nofollow" class="comment-reply-login" href="../../blog/wp-login.php@redirect_to=http_253a_252f_252fwww.learncpp.com_252fcpp-tutorial_252f912-shallow-vs-deep-copying_252f">Log in to Reply</a></span>		 
		</div>
		<p>Phil,<br />
Let me see if I can answer your concerns:</p>
<p>For concern #1, remember that the code is for an assignment operator so the object must exist (i.e. m_pchString must have been allocated). Otherwise the copy constructor would rather be called. Also note that, if for some reason m_pchString, has been deleted after having been allocated and is now NULL, it is still okay to call delete on NULL (its a noop).</p>
<p>Now for concern #2, I am assumming you&#8217;re referring to when the object is default constructed (i.e. cSource.m_pchString = &#8220;&#8221;). This is different from when cSource.m_pchString = NULL. If you have the empty string, I think you want to go ahead and create memory and copy the terminator as the author did. And remember the length of the empty string is not zero but 1 (for the terminator, &#8221;). If the length is zero, then cSource.m_pchString = NULL and you will fall into the else case as the author did, and that would exactly be the same as what you&#8217;re suggesting.<br />
Cheers</p>
		</div>
</li>
		<li class="comment odd alt thread-even depth-1 clearfix" id="comment-83013">
		<div id="div-comment-83013" class="clearfix comment-container">
		<div class="comment-author vcard">
		<img alt='' src='../../../1.gravatar.com/avatar/d765f09f68f08a92a904571e7244fa87@s=65&d=http_253a_252f_252f1.gravatar.com_252favatar_252fad516503a11cd5ca435acc9bb6523536_253fs_253d65&r=g' class='avatar avatar-65 photo' height='65' width='65' />		<span class="authorname">prc</span>
		</div>
				<div class="comment-meta commentmetadata">
		<a href="comment-page-1/#comment-83013">
		April 16, 2010 at 2:35 pm</a>
        <span class="comment-reply-link"><a rel="nofollow" class="comment-reply-login" href="../../blog/wp-login.php@redirect_to=http_253a_252f_252fwww.learncpp.com_252fcpp-tutorial_252f912-shallow-vs-deep-copying_252f">Log in to Reply</a></span>		 
		</div>
		<p>My question is, assuming we didn&#8217;t use c style strings, and instead just used std::string (or for that matter, assumed we just use any objected in the heap that wasn&#8217;t an array), would the proper way to deep copy it be this:</p>
<pre>
if (cSource.m_stdString)
{
    // allocate the memory, an copy the data
    m_pchString = new std::string (*(cSource.m_stdString));
}
</pre>
<p>or is there a better way that we should go about this?</p>
		</div>
</li>
		<li class="comment even thread-odd thread-alt depth-1 clearfix" id="comment-83582">
		<div id="div-comment-83582" class="clearfix comment-container">
		<div class="comment-author vcard">
		<img alt='' src='../../../0.gravatar.com/avatar/45330fc03762c9899cdc7d52c5aaebd2@s=65&d=http_253a_252f_252f0.gravatar.com_252favatar_252fad516503a11cd5ca435acc9bb6523536_253fs_253d65&r=g' class='avatar avatar-65 photo' height='65' width='65' />		<span class="authorname"><a href='../../../nothing/default.htm' rel='external nofollow' class='url'>abhishek</a></span>
		</div>
				<div class="comment-meta commentmetadata">
		<a href="comment-page-1/#comment-83582">
		April 25, 2010 at 10:46 am</a>
        <span class="comment-reply-link"><a rel="nofollow" class="comment-reply-login" href="../../blog/wp-login.php@redirect_to=http_253a_252f_252fwww.learncpp.com_252fcpp-tutorial_252f912-shallow-vs-deep-copying_252f">Log in to Reply</a></span>		 
		</div>
		<p>really very good one and nicely descriptive Thanks</p>
		</div>
</li>
		<li class="comment odd alt thread-even depth-1 clearfix" id="comment-86968">
		<div id="div-comment-86968" class="clearfix comment-container">
		<div class="comment-author vcard">
		<img alt='' src='../../../1.gravatar.com/avatar/97fe2f3a75c270cf59bef281924d347b@s=65&d=http_253a_252f_252f1.gravatar.com_252favatar_252fad516503a11cd5ca435acc9bb6523536_253fs_253d65&r=g' class='avatar avatar-65 photo' height='65' width='65' />		<span class="authorname"><a href='../../../www.extra-mobile-games.com/default.htm' rel='external nofollow' class='url'>kayallext</a></span>
		</div>
				<div class="comment-meta commentmetadata">
		<a href="comment-page-1/#comment-86968">
		June 22, 2010 at 12:05 am</a>
        <span class="comment-reply-link"><a rel="nofollow" class="comment-reply-login" href="../../blog/wp-login.php@redirect_to=http_253a_252f_252fwww.learncpp.com_252fcpp-tutorial_252f912-shallow-vs-deep-copying_252f">Log in to Reply</a></span>		 
		</div>
		<p>[url=http://www.extra-mobile-games.com/]free mobile games[/url]</p>
		</div>
</li>
		<li class="comment even thread-odd thread-alt depth-1 clearfix" id="comment-92285">
		<div id="div-comment-92285" class="clearfix comment-container">
		<div class="comment-author vcard">
		<img alt='' src='../../../0.gravatar.com/avatar/45330fc03762c9899cdc7d52c5aaebd2@s=65&d=http_253a_252f_252f0.gravatar.com_252favatar_252fad516503a11cd5ca435acc9bb6523536_253fs_253d65&r=g' class='avatar avatar-65 photo' height='65' width='65' />		<span class="authorname"><a href='../../../n/a' rel='external nofollow' class='url'>abhi</a></span>
		</div>
				<div class="comment-meta commentmetadata">
		<a href="comment-page-1/#comment-92285">
		September 18, 2010 at 11:59 pm</a>
        <span class="comment-reply-link"><a rel="nofollow" class="comment-reply-login" href="../../blog/wp-login.php@redirect_to=http_253a_252f_252fwww.learncpp.com_252fcpp-tutorial_252f912-shallow-vs-deep-copying_252f">Log in to Reply</a></span>		 
		</div>
		<p>Hi,<br />
I have went throguh this articale it is very nice but i had silly question..</p>
<p>we are same code into constructor and assigmnet operatoer so i had question why we need constrcutor<br />
and assignment operator during deep copy . can we have only one i.e. copy constructor or assigmnet operator</p>
		</div>
<ul class='children'>
		<li class="comment byuser comment-author-rajeshperumal odd alt depth-2 clearfix" id="comment-95163">
		<div id="div-comment-95163" class="clearfix comment-container">
		<div class="comment-author vcard">
		<img alt='' src='../../../0.gravatar.com/avatar/c8a0c0fc3aa2182c46210e0257253dac@s=65&d=http_253a_252f_252f0.gravatar.com_252favatar_252fad516503a11cd5ca435acc9bb6523536_253fs_253d65&r=g' class='avatar avatar-65 photo' height='65' width='65' />		<span class="authorname">cooltoad</span>
		</div>
				<div class="comment-meta commentmetadata">
		<a href="comment-page-1/#comment-95163">
		February 7, 2011 at 6:20 pm</a>
        <span class="comment-reply-link"><a rel="nofollow" class="comment-reply-login" href="../../blog/wp-login.php@redirect_to=http_253a_252f_252fwww.learncpp.com_252fcpp-tutorial_252f912-shallow-vs-deep-copying_252f">Log in to Reply</a></span>		 
		</div>
		<p>It depends on usage or how it is invoked in main. Check this tutorial.</p>
<p><a href="../911-the-copy-constructor-and-overloading-the-assignment-operator/default.htm" rel="nofollow">http://www.learncpp.com/cpp-tutorial/911-the-copy-constructor-and-overloading-the-assignment-operator/</a></p>
		</div>
</li>
</ul>
</li>
		<li class="comment byuser comment-author-dhananjay even thread-even depth-1 clearfix" id="comment-95323">
		<div id="div-comment-95323" class="clearfix comment-container">
		<div class="comment-author vcard">
		<img alt='' src='../../../0.gravatar.com/avatar/c13ad922de78814a49af2e688bf87628@s=65&d=http_253a_252f_252f0.gravatar.com_252favatar_252fad516503a11cd5ca435acc9bb6523536_253fs_253d65&r=g' class='avatar avatar-65 photo' height='65' width='65' />		<span class="authorname">dhananjay</span>
		</div>
				<div class="comment-meta commentmetadata">
		<a href="comment-page-1/#comment-95323">
		April 13, 2011 at 2:03 am</a>
        <span class="comment-reply-link"><a rel="nofollow" class="comment-reply-login" href="../../blog/wp-login.php@redirect_to=http_253a_252f_252fwww.learncpp.com_252fcpp-tutorial_252f912-shallow-vs-deep-copying_252f">Log in to Reply</a></span>		 
		</div>
		<p>It was nice to read this article and excellent feedback. I have also few questions in my mind to ask:-</p>
<p>1. Why is the program crashing if we change the constructor from MyString(char *pchString=&#8221;") to MyString(char *pchString=0) ? </p>
<p>2. Instead of strncpy, isn&#8217;t it better to use strcpy? It&#8217;d have saved saved few lines e.g m_nlength+1, adding &#8216;\o&#8217; at the end of string. </p>
<p>I&#8217;ll appreciate your help.</p>
		</div>
</li>
		<li class="pingback odd alt thread-odd thread-alt depth-1 clearfix" id="comment-96487">
		<div id="div-comment-96487" class="clearfix comment-container">
		<div class="comment-author vcard">
				<span class="authorname"><a href='../101-constructor-initialization-lists/default.htm' rel='external nofollow' class='url'>10.1 &#8212; Constructor initialization lists &laquo; Learn C++</a></span>
		</div>
				<div class="comment-meta commentmetadata">
		<a href="comment-page-1/#comment-96487">
		November 27, 2011 at 11:57 am</a>
        <span class="comment-reply-link"><a rel="nofollow" class="comment-reply-login" href="../../blog/wp-login.php@redirect_to=http_253a_252f_252fwww.learncpp.com_252fcpp-tutorial_252f912-shallow-vs-deep-copying_252f">Log in to Reply</a></span>		 
		</div>
		<p>[...] 9.12 &#8212; Shallow vs. deep copying &nbsp;&nbsp; A.4 &#8212; Debugging your program (stepping and breakpoints) [...]</p>
		</div>
</li>
	
	</ul>
	<!-- / Comment List -->

	



	
	<p>You must be <a href="../../blog/wp-login.php@redirect_to=http_253a_252f_252fwww.learncpp.com_252fcpp-tutorial_252f912-shallow-vs-deep-copying_252f">logged in</a> to post a comment.</p>

		

<div class="clearfix navigation-bottom">
		<div class="older">&laquo; <a href="../911-the-copy-constructor-and-overloading-the-assignment-operator/default.htm" rel="prev">9.11 &#8212; The copy constructor and overloading the assignment operator</a> &nbsp;</div><div class="newer">&nbsp; <a href="../101-constructor-initialization-lists/default.htm" rel="next">10.1 &#8212; Constructor initialization lists</a> &raquo;</div></div>		
			



</td>
<!-- / Main Column -->


<!-- Right Sidebar -->
<td id="right">

	<div id="text-1" class="widget widget_text">			<div class="textwidget"><script type="text/javascript"><!--
google_ad_client = "pub-0588844875925051";
/* Wide Skyscraper Right Bar */
google_ad_slot = "0955932809";
google_ad_width = 160;
google_ad_height = 600;
//-->
</script>
<acript type="text/javascript"
src="../../../pagead2.googlesyndication.com/pagead/show_ads.js">
</script></div>
		</div><div id="archives-2" class="widget widget_archive"><div class="widget-title"><h3>Archives</h3></div>		<ul>
			<li><a href='../../2011/11/default.htm' title='November 2011'>November 2011</a></li>
	<li><a href='../../2011/10/default.htm' title='October 2011'>October 2011</a></li>
	<li><a href='../../2011/09/default.htm' title='September 2011'>September 2011</a></li>
	<li><a href='../../2010/10/default.htm' title='October 2010'>October 2010</a></li>
	<li><a href='../../2010/07/default.htm' title='July 2010'>July 2010</a></li>
	<li><a href='../../2009/10/default.htm' title='October 2009'>October 2009</a></li>
	<li><a href='../../2009/09/default.htm' title='September 2009'>September 2009</a></li>
	<li><a href='../../2009/03/default.htm' title='March 2009'>March 2009</a></li>
	<li><a href='../../2008/12/default.htm' title='December 2008'>December 2008</a></li>
	<li><a href='../../2008/10/default.htm' title='October 2008'>October 2008</a></li>
	<li><a href='../../2008/09/default.htm' title='September 2008'>September 2008</a></li>
	<li><a href='../../2008/08/default.htm' title='August 2008'>August 2008</a></li>
	<li><a href='../../2008/06/default.htm' title='June 2008'>June 2008</a></li>
	<li><a href='../../2008/05/default.htm' title='May 2008'>May 2008</a></li>
	<li><a href='../../2008/04/default.htm' title='April 2008'>April 2008</a></li>
	<li><a href='../../2008/03/default.htm' title='March 2008'>March 2008</a></li>
	<li><a href='../../2008/02/default.htm' title='February 2008'>February 2008</a></li>
	<li><a href='../../2008/01/default.htm' title='January 2008'>January 2008</a></li>
	<li><a href='../../2007/12/default.htm' title='December 2007'>December 2007</a></li>
	<li><a href='../../2007/11/default.htm' title='November 2007'>November 2007</a></li>
	<li><a href='../../2007/10/default.htm' title='October 2007'>October 2007</a></li>
	<li><a href='../../2007/09/default.htm' title='September 2007'>September 2007</a></li>
	<li><a href='../../2007/08/default.htm' title='August 2007'>August 2007</a></li>
	<li><a href='../../2007/07/default.htm' title='July 2007'>July 2007</a></li>
	<li><a href='../../2007/06/default.htm' title='June 2007'>June 2007</a></li>
	<li><a href='../../2007/05/default.htm' title='May 2007'>May 2007</a></li>
		</ul>
</div>
</td>
<!-- / Right Sidebar -->

</tr>
<!-- / Main Body -->
<tr>

<!-- Footer -->
<td id="footer" colspan="3">

    <p>
    Copyright &copy; 2011 <a href="../../default.htm">Learn C++</a> - All Rights Reserved<br />Powered by <a href="../../../wordpress.org/default.htm">WordPress</a> &amp; the <a href="../../../wordpress.bytesforall.com/default.htm" title="Customizable WordPress themes">Atahualpa Theme</a> by <a href="../../../www.bytesforall.com/default.htm" title="BFA Webdesign">BytesForAll</a>. Discuss on our <a href="../../../forum.bytesforall.com/default.htm" title="Atahualpa &amp; WordPress">WP Forum</a>    </p>
    
    
    <script type='text/javascript' src='../../blog/wp-content/plugins/syntaxhighlighter/syntaxhighlighter3/scripts/shcore.js@ver=3.0.83c'></script>
<script type='text/javascript' src='../../blog/wp-content/plugins/syntaxhighlighter/syntaxhighlighter3/scripts/shbrushcpp.js@ver=3.0.83c'></script>
<script type='text/javascript'>
	(function(){
		var corecss = document.createElement('link');
		var themecss = document.createElement('link');
		var corecssurl = "../../blog/wp-content/plugins/syntaxhighlighter/syntaxhighlighter3/styles/shcore.css@ver=3.0.83c.css";
		if ( corecss.setAttribute ) {
				corecss.setAttribute( "rel", "stylesheet" );
				corecss.setAttribute( "type", "text/css" );
				corecss.setAttribute( "href", corecssurl );
		} else {
				corecss.rel = "stylesheet";
				corecss.href = corecssurl;
		}
		document.getElementsByTagName("head")[0].insertBefore( corecss, document.getElementById("syntaxhighlighteranchor") );
		var themecssurl = "../../blog/wp-content/plugins/syntaxhighlighter/syntaxhighlighter3/styles/shthemedefault.css@ver=3.0.83c.css";
		if ( themecss.setAttribute ) {
				themecss.setAttribute( "rel", "stylesheet" );
				themecss.setAttribute( "type", "text/css" );
				themecss.setAttribute( "href", themecssurl );
		} else {
				themecss.rel = "stylesheet";
				themecss.href = themecssurl;
		}
		//document.getElementById("syntaxhighlighteranchor").appendChild(themecss);
		document.getElementsByTagName("head")[0].insertBefore( themecss, document.getElementById("syntaxhighlighteranchor") );
	})();
	SyntaxHighlighter.config.strings.expandSource = '+ expand source';
	SyntaxHighlighter.config.strings.help = '?';
	SyntaxHighlighter.config.strings.alert = 'SyntaxHighlighter\n\n';
	SyntaxHighlighter.config.strings.noBrush = 'Can\'t find brush for: ';
	SyntaxHighlighter.config.strings.brushNotHtmlScript = 'Brush wasn\'t configured for html-script option: ';
	SyntaxHighlighter.defaults['pad-line-numbers'] = false;
	SyntaxHighlighter.defaults['toolbar'] = false;
	SyntaxHighlighter.all();
</script>
<!--stats_footer_test--><script src="../../../stats.wordpress.com/e-201148.js" type="text/javascript"></script>
<script type="text/javascript">
st_go({blog:'3928254',v:'ext',post:'151'});
var load_cmc = function(){linktracker_init(3928254,151,2);};
if ( typeof addLoadEvent != 'undefined' ) addLoadEvent(load_cmc);
else load_cmc();
</script>

</td>
<!-- / Footer -->

</tr>
</table><!-- / layout -->
</div><!-- / container -->
</div><!-- / wrapper -->
</body>
</html>
<!-- Dynamic page generated in 0.514 seconds. -->
<!-- Cached page generated by WP-Super-Cache on 2011-12-02 06:52:34 -->
<!-- Compression = gzip -->