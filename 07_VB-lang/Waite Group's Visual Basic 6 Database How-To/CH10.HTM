<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2//EN">
<HTML>

<HEAD>
	<META HTTP-EQUIV="Content-Type" CONTENT="text/html;CHARSET=iso-8859-1">
<SCRIPT LANGUAGE="JavaScript">

<!--

function popUp(pPage) {
 var fullURL = document.location;
 var textURL = fullURL.toString();
 var URLlen = textURL.length;
 var lenMinusPage = textURL.lastIndexOf("/");
 lenMinusPage += 1;
 var fullPath = textURL.substring(0,lenMinusPage);
 popUpWin = window.open('','popWin','resizable=yes,scrollbars=no,width=525,height=394');
 figDoc= popUpWin.document;
 zhtm= '<HTML><HEAD><TITLE>' + pPage + '</TITLE>';
 zhtm += '</head>';
 zhtm += '<BODY bgcolor="#FFFFFF">';
 zhtm += '<IMG SRC="' + fullPath + pPage + '">';
 zhtm += '<P><B>' + pPage + '</B>';
 zhtm += '</BODY></HTML>';
 window.popUpWin.document.write(zhtm);
 window.popUpWin.document.close();
 // Johnny Jackson 4/28/98
 }

//-->
                                                                
</SCRIPT>
<link rel="stylesheet" href="ebooks.css" tppabs="http://pbs.mcp.com/includes/stylesheets/ebooks.css">

	<META NAME="GENERATOR" Content="Symantec Visual Page Mac 1.1.1">
	<TITLE>Visual Basic 6 Database How-To -- Ch 10 -- Security and Multiuser Access</TITLE>
</HEAD>

<BODY TEXT="#000000" BGCOLOR="#FFFFFF">

<H1 ALIGN="CENTER"><IMG SRC="sams.gif" tppabs="http://pbs.mcp.com/ebooks/1571691529/button/sams.gif" WIDTH="171" HEIGHT="66" ALIGN="BOTTOM"
BORDER="0"></H1>

<H1 ALIGN="CENTER">Visual Basic 6 Database How-To</H1>
<CENTER>
<P><A HREF="ch09.htm" tppabs="http://pbs.mcp.com/ebooks/1571691529/ch09/ch09.htm"><IMG SRC="previous.gif" tppabs="http://pbs.mcp.com/ebooks/1571691529/button/previous.gif" WIDTH="128" HEIGHT="28"
ALIGN="BOTTOM" ALT="Previous chapter" BORDER="0"></A><A HREF="ch11.htm" tppabs="http://pbs.mcp.com/ebooks/1571691529/ch11/ch11.htm"><IMG
SRC="next.gif" tppabs="http://pbs.mcp.com/ebooks/1571691529/button/next.gif" WIDTH="128" HEIGHT="28" ALIGN="BOTTOM" ALT="Next chapter"
BORDER="0"></A><A HREF="index-21.htm" tppabs="http://pbs.mcp.com/ebooks/1571691529/index.htm"><IMG SRC="contents.gif" tppabs="http://pbs.mcp.com/ebooks/1571691529/button/contents.gif" WIDTH="128"
HEIGHT="28" ALIGN="BOTTOM" ALT="Contents" BORDER="0"></A> 
<HR>

</CENTER>
<H1></H1>
<H1 ALIGN="CENTER">- 10 -<BR>
Security and Multiuser Access</H1>

<UL>
	<LI>How do I...
	<UL>
		<LI><A HREF="#Open a database so that others ...">10.1 Open a database so that others
		can't access it while the user is working with it?</A>
		<LI><A HREF="#Open a table so that others    ">10.2 Open a table so that others can't
		access it while the user is working with it?</A>
		<LI><A HREF="#Work with locked records?">10.3 Work with locked records?</A>
		<LI><A HREF="#Work with secured Microsoft ...">10.Work with secured Microsoft Access
		database files?</A>
		<LI><A HREF="#Assign permissions for database ...">10.5 Assign permissions for database
		objects?</A>
		<LI><A HREF="#Change ownership of database obj">10.6 Change ownership of database
		objects?</A>
		<LI><A HREF="#Change or delete database">10.7 Change or delete database passwords?</A>
		<LI><A HREF="#Use a single password ...">10.8 Use a single password for data access
		for all users?</A>
		<LI><A HREF="#Add new users to a system ...">10.9 Add new users to a system database?</A>
		<LI><A HREF="#Define new groups in a system ...">10.10 Define new groups in a system
		database?</A>
		<LI><A HREF="#Add users to groups and delete ...">10.11 Add users to groups and delete
		users from groups?</A>
		<LI><A HREF="#Track user activity ...">10.12 Track user activity in a database?</A>
		<LI><A HREF="#Create and use an encrypted data...">10.13 Create and use an encrypted
		database?</A>
	</UL>
</UL>

<P>
<HR SIZE="4">

<H3></H3>
<P>When multiple users have access to a database, two issues become overwhelmingly
important:</P>

<UL>
	<LI>Ensuring that users accessing the database simultaneously do not inadvertently
	interfere with each other's operations.
	<P>
	<LI>Ensuring that only authorized users have access to the data.
</UL>

<P>This chapter presents techniques for handling both of these issues. The first
3 How-To's deal with the issue of simultaneous multiuser access, and the remaining
10 How-To's show you how to use Visual Basic to implement security with the Jet database
engine.</P>
<P>
<H4>10.1 Open a Database So That Others Can't Access It While the User Is Working
with It</H4>
<P>When your application runs in a multiuser environment, the application and the
Jet database engine need to work together to control access to common data. This
How-To shows how to implement the most exclusive method of access to multiuser resources,
locking an entire database.</P>
<P>
<H4>10.2 Open a Table So That Others Can't Access It While the User Is Working with
It</H4>
<P>Most of the time, locking an entire database results in limited functionality
of the client software that needs to access that database. In this How-To, you will
learn how to gain exclusive read and write access to individual tables.</P>
<P>
<H4>10.3 Work with Locked Records</H4>
<P>If you decide not to lock an entire database or table for exclusive use, the Jet
engine takes over and locks clusters of records one at a time as users access them.
This How-To shows how to work with the Jet engine to implement record locking in
your application.</P>
<P>
<H4>10.Work with Secured Microsoft Access Database Files</H4>
<P>Microsoft Access database files have a sophisticated set of security features
that can be turned on simply by using password protection for the Admin account.
You can implement the security features at two levels: the individual database file
and the workgroup. The workgroup is defined by a system database. This How-To shows
you how to work with secured Microsoft Access databases.</P>
<P>
<H4>10.5 Assign Permissions for Database Objects</H4>
<P>Each table and query in a Microsoft Access database file has associated with it
a set of permissions for each user in the workgroup. This How-To shows you how to
read and change permissions for users.</P>
<P>
<H4>10.6 Change Ownership of Database Objects</H4>
<P>The user who creates a table or query in a Microsoft Access database becomes its
owner. With the appropriate permissions, you can change the owner of a table or query.
This How-To shows you the technique to accomplish this task.</P>
<P>
<H4>10.7 Change or Delete Database Passwords</H4>
<P>The system administrator occasionally needs the ability to change a user's password
and sometimes remove it all together. This How-To shows how to accomplish this job
through Visual Basic.</P>
<P>
<H4>10.8 Use a Single Password for Data Access for All Users</H4>
<P>You know that you can set individual passwords for each user in a workgroup, but
what if you simply want to put a password on the database itself? This How-To shows
you how to do just that.</P>
<P>
<H4>10.9 Add New Users to a System Database</H4>
<P>A system database includes an entry for each user in the workgroup. This How-To
shows you how to create new users and add them to that workgroup.</P>
<P>
<H4>10.10 Define New Groups in a System Database</H4>
<P>Just as you might need to add new users, you also might need to add new groups
to a system database. This How-To shows you how to add new groups to a system database
using Visual Basic.</P>
<P>
<H4>10.11 Add Users to Groups and Delete Users from Groups</H4>
<P>This How-To shows you how to add and remove any user in the system database to
and from any group.</P>
<P>
<H4>10.12 Track User Activity in a Database</H4>
<P>It is nice to know which users did what to your database. Sometimes it would be
useful if they had to sign what they did. The How-To will show you how to create
an audit trail with any particular recordset to keep track of user activity in an
Access database.</P>
<P>
<H4>10.13 Create and Use an Encrypted Database</H4>
<P>This How-To will show you how to create and convert encrypted databases so that
others cannot access them with a product other than Access or Visual Basic.</P>
<P>
<H2>10.1 How do I...</H2>
<H3><A NAME="Open a database so that others ..."></A><B>Open a database so that others
can't access it while the user is working with it?</B></H3>
<P><B>Problem</B></P>
<P>I have a database that I need to access from my application. It is important that
no other user access the database while my application is running, even if he or
she is using the same project that I am using. How can I ensure that only one instance
of my program can access the database at a time?</P>
<P><B>Technique</B></P>
<P>Using the Microsoft Jet engine, shared data access is the default data mode. In
this mode, the Jet engine takes care of page locking of the database. To open the
database exclusively, you must explicitly state that this is your intention by passing
a true value as the second parameter of the <TT>OpenDatabase</TT> method.</P>
<P><B>Steps</B></P>
<P>The Exclusive project is designed to illustrate the two distinct data modes used
when opening a database, exclusive and shared. Open the Exclusive.vbp project and
compile it to an EXE file. Invoke this executable twice to create two instances of
the application. You should see the <TT>USER</TT> form opened twice, as shown in
Figure 10.1. To open the database exclusively, click the Open Exclusive command button,
or to open the database using the shared data mode, click the Open Shared command
button. Notice the combinations permitted when opening the database with the two
instances of the Exclusive project. You can open the database exclusively only if
no other user has the database open at all, and you can open the database shared
only if no other user has the database opened exclusively. To close the database,
click the Close Database command button.</P>
<P><A HREF="javascript:popUp('10fig01.gif')"><B>Figure 10.1.</B></A><B> </B><I>Two
instances of the Exclusive project.</I></P>

<DL>
	<DT><I></I></DT>
	<DD><B>1. </B>Create a new project and call it Exclusive.vbp. Change the properties
	of the default form, <TT>Form1</TT>, to those listed in Table 10.1, and save it as
	frmExclusive.frm.
	<P>
</DL>



<BLOCKQUOTE>
	<H4>Table 10.1. Objects and properties for the Exclusive project.</H4>
	<P>
	<TABLE BORDER="1">
	<TR ALIGN="LEFT" VALIGN="TOP">
		<TD ALIGN="LEFT"><B><I>OBJECT</I></B></TD>
		<TD ALIGN="LEFT"><B><I>Property</I></B></TD>
		<TD ALIGN="LEFT"><B><I>Setting</I></B></TD>
	</TR>
	<TR ALIGN="LEFT" VALIGN="TOP">
		<TD ALIGN="LEFT"><TT>Form</TT></TD>
		<TD ALIGN="LEFT"><TT>Name</TT></TD>
		<TD ALIGN="LEFT"><TT>frmExclusive</TT></TD>
	</TR>
	<TR ALIGN="LEFT" VALIGN="TOP">
		<TD ALIGN="LEFT"></TD>
		<TD ALIGN="LEFT"><TT>Caption</TT></TD>
		<TD ALIGN="LEFT"><TT>USER</TT></TD>
	</TR>
	<TR ALIGN="LEFT" VALIGN="TOP">
		<TD ALIGN="LEFT"><TT>Command button</TT></TD>
		<TD ALIGN="LEFT"><TT>Name</TT></TD>
		<TD ALIGN="LEFT"><TT>cmdOpenExclusive</TT></TD>
	</TR>
	<TR ALIGN="LEFT" VALIGN="TOP">
		<TD ALIGN="LEFT"></TD>
		<TD ALIGN="LEFT"><TT>Caption</TT></TD>
		<TD ALIGN="LEFT"><TT>Open &amp;Exclusive</TT></TD>
	</TR>
	<TR ALIGN="LEFT" VALIGN="TOP">
		<TD ALIGN="LEFT"><TT>Command button</TT></TD>
		<TD ALIGN="LEFT"><TT>Name</TT></TD>
		<TD ALIGN="LEFT"><TT>cmdOpenShared</TT></TD>
	</TR>
	<TR ALIGN="LEFT" VALIGN="TOP">
		<TD ALIGN="LEFT"></TD>
		<TD ALIGN="LEFT"><TT>Caption</TT></TD>
		<TD ALIGN="LEFT"><TT>Open &amp;Shared</TT></TD>
	</TR>
	<TR ALIGN="LEFT" VALIGN="TOP">
		<TD ALIGN="LEFT"><TT>Command button</TT></TD>
		<TD ALIGN="LEFT"><TT>Name</TT></TD>
		<TD ALIGN="LEFT"><TT>cmdCloseDatabase</TT></TD>
	</TR>
	<TR ALIGN="LEFT" VALIGN="TOP">
		<TD ALIGN="LEFT"></TD>
		<TD ALIGN="LEFT"><TT>Caption</TT></TD>
		<TD ALIGN="LEFT"><TT>&amp;Close Database</TT></TD>
	</TR>
	<TR ALIGN="LEFT" VALIGN="TOP">
		<TD ALIGN="LEFT"><TT>Command button</TT></TD>
		<TD ALIGN="LEFT"><TT>Name</TT></TD>
		<TD ALIGN="LEFT"><TT>cmdExit</TT></TD>
	</TR>
	<TR ALIGN="LEFT" VALIGN="TOP">
		<TD ALIGN="LEFT"></TD>
		<TD ALIGN="LEFT"><TT>Caption</TT></TD>
		<TD ALIGN="LEFT"><TT>E&amp;xit</TT></TD>
	</TR>
	<TR ALIGN="LEFT" VALIGN="TOP">
		<TD ALIGN="LEFT"></TD>
		<TD ALIGN="LEFT"><TT>Cancel</TT></TD>
		<TD ALIGN="LEFT"><TT>-1 `True</TT></TD>
	</TR>
	<TR ALIGN="LEFT" VALIGN="TOP">
		<TD ALIGN="LEFT"></TD>
		<TD ALIGN="LEFT"><TT>Default</TT></TD>
		<TD ALIGN="LEFT"><TT>-1 `True</TT></TD>
	</TR>
	<TR ALIGN="LEFT" VALIGN="TOP">
		<TD ALIGN="LEFT"><TT>Label</TT></TD>
		<TD ALIGN="LEFT"><TT>Name</TT></TD>
		<TD ALIGN="LEFT"><TT>lblDBStatusLabel</TT></TD>
	</TR>
	<TR ALIGN="LEFT" VALIGN="TOP">
		<TD ALIGN="LEFT"></TD>
		<TD ALIGN="LEFT"><TT>Caption</TT></TD>
		<TD ALIGN="LEFT"><TT>Database Status</TT></TD>
	</TR>
	<TR ALIGN="LEFT" VALIGN="TOP">
		<TD ALIGN="LEFT"><TT>Label</TT></TD>
		<TD ALIGN="LEFT"><TT>Name</TT></TD>
		<TD ALIGN="LEFT"><TT>lblDBStatus</TT></TD>
	</TR>
	<TR ALIGN="LEFT" VALIGN="TOP">
		<TD ALIGN="LEFT"></TD>
		<TD ALIGN="LEFT"><TT>Caption</TT></TD>
		<TD ALIGN="LEFT"><TT>&quot;&quot;</TT></TD>
	</TR>
	</TABLE>
</P>

</BLOCKQUOTE>


<DL>
	<DT></DT>
	<DD><B>2. </B>Enter the following form-level variable and constant declarations to
	be used throughout the project:
	<P>
</DL>



<BLOCKQUOTE>
	<PRE><TT>Option Explicit</TT>
` this is the database object variable used throughout this 
` project
Private db As Database
` these are private constants used to indicate the desired state
` of the database when opened
Private Const OPEN_EXCLUSIVE = True
Private Const OPEN_SHARED = False</PRE>

</BLOCKQUOTE>

<PRE></PRE>

<DL>
	<DT></DT>
	<DD><B>3. </B>Now enter the code to initialize the <TT>frmExclusive</TT> form to
	display the database as closed by calling the <TT>cmdCloseDatabase_Click</TT> event.
	<P>
</DL>



<BLOCKQUOTE>
	<PRE><TT>Private Sub Form_Initialize()</TT>
    ` when the form is initialized, ensure that the proper states 
    ` of the command buttons and labels are set by calling the 
    ` Close Database command button's click event
    cmdCloseDatabase_Click
End Sub</PRE>

</BLOCKQUOTE>

<PRE></PRE>

<DL>
	<DT></DT>
	<DD><B>4. </B>Code both the <TT>cmdOpenExclusive_Click</TT> and the <TT>cmdOpenShared_Click</TT>
	events with a call to the <TT>OpenDB</TT> procedure, passing the appropriate form-level
	constant to indicate the data mode desired by the user.
	<P>
</DL>



<BLOCKQUOTE>
	<PRE><TT>Private Sub cmdOpenExclusive_Click()</TT>
    ` call the OpenDB procedure of this project, passing the
    ` OPEN_EXCLUSIVE constant (this constant holds the value of 
    ` TRUE)
    OpenDB OPEN_EXCLUSIVE
End Sub
Private Sub cmdOpenShared_Click()
    ` call the OpenDB procedure of this project, passing the
    ` OPEN_SHARED constant (this constant holds the value of 
    ` FALSE)
    OpenDB OPEN_SHARED
End Sub</PRE>

</BLOCKQUOTE>

<PRE></PRE>

<DL>
	<DT></DT>
	<DD><B>5. </B>When closing the database, set the <TT>db</TT> object variable to nothing,
	and set the command button <TT>Enabled</TT> properties to the correct state, allowing
	the user only to open the database, because it is now closed. Here is the code for
	the Close Database command button:
	<P>
</DL>



<BLOCKQUOTE>
	<PRE><TT>Private Sub cmdCloseDatabase_Click()</TT>
    ` set the database object variable to nothing, which is
    ` the equivalent of closing the database
    Set db = Nothing
    ` change the label that displays the database status to closed
    lblDBStatus = &quot;CLOSED&quot;
    ` only allow the user to open the database and not close it
    cmdOpenExclusive.Enabled = True
    cmdOpenShared.Enabled = True
    cmdCloseDatabase.Enabled = False
End Sub</PRE>

</BLOCKQUOTE>

<PRE></PRE>

<DL>
	<DT></DT>
	<DD><B>6. </B>Enter the code for the Exit command button. This code first calls the
	Close Database click event of the command button to set the database object to nothing,
	unloading the project afterward to terminate the project.
	<P>
</DL>



<BLOCKQUOTE>
	<PRE><TT>Private Sub cmdExit_Click()</TT>
    ` call the close database command button click event to ensure
    ` that the database is closed before we terminate the project
    cmdCloseDatabase_Click
    ` end the application by calling Unload
    Unload Me
End Sub</PRE>

</BLOCKQUOTE>

<PRE></PRE>

<DL>
	<DT></DT>
	<DD><B>7. </B>Next, enter the code for the <TT>OpenDB</TT> procedure used to open
	the database for either exclusive or shared mode. If the user decides to open the
	database exclusively, the <TT>OPEN_EXCLUSIVE</TT> constant is passed to this procedure
	and onto the <TT>OpenDatabase</TT> method of the database object. This constant holds
	the value of <TT>True</TT> and opens the database exclusively. The other choice,
	<TT>OPEN_SHARED</TT>, passes a value of <TT>False</TT> to the <TT>OpenDatabase</TT>
	method.
	<P>
</DL>



<BLOCKQUOTE>
	<PRE><TT>Private Sub OpenDB(bDataMode As Boolean)</TT>
` if any error is encountered, call the code specified by the
` ERR_OpenDB label
On Error GoTo ERR_OpenDB:
    Dim sDBName As String
    ` on slower machines, this may take a moment; therefore,
    ` we will change the mouse pointer to an hourglass to indicate
    ` that the project is still working
    Screen.MousePointer = vbHourglass
    ` retrieve the database name and path from the ReadINI module
    sDBName = DBPath
    ` open the database using the desired data mode specified by 
    ` the user if bDataMode = OPEN_EXCLUSIVE then the value of 
    ` bDataMode is TRUE, telling the OpenDatabase method to open 
    ` the database exclusively; otherwise, OPEN_SHARED = FALSE, 
    ` opening the database in a shared mode
    Set db = dbengine.Workspaces(0).OpenDatabase(sDBName, bDataMode)
    ` if we are at this point, then the database was opened 
    ` succesfully, now display the appropriate label depending on 
    ` the data mode selected
    Select Case bDataMode
        Case OPEN_EXCLUSIVE:
            lblDBStatus = &quot;OPEN: EXCLUSIVE&quot;
        Case OPEN_SHARED:
            lblDBStatus = &quot;OPEN: SHARED&quot;
    End Select
    ` only allow the user to close that database, and do not allow
    ` opening of the database again
    cmdOpenExclusive.Enabled = False
    cmdOpenShared.Enabled = False
    cmdCloseDatabase.Enabled = True
    ` set the mouse pointer to the default icon
    Screen.MousePointer = vbDefault
Exit Sub
ERR_OpenDB:
    ` set the mouse pointer to the default icon
    Screen.MousePointer = vbDefault
    ` call the DatabaseError procedure, passing the Err object, 
    ` which describes the error that has just occurred
    DatabaseError Err
End Sub</PRE>

</BLOCKQUOTE>

<PRE></PRE>

<DL>
	<DT></DT>
	<DD><B>8. </B>To finish this project, enter the code for responding to errors opening
	the database. This code is as follows:
	<P>
</DL>



<BLOCKQUOTE>
	<PRE><TT>Private Sub DatabaseError(oErr As ErrObject)</TT>
    Dim sMessage As String
    ` these are the constant values used to represent the two 
    ` errors that we are going to trap in this code
    Const DB_OPEN = 3356    ` database already open in shared mode
    Const DB_IN_USE = 3045  ` database already open exclusively
    With oErr
        ` select the appropriate code depending upon the error 
        ` number
        Select Case .Number
            ` attempted to open the database exclusively, but it 
            ` is already open in shared mode
            Case DB_OPEN:
                sMessage = _
                &quot;You cannot open the database exclusively &quot; _
                &amp; &quot;because it is already opened by another user.&quot;
            ` attempted to open the database either exclusively or
            ` shared, but it is opened exclusively by another user
            Case DB_IN_USE:
                sMessage = _
                   &quot;You cannot open the database because it is &quot; _
                         &amp; &quot;opened exclusively by another user.&quot;
            ` unexpected error: display the error number and 
            ` description for the user
            Case Else
                sMessage = &quot;Error #&quot; &amp; .Number &amp; &quot;: &quot; &amp; 
                           .Description
        End Select
    End With
    ` display the message for the user
    MsgBox sMessage, vbExclamation, &quot;DATABASE ERROR&quot;
    ` ensure that the database is closed because of the error, and
    ` properly set all the command button enabled properties as 
    ` well as the status label
    cmdCloseDatabase_Click
End Sub</PRE>

</BLOCKQUOTE>

<PRE></PRE>
<P><B>How It Works</B></P>
<P>When you open an Access database exclusively in one instance of the Exclusive
project, assuming that the database is not opened by any other project, the Jet engine
indicates that no other application can open the database by putting codes in the
LDB file named after your database. In the case of this project, you use the ORDERS.MDB
database. The file named ORDERS.LDB indicates how the database is opened and by whom.</P>
<P><B>Comments</B></P>
<P>This project uses an all-or-nothing concept when locking the data from other users.
Either the data can be accessed by others or it cannot. Sometimes this is too general
of a technique to use when developing a multiuser application. In How-To 10.2, you
will use table locking to allow more flexible manageability of your database.</P>
<P>
<H2>10.2 How do I...</H2>
<H3><A NAME="Open a table so that others    "></A><B>Open a table so that others
can't access it while the user is working with it?</B></H3>
<P><B>Problem</B></P>
<P>My application accesses shared data through the Jet engine. The default record-locking
scheme that Jet uses works great for many instances. I need advanced record locking
on particular tables so that others cannot access the entire table when my application
does. How do I open a table with exclusive access?</P>
<P><B>Technique</B></P>
<P>By default, the recordset that you add will have shared rights to other users
unless you explicitly request otherwise. You can indicate what kind of permissions
you will grant other users when accessing that table.</P>
<P>The syntax for the <TT>OpenRecordset</TT> method is</P>


<BLOCKQUOTE>
	<PRE><TT>Set rs = db.OpenRecordset(<I>TableName</I>, dbOpenTable, <I>Options</I>)</TT></PRE>

</BLOCKQUOTE>

<PRE><TT></TT></PRE>
<P>where <TT>rs</TT> is your recordset object variable, <TT>db</TT> is your database
object variable, and <I><TT>TableName</TT></I> is the name of a valid table in the
<TT>db</TT> object. The second parameter, <TT>dbOpenTable</TT>, is the type of recordset
to be used. This parameter can be replaced with <TT>dbOpenDynaset</TT>, <TT>dbOpenSnapshot</TT>,
<TT>dbOpenDynamic</TT>, or <TT>dbOpenForwardOnly</TT>. Table 10.2 lists the valid
options.</P>
<P>
<H4>Table 10.2. Options for the OpenRecordset method.</H4>
<P>
<TABLE BORDER="1">
	<TR ALIGN="LEFT" VALIGN="TOP">
		<TD ALIGN="LEFT"><B><I>OPTION</I></B></TD>
		<TD ALIGN="LEFT"><B><I>Description</I></B></TD>
	</TR>
	<TR ALIGN="LEFT" VALIGN="TOP">
		<TD ALIGN="LEFT"><TT>dbDenyRead</TT></TD>
		<TD ALIGN="LEFT">Denies read permissions to other users</TD>
	</TR>
	<TR ALIGN="LEFT" VALIGN="TOP">
		<TD ALIGN="LEFT"><TT>dbDenyWrite</TT></TD>
		<TD ALIGN="LEFT">Denies write permissions to other users</TD>
	</TR>
</TABLE>
</P>
<P>By using the <TT>dbDenyRead</TT> and <TT>dbDenyWrite</TT> options, you can open
a table exclusively or with partial sharing rights to other users.</P>
<P><B>Steps</B></P>
<P>Open and compile the TableLocker.vbp project. Create two instances of the TableLocker
project by double-clicking its icon twice from Windows Explorer. Move one form down
to reveal the other (they start up in the same position). You should see the forms
shown in Figure 10.2.</P>
<P><A HREF="javascript:popUp('10fig02.gif')"><B>Figure 10.2.</B></A><B> </B><I>Two
instances of the TableLocker project.</I></P>
<P>You can set the permissions assigned to opening the table by using the two check
boxes on the form and then pressing the Open Table command button. You can add records
and then close the table by pressing the appropriate command buttons.</P>
<P>Experiment with opening the table with the two instances of the project. If you
open the table with exclusive rights (deny read access) with one instance and then
attempt to open it with the other in any way, you will be unsuccessful. When this
happens, the application asks whether you want to open the table with Read Only access.
If this is possible, the table will open but deny you the right to add records.</P>
<P><B>1. </B>Create a new project and save it as TableLocker.vbp. Edit <TT>Form1</TT>
to include the objects and properties listed in Table 10.3, and save it as frmTableLocker.vbp.</P>


<BLOCKQUOTE>
	<H4>Table 10.3. Objects and properties for the Exclusive project.</H4>
	<P>
	<TABLE BORDER="1">
	<TR ALIGN="LEFT" VALIGN="TOP">
		<TD ALIGN="LEFT"><B><I>OBJECT</I></B></TD>
		<TD ALIGN="LEFT"><B><I>Property</I></B></TD>
		<TD ALIGN="LEFT"><B><I>Setting</I></B></TD>
	</TR>
	<TR ALIGN="LEFT" VALIGN="TOP">
		<TD ALIGN="LEFT"><TT>Form</TT></TD>
		<TD ALIGN="LEFT"><TT>Name</TT></TD>
		<TD ALIGN="LEFT"><TT>frmTableLocker</TT></TD>
	</TR>
	<TR ALIGN="LEFT" VALIGN="TOP">
		<TD ALIGN="LEFT"></TD>
		<TD ALIGN="LEFT"><TT>Caption</TT></TD>
		<TD ALIGN="LEFT"><TT>USER</TT></TD>
	</TR>
	<TR ALIGN="LEFT" VALIGN="TOP">
		<TD ALIGN="LEFT"><TT>Frame</TT></TD>
		<TD ALIGN="LEFT"><TT>Name</TT></TD>
		<TD ALIGN="LEFT"><TT>fraTableSharing</TT></TD>
	</TR>
	<TR ALIGN="LEFT" VALIGN="TOP">
		<TD ALIGN="LEFT"><TT>Check box</TT></TD>
		<TD ALIGN="LEFT"><TT>Name</TT></TD>
		<TD ALIGN="LEFT"><TT>chkDenyRead</TT></TD>
	</TR>
	<TR ALIGN="LEFT" VALIGN="TOP">
		<TD ALIGN="LEFT"></TD>
		<TD ALIGN="LEFT"><TT>Caption</TT></TD>
		<TD ALIGN="LEFT"><TT>Deny others Read Access to Table</TT></TD>
	</TR>
	<TR ALIGN="LEFT" VALIGN="TOP">
		<TD ALIGN="LEFT"><TT>Check box</TT></TD>
		<TD ALIGN="LEFT"><TT>Name</TT></TD>
		<TD ALIGN="LEFT"><TT>chkDenyWrite</TT></TD>
	</TR>
	<TR ALIGN="LEFT" VALIGN="TOP">
		<TD ALIGN="LEFT"></TD>
		<TD ALIGN="LEFT"><TT>Caption</TT></TD>
		<TD ALIGN="LEFT"><TT>Deny others Write Access to Table</TT></TD>
	</TR>
	<TR ALIGN="LEFT" VALIGN="TOP">
		<TD ALIGN="LEFT"><TT>Command button</TT></TD>
		<TD ALIGN="LEFT"><TT>Name</TT></TD>
		<TD ALIGN="LEFT"><TT>cmdOpenTable</TT></TD>
	</TR>
	<TR ALIGN="LEFT" VALIGN="TOP">
		<TD ALIGN="LEFT"></TD>
		<TD ALIGN="LEFT"><TT>Caption</TT></TD>
		<TD ALIGN="LEFT"><TT>&amp;Open Table</TT></TD>
	</TR>
	<TR ALIGN="LEFT" VALIGN="TOP">
		<TD ALIGN="LEFT"><TT>Command button</TT></TD>
		<TD ALIGN="LEFT"><TT>Name</TT></TD>
		<TD ALIGN="LEFT"><TT>cmdAddRecord</TT></TD>
	</TR>
	<TR ALIGN="LEFT" VALIGN="TOP">
		<TD ALIGN="LEFT"></TD>
		<TD ALIGN="LEFT"><TT>Caption</TT></TD>
		<TD ALIGN="LEFT"><TT>&amp;Add Record</TT></TD>
	</TR>
	<TR ALIGN="LEFT" VALIGN="TOP">
		<TD ALIGN="LEFT"><TT>Command button</TT></TD>
		<TD ALIGN="LEFT"><TT>Name</TT></TD>
		<TD ALIGN="LEFT"><TT>cmdCloseTable</TT></TD>
	</TR>
	<TR ALIGN="LEFT" VALIGN="TOP">
		<TD ALIGN="LEFT"></TD>
		<TD ALIGN="LEFT"><TT>Caption</TT></TD>
		<TD ALIGN="LEFT"><TT>&amp;Close Table</TT></TD>
	</TR>
	<TR ALIGN="LEFT" VALIGN="TOP">
		<TD ALIGN="LEFT"><TT>Command button</TT></TD>
		<TD ALIGN="LEFT"><TT>Name</TT></TD>
		<TD ALIGN="LEFT"><TT>cmdExit</TT></TD>
	</TR>
	<TR ALIGN="LEFT" VALIGN="TOP">
		<TD ALIGN="LEFT"></TD>
		<TD ALIGN="LEFT"><TT>Caption</TT></TD>
		<TD ALIGN="LEFT"><TT>E&amp;xit</TT></TD>
	</TR>
	</TABLE>
</P>

</BLOCKQUOTE>


<DL>
	<DT></DT>
	<DD><B>2. </B>Enter the following declarations for the form-level database and recordset
	object variables:
	<P>
</DL>



<BLOCKQUOTE>
	<PRE><TT>Option Explicit</TT>
` form-level object variables used to access the database and
` recordset objects used throughout this project
Private db As Database
Private rs As Recordset</PRE>

</BLOCKQUOTE>

<PRE></PRE>

<DL>
	<DT></DT>
	<DD><B>3. </B>Now enter the code to initialize the form to indicate that the table
	is closed:
	<P>
</DL>



<BLOCKQUOTE>
	<PRE><TT>Private Sub Form_Initialize()</TT>
    ` initialize the form controls to show that the table is 
    ` closed upon startup of project
    cmdCloseTable_Click
End Sub</PRE>

</BLOCKQUOTE>

<PRE></PRE>

<DL>
	<DT></DT>
	<DD><B>4. </B>Open the database in the <TT>Form_Load</TT> event as shown next. The
	<TT>DBPath</TT> function is from the ReadINI module included with the distribution
	CD-ROM to indicate where the <TT>ORDERS</TT> database is located on your machine.
	<P>
</DL>



<BLOCKQUOTE>
	<PRE><TT>Private Sub Form_Load()</TT>
    Dim sDBName As String
    ` obtain the name and path of the table to be used in this
    ` project from the ReadINI module
    sDBName = DBPath
    ` open the database
    ` by not specifying an exclusive mode, the database is opened 
    ` in shared mode
    Set db = DBEngine.Workspaces(0).OpenDatabase(sDBName)
End Sub</PRE>

</BLOCKQUOTE>

<PRE></PRE>

<DL>
	<DT></DT>
	<DD><B>5. </B>By placing the following code in the <TT>Form_Unload</TT> event, you
	can ensure that it runs even if the user does not terminate the application by using
	the Exit command button:
	<P>
</DL>



<BLOCKQUOTE>
	<PRE><TT>Private Sub Form_Unload(Cancel As Integer)</TT>
    ` close the database and recordset objects by setting them to 
    ` nothing
    Set db = Nothing
    Set rs = Nothing
End Sub</PRE>

</BLOCKQUOTE>

<PRE></PRE>

<DL>
	<DT></DT>
	<DD><B>6. </B>Now enter the <TT>cmdOpenTable_Click</TT> event code as shown next.
	This event opens the table using the check box values of the <TT>frmTableLocker</TT>
	form to determine the permissions assigned to the opening of the table. If an error
	occurs, the application calls the <TT>TableError</TT> routine to gracefully handle
	it and might try opening the table again.
	<P>
</DL>



<BLOCKQUOTE>
	<PRE><TT>Private Sub cmdOpenTable_Click()</TT>
` if an error occurs, call the ERR_cmdOpenTable_Click code located
` at the end of this procedure
On Error GoTo ERR_cmdOpenTable_Click:
    ` local variable used to store permissions
    Dim nAccessValue As Integer
    ` set the mouse pointer to an hourglass because on some 
    ` machines, this could take a few seconds
    Screen.MousePointer = vbHourglass
    ` default the permissions to nothing (all access okay)
    nAccessValue = 0
    ` apply the proper permissions that were restricted by the 
    ` user
    If (chkDenyRead) Then nAccessValue = nAccessValue + dbDenyRead
    If (chkDenyWrite) Then nAccessValue = nAccessValue + _
       dbDenyWrite
    ` open the table using the permission variable
    Set rs = db.OpenRecordset(&quot;Customers&quot;, dbOpenTable, _
    nAccessValue)
    ` set the index to the PrimaryKey used later in GetPrimaryKey
    rs.Index = &quot;PrimaryKey&quot;
    ` release any locks that may be on the table, and process any
    ` data that is waiting to be completed
    DBEngine.Idle dbRefreshCache
    ` allow the correct status of the enabled property of the
    ` frmTableLocker controls
    cmdOpenTable.Enabled = False
    chkDenyRead.Enabled = False
    chkDenyWrite.Enabled = False
    cmdAddRecord.Enabled = True
    cmdCloseTable.Enabled = True
    ` set the mousepointer back to its default because we are now 
    ` finished
    Screen.MousePointer = vbDefault
Exit Sub
ERR_cmdOpenTable_Click:
    ` an error has occurred; therefore, change the mouse pointer 
    ` back to an hourglass
    Screen.MousePointer = vbDefault
    ` call the TableError function, passing the error object 
    ` describing the error that has occurred
    ` if a value of True is returned, we are going to try opening 
    ` the table again with read-only access
    If (TableError(Err)) Then
        chkDenyRead = False
        chkDenyWrite = False
        nAccessValue = dbReadOnly
        Resume
    End If
End Sub</PRE>

</BLOCKQUOTE>

<PRE></PRE>

<DL>
	<DT></DT>
	<DD><B>7. </B>When the user clicks the Add Record command button, a dummy record
	is added to the table using a unique primary key that is obtained by calling the
	<TT>GetUniqueKey</TT> function. Again, if there is an error, the <TT>TableError</TT>
	routine is called to handle it. The code for the <TT>cmdAddRecord_Click</TT> event
	is as follows:
	<P>
</DL>



<BLOCKQUOTE>
	<PRE><TT>Private Sub cmdAddRecord_Click()</TT>
` if an error occurs, call the ERR_cmdAddRecord code located at 
` the end of this procedure
On Error GoTo ERR_cmdAddRecord:
    Dim lPrimaryKey As Long
    Dim sMessage As String
    ` used to populate fields in Customer table
    ` this is necessary because most of the fields belong to 
    ` indexes, making them required fields
    Const DUMMY_INFO = &quot;&lt;&gt;&quot;
    ` retrieve a unique key from the GetPrimaryKey routine
    lPrimaryKey = GetPrimaryKey
    With rs
        ` add a new record
        .AddNew
        ` fill in the required fields
        .Fields(&quot;Customer Number&quot;) = lPrimaryKey
        .Fields(&quot;Customer Name&quot;) = DUMMY_INFO
        .Fields(&quot;Street Address&quot;) = DUMMY_INFO
        .Fields(&quot;City&quot;) = DUMMY_INFO
        .Fields(&quot;State&quot;) = DUMMY_INFO
        .Fields(&quot;Zip Code&quot;) = DUMMY_INFO
        ` make saves (if an error will occur, it will be here)
        .Update
    End With
    ` if we got this far, add new record was successfull
    sMessage = &quot;Record added successfully!&quot;
    MsgBox sMessage, vbInformation, &quot;ADD RECORD&quot;
Exit Sub
ERR_cmdAddRecord:
    ` an error has occurred; call the TableError function and pass
    ` the Err object describing the error
    TableError Err
End Sub</PRE>

</BLOCKQUOTE>

<PRE></PRE>

<DL>
	<DT></DT>
	<DD><B>8. </B>Enter the following <TT>cmdCloseTable_Click</TT> event code. This code
	sets the recordset object variable to nothing (the equivalent of closing the recordset)
	and sets the <TT>Enabled</TT> property of the controls on the form to their appropriate
	state.
	<P>
</DL>



<BLOCKQUOTE>
	<PRE><TT>Private Sub cmdCloseTable_Click()</TT>
    ` set the rs object variable to nothing, closing the recordset
    Set rs = Nothing
    ` properly display the controls on the frmTableLocker form
    chkDenyRead.Enabled = True
    chkDenyWrite.Enabled = True
    cmdOpenTable.Enabled = True
    cmdAddRecord.Enabled = False
    cmdCloseTable.Enabled = False
End Sub</PRE>

</BLOCKQUOTE>

<PRE></PRE>

<DL>
	<DT></DT>
	<DD><B>9. </B>Enter the <TT>cmdExit_Click</TT> code shown next to end the project.
	The <TT>Unload</TT> <TT>Me</TT> code will invoke the <TT>Form_Unload</TT> event where
	the database and recordset object variables will be set to nothing.
	<P>
</DL>



<BLOCKQUOTE>
	<PRE><TT>Private Sub cmdExit_Click()</TT>
    ` using Unload Me will call Form_Unload where the form-level
    ` database and recordset object variables will be set to 
    ` nothing
    Unload Me
End Sub</PRE>

</BLOCKQUOTE>

<PRE></PRE>

<DL>
	<DT></DT>
	<DD><B>10. </B>The <TT>GetPrimaryKey</TT> function returns a unique key based on
	the <TT>Customer Name</TT> field of the Customers table you are accessing:
	<P>
</DL>



<BLOCKQUOTE>
	<PRE><TT>Private Function GetPrimaryKey()</TT>
    ` return a unique primary key based on the Customer Number 
    ` field
    With rs
        ` if there are records in the table already, find the last 
        ` one and add one to the Customer Number as a unique 
        ` Primary Key; otherwise, there are no records in the 
        ` table so return 1 for the first new record to be added
        If (Not (.EOF And .BOF)) Then
            .MoveLast
            GetPrimaryKey = .Fields(&quot;Customer Number&quot;) + 1
        Else
            GetPrimaryKey = 1
        End If
    End With
End Function</PRE>

</BLOCKQUOTE>

<PRE></PRE>

<DL>
	<DT></DT>
	<DD><B>11. </B>The <TT>TableError </TT>function contains the code that handles all
	the input and output errors that occur within this application. If users cannot open
	the table with the permissions that were requested, they are asked whether they want
	to try again with read-only access. Enter the code for the <TT>TableError</TT> function:
	<P>
</DL>



<BLOCKQUOTE>
	<PRE><TT>Private Function TableError(oErr As ErrObject) As Boolean</TT>
    Dim sMessage As String
    Dim nResponse As Integer
    ` these are the constant values used to represent the four 
    ` errors that we are going to trap in this code
    Const TB_OPEN = 3262    ` database already open in shared mode
    Const TB_IN_USE = 3261  ` database already open exclusively
    Const TB_READ_ONLY = 3027    ` can't save, read only
    Const TB_LOCKED = 3186       ` table is locked, cannot update
    ` default the return value of the function to false, which 
    ` will indicate that we do not want to try again
    TableError = False
    With oErr
        ` select the appropriate code depending upon the error 
        ` number
        Select Case .Number
           ` the table couldn't be opened using the permissions 
           ` requested; ask the user if they would like to open it 
           ` in read-only mode
           Case TB_OPEN, TB_IN_USE:
             sMessage = &quot;There was an error opening the table. &quot; _
                         &amp; &quot;Would you like to try read only mode?&quot;
             nResponse = MsgBox(sMessage, vbYesNo + vbQuestion, _
             &quot;ERROR&quot;)
                If (nResponse = vbYes) Then TableError = True
                Exit Function
            ` the table is read only and you cannot add a new 
            ` record
            Case TB_READ_ONLY:
               sMessage = &quot;You cannot add a record because the &quot; _
                     &amp; &quot;database is currently opened with read &quot; _
                     &amp; &quot;only status.&quot;
            ` the table is locked and you cannot add a new record
            Case TB_LOCKED:
               sMessage = &quot;You cannot add a record because the &quot; _
                         &amp; &quot;database is currently locked by 
                         &amp; &quot;another user.&quot;
            ` unexpected error: display the error number and
            ` description for the user
            Case Else
                sMessage = &quot;Error #&quot; &amp; .Number &amp; &quot;: &quot; &amp; _
                .Description
        End Select
    End With
    ` display the message for the user
    MsgBox sMessage, vbExclamation, &quot;TABLE ERROR&quot;
    ` ensure that the database is closed because of the error, and
    ` properly set all the command button enabled properties, as 
    ` well as the status label
    cmdCloseTable_Click
End Function</PRE>

</BLOCKQUOTE>

<PRE></PRE>
<P><B>How It Works</B></P>
<P>This project uses the <TT>dbDenyRead</TT> and <TT>dbDenyWrite</TT> options when
opening the Customer table to deny rights to other users when they attempt to open
the table. If another user attempts to open the table that is already opened with
<TT>dbDenyRead</TT>, it is considered opened exclusively. If the table is already
opened with the <TT>dbDenyWrite</TT> option, the user can only open the table with
a <TT>dbReadOnly</TT> option, not allowing new records or editing of ones that already
exist.</P>
<P><B>Comments</B></P>
<P>There is another parameter you can specify when you open a table; this is called
the <TT>LockEdits</TT> parameter. Table 10.4 describes the options you can use for
the <TT>LockEdits</TT> parameter.</P>
<P>
<H4>Table 10.4. The LockEdits parameter.</H4>
<P>
<TABLE BORDER="1">
	<TR ALIGN="LEFT" VALIGN="TOP">
		<TD ALIGN="LEFT"><B><I>OPTION</I></B></TD>
		<TD ALIGN="LEFT"><B><I>Description</I></B></TD>
	</TR>
	<TR ALIGN="LEFT" VALIGN="TOP">
		<TD ALIGN="LEFT"><TT>dbPessimistic</TT></TD>
		<TD ALIGN="LEFT">Page is locked at <TT>Edit</TT> method.</TD>
	</TR>
	<TR ALIGN="LEFT" VALIGN="TOP">
		<TD ALIGN="LEFT"><TT>dbOptimistic</TT></TD>
		<TD ALIGN="LEFT">Page is locked at <TT>Update</TT> method.</TD>
	</TR>
</TABLE>
</P>
<P><TT>dbPessimistic</TT> is the default value for this fourth parameter of the <TT>OpenRecordset</TT>
method and indicates that the page is to be locked as soon as the <TT>Edit</TT> method
is encountered. The <TT>dbOptimistic</TT> option works a little differently--it waits
until the <TT>Update</TT> method is called to lock the page. The main reason for
using the <TT>dbOptimistic</TT> option is to allow less time for the page to be locked.
How-To 10.3 demonstrates these options.</P>
<P>
<H2>10.3 How do I...</H2>
<H3><A NAME="Work with locked records?"></A><B>Work with locked records?</B></H3>
<P><B>Problem</B></P>
<P>My application is being designed to allow multiple users to access the same data.
It is inevitable that sooner or later two users will attempt to edit the same data.
How do I write proper record-locking code to guard my application from situations
like this and to ensure database integrity?</P>
<P><B>Technique</B></P>
<P>As touched on in How-To 10.2, you can set the way in which a record is locked
by accessing the <TT>LockEdits</TT> property of the recordset. In doing this, you
can set the value of this property to either pessimistic or optimistic. The default
value for <TT>LockEdits</TT> is <TT>True</TT>, which corresponds to pessimistic.
By setting this property to <TT>False</TT>, you obtain optimistic record locking.</P>
<P>Pessimistic record locking locks the record during the time indicated by the call
to the <TT>Edit</TT> method and the call to the <TT>Update</TT> method of a recordset.
Optimistic record locking locks the record during the call to the <TT>Update</TT>
method.</P>
<P>With the potential danger of database corruption with multiuser access, you can
expect to encounter numerous trappable runtime errors with record locking. The errors
are listed here:</P>

<UL>
	<LI><TT>Error 3167: Record is deleted.</TT>
	<P>
	<LI><TT>Error 3197: Record has changed; operation halted.</TT>
	<P>
	<LI><TT>Error 3260: Record currently locked by another user, cannot update.</TT>
</UL>

<P>It has become an acceptable programming technique to trap these errors and respond
to them at such times. It is common to expect some or all of these errors when running
a multiuser application, as you will see in this project.</P>
<P><B>Steps</B></P>
<P>Open the <TT>RecordLocker</TT> project and compile it. Open two instances of the
project and run them simultaneously. You should see the forms shown in Figure 10.3.
With one instance, open a record for editing. With the other instance, select pessimistic
record locking and edit the record. You will receive an error because the application
is attempting to lock the record from the time the <TT>Edit</TT> method is called.
Try changing the record locking to optimistic and edit the record. You will be able
to get to this point; however, if you now click the Update button, you will receive
an error. This is because optimistic record locking attempts to lock the record when
the <TT>Update</TT> method is called.</P>
<P><A HREF="javascript:popUp('10fig03.gif')"><B>Figure 10.3.</B></A><B> </B><I>Two
instances of the RecordLocker project.</I></P>
<P>The user can navigate the recordset by using the four buttons below the option
buttons. The user can also refresh the current record by clicking the Refresh button.
This step is useful to ensure that you have the most up-to-date information for the
current record in case another user has already changed it.</P>

<DL>
	<DT></DT>
	<DD><B>1. </B>Create a new project and call it RecordLocker.vbp. Create the objects
	and change the properties as listed in Table 10.5. Save the form as frmRecordlocker.frm.
	Note that the <TT>cmdMove</TT> command buttons are a control array.
	<P>
</DL>



<BLOCKQUOTE>
	<H4>Table 10.5. Objects and properties for the Exclusive project.</H4>
	<P>
	<TABLE BORDER="1">
	<TR ALIGN="LEFT" VALIGN="TOP">
		<TD ALIGN="LEFT"><B><I>OBJECT</I></B></TD>
		<TD ALIGN="LEFT"><B><I>Property</I></B></TD>
		<TD ALIGN="LEFT"><B><I>Setting</I></B></TD>
	</TR>
	<TR ALIGN="LEFT" VALIGN="TOP">
		<TD ALIGN="LEFT"><TT>Form</TT></TD>
		<TD ALIGN="LEFT"><TT>Name</TT></TD>
		<TD ALIGN="LEFT"><TT>frmRecordLocker</TT></TD>
	</TR>
	<TR ALIGN="LEFT" VALIGN="TOP">
		<TD ALIGN="LEFT"></TD>
		<TD ALIGN="LEFT"><TT>Caption</TT></TD>
		<TD ALIGN="LEFT"><TT>USER</TT></TD>
	</TR>
	<TR ALIGN="LEFT" VALIGN="TOP">
		<TD ALIGN="LEFT"><TT>Frame</TT></TD>
		<TD ALIGN="LEFT"><TT>Name</TT></TD>
		<TD ALIGN="LEFT"><TT>fraRecord</TT></TD>
	</TR>
	<TR ALIGN="LEFT" VALIGN="TOP">
		<TD ALIGN="LEFT"><TT>Text box</TT></TD>
		<TD ALIGN="LEFT"><TT>Name</TT></TD>
		<TD ALIGN="LEFT"><TT>txtCustomerName</TT></TD>
	</TR>
	<TR ALIGN="LEFT" VALIGN="TOP">
		<TD ALIGN="LEFT"><TT>Text box</TT></TD>
		<TD ALIGN="LEFT"><TT>Name</TT></TD>
		<TD ALIGN="LEFT"><TT>txtStreetAddress</TT></TD>
	</TR>
	<TR ALIGN="LEFT" VALIGN="TOP">
		<TD ALIGN="LEFT"><TT>Option button</TT></TD>
		<TD ALIGN="LEFT"><TT>Name</TT></TD>
		<TD ALIGN="LEFT"><TT>optPessimisticLocking</TT></TD>
	</TR>
	<TR ALIGN="LEFT" VALIGN="TOP">
		<TD ALIGN="LEFT"></TD>
		<TD ALIGN="LEFT"><TT>Caption</TT></TD>
		<TD ALIGN="LEFT"><TT>Pessimistic Record Locking</TT></TD>
	</TR>
	<TR ALIGN="LEFT" VALIGN="TOP">
		<TD ALIGN="LEFT"><TT>Option button</TT></TD>
		<TD ALIGN="LEFT"><TT>Name</TT></TD>
		<TD ALIGN="LEFT"><TT>optOptimisticLocking</TT></TD>
	</TR>
	<TR ALIGN="LEFT" VALIGN="TOP">
		<TD ALIGN="LEFT"></TD>
		<TD ALIGN="LEFT"><TT>Caption</TT></TD>
		<TD ALIGN="LEFT"><TT>Optimistic Record Locking</TT></TD>
	</TR>
	<TR ALIGN="LEFT" VALIGN="TOP">
		<TD ALIGN="LEFT"><TT>Command button</TT></TD>
		<TD ALIGN="LEFT"><TT>Name</TT></TD>
		<TD ALIGN="LEFT"><TT>cmdEdit</TT></TD>
	</TR>
	<TR ALIGN="LEFT" VALIGN="TOP">
		<TD ALIGN="LEFT"></TD>
		<TD ALIGN="LEFT"><TT>Caption</TT></TD>
		<TD ALIGN="LEFT"><TT>&amp;Edit</TT></TD>
	</TR>
	<TR ALIGN="LEFT" VALIGN="TOP">
		<TD ALIGN="LEFT"><TT>Command button</TT></TD>
		<TD ALIGN="LEFT"><TT>Name</TT></TD>
		<TD ALIGN="LEFT"><TT>cmdUpdate</TT></TD>
	</TR>
	<TR ALIGN="LEFT" VALIGN="TOP">
		<TD ALIGN="LEFT"></TD>
		<TD ALIGN="LEFT"><TT>Caption</TT></TD>
		<TD ALIGN="LEFT"><TT>&amp;Update</TT></TD>
	</TR>
	<TR ALIGN="LEFT" VALIGN="TOP">
		<TD ALIGN="LEFT"><TT>Command button</TT></TD>
		<TD ALIGN="LEFT"><TT>Name</TT></TD>
		<TD ALIGN="LEFT"><TT>cmdRefresh</TT></TD>
	</TR>
	<TR ALIGN="LEFT" VALIGN="TOP">
		<TD ALIGN="LEFT"></TD>
		<TD ALIGN="LEFT"><TT>Caption</TT></TD>
		<TD ALIGN="LEFT"><TT>&amp;Refresh</TT></TD>
	</TR>
	<TR ALIGN="LEFT" VALIGN="TOP">
		<TD ALIGN="LEFT"><TT>Command button</TT></TD>
		<TD ALIGN="LEFT"><TT>Name</TT></TD>
		<TD ALIGN="LEFT"><TT>cmdClose</TT></TD>
	</TR>
	<TR ALIGN="LEFT" VALIGN="TOP">
		<TD ALIGN="LEFT"></TD>
		<TD ALIGN="LEFT"><TT>Caption</TT></TD>
		<TD ALIGN="LEFT"><TT>&amp;Close</TT></TD>
	</TR>
	<TR ALIGN="LEFT" VALIGN="TOP">
		<TD ALIGN="LEFT"><TT>Command button</TT></TD>
		<TD ALIGN="LEFT"><TT>Name</TT></TD>
		<TD ALIGN="LEFT"><TT>cmdMove</TT></TD>
	</TR>
	<TR ALIGN="LEFT" VALIGN="TOP">
		<TD ALIGN="LEFT"></TD>
		<TD ALIGN="LEFT"><TT>Caption</TT></TD>
		<TD ALIGN="LEFT"><TT>&lt;&lt;</TT></TD>
	</TR>
	<TR ALIGN="LEFT" VALIGN="TOP">
		<TD ALIGN="LEFT"></TD>
		<TD ALIGN="LEFT"><TT>Index</TT></TD>
		<TD ALIGN="LEFT"><TT>0</TT></TD>
	</TR>
	<TR ALIGN="LEFT" VALIGN="TOP">
		<TD ALIGN="LEFT"><TT>Command button</TT></TD>
		<TD ALIGN="LEFT"><TT>Name</TT></TD>
		<TD ALIGN="LEFT"><TT>cmdMove</TT></TD>
	</TR>
	<TR ALIGN="LEFT" VALIGN="TOP">
		<TD ALIGN="LEFT"></TD>
		<TD ALIGN="LEFT"><TT>Caption</TT></TD>
		<TD ALIGN="LEFT"><TT>&lt;</TT></TD>
	</TR>
	<TR ALIGN="LEFT" VALIGN="TOP">
		<TD ALIGN="LEFT"></TD>
		<TD ALIGN="LEFT"><TT>Index</TT></TD>
		<TD ALIGN="LEFT"><TT>1</TT></TD>
	</TR>
	<TR ALIGN="LEFT" VALIGN="TOP">
		<TD ALIGN="LEFT"><TT>Command button</TT></TD>
		<TD ALIGN="LEFT"><TT>Name</TT></TD>
		<TD ALIGN="LEFT"><TT>cmdMove</TT></TD>
	</TR>
	<TR ALIGN="LEFT" VALIGN="TOP">
		<TD ALIGN="LEFT"></TD>
		<TD ALIGN="LEFT"><TT>Caption</TT></TD>
		<TD ALIGN="LEFT"><TT>&gt;</TT></TD>
	</TR>
	<TR ALIGN="LEFT" VALIGN="TOP">
		<TD ALIGN="LEFT"></TD>
		<TD ALIGN="LEFT"><TT>Index</TT></TD>
		<TD ALIGN="LEFT"><TT>2</TT></TD>
	</TR>
	<TR ALIGN="LEFT" VALIGN="TOP">
		<TD ALIGN="LEFT"><TT>Command button</TT></TD>
		<TD ALIGN="LEFT"><TT>Name</TT></TD>
		<TD ALIGN="LEFT"><TT>cmdMove</TT></TD>
	</TR>
	<TR ALIGN="LEFT" VALIGN="TOP">
		<TD ALIGN="LEFT"></TD>
		<TD ALIGN="LEFT"><TT>Caption</TT></TD>
		<TD ALIGN="LEFT"><TT>&gt;&gt;</TT></TD>
	</TR>
	<TR ALIGN="LEFT" VALIGN="TOP">
		<TD ALIGN="LEFT"></TD>
		<TD ALIGN="LEFT"><TT>Index</TT></TD>
		<TD ALIGN="LEFT"><TT>3</TT></TD>
	</TR>
	<TR ALIGN="LEFT" VALIGN="TOP">
		<TD ALIGN="LEFT"><TT>Label</TT></TD>
		<TD ALIGN="LEFT"><TT>Name</TT></TD>
		<TD ALIGN="LEFT"><TT>lblCustomerName</TT></TD>
	</TR>
	<TR ALIGN="LEFT" VALIGN="TOP">
		<TD ALIGN="LEFT"></TD>
		<TD ALIGN="LEFT"><TT>Caption</TT></TD>
		<TD ALIGN="LEFT"><TT>&amp;Customer Name</TT></TD>
	</TR>
	<TR ALIGN="LEFT" VALIGN="TOP">
		<TD ALIGN="LEFT"><TT>Label</TT></TD>
		<TD ALIGN="LEFT"><TT>Name</TT></TD>
		<TD ALIGN="LEFT"><TT>lblStreetAddress</TT></TD>
	</TR>
	<TR ALIGN="LEFT" VALIGN="TOP">
		<TD ALIGN="LEFT"></TD>
		<TD ALIGN="LEFT"><TT>Caption</TT></TD>
		<TD ALIGN="LEFT"><TT>&amp;Street Address</TT></TD>
	</TR>
	</TABLE>
</P>

</BLOCKQUOTE>


<DL>
	<DT></DT>
	<DD><B>2. </B>Enter the following form-level variables in the declarations section
	of your project. The first two variables are used to hold the database and recordset
	objects. The <TT>m_bEditMode</TT> variable is used to indicate whether the project
	is in edit mode. The last two declarations are constant values used to determine
	whether the <TT>LockEdits</TT> property of the recordset is set to pessimistic or
	optimistic.
	<P>
</DL>



<BLOCKQUOTE>
	<PRE><TT>Option Explicit</TT>
` form-level object variables that hold the database and recordset
` objects used throughout this project
Private db As Database
Private rs As Recordset
` form-level boolean variable used to indicate when the current
` record is in edit mode
Private m_bEditMode As Boolean
` form-level constant declarations used to indicate pessimistic or
` optimistic record locking
Private Const PESSIMISTIC = True
Private Const OPTIMISTIC = False</PRE>

</BLOCKQUOTE>

<PRE></PRE>

<DL>
	<DT></DT>
	<DD><B>3. </B>Now enter the code to open the database and recordset in the <TT>Form_Load</TT>
	event. This code also determines whether the recordset is empty (ending the application
	if so) and, if not, displays the first record.
	<P>
</DL>



<BLOCKQUOTE>
	<PRE><TT>Private Sub Form_Load()</TT>
    Dim sDBName As String
    ` get the path and name of the database used in this project
    ` from the ReadINI module
    sDBName = DBPath
    ` open the database and recordset
    Set db = DBEngine.Workspaces(0).OpenDatabase(sDBName)
    Set rs = db.OpenRecordset(&quot;Customers&quot;, dbOpenDynaset)
    With rs
        ` if the recordset is empty, then inform the user and end
        If (.EOF And .BOF) Then
            MsgBox &quot;Table Empty!&quot;, vbExclamation, &quot;ERROR&quot;
            Unload Me
        Else
            ` move to the first record and display it
            .MoveFirst
            DisplayRecord
        End If
    End With
    ` set the optPessimisticLocking value to true (this will
    ` automatically call the optPessimisticLocking_Click event
    optPessimisticLocking = True
End Sub</PRE>

</BLOCKQUOTE>

<PRE></PRE>

<DL>
	<DT></DT>
	<DD><B>4. </B>The <TT>Form_Unload</TT> event is called when the application is terminated.
	By setting the form-level object variables <TT>db</TT> and <TT>rs</TT> to nothing,
	you achieve the same status as you would closing them with the <TT>Close</TT> method.
	<P>
</DL>



<BLOCKQUOTE>
	<PRE><TT>Private Sub Form_Unload(Cancel As Integer)</TT>
    ` set the form-level object variables for the database and
    ` recordset to nothing (this is the same as closing each 
    ` object)
    Set db = Nothing
    Set rs = Nothing
End Sub</PRE>

</BLOCKQUOTE>

<PRE></PRE>

<DL>
	<DT></DT>
	<DD><B>5. </B>Enter the <TT>cmdEdit_Click</TT> code shown next. This event first
	checks to see whether the record is in edit mode and updates the record if it is.
	After this, the recordset is placed in edit mode via the <TT>Edit</TT> method. If
	an error is going to occur, it will be here. If the user has selected pessimistic
	locking and the record is currently open, an error will occur. If no error is encountered,
	the text boxes are enabled to allow editing, and the form-level Boolean flag, <TT>m_bEditMode</TT>,
	is set to <TT>True</TT> to indicate that edit mode <BR>
	is on.
	<P>
</DL>



<BLOCKQUOTE>
	<PRE><TT>Private Sub cmdEdit_Click()</TT>
` if there is an error, goto the code labeled by ERR_cmdEdit_Click
On Error GoTo ERR_cmdEdit_Click:
    ` if the current record is in edit mode, call UpdateRecord
    If (m_bEditMode) Then UpdateRecord
    ` set the record to edit mode
    rs.Edit
    ` indicate that the record is in edit mode through the
    ` m_m_bEditMode form-level boolean variable
    m_bEditMode = True
    ` disable the edit command button and enable the update 
    ` command button and text box controls
    cmdEdit.Enabled = False
    cmdUpdate.Enabled = True
    txtCustomerName.Enabled = True
    txtStreetAddress.Enabled = True
Exit Sub
ERR_cmdEdit_Click:
    ` an error has occurred, call the RecordError routine with the
    ` error object that describes the error and a string 
    ` indicating the method attempted at the time of the error
    RecordError Err, &quot;edit&quot;
End Sub</PRE>

</BLOCKQUOTE>

<PRE></PRE>

<DL>
	<DT></DT>
	<DD><B>6. </B>The code for the <TT>cmdUpdate_Click</TT> event is easy. Simply call
	the <TT>UpdateRecord</TT> routine as shown here:
	<P>
</DL>



<BLOCKQUOTE>
	<PRE><TT>Private Sub cmdUpdate_Click()</TT>
    ` update the current record in the database
    UpdateRecord
End Sub</PRE>

</BLOCKQUOTE>

<PRE></PRE>

<DL>
	<DT></DT>
	<DD><B>7. </B>Now enter the code for the <TT>cmdRefresh_Click</TT> event as shown
	next. This code again updates the record if it is in edit mode; then it performs
	a requery of the recordset and displays the current record.
	<P>
</DL>



<BLOCKQUOTE>
	<PRE><TT>Private Sub cmdRefresh_Click()</TT>
</PRE>
	<P>
	<PRE><TT>    ` if the current record is in edit mode, call UpdateRecord</TT>
    If (m_bEditMode) Then UpdateRecord
    ` requery dynaset and move the record pointer
    With rs
        .Requery
        .MoveNext
        .MovePrevious
    End With
    ` redisplay the current record
    DisplayRecord
End Sub</PRE>

</BLOCKQUOTE>

<PRE></PRE>

<DL>
	<DT></DT>
	<DD><B>8. </B>Enter the code for the <TT>cmdClose_Click</TT> event as shown here.
	This ends the application, and the <TT>Form_Unload</TT> event is automatically called.
	<P>
</DL>



<BLOCKQUOTE>
	<PRE><TT>Private Sub cmdClose_Click()</TT>
    ` end the application, this will call the Form_Unload event
    Unload Me
End Sub</PRE>

</BLOCKQUOTE>

<PRE></PRE>

<DL>
	<DT></DT>
	<DD><B>9. </B>Now enter the code for both option buttons on the <TT>frmRecordLocker</TT>
	form as shown next. Each event checks to see whether the record is in edit mode and
	performs an update if it is. Next, the <TT>LockEdits</TT> property <BR>
	of the recordset is set to the locking method of choice.
	<P>
</DL>



<BLOCKQUOTE>
	<PRE><TT>Private Sub optPessimisticLocking_Click()</TT>
    ` if the current record is in edit mode, call UpdateRecord
    If (m_bEditMode) Then UpdateRecord
    ` set the LockEdits property of the recordset to Pessimistic
    ` record locking
    rs.LockEdits = PESSIMISTIC
End Sub
Private Sub optOptimisticLocking_Click()
    ` if the current record is in edit mode, call UpdateRecord
    If (m_bEditMode) Then UpdateRecord
    ` set the LockEdits property of the recordset to Optimistic 
    ` record locking
    rs.LockEdits = OPTIMISTIC
End Sub</PRE>

</BLOCKQUOTE>

<PRE></PRE>

<DL>
	<DT></DT>
	<DD><B>10. </B>Now enter the code for the <TT>cmdMove_Click</TT> event. This event
	occurs when the user presses any of the four command buttons belonging to the control
	array <TT>cmdMove</TT>. By comparing the <TT>Index</TT> variable passed as an argument
	to this event with the constants defined, the correct recordset navigation is applied
	and the new record is displayed.
	<P>
</DL>



<BLOCKQUOTE>
	<PRE><TT>Private Sub cmdMove_Click(Index As Integer)</TT>
    ` local constant values used to indicate which command button
    ` was pressed
    ` each constant corresponds to the index of each command 
    ` button
    Const MOVE_FIRST = 0
    Const MOVE_PREVIOUS = 1
    Const MOVE_NEXT = 2
    Const MOVE_LAST = 3
    ` if the current record is in edit mode, call UpdateRecord
    If (m_bEditMode) Then UpdateRecord
    With rs
        Select Case Index
            ` move to the first record
            Case MOVE_FIRST:
                .MoveFirst
            ` move to the previous record; if the record pointer 
            ` is before the first record, then move to the first 
            ` record
            Case MOVE_PREVIOUS:
                .MovePrevious
                If (.BOF) Then .MoveFirst
            ` move to the next record; if the record pointer is
            ` beyond the last record, then move to the last record
            Case MOVE_NEXT:
                .MoveNext
                If (.EOF) Then .MoveLast
            ` move to the last record
            Case MOVE_LAST:
                .MoveLast
        End Select
    End With
    ` display the current record after moving to a new one
    DisplayRecord
End Sub</PRE>

</BLOCKQUOTE>

<PRE></PRE>

<DL>
	<DT></DT>
	<DD><B>11. </B>The following code displays the record. Enter this in the General
	section <BR>
	of your project. If a new record is displayed, it cannot be in edit mode; therefore,
	you set the <TT>m_bEditMode</TT> variable to <TT>False</TT> and disable the Update
	command button while enabling the Edit command button.
	<P>
</DL>



<BLOCKQUOTE>
	<PRE><TT>Private Sub DisplayRecord()</TT>
    ` disable the customer name and fill it with the current
    ` record's corresponding field value
    With txtCustomerName
        .Text = rs.Fields(&quot;Customer Name&quot;)
        .Enabled = False
    End With
    ` disable the street address and fill it with the current
    ` record's corresponding field value
    With txtStreetAddress
        .Text = rs.Fields(&quot;Street Address&quot;)
        .Enabled = False
    End With
    ` enable the edit and disable the update command buttons
    cmdEdit.Enabled = True
    cmdUpdate.Enabled = False
    ` currently not in edit mode
    m_bEditMode = False
End Sub</PRE>

</BLOCKQUOTE>

<PRE></PRE>

<DL>
	<DT></DT>
	<DD><B>12. </B>Enter the <TT>UpdateRecord</TT> code now. This procedure updates the
	recordset with the values shown on the form. If the recordset <TT>LockEdits</TT>
	property was set to optimistic and the record is currently opened by another user
	at this time, the <TT>Update</TT> method causes an error. Trap the error and call
	the <TT>RecordError</TT> procedure as shown toward the end of this procedure.
	<P>
</DL>



<BLOCKQUOTE>
	<PRE><TT>Private Sub UpdateRecord()</TT>
` if there is an error, goto the code labeled by ERR_UpdateRecord
On Error GoTo ERR_UpdateRecord:
    ` set the new values of the record fields to those displayed 
    ` on the form and update the record (this is where an error 
    ` can occur)
    With rs
        .Fields(&quot;Customer Name&quot;) = txtCustomerName
        .Fields(&quot;Street Address&quot;) = txtStreetAddress
        .Update
    End With
    ` display the updated record
    DisplayRecord
Exit Sub
ERR_UpdateRecord:
    ` an error has occurred, call the RecordError routine with the 
    ` error object that describes the error and a string 
    ` indicating the method attempted at the time of the error
    RecordError Err, &quot;update&quot;
End Sub</PRE>

</BLOCKQUOTE>

<PRE></PRE>

<DL>
	<DT></DT>
	<DD><B>13. </B>Finally, enter the <TT>RecordError</TT> code, which displays the proper
	error message for the user based on the error object that was passed to it as a parameter:
	<P>
</DL>



<BLOCKQUOTE>
	<PRE><TT>Private Sub RecordError(oErr As ErrObject, sAction As String)</TT>
    Dim sMessage As String
    ` error constant used to indicate that the current record is
    ` locked and cannot be updated or edited
    Const RECORD_LOCKED = 3260
    With Err
        Select Case .Number
            ` the record cannot be edited
          Case RECORD_LOCKED:
              sMessage = &quot;Cannot &quot; &amp; sAction &amp; &quot; at this time &quot; _
                       &amp; &quot;because the record is currently locked &quot; _
                       &amp; &quot;by another user.&quot;
          ` an unexpected error has occurred
          Case Else:
              sMessage = &quot;ERROR #&quot; &amp; .Number &amp; &quot;: &quot; &amp; _
                         .Description
       End Select
    End With
    ` display the error message created above
    MsgBox sMessage, vbExclamation, &quot;ERROR&quot;
End Sub</PRE>

</BLOCKQUOTE>

<PRE></PRE>
<P><B>How It Works</B></P>
<P>This How-To uses the <TT>LockEdits</TT> property of the recordset object to determine
how a particular record is locked. If the user selects pessimistic locking, the default
setting for the Jet engine, the record becomes locked immediately upon calling the
<TT>Edit</TT> method of the recordset. This lock remains on until the <TT>Update</TT>
method of the recordset is called.</P>
<P>On the other hand, if the user has selected optimistic record locking for the
<TT>LockEdits</TT> property, the record is locked only when the <TT>Update</TT> method
is called. The advantage to this alternative is that the record is not locked for
a potentially long period as with pessimistic locking; however, the data in the record
can change during the time between the calls to the <TT>Edit</TT> and <TT>Update</TT>
methods. If this is the case, a trappable runtime error occurs.</P>
<P>This project allows navigation of the recordset with four command buttons that
emulate the Data control VCR navigation buttons. When the user clicks a navigation
button, the record pointer is repositioned to the first, previous, next, or last
record. If the record pointer goes before the first record or after the last, the
application traps the potential error and repositions the record pointer to the first
or last record.</P>
<P><B>Comments</B></P>
<P>The preceding three How-To projects deal with constantly checking error codes
to determine the state of a database, table, or record. It is very important to always
be a courteous programmer. This means properly coding your applications so that they
will prevent error messages from occurring not only in your own project but also
in other developers' applications.</P>
<P>Table 10.6 lists the most common error messages you might encounter when dealing
with locking databases.</P>
<P>
<H4>Table 10.6. Common database-locking error messages.</H4>
<P>
<TABLE BORDER="1">
	<TR ALIGN="LEFT" VALIGN="TOP">
		<TD ALIGN="LEFT"><B><I>ERROR NUMBER</I></B></TD>
		<TD ALIGN="LEFT"><B><I>Is Generated When...</I></B></TD>
	</TR>
	<TR ALIGN="LEFT" VALIGN="TOP">
		<TD ALIGN="LEFT"><TT>3167</TT></TD>
		<TD ALIGN="LEFT">You use <TT>Edit</TT>, and the record has been deleted since the last time you read
			it.</TD>
	</TR>
	<TR ALIGN="LEFT" VALIGN="TOP">
		<TD ALIGN="LEFT"><TT>3186</TT></TD>
		<TD ALIGN="LEFT">You use <TT>Update</TT> on a new or edited record, and the record's page is locked
			by another user.</TD>
	</TR>
	<TR ALIGN="LEFT" VALIGN="TOP">
		<TD ALIGN="LEFT"><TT>3197</TT></TD>
		<TD ALIGN="LEFT">You use <TT>Edit</TT> or <TT>Update</TT>, and the record has changed since the last
			time you read it.</TD>
	</TR>
	<TR ALIGN="LEFT" VALIGN="TOP">
		<TD ALIGN="LEFT"><TT>3027</TT></TD>
		<TD ALIGN="LEFT">You try to write to a table you have opened as read only.</TD>
	</TR>
	<TR ALIGN="LEFT" VALIGN="TOP">
		<TD ALIGN="LEFT"><TT>3260</TT></TD>
		<TD ALIGN="LEFT">You use <TT>Addnew</TT>, <TT>Edit</TT>, or <TT>Update</TT>, and the record's page
			is locked by another user.</TD>
	</TR>
	<TR ALIGN="LEFT" VALIGN="TOP">
		<TD ALIGN="LEFT"><TT>3261</TT></TD>
		<TD ALIGN="LEFT">You try to open a table that another user has opened with <TT>dbDenyRead</TT> or
			<TT>dbDenyWrite</TT>.</TD>
	</TR>
	<TR ALIGN="LEFT" VALIGN="TOP">
		<TD ALIGN="LEFT"><TT>3262</TT></TD>
		<TD ALIGN="LEFT">You try to open a table with <TT>dbDenyRead</TT> or <TT>dbDenyWrite</TT>, and another
			user has the table open.</TD>
	</TR>
	<TR ALIGN="LEFT" VALIGN="TOP">
		<TD ALIGN="LEFT"><TT>3356</TT></TD>
		<TD ALIGN="LEFT">You try to open a database already opened exclusively by another user, or you try
			to open exclusively a database that another user already has opened.</TD>
	</TR>
</TABLE>
</P>
<P>These error messages can be detected at various points in a project and should
be trapped whenever possible.</P>
<P>
<H2>10.4 How do I...</H2>
<H3><A NAME="Work with secured Microsoft ..."></A><B>Work with secured Microsoft
Access database files?</B></H3>
<P><B>Problem</B></P>
<P>I need to create a secure Microsoft Access database file and have my Visual Basic
program manipulate it. How can I do this?</P>
<P><B>Technique</B></P>
<P>Microsoft Access databases support a wide variety of security features. The Jet
engine can control which users and applications can access databases, tables, or
fields. Security features are managed through the use of a system database. By convention,
the database is usually named SYSTEM.MDW.</P>
<P>Every Microsoft Access user is assigned to a workgroup, and a copy of SYSTEM.MDW
is established for each workgroup. An entry for each user in the Windows Registry
points to the correct copy of SYSTEM.MDW for the user's assigned workgroup. This
file is specified with the key <TT>HKEY_LOCAL_MACHINE\<BR>
SOFTWARE\Microsoft\Office\8.0\Access\Jet\3.5\Engines</TT>. In this How-To, you learn
the techniques for accessing the objects in a secured Microsoft Access database.</P>
<P><B>Permissions</B></P>
<P>Each Microsoft Access database file includes a set of permissions that give users
certain specified rights to the database and to the objects within the database.
For the database itself, two permissions can be granted: the right to open the database
(<TT>Open Database</TT>) and the right to open the database exclusively (<TT>Open
Exclusive</TT>).</P>
<P>Although Microsoft Access security covers all database object types, the only
data objects that can be accessed from Visual Basic are tables and queries. Table
10.7 lists the seven permissions that can be granted for table and query objects.
Granting any of these permissions except Read Design implies granting others as well.
Table 10.7 also shows these implied permissions.</P>
<P>
<H4>Table 10.7. Permissions for Microsoft Access tables and queries.</H4>
<P>
<TABLE BORDER="1">
	<TR ALIGN="LEFT" VALIGN="TOP">
		<TD ALIGN="LEFT"><B><I>PERMISSION</I></B></TD>
		<TD ALIGN="LEFT"><B><I>Implies These Additional Permissions</I></B></TD>
	</TR>
	<TR ALIGN="LEFT" VALIGN="TOP">
		<TD ALIGN="LEFT">Read Design</TD>
		<TD ALIGN="LEFT">(none)</TD>
	</TR>
	<TR ALIGN="LEFT" VALIGN="TOP">
		<TD ALIGN="LEFT">Modify Design</TD>
		<TD ALIGN="LEFT">Read Design, Read Data, Update Data, Delete Data</TD>
	</TR>
	<TR ALIGN="LEFT" VALIGN="TOP">
		<TD ALIGN="LEFT">Administer</TD>
		<TD ALIGN="LEFT">All other permissions</TD>
	</TR>
	<TR ALIGN="LEFT" VALIGN="TOP">
		<TD ALIGN="LEFT">Read Data</TD>
		<TD ALIGN="LEFT">Read Design</TD>
	</TR>
	<TR ALIGN="LEFT" VALIGN="TOP">
		<TD ALIGN="LEFT">Update Data</TD>
		<TD ALIGN="LEFT">Read Data, Read Design</TD>
	</TR>
	<TR ALIGN="LEFT" VALIGN="TOP">
		<TD ALIGN="LEFT">Insert Data</TD>
		<TD ALIGN="LEFT">Read Data, Read Design</TD>
	</TR>
	<TR ALIGN="LEFT" VALIGN="TOP">
		<TD ALIGN="LEFT">Delete Data</TD>
		<TD ALIGN="LEFT">Read Data, Read Design</TD>
	</TR>
</TABLE>
</P>
<P><B>Groups and Users</B></P>
<P>Everyone who accesses a Microsoft Access database is a user and is identified
by a username. Users can also be assigned to groups. Every group has a group name.
User and group information for a specified workgroup is stored in the system database
(usually SYSTEM.MDW) file. You can use Microsoft Access (or Visual Basic) to create
users and groups and to assign users to groups.</P>
<P>You grant permissions by users or by groups. Users inherit the rights of their
group, unless you specify otherwise. Assume, for example, that you have a group named
Payroll Department. You assign the entire group only Read Data permission to the
Pay Rates table (and Read Design permission, which is implied by Read Data). For
two users within the group, Tom and Betty, you also assign Update Data, Insert Data,
and Delete Data permissions. For one user in the group, Pat, you revoke Read Data
permission. The specific permission assignments you have made for users Tom, Betty,
and Pat override the group permissions for these users.</P>
<P><B>Secured and Unsecured Systems</B></P>
<P>All the preceding information is transparent--and relatively unimportant--as long
as you are working with an unsecured system. When the Workgroup Administrator application
creates a new system database--and thereby creates a new workgroup--the system is
by default an unsecured system. All users are assigned empty strings (<TT>&quot;&quot;</TT>)
as passwords. Users do not log in when they start Access, and your Visual Basic program
does not need to provide a username or password because all users are logged in automatically
with the default name Admin and the password <TT>&quot;&quot;</TT>.</P>
<P>This all changes as soon as the Admin user's password changes, because a password-protected
Admin account makes the system into a secured system. Each time a user starts Microsoft
Access in a secured system, he or she must provide a username, and that name must
be registered in the workgroup's copy of the system database. If the system database
contains a password other than <TT>&quot;&quot;</TT> for the user, the password must
be provided at login. In like manner, before your Visual Basic program can access
a database in a secured system, it must provide a valid username and a password (if
the user is assigned a password).</P>
<P><B>Security ID Numbers</B></P>
<P>Every user and group has a Security ID (SID)--a binary string created by the Jet
engine and stored in the system database where the user or group is defined. With
several important exceptions, the Jet database engine builds a user or group SID
based on two pieces of information:</P>

<UL>
	<LI>The user's name.
	<P>
	<LI>The user's personal identifier (PID)--an alphanumeric string between 4 and 20
	characters that must be provided when a new user is added to the system database.
	(See How-To 10.9 for information on how to add users to the system database.)
</UL>

<P>The SID, therefore, uniquely identifies a user or group.</P>
<P><B>Security IDs and Object Permissions</B></P>
<P>Object permissions are defined by assignment to an SID. You can think of a permission
as a keyhole through which access to an object can be obtained and the SID as a unique
key that fits the keyhole (see Figure 10.4). Each object has a set of keyholes, one
matching the SID &quot;key&quot; for each user or group that has a specific permission.
When you assign permission for an object (a process covered in How-To 10.5), you
in effect &quot;drill another keyhole&quot; into the object and encode it with the
SID of a specific user or group.</P>
<P><B>Ensuring a Secure Database</B></P>
<P>It is altogether too easy to think you have &quot;secured&quot; a Microsoft Access
database yet actually have a security system with gaping holes. The holes can exist
because the predefined default users and groups are exceptions to the way SIDs are
built. Default users' and groups' SIDs are built as shown in Table 10.8.</P>
<P><A HREF="javascript:popUp('10fig04.gif')"><B>Figure 10.4.</B></A><B> </B><I>Security
IDs and permissions.</I></P>
<P>
<H4>Table 10.8. Security ID sources for default users and groups.</H4>
<P>
<TABLE BORDER="1">
	<TR ALIGN="LEFT" VALIGN="TOP">
		<TD ALIGN="LEFT"><B><I>USER OR GROUP</I></B></TD>
		<TD ALIGN="LEFT"><B><I>SID Source</I></B></TD>
	</TR>
	<TR ALIGN="LEFT" VALIGN="TOP">
		<TD ALIGN="LEFT">Admin user</TD>
		<TD ALIGN="LEFT">Hard-coded and identical in every system database</TD>
	</TR>
	<TR ALIGN="LEFT" VALIGN="TOP">
		<TD ALIGN="LEFT">Guest user</TD>
		<TD ALIGN="LEFT">Hard-coded and identical in every system database</TD>
	</TR>
	<TR ALIGN="LEFT" VALIGN="TOP">
		<TD ALIGN="LEFT">Users group</TD>
		<TD ALIGN="LEFT">Hard-coded and identical in every system database</TD>
	</TR>
	<TR ALIGN="LEFT" VALIGN="TOP">
		<TD ALIGN="LEFT">Guests group</TD>
		<TD ALIGN="LEFT">Hard-coded and identical in every system database</TD>
	</TR>
	<TR ALIGN="LEFT" VALIGN="TOP">
		<TD ALIGN="LEFT">Admins group</TD>
		<TD ALIGN="LEFT">Built by the Jet engine from three pieces of data: a username, a company name, and
			an ID number</TD>
	</TR>
</TABLE>
</P>
<P>The information in Table 10.8 has extremely important implications for database
security. The Admin user's SID is hard-coded and identical in every system database;
that means that objects created by the Admin user can be accessed by the Admin user
in any system database. All someone needs to do to gain access to an object created
by an Admin user from any system database is to create a new system database and
log in as Admin. Admin is the default user; in an unsecured system, all users are
Admin. Therefore, if you create an object in an unsecured system, that object belongs
to Admin and cannot be secured.</P>
<P>One solution (recommended by Microsoft in the Microsoft Access documentation)
is to delete the Admin user from the system database. This is permissible as long
as the Admins group contains at least one other user.</P>
<P>Unlike the Admin user SID, the Admins group SID is unique to each system database.
Note in Table 10.8 that the Admins group SID requires an ID number. If the system
database was created by the Microsoft Access setup program, the ID number component
of the Admins group SID is taken from the setup disks, and each set of setup disks
is uniquely encoded. If the system database is created through the Microsoft Access
Workgroup Administrator, the ID number component is computed based on an identifier
entered by the person who creates the system database with the Workgroup Administrator.</P>
<P>This scheme prevents someone who is a member of an Admins group in one system
database from automatically getting Admins group permissions when accessing database
files through other system databases; because the Admins group SIDs are different,
the permissions are different (recall the concept of unique keyholes and keys from
Figure 10.4). But it also means that all users who are currently members of the Admins
group of the system database in use when the database was originally created will
always have the ability to change permissions on all objects in the database--and
this ability cannot be removed by anyone. Therefore, when you create a database you
intend to secure, you should be cognizant of who is defined to the system database
as part of the Admins group.</P>
<P>Another implication of Table 10.8 is that permissions assigned to the Guests or
Users group through one system database will be available to members of the Guests
or Users group in any system database. Therefore, assign the Guests or Users groups
only the permissions you are willing to give to anyone. If you need to assign permissions
to a group of users and you want to restrict who can access the permissions, create
a new group (see How-To 10.10 for details on how to create a group and assign users
to it).</P>
<P><B>Accessing a Secured System Through Visual Basic</B></P>
<P>Before your application can access a secured Microsoft Access system, it needs
to provide the Jet engine with several pieces of information:</P>

<UL>
	<LI>The application must specify which system database file the application wants
	to use. This is normally a file named SYSTEM.MDW.
	<P>
	<LI>The application must provide a username that is listed in that system database
	file.
	<P>
	<LI>If that username has a password, the application must provide the password.
</UL>

<P>After the Jet engine knows where to look for usernames and passwords, you provide
a username and password. You can do this by straightforward assignment to <TT>DBEngine</TT>
properties:</P>


<BLOCKQUOTE>
	<PRE><TT>DBEngine.DefaultUser = &quot;Annette&quot;</TT>
<TT>DBEngine.DefaultPassword = &quot;mouseketeer&quot;</TT></PRE>

</BLOCKQUOTE>

<PRE><TT></TT></PRE>
<P>The username is not case-sensitive, but the password <I>is</I> case-sensitive.
If the password is recorded in the system database as <TT>Mouseketeer</TT> and you
supply <TT>mouseketeer</TT>, the login attempt will fail.</P>
<P><B>Workspaces and Sessions</B></P>
<P>The Jet engine implements most database security features through the <TT>Workspace</TT>
object and its <TT>Groups</TT> and <TT>Users</TT> collection. A <TT>Workspace</TT>
object is a member of the <TT>Workspaces</TT> collection of the <TT>Database</TT>
object.</P>
<P>When you set the <TT>IniPath</TT>, <TT>DefaultUser</TT>, and <TT>DefaultPassword</TT>
properties of the <TT>DBEngine</TT> object, you are actually setting the <TT>UserName</TT>
and <TT>Password</TT> for the default workspace. The default workspace can be accessed
by its name, <TT>DBEngine.Workspaces(&quot;#Default Workspace#&quot;)</TT>, in which
the <TT>#</TT> symbols are part of the name, or as <TT>DBEngine.Workspaces(0)</TT>.</P>
<P>A <TT>Workspace</TT> object defines a session for a user. <I>Session</I> and <I>workspace</I>
are close to being synonyms. Within a session, you can open multiple databases. Transactions
occur within sessions.</P>
<P>For the default workspace, a session begins when you set the <TT>DefaultUser</TT>
and <TT>DefaultPassword</TT> properties for the <TT>DBEngine</TT> object. After you
have successfully initialized the default session, your program can create additional
password-protected sessions.</P>
<P>To open a new session, you create a new <TT>Workspace</TT> object by using the
<TT>CreateWorkspace</TT> method of the <TT>DBEngine</TT> object. The <TT>CreateWorkspace</TT>
method takes three required arguments: <TT>Name</TT> (the name of the workspace),
<TT>UserName</TT>, and <TT>Password</TT>. You can append the <TT>Workspace</TT> object
to the <TT>DBEngine</TT> object's <TT>Workspaces</TT> collection--although you do
not need to add the <TT>Workspace</TT> object to the collection to use the object.
This code fragment initializes the default workspace and then creates a new <TT>Workspace</TT>
object named <TT>My Space</TT> for the user <TT>Lucy</TT>, whose password is <TT>diamonds</TT>.
It then opens a database within the new workspace.</P>


<BLOCKQUOTE>
	<PRE><TT>Dim wkSpace as Workspace</TT>
<TT>Dim db as Database</TT>
<TT>DBEngine.IniPath = &quot;D:\MYAPP\THEINI.INI&quot;</TT>
<TT>DBEngine.DefaultUser = &quot;Mary&quot;</TT>
<TT>DBEngine.DefaultPassword = &quot;contrary&quot;</TT>
<TT>Set wkSpace = DBEngine.CreateWorkspace(&quot;My Space&quot;, &quot;Lucy&quot;, &quot;diamonds&quot;)</TT>
<TT>Set db = wkSpace.OpenDatabase(&quot;BIBLIO.MDB&quot;)</TT>
</PRE>
	<P>Note that you must be logged into the <TT>DBEngine</TT> object via the <TT>DefaultUser</TT>
	and <TT>DefaultPassword</TT> objects before you can create additional workspaces.</P>

</BLOCKQUOTE>

<P><B>Steps</B></P>
<P>Open the Secure project (Secure.vbp) and make sure that the path in the GetWorkgroupDatabase
function points to your SYSTEM.MDW file. Then run the Secure project. You will first
see a dialog box indicating the system database name to be used in the application.
The next dialog box is that of a typical logon screen, as shown in Figure 10.5. Here
you can enter different usernames and passwords to access the database.</P>
<P><A HREF="javascript:popUp('10fig05.gif')"><B>Figure 10.5.</B></A><B> </B><I>The
Secure project.</I></P>

<DL>
	<DT><I></I></DT>
	<DD><B>1. </B>Create a new project and name it Secure.vbp. Add the objects and edit
	the properties as shown in Table 10.9; then save the form as frmSecure.frm.
	<P>
</DL>



<BLOCKQUOTE>
	<H4>Table 10.9. Objects and properties for the Secure project.</H4>
	<P>
	<TABLE BORDER="1">
	<TR ALIGN="LEFT" VALIGN="TOP">
		<TD ALIGN="LEFT"><B><I>OBJECT</I></B></TD>
		<TD ALIGN="LEFT"><B><I>Property</I></B></TD>
		<TD ALIGN="LEFT"><B><I>Setting</I></B></TD>
	</TR>
	<TR ALIGN="LEFT" VALIGN="TOP">
		<TD ALIGN="LEFT"><TT>Form</TT></TD>
		<TD ALIGN="LEFT"><TT>Name</TT></TD>
		<TD ALIGN="LEFT"><TT>frmSecure</TT></TD>
	</TR>
	<TR ALIGN="LEFT" VALIGN="TOP">
		<TD ALIGN="LEFT"></TD>
		<TD ALIGN="LEFT"><TT>Caption</TT></TD>
		<TD ALIGN="LEFT"><TT>Secure</TT></TD>
	</TR>
	<TR ALIGN="LEFT" VALIGN="TOP">
		<TD ALIGN="LEFT"><TT>Text box</TT></TD>
		<TD ALIGN="LEFT"><TT>Name</TT></TD>
		<TD ALIGN="LEFT"><TT>txtUserName</TT></TD>
	</TR>
	<TR ALIGN="LEFT" VALIGN="TOP">
		<TD ALIGN="LEFT"><TT>Text box</TT></TD>
		<TD ALIGN="LEFT"><TT>Name</TT></TD>
		<TD ALIGN="LEFT"><TT>txtPassword</TT></TD>
	</TR>
	<TR ALIGN="LEFT" VALIGN="TOP">
		<TD ALIGN="LEFT"><TT>Command button</TT></TD>
		<TD ALIGN="LEFT"><TT>Name</TT></TD>
		<TD ALIGN="LEFT"><TT>cmdOK</TT></TD>
	</TR>
	<TR ALIGN="LEFT" VALIGN="TOP">
		<TD ALIGN="LEFT"></TD>
		<TD ALIGN="LEFT"><TT>Caption</TT></TD>
		<TD ALIGN="LEFT"><TT>&amp;OK</TT></TD>
	</TR>
	<TR ALIGN="LEFT" VALIGN="TOP">
		<TD ALIGN="LEFT"></TD>
		<TD ALIGN="LEFT"><TT>Default</TT></TD>
		<TD ALIGN="LEFT"><TT>True</TT></TD>
	</TR>
	<TR ALIGN="LEFT" VALIGN="TOP">
		<TD ALIGN="LEFT"><TT>Command button</TT></TD>
		<TD ALIGN="LEFT"><TT>Name</TT></TD>
		<TD ALIGN="LEFT"><TT>cmdCancel</TT></TD>
	</TR>
	<TR ALIGN="LEFT" VALIGN="TOP">
		<TD ALIGN="LEFT"></TD>
		<TD ALIGN="LEFT"><TT>Caption</TT></TD>
		<TD ALIGN="LEFT"><TT>&amp;Cancel</TT></TD>
	</TR>
	<TR ALIGN="LEFT" VALIGN="TOP">
		<TD ALIGN="LEFT"></TD>
		<TD ALIGN="LEFT"><TT>Cancel</TT></TD>
		<TD ALIGN="LEFT"><TT>True</TT></TD>
	</TR>
	<TR ALIGN="LEFT" VALIGN="TOP">
		<TD ALIGN="LEFT"><TT>Label</TT></TD>
		<TD ALIGN="LEFT"><TT>Name</TT></TD>
		<TD ALIGN="LEFT"><TT>lblUserName</TT></TD>
	</TR>
	<TR ALIGN="LEFT" VALIGN="TOP">
		<TD ALIGN="LEFT"></TD>
		<TD ALIGN="LEFT"><TT>Caption</TT></TD>
		<TD ALIGN="LEFT"><TT>&amp;User Name</TT></TD>
	</TR>
	<TR ALIGN="LEFT" VALIGN="TOP">
		<TD ALIGN="LEFT"><TT>Label</TT></TD>
		<TD ALIGN="LEFT"><TT>Name</TT></TD>
		<TD ALIGN="LEFT"><TT>lblPassword</TT></TD>
	</TR>
	<TR ALIGN="LEFT" VALIGN="TOP">
		<TD ALIGN="LEFT"></TD>
		<TD ALIGN="LEFT"><TT>Caption</TT></TD>
		<TD ALIGN="LEFT"><TT>&amp;Password.</TT></TD>
	</TR>
	</TABLE>
</P>

</BLOCKQUOTE>


<DL>
	<DT></DT>
	<DD><B>2. </B>There are no form-level variables to declare in this project, so go
	directly to entering the <TT>Form_Load</TT> code as shown next. This code sets the
	<TT>DBEngine</TT> properties with the default user and password to access the SYSTEM.MDW
	file.
	<P>
</DL>



<BLOCKQUOTE>
	<PRE><TT>Private Sub Form_Load()</TT>
` if there is an error, goto the code labeled by ERR_Form_Load
On Error GoTo ERR_Form_Load:
    ` local variables used to hold the user name and password
    Dim sUser As String
    Dim sPassword As String
    With DBEngine
        ` set the system database INI path (registry key)
        DBEngine.IniPath = GetINIPath
        ` set system database file
        .SystemDB = GetWorkgroupDatabase
        ` set default user information
        sUser = &quot;Admin&quot;
        sPassword = &quot;myturn&quot;
        ` assign default user information
        .DefaultUser = sUser
        .DefaultPassword = sPassword
        ` display current system database
        MsgBox &quot;The system database is &quot; &amp; .SystemDB, vbInformation
    End With
Exit Sub
ERR_Form_Load:
    ` display the error information and then end the application
    With Err
        MsgBox &quot;ERROR #&quot; &amp; .Number &amp; &quot;: &quot; &amp; .Description, vbExclamation, _
               &quot;ERROR&quot;
    End With
    Unload Me
End Sub. </PRE>

</BLOCKQUOTE>

<PRE></PRE>

<DL>
	<DT></DT>
	<DD><B>3. </B>Now enter the code for <TT>cmdOK_Click</TT>. This event creates a new
	<TT>Workspace</TT> object with the supplied information from the <TT>frmSecure</TT>
	form, and if it is successful, it opens a recordset obtaining some information.
	<P>
</DL>



<BLOCKQUOTE>
	<PRE><TT>Private Sub cmdOK_Click()</TT>
` if an error occurs, then goto the code labeled by 
` ERR_cmdOK_Click
On Error GoTo ERR_cmdOK_Click:
    ` local object variables used to hold the database, recordset,
    ` and workspace
    Dim db As Database
    Dim rs As Recordset
    Dim ws As Workspace
    ` local variable used to store database path and name
    Dim sDBName As String
    ` local variables used to store the username and password
    Dim sUserName As String
    Dim sPassword As String
    ` if there is no username, inform the user and exit the 
    ` procedure if there is a username, assign the name and 
    ` password
    If (txtUserName = &quot;&quot;) Then
        MsgBox &quot;You must enter a username.&quot;, vbExclamation, _
               &quot;ERROR&quot;
        txtUserName.SetFocus
        Exit Sub
    Else
        sUserName = txtUserName
        sPassword = txtPassword
    End If
    ` create a new workspace for the user
    Set ws = DBEngine.CreateWorkspace _
                 (&quot;NewWorkspace&quot;, sUserName, sPassword)
    ` obtain the database name and path from ReadINI and then open
    ` the database
    sDBName = DBPath
    Set db = ws.OpenDatabase(sDBName)
    ` ensure that we have connected by creating a recordset of 
    ` some data
    Set rs = db.OpenRecordset(&quot;SELECT * FROM Customers&quot;)
    ` inform the user that we are successful
    MsgBox &quot;User &quot; &amp; txtUserName &amp; &quot; connected successfully!&quot;, _
           vbInformation, &quot;SUCCESS&quot;
Exit Sub
ERR_cmdOK_Click:
    ` display the error information and then end the application
    ` With Err
        MsgBox &quot;ERROR #&quot; &amp; .Number &amp; &quot;: &quot; &amp; .Description, vbExclamation, _
               &quot;ERROR&quot;
    End With
End Sub. </PRE>

</BLOCKQUOTE>

<PRE></PRE>

<DL>
	<DT></DT>
	<DD><B>4. </B>Now add the trivial code to end the project in the <TT>cmdCancel_Click</TT>
	event:
	<P>
</DL>



<BLOCKQUOTE>
	<PRE><TT>Private Sub cmdCancel_Click()</TT>
    ` end the application
    Unload Me
End Sub</PRE>

</BLOCKQUOTE>

<PRE></PRE>
<P><B>How It Works</B></P>
<P>When the application starts, <TT>frmSecure</TT> is loaded. The <TT>Load</TT> event
connects to the system database designated in the Windows Registry and, if it is
successful, displays a message showing the name of that database. When the user clicks
the OK button, the click event creates a new <TT>Workspace</TT> object, opens ORDERS.MDB,
and opens a recordset based on a table in ORDERS.MDB. If these steps are successful,
the username and password are valid and the user has Read Data privileges to the
table.</P>
<P><B>Comments</B></P>
<P>In previous versions of Visual Basic, the Jet engine looked in INI files for the
name of the system database file. With Visual Basic 6.0 and the Jet 3.51 engine,
the system database file is located in the Windows Registry. Probably the most likely
spot to find this file would be in your Windows system directory.</P>
<P>
<H2>10.5 How do I...</H2>
<H3><A NAME="Assign permissions for database ..."></A><B>Assign permissions for database
objects?</B></H3>
<P><B>Problem</B></P>
<P>I need to write an application for the system administrators where I work, to
allow them to change the permissions of users for Access databases. These administrators
don't necessarily have Access available to them. How do I provide this capability
through my own Visual Basic application?</P>
<P><B>Technique</B></P>
<P>Permissions for a database are stored in a system table in the database. If you
have Administer access to the database, you can change these permissions through
Access or Visual Basic.</P>
<P>Each Microsoft Access <TT>Database</TT> object owns a <TT>Containers</TT> collection
where the following are true:</P>

<UL>
	<LI>Each <TT>Container</TT> object in the <TT>Containers</TT> collection collects
	information about a specific type of object.
	<P>
	<LI>The <TT>Container</TT> object named <TT>Tables</TT> contains information about
	all the <TT>Table</TT> and <TT>Query</TT> objects in the database.
	<P>
	<LI>Each <TT>Container</TT> object owns a <TT>Documents</TT> collection.
	<P>
	<LI>Each <TT>Document</TT> object in a <TT>Documents</TT> collection holds information
	about one instance of the object type represented by the container.
	<P>
	<LI>Each <TT>Document</TT> object in the <TT>Tables</TT> container represents one
	<TT>Table</TT> or <TT>Query</TT> object.
	<P>
	<LI>Each <TT>Document</TT> has a <TT>UserName</TT> property and a <TT>Permissions</TT>
	property.
	<P>
	<LI>At any given time, the <TT>Permissions</TT> property value is a long integer
	that represents the permissions that the user named by the <TT>UserName</TT> property
	has to the table or query represented by the <TT>Document</TT> object.
</UL>

<P>The values of the <TT>Permissions</TT> object for each combination of permissions
for users other than the Admin user are shown in Table 10.10. (The values for the
Admin user, Administer, and Modify Design permissions vary, depending on whether
the object represented by the document is a table or a query.) Each permission named
in the Permission or Permissions column includes not only the named permission but
also all implied permissions. For example, the value of permissions property is <TT>20</TT>
when Read Data and its implied property Read Design are <TT>True</TT>; the value
is <TT>116</TT> when Update Data and Delete Data and all the implied properties of
both are <TT>True</TT>.</P>
<P>
<H4>Table 10.10. Permissions property values for users other than Admin.</H4>
<P>
<TABLE BORDER="1">
	<TR ALIGN="LEFT" VALIGN="TOP">
		<TD ALIGN="LEFT"><B><I>PERMISSION OR PERMISSIONS</I></B></TD>
		<TD ALIGN="LEFT"><B><I>Value of Permissions Property</I></B></TD>
	</TR>
	<TR ALIGN="LEFT" VALIGN="TOP">
		<TD ALIGN="LEFT">No permissions</TD>
		<TD ALIGN="LEFT"><TT>0</TT></TD>
	</TR>
	<TR ALIGN="LEFT" VALIGN="TOP">
		<TD ALIGN="LEFT">Read Design</TD>
		<TD ALIGN="LEFT"><TT>4</TT></TD>
	</TR>
	<TR ALIGN="LEFT" VALIGN="TOP">
		<TD ALIGN="LEFT">Read Data</TD>
		<TD ALIGN="LEFT"><TT>20</TT></TD>
	</TR>
	<TR ALIGN="LEFT" VALIGN="TOP">
		<TD ALIGN="LEFT">Insert Data</TD>
		<TD ALIGN="LEFT"><TT>52</TT></TD>
	</TR>
	<TR ALIGN="LEFT" VALIGN="TOP">
		<TD ALIGN="LEFT">Update Data</TD>
		<TD ALIGN="LEFT"><TT>84</TT></TD>
	</TR>
	<TR ALIGN="LEFT" VALIGN="TOP">
		<TD ALIGN="LEFT">Update Data and Insert Data</TD>
		<TD ALIGN="LEFT"><TT>116</TT></TD>
	</TR>
	<TR ALIGN="LEFT" VALIGN="TOP">
		<TD ALIGN="LEFT">Delete Data</TD>
		<TD ALIGN="LEFT"><TT>148</TT></TD>
	</TR>
	<TR ALIGN="LEFT" VALIGN="TOP">
		<TD ALIGN="LEFT">Insert Data and Delete Data</TD>
		<TD ALIGN="LEFT"><TT>180</TT></TD>
	</TR>
	<TR ALIGN="LEFT" VALIGN="TOP">
		<TD ALIGN="LEFT">Update Data and Delete Data</TD>
		<TD ALIGN="LEFT"><TT>212</TT></TD>
	</TR>
	<TR ALIGN="LEFT" VALIGN="TOP">
		<TD ALIGN="LEFT">Update Data, Insert Data, and Delete Data</TD>
		<TD ALIGN="LEFT"><TT>244</TT></TD>
	</TR>
	<TR ALIGN="LEFT" VALIGN="TOP">
		<TD ALIGN="LEFT">Modify Design</TD>
		<TD ALIGN="LEFT"><TT>65756</TT></TD>
	</TR>
	<TR ALIGN="LEFT" VALIGN="TOP">
		<TD ALIGN="LEFT">Modify Design and Insert Data</TD>
		<TD ALIGN="LEFT"><TT>65788</TT></TD>
	</TR>
	<TR ALIGN="LEFT" VALIGN="TOP">
		<TD ALIGN="LEFT">Administer</TD>
		<TD ALIGN="LEFT"><TT>852478</TT></TD>
	</TR>
</TABLE>
</P>
<P>You can determine the permissions a user has for a table or a query by setting
the <TT>UserName</TT> property of the <TT>Document</TT> object to the user's name
and then reading the <TT>Permissions</TT> property. If you have Administer permission
for the table or query, you can set permissions for other users by setting the <TT>UserName</TT>
property and then assigning a value to the <TT>Permissions</TT> property.</P>
<P><B>Steps</B></P>
<P>Open the Permitter project and make sure that the <TT>GetWorkgroupDatabase</TT>
function returns the proper fully qualified path for the SYSTEM.MDW file. When this
is done, run the application. You should see the form shown in Figure 10.6. Select
a combination of a single user and a table or query from the two list boxes on the
Permitter form. You can change various properties set for each combination and save
them by clicking the Save button. Notice the permission code above the check boxes.
It changes according to the combinations of permissions granted to the user for the
given table or query.</P>
<P><A HREF="javascript:popUp('10fig06.gif')"><B>Figure 10.6.</B></A><B> </B><I>The
Permitter project.</I></P>

<DL>
	<DT><I></I></DT>
	<DD><B>1. </B>Create a new project and name it Permitter.vbp. Add and edit the objects
	and properties as listed in Table 10.11, and save the form as frmPermitter.frm. Note
	that all the check boxes are part of a control array.
	<P>
</DL>



<BLOCKQUOTE>
	<H4>Table 10.11. Objects and properties for the Permitter project.</H4>
	<P>
	<TABLE BORDER="1">
	<TR ALIGN="LEFT" VALIGN="TOP">
		<TD ALIGN="LEFT"><B><I>OBJECT</I></B></TD>
		<TD ALIGN="LEFT"><B><I>Property</I></B></TD>
		<TD ALIGN="LEFT"><B><I>Setting</I></B></TD>
	</TR>
	<TR ALIGN="LEFT" VALIGN="TOP">
		<TD ALIGN="LEFT"><TT>Form</TT></TD>
		<TD ALIGN="LEFT"><TT>Name</TT></TD>
		<TD ALIGN="LEFT"><TT>frmPermitter</TT></TD>
	</TR>
	<TR ALIGN="LEFT" VALIGN="TOP">
		<TD ALIGN="LEFT"></TD>
		<TD ALIGN="LEFT"><TT>Caption</TT></TD>
		<TD ALIGN="LEFT"><TT>Permitter</TT></TD>
	</TR>
	<TR ALIGN="LEFT" VALIGN="TOP">
		<TD ALIGN="LEFT"><TT>List box</TT></TD>
		<TD ALIGN="LEFT"><TT>Name</TT></TD>
		<TD ALIGN="LEFT"><TT>lstUsers</TT></TD>
	</TR>
	<TR ALIGN="LEFT" VALIGN="TOP">
		<TD ALIGN="LEFT"><TT>List box</TT></TD>
		<TD ALIGN="LEFT"><TT>Name</TT></TD>
		<TD ALIGN="LEFT"><TT>lstTablesAndQueries</TT></TD>
	</TR>
	<TR ALIGN="LEFT" VALIGN="TOP">
		<TD ALIGN="LEFT"><TT>Command button</TT></TD>
		<TD ALIGN="LEFT"><TT>Name</TT></TD>
		<TD ALIGN="LEFT"><TT>cmdSave</TT></TD>
	</TR>
	<TR ALIGN="LEFT" VALIGN="TOP">
		<TD ALIGN="LEFT"></TD>
		<TD ALIGN="LEFT"><TT>Caption</TT></TD>
		<TD ALIGN="LEFT"><TT>&amp;Save</TT></TD>
	</TR>
	<TR ALIGN="LEFT" VALIGN="TOP">
		<TD ALIGN="LEFT"><TT>Command button</TT></TD>
		<TD ALIGN="LEFT"><TT>Name</TT></TD>
		<TD ALIGN="LEFT"><TT>cmdClose</TT></TD>
	</TR>
	<TR ALIGN="LEFT" VALIGN="TOP">
		<TD ALIGN="LEFT"></TD>
		<TD ALIGN="LEFT"><TT>Caption</TT></TD>
		<TD ALIGN="LEFT"><TT>&amp;Close</TT></TD>
	</TR>
	<TR ALIGN="LEFT" VALIGN="TOP">
		<TD ALIGN="LEFT"></TD>
		<TD ALIGN="LEFT"><TT>Cancel</TT></TD>
		<TD ALIGN="LEFT"><TT>-1 `True</TT></TD>
	</TR>
	<TR ALIGN="LEFT" VALIGN="TOP">
		<TD ALIGN="LEFT"></TD>
		<TD ALIGN="LEFT"><TT>Default</TT></TD>
		<TD ALIGN="LEFT"><TT>-1 `True</TT></TD>
	</TR>
	<TR ALIGN="LEFT" VALIGN="TOP">
		<TD ALIGN="LEFT"><TT>Frame</TT></TD>
		<TD ALIGN="LEFT"><TT>Name</TT></TD>
		<TD ALIGN="LEFT"><TT>fraPermissions</TT></TD>
	</TR>
	<TR ALIGN="LEFT" VALIGN="TOP">
		<TD ALIGN="LEFT"></TD>
		<TD ALIGN="LEFT"><TT>Caption</TT></TD>
		<TD ALIGN="LEFT"><TT>Permissions</TT></TD>
	</TR>
	<TR ALIGN="LEFT" VALIGN="TOP">
		<TD ALIGN="LEFT"><TT>Check box</TT></TD>
		<TD ALIGN="LEFT"><TT>Name</TT></TD>
		<TD ALIGN="LEFT"><TT>chkPermission</TT></TD>
	</TR>
	<TR ALIGN="LEFT" VALIGN="TOP">
		<TD ALIGN="LEFT"></TD>
		<TD ALIGN="LEFT"><TT>Caption</TT></TD>
		<TD ALIGN="LEFT"><TT>&amp;Read Design</TT></TD>
	</TR>
	<TR ALIGN="LEFT" VALIGN="TOP">
		<TD ALIGN="LEFT"></TD>
		<TD ALIGN="LEFT"><TT>Index</TT></TD>
		<TD ALIGN="LEFT"><TT>0</TT></TD>
	</TR>
	<TR ALIGN="LEFT" VALIGN="TOP">
		<TD ALIGN="LEFT"><TT>Check box</TT></TD>
		<TD ALIGN="LEFT"><TT>Name</TT></TD>
		<TD ALIGN="LEFT"><TT>chkPermission</TT></TD>
	</TR>
	<TR ALIGN="LEFT" VALIGN="TOP">
		<TD ALIGN="LEFT"></TD>
		<TD ALIGN="LEFT"><TT>Caption</TT></TD>
		<TD ALIGN="LEFT"><TT>&amp;Modify Design</TT></TD>
	</TR>
	<TR ALIGN="LEFT" VALIGN="TOP">
		<TD ALIGN="LEFT"></TD>
		<TD ALIGN="LEFT"><TT>Index</TT></TD>
		<TD ALIGN="LEFT"><TT>1</TT></TD>
	</TR>
	<TR ALIGN="LEFT" VALIGN="TOP">
		<TD ALIGN="LEFT"><TT>Check box</TT></TD>
		<TD ALIGN="LEFT"><TT>Name</TT></TD>
		<TD ALIGN="LEFT"><TT>chkPermission</TT></TD>
	</TR>
	<TR ALIGN="LEFT" VALIGN="TOP">
		<TD ALIGN="LEFT"></TD>
		<TD ALIGN="LEFT"><TT>Caption</TT></TD>
		<TD ALIGN="LEFT"><TT>&amp;Administer</TT></TD>
	</TR>
	<TR ALIGN="LEFT" VALIGN="TOP">
		<TD ALIGN="LEFT"></TD>
		<TD ALIGN="LEFT"><TT>Index</TT></TD>
		<TD ALIGN="LEFT"><TT>2</TT></TD>
	</TR>
	<TR ALIGN="LEFT" VALIGN="TOP">
		<TD ALIGN="LEFT"><TT>Check box</TT></TD>
		<TD ALIGN="LEFT"><TT>Name</TT></TD>
		<TD ALIGN="LEFT"><TT>chkPermission</TT></TD>
	</TR>
	<TR ALIGN="LEFT" VALIGN="TOP">
		<TD ALIGN="LEFT"></TD>
		<TD ALIGN="LEFT"><TT>Caption</TT></TD>
		<TD ALIGN="LEFT"><TT>R&amp;ead Data</TT></TD>
	</TR>
	<TR ALIGN="LEFT" VALIGN="TOP">
		<TD ALIGN="LEFT"></TD>
		<TD ALIGN="LEFT"><TT>Index</TT></TD>
		<TD ALIGN="LEFT"><TT>3</TT></TD>
	</TR>
	<TR ALIGN="LEFT" VALIGN="TOP">
		<TD ALIGN="LEFT"><TT>Check box</TT></TD>
		<TD ALIGN="LEFT"><TT>Name</TT></TD>
		<TD ALIGN="LEFT"><TT>chkPermission</TT></TD>
	</TR>
	<TR ALIGN="LEFT" VALIGN="TOP">
		<TD ALIGN="LEFT"></TD>
		<TD ALIGN="LEFT"><TT>Caption</TT></TD>
		<TD ALIGN="LEFT"><TT>&amp;Update Data</TT></TD>
	</TR>
	<TR ALIGN="LEFT" VALIGN="TOP">
		<TD ALIGN="LEFT"></TD>
		<TD ALIGN="LEFT"><TT>Index</TT></TD>
		<TD ALIGN="LEFT"><TT>4</TT></TD>
	</TR>
	<TR ALIGN="LEFT" VALIGN="TOP">
		<TD ALIGN="LEFT"><TT>Check box</TT></TD>
		<TD ALIGN="LEFT"><TT>Name</TT></TD>
		<TD ALIGN="LEFT"><TT>chkPermission</TT></TD>
	</TR>
	<TR ALIGN="LEFT" VALIGN="TOP">
		<TD ALIGN="LEFT"></TD>
		<TD ALIGN="LEFT"><TT>Caption</TT></TD>
		<TD ALIGN="LEFT"><TT>&amp;Insert Data</TT></TD>
	</TR>
	<TR ALIGN="LEFT" VALIGN="TOP">
		<TD ALIGN="LEFT"></TD>
		<TD ALIGN="LEFT"><TT>Index</TT></TD>
		<TD ALIGN="LEFT"><TT>5</TT></TD>
	</TR>
	<TR ALIGN="LEFT" VALIGN="TOP">
		<TD ALIGN="LEFT"><TT>Check box</TT></TD>
		<TD ALIGN="LEFT"><TT>Name</TT></TD>
		<TD ALIGN="LEFT"><TT>chkPermission</TT></TD>
	</TR>
	<TR ALIGN="LEFT" VALIGN="TOP">
		<TD ALIGN="LEFT"></TD>
		<TD ALIGN="LEFT"><TT>Caption</TT></TD>
		<TD ALIGN="LEFT"><TT>&amp;Delete Data</TT></TD>
	</TR>
	<TR ALIGN="LEFT" VALIGN="TOP">
		<TD ALIGN="LEFT"></TD>
		<TD ALIGN="LEFT"><TT>Index</TT></TD>
		<TD ALIGN="LEFT"><TT>6</TT></TD>
	</TR>
	<TR ALIGN="LEFT" VALIGN="TOP">
		<TD ALIGN="LEFT"><TT>Label</TT></TD>
		<TD ALIGN="LEFT"><TT>Name</TT></TD>
		<TD ALIGN="LEFT"><TT>lblPermissionCode</TT></TD>
	</TR>
	<TR ALIGN="LEFT" VALIGN="TOP">
		<TD ALIGN="LEFT"></TD>
		<TD ALIGN="LEFT"><TT>Caption</TT></TD>
		<TD ALIGN="LEFT"><TT>Permission Code:</TT></TD>
	</TR>
	<TR ALIGN="LEFT" VALIGN="TOP">
		<TD ALIGN="LEFT"><TT>Label</TT></TD>
		<TD ALIGN="LEFT"><TT>Name</TT></TD>
		<TD ALIGN="LEFT"><TT>lblPermissions</TT></TD>
	</TR>
	<TR ALIGN="LEFT" VALIGN="TOP">
		<TD ALIGN="LEFT"></TD>
		<TD ALIGN="LEFT"><TT>Caption</TT></TD>
		<TD ALIGN="LEFT"><TT>0</TT></TD>
	</TR>
	<TR ALIGN="LEFT" VALIGN="TOP">
		<TD ALIGN="LEFT"><TT>Label</TT></TD>
		<TD ALIGN="LEFT"><TT>Name</TT></TD>
		<TD ALIGN="LEFT"><TT>lblUsers</TT></TD>
	</TR>
	<TR ALIGN="LEFT" VALIGN="TOP">
		<TD ALIGN="LEFT"></TD>
		<TD ALIGN="LEFT"><TT>Caption</TT></TD>
		<TD ALIGN="LEFT"><TT>&amp;Users</TT></TD>
	</TR>
	<TR ALIGN="LEFT" VALIGN="TOP">
		<TD ALIGN="LEFT"><TT>Label</TT></TD>
		<TD ALIGN="LEFT"><TT>Name</TT></TD>
		<TD ALIGN="LEFT"><TT>lblTablesAndQueries</TT></TD>
	</TR>
	<TR ALIGN="LEFT" VALIGN="TOP">
		<TD ALIGN="LEFT"></TD>
		<TD ALIGN="LEFT"><TT>Caption</TT></TD>
		<TD ALIGN="LEFT"><TT>&amp;Tables and Queries</TT></TD>
	</TR>
	</TABLE>
</P>

</BLOCKQUOTE>


<DL>
	<DT></DT>
	<DD><B>2. </B>First enter the following form-level declarations in the declarations
	section of the project. The database object variable will serve as the home of the
	database object referred to throughout the project. The constant declarations with
	the <TT>PER_</TT> prefix correspond to the seven check boxes on the <TT>frmPermitter</TT>
	form. The last set of declarations, those preceded by the <TT>DB_</TT> characters,
	are used to indicate the different values associated with the permissions.
	<P>
</DL>



<BLOCKQUOTE>
	<PRE><TT>Option Explicit</TT>
` form-level object variable used to store database object
Private db As Database
` form-level constant declarations which correspond to check boxes
` on the frmPermitter form
Const PER_READ_DESIGN = 0
Const PER_MODIFY_DESIGN = 1
Const PER_ADMINISTER = 2
Const PER_READ_DATA = 3
Const PER_UPDATE_DATA = 4
Const PER_INSERT_DATA = 5
Const PER_DELETE_DATA = 6
` form-level constant declarations which indicate various 
` permissions
Const DB_NOPERMISSIONS = 0
Const DB_READDESIGN = 4
Const DB_READDATA = 20
Const DB_INSERTDATA = 52
Const DB_UPDATEDATA = 84
Const DB_UPDATEINSERTDATA = 116
Const DB_DELETEDATA = 148
Const DB_INSERTDELETEDATA = 180
Const DB_UPDATEDELETEDATA = 212
Const DB_UPDATEINSERTDELETEDATA = 244
Const DB_MODIFYDESIGN = 65756
Const DB_MODIFYDESIGN_INSERTDATA = 65788
Const DB_READSEC = 131072
Const DB_ADMINISTER = 852478</PRE>

</BLOCKQUOTE>

<PRE></PRE>

<DL>
	<DT></DT>
	<DD><B>3. </B>Enter the <TT>Form_Load</TT> event as shown next. This code sets the
	default user and password of the <TT>DBEngine</TT> object. You might have to change
	the values of these two variables to your system administrator's name and password.
	The database is then open, and the two list boxes on the form are populated. If there
	are no current users for the database, the application is terminated.
	<P>
</DL>



<BLOCKQUOTE>
	<PRE><TT>Private Sub Form_Load()</TT>
` if there is an error, then goto the code section labeled by 
` ERR_Form_Load
On Error GoTo ERR_Form_Load:
    Dim sUserName As String
    Dim sPassword As String
    Dim sDBName As String
    ` assign default username and password
    sUserName = &quot;Admin&quot;
    sPassword = &quot;&quot;
    With DBEngine
        ` set system database path and name
        .SystemDB = GetWorkgroupDatabase
        ` set default user name and password
        .DefaultUser = sUserName
        .DefaultPassword = sPassword
        ` get path and name of database from ReadINI module
        sDBName = DBPath
        ` open database
        Set db = .Workspaces(0).OpenDatabase(sDBName)
    End With
    ` populate the two list boxes with the available users, 
    ` tables, and queries from database
    FillUserList
    FillTableAndQueriesList
    ` if there are no valid users, inform the user and exit the 
    ` application
    If (lstUsers.ListCount &lt; 1) Then
        MsgBox &quot;There are no users!&quot;, vbExclamation, &quot;USERS&quot;
        cmdClose_Click
    Else
        ` initialize the list boxes to point to the first item in 
        ` each list box
        lstUsers.ListIndex = 0
        lstTablesAndQueries.ListIndex = 0
    End If
Exit Sub
ERR_Form_Load:
    ` display error for the user
    With Err
        MsgBox &quot;ERROR #&quot; &amp; .Number &amp; &quot;: &quot; &amp; .Description, _
        vbExclamation, _
               &quot;ERROR&quot;
    End With
End Sub</PRE>

</BLOCKQUOTE>

<PRE></PRE>

<DL>
	<DT></DT>
	<DD><B>4. </B>Enter the following <TT>Form_Unload</TT> code now. This code ensures
	that the database object is released by setting it to nothing when the application
	is terminated.
	<P>
</DL>



<BLOCKQUOTE>
	<PRE><TT>Private Sub Form_Unload(Cancel As Integer)</TT>
    ` close the database
    Set db = Nothing
End Sub</PRE>

</BLOCKQUOTE>

<PRE></PRE>

<DL>
	<DT></DT>
	<DD><B>5. </B>Now enter both the <TT>lstUsers</TT> and the <TT>lstTablesAndQueries</TT>
	<TT>Click</TT> event code. Each event relies on the other's list box having a selected
	item. If there is a selected item in the corresponding list box, the <TT>ReadPermissions</TT>
	procedure is called to gather the permission information for the user and table/query
	combination, checking off the appropriate check boxes on the form.
	<P>
</DL>



<BLOCKQUOTE>
	<PRE><TT>Private Sub lstUsers_Click()</TT>
    ` if the TablesAndQueries list box is set to one of the items, 
    ` call the ReadPermissions procedure, and if there was an 
    ` error, unselect all check boxes
    If (lstTablesAndQueries.ListIndex &gt;= 0) Then
        If (Not ReadPermissions()) Then
            lstUsers.ListIndex = -1
            UnCheckAll
        End If
    End If
End Sub
Private Sub lstTablesAndQueries_Click()
    ` if the Users list box is set to one of the items, call the
    ` ReadPermissions procedure, and if there was an error, 
    ` unselect all check boxes
    If (lstUsers.ListIndex &gt;= 0) Then
        If (Not ReadPermissions()) Then
            lstTablesAndQueries.ListIndex = -1
            UnCheckAll
        End If
    End If
End Sub</PRE>

</BLOCKQUOTE>

<PRE></PRE>

<DL>
	<DT></DT>
	<DD><B>6. </B>The <TT>chkPermission_Click</TT> event handles all seven check boxes
	found on the <TT>frmPermitter</TT> form. This code ensures that the correct combinations
	of check boxes are set. Enter the following code:
	<P>
</DL>



<BLOCKQUOTE>
	<PRE><TT>Private Sub chkPermission_Click(Index As Integer)</TT>
    Dim nCount As Integer
    With chkPermission(Index)
        ` set the appropriate check box values dependent upon the 
        ` others
        Select Case Index
            Case PER_READ_DESIGN:
                If (.Value = vbUnchecked) Then
                    For nCount = 0 To 6
                        chkPermission(nCount).Value = vbUnchecked
                    Next nCount
                End If
            Case PER_MODIFY_DESIGN:
                If (.Value = vbChecked) Then
                    chkPermission(PER_READ_DESIGN).Value = _
                       vbChecked
                    chkPermission(PER_READ_DATA).Value = vbChecked
                    chkPermission(PER_UPDATE_DATA).Value = _
                       vbChecked
                    chkPermission(PER_INSERT_DATA).Value = _
                       vbChecked
                Else
                    chkPermission(PER_ADMINISTER).Value = _
                       vbUnchecked
                End If
            Case PER_ADMINISTER:
                If (.Value = vbChecked) Then
                    For nCount = 0 To 6
                        chkPermission(nCount).Value = vbChecked
                    Next nCount
                End If
            Case PER_READ_DATA:
                If (.Value = vbChecked) Then
                    chkPermission(PER_READ_DESIGN).Value = _
                       vbChecked
                Else
                    chkPermission(PER_MODIFY_DESIGN).Value = _
                       vbUnchecked
                    chkPermission(PER_UPDATE_DATA).Value = _
                       vbUnchecked
                    chkPermission(PER_DELETE_DATA).Value = _
                       vbUnchecked
                    chkPermission(PER_INSERT_DATA).Value = _
                       vbUnchecked
                    chkPermission(PER_ADMINISTER).Value = _
                       vbUnchecked
                End If
            Case PER_UPDATE_DATA:
                If (.Value = vbChecked) Then
                    chkPermission(PER_READ_DESIGN).Value = _
                       vbChecked
                    chkPermission(PER_READ_DATA).Value = vbChecked
                Else
                    chkPermission(PER_ADMINISTER).Value = _
                       vbUnchecked
                    chkPermission(PER_MODIFY_DESIGN).Value = _
                       vbUnchecked
                End If
            Case PER_INSERT_DATA:
                If (.Value = vbChecked) Then
                    chkPermission(PER_READ_DESIGN).Value = _
                       vbChecked
                    chkPermission(PER_READ_DATA).Value = vbChecked
                Else
                    chkPermission(PER_ADMINISTER).Value = _
                       vbUnchecked
                End If
            Case PER_DELETE_DATA:
                If (.Value = vbChecked) Then
                    chkPermission(PER_READ_DESIGN).Value = _
                       vbChecked
                    chkPermission(PER_READ_DATA).Value = vbChecked
                Else
                    chkPermission(PER_ADMINISTER).Value = _
                       vbUnchecked
                    chkPermission(PER_MODIFY_DESIGN).Value = _
                       vbUnchecked
                End If
        End Select
    End With
End Sub</PRE>

</BLOCKQUOTE>

<PRE></PRE>

<DL>
	<DT></DT>
	<DD><B>7. </B>Enter the <TT>cmdSave_Click</TT> event code now. This code calculates
	the Permission Code value from the check boxes on the form and saves it <BR>
	to the <TT>Permissions</TT> property of the appropriate <TT>Document</TT> object.
	<P>
</DL>



<BLOCKQUOTE>
	<PRE><TT>Private Sub cmdSave_Click()</TT>
` if there is an error, goto the code labeled by ERR_cmdSave_Click
On Error GoTo ERR_cmdSave_Click:
    Dim oDocument As Document
    Dim lPermissionCode As Long
    ` set the document object variable to the proper selected 
    ` table or query from the list box
    Set oDocument = _
               db.Containers(&quot;Tables&quot;).Documents(lstTablesAndQueries.Text)
    ` create the proper permission code dependent upon the 
    ` selected check boxes of frmPermitter
    If chkPermission(PER_ADMINISTER) = vbChecked Then
        lPermissionCode = DB_ADMINISTER
    ElseIf chkPermission(PER_MODIFY_DESIGN) = vbChecked Then
        If chkPermission(PER_INSERT_DATA) = vbChecked Then
            lPermissionCode = DB_MODIFYDESIGN_INSERTDATA
        Else
            lPermissionCode = DB_MODIFYDESIGN
        End If
    ElseIf chkPermission(PER_UPDATE_DATA) = vbChecked Then
        If chkPermission(PER_INSERT_DATA) = vbChecked Then
            If chkPermission(PER_DELETE_DATA) = vbChecked Then
                lPermissionCode = DB_UPDATEINSERTDELETEDATA
            Else
                lPermissionCode = DB_UPDATEINSERTDATA
            End If
        Else
            lPermissionCode = DB_UPDATEDATA
        End If
    ElseIf chkPermission(PER_INSERT_DATA) = vbChecked Then
        If chkPermission(PER_DELETE_DATA) = vbChecked Then
            lPermissionCode = DB_INSERTDELETEDATA
        Else
            lPermissionCode = DB_INSERTDATA
        End If
    ElseIf chkPermission(PER_DELETE_DATA) = vbChecked Then
        lPermissionCode = DB_DELETEDATA
    ElseIf chkPermission(PER_READ_DATA) = vbChecked Then
        lPermissionCode = DB_READDATA
    ElseIf chkPermission(PER_READ_DESIGN) = vbChecked Then
        lPermissionCode = DB_READDESIGN
    Else
        lPermissionCode = DB_NOPERMISSIONS
    End If
    With oDocument
        ` save the permission code to the document object for the 
        ` proper user
        .UserName = lstUsers.Text
        If (UCase$(.UserName) = &quot;ADMIN&quot;) Then _
                lPermissionCode = lPermissionCode + DB_READSEC
        .Permissions = lPermissionCode
        lblPermissions.Caption = .Permissions
    End With
Exit Sub
ERR_cmdSave_Click:
    ` display the error for the user
    With Err
        MsgBox &quot;ERROR #&quot; &amp; .Number &amp; &quot;: &quot; &amp; .Description, _
               vbExclamation, &quot;ERROR&quot;
    End With
End Sub</PRE>

</BLOCKQUOTE>

<PRE></PRE>

<DL>
	<DT></DT>
	<DD><B>8. </B>Enter the <TT>cmdClose_Click</TT> event code given next. This simply
	ends the application.
	<P>
</DL>



<BLOCKQUOTE>
	<PRE><TT>Private Sub cmdClose_Click()</TT>
    ` close the application
    Unload Me
End Sub</PRE>

</BLOCKQUOTE>

<PRE></PRE>

<DL>
	<DT></DT>
	<DD><B>9. </B>The <TT>UnCheckAll</TT> procedure, as shown here, is called from throughout
	the application to clear all the check boxes on the form:
	<P>
</DL>



<BLOCKQUOTE>
	<PRE><TT>Private Sub UnCheckAll()</TT>
    Dim nCount As Integer
    ` set all the permission check boxes to unchecked
    For nCount = 0 To 6
        chkPermission(nCount).Value = vbUnchecked
    Next nCount
End Sub</PRE>

</BLOCKQUOTE>

<PRE></PRE>

<DL>
	<DT></DT>
	<DD><B>10. </B>Now enter both the <TT>FillUserList</TT> and the <TT>FillTableAndQueriesList</TT>
	procedures as shown next. The <TT>FillUserList</TT> procedure populates the <TT>lstUsers</TT>
	list box with the information found in the <TT>Users</TT> collection of the new workspace,
	and the <TT>FillTableAndQueriesList</TT> procedure populates the <TT>lstTablesAndQueries</TT>
	list box with the tables and queries found in the <TT>Documents</TT> collection of
	the <TT>Tables</TT> container.
	<P>
</DL>



<BLOCKQUOTE>
	<PRE><TT>Private Sub FillUserList()</TT>
    Dim oUser As User
    ` populate the user list boxes with all users except CREATOR, 
    ` ENGINE, and ADMIN (these shouldn't be changed)
    For Each oUser In DBEngine.Workspaces(0).Users
        With oUser
            If (UCase$(.Name) &lt;&gt; &quot;CREATOR&quot;) _
            And (UCase$(.Name) &lt;&gt; &quot;ENGINE&quot;) _
            And (UCase$(.Name) &lt;&gt; &quot;ADMIN&quot;) Then
                lstUsers.AddItem .Name
            End If
        End With
    Next
End Sub
Private Sub FillTableAndQueriesList()
    Dim oDocument As Document
    ` populate the TableAndQueries list boxes with all the 
    ` available tables and queries except the system ones
    For Each oDocument In db.Containers(&quot;Tables&quot;).Documents
        With oDocument
            If (Left$(.Name, 4) &lt;&gt; &quot;MSys&quot;) Then _
                    lstTablesAndQueries.AddItem .Name
        End With
    Next
End Sub</PRE>

</BLOCKQUOTE>

<PRE></PRE>

<DL>
	<DT></DT>
	<DD><B>11. </B>The <TT>ReadPermissions</TT> function returns a Boolean value: <TT>True</TT>
	for success and <TT>False</TT> for failure. This code breaks down the <TT>Permissions</TT>
	property of the appropriate <TT>Document</TT> object and checks off the corresponding
	check boxes of the <TT>frmPermitter</TT> form.
	<P>
</DL>



<BLOCKQUOTE>
	<PRE><TT>Function ReadPermissions() As Boolean</TT>
` if there is an error, then goto the code labeled by ERR_ReadPermissions
On Error GoTo ERR_ReadPermissions:
    Dim nCount As Integer
    Dim lPermissionCode As Long
    Dim oDocument As Document
    ` set the document object to the appropriately selected table 
    ` or query
    Set oDocument = _
            db.Containers(&quot;Tables&quot;).Documents(lstTablesAndQueries.Text)
    ` set the user name and get the current permissions for that 
    ` user
    With oDocument
        .UserName = lstUsers.Text
        lblPermissions.Caption = .Permissions
        lPermissionCode = .Permissions
    End With
    ` set all check boxes to unchecked
    UnCheckAll
    ` set the appropriate check boxes for the current permission 
    ` for the user selected
    Select Case lPermissionCode
        Case DB_READDESIGN
            chkPermission(PER_READ_DESIGN).Value = vbChecked
        Case DB_READDATA
            chkPermission(PER_READ_DATA).Value = vbChecked
            chkPermission(PER_READ_DESIGN).Value = vbChecked
        Case DB_INSERTDATA
            chkPermission(PER_INSERT_DATA).Value = vbChecked
            chkPermission(PER_READ_DESIGN).Value = vbChecked
            chkPermission(PER_READ_DATA).Value = vbChecked
        Case DB_UPDATEDATA
            chkPermission(PER_UPDATE_DATA).Value = vbChecked
            chkPermission(PER_READ_DESIGN).Value = vbChecked
            chkPermission(PER_READ_DATA).Value = vbChecked
        Case DB_UPDATEINSERTDATA
            chkPermission(PER_UPDATE_DATA).Value = vbChecked
            chkPermission(PER_INSERT_DATA).Value = vbChecked
            chkPermission(PER_READ_DESIGN).Value = vbChecked
            chkPermission(PER_READ_DATA).Value = vbChecked
        Case DB_DELETEDATA
            chkPermission(PER_DELETE_DATA).Value = vbChecked
            chkPermission(PER_READ_DESIGN).Value = vbChecked
            chkPermission(PER_READ_DATA).Value = vbChecked
        Case DB_INSERTDELETEDATA
            chkPermission(PER_DELETE_DATA).Value = vbChecked
            chkPermission(PER_READ_DESIGN).Value = vbChecked
            chkPermission(PER_READ_DATA).Value = vbChecked
            chkPermission(PER_INSERT_DATA).Value = vbChecked
        Case DB_UPDATEDELETEDATA
            chkPermission(PER_UPDATE_DATA).Value = vbChecked
            chkPermission(PER_READ_DESIGN).Value = vbChecked
            chkPermission(PER_READ_DATA).Value = vbChecked
            chkPermission(PER_DELETE_DATA).Value = vbChecked
        Case DB_UPDATEINSERTDELETEDATA
            chkPermission(PER_UPDATE_DATA).Value = vbChecked
            chkPermission(PER_READ_DESIGN).Value = vbChecked
            chkPermission(PER_READ_DATA).Value = vbChecked
            chkPermission(PER_DELETE_DATA).Value = vbChecked
            chkPermission(PER_INSERT_DATA).Value = vbChecked
        Case DB_MODIFYDESIGN
            chkPermission(PER_MODIFY_DESIGN).Value = vbChecked
            chkPermission(PER_READ_DESIGN).Value = vbChecked
            chkPermission(PER_READ_DATA).Value = vbChecked
            chkPermission(PER_UPDATE_DATA).Value = vbChecked
            chkPermission(PER_DELETE_DATA).Value = vbChecked
        Case DB_MODIFYDESIGN_INSERTDATA
            chkPermission(PER_MODIFY_DESIGN).Value = vbChecked
            chkPermission(PER_READ_DESIGN).Value = vbChecked
            chkPermission(PER_READ_DATA).Value = vbChecked
            chkPermission(PER_UPDATE_DATA).Value = vbChecked
            chkPermission(PER_INSERT_DATA).Value = vbChecked
            chkPermission(PER_DELETE_DATA).Value = vbChecked
        Case DB_ADMINISTER
            For nCount = 0 To 6
                chkPermission(nCount).Value = vbChecked
            Next nCount
    End Select
    ` indicate success
    ReadPermissions = True
Exit Function
ERR_ReadPermissions:
    ` display the error for the user
    With Err
        MsgBox &quot;ERROR #&quot; &amp; .Number&amp; &amp; &quot;: &quot; &amp; .Description, _
        vbExclamation, &quot;ERROR&quot;
    End With
    ` indicate failure
    ReadPermissions = False
End Function</PRE>

</BLOCKQUOTE>

<PRE></PRE>
<P><B>How It Works</B></P>
<P>When the form loads, the program connects to the system database, opens the ORDERS
database, and populates the two list boxes according to the available information
from these two databases. When the user selects both a valid user and a table or
query from the list boxes, the <TT>ReadPermissions</TT> function is called to display
the options available for the combination through seven check boxes on the form.
The user can change these permissions and then save them by clicking the Save button.
The application then calculates a new value for the <TT>Permissions</TT> property
of the appropriate user/document combination and saves it to the system database.</P>
<P><B>Comments</B></P>
<P>The Permissions help screen identifies built-in constants for representing values
of the <TT>Permissions</TT> property. If you look up these constants in the Object
Browser, you can see their values. Using these built-in variables is tricky, however,
because it is not always clear which implied properties each is including. The values
in Table 10.10 were obtained experimentally, by changing the permissions in Microsoft
Access and reading the resulting value of the <TT>Permissions</TT> property through
Visual Basic.</P>
<P>
<H2>10.6 How do I...</H2>
<H3><A NAME="Change ownership of database obj"></A><B>Change ownership of database
objects?</B></H3>
<P><B>Problem</B></P>
<P>How can I give system administrators the ability to change the ownership of various
tables and queries through my Visual Basic application?</P>
<P><B>Technique</B></P>
<P>Every data object in Microsoft Access has an owner. The default owner is the creator
of that object. The owner has specific permissions that others do not necessarily
have. These permissions include the right to grant full privileges to himself or
others.</P>
<P>The name of the owner of a table or query resides in the <TT>Owner</TT> property
of the appropriate <TT>Document</TT> object that represents the data object. A user
with Administer permission can change the owner of any data object by changing the
name of the <TT>Owner</TT> property.</P>
<P><B>Steps</B></P>
<P>Open the project OWNERSHIP.VBP and make sure that the <TT>GetWorkgroupDatabase</TT>
function is returning the proper fully qualified path to your SYSTEM.MDW file. When
this is done, run the application. If the username and password variables, located
in the <TT>Form_Load</TT> event, are correct, you should see the form shown in Figure
10.7. When a user clicks on a table or query in the list box, the owner of that data
object is selected from the other list box. By selecting a different user from the
list and clicking the Save Owner button, you can change ownership of the data object.</P>

<DL>
	<DT></DT>
	<DD><B>1. </B>Create a new project and call it OWNERSHIP.VBP. Use <TT>Form1</TT>
	to create the objects and edit the properties as listed in Table 10.12. Save the
	form as frmOwnership.frm.
	<P>
</DL>

<P><A HREF="javascript:popUp('10fig07.gif')"><B>Figure 10.7.</B></A><B> </B><I>The
Ownership project.</I></P>


<BLOCKQUOTE>
	<H4>Table 10.12. Objects and properties for the Ownership project.</H4>
	<P>
	<TABLE BORDER="1">
	<TR ALIGN="LEFT" VALIGN="TOP">
		<TD ALIGN="LEFT"><B><I>OBJECT</I></B></TD>
		<TD ALIGN="LEFT"><B><I>Property</I></B></TD>
		<TD ALIGN="LEFT"><B><I>Setting</I></B></TD>
	</TR>
	<TR ALIGN="LEFT" VALIGN="TOP">
		<TD ALIGN="LEFT"><TT>Form</TT></TD>
		<TD ALIGN="LEFT"><TT>Name</TT></TD>
		<TD ALIGN="LEFT"><TT>frmOwnership</TT></TD>
	</TR>
	<TR ALIGN="LEFT" VALIGN="TOP">
		<TD ALIGN="LEFT"></TD>
		<TD ALIGN="LEFT"><TT>Caption</TT></TD>
		<TD ALIGN="LEFT"><TT>Ownership</TT></TD>
	</TR>
	<TR ALIGN="LEFT" VALIGN="TOP">
		<TD ALIGN="LEFT"><TT>List box</TT></TD>
		<TD ALIGN="LEFT"><TT>Name</TT></TD>
		<TD ALIGN="LEFT"><TT>lstUsers</TT></TD>
	</TR>
	<TR ALIGN="LEFT" VALIGN="TOP">
		<TD ALIGN="LEFT"><TT>List box</TT></TD>
		<TD ALIGN="LEFT"><TT>Name</TT></TD>
		<TD ALIGN="LEFT"><TT>lstTablesAndQueries</TT></TD>
	</TR>
	<TR ALIGN="LEFT" VALIGN="TOP">
		<TD ALIGN="LEFT"><TT>Command button</TT></TD>
		<TD ALIGN="LEFT"><TT>Name</TT></TD>
		<TD ALIGN="LEFT"><TT>cmdSave</TT></TD>
	</TR>
	<TR ALIGN="LEFT" VALIGN="TOP">
		<TD ALIGN="LEFT"></TD>
		<TD ALIGN="LEFT"><TT>Caption</TT></TD>
		<TD ALIGN="LEFT"><TT>&amp;Save</TT></TD>
	</TR>
	<TR ALIGN="LEFT" VALIGN="TOP">
		<TD ALIGN="LEFT"><TT>Command button</TT></TD>
		<TD ALIGN="LEFT"><TT>Name</TT></TD>
		<TD ALIGN="LEFT"><TT>cmdClose</TT></TD>
	</TR>
	<TR ALIGN="LEFT" VALIGN="TOP">
		<TD ALIGN="LEFT"></TD>
		<TD ALIGN="LEFT"><TT>Caption</TT></TD>
		<TD ALIGN="LEFT"><TT>&amp;Close</TT></TD>
	</TR>
	<TR ALIGN="LEFT" VALIGN="TOP">
		<TD ALIGN="LEFT"></TD>
		<TD ALIGN="LEFT"><TT>Cancel</TT></TD>
		<TD ALIGN="LEFT"><TT>-1 `True</TT></TD>
	</TR>
	<TR ALIGN="LEFT" VALIGN="TOP">
		<TD ALIGN="LEFT"></TD>
		<TD ALIGN="LEFT"><TT>Default</TT></TD>
		<TD ALIGN="LEFT"><TT>-1 `True</TT></TD>
	</TR>
	<TR ALIGN="LEFT" VALIGN="TOP">
		<TD ALIGN="LEFT"><TT>Label</TT></TD>
		<TD ALIGN="LEFT"><TT>Name</TT></TD>
		<TD ALIGN="LEFT"><TT>lblUsers</TT></TD>
	</TR>
	<TR ALIGN="LEFT" VALIGN="TOP">
		<TD ALIGN="LEFT"></TD>
		<TD ALIGN="LEFT"><TT>Caption</TT></TD>
		<TD ALIGN="LEFT"><TT>&amp;Users:</TT></TD>
	</TR>
	<TR ALIGN="LEFT" VALIGN="TOP">
		<TD ALIGN="LEFT"><TT>Label</TT></TD>
		<TD ALIGN="LEFT"><TT>Name</TT></TD>
		<TD ALIGN="LEFT"><TT>lblTablesAndQueries</TT></TD>
	</TR>
	<TR ALIGN="LEFT" VALIGN="TOP">
		<TD ALIGN="LEFT"></TD>
		<TD ALIGN="LEFT"><TT>Caption</TT></TD>
		<TD ALIGN="LEFT"><TT>&amp;Tables And Queries</TT></TD>
	</TR>
	</TABLE>
</P>

</BLOCKQUOTE>


<DL>
	<DT></DT>
	<DD><B>2. </B>Begin by entering the following code into the declarations section
	of the project:
	<P>
</DL>



<BLOCKQUOTE>
	<PRE><TT>Option Explicit</TT>
` form-level object variable used to hold the database object
Private db As Database</PRE>

</BLOCKQUOTE>

<PRE></PRE>

<DL>
	<DT></DT>
	<DD><B>3. </B>Now enter the <TT>Form_Load</TT> event code as listed next. Change
	the <TT>sUserName</TT> and <TT>sPassword</TT> variables to hold the values of your
	administrator's username and password.
	<P>
</DL>



<BLOCKQUOTE>
	<PRE><TT>Private Sub Form_Load()</TT>
` if there is an error, then goto the code section labeled by ERR_Form_Load
On Error GoTo ERR_Form_Load:
    Dim sUserName As String
    Dim sPassword As String
    Dim sDBName As String
    ` assign default user name and password
    sUserName = &quot;Admin&quot;
    sPassword = &quot;&quot;
    With DBEngine
        ` set system database path and name
        .SystemDB = GetWorkgroupDatabase
        ` set default user name and password
        .DefaultUser = sUserName
        .DefaultPassword = sPassword
        ` get path and name of database from ReadINI module
        sDBName = DBPath
        ` open database
        Set db = .Workspaces(0).OpenDatabase(sDBName)
    End With
    ` populate the two list boxes with the available users, 
    ` tables, and queries from database
    FillUserList
    FillTableAndQueriesList
    ` if there are no valid users, inform the user and exit the 
    ` application
    If (lstUsers.ListCount &lt; 1) Then
        MsgBox &quot;There are no users!&quot;, vbExclamation, &quot;USERS&quot;
        cmdClose_Click
    Else
        ` initialize the list boxes to point to the first item in 
        ` each list box
        lstUsers.ListIndex = 0
        lstTablesAndQueries.ListIndex = 0
    End If
Exit Sub
ERR_Form_Load:
    ` display error for the user
    With Err
        MsgBox &quot;ERROR #&quot; &amp; .Number &amp; &quot;: &quot; &amp; .Description, vbExclamation, _
               &quot;ERROR&quot;
    End With
End Sub</PRE>

</BLOCKQUOTE>

<PRE></PRE>

<DL>
	<DT></DT>
	<DD><B>4. </B>Enter the <TT>Form_Unload</TT> code to ensure that the database object
	variable is closed and released before the application terminates:
	<P>
</DL>



<BLOCKQUOTE>
	<PRE><TT>Private Sub Form_Unload(Cancel As Integer)</TT>
    ` close the database
    Set db = Nothing
End Sub</PRE>

</BLOCKQUOTE>

<PRE></PRE>

<DL>
	<DT></DT>
	<DD><B>5. </B>Now enter the code for both the <TT>FillTableAndQueriesList</TT> and
	the <TT>FillUserList</TT> procedures. These two routines are very similar to those
	found in the preceding How-To. The <TT>FillTableAndQueriesList</TT> proce-dure populates
	the <TT>lstTablesAndQueries</TT> list box with the names of the data objects in the
	<TT>Tables</TT> container. The <TT>FillUserList</TT> routine populates the <TT>lstUsers</TT>
	list box with the users found in the <TT>Users</TT> collection of the current <TT>Workspace</TT>
	object.
	<P>
</DL>



<BLOCKQUOTE>
	<PRE><TT>Private Sub FillTableAndQueriesList()</TT>
    Dim oDocument As Document
    ` populate the TableAndQueries list boxes with all the 
    ` available tables and queries except the system ones
    For Each oDocument In db.Containers(&quot;Tables&quot;).Documents
        With oDocument
            If (Left$(.Name, 4) &lt;&gt; &quot;MSys&quot;) Then _
                    lstTablesAndQueries.AddItem .Name
        End With
    Next
End Sub
Private Sub FillUserList()
    Dim oUser As User
    ` populate the user list boxes with all users except CREATOR 
    ` and ENGINE (these shouldn't be changed)
    For Each oUser In DBEngine.Workspaces(0).Users
        With oUser
            If (UCase$(.Name) &lt;&gt; &quot;CREATOR&quot;) _
            And (UCase$(.Name) &lt;&gt; &quot;ENGINE&quot;) Then
                lstUsers.AddItem .Name
            End If
        End With
    Next
End Sub</PRE>

</BLOCKQUOTE>

<PRE></PRE>

<DL>
	<DT></DT>
	<DD><B>6. </B>Now enter the <TT>lstTablesAndQueries_Click</TT> event code as listed
	here. This code finds the owner of the selected data object from the Users list by
	comparing it to the <TT>Owner</TT> property of the selected <TT>Document</TT> object.
	<P>
</DL>



<BLOCKQUOTE>
	<PRE><TT>Private Sub lstTablesAndQueries_Click()</TT>
    Dim nCount As Integer
    Dim sCurOwner As String
    With lstUsers
        ` loop through each user until the owner of the selected 
        ` table or query is found
        For nCount = 0 To .ListCount - 1
        sCurOwner = _
          db.Containers(&quot;Tables&quot;).Documents(lstTablesAndQueries.Text).Owner
            If (.List(nCount) = sCurOwner) Then .ListIndex = nCount
        Next nCount
    End With
End Sub</PRE>

</BLOCKQUOTE>

<PRE></PRE>

<DL>
	<DT></DT>
	<DD><B>7. </B>The <TT>cmdSave_Click</TT> event code simply changes the value of the
	<TT>Owner</TT> property of the <TT>Documents</TT> object to that of the selected
	user from the <TT>lstUsers</TT> list box:
	<P>
</DL>



<BLOCKQUOTE>
	<PRE><TT>Private Sub cmdSave_Click()</TT>
` if there is an error, goto the code labeled by ERR_cmdSave_Click
On Error GoTo ERR_cmdSave_Click:
    ` assign the new owner to the select table or query
    db.Containers(&quot;Tables&quot;).Documents(lstTablesAndQueries.Text).Owner = _
            lstUsers.Text
Exit Sub
ERR_cmdSave_Click:
    ` display error for the user
    With Err
        MsgBox &quot;ERROR #&quot; &amp; .Number &amp; &quot;: &quot; &amp; .Description, _
                vbExclamation, &quot;ERROR&quot;
    End With
End Sub</PRE>

</BLOCKQUOTE>

<PRE></PRE>

<DL>
	<DT></DT>
	<DD><B>8. </B>Finally, enter the following code for the <TT>cmdClose_Click</TT> event
	to terminate the application:
	<P>
</DL>



<BLOCKQUOTE>
	<PRE><TT>Private Sub cmdClose_Click()</TT>
    ` end the application
    Unload Me
End Sub</PRE>

</BLOCKQUOTE>

<PRE></PRE>
<P><B>How It Works</B></P>
<P>When the program starts, the system database is accessed using the default user
and password properties. With this database, the <TT>lstTablesAndQueries</TT> list
box is populated with the available data objects. The Users list box is populated
with all the users available in the given workgroup. When the user selects a data
object from the list, the <TT>Owner</TT> property of that data object is used to
find the user who is the owner of it. With a click of the Save button on the <TT>frmOwnership</TT>
form, the <TT>Owner</TT> property is changed to the currently selected user in the
<TT>lstUsers</TT> list box.</P>
<P><B>Comments</B></P>
<P>You have added extensive error-handling code to the preceding few How-To's. This
is because of the complexity involved, and the precision necessary, when accessing
the system database. A lot of the code will vary from machine to machine and user
to user, depending on usernames and passwords.</P>
<P>If you are working on a single PC that is not part of a network, there is a very
good chance that you will have only one or two users listed in the <TT>lstUsers</TT>
list box. To add more users to your system, jump to How-To 10.9 to see a project
that enables you to add more users.</P>
<P>
<H2>10.7 How do I...</H2>
<H3><A NAME="Change or delete database"></A><B>Change or delete database</B></H3>
<P><B>passwords?</B></P>
<P><B>Problem</B></P>
<P>How do I give the system administrators at my site the ability to change users'
passwords for Access databases from my Visual Basic applications?</P>
<P><B>Technique</B></P>
<P>Each user's password is stored in the <TT>Password</TT> property of the corresponding
<TT>User</TT> object. The current user's password is stored in the <TT>Password</TT>
property of the current <TT>Workspace</TT> object.</P>
<P>The <TT>Password</TT> property cannot be read through Visual Basic, and it cannot
be directly set. To change the password, you must use the <TT>NewPassword</TT> method
for a given user. The <TT>NewPassword</TT> method has two arguments--the first being
the current password and the second being the new password. Ordinary users cannot
change their password without knowing the current one.</P>
<P>Users with Administer power can change other users' passwords as well as their
own without the need to know the current password. Instead, an empty string is passed
to the <TT>NewPassword</TT> method in place of the current password.</P>
<P><B>Steps</B></P>
<P>Open and run the PASSWORDS.VBP project. A list of available users appears on the
form, as shown in Figure 10.8. You can change the password of a given user by clicking
the Change Password button, or you can delete the password for a user by clicking
the Delete Password button.</P>
<P><A HREF="javascript:popUp('10fig08.gif')"><B>Figure 10.8.</B></A><B> </B><I>The
Passwords project.</I></P>

<DL>
	<DT><I></I></DT>
	<DD><B>1. </B>Create a new project and save it as PASSWORDS.VBP. Use <TT>Form1</TT>
	to add the objects and edit the properties as listed in Table 10.13. Save the form
	as frmPasswords.frm.
	<P>
</DL>



<BLOCKQUOTE>
	<H4>Table 10.13. Objects and properties for the Passwords project.</H4>
	<P>
	<TABLE BORDER="1">
	<TR ALIGN="LEFT" VALIGN="TOP">
		<TD ALIGN="LEFT"><B><I>OBJECT</I></B></TD>
		<TD ALIGN="LEFT"><B><I>Property</I></B></TD>
		<TD ALIGN="LEFT"><B><I>Setting</I></B></TD>
	</TR>
	<TR ALIGN="LEFT" VALIGN="TOP">
		<TD ALIGN="LEFT"><TT>Form</TT></TD>
		<TD ALIGN="LEFT"><TT>Name</TT></TD>
		<TD ALIGN="LEFT"><TT>frmPasswords</TT></TD>
	</TR>
	<TR ALIGN="LEFT" VALIGN="TOP">
		<TD ALIGN="LEFT"></TD>
		<TD ALIGN="LEFT"><TT>Caption</TT></TD>
		<TD ALIGN="LEFT"><TT>Passwords</TT></TD>
	</TR>
	<TR ALIGN="LEFT" VALIGN="TOP">
		<TD ALIGN="LEFT"><TT>List box</TT></TD>
		<TD ALIGN="LEFT"><TT>Name</TT></TD>
		<TD ALIGN="LEFT"><TT>lstUsers</TT></TD>
	</TR>
	<TR ALIGN="LEFT" VALIGN="TOP">
		<TD ALIGN="LEFT"><TT>Command button</TT></TD>
		<TD ALIGN="LEFT"><TT>Name</TT></TD>
		<TD ALIGN="LEFT"><TT>cmdChangePassword</TT></TD>
	</TR>
	<TR ALIGN="LEFT" VALIGN="TOP">
		<TD ALIGN="LEFT"></TD>
		<TD ALIGN="LEFT"><TT>Caption</TT></TD>
		<TD ALIGN="LEFT"><TT>C&amp;hange Password</TT></TD>
	</TR>
	<TR ALIGN="LEFT" VALIGN="TOP">
		<TD ALIGN="LEFT"><TT>Command button</TT></TD>
		<TD ALIGN="LEFT"><TT>Name</TT></TD>
		<TD ALIGN="LEFT"><TT>cmdDeletePassword</TT></TD>
	</TR>
	<TR ALIGN="LEFT" VALIGN="TOP">
		<TD ALIGN="LEFT"></TD>
		<TD ALIGN="LEFT"><TT>Caption</TT></TD>
		<TD ALIGN="LEFT"><TT>&amp;Delete Password</TT></TD>
	</TR>
	<TR ALIGN="LEFT" VALIGN="TOP">
		<TD ALIGN="LEFT"><TT>Command button</TT></TD>
		<TD ALIGN="LEFT"><TT>Name</TT></TD>
		<TD ALIGN="LEFT"><TT>cmdClose</TT></TD>
	</TR>
	<TR ALIGN="LEFT" VALIGN="TOP">
		<TD ALIGN="LEFT"></TD>
		<TD ALIGN="LEFT"><TT>Caption</TT></TD>
		<TD ALIGN="LEFT"><TT>&amp;Close</TT></TD>
	</TR>
	<TR ALIGN="LEFT" VALIGN="TOP">
		<TD ALIGN="LEFT"></TD>
		<TD ALIGN="LEFT"><TT>Cancel</TT></TD>
		<TD ALIGN="LEFT"><TT>-1 `True</TT></TD>
	</TR>
	<TR ALIGN="LEFT" VALIGN="TOP">
		<TD ALIGN="LEFT"></TD>
		<TD ALIGN="LEFT"><TT>Default</TT></TD>
		<TD ALIGN="LEFT"><TT>-1 `True</TT></TD>
	</TR>
	<TR ALIGN="LEFT" VALIGN="TOP">
		<TD ALIGN="LEFT"><TT>Label</TT></TD>
		<TD ALIGN="LEFT"><TT>Name</TT></TD>
		<TD ALIGN="LEFT"><TT>lblUsers</TT></TD>
	</TR>
	<TR ALIGN="LEFT" VALIGN="TOP">
		<TD ALIGN="LEFT"></TD>
		<TD ALIGN="LEFT"><TT>Caption</TT></TD>
		<TD ALIGN="LEFT"><TT>&amp;Users</TT></TD>
	</TR>
	</TABLE>
</P>

</BLOCKQUOTE>


<DL>
	<DT></DT>
	<DD><B>2. </B>Begin by entering the <TT>Form_Load</TT> event code to access the system
	database and the call to <TT>FillUserList</TT>, which populates the <TT>lstUsers</TT>
	list box. If there are no users in the list, the application terminates.
	<P>
</DL>



<BLOCKQUOTE>
	<PRE><TT>Private Sub Form_Load()</TT>
` if there is an error, then goto the code section labeled by 
` ERR_Form_Load
On Error GoTo ERR_Form_Load:
    Dim sUserName As String
    Dim sPassword As String
    ` assign default user name and password
    sUserName = &quot;Admin&quot;
    sPassword = &quot;&quot;
    With DBEngine
        ` set system database path and name
        .SystemDB = GetWorkgroupDatabase
        ` set default user name and password
        .DefaultUser = sUserName
        .DefaultPassword = sPassword
    End With
    ` populate the users list box with the available users
    FillUserList
    ` if there are no valid users, inform the user and exit the 
    ` application
    If (lstUsers.ListCount &lt; 1) Then
        MsgBox &quot;There are no users!&quot;, vbExclamation, &quot;USERS&quot;
        cmdClose_Click
    Else
        ` initialize the list boxes to point to the first item in 
        ` users list
        lstUsers.ListIndex = 0
    End If
Exit Sub
ERR_Form_Load:
    ` display error for the user
    With Err
        MsgBox &quot;ERROR #&quot; &amp; .Number &amp; &quot;: &quot; &amp; .Description, _
               vbExclamation, &quot;ERROR&quot;
    End With
    ` end the application
    cmdClose_Click
End Sub</PRE>

</BLOCKQUOTE>

<PRE></PRE>

<DL>
	<DT></DT>
	<DD><B>3. </B>Enter the code for the <TT>Click</TT> event of the <TT>cmdChangePassword</TT>
	command button as shown next. This code asks for the old password, the new password,
	and a confirmation of the new password; then it calls the <TT>ChangePassword</TT>
	routine to change the password. Users logged in as Admin do not have to specify anything
	for the old password because they have the power to change the current password without
	any knowledge <BR>
	of it.
	<P>
</DL>



<BLOCKQUOTE>
	<PRE><TT>Private Sub cmdChangePassword_Click()</TT>
    ` local variables used to store passwords
    Dim sOldPassword As String
    Dim sNewPassword As String
    Dim sConPassword As String
    ` ask for old password
    sOldPassword = InputBox( _
                   &quot;Please enter the old password for user `&quot; _
                            &amp; lstUsers.Text &amp; &quot;`.&quot;, _
                            &quot;CHANGE PASSWORD&quot;)
    ` ask for new password
    sNewPassword = InputBox( _
                   &quot;Please enter the new password for user `&quot; _
                            &amp; lstUsers.Text &amp; &quot;`.&quot;, _
                            &quot;CHANGE PASSWORD&quot;)
    ` confirm new password
    sConPassword = InputBox(&quot;Please confirm new password for user `&quot; _
                            &amp; lstUsers.Text &amp; &quot;`.&quot;, _
                            &quot;CHANGE PASSWORD&quot;)
    ` if new password is not equivalent to the confirmed password,
    ` notify the user and end the task; otherwise, change the 
    ` password
    If (sNewPassword &lt;&gt; sConPassword) Then
       MsgBox &quot;New password does not match confirmed password.&quot;, _
               vbExclamation, &quot;ERROR&quot;
    Else
        ChangePassword sOldPassword, sNewPassword
    End If
End Sub</PRE>

</BLOCKQUOTE>

<PRE></PRE>

<DL>
	<DT></DT>
	<DD><B>4. </B>Now enter the code to delete a password located in the <TT>Click</TT>
	event of the <TT>cmdDeletePassword</TT> command button. This event asks for the old
	password and calls the <TT>ChangePassword</TT> routine with an empty string as a
	new password to delete the current password. Again, if the user is logged on as Admin,
	as in this example, it is unnecessary to enter an old password.
	<P>
</DL>



<BLOCKQUOTE>
	<PRE><TT>Private Sub cmdDeletePassword_Click()</TT>
    ` local variable used to store old password
    Dim sOldPassword As String
    ` ask for old password
    sOldPassword = InputBox(_
&quot;Please enter the old password for user `&quot; _
                            &amp; lstUsers.Text &amp; &quot;`.&quot;, _
                                       &quot;DELETE PASSWORD&quot;)
    ` change the password
    ChangePassword sOldPassword, &quot;&quot;
End Sub</PRE>

</BLOCKQUOTE>

<PRE></PRE>

<DL>
	<DT></DT>
	<DD><B>5. </B>Enter the code for the <TT>cmdClose_Click</TT> event to terminate the
	application:
	<P>
</DL>



<BLOCKQUOTE>
	<PRE><TT>Private Sub cmdClose_Click()</TT>
    ` end the application
    Unload Me
End Sub</PRE>

</BLOCKQUOTE>

<PRE></PRE>

<DL>
	<DT></DT>
	<DD><B>6. </B>The <TT>FillUserList</TT> routine is listed next. This procedure adds
	all the current users of the workgroup to the <TT>lstUsers</TT> list box except for
	<TT>CREATOR</TT> and <TT>ENGINE</TT>. These should not be changed; therefore, they
	are not available for access by the user.
	<P>
</DL>



<BLOCKQUOTE>
	<PRE><TT>Private Sub FillUserList()</TT>
    Dim oUser As User
    ` populate the user list boxes with all users except CREATOR 
    ` and ENGINE (these shouldn't be changed)
    For Each oUser In DBEngine.Workspaces(0).Users
        With oUser
            If (UCase$(.Name) &lt;&gt; &quot;CREATOR&quot;) _
            And (UCase$(.Name) &lt;&gt; &quot;ENGINE&quot;) Then
                lstUsers.AddItem .Name
            End If
        End With
    Next
End Sub</PRE>

</BLOCKQUOTE>

<PRE></PRE>

<DL>
	<DT></DT>
	<DD><B>7. </B>Finally, enter the <TT>ChangePassword</TT> routine listed here. This
	procedure takes two arguments. The first is the old password, and the second is the
	new password. If there are no errors, the password is changed using the <TT>NewPassword</TT>
	method.
	<P>
</DL>



<BLOCKQUOTE>
	<PRE><TT>Private Sub ChangePassword(sOldPassword As String, _</TT>
                           sNewPassword As String)
` if there is an error, then goto the code labeled by 
` ERR_ChangePassword
On Error GoTo ERR_ChangePassword:
    ` constant used to define application-defined error
    Const ERR_PASSWORD_TOO_LONG = 32000
    ` if the new password is too long, raise application-defined 
    ` error
    If (Len(sNewPassword) &gt; 14) Then Error ERR_PASSWORD_TOO_LONG
    ` change password, given the old and new passwords
    DBEngine.Workspaces(0).Users(lstUsers.Text).NewPassword _
             sOldPassword, sNewPassword
    ` if we got this far, we must be successful; notify the user
    MsgBox &quot;Password successfully changed for user `&quot; _
           &amp; lstUsers.Text &amp; &quot;`&quot;, vbInformation, &quot;SUCCESS&quot;
Exit Sub
ERR_ChangePassword:
    ` local variable used to hold error message
    Dim sMessage As String
    With Err
        Select Case .Number
            ` application-defined error, password too long
            Case ERR_PASSWORD_TOO_LONG:
                sMessage = _
                   &quot;The password must be 14 characters or less.&quot;
            ` unexpected error, create error message with number 
            ` and description
            Case Else:
                sMessage = &quot;ERROR #&quot; &amp; .Number &amp; &quot;: &quot; &amp; _
                           .Description
        End Select
    End With
    ` display error for the user
    MsgBox sMessage, vbExclamation, &quot;ERROR&quot;
End Sub</PRE>

</BLOCKQUOTE>

<PRE></PRE>
<P><B>How It Works</B></P>
<P>After the program accesses the system database in the <TT>Form_Load</TT> event,
the list box on the form is populated with the available users in the workgroup.
When a user selects a username from the list and clicks the Change Password button,
old and new passwords are sent to the <TT>ChangePassword</TT> procedure, where a
call to the <TT>NewPassword</TT> method changes the password. When the user clicks
the Delete Password button, an empty string is passed to the <TT>ChangePassword</TT>
procedure to set the new password to nothing, therefore deleting it.</P>
<P>
<H2>10.8 How do I...</H2>
<H3><A NAME="Use a single password ..."></A><B>Use a single password for data access
for all users?</B></H3>
<P><B>Problem</B></P>
<P>I want to secure my Access database, but I do not think it is necessary for each
user to have his or her own password. Instead, I want to create a password that I
can change for the entire database, regardless of the user. How do I create a single
password for an entire Access database with Visual Basic?</P>
<P><B>Technique</B></P>
<P>The same concept shown in How-To 10.7 applies here. The <TT>NewPassword</TT> method
is used to change the password for a given Access database.</P>
<P>The <TT>NewPassword</TT> not only applies to the <TT>User</TT> object, but it
also is available with the <TT>Database</TT> object. When you specify a password
for a database, you must connect to that database in the future with a string indicating
the valid password.</P>
<P>This string is passed as an argument to the <TT>OpenDatabase</TT> method, as shown
in this example:</P>


<BLOCKQUOTE>
	<PRE><TT>Set db = _</TT>
<TT>  DBEngine.Workspaces(0).OpenDatabase(<I>DBName</I>, True, False, &quot;;pwd=<I>PASSWORD</I>&quot;)</TT></PRE>

</BLOCKQUOTE>

<PRE><TT></TT></PRE>
<P>Here, <TT>db</TT> is a database object, <I><TT>DBName</TT></I> is a valid path
and name of an Access database, and <I><TT>PASSWORD</TT></I> is the password for
the given database.</P>
<P><B>Steps</B></P>
<P>Open and run the DatabasePassword.vbp project. You should see the form as shown
in Figure 10.9. When a user clicks the Open Database button, she is prompted with
an input box asking for the password for the database. If there is no password, the
user simply presses Enter. After the database is open, the user can change the password
by clicking the Change Password button. Just as with changing a user's password,
the project prompts for the old password as well as the new and a confirmation of
the new password. If all is successful, the password is changed.</P>
<P><A HREF="javascript:popUp('10fig09.gif')"><B>Figure 10.9.</B></A><B> </B><I>The
DatabasePassword project.</I></P>

<DL>
	<DT><I></I></DT>
	<DD><B>1. </B>Create a new project and save it as DatabasePassword.vbp. Add the objects
	and edit the properties of <TT>Form1</TT> as shown in Table 10.14. Afterward, save
	the form as frmDatabasePassword.frm.
	<P>
</DL>



<BLOCKQUOTE>
	<H4>Table 10.14. Objects and properties for the DatabasePassword project.</H4>
	<P>
	<TABLE BORDER="1">
	<TR ALIGN="LEFT" VALIGN="TOP">
		<TD ALIGN="LEFT"><B><I>OBJECT</I></B></TD>
		<TD ALIGN="LEFT"><B><I>Property</I></B></TD>
		<TD ALIGN="LEFT"><B><I>Setting</I></B></TD>
	</TR>
	<TR ALIGN="LEFT" VALIGN="TOP">
		<TD ALIGN="LEFT"><TT>Form</TT></TD>
		<TD ALIGN="LEFT"><TT>Name</TT></TD>
		<TD ALIGN="LEFT"><TT>frmDatabasePassword</TT></TD>
	</TR>
	<TR ALIGN="LEFT" VALIGN="TOP">
		<TD ALIGN="LEFT"></TD>
		<TD ALIGN="LEFT"><TT>Caption</TT></TD>
		<TD ALIGN="LEFT"><TT>Database Password</TT></TD>
	</TR>
	<TR ALIGN="LEFT" VALIGN="TOP">
		<TD ALIGN="LEFT"><TT>Command button</TT></TD>
		<TD ALIGN="LEFT"><TT>Name</TT></TD>
		<TD ALIGN="LEFT"><TT>cmdOpenDatabase</TT></TD>
	</TR>
	<TR ALIGN="LEFT" VALIGN="TOP">
		<TD ALIGN="LEFT"></TD>
		<TD ALIGN="LEFT"><TT>Caption</TT></TD>
		<TD ALIGN="LEFT"><TT>&amp;Open Database</TT></TD>
	</TR>
	<TR ALIGN="LEFT" VALIGN="TOP">
		<TD ALIGN="LEFT"><TT>Command button</TT></TD>
		<TD ALIGN="LEFT"><TT>Name</TT></TD>
		<TD ALIGN="LEFT"><TT>cmdChangePassword</TT></TD>
	</TR>
	<TR ALIGN="LEFT" VALIGN="TOP">
		<TD ALIGN="LEFT"></TD>
		<TD ALIGN="LEFT"><TT>Caption</TT></TD>
		<TD ALIGN="LEFT"><TT>Change &amp;Password</TT></TD>
	</TR>
	<TR ALIGN="LEFT" VALIGN="TOP">
		<TD ALIGN="LEFT"><TT>Command button</TT></TD>
		<TD ALIGN="LEFT"><TT>Name</TT></TD>
		<TD ALIGN="LEFT"><TT>cmdCloseDatabase</TT></TD>
	</TR>
	<TR ALIGN="LEFT" VALIGN="TOP">
		<TD ALIGN="LEFT"></TD>
		<TD ALIGN="LEFT"><TT>Caption</TT></TD>
		<TD ALIGN="LEFT"><TT>&amp;Close Database</TT></TD>
	</TR>
	<TR ALIGN="LEFT" VALIGN="TOP">
		<TD ALIGN="LEFT"><TT>Command button</TT></TD>
		<TD ALIGN="LEFT"><TT>Name</TT></TD>
		<TD ALIGN="LEFT"><TT>cmdExit</TT></TD>
	</TR>
	<TR ALIGN="LEFT" VALIGN="TOP">
		<TD ALIGN="LEFT"></TD>
		<TD ALIGN="LEFT"><TT>Caption</TT></TD>
		<TD ALIGN="LEFT"><TT>&amp;Exit</TT></TD>
	</TR>
	<TR ALIGN="LEFT" VALIGN="TOP">
		<TD ALIGN="LEFT"></TD>
		<TD ALIGN="LEFT"><TT>Cancel</TT></TD>
		<TD ALIGN="LEFT"><TT>-1 `True</TT></TD>
	</TR>
	<TR ALIGN="LEFT" VALIGN="TOP">
		<TD ALIGN="LEFT"></TD>
		<TD ALIGN="LEFT"><TT>Default</TT></TD>
		<TD ALIGN="LEFT"><TT>-1 `True</TT></TD>
	</TR>
	</TABLE>
</P>

</BLOCKQUOTE>


<DL>
	<DT></DT>
	<DD><B>2. </B>Enter the following code in the declarations section of your project.
	The <TT>db</TT> object variable is used to store the database object, and the <TT>NO_ERROR</TT>
	constant declaration is used throughout the project to indicate success.
	<P>
</DL>



<BLOCKQUOTE>
	<PRE><TT>Option Explicit</TT>
` form-level object variable declaration used to hold database 
` object
Private db As Database
` form-level constant declaration used to indicate success
Private Const NO_ERROR = 0</PRE>

</BLOCKQUOTE>

<PRE></PRE>

<DL>
	<DT></DT>
	<DD><B>3. </B>Now enter the familiar <TT>Form_Load</TT> event as shown next. This
	event, like the others in the previous How-To sections, establishes a link with the
	system database using a default user and password. These variables might need to
	be altered by the user to her own Administer values.
	<P>
</DL>



<BLOCKQUOTE>
	<PRE><TT>Private Sub Form_Load()</TT>
` if there is an error, then goto the code section labeled by 
` ERR_Form_Load
On Error GoTo ERR_Form_Load:
    Dim sUserName As String
    Dim sPassword As String
    ` assign default user name and password
    sUserName = &quot;Admin&quot;
    sPassword = &quot;&quot;
    With DBEngine
        ` set system database path and name
        .SystemDB = GetWorkgroupDatabase
        ` set default user name and password
        .DefaultUser = sUserName
        .DefaultPassword = sPassword
    End With
    ` initialize database to closed state to disable various 
    ` buttons
    cmdCloseDatabase_Click
Exit Sub
ERR_Form_Load:
    ` display error for the user
    With Err
        MsgBox &quot;ERROR #&quot; &amp; .Number &amp; &quot;: &quot; &amp; .Description, _
               vbExclamation, _
               &quot;ERROR&quot;
    End With
    ` end the application
    cmdExit_Click
End Sub</PRE>

</BLOCKQUOTE>

<PRE></PRE>

<DL>
	<DT></DT>
	<DD><B>4. </B>Add the code that ensures that the database is closed in the <TT>Form_Unload</TT>
	event as shown here:
	<P>
</DL>



<BLOCKQUOTE>
	<PRE><TT>Private Sub Form_Unload(Cancel As Integer)</TT>
    ` ensure that the database is closed upon shutdown of 
    ` application
    cmdCloseDatabase_Click
End Sub</PRE>

</BLOCKQUOTE>

<PRE></PRE>

<DL>
	<DT></DT>
	<DD><B>5. </B>Now enter the code for the <TT>cmdOpenDatabase_Click</TT> event of
	the Open Database command button. This code prompts the user for the current database
	password, creates a password string, and passes it to the <TT>OpenDatabase</TT> method.
	If all is successful, the user is notified that the database is opened, and the Change
	Password and Close Database buttons are enabled.
	<P>
</DL>



<BLOCKQUOTE>
	<PRE><TT>Private Sub cmdOpenDatabase_Click()</TT>
` if there is an error, goto the code labeled by 
` ERR_cmdOpenDatabase_Click
On Error GoTo ERR_cmdOpenDatabase_Click:
    Dim sPassword As String
    Dim sDBName As String
    ` local constant declaration of application-defined error
    Const ERR_NOT_VALID_PASSWORD = 3031
    ` ask user for the password of the database
    sPassword = InputBox(&quot;Please enter database password.&quot;, _
                         &quot;OPEN DATABASE&quot;)
    ` create connection string
    sPassword = &quot;;pwd=&quot; &amp; sPassword
    ` retrieve database name and path from the ReadINI module
    sDBName = DBPath
    ` attempt to open the database
    Set db = DBEngine.Workspaces(0).OpenDatabase _
                (sDBName, True, False, sPassword)
ERR_cmdOpenDatabase_Click:
    Dim sMessage As String
    With Err
        ` determine error
        Select Case .Number
            ` there is no error, inform the user of success and 
            ` enable the use of the change password and close 
            ` database command buttons
            Case NO_ERROR:
                sMessage = &quot;Database opened successfully.&quot;
                cmdOpenDatabase.Enabled = False
                cmdChangePassword.Enabled = True
                cmdCloseDatabase.Enabled = True
            ` password is incorrect
            Case ERR_NOT_VALID_PASSWORD:
                sMessage = &quot;Invalid password.&quot;
            ` unexpected error, inform the user
            Case Else:
                sMessage = &quot;ERROR #&quot; &amp; .Number &amp; &quot;: &quot; &amp; _
                           .Description
        End Select
        ` display the error for the user
        MsgBox sMessage, _
               IIf(.Number = NO_ERROR, vbInformation, _
                             vbExclamation), _
               IIf(.Number = NO_ERROR, &quot;SUCCESS&quot;, &quot;ERROR&quot;)
    End With
End Sub</PRE>

</BLOCKQUOTE>

<PRE></PRE>

<DL>
	<DT></DT>
	<DD><B>6. </B>The <TT>cmdChangePassword_Click</TT> event prompts the user for the
	old password, the new, and a confirmation, and successfully changes the password
	by calling the <TT>NewPassword</TT> method of the <TT>Database</TT> object. Enter
	the following code:
	<P>
</DL>



<BLOCKQUOTE>
	<PRE><TT>Private Sub cmdChangePassword_Click()</TT>
` if there is an error,
` goto the code labeled by ERR_cmdChangePassword_Click
On Error GoTo ERR_cmdChangePassword_Click:
    ` local variables used to store passwords
    Dim sOldPassword As String
    Dim sNewPassword As String
    Dim sConPassword As String
    ` private constant declarations for application-defined errors
    Const ERR_PASSWORDS_DIFFER = 32000
    Const ERR_PASSWORD_TOO_LONG = 32001
    ` ask for old password
    sOldPassword = InputBox(&quot;Please enter the old password for &quot; _
                          &amp; &quot;the database.&quot;, &quot;CHANGE PASSWORD&quot;)
    ` ask for new password
    sNewPassword = InputBox(&quot;Please enter the new password for &quot; _
                          &amp; &quot;the database.&quot;, &quot;CHANGE PASSWORD&quot;)
    If (Len(sNewPassword) &gt; 14) Then Error ERR_PASSWORD_TOO_LONG
    ` confirm new password
    sConPassword = InputBox(&quot;Please confirm new password for &quot; _
                          &amp; &quot;the database.&quot;, &quot;CHANGE PASSWORD&quot;)
    ` if new password is not equivalent to the confirmed password,
    ` notify the user and end the task; otherwise, change the 
    ` password
    If (sNewPassword &lt;&gt; sConPassword) Then Error _
       ERR_PASSWORDS_DIFFER
    ` change the password
    db.NewPassword sOldPassword, sNewPassword
ERR_cmdChangePassword_Click:
    Dim sMessage As String
    With Err
        ` select appropriate error
        Select Case .Number
            ` no error has occurred, inform the user of success
            Case NO_ERROR:
                sMessage = &quot;Password changed successfully.&quot;
            ` new and confirmed passwords are different
            Case ERR_PASSWORDS_DIFFER:
                sMessage = &quot;The confirmed password does not &quot; _
                         &amp; &quot;match the new password.&quot;
            ` password is longer than 14 characters
            Case ERR_PASSWORD_TOO_LONG:
                sMessage = _
                   &quot;The password must be 14 characters or less.&quot;
            ` unexpected error, inform the user
            Case Else:
                sMessage = &quot;ERROR #&quot; &amp; .Number &amp; &quot;: &quot; &amp; _
                           .Description
        End Select
        ` display the error for the user
        MsgBox sMessage, _
               IIf(.Number = NO_ERROR, vbInformation, _
                             vbExclamation), _
               IIf(.Number = NO_ERROR, &quot;SUCCESS&quot;, &quot;ERROR&quot;)
    End With
End Sub</PRE>

</BLOCKQUOTE>

<PRE></PRE>

<DL>
	<DT></DT>
	<DD><B>7. </B>The <TT>Click</TT> event of the Close Database command button is listed
	next. This procedure simply releases the database object by setting it equal <BR>
	to nothing and disables the Change Password and Close Database <BR>
	buttons, as well as enables the Open Database button. The final event, <TT>cmdExit_Click</TT>,
	ends the application. Enter these procedures now:
	<P>
</DL>



<BLOCKQUOTE>
	<PRE><TT>Private Sub cmdCloseDatabase_Click()</TT>
    ` close the database
    Set db = Nothing
    ` only allow the user to open the database
    cmdOpenDatabase.Enabled = True
    cmdChangePassword.Enabled = False
    cmdCloseDatabase.Enabled = False
End Sub
Private Sub cmdExit_Click()
    ` end the application
    Unload Me
End Sub</PRE>

</BLOCKQUOTE>

<PRE></PRE>
<P><B>How It Works</B></P>
<P>When the <TT>DatabasePassword</TT> project is initialized, the system database
is addressed with the default username and password. When the user opens the database,
he is prompted for the current password. This password is used to create a string
that is passed to the <TT>OpenDatabase</TT> method to open the database object.</P>
<P>When the user elects to change the current database password, he is asked to supply
the old and new passwords, as well as a confirmation of the new password. With a
call to the <TT>NewDatabase</TT> method of the database object, the password is changed.</P>
<P>You should note that the password cannot be changed when a database is opened
in shared mode. As in this How-To, you must open the database exclusively (by specifying
<TT>True</TT> as the second argument to the <TT>OpenDatabase</TT> method) to change
the password.</P>
<P><B>Comments</B></P>
<P>Every How-To in this chapter uses the same database, the ORDERS.MDB database file.
When you are through with this How-To, be sure to change the database password back
to a <TT>NULL</TT> string so that the other How-To projects can successfully access
the database!</P>
<P>
<H2>10.9 How do I...</H2>
<H3><A NAME="Add new users to a system ..."></A><B>Add new users to a system database?</B></H3>
<P><B>Problem</B></P>
<P>I need to give system administrators at my user sites the ability to add new users
to the system database. How do I accomplish this task through Visual Basic?</P>
<P><B>Technique</B></P>
<P>The <TT>Workspace</TT> object has a collection called <TT>Users</TT>. Each user
defined in the system database has a corresponding <TT>User</TT> object within the
<TT>Users</TT> collection. To add a new user, you must first create a new <TT>User</TT>
object. The new <TT>User</TT> object must be supplied a name, a PID, and, optionally,
a password.</P>
<P>The PID is a case-sensitive alphanumeric string between 4 and 20 characters in
length. The Jet engine uses this PID in combination with the username to build a
security ID for a user.</P>
<P>After the <TT>User</TT> object is created, it is appended to the <TT>Users</TT>
collection of the current <TT>Workspace</TT> object via the <TT>Append</TT> method.</P>
<P><B>Steps</B></P>
<P>Open and run the AddUser.vbp project. You should see the form shown in Figure
10.10. To add a user, click the Add User button and supply a username and password;
the PID string is calculated from the username. If the user is successfully added,
you will see a message box indicating so, and the list box on the form will be updated
to include the new user.</P>
<P><A HREF="javascript:popUp('10fig10.gif')"><B>Figure 10.10.</B></A><B> </B><I>The
AddUser project.</I></P>

<DL>
	<DT><I></I></DT>
	<DD><B>1. </B>Create a new project and call it AddUser.vbp. Using <TT>Form1</TT>,
	add the objects and edit the properties as shown in Table 10.15, saving the form
	as frmAddUser.frm.
	<P>
</DL>



<BLOCKQUOTE>
	<H4>Table 10.15. Objects and properties for the AddUser project.</H4>
	<P>
	<TABLE BORDER="1">
	<TR ALIGN="LEFT" VALIGN="TOP">
		<TD ALIGN="LEFT"><B><I>OBJECT</I></B></TD>
		<TD ALIGN="LEFT"><B><I>Property</I></B></TD>
		<TD ALIGN="LEFT"><B><I>Setting</I></B></TD>
	</TR>
	<TR ALIGN="LEFT" VALIGN="TOP">
		<TD ALIGN="LEFT"><TT>Form</TT></TD>
		<TD ALIGN="LEFT"><TT>Name</TT></TD>
		<TD ALIGN="LEFT"><TT>frmAddUser</TT></TD>
	</TR>
	<TR ALIGN="LEFT" VALIGN="TOP">
		<TD ALIGN="LEFT"></TD>
		<TD ALIGN="LEFT"><TT>Caption</TT></TD>
		<TD ALIGN="LEFT"><TT>Add User</TT></TD>
	</TR>
	<TR ALIGN="LEFT" VALIGN="TOP">
		<TD ALIGN="LEFT"><TT>List box</TT></TD>
		<TD ALIGN="LEFT"><TT>Name</TT></TD>
		<TD ALIGN="LEFT"><TT>lstUsers</TT></TD>
	</TR>
	<TR ALIGN="LEFT" VALIGN="TOP">
		<TD ALIGN="LEFT"><TT>Command button</TT></TD>
		<TD ALIGN="LEFT"><TT>Name</TT></TD>
		<TD ALIGN="LEFT"><TT>cmdAddUser</TT></TD>
	</TR>
	<TR ALIGN="LEFT" VALIGN="TOP">
		<TD ALIGN="LEFT"></TD>
		<TD ALIGN="LEFT"><TT>Caption</TT></TD>
		<TD ALIGN="LEFT"><TT>&amp;Add User</TT></TD>
	</TR>
	<TR ALIGN="LEFT" VALIGN="TOP">
		<TD ALIGN="LEFT"><TT>Command button</TT></TD>
		<TD ALIGN="LEFT"><TT>Name</TT></TD>
		<TD ALIGN="LEFT"><TT>cmdClose</TT></TD>
	</TR>
	<TR ALIGN="LEFT" VALIGN="TOP">
		<TD ALIGN="LEFT"></TD>
		<TD ALIGN="LEFT"><TT>Caption</TT></TD>
		<TD ALIGN="LEFT"><TT>&amp;Close</TT></TD>
	</TR>
	<TR ALIGN="LEFT" VALIGN="TOP">
		<TD ALIGN="LEFT"></TD>
		<TD ALIGN="LEFT"><TT>Cancel</TT></TD>
		<TD ALIGN="LEFT"><TT>-1 `True</TT></TD>
	</TR>
	<TR ALIGN="LEFT" VALIGN="TOP">
		<TD ALIGN="LEFT"></TD>
		<TD ALIGN="LEFT"><TT>Default</TT></TD>
		<TD ALIGN="LEFT"><TT>-1 `True</TT></TD>
	</TR>
	<TR ALIGN="LEFT" VALIGN="TOP">
		<TD ALIGN="LEFT"><TT>Label</TT></TD>
		<TD ALIGN="LEFT"><TT>Name</TT></TD>
		<TD ALIGN="LEFT"><TT>lblUsers</TT></TD>
	</TR>
	<TR ALIGN="LEFT" VALIGN="TOP">
		<TD ALIGN="LEFT"></TD>
		<TD ALIGN="LEFT"><TT>Caption</TT></TD>
		<TD ALIGN="LEFT"><TT>&amp;Users</TT></TD>
	</TR>
	</TABLE>
</P>

</BLOCKQUOTE>


<DL>
	<DT></DT>
	<DD><B>2. </B>There are no form-level declarations in this project, so go ahead and
	enter the <TT>Form_Load</TT> event code as shown next. This code accesses the system
	database using the default username, Admin, and an empty string password. After this
	is done, the <TT>FillUserList</TT> procedure is called to show all the available
	users in the system database.
	<P>
</DL>



<BLOCKQUOTE>
	<PRE><TT>Private Sub Form_Load()</TT>
` if there is an error, then goto the code section labeled by 
` ERR_Form_Load
On Error GoTo ERR_Form_Load:
    Dim sUserName As String
    Dim sPassword As String
    ` assign default user name and password
    sUserName = &quot;Admin&quot;
    sPassword = &quot;&quot;
    With DBEngine
        ` set system database path and name
        .SystemDB = GetWorkgroupDatabase
        ` set default user name and password
        .DefaultUser = sUserName
        .DefaultPassword = sPassword
    End With
    ` populate the users list box with the available users
    FillUserList
Exit Sub
ERR_Form_Load:
    ` display error for the user
    With Err
        MsgBox &quot;ERROR #&quot; &amp; .Number &amp; &quot;: &quot; &amp; .Description, _
               vbExclamation, _
               &quot;ERROR&quot;
    End With
    ` end the application
    cmdClose_Click
End Sub</PRE>

</BLOCKQUOTE>

<PRE></PRE>

<DL>
	<DT></DT>
	<DD><B>3. </B>Now enter the code for the <TT>Click</TT> event of the <TT>cmdAddUser</TT>
	command button. This event asks the user for both a username and a password. After
	error-checking the input values, the procedure calls the <TT>GetNewPID</TT> procedure
	to receive a personal identifier. This event then creates a new <TT>User</TT> object
	with this information and appends it to the <TT>Users</TT> collection <BR>
	of the current <TT>Workspace</TT> object.
	<P>
</DL>



<BLOCKQUOTE>
	<PRE><TT>Private Sub cmdAddUser_Click()</TT>
` if there is an error, then goto code labeled by 
` ERR_cmdAddUser_Click
On Error GoTo ERR_cmdAddUser_Click:
    ` local variables used to store passwords
    Dim sNewUserName As String
    Dim sNewPassword As String
    Dim sConPassword As String
    ` local variables used for the new user
    Dim sPID As String
    Dim oNewUser As User
    ` constant declarations for application-defined error messages
    Const ERR_NO_USER_NAME = 32000
    Const ERR_PASSWORD_TOO_LONG = 32001
    Const ERR_PASSWORDS_NOT_EQUAL = 32002
    ` enter a new username
    sNewUserName = InputBox(&quot;Please enter a new username.&quot;, _
&quot;ADD USER&quot;)
    ` trim excess white spaces from the username
    sNewUserName = Trim$(sNewUserName)
    ` if no username is entered, notify the user and abandon task
    If (sNewUserName = &quot;&quot;) Then Error ERR_NO_USER_NAME
    ` ask for new password
    sNewPassword = InputBox( _
                   &quot;Please enter the new password for user `&quot; _
                            &amp; sNewUserName &amp; &quot;`.&quot;, &quot;ADD USER&quot;)
    ` if the password is too long, notify the user and end the 
    ` task
    If (Len(sNewPassword) &gt; 14) Then Error ERR_PASSWORD_TOO_LONG
    ` confirm new password
    sConPassword = InputBox(&quot;Please confirm new password for user `&quot; _
                            &amp; sNewUserName &amp; &quot;`.&quot;, &quot;ADD USER&quot;)
    ` if new password is not equivalent to the confirmed password,
    ` notify the user and end the task
    If (sNewPassword &lt;&gt; sConPassword) Then Error _
       ERR_PASSWORDS_NOT_EQUAL
    `get a PID for the new user
    sPID = GetNewPID(sNewUserName)
    With DBEngine
        ` create a new user object from username, pid, and 
        ` password
        Set oNewUser = .Workspaces(0).CreateUser(sNewUserName, _
                                                 sPID, _
                                                 sNewPassword)
        ` append the new users to the workspace
        .Workspaces(0).Users.Append oNewUser
    End With
    ` repopulate list box with new users
    FillUserList
    ` notify the user of success
    MsgBox &quot;User `&quot; &amp; sNewUserName &amp; &quot;` added successfully.&quot;, _
            vbInformation, &quot;ADD USER&quot;
Exit Sub
ERR_cmdAddUser_Click:
    ` variable used for error message
    Dim sMessage As String
    With Err
        ` create an error message for given error code
        Select Case .Number
            Case ERR_NO_USER_NAME:
                sMessage = &quot;You did not enter a user name.&quot;
            Case ERR_PASSWORD_TOO_LONG:
                sMessage = _
                   &quot;The password must be 14 characters or less&quot;
            Case ERR_PASSWORDS_NOT_EQUAL:
                sMessage = &quot;The confirmed password is not &quot; _
                         &amp; &quot;equivalent to the new password.&quot;
            ` unexpected error, create an error message from the 
            ` error number and description
            Case Else:
                sMessage = &quot;ERROR #&quot; &amp; .Number &amp; &quot;: &quot; &amp; _
                         .Description
        End Select
    End With
    ` display the error message for the user
    MsgBox sMessage, vbExclamation, &quot;ERROR&quot;
End Sub</PRE>

</BLOCKQUOTE>

<PRE></PRE>

<DL>
	<DT></DT>
	<DD><B>4. </B>Enter the following code to terminate the application:
	<P>
</DL>



<BLOCKQUOTE>
	<PRE><TT>Private Sub cmdClose_Click()</TT>
    ` end the application
    Unload Me
End Sub</PRE>

</BLOCKQUOTE>

<PRE></PRE>

<DL>
	<DT></DT>
	<DD><B>5. </B>Now enter the <TT>FillUserList</TT> procedure, which populates the
	<TT>lstUsers</TT> list box with all the users listed in the system database:
	<P>
</DL>



<BLOCKQUOTE>
	<PRE><TT>Private Sub FillUserList()</TT>
    Dim oUser As User
    With lstUsers
        ` clear current list of users
        .Clear
        ` populate the user list boxes with all users
        For Each oUser In DBEngine.Workspaces(0).Users
            .AddItem oUser.Name
        Next
    End With
End Sub</PRE>

</BLOCKQUOTE>

<PRE></PRE>

<DL>
	<DT></DT>
	<DD><B>6. </B>Finally, enter the <TT>GetNewPID</TT> function, which creates a new
	PID string for the specified username, ensuring that it is at least 4 but no more
	than 20 characters:
	<P>
</DL>



<BLOCKQUOTE>
	<PRE><TT>Private Function GetNewPID(sUserName As String) As String</TT>
    Dim sPID As String
    ` create new PID
    sPID = sUserName
    If (Len(sPID) &gt; 20) Then
        ` if the PID is greater than 20 characters, shorten it
        sPID = Left$(sPID, 20)
    Else
        ` if the PID is less than 4 characters, add some 
        ` underscores
        While (Len(sPID) &lt; 4)
            sPID = sPID &amp; &quot;_&quot;
        Wend
    End If
    ` return newly created PID value
    GetNewPID = sPID
End Function</PRE>

</BLOCKQUOTE>

<PRE></PRE>
<P><B>How It Works</B></P>
<P>When the <TT>AddUser</TT> project starts, the code reads the system database to
populate the list box on the form with the available users. When the user decides
to add a new user by clicking the Add User button, he must enter both a new username
and a password. The username is used to create a PID string. The name, PID, and password
are then used to create a new <TT>User</TT> object, which is appended to the existing
<TT>Users</TT> collection.</P>
<P><B>Comments</B></P>
<P>To remove a user from the system database, simply use the <TT>Delete</TT> method
of the <TT>Workspace</TT> object's <TT>Users</TT> collection to delete the desired
user, as shown here:</P>


<BLOCKQUOTE>
	<PRE><TT>DBEngine.Workspaces(0).Users(&quot;<I>USERNAME</I>&quot;).Delete</TT></PRE>

</BLOCKQUOTE>

<PRE><TT></TT></PRE>
<P>Here, <I><TT>USERNAME</TT></I> is a name of a user currently in the <TT>Users</TT>
collection of the current workspace.</P>
<P>
<H2>10.10 How do I...</H2>
<H3><A NAME="Define new groups in a system ..."></A><B>Define new groups in a system
database?</B></H3>
<P><B>Problem</B></P>
<P>How do I give system administrators the ability to define new groups in the system
database through Visual Basic?</P>
<P><B>Technique</B></P>
<P>The techniques used in this How-To directly correspond to those used in How-To
10.9. To add a new group to the <TT>Groups</TT> collection of the current <TT>Workspace</TT>
object, you must first create a new <TT>Group</TT> object from a group name and a
PID.</P>
<P>In previous versions of Microsoft Jet, the identifier used for a group was called
a GID (group identifier). Now, to make things uniform, it is called a PID (personal
identifier), as it is for a user.</P>
<P>The PID is used in the same manner for a group as for a user. It is used in conjunction
with the group name to build an SID for the group. After you create the group with
its name and PID, you can append it to the <TT>Groups</TT> collection of the current
<TT>Workspace</TT> object.</P>
<P><B>Steps</B></P>
<P>Open and run the AddGroup.vbp project. You should see the form shown in Figure
10.11. To add a group, click the Add Group button and supply the application with
a name for the new group. If all is successful, you will see a verification message
box and the new group in the list of groups on the form.</P>
<P><A HREF="javascript:popUp('10fig11.gif')"><B>Figure 10.11.</B></A><B> </B><I>The
AddGroup project.</I></P>

<DL>
	<DT><I></I></DT>
	<DD><B>1. </B>Create a new project and save it as AddGroup.vbp. Use <TT>Form1</TT>
	to create the objects and edit the properties as listed in Table 10.16. Save this
	form as frmAddGroup.frm.
	<P>
</DL>



<BLOCKQUOTE>
	<H4>Table 10.16. Objects and properties for the AddGroup project.</H4>
	<P>
	<TABLE BORDER="1">
	<TR ALIGN="LEFT" VALIGN="TOP">
		<TD ALIGN="LEFT"><B><I>OBJECT</I></B></TD>
		<TD ALIGN="LEFT"><B><I>Property</I></B></TD>
		<TD ALIGN="LEFT"><B><I>Setting</I></B></TD>
	</TR>
	<TR ALIGN="LEFT" VALIGN="TOP">
		<TD ALIGN="LEFT"><TT>Form</TT></TD>
		<TD ALIGN="LEFT"><TT>Name</TT></TD>
		<TD ALIGN="LEFT"><TT>frmAddGroup</TT></TD>
	</TR>
	<TR ALIGN="LEFT" VALIGN="TOP">
		<TD ALIGN="LEFT"></TD>
		<TD ALIGN="LEFT"><TT>Caption</TT></TD>
		<TD ALIGN="LEFT"><TT>Add Group</TT></TD>
	</TR>
	<TR ALIGN="LEFT" VALIGN="TOP">
		<TD ALIGN="LEFT"><TT>List box</TT></TD>
		<TD ALIGN="LEFT"><TT>Name</TT></TD>
		<TD ALIGN="LEFT"><TT>lstGroups</TT></TD>
	</TR>
	<TR ALIGN="LEFT" VALIGN="TOP">
		<TD ALIGN="LEFT"><TT>Command button</TT></TD>
		<TD ALIGN="LEFT"><TT>Name</TT></TD>
		<TD ALIGN="LEFT"><TT>cmdAddGroup</TT></TD>
	</TR>
	<TR ALIGN="LEFT" VALIGN="TOP">
		<TD ALIGN="LEFT"></TD>
		<TD ALIGN="LEFT"><TT>Caption</TT></TD>
		<TD ALIGN="LEFT"><TT>&amp;Add Group</TT></TD>
	</TR>
	<TR ALIGN="LEFT" VALIGN="TOP">
		<TD ALIGN="LEFT"><TT>Command button</TT></TD>
		<TD ALIGN="LEFT"><TT>Name</TT></TD>
		<TD ALIGN="LEFT"><TT>cmdClose</TT></TD>
	</TR>
	<TR ALIGN="LEFT" VALIGN="TOP">
		<TD ALIGN="LEFT"></TD>
		<TD ALIGN="LEFT"><TT>Caption</TT></TD>
		<TD ALIGN="LEFT"><TT>&amp;Close</TT></TD>
	</TR>
	<TR ALIGN="LEFT" VALIGN="TOP">
		<TD ALIGN="LEFT"></TD>
		<TD ALIGN="LEFT"><TT>Cancel</TT></TD>
		<TD ALIGN="LEFT"><TT>-1 `True</TT></TD>
	</TR>
	<TR ALIGN="LEFT" VALIGN="TOP">
		<TD ALIGN="LEFT"></TD>
		<TD ALIGN="LEFT"><TT>Default</TT></TD>
		<TD ALIGN="LEFT"><TT>-1 `True</TT></TD>
	</TR>
	<TR ALIGN="LEFT" VALIGN="TOP">
		<TD ALIGN="LEFT"><TT>Label</TT></TD>
		<TD ALIGN="LEFT"><TT>Name</TT></TD>
		<TD ALIGN="LEFT"><TT>lblGroups</TT></TD>
	</TR>
	<TR ALIGN="LEFT" VALIGN="TOP">
		<TD ALIGN="LEFT"></TD>
		<TD ALIGN="LEFT"><TT>Caption</TT></TD>
		<TD ALIGN="LEFT"><TT>&amp;Groups</TT></TD>
	</TR>
	</TABLE>
</P>

</BLOCKQUOTE>


<DL>
	<DT></DT>
	<DD><B>2. </B>Enter the <TT>Form_Load</TT> event code shown next. This code accesses
	the system database with the default username and password assigned to <BR>
	the <TT>sUserName</TT> and <TT>sPassword</TT> variables, respectively. Then call
	the <TT>FillGroupList</TT> to populate the list box on the <TT>frmAddGroup</TT> form.
	<P>
</DL>



<BLOCKQUOTE>
	<PRE><TT>Private Sub Form_Load()</TT>
` if there is an error, then goto the code section labeled by 
` ERR_Form_Load
On Error GoTo ERR_Form_Load:
    Dim sUserName As String
    Dim sPassword As String
    ` assign default username and password
    sUserName = &quot;Admin&quot;
    sPassword = &quot;&quot;
    With DBEngine
        ` set system database path and name
        .SystemDB = GetWorkgroupDatabase
        ` set default user name and password
        .DefaultUser = sUserName
        .DefaultPassword = sPassword
    End With
    ` populate the group list box with the available groups
    FillGroupList
Exit Sub
ERR_Form_Load:
    ` display error for the user
    With Err
        MsgBox &quot;ERROR #&quot; &amp; .Number &amp; &quot;: &quot; &amp; .Description, _
               vbExclamation, _
               &quot;ERROR&quot;
    End With
    ` end the application
    cmdClose_Click
End Sub</PRE>

</BLOCKQUOTE>

<PRE></PRE>

<DL>
	<DT></DT>
	<DD><B>3. </B>Now enter the code for the <TT>Click</TT> event of the <TT>cmdAddGroup</TT>
	command button. This code asks the user for a new group name and calls <TT>GetNewPID</TT>
	to create a personal identifier for the new group. With this information, a new <TT>Group</TT>
	object is created and appended to the <TT>Groups</TT> collection of the current workspace.
	<P>
</DL>



<BLOCKQUOTE>
	<PRE><TT>Private Sub cmdAddGroup_Click()</TT>
` if there is an error, then goto code labeled by 
` ERR_cmdAddGroup_Click
On Error GoTo ERR_cmdAddGroup_Click:
    ` local variables used to store new group name
    Dim sNewGroupName As String
    ` local variables used for the new group
    Dim sPID As String
    Dim oNewGroup As Group
    ` constant declaration for application-defined error message
    Const ERR_NO_GROUP_NAME = 32000
    ` enter a new group name
    sNewGroupName = InputBox(&quot;Please enter a new group name.&quot;, _
                    &quot;ADD GROUP&quot;)
    ` trim excess white spaces from the group name
    sNewGroupName = Trim$(sNewGroupName)
    ` if no group name is entered, notify the user and abandon 
    ` task
    If (sNewGroupName = &quot;&quot;) Then Error ERR_NO_GROUP_NAME
    `get a PID for the new group
    sPID = GetNewPID(sNewGroupName)
    With DBEngine
        ` create a new group object from group name, PID, and 
        ` password
        Set oNewGroup = .Workspaces(0).CreateGroup( _
                        sNewGroupName, sPID)
        ` append the new groups to the workspace
        .Workspaces(0).Groups.Append oNewGroup
    End With
    ` repopulate list box with new groups
    FillGroupList
    ` notify the user of success
    MsgBox &quot;Group `&quot; &amp; sNewGroupName &amp; &quot;` added successfully.&quot;, _
            vbInformation, &quot;ADD GROUP&quot;
Exit Sub
ERR_cmdAddGroup_Click:
    ` variable used for error message
    Dim sMessage As String
    With Err
        ` create an error message for given error code
        Select Case .Number
            Case ERR_NO_GROUP_NAME:
                sMessage = &quot;You did not enter a group name.&quot;
            ` unexpected error, create an error message from the 
            ` error number and description
            Case Else:
                sMessage = &quot;ERROR #&quot; &amp; .Number &amp; &quot;: &quot; &amp; _
                           .Description
        End Select
    End With
    ` display the error message for the user
    MsgBox sMessage, vbExclamation, &quot;ERROR&quot;
    Stop
    Resume
End Sub</PRE>

</BLOCKQUOTE>

<PRE></PRE>

<DL>
	<DT></DT>
	<DD><B>4. </B>Enter the code for the <TT>cmdClose_Click</TT> event, which terminates
	the application:
	<P>
</DL>



<BLOCKQUOTE>
	<PRE><TT>Private Sub cmdClose_Click()</TT>
    ` end the application
    Unload Me
End Sub</PRE>

</BLOCKQUOTE>

<PRE></PRE>

<DL>
	<DT></DT>
	<DD><B>5. </B>Now enter the <TT>FillGroupList</TT> procedure, which populates the
	<TT>lstGroups</TT> list box with the groups found in the system database:
	<P>
</DL>



<BLOCKQUOTE>
	<PRE><TT>Private Sub FillGroupList()</TT>
    Dim oGroup As Group
</PRE>
	<P>
	<PRE><TT>    With lstGroups</TT>
        ` clear current list of groups
        .Clear
        ` populate the group list boxes with all groups
        For Each oGroup In DBEngine.Workspaces(0).Groups
            .AddItem oGroup.Name
        Next
    End With
End Sub</PRE>

</BLOCKQUOTE>

<PRE></PRE>

<DL>
	<DT></DT>
	<DD><B>6. </B>To complete the project, enter the <TT>GetNewPID</TT> function, which
	accepts the new <TT>GroupName</TT> as an argument used to create the PID that is
	returned. The PID will be between 4 and 20 characters in length.
	<P>
</DL>



<BLOCKQUOTE>
	<PRE><TT>Private Function GetNewPID(sGroupName As String) As String</TT>
    Dim sPID As String
    ` create new PID
    sPID = sGroupName
    If (Len(sPID) &gt; 20) Then
        ` if the PID is greater than 20 characters, shorten it
        sPID = Left$(sPID, 20)
    Else
        ` if the PID is less than 4 characters, add some 
        ` underscores
        While (Len(sPID) &lt; 4)
            sPID = sPID &amp; &quot;_&quot;
        Wend
    End If
    ` return newly created PID value
    GetNewPID = sPID
End Function</PRE>

</BLOCKQUOTE>

<PRE></PRE>
<P><B>How It Works</B></P>
<P>This application begins by accessing the system database and populating the list
box with the groups listed within it. When a user decides to add a new group by clicking
the Add Group button, he is asked to supply a new group name. A PID is then created
from this group name, and with both of these variables, a new <TT>Group</TT> object
is created. This object is then appended to the <TT>Groups</TT> collection of the
current workspace using the <TT>Append</TT> method. Finally, the list box is repopulated
with the inclusion of the new group.</P>
<P><B>Comments</B></P>
<P>To remove a group from a system database, simply use the <TT>Delete</TT> method
of the <TT>Workspace</TT> object's <TT>Groups</TT> collection to delete the desired
group, as shown here:</P>
<P>
<PRE><TT>DBEngine.Workspaces(0).Groups(&quot;<I>GROUPNAME</I>&quot;).Delete</TT>
</PRE>
<P>Here, <I><TT>GROUPNAME</TT></I> is a valid name of a group that belongs to the
<TT>Groups</TT> collection of the current <TT>Workspace</TT> object.</P>
<P>
<H2>10.11 How do I...</H2>
<H3><A NAME="Add users to groups and delete ..."></A><B>Add users to groups and delete
users from groups?</B></H3>
<P><B>Problem</B></P>
<P>How do I give system administrators at my user sites the ability to add and remove
users from different groups by using Visual Basic?</P>
<P><B>Technique</B></P>
<P>The <TT>Group</TT> object owns a collection called <TT>Users</TT>. Each user who
belongs to the group is represented by a <TT>User</TT> object within the <TT>Users</TT>
collection. If a <TT>User</TT> object exists in a system database, you can add that
user to a group by first using the <TT>CreateUser</TT> method of the <TT>Group</TT>
object to create a temporary <TT>User</TT> object, supplying the username of a user
who is defined within the current system database.</P>
<P>After this job is done, you append the temporary <TT>User</TT> object to the <TT>Users</TT>
collection of an existing <TT>Group</TT> object.</P>
<P>
<H4>Steps</H4>
<P>Open and run the AddUsersToGroups.vbp project. You should see the form shown in
Figure 10.12. You can select the group you want to work with from the combo box at
the top of the form. A list box on the left lists all the available users in the
system database, and the list box on the right shows the users who are currently
part of the selected group.</P>
<P><A HREF="javascript:popUp('10fig12.gif')"><B>Figure 10.12.</B></A><B> </B><I>The
AddUsersToGroups project.</I></P>
<P>To move a user into the currently selected group, select a user from the list
of available users and click the &gt; button to move that user to the list of included
users. To remove a user from a group, select the user from the list of included users
and click the &lt; button. To add all users to a group, click the &gt;&gt; button,
and to remove all users from a group, click the &lt;&lt; button. Changes are immediate,
so be careful!</P>
<P>To delete a user from a group, use the <TT>Delete</TT> method of the <TT>Group</TT>
object's <TT>Users</TT> collection.</P>

<DL>
	<DT></DT>
	<DD><B>1. </B>Create a new project and name it AddUsersToGroups.vbp. Add and edit
	the objects and properties as shown in Table 10.17, and save the form as frmAddUsersToGroups.frm.
	Notice that the four <TT>cmdMove</TT> command buttons are part of a control array.
	<P>
</DL>



<BLOCKQUOTE>
	<H4>Table 10.17. Objects and properties for the AddUsersToGroups project.</H4>
	<P>
	<TABLE BORDER="1">
	<TR ALIGN="LEFT" VALIGN="TOP">
		<TD ALIGN="LEFT"><B><I>OBJECT</I></B></TD>
		<TD ALIGN="LEFT"><B><I>PROPERTY</I></B></TD>
		<TD ALIGN="LEFT"><B><I>SETTING</I></B></TD>
	</TR>
	<TR ALIGN="LEFT" VALIGN="TOP">
		<TD ALIGN="LEFT"><TT>Form</TT></TD>
		<TD ALIGN="LEFT"><TT>Name</TT></TD>
		<TD ALIGN="LEFT"><TT>frmAddUsersToGroups</TT></TD>
	</TR>
	<TR ALIGN="LEFT" VALIGN="TOP">
		<TD ALIGN="LEFT"></TD>
		<TD ALIGN="LEFT"><TT>Caption</TT></TD>
		<TD ALIGN="LEFT"><TT>Add Users to Groups</TT></TD>
	</TR>
	<TR ALIGN="LEFT" VALIGN="TOP">
		<TD ALIGN="LEFT"><TT>Combo box</TT></TD>
		<TD ALIGN="LEFT"><TT>Name</TT></TD>
		<TD ALIGN="LEFT"><TT>cboGroups</TT></TD>
	</TR>
	<TR ALIGN="LEFT" VALIGN="TOP">
		<TD ALIGN="LEFT"></TD>
		<TD ALIGN="LEFT"><TT>Style</TT></TD>
		<TD ALIGN="LEFT"><TT>2 `Dropdown List</TT></TD>
	</TR>
	<TR ALIGN="LEFT" VALIGN="TOP">
		<TD ALIGN="LEFT"><TT>List box</TT></TD>
		<TD ALIGN="LEFT"><TT>Name</TT></TD>
		<TD ALIGN="LEFT"><TT>lstAvailableUsers</TT></TD>
	</TR>
	<TR ALIGN="LEFT" VALIGN="TOP">
		<TD ALIGN="LEFT"></TD>
		<TD ALIGN="LEFT"><TT>Sorted</TT></TD>
		<TD ALIGN="LEFT"><TT>-1 `True</TT></TD>
	</TR>
	<TR ALIGN="LEFT" VALIGN="TOP">
		<TD ALIGN="LEFT"><TT>List box</TT></TD>
		<TD ALIGN="LEFT"><TT>Name</TT></TD>
		<TD ALIGN="LEFT"><TT>lstIncludedUsers</TT></TD>
	</TR>
	<TR ALIGN="LEFT" VALIGN="TOP">
		<TD ALIGN="LEFT"></TD>
		<TD ALIGN="LEFT"><TT>Sorted</TT></TD>
		<TD ALIGN="LEFT"><TT>-1 `True</TT></TD>
	</TR>
	<TR ALIGN="LEFT" VALIGN="TOP">
		<TD ALIGN="LEFT"><TT>Command button</TT></TD>
		<TD ALIGN="LEFT"><TT>Name</TT></TD>
		<TD ALIGN="LEFT"><TT>cmdMove</TT></TD>
	</TR>
	<TR ALIGN="LEFT" VALIGN="TOP">
		<TD ALIGN="LEFT"></TD>
		<TD ALIGN="LEFT"><TT>Caption</TT></TD>
		<TD ALIGN="LEFT"><TT>&lt;&lt;</TT></TD>
	</TR>
	<TR ALIGN="LEFT" VALIGN="TOP">
		<TD ALIGN="LEFT"></TD>
		<TD ALIGN="LEFT"><TT>Index</TT></TD>
		<TD ALIGN="LEFT"><TT>0</TT></TD>
	</TR>
	<TR ALIGN="LEFT" VALIGN="TOP">
		<TD ALIGN="LEFT"><TT>Command button</TT></TD>
		<TD ALIGN="LEFT"><TT>Name</TT></TD>
		<TD ALIGN="LEFT"><TT>cmdMove</TT></TD>
	</TR>
	<TR ALIGN="LEFT" VALIGN="TOP">
		<TD ALIGN="LEFT"></TD>
		<TD ALIGN="LEFT"><TT>Caption</TT></TD>
		<TD ALIGN="LEFT"><TT>&lt;</TT></TD>
	</TR>
	<TR ALIGN="LEFT" VALIGN="TOP">
		<TD ALIGN="LEFT"></TD>
		<TD ALIGN="LEFT"><TT>Index</TT></TD>
		<TD ALIGN="LEFT"><TT>1</TT></TD>
	</TR>
	<TR ALIGN="LEFT" VALIGN="TOP">
		<TD ALIGN="LEFT"><TT>Command button</TT></TD>
		<TD ALIGN="LEFT"><TT>Name</TT></TD>
		<TD ALIGN="LEFT"><TT>cmdMove</TT></TD>
	</TR>
	<TR ALIGN="LEFT" VALIGN="TOP">
		<TD ALIGN="LEFT"></TD>
		<TD ALIGN="LEFT"><TT>Caption</TT></TD>
		<TD ALIGN="LEFT"><TT>&gt;</TT></TD>
	</TR>
	<TR ALIGN="LEFT" VALIGN="TOP">
		<TD ALIGN="LEFT"></TD>
		<TD ALIGN="LEFT"><TT>Index</TT></TD>
		<TD ALIGN="LEFT"><TT>2</TT></TD>
	</TR>
	<TR ALIGN="LEFT" VALIGN="TOP">
		<TD ALIGN="LEFT"><TT>Command button</TT></TD>
		<TD ALIGN="LEFT"><TT>Name</TT></TD>
		<TD ALIGN="LEFT"><TT>cmdMove</TT></TD>
	</TR>
	<TR ALIGN="LEFT" VALIGN="TOP">
		<TD ALIGN="LEFT"></TD>
		<TD ALIGN="LEFT"><TT>Caption</TT></TD>
		<TD ALIGN="LEFT"><TT>&gt;&gt;</TT></TD>
	</TR>
	<TR ALIGN="LEFT" VALIGN="TOP">
		<TD ALIGN="LEFT"></TD>
		<TD ALIGN="LEFT"><TT>Index</TT></TD>
		<TD ALIGN="LEFT"><TT>3</TT></TD>
	</TR>
	<TR ALIGN="LEFT" VALIGN="TOP">
		<TD ALIGN="LEFT"><TT>Command button</TT></TD>
		<TD ALIGN="LEFT"><TT>Name</TT></TD>
		<TD ALIGN="LEFT"><TT>cmdClose</TT></TD>
	</TR>
	<TR ALIGN="LEFT" VALIGN="TOP">
		<TD ALIGN="LEFT"></TD>
		<TD ALIGN="LEFT"><TT>Caption</TT></TD>
		<TD ALIGN="LEFT"><TT>&amp;Close</TT></TD>
	</TR>
	<TR ALIGN="LEFT" VALIGN="TOP">
		<TD ALIGN="LEFT"></TD>
		<TD ALIGN="LEFT"><TT>Cancel</TT></TD>
		<TD ALIGN="LEFT"><TT>-1 `True</TT></TD>
	</TR>
	<TR ALIGN="LEFT" VALIGN="TOP">
		<TD ALIGN="LEFT"></TD>
		<TD ALIGN="LEFT"><TT>Default</TT></TD>
		<TD ALIGN="LEFT"><TT>-1 `True</TT></TD>
	</TR>
	<TR ALIGN="LEFT" VALIGN="TOP">
		<TD ALIGN="LEFT"><TT>Label</TT></TD>
		<TD ALIGN="LEFT"><TT>Name</TT></TD>
		<TD ALIGN="LEFT"><TT>lblGroups</TT></TD>
	</TR>
	<TR ALIGN="LEFT" VALIGN="TOP">
		<TD ALIGN="LEFT"></TD>
		<TD ALIGN="LEFT"><TT>Caption</TT></TD>
		<TD ALIGN="LEFT"><TT>&amp;Groups</TT></TD>
	</TR>
	<TR ALIGN="LEFT" VALIGN="TOP">
		<TD ALIGN="LEFT"><TT>Label</TT></TD>
		<TD ALIGN="LEFT"><TT>Name</TT></TD>
		<TD ALIGN="LEFT"><TT>lblAvailableUsers</TT></TD>
	</TR>
	<TR ALIGN="LEFT" VALIGN="TOP">
		<TD ALIGN="LEFT"></TD>
		<TD ALIGN="LEFT"><TT>Caption</TT></TD>
		<TD ALIGN="LEFT"><TT>&amp;Available Users</TT></TD>
	</TR>
	<TR ALIGN="LEFT" VALIGN="TOP">
		<TD ALIGN="LEFT"><TT>Label</TT></TD>
		<TD ALIGN="LEFT"><TT>Name</TT></TD>
		<TD ALIGN="LEFT"><TT>lblIncludedUsers</TT></TD>
	</TR>
	<TR ALIGN="LEFT" VALIGN="TOP">
		<TD ALIGN="LEFT"></TD>
		<TD ALIGN="LEFT"><TT>Caption</TT></TD>
		<TD ALIGN="LEFT"><TT>&amp;Included Users</TT></TD>
	</TR>
	</TABLE>
</P>

</BLOCKQUOTE>


<DL>
	<DT></DT>
	<DD><B>2. </B>Enter the code for the <TT>Form_Load</TT> event as shown here. This
	code initializes the <TT>DBEngine</TT> with the default username and passwords defined
	in the <TT>sUserName</TT> and <TT>sPassword</TT> variables. The event then calls
	the <TT>FillAvailableUserList</TT> and <TT>FillGroupCombo</TT> procedures to populate
	the form with the available users and groups from the system database.
	<P>
</DL>



<BLOCKQUOTE>
	<PRE><TT>Private Sub Form_Load()</TT>
<TT>` if there is an error, then goto the code section labeled by </TT>
<TT>` ERR_Form_Load</TT>
<TT>On Error GoTo ERR_Form_Load:</TT>
<TT>    Dim sUserName As String</TT>
<TT>    Dim sPassword As String</TT>
<TT>    ` assign default username and password</TT>
<TT>    sUserName = &quot;Admin&quot;</TT>
<TT>    sPassword = &quot;&quot;</TT>
<TT>    With DBEngine</TT>
<TT>        ` set system database path and name</TT>
<TT>        .SystemDB = GetWorkgroupDatabase</TT>
<TT>        ` set default user name and password</TT>
<TT>        .DefaultUser = sUserName</TT>
<TT>        .DefaultPassword = sPassword</TT>
<TT>    End With</TT>
<TT>    ` populate the users list box with the available users</TT>
<TT>    FillAvailableUserList</TT>
<TT>    ` if there are no valid users, inform the user and exit the </TT>
<TT>    ` application</TT>
<TT>    If (lstAvailableUsers.ListCount &lt; 1) Then</TT>
<TT>        MsgBox &quot;There are no users!&quot;, vbExclamation, &quot;USERS&quot;</TT>
<TT>        cmdClose_Click</TT>
<TT>    Else</TT>
<TT>        ` populate the group combo box and select the first group </TT>
<TT>        ` automatically</TT>
<TT>        FillGroupCombo</TT>
<TT>        cboGroups.ListIndex = 0</TT>
<TT>    End If</TT>
<TT>Exit Sub</TT>
<TT>ERR_Form_Load:</TT>
<TT>    ` display error for the user</TT>
<TT>    With Err</TT>
<TT>        MsgBox &quot;ERROR #&quot; &amp; .Number &amp; &quot;: &quot; &amp; .Description, _</TT>
<TT>        vbExclamation, _</TT>
<TT>               &quot;ERROR&quot;</TT>
<TT>    End With</TT>
<TT>    ` end the application</TT>
<TT>    cmdClose_Click</TT>
<TT>End Sub</TT></PRE>

</BLOCKQUOTE>

<PRE><TT></TT></PRE>

<DL>
	<DT><TT></TT></DT>
	<DD><B>3. </B>Now enter the code that repopulates the <TT>lstIncludedUsers</TT> list
	box when the user selects a new group from the <TT>cboGroups</TT> combo box:
	<P>
</DL>



<BLOCKQUOTE>
	<PRE><TT>Private Sub cboGroups_Click()</TT>
<TT>    ` fill the included users text boxes for the selected group</TT>
<TT>    FillIncludedUsers</TT>
<TT>End Sub</TT></PRE>

</BLOCKQUOTE>

<PRE><TT></TT></PRE>

<DL>
	<DT><TT></TT></DT>
	<DD><B>4. </B>Enter the code for the <TT>Click</TT> event of the <TT>cmdMove</TT>
	command buttons now. This event handles all four of the move buttons between the
	two list boxes on <TT>frmAddUsersToGroups</TT>. Using the locally declared constants
	to indicate the different buttons, users are either removed or added to the current
	group by a call to either <TT>RemoveUserFromGroup</TT> or <TT>AddUserToGroup</TT>.
	<P>
</DL>



<BLOCKQUOTE>
	<PRE><TT>Private Sub cmdMove_Click(Index As Integer)</TT>
<TT>    Dim nCount As Integer</TT>
<TT>    ` constant declarations that correspond to the four move </TT>
<TT>    ` buttons on the frmAddUsersToGroups form</TT>
<TT>    Const MOVE_REMOVE_ALL = 0</TT>
<TT>    Const MOVE_REMOVE = 1</TT>
<TT>    Const MOVE_ADD = 2</TT>
<TT>    Const MOVE_ALL = 3</TT>
<TT>    Select Case Index</TT>
<TT>        ` remove all included users from list</TT>
<TT>        Case MOVE_REMOVE_ALL:</TT>
<TT>            With lstIncludedUsers</TT>
<TT>                For nCount = 0 To .ListCount - 1</TT>
<TT>                    RemoveUserFromGroup .List(nCount)</TT>
<TT>                Next nCount</TT>
<TT>            End With</TT>
<TT>        ` if a user is selected, remove it</TT>
<TT>        Case MOVE_REMOVE:</TT>
<TT>            With lstIncludedUsers</TT>
<TT>                If (.ListIndex &lt; 0) Then Exit Sub</TT>
<TT>                RemoveUserFromGroup .Text</TT>
<TT>            End With</TT>
<TT>        ` if a user is selected, add it</TT>
<TT>        Case MOVE_ADD:</TT>
<TT>            With lstAvailableUsers</TT>
<TT>                If (.ListIndex &lt; 0) Then Exit Sub</TT>
<TT>                AddUserToGroup .Text</TT>
<TT>            End With</TT>
<TT>        ` add all users from available users list box</TT>
<TT>        Case MOVE_ALL:</TT>
<TT>            With lstAvailableUsers</TT>
<TT>                For nCount = 0 To .ListCount - 1</TT>
<TT>                    AddUserToGroup .List(nCount)</TT>
<TT>                Next nCount</TT>
<TT>            End With</TT>
<TT>    End Select</TT>
<TT>    ` repopulated the included user list box</TT>
<TT>    FillIncludedUsers</TT>
<TT>End Sub</TT></PRE>

</BLOCKQUOTE>

<PRE><TT></TT></PRE>

<DL>
	<DT><TT></TT></DT>
	<DD><B>5. </B>Enter the code to terminate the application in the <TT>cmdClose_Click</TT>
	event:
	<P>
</DL>



<BLOCKQUOTE>
	<P>
	<PRE><TT>Private Sub cmdClose_Click()</TT>
<TT>    ` end the application</TT>
<TT>    Unload Me</TT>
<TT>End Sub</TT></PRE>

</BLOCKQUOTE>

<PRE><TT></TT></PRE>

<DL>
	<DT><TT></TT></DT>
	<DD><B>6. </B>Now enter the <TT>FillGroupCombo</TT>, <TT>FillAvailableUserList</TT>,
	and <TT>FillIncludedUsers</TT> procedures, which all use the system database to populate
	their corresponding controls with groups available, users available, or users in
	selected group:
	<P>
</DL>



<BLOCKQUOTE>
	<PRE><TT>Private Sub FillGroupCombo()</TT>
<TT>    Dim oGroup As Group</TT>
<TT>    ` populate the group combo box with all available groups</TT>
<TT>    For Each oGroup In DBEngine.Workspaces(0).Groups</TT>
<TT>        cboGroups.AddItem oGroup.Name</TT>
<TT>    Next</TT>
<TT>End Sub</TT>
<TT>Private Sub FillAvailableUserList()</TT>
<TT>    Dim oUser As User</TT>
<TT>    ` populate the user list boxes with all users except CREATOR </TT>
<TT>    ` and ENGINE</TT>
<TT>    For Each oUser In DBEngine.Workspaces(0).Users</TT>
<TT>        With oUser</TT>
<TT>            If (UCase$(.Name) &lt;&gt; &quot;CREATOR&quot;) _</TT>
<TT>            And (UCase$(.Name) &lt;&gt; &quot;ENGINE&quot;) Then</TT>
<TT>                lstAvailableUsers.AddItem .Name</TT>
<TT>            End If</TT>
<TT>        End With</TT>
<TT>    Next</TT>
<TT>End Sub</TT>
<TT>Private Sub FillIncludedUsers()</TT>
<TT>    Dim oUser As User</TT>
<TT>    With lstIncludedUsers</TT>
<TT>        ` clear the included users list box</TT>
<TT>        .Clear</TT>
<TT>        ` add all the included users for the given group</TT>
<TT>        For Each oUser In _</TT>
<TT>                    DBEngine.Workspaces(0).Groups(cboGroups.Text).Users</TT>
<TT>            .AddItem oUser.Name</TT>
<TT>        Next</TT>
<TT>    End With</TT>
<TT>End Sub</TT></PRE>

</BLOCKQUOTE>

<PRE><TT></TT></PRE>

<DL>
	<DT><TT></TT></DT>
	<DD><B>7. </B>Next enter the code to add a new user to a group. This procedure creates
	a new <TT>User</TT> object with the name of the selected user and then appends the
	object to the <TT>Users</TT> collection of the selected group.
	<P>
</DL>



<BLOCKQUOTE>
	<PRE><TT>Private Sub AddUserToGroup(sUserName As String)</TT>
<TT>` if there is an error, goto code labeled by ERR_AddUserToGroup</TT>
<TT>On Error GoTo ERR_AddUserToGroup:</TT>
<TT>    Dim oUser As User</TT>
<TT>    ` constant declaration for error when user is already in group</TT>
<TT>    Const ERR_USER_IN_GROUP = 3032</TT>
<TT>    With DBEngine.Workspaces(0).Groups(cboGroups.Text)</TT>
<TT>        ` create a user and add him to the group</TT>
<TT>        Set oUser = .CreateUser(sUserName)</TT>
<TT>        .Users.Append oUser</TT>
<TT>    End With</TT>
<TT>Exit Sub</TT>
<TT>ERR_AddUserToGroup:</TT>
<TT>    With Err</TT>
<TT>        Select Case .Number</TT>
<TT>            ` if user is in group already, continue execution</TT>
<TT>            Case ERR_USER_IN_GROUP:</TT>
<TT>                Resume Next</TT>
<TT>            ` unexpected error, notify user</TT>
<TT>            Case Else</TT>
<TT>               MsgBox &quot;ERROR #&quot; &amp; .Number &amp; &quot;: &quot; &amp; .Description, _</TT>
<TT>                        vbExclamation, &quot;ERROR&quot;</TT>
<TT>        End Select</TT>
<TT>    End With</TT>
<TT>End Sub</TT></PRE>

</BLOCKQUOTE>

<PRE><TT></TT></PRE>

<DL>
	<DT><TT></TT></DT>
	<DD><B>8. </B>Finally, enter the code to remove a user from a group. The procedure
	<TT>RemoveUserFromGroup</TT>, shown next, uses the <TT>Delete</TT> method of the
	<TT>Users</TT> collection to remove the specified user from the <TT>Group</TT> object.
	<P>
</DL>



<BLOCKQUOTE>
	<PRE><TT>Private Sub RemoveUserFromGroup(sUserName As String)</TT>
<TT>    ` remove user from group</TT>
<TT>    DBEngine.Workspaces(0).Groups( _</TT>
<TT>             cboGroups.Text).Users.Delete sUserName</TT>
<TT>End Sub</TT></PRE>

</BLOCKQUOTE>

<PRE><TT></TT></PRE>
<P><B>How It Works</B></P>
<P>When the application begins, it accesses the system database with default values
for username and password. This database is used to populate the combo box of <TT>frmAddUsersToGroups</TT>
with all the available groups and the Available Users list box with all the users
listed in the database.</P>
<P>When a user selects a group, the <TT>Users</TT> collection of that <TT>Group</TT>
object is used to populate the Included Users list box. To move users in to the specified
group, a new <TT>User</TT> object is created and appended to the <TT>Users</TT> collection.
To remove users from the group, the <TT>Remove</TT> method of the <TT>Users</TT>
collection is used with the specified user.</P>
<P>
<H2>10.12 How do I...</H2>
<H3><A NAME="Track user activity ..."></A><B>Track user activity in a database?</B></H3>
<P><B>Problem</B></P>
<P>I want to somehow keep a log to track which users created or edited records in
my Access database. How do I track user activity in a database using Visual Basic?</P>
<P><B>Technique</B></P>
<P>By creating two fields in a recordset, you can track both the user who modified
a record and the date and time a record was modified. The first field, used to track
the user, is populated with the current username taken from the <TT>UserName</TT>
property of the current <TT>Workspace</TT> object.</P>
<P>The second field, the date and time a user modified a record, is populated with
the function <TT>Now</TT>, which returns the current date and time.</P>
<P><B>Steps</B></P>
<P>Open and run the project Tracker.vbp. After entering a valid username and password,
you should see the form shown in Figure 10.13. A ListView control shows the records
of the Customers table in the ORDERS.MDB database. The Order Number, User Name, and
Last Modified information is displayed.</P>
<P>By clicking the Add Record button, you can add a dummy record to the recordset
that becomes populated in the ListView control. The username specified at the start
of the application is used to populate the <TT>User Name</TT> field of the recordset,
and the current date and time is entered into the <TT>Last Modified</TT> field.</P>
<P><A HREF="javascript:popUp('10fig13.gif')"><B>Figure 10.13.</B></A><B> </B><I>The
Tracker project.</I></P>

<DL>
	<DT><I></I></DT>
	<DD><B>1. </B>Create a new project and name it Tracker.vbp. Go to the Project | Components
	menu selection and choose Microsoft Windows Common Controls 6.0 from the list to
	include the ListView control in your project.
	<P>
	<DT></DT>
	<DD><B>2. </B>Use <TT>Form1</TT> in your project to add and edit the objects and
	properties as shown in Table 10.18. Use the <TT>(Custom)</TT> property in the property
	window of the ListView control to add the three <TT>ColumnHeaders</TT> listed in
	Table 10.18. Save the form as frmTracker.frm.
	<P>
</DL>



<BLOCKQUOTE>
	<H4>Table 10.18. Objects and properties for the Tracker project.</H4>
	<P>
	<TABLE BORDER="1">
	<TR ALIGN="LEFT" VALIGN="TOP">
		<TD ALIGN="LEFT"><B><I>OBJECT</I></B></TD>
		<TD ALIGN="LEFT"><B><I>PROPERTY</I></B></TD>
		<TD ALIGN="LEFT"><B><I>SETTING</I></B></TD>
	</TR>
	<TR ALIGN="LEFT" VALIGN="TOP">
		<TD ALIGN="LEFT"><TT>Form</TT></TD>
		<TD ALIGN="LEFT"><TT>Name</TT></TD>
		<TD ALIGN="LEFT"><TT>frmTracker</TT></TD>
	</TR>
	<TR ALIGN="LEFT" VALIGN="TOP">
		<TD ALIGN="LEFT"></TD>
		<TD ALIGN="LEFT"><TT>Caption</TT></TD>
		<TD ALIGN="LEFT"><TT>Tracker</TT></TD>
	</TR>
	<TR ALIGN="LEFT" VALIGN="TOP">
		<TD ALIGN="LEFT"><TT>ListView</TT></TD>
		<TD ALIGN="LEFT"><TT>Name</TT></TD>
		<TD ALIGN="LEFT"><TT>lstCustomers</TT></TD>
	</TR>
	<TR ALIGN="LEFT" VALIGN="TOP">
		<TD ALIGN="LEFT"></TD>
		<TD ALIGN="LEFT"><TT>View</TT></TD>
		<TD ALIGN="LEFT"><TT>3 `Report View</TT></TD>
	</TR>
	<TR ALIGN="LEFT" VALIGN="TOP">
		<TD ALIGN="LEFT"></TD>
		<TD ALIGN="LEFT"><TT>HideColumnHeaders</TT></TD>
		<TD ALIGN="LEFT"><TT>0 `False</TT></TD>
	</TR>
	<TR ALIGN="LEFT" VALIGN="TOP">
		<TD ALIGN="LEFT"><TT>ColumnHeader</TT></TD>
		<TD ALIGN="LEFT"><TT>Text</TT></TD>
		<TD ALIGN="LEFT"><TT>Order Number</TT></TD>
	</TR>
	<TR ALIGN="LEFT" VALIGN="TOP">
		<TD ALIGN="LEFT"><TT>ColumnHeader</TT></TD>
		<TD ALIGN="LEFT"><TT>Text</TT></TD>
		<TD ALIGN="LEFT"><TT>User Name</TT></TD>
	</TR>
	<TR ALIGN="LEFT" VALIGN="TOP">
		<TD ALIGN="LEFT"></TD>
		<TD ALIGN="LEFT"><TT>SubItemIndex</TT></TD>
		<TD ALIGN="LEFT"><TT>1</TT></TD>
	</TR>
	<TR ALIGN="LEFT" VALIGN="TOP">
		<TD ALIGN="LEFT"><TT>ColumnHeader</TT></TD>
		<TD ALIGN="LEFT"><TT>Text</TT></TD>
		<TD ALIGN="LEFT"><TT>Last Modified</TT></TD>
	</TR>
	<TR ALIGN="LEFT" VALIGN="TOP">
		<TD ALIGN="LEFT"></TD>
		<TD ALIGN="LEFT"><TT>SubItemIndex</TT></TD>
		<TD ALIGN="LEFT"><TT>2</TT></TD>
	</TR>
	<TR ALIGN="LEFT" VALIGN="TOP">
		<TD ALIGN="LEFT"><TT>Command button</TT></TD>
		<TD ALIGN="LEFT"><TT>Name</TT></TD>
		<TD ALIGN="LEFT"><TT>cmdAddRecord</TT></TD>
	</TR>
	<TR ALIGN="LEFT" VALIGN="TOP">
		<TD ALIGN="LEFT"></TD>
		<TD ALIGN="LEFT"><TT>Caption</TT></TD>
		<TD ALIGN="LEFT"><TT>&amp;Add Record</TT></TD>
	</TR>
	<TR ALIGN="LEFT" VALIGN="TOP">
		<TD ALIGN="LEFT"><TT>Command button</TT></TD>
		<TD ALIGN="LEFT"><TT>Name</TT></TD>
		<TD ALIGN="LEFT"><TT>cmdClose</TT></TD>
	</TR>
	<TR ALIGN="LEFT" VALIGN="TOP">
		<TD ALIGN="LEFT"></TD>
		<TD ALIGN="LEFT"><TT>Caption</TT></TD>
		<TD ALIGN="LEFT"><TT>&amp;Close</TT></TD>
	</TR>
	<TR ALIGN="LEFT" VALIGN="TOP">
		<TD ALIGN="LEFT"></TD>
		<TD ALIGN="LEFT"><TT>Cancel</TT></TD>
		<TD ALIGN="LEFT"><TT>-1 `True</TT></TD>
	</TR>
	<TR ALIGN="LEFT" VALIGN="TOP">
		<TD ALIGN="LEFT"></TD>
		<TD ALIGN="LEFT"><TT>Default</TT></TD>
		<TD ALIGN="LEFT"><TT>-1 `True</TT></TD>
	</TR>
	</TABLE>
</P>

</BLOCKQUOTE>


<DL>
	<DT></DT>
	<DD><B>3. </B>Now enter the form-level object variables in the declarations section
	of your project. These variables are used to hold both the database and the recordset
	objects used throughout the Tracker project.
	<P>
</DL>



<BLOCKQUOTE>
	<PRE><TT>Option Explicit</TT>
<TT>` form-level object variables used to store database and recordset </TT>
<TT>` objects</TT>
<TT>Private db As Database</TT>
<TT>Private rs As Recordset</TT></PRE>

</BLOCKQUOTE>

<PRE><TT></TT></PRE>

<DL>
	<DT><TT></TT></DT>
	<DD><B>4. </B>Enter the <TT>Form_Load</TT> event code as shown next. This code asks
	the user to enter both a valid username and a password from those in the system database
	to open the Orders database and call the <TT>PopulateListView</TT> procedure.
	<P>
</DL>



<BLOCKQUOTE>
	<PRE><TT>Private Sub Form_Load()</TT>
<TT>` if there is an error, goto the code labeled by ERR_Form_Load</TT>
<TT>On Error GoTo ERR_Form_Load:</TT>
<TT>    ` local constant declaration for invalid user name or password </TT>
<TT>    ` error</TT>
<TT>    Const ERR_INVALID_INFORMATION = 3029</TT>
<TT>    Dim sUserName As String</TT>
<TT>    Dim sPassword As String</TT>
<TT>    Dim sDBName As String</TT>
<TT>    ` get username</TT>
<TT>    sUserName = InputBox(&quot;Enter user name.&quot;, &quot;LOGON&quot;)</TT>
<TT>    ` get user password</TT>
<TT>    sPassword = InputBox(&quot;Enter password.&quot;, &quot;LOGON&quot;)</TT>
<TT>    With DBEngine</TT>
<TT>        ` set system database path and name</TT>
<TT>        .SystemDB = GetWorkgroupDatabase</TT>
<TT>        ` set default passwords</TT>
<TT>        .DefaultUser = sUserName</TT>
<TT>        .DefaultPassword = sPassword</TT>
<TT>        ` retrieve database path and name from ReadINI module</TT>
<TT>        sDBName = DBPath</TT>
<TT>        ` open database with given user and password</TT>
<TT>        Set db = .Workspaces(0).OpenDatabase(sDBName)</TT>
<TT>    End With</TT>
<TT>    ` populate the list view control</TT>
<TT>    PopulateListView</TT>
<TT>Exit Sub</TT>
<TT>ERR_Form_Load:</TT>
<TT>    Dim sMessage As String</TT>
<TT>    With Err</TT>
<TT>        Select Case .Number</TT>
<TT>            ` invalid user or password</TT>
<TT>            Case ERR_INVALID_INFORMATION:</TT>
<TT>                sMessage = &quot;Invalid user name or password.&quot;</TT>
<TT>            ` unexpected error, notify the user</TT>
<TT>            Case Else</TT>
<TT>                sMessage = &quot;ERROR #&quot; &amp; .Number &amp; &quot;: &quot; &amp; _</TT>
<TT>                           .Description</TT>
<TT>        End Select</TT>
<TT>    End With</TT>
<TT>    ` display the message for the user</TT>
<TT>    MsgBox sMessage, vbExclamation, &quot;ERROR&quot;</TT>
<TT>    ` end the application</TT>
<TT>    cmdClose_Click</TT>
<TT>End Sub</TT></PRE>

</BLOCKQUOTE>

<PRE><TT></TT></PRE>

<DL>
	<DT><TT></TT></DT>
	<DD><B>5. </B>Enter the code to close and release the database and recordset object
	variables in the <TT>Form_Unload</TT> event:
	<P>
</DL>



<BLOCKQUOTE>
	<PRE><TT>Private Sub Form_Unload(Cancel As Integer)</TT>
<TT>    ` close the recordset and database</TT>
<TT>    Set rs = Nothing</TT>
<TT>    Set db = Nothing</TT>
<TT>End Sub</TT></PRE>

</BLOCKQUOTE>

<PRE><TT></TT></PRE>

<DL>
	<DT><TT></TT></DT>
	<DD><B>6. </B>Now enter the <TT>cmdAddRecord_Click</TT> event code to add a new record.
	Notice the two fields, <TT>User Last Modified</TT> and <TT>DateTime</TT> <TT>Last
	Modified</TT>. These are populated with the <TT>UserName</TT> property of the current
	workspace and the <TT>Now</TT> method to successfully create an auditing trail that
	you will use to track which user created a given record.
	<P>
</DL>



<BLOCKQUOTE>
	<PRE><TT>Private Sub cmdAddRecord_Click()</TT>
<TT>` if an error occurs, call the ERR_cmdAddRecord code located at </TT>
<TT>` the end of this procedure</TT>
<TT>On Error GoTo ERR_cmdAddRecord:</TT>
<TT>    Dim sMessage As String</TT>
<TT>    Dim lPrimaryKey As Long</TT>
<TT>    ` used to populate fields in Customer table</TT>
<TT>    ` this is necessary because most of the fields belong to </TT>
<TT>    ` indexes making them required fields</TT>
<TT>    Const DUMMY_INFO = &quot;&lt;&gt;&quot;</TT>
<TT>    ` retrieve a unique key from the GetPrimaryKey routine</TT>
<TT>    lPrimaryKey = GetPrimaryKey</TT>
<TT>    With rs</TT>
<TT>        ` add a new record</TT>
<TT>        .AddNew</TT>
<TT>        ` fill in the required fields</TT>
<TT>        .Fields(&quot;Customer Number&quot;) = lPrimaryKey</TT>
<TT>        .Fields(&quot;Customer Name&quot;) = DUMMY_INFO</TT>
<TT>        .Fields(&quot;Street Address&quot;) = DUMMY_INFO</TT>
<TT>        .Fields(&quot;City&quot;) = DUMMY_INFO</TT>
<TT>        .Fields(&quot;State&quot;) = DUMMY_INFO</TT>
<TT>        .Fields(&quot;Zip Code&quot;) = DUMMY_INFO</TT>
<TT>        ` set the username, date, and time of new record to track </TT>
<TT>        ` users</TT>
<TT>        .Fields(&quot;User Last Modified&quot;) = _</TT>
<TT>                DBEngine.Workspaces(0).UserName</TT>
<TT>        .Fields(&quot;DateTime Last Modified&quot;) = Now</TT>
<TT>        ` make saves (if an error will occur, it will be here)</TT>
<TT>        .Update</TT>
<TT>    End With</TT>
<TT>    PopulateListView</TT>
<TT>    ` if we got this far, add new record was successfull</TT>
<TT>    sMessage = &quot;Record added successfully!&quot;</TT>
<TT>    MsgBox sMessage, vbInformation, &quot;ADD RECORD&quot;</TT>
<TT>Exit Sub</TT>
<TT>ERR_cmdAddRecord:</TT>
<TT>    ` display error for user</TT>
<TT>    With Err</TT>
<TT>        MsgBox &quot;ERROR #&quot; &amp; .Number &amp; &quot;: &quot; &amp; .Description, _</TT>
<TT>        vbExclamation, _</TT>
<TT>               &quot;ERROR&quot;</TT>
<TT>    End With</TT>
<TT>End Sub</TT></PRE>

</BLOCKQUOTE>

<PRE><TT></TT></PRE>

<DL>
	<DT><TT></TT></DT>
	<DD><B>7. </B>Enter the code to terminate the application on pressing the <TT>cmdClose</TT>
	command button:
	<P>
</DL>



<BLOCKQUOTE>
	<PRE><TT>Private Sub cmdClose_Click()</TT>
<TT>    ` end the application</TT>
<TT>    Unload Me</TT>
<TT>End Sub</TT></PRE>

</BLOCKQUOTE>

<PRE><TT></TT></PRE>

<DL>
	<DT><TT></TT></DT>
	<DD><B>8. </B>Now enter the <TT>GetPrimaryKey</TT> function, which uses the <TT>Customer</TT>
	<TT>Number</TT> field of the last record in the ORDERS.MDB database to create a new
	unique key:
	<P>
</DL>



<BLOCKQUOTE>
	<PRE><TT>Private Function GetPrimaryKey()</TT>
<TT>    ` return a unique primary key based on the Customer Number </TT>
<TT>    ` field</TT>
<TT>    With rs</TT>
<TT>        ` if there are records in the table already, find the last </TT>
<TT>        ` one and add one to the Customer Number as a unique </TT>
<TT>        ` Primary Key; otherwise there are no records in the </TT>
<TT>        ` table, so return 1 for the first new record to be added</TT>
<TT>        If (Not (.EOF And .BOF)) Then</TT>
<TT>            .MoveLast</TT>
<TT>            GetPrimaryKey = .Fields(&quot;Customer Number&quot;) + 1</TT>
<TT>        Else</TT>
<TT>            GetPrimaryKey = 1</TT>
<TT>        End If</TT>
<TT>    End With</TT>
<TT>End Function</TT></PRE>

</BLOCKQUOTE>

<PRE><TT></TT></PRE>

<DL>
	<DT><TT></TT></DT>
	<DD><B>9. </B>Finally, enter the code for the <TT>PopulateListView</TT> procedure,
	which repopulates the ListView control with the entire Customer table, showing which
	user added which Order Number, along with the date and time the record was added:
	<P>
</DL>



<BLOCKQUOTE>
	<PRE><TT>Private Sub PopulateListView()</TT>
<TT>    Dim oItem As ListItem</TT>
<TT>    ` show headers of list view and clear the contents of the </TT>
<TT>    ` ListItems collection</TT>
<TT>    With lstCustomers</TT>
<TT>        .HideColumnHeaders = False</TT>
<TT>        .ListItems.Clear</TT>
<TT>    End With</TT>
<TT>    ` repopulate the recordset</TT>
<TT>    Set rs = db.OpenRecordset(&quot;Customers&quot;, dbOpenTable)</TT>
<TT>    With rs</TT>
<TT>        ` order the records by the primary key</TT>
<TT>        .Index = &quot;PrimaryKey&quot;</TT>
<TT>        ` add all records to the list view</TT>
<TT>        While (Not rs.EOF)</TT>
<TT>            Set oItem = lstCustomers.ListItems.Add(, , _</TT>
<TT>                            .Fields(&quot;Customer Number&quot;))</TT>
<TT>            oItem.SubItems(1) = &quot;&quot; &amp; .Fields(&quot;User Last Modified&quot;)</TT>
<TT>            oItem.SubItems(2) = &quot;&quot; &amp; .Fields( _</TT>
<TT>                                &quot;DateTime Last Modified&quot;)</TT>
<TT>            .MoveNext</TT>
<TT>        Wend</TT>
<TT>    End With</TT>
<TT>End Sub</TT></PRE>

</BLOCKQUOTE>

<PRE><TT></TT></PRE>
<P><B>How It Works</B></P>
<P>When the application begins, it asks the user to enter a username and password,
which are checked against the system database when the <TT>OpenDatabase</TT> method
is used to access ORDERS.MDB. If the user correctly entered a valid username and
corresponding password, the ListView control of the Tracker project is populated
with the contents of the Customer table showing the <TT>Order Number</TT>, <TT>User
Last Modified</TT>, and <TT>DateTime Last Modified</TT> fields to form an auditing
trail of the modification to the recordset.</P>
<P>When the user chooses to add a record by clicking the Add Record button, a new
record is created using a newly created primary key. In addition, the current date
and time as well as the current username (taken from the <TT>UserName</TT> property
of the current <TT>Workspace</TT> object) are used.</P>
<P><B>Comments</B></P>
<P>When you set the <TT>DefaultUser</TT> and <TT>DefaultPassword</TT> properties
of the <TT>DBEngine</TT> object, you are logging in to the system database with that
user. You should note that after you set these properties, you cannot change them
during the life of your application. You must terminate the program and restart it
to log on as a new user.</P>
<P>
<H2>10.13 How do I...</H2>
<H3><A NAME="Create and use an encrypted data..."></A><B>Create and use an encrypted
database?</B></H3>
<P><B>Problem</B></P>
<P>I want to prohibit other users from viewing my Access database files from various
word processors and spy applications. How can I encrypt my database using Visual
Basic?</P>
<P><B>Technique</B></P>
<P>To encrypt an Access database, you must either specify encryption upon creation
of the database or compact the database into a newly encrypted file. To decrypt an
Access database, you must decrypt it to a newly created file using <TT>CompactDatabase</TT>.</P>
<P><B>Steps</B></P>
<P>Open and run the Encryptor.vbp project. You should see the form shown in Figure
10.14. To create a newly encrypted database, click the Create a New Encrypted Database
button. You then are asked to specify a database path and name through a common dialog
form.</P>
<P><A HREF="javascript:popUp('10fig14.gif')"><B>Figure 10.14.</B></A><B> </B><I>The
Encryptor project.</I></P>
<P>To encrypt an existing database, click the Encrypt an Existing Database button,
and specify the database to encrypt and a database path and name of the file to encrypt
to. Conversely, to decrypt a database, click the Decrypt an Existing Database button,
and enter the database to decrypt along with the database to decrypt to. Do not enter
a current database name to encrypt or decrypt to; rather, enter a name of a database
that does not exist.</P>

<DL>
	<DT></DT>
	<DD><B>1. </B>Create a new project and call it Encryptor.vbp. Go to the Project |
	Components menu selection and choose Microsoft Common Dialog Control 6.0 from the
	list to include the File Open Common Dialog control in your project.
	<P>
	<DT></DT>
	<DD><B>2. </B>Add the objects and edit the properties as shown in Table 10.19. Save
	the form as frmEncryptor.frm.
	<P>
</DL>



<BLOCKQUOTE>
	<H4>Table 10.19. Objects and properties for the Encryptor project.</H4>
	<P>
	<TABLE BORDER="1">
	<TR ALIGN="LEFT" VALIGN="TOP">
		<TD ALIGN="LEFT"><B><I>OBJECT</I></B></TD>
		<TD ALIGN="LEFT"><B><I>Property</I></B></TD>
		<TD ALIGN="LEFT"><B><I>Setting</I></B></TD>
	</TR>
	<TR ALIGN="LEFT" VALIGN="TOP">
		<TD ALIGN="LEFT"><TT>Form</TT></TD>
		<TD ALIGN="LEFT"><TT>Name</TT></TD>
		<TD ALIGN="LEFT"><TT>frmEncryptor</TT></TD>
	</TR>
	<TR ALIGN="LEFT" VALIGN="TOP">
		<TD ALIGN="LEFT"></TD>
		<TD ALIGN="LEFT"><TT>Caption</TT></TD>
		<TD ALIGN="LEFT"><TT>Encryptor</TT></TD>
	</TR>
	<TR ALIGN="LEFT" VALIGN="TOP">
		<TD ALIGN="LEFT"><TT>Common Dialog</TT></TD>
		<TD ALIGN="LEFT"><TT>Name</TT></TD>
		<TD ALIGN="LEFT"><TT>cdlFile</TT></TD>
	</TR>
	<TR ALIGN="LEFT" VALIGN="TOP">
		<TD ALIGN="LEFT"></TD>
		<TD ALIGN="LEFT"><TT>Filter</TT></TD>
		<TD ALIGN="LEFT"><TT>MS Access Databases (*.mdb)</TT></TD>
	</TR>
	<TR ALIGN="LEFT" VALIGN="TOP">
		<TD ALIGN="LEFT"><TT>Command button</TT></TD>
		<TD ALIGN="LEFT"><TT>Name</TT></TD>
		<TD ALIGN="LEFT"><TT>cmdCreateDatabase</TT></TD>
	</TR>
	<TR ALIGN="LEFT" VALIGN="TOP">
		<TD ALIGN="LEFT"></TD>
		<TD ALIGN="LEFT"><TT>Caption</TT></TD>
		<TD ALIGN="LEFT"><TT>Create a &amp;New Encrypted Database</TT></TD>
	</TR>
	<TR ALIGN="LEFT" VALIGN="TOP">
		<TD ALIGN="LEFT"><TT>Command button</TT></TD>
		<TD ALIGN="LEFT"><TT>Name</TT></TD>
		<TD ALIGN="LEFT"><TT>cmdEncryptDatabase</TT></TD>
	</TR>
	<TR ALIGN="LEFT" VALIGN="TOP">
		<TD ALIGN="LEFT"></TD>
		<TD ALIGN="LEFT"><TT>Caption</TT></TD>
		<TD ALIGN="LEFT"><TT>&amp;Encrypt an Existing Database</TT></TD>
	</TR>
	<TR ALIGN="LEFT" VALIGN="TOP">
		<TD ALIGN="LEFT"><TT>Command button</TT></TD>
		<TD ALIGN="LEFT"><TT>Name</TT></TD>
		<TD ALIGN="LEFT"><TT>cmdDecryptDatabase</TT></TD>
	</TR>
	<TR ALIGN="LEFT" VALIGN="TOP">
		<TD ALIGN="LEFT"></TD>
		<TD ALIGN="LEFT"><TT>Caption</TT></TD>
		<TD ALIGN="LEFT"><TT>&amp;Decrypt an Existing Database</TT></TD>
	</TR>
	<TR ALIGN="LEFT" VALIGN="TOP">
		<TD ALIGN="LEFT"><TT>Command button</TT></TD>
		<TD ALIGN="LEFT"><TT>Name</TT></TD>
		<TD ALIGN="LEFT"><TT>cmdClose</TT></TD>
	</TR>
	<TR ALIGN="LEFT" VALIGN="TOP">
		<TD ALIGN="LEFT"></TD>
		<TD ALIGN="LEFT"><TT>Caption</TT></TD>
		<TD ALIGN="LEFT"><TT>&amp;Close</TT></TD>
	</TR>
	<TR ALIGN="LEFT" VALIGN="TOP">
		<TD ALIGN="LEFT"></TD>
		<TD ALIGN="LEFT"><TT>Cancel</TT></TD>
		<TD ALIGN="LEFT"><TT>-1 `True</TT></TD>
	</TR>
	<TR ALIGN="LEFT" VALIGN="TOP">
		<TD ALIGN="LEFT"></TD>
		<TD ALIGN="LEFT"><TT>Default</TT></TD>
		<TD ALIGN="LEFT"><TT>-1 `True</TT></TD>
	</TR>
	</TABLE>
</P>

</BLOCKQUOTE>


<DL>
	<DT></DT>
	<DD><B>3. </B>Now enter the following constant declarations in the declarations section
	of your project. These are used to indicate application-defined errors later in the
	project.
	<P>
</DL>



<BLOCKQUOTE>
	<PRE><TT>Option Explicit</TT>
<TT>` form-level constant declarations of application-defined errors</TT>
<TT>Private Const NO_ERROR = 0</TT>
<TT>Private Const ERR_DATABASE_EXISTS = 3204</TT></PRE>

</BLOCKQUOTE>

<PRE><TT></TT></PRE>

<DL>
	<DT><TT></TT></DT>
	<DD><B>4. </B>Enter the code for the <TT>Form_Load</TT> event as shown here. Not
	only does this code log on to the system database as the other How-To projects did,
	but it also initializes the Common Dialog control used in this project.
	<P>
</DL>



<BLOCKQUOTE>
	<PRE><TT>Private Sub Form_Load()</TT>
<TT>` if there is an error, goto the code labeled by ERR_Form_Load</TT>
<TT>On Error GoTo ERR_Form_Load:</TT>
<TT>    Dim sUserName As String</TT>
<TT>    Dim sPassword As String</TT>
<TT>    sUserName = &quot;admin&quot;</TT>
<TT>    sPassword = &quot;&quot;</TT>
<TT>    With DBEngine</TT>
<TT>        ` set system database path and name</TT>
<TT>        .SystemDB = GetWorkgroupDatabase</TT>
<TT>        ` set default passwords</TT>
<TT>        .DefaultUser = sUserName</TT>
<TT>        .DefaultPassword = sPassword</TT>
<TT>    End With</TT>
<TT>    With cdlFile</TT>
<TT>        ` set various properties of the common dialog control</TT>
<TT>        .Flags = cdlOFNExplorer</TT>
<TT>        .DefaultExt = &quot;mdb&quot;</TT>
<TT>    End With</TT>
<TT>Exit Sub</TT>
<TT>ERR_Form_Load:</TT>
<TT>    ` display the error message for the user</TT>
<TT>    With Err</TT>
<TT>        MsgBox &quot;ERROR #&quot; &amp; .Number &amp; &quot;: &quot; &amp; .Description, _</TT>
<TT>        vbExclamation, _</TT>
<TT>               &quot;ERROR&quot;</TT>
<TT>    End With</TT>
<TT>    ` end the application</TT>
<TT>    cmdClose_Click</TT>
<TT>End Sub</TT></PRE>

</BLOCKQUOTE>

<PRE><TT></TT></PRE>

<DL>
	<DT><TT></TT></DT>
	<DD><B>5. </B>Now enter the code for the <TT>Click</TT> event of the <TT>cmdCreateDatabase</TT>
	command button. This code uses the Common Dialog control to ask the user the name
	of the database to create. When given this name, the event creates an empty encrypted
	database.
	<P>
</DL>



<BLOCKQUOTE>
	<PRE><TT>Private Sub cmdCreateDatabase_Click()</TT>
<TT>` if there is an error, goto the code labeled by ERR_cmdCreateDatabase_Click</TT>
<TT>On Error GoTo ERR_cmdCreateDatabase_Click:</TT>
<TT>    Dim db As Database</TT>
<TT>    Dim sNewDatabase As String</TT>
<TT>    With cdlFile</TT>
<TT>        ` get the name of the database to encrypt or decrypt to</TT>
<TT>        .filename = &quot;&quot;</TT>
<TT>        .DialogTitle = &quot;DATABASE TO CREATE&quot;</TT>
<TT>        .Action = 1</TT>
<TT>        sNewDatabase = .filename</TT>
<TT>        ` if the name was not given, abandon task</TT>
<TT>        If (sNewDatabase = &quot;&quot;) Then Exit Sub</TT>
<TT>    End With</TT>
<TT>    ` create the encrypted database</TT>
<TT>    Set db = DBEngine(0).CreateDatabase(sNewDatabase, _</TT>
<TT>                 dbLangGeneral, dbEncrypt)</TT>
<TT>    ` close the database</TT>
<TT>    Set db = Nothing</TT>
<TT>ERR_cmdCreateDatabase_Click:</TT>
<TT>    Dim sMessage As String</TT>
<TT>    With Err</TT>
<TT>        ` determine error</TT>
<TT>        Select Case .Number</TT>
<TT>            ` there is no error, inform the user of success</TT>
<TT>            Case NO_ERROR:</TT>
<TT>                sMessage = &quot;Database created successfully. &quot;</TT>
<TT>            ` the database already exists</TT>
<TT>            Case ERR_DATABASE_EXISTS:</TT>
<TT>                sMessage = &quot;You must choose a database that does &quot; _</TT>
<TT>                         &amp; &quot;not already exist.&quot;</TT>
<TT>            ` unexpected error, inform the user</TT>
<TT>            Case Else:</TT>
<TT>                sMessage = &quot;ERROR #&quot; &amp; .Number &amp; &quot;: &quot; &amp; _</TT>
<TT>                .Description</TT>
<TT>        End Select</TT>
<TT>        ` display the error for the user</TT>
<TT>        MsgBox sMessage, _</TT>
<TT>               IIf(.Number = NO_ERROR, vbInformation, _</TT>
<TT>               vbExclamation), _</TT>
<TT>               IIf(.Number = NO_ERROR, &quot;SUCCESS&quot;, &quot;ERROR&quot;)</TT>
<TT>    End With</TT>
<TT>End Sub</TT></PRE>

</BLOCKQUOTE>

<PRE><TT></TT></PRE>

<DL>
	<DT><TT></TT></DT>
	<DD><B>6. </B>Enter the code for the <TT>cmdEncryptDatabase_Click</TT> and the <TT>cmdDecryptDatabase_Click</TT>
	events as shown next. These procedures both call the <TT>Encryptor</TT> routine to
	either encrypt or decrypt a database, depending on the argument passed to the routine.
	<P>
</DL>



<BLOCKQUOTE>
	<PRE><TT>Private Sub cmdEncryptDatabase_Click()</TT>
<TT>    ` call procedure to encrypt database</TT>
<TT>    Encryptor dbEncrypt</TT>
<TT>End Sub</TT>
<TT>Private Sub cmdDecryptDatabase_Click()</TT>
<TT>    ` call procedure to decrypt database</TT>
<TT>    Encryptor dbDecrypt</TT>
<TT>End Sub</TT></PRE>

</BLOCKQUOTE>

<PRE><TT></TT></PRE>

<DL>
	<DT><TT></TT></DT>
	<DD><B>7. </B>Enter the <TT>cmdClose_Click</TT> event code to terminate the application:
	<P>
</DL>



<BLOCKQUOTE>
	<PRE><TT>Private Sub cmdClose_Click()</TT>
<TT>    ` terminate the application</TT>
<TT>    Unload Me</TT>
<TT>End Sub</TT></PRE>

</BLOCKQUOTE>

<PRE><TT></TT></PRE>

<DL>
	<DT><TT></TT></DT>
	<DD><B>8. </B>Finally, enter the following <TT>Encryptor</TT> procedure, which takes
	an <TT>Integer</TT> argument that will be passed to the <TT>CompactDatabase</TT>
	method. This argument will be either <TT>dbEncrypt</TT> or <TT>dbDecrypt</TT>, depending
	on which button the user presses.
	<P>
</DL>



<BLOCKQUOTE>
	<PRE><TT>Private Sub Encryptor(nAction As Integer)</TT>
<TT>` if there is an error, goto the code labeled by ERR_Encryptor</TT>
<TT>On Error GoTo ERR_Encryptor:</TT>
<TT>    Dim sCurDatabase As String</TT>
<TT>    Dim sNewDatabase As String</TT>
<TT>    Dim sActionString As String</TT>
<TT>    ` create string depending upon action decided by user</TT>
<TT>    If (nAction = dbEncrypt) Then</TT>
<TT>        sActionString = &quot;ENCRYPT&quot;</TT>
<TT>    Else</TT>
<TT>        sActionString = &quot;DECRYPT&quot;</TT>
<TT>    End If</TT>
<TT>    With cdlFile</TT>
<TT>        ` get the name of the database to encrypt or decrypt</TT>
<TT>        .filename = &quot;&quot;</TT>
<TT>        .DialogTitle = &quot;DATABASE TO &quot; &amp; sActionString</TT>
<TT>        .Action = 1</TT>
<TT>        sCurDatabase = .filename</TT>
<TT>        ` if the name was not given, abandon task</TT>
<TT>        If (sCurDatabase = &quot;&quot;) Then Exit Sub</TT>
<TT>        ` get the name of the database to encrypt or decrypt to</TT>
<TT>        .filename = &quot;&quot;</TT>
<TT>        .DialogTitle = &quot;DATABASE TO &quot; &amp; sActionString &amp; &quot; TO&quot;</TT>
<TT>        .Action = 1</TT>
<TT>        sNewDatabase = .filename</TT>
<TT>        ` if the name was not given, abandon task</TT>
<TT>        If (sNewDatabase = &quot;&quot;) Then Exit Sub</TT>
<TT>    End With</TT>
<TT>    ` encrypt the database</TT>
<TT>    DBEngine.CompactDatabase sCurDatabase, sNewDatabase, , nAction</TT>
<TT>ERR_Encryptor:</TT>
<TT>    Dim sMessage As String</TT>
<TT>    With Err</TT>
<TT>        ` determine error</TT>
<TT>        Select Case .Number</TT>
<TT>            ` there is no error, inform the user of success</TT>
<TT>            Case NO_ERROR:</TT>
<TT>                sMessage = &quot;Database successfully &quot; _</TT>
<TT>                         &amp; LCase$(sActionString) &amp; &quot;ed to file `&quot; _</TT>
<TT>                         &amp; sNewDatabase &amp; &quot;`.&quot;</TT>
<TT>            ` the database already exists</TT>
<TT>            Case ERR_DATABASE_EXISTS:</TT>
<TT>                sMessage = &quot;You must choose a database that does &quot; _</TT>
<TT>                         &amp; &quot;not already exist.&quot;</TT>
<TT>            ` unexpected error, inform the user</TT>
<TT>            Case Else:</TT>
<TT>                sMessage = &quot;ERROR #&quot; &amp; .Number &amp; &quot;: &quot; &amp; _</TT>
<TT>                           .Description</TT>
<TT>        End Select</TT>
<TT>        ` display the error for the user</TT>
<TT>        MsgBox sMessage, _</TT>
<TT>               IIf(.Number = NO_ERROR, vbInformation, _</TT>
<TT>                             vbExclamation), _</TT>
<TT>               IIf(.Number = NO_ERROR, &quot;SUCCESS&quot;, &quot;ERROR&quot;)</TT>
<TT>    End With</TT>
<TT>End Sub</TT></PRE>

</BLOCKQUOTE>

<PRE><TT></TT></PRE>
<P><B>How It Works</B></P>
<P>At the start of this application, the user is logged on to the system database
using the default values for both the username and the password. When the user decides
to create a new database, the <TT>dbEncrypt</TT> option is included in the <TT>CreateDatabase</TT>
method to indicate that encryption is to be used on the database.</P>
<P>If the user decides to either encrypt or decrypt an existing database, he must
actually create a new database from the existing one by using the <TT>CompactDatabase</TT>
method with an option of <TT>dbEncrypt</TT> or <TT>dbDecrypt</TT>. The database to
be created from the <TT>CompactDatabase</TT> method cannot already exist.</P>
<P><B>Comments</B></P>
<P>In this How-To, you started off accessing the system database in the <TT>Form_Load</TT>
event given the default Admin username and password, although the project did not
necessarily need to access the system database.</P>
<P>Encryption is not really going to help you much unless you also add a password,
which you did not do in this application. Encryption stops others from viewing an
Access database with anything but Access itself and Visual Basic. Because both these
tools are readily available, do not count on encryption as your only source of security.
The framework is here for system database security, and this is why you included
its access in the <TT>Form_Load</TT> event.</P>
<CENTER>
<P>
<HR>
<A HREF="ch09.htm" tppabs="http://pbs.mcp.com/ebooks/1571691529/ch09/ch09.htm"><IMG SRC="previous.gif" tppabs="http://pbs.mcp.com/ebooks/1571691529/button/previous.gif" WIDTH="128" HEIGHT="28"
ALIGN="BOTTOM" ALT="Previous chapter" BORDER="0"></A><A HREF="ch11.htm" tppabs="http://pbs.mcp.com/ebooks/1571691529/ch11/ch11.htm"><IMG
SRC="next.gif" tppabs="http://pbs.mcp.com/ebooks/1571691529/button/next.gif" WIDTH="128" HEIGHT="28" ALIGN="BOTTOM" ALT="Next chapter"
BORDER="0"></A><A HREF="index-21.htm" tppabs="http://pbs.mcp.com/ebooks/1571691529/index.htm"><IMG SRC="contents.gif" tppabs="http://pbs.mcp.com/ebooks/1571691529/button/contents.gif" WIDTH="128"
HEIGHT="28" ALIGN="BOTTOM" ALT="Contents" BORDER="0"></A> </P>

<P>&copy; <A HREF="copy.htm" tppabs="http://pbs.mcp.com/ebooks/1571691529/copy.htm">Copyright</A>, Macmillan Computer Publishing. All
rights reserved.
</CENTER>

</BODY>

</HTML>
