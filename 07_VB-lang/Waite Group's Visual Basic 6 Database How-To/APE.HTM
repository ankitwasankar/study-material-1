<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2//EN">
<HTML>

<HEAD>
	<META HTTP-EQUIV="Content-Type" CONTENT="text/html;CHARSET=iso-8859-1">
<SCRIPT LANGUAGE="JavaScript">

<!--

function popUp(pPage) {
 var fullURL = document.location;
 var textURL = fullURL.toString();
 var URLlen = textURL.length;
 var lenMinusPage = textURL.lastIndexOf("/");
 lenMinusPage += 1;
 var fullPath = textURL.substring(0,lenMinusPage);
 popUpWin = window.open('','popWin','resizable=yes,scrollbars=no,width=525,height=394');
 figDoc= popUpWin.document;
 zhtm= '<HTML><HEAD><TITLE>' + pPage + '</TITLE>';
 zhtm += '</head>';
 zhtm += '<BODY bgcolor="#FFFFFF">';
 zhtm += '<IMG SRC="' + fullPath + pPage + '">';
 zhtm += '<P><B>' + pPage + '</B>';
 zhtm += '</BODY></HTML>';
 window.popUpWin.document.write(zhtm);
 window.popUpWin.document.close();
 // Johnny Jackson 4/28/98
 }

//-->
                                                                
</SCRIPT>
<link rel="stylesheet" href="ebooks.css" tppabs="http://pbs.mcp.com/includes/stylesheets/ebooks.css">

	<META NAME="GENERATOR" Content="Symantec Visual Page Mac 1.1.1">
	<TITLE>Visual Basic 6 Database How-To -- Appendix E -- A Short Introduction to Visual Basic Objects</TITLE>
</HEAD>

<BODY TEXT="#000000" BGCOLOR="#FFFFFF">

<H1 ALIGN="CENTER"><IMG SRC="sams.gif" tppabs="http://pbs.mcp.com/ebooks/1571691529/button/sams.gif" WIDTH="171" HEIGHT="66" ALIGN="BOTTOM"
BORDER="0"></H1>

<H1 ALIGN="CENTER">Visual Basic 6 Database How-To</H1>
<CENTER>
<P><A HREF="apd.htm" tppabs="http://pbs.mcp.com/ebooks/1571691529/apd/apd.htm"><IMG SRC="previous.gif" tppabs="http://pbs.mcp.com/ebooks/1571691529/button/previous.gif" WIDTH="128" HEIGHT="28"
ALIGN="BOTTOM" ALT="Previous chapter" BORDER="0"></A><A HREF="index-21.htm" tppabs="http://pbs.mcp.com/ebooks/1571691529/index.htm"><IMG
SRC="contents.gif" tppabs="http://pbs.mcp.com/ebooks/1571691529/button/contents.gif" WIDTH="128" HEIGHT="28" ALIGN="BOTTOM" ALT="Contents"
BORDER="0"></A> 
<HR>

</CENTER>
<H1></H1>
<H1 ALIGN="CENTER">- E -<BR>
A Short Introduction to Visual Basic Objects</H1>

<UL>
	<LI><A HREF="#Heading1">Object Overview</A>
	<LI><A HREF="#Heading2">Your Own Object</A>
	<LI><A HREF="#Heading3">Collections of Objects</A>
	<UL>
		<LI><A HREF="#Heading4">Adding an Item to a Collection Object</A>
		<LI><A HREF="#Heading5">Removing an Item from a Collection Object</A>
		<LI><A HREF="#Heading6">Accessing Items in a Collection Object</A>
	</UL>
</UL>

<P>
<HR SIZE="4">
<BR>
The introduction of Visual Basic 5 made object-oriented programming much easier.
This appendix defines and discusses objects as well as illustrates how to use them.</P>
<P>
<H2><A NAME="Heading1"></A>Object Overview</H2>
<P>The biggest selling point of object-oriented programming is <I>encapsulation</I>.
Encapsulation means that both the data and the means of transforming or altering
that data is wrapped up into one easy-to-use shell called an <I>object</I>. In its
simplest form, an object is a group of data describing a particular item that cannot
be described by a single number or string.</P>
<P>For instance, imagine that you want to make yourself the object in which to store
your application. With a single variable, you can give yourself a name. Most likely
you need much more information than this to describe yourself. You might want to
indicate your age and possibly your address. It is possible to incorporate all this
information into one structure that represents you. Take, for example, the following
type declaration:</P>


<BLOCKQUOTE>
	<PRE><TT>Private Type Person</TT>
<TT>    Name As String</TT>
<TT>    Age As Integer</TT>
<TT>    Address As String</TT>
<TT>    City As String</TT>
<TT>    State As String</TT>
<TT>    ZipCode As String</TT>
</PRE>
	<PRE><TT>End Type</TT></PRE>

</BLOCKQUOTE>

<PRE><TT></TT></PRE>
<P>This declaration creates a new data type called Person that can hold a person's
name, age, address, city, state, and zip code. To create a new person, you would
use something similar to the following declaration:</P>


<BLOCKQUOTE>
	<PRE><TT>Private Steven As Person</TT></PRE>

</BLOCKQUOTE>

<PRE><TT></TT></PRE>
<P>This data structure was acceptable to Visual Basic programmers until version 6,
when developers suddenly demanded more (and we have the right!).</P>
<P>Now, in Visual Basic 6, you can include much more in a data structure than just
the data. Using encapsulation, you can add methods and events. The data, as we know
it, becomes properties. Properties are user-interface variables or variable objects.
With these interfaces, you can cleanly access the data for what is now called a class.</P>
<P>The concept of classes was not developed for Visual Basic; it was developed a
long time ago for much older languages. (If I quote a language that invented classes
or object-oriented programming, I know I will receive hate mail telling me of an
earlier programming language, so I'll be vague in my history.) What's important is
that you have the ability to use classes now in Visual Basic.</P>
<P>A class is similar to a type declaration in that it is a framework or a shell
used to hold and manipulate data; however, no data or manipulation occurs in the
class itself. To work with this structure, you must create an instance of the class
by declaring a variable--an object variable:</P>


<BLOCKQUOTE>
	<PRE><TT>Private m_oNewPerson As New Person</TT></PRE>

</BLOCKQUOTE>

<PRE><TT></TT></PRE>
<P>Here, <TT>Person</TT> is no longer the name of a data structure but rather the
name of a class that would hold properties called <TT>Name</TT>, <TT>Age</TT>, <TT>Address</TT>,
and so on. You would also have methods within this class to manipulate this information.
For instance, you might have a method that is part of the <TT>Person</TT> class that
would load a person's information from a file. In this case, you might have a <TT>Load</TT>
method, as in this example:</P>


<BLOCKQUOTE>
	<PRE><TT>m_oNewPerson.Load &quot;Steven&quot;</TT></PRE>

</BLOCKQUOTE>

<PRE><TT></TT></PRE>
<P>This example accepts a string as an argument to determine the name of the person
to load.</P>
<P>There have always been objects in Visual Basic, even if you haven't realized it.
Take, for instance, the TextBox control. This is an object--an instance of the text
box class. You can use object-oriented programming to access the properties of a
TextBox control as shown in this procedure:</P>


<BLOCKQUOTE>
	<PRE><TT>Private Sub DoSomethingSenseless()</TT>
<TT>    Text1.Enabled = True</TT>
<TT>    Text1.Text = &quot;Hello Mommy!&quot;</TT>
<TT>    Text1.SelStart = 0</TT>
<TT>    Text1.SelLength = Len(Text1.Text)</TT>
</PRE>
	<PRE><TT>End Sub</TT></PRE>

</BLOCKQUOTE>

<PRE><TT></TT></PRE>
<P>This example simply sets various properties of the TextBox control to what you
have specified. You also read one of the properties from the TextBox control (<TT>Text1.Text</TT>),
as shown in the last line.</P>
<P>You can call methods of this control in a fashion similar to this:</P>


<BLOCKQUOTE>
	<PRE><TT>Text1.SetFocus</TT></PRE>

</BLOCKQUOTE>

<PRE><TT></TT></PRE>
<P>In this example, you simply called the <TT>SetFocus</TT> method that puts the
focus of the window to the TextBox control.</P>
<P>The <TT>DoSomethingSenseless</TT> routine shown previously takes advantage of
a great interface to the TextBox control. However, there is an even more object-oriented
approach you can choose to take, as shown in this newly revised <TT>DoSomethingSenseless</TT>
routine:</P>


<BLOCKQUOTE>
	<PRE><TT>Private Sub DoSomethingSenseless()</TT>
<TT>    With Text1</TT>
<TT>        .Enabled = True</TT>
<TT>        .Text = &quot;Hello Mommy!&quot;</TT>
<TT>        .SelStart = 0</TT>
<TT>        .SelLength = Len(.Text)</TT>
<TT>        .SetFocus</TT>
<TT>    End With</TT>
</PRE>
	<PRE><TT>End Sub</TT></PRE>

</BLOCKQUOTE>

<PRE><TT></TT></PRE>
<P>This routine uses a statement called <TT>With</TT>. <TT>With</TT> uses the <TT>Text1</TT>
control to access its public members.</P>
<P>Many objects have default properties. The TextBox control's default property is
the <TT>Text</TT> property. The following example shows how you can access the default
property:</P>


<BLOCKQUOTE>
	<PRE><TT>Private Sub DoMoreThings()</TT>
<TT>    ` declare a new object and call it oNewObject</TT>
<TT>    Dim oNewObject As Object</TT>
<TT>    ` all objects can be set to the `root' type of Object</TT>
<TT>    Set oNewObject = Text1</TT>
<TT>    ` the following are equivalent</TT>
<TT>    oNewObject.Text = &quot;Hello Dad!&quot;</TT>
<TT>    oNewObject = &quot;Hello Dad!&quot;</TT>
<TT>    Text1.Text = &quot;Hello Dad!&quot;</TT>
<TT>    Text1 = &quot;Hello Dad!&quot;</TT>
</PRE>
	<PRE><TT>End Sub</TT></PRE>

</BLOCKQUOTE>

<PRE><TT></TT></PRE>
<P>Notice the declaration of a new object variable in the beginning of this routine.
All objects can be assigned to the Object data type. This means that all objects
implement the object class. After you have the new object, you can set it to the
<TT>Text1</TT> control (actually, just give it a reference to the control). This
step allows you to access your <TT>Text1</TT> control using the <TT>oNewObject</TT>
object variable. Also notice that the <TT>Text</TT> property does not have to be
entered to assign the property its value because it is the object's default value.</P>
<P>
<H2><A NAME="Heading2"></A>Your Own Object</H2>
<P>You can create your own object definition, or class, using Visual Basic 6. To
do so, first create a new project. Along with <TT>Form1</TT>, which should already
be part of your new project, add a class module. Name the class <TT>Person</TT>,
and add the following code to the declarations section of the class module:</P>


<BLOCKQUOTE>
	<PRE><TT>Option Explicit</TT>
<TT>Private m_sFirstName As String</TT>
</PRE>
	<PRE><TT>Private m_sLastName As String</TT></PRE>

</BLOCKQUOTE>

<PRE><TT></TT></PRE>
<P>These two member variables of the <TT>Person</TT> class are private variables--they
cannot be accessed by anybody outside of your class.</P>
<P>Now add your public properties, which serve as your user interface to retrieve
information from the user:</P>


<BLOCKQUOTE>
	<PRE><TT>Public Property Let FirstName(ByVal sNewValue As String)</TT>
<TT>    m_sFirstName = sNewValue</TT>
<TT>End Property</TT>
<TT>Public Property Let LastName(ByVal sNewValue As String)</TT>
<TT>    m_sLastName = sNewValue</TT>
</PRE>
	<PRE><TT>End Property</TT></PRE>

</BLOCKQUOTE>

<PRE><TT></TT></PRE>
<P>Please note that there are no <TT>Property Get</TT> routines for the <TT>FirstName</TT>
and <TT>LastName</TT> properties. This means that the properties are write-only and
cannot be read.</P>
<P>Now create a property that allows the user to retrieve the entire name of the
<TT>Person</TT> class as shown here:</P>


<BLOCKQUOTE>
	<PRE><TT>Public Property Get FullName() As String</TT>
<TT>    FullName = m_sFirstName &amp; &quot; &quot; &amp; m_sLastName</TT>
</PRE>
	<PRE><TT>End Property</TT></PRE>

</BLOCKQUOTE>

<PRE><TT></TT></PRE>
<P>This is a <TT>Property Get</TT> routine, and there is no <TT>Property Let</TT>
routine, so this property is read-only.</P>
<P>You can now use your new class in a routine to create a new <TT>Person</TT> object:</P>


<BLOCKQUOTE>
	<PRE><TT>Private Sub CreatePerson()</TT>
<TT>    Dim oNewPerson As New Person</TT>
<TT>    With oNewPerson</TT>
<TT>        ` retrieve information from the user</TT>
<TT>        .FirstName = InputBox$(&quot;Enter first name:&quot;)</TT>
<TT>        .LastName = InputBox$(&quot;Enter last name:&quot;)</TT>
<TT>        ` display the full name for the user</TT>
</PRE>
	<PRE><TT>MSGBOX &quot;PERSON'S FULL NAME: &quot; &amp; .FULLNAME</TT></PRE>
	<PRE><TT></TT></PRE>
	<PRE><TT>    End With</TT>
</PRE>
	<PRE><TT>End Sub</TT></PRE>

</BLOCKQUOTE>

<PRE><TT></TT></PRE>
<P>This routine declares a new instance of the <TT>Person</TT> class that you wrote
earlier. The user is then asked for the first and last name of the new person, and
both strings are stored in the corresponding property. Finally, the <TT>FullName</TT>
property is called to show the user the full name of the new person.</P>
<P>
<H2><A NAME="Heading3"></A>Collections of Objects</H2>
<P>Collections are used to group related data objects into a single set. In DAO,
collections are everywhere--from the <TT>Workspaces</TT> collection to the <TT>Fields</TT>
and <TT>Indexes</TT> collections.</P>
<P>A collection is a good place to keep a list of objects. For instance, take the
<TT>Person</TT> class shown previously. Suppose you want to add many people to a
group or list. In this case, it would be good to use the <TT>Collection</TT> class
to keep track of the people. Take the following event, for example:</P>


<BLOCKQUOTE>
	<PRE><TT>Public Persons As New Collection</TT>
<TT>Private Sub cmdAddPerson_Click()</TT>
<TT>    ` initiate a new person object</TT>
<TT>    Dim oNewPerson As New Person</TT>
<TT>    With oNewPerson</TT>
<TT>        ` get new name from the user</TT>
<TT>        .FirstName = InputBox$(&quot;Enter first name:&quot;)</TT>
<TT>        .LastName = InputBox$(&quot;Enter last name:&quot;)</TT>
<TT>        ` add the person to the persons collection</TT>
<TT>        Persons.Add .FullName</TT>
<TT>    End With</TT>
</PRE>
	<PRE><TT>End Sub</TT></PRE>

</BLOCKQUOTE>

<PRE><TT></TT></PRE>
<P>This event fires when a person presses a command button. First, a new <TT>Person</TT>
object is initiated from the <TT>Person</TT> class. Next, the person's first and
last names are filled. Finally, the person is added to the collection using the <TT>Add</TT>
method of the <TT>Persons</TT> collection.</P>
<P>The <TT>Collection</TT> class stores all items as Variant data types. Therefore,
you can add any data type to a collection object, with the exception of user-defined
types. This also means that you can add different types to the same collection because
the <TT>Collection</TT> class cannot tell the difference anyway.</P>
<P>Table E.1 shows the property and three methods of the <TT>Collection</TT> class.</P>
<P>
<H4>Table E.1. The Collection class.</H4>
<P>
<TABLE BORDER="1">
	<TR ALIGN="LEFT" VALIGN="TOP">
		<TD ALIGN="LEFT"><B><I>METHOD OR PROPERTY</I></B></TD>
		<TD ALIGN="LEFT"><B><I>Description</I></B></TD>
	</TR>
	<TR ALIGN="LEFT" VALIGN="TOP">
		<TD ALIGN="LEFT"><TT>Count</TT> property</TD>
		<TD ALIGN="LEFT">Returns the number of items belonging to the current collection object</TD>
	</TR>
	<TR ALIGN="LEFT" VALIGN="TOP">
		<TD ALIGN="LEFT"><TT>Add</TT> method</TD>
		<TD ALIGN="LEFT">Adds a new item to the current collection object</TD>
	</TR>
	<TR ALIGN="LEFT" VALIGN="TOP">
		<TD ALIGN="LEFT"><TT>Item</TT> method</TD>
		<TD ALIGN="LEFT">Returns an item, by an index or a key, from the current collection object</TD>
	</TR>
	<TR ALIGN="LEFT" VALIGN="TOP">
		<TD ALIGN="LEFT"><TT>Remove</TT> method</TD>
		<TD ALIGN="LEFT">Removes an item from the current collection, by an index or a key</TD>
	</TR>
</TABLE>
</P>
<P>As you can see, the <TT>Collection</TT> class is pretty straightforward. Although
arrays are more efficient memory managers than collection objects, they cannot compete
with other advantages. For one, you never need to use <TT>ReDim</TT> with a collection
object--it takes care of its size for you. Also, the <TT>Collection</TT> class can
access its items very quickly using the <TT>Item</TT> method, whereas an array does
not have this built-in functionality.</P>
<P>An item of a collection is retrieved, removed, or added to a collection object,
using a key and an index. A <I>key</I> is a string used during the <TT>Add</TT> method
call, whereas an index is usually determined after each object is added to a collection.
An <I>index</I> is a long value that can be determined by using the <TT>before</TT>
and <TT>after</TT> parameters; however, the index can change after another object
is added to the collection.</P>
<P>You can use the index to iterate through a collection to access each item, as
shown in this example:</P>


<BLOCKQUOTE>
	<PRE><TT>Dim nCount As Integer</TT>
<TT>With Persons</TT>
<TT>    For nCount = 1 To .Count</TT>
<TT>        Debug.Print .Item(nCount).FullName</TT>
<TT>    Next nCount</TT>
</PRE>
	<PRE><TT>End With</TT></PRE>

</BLOCKQUOTE>

<PRE><TT></TT></PRE>
<P>This code uses the <TT>Count</TT> property of the <TT>Persons</TT> collection
to determine an upper bound for the <TT>For...Next</TT> loop. For each item in the
collection object <TT>Persons</TT>, the <TT>FullName</TT> property is printed to
the Immediate Window.</P>
<P>An easier and more efficient way to iterate through a collection is to use the
<TT>For Each...Next</TT> statement instead of the <TT>For...Next</TT>, as shown in
this code:</P>


<BLOCKQUOTE>
	<PRE><TT>Dim oPerson As Person</TT>
<TT>For Each oPerson In Persons</TT>
<TT>    Debug.Print oPerson.FullName</TT>
</PRE>
	<PRE><TT>Next nCount</TT></PRE>

</BLOCKQUOTE>

<PRE><TT></TT></PRE>
<P>This code declares a new object variable called <TT>oPerson</TT> as a <TT>Person</TT>
object. Using this variable, the <TT>For Each</TT> <TT>oPerson</TT> <TT>In Persons</TT>
line of code sets <TT>oPerson</TT> to each <TT>Persons.Item(index)</TT> object in
the collection. Now you can use the <TT>oPerson</TT> object to access the collection
object.</P>
<P>
<H3><A NAME="Heading4"></A>Adding an Item to a Collection Object</H3>
<P>To add items to a collection, you would use the <TT>Add</TT> method with the following
syntax:</P>


<BLOCKQUOTE>
	<PRE><TT>Sub Add (<I>item</I> As Variant [, <I>key</I> As Variant] [, <I>before</I> As Variant]</TT></PRE>

</BLOCKQUOTE>

<PRE><TT></TT></PRE>
<PRE><TT>                                            [, <I>after</I> As Variant])</TT>
</PRE>
<P>The first parameter to the routine is the actual object you are to add to the
collection, and the second is a key that would be used to quickly search for the
given object. The following statements demonstrate the use of keys in a collection:</P>


<BLOCKQUOTE>
	<PRE><TT>Persons.Add oNewPerson, oNewPerson.FullName</TT>
</PRE>
	<PRE><TT>Persons.Add oNewPerson, &quot;Jason&quot;</TT></PRE>

</BLOCKQUOTE>

<PRE><TT></TT></PRE>
<P>The other two parameters for the <TT>Add</TT> method are the <TT>before</TT> and
<TT>after</TT> parameters. By using one of these two parameters, you can specify
the ordinal position of your item in the collection object as shown in these examples:</P>


<BLOCKQUOTE>
	<P>
	<PRE><TT>Persons.Add oNewPerson, &quot;Jason&quot;, 1             ` adds as first item</TT>
<TT>Persons.Add oNewPerson, &quot;John&quot;, before:=3      ` adds as second item</TT>
</PRE>
	<PRE><TT>Persons.Add oNewPerson, &quot;Kimberly&quot;, after:=6   ` adds as seventh item</TT></PRE>

</BLOCKQUOTE>

<PRE><TT></TT></PRE>
<P>As you can see, the <TT>Add</TT> method supports named arguments.</P>
<P>
<H3><A NAME="Heading5"></A>Removing an Item from a Collection Object</H3>
<P>To delete an item from a collection, you must know the index or the key of the
item intended for deletion. The syntax for the <TT>Remove</TT> method is as follows:</P>


<BLOCKQUOTE>
	<PRE><TT>Sub Remove (<I>index</I> As Variant)</TT></PRE>

</BLOCKQUOTE>

<PRE><TT></TT></PRE>
<P>The <I><TT>index</TT></I> argument in the <TT>Remove</TT> method can be either
the item's key or the item's index number.</P>
<P>Following are a couple examples of the <TT>Remove</TT> method:</P>


<BLOCKQUOTE>
	<PRE><TT>Persons.Remove 5</TT>
</PRE>
	<PRE><TT>Persons.Remove &quot;Jason&quot;</TT></PRE>

</BLOCKQUOTE>

<PRE><TT></TT></PRE>
<H3><A NAME="Heading6"></A>Accessing Items in a Collection Object</H3>
<P>To access items in a collection, you can use the <TT>Item</TT> method. The syntax
for the <TT>Item</TT> method is as follows:</P>


<BLOCKQUOTE>
	<PRE><TT>Function Item (<I>index</I> As Variant) As Variant</TT></PRE>

</BLOCKQUOTE>

<PRE><TT></TT></PRE>
<P>You must use the <TT>Set</TT> statement when the <TT>Item</TT> being returned
is an object variable. The <I><TT>index</TT></I> argument is either the key or the
index of the item in the collection object, as shown in these examples:</P>


<BLOCKQUOTE>
	<P><TT>SET ONEWPERSON = PERSONS.ITEM(6)</TT></P>
	<P>
	<PRE><TT>Set oNewPerson = Persons.Item(&quot;Jason&quot;)</TT>
<TT>Set oNewPerson = Persons(6)</TT>
</PRE>
	<PRE><TT>Set oNewPerson = Persons(&quot;Jason&quot;)</TT></PRE>

</BLOCKQUOTE>

<PRE><TT></TT></PRE>
<P>Notice the last two statements. The <TT>Item</TT> method is omitted because it
is the default method for the <TT>Collection</TT> class.</P>
<CENTER>
<P>
<HR>
<A HREF="apd.htm" tppabs="http://pbs.mcp.com/ebooks/1571691529/apd/apd.htm"><IMG SRC="previous.gif" tppabs="http://pbs.mcp.com/ebooks/1571691529/button/previous.gif" WIDTH="128" HEIGHT="28"
ALIGN="BOTTOM" ALT="Previous chapter" BORDER="0"></A><A HREF="index-21.htm" tppabs="http://pbs.mcp.com/ebooks/1571691529/index.htm"><IMG
SRC="contents.gif" tppabs="http://pbs.mcp.com/ebooks/1571691529/button/contents.gif" WIDTH="128" HEIGHT="28" ALIGN="BOTTOM" ALT="Contents"
BORDER="0"></A></P>

<P>&copy; <A HREF="copy.htm" tppabs="http://pbs.mcp.com/ebooks/1571691529/copy.htm">Copyright</A>, Macmillan Computer Publishing. All
rights reserved.
</CENTER>

</BODY>

</HTML>
