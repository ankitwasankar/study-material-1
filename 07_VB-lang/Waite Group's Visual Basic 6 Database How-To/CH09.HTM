<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2//EN">
<HTML>

<HEAD>
	<META HTTP-EQUIV="Content-Type" CONTENT="text/html;CHARSET=iso-8859-1">
<SCRIPT LANGUAGE="JavaScript">

<!--

function popUp(pPage) {
 var fullURL = document.location;
 var textURL = fullURL.toString();
 var URLlen = textURL.length;
 var lenMinusPage = textURL.lastIndexOf("/");
 lenMinusPage += 1;
 var fullPath = textURL.substring(0,lenMinusPage);
 popUpWin = window.open('','popWin','resizable=yes,scrollbars=no,width=525,height=394');
 figDoc= popUpWin.document;
 zhtm= '<HTML><HEAD><TITLE>' + pPage + '</TITLE>';
 zhtm += '</head>';
 zhtm += '<BODY bgcolor="#FFFFFF">';
 zhtm += '<IMG SRC="' + fullPath + pPage + '">';
 zhtm += '<P><B>' + pPage + '</B>';
 zhtm += '</BODY></HTML>';
 window.popUpWin.document.write(zhtm);
 window.popUpWin.document.close();
 // Johnny Jackson 4/28/98
 }

//-->
                                                                
</SCRIPT>
<link rel="stylesheet" href="ebooks.css" tppabs="http://pbs.mcp.com/includes/stylesheets/ebooks.css">

	<META NAME="GENERATOR" Content="Symantec Visual Page Mac 1.1.1">
	<TITLE>Visual Basic 6 Database How-To -- Ch 9 --Microsoft Data Report</TITLE>
</HEAD>

<BODY TEXT="#000000" BGCOLOR="#FFFFFF">

<H1 ALIGN="CENTER"><IMG SRC="sams.gif" tppabs="http://pbs.mcp.com/ebooks/1571691529/button/sams.gif" WIDTH="171" HEIGHT="66" ALIGN="BOTTOM"
BORDER="0"></H1>

<H1 ALIGN="CENTER">Visual Basic 6 Database How-To</H1>
<CENTER>
<P><A HREF="ch08.htm" tppabs="http://pbs.mcp.com/ebooks/1571691529/ch08/ch08.htm"><IMG SRC="previous.gif" tppabs="http://pbs.mcp.com/ebooks/1571691529/button/previous.gif" WIDTH="128" HEIGHT="28"
ALIGN="BOTTOM" ALT="Previous chapter" BORDER="0"></A><A HREF="ch10.htm" tppabs="http://pbs.mcp.com/ebooks/1571691529/ch10/ch10.htm"><IMG
SRC="next.gif" tppabs="http://pbs.mcp.com/ebooks/1571691529/button/next.gif" WIDTH="128" HEIGHT="28" ALIGN="BOTTOM" ALT="Next chapter"
BORDER="0"></A><A HREF="index-21.htm" tppabs="http://pbs.mcp.com/ebooks/1571691529/index.htm"><IMG SRC="contents.gif" tppabs="http://pbs.mcp.com/ebooks/1571691529/button/contents.gif" WIDTH="128"
HEIGHT="28" ALIGN="BOTTOM" ALT="Contents" BORDER="0"></A> 
<HR>

</CENTER>
<H1></H1>
<H1 ALIGN="CENTER">- 9 -<BR>
Microsoft Data Report</H1>
<H2></H2>

<UL>
	<LI>How do I...
	<UL>
		<LI><A HREF="#Create a report using Microsoft ...">9.1 Create a report using Microsoft
		Data Report Designer?</A>
		<LI><A HREF="#Add Calculated Fields ...">9.2 Add Calculated Fields to a Microsoft
		Data Report?</A>
		<LI><A HREF="#Select whether the Microsoft ...">9.3 Select if the Microsoft Data
		Report will be displayed, printed, or exported using Visual Basic code?</A>
		<LI><A HREF="#Have Visual Basic generate ...">9.4 Display a report based on criteria
		I choose using a Microsoft Data Report?</A>
		<LI><A HREF="#Determine which records ...">9.5 Determine which records will be printed
		using Crystal Reports?</A>
		<LI><A HREF="#Create subtotals ...">9.6 Create subtotals and other calculated fields
		using Crystal Reports?</A>
		<LI><A HREF="#Control the order ...">9.7 Control the order in which records will
		be printed using Crystal Reports?</A>
		<LI><A HREF="#Print labels using Crystal Reports?">9.8 Print labels using Crystal
		Reports?</A>
		<LI><A HREF="#Create and print form ...">9.9 Create and print form letters with Crystal
		Reports?</A>
		<LI><A HREF="#Print field data without extra ...">9.10 Print field data without extra
		spaces between the fields with Crystal Reports?</A>
		<LI><A HREF="#Prevent blank lines from being ...">9.11 Prevent blank lines from being
		printed when a field contains no data using Crystal Reports?</A>
		<LI><A HREF="#Create cross-tab reports ...">9.12 Create cross-tab reports with Crystal
		Reports?</A>
		<LI><A HREF="#Generate reports using ...">9.13 Generate reports using user-entered
		variables with Crystal Reports?</A>
	</UL>
</UL>

<P>
<HR SIZE="4">

<H3></H3>
<P>With Visual Basic 6 there are two methods for developing reports. Reports can
be created within the Visual Basic development environment by using Microsoft Data
Reports, or by using the version of Crystal Reports included with Visual Basic by
accessing Crystal Reports' .RPT file via the Crystal's ActiveX control. (Of course,
you also can use another version of Crystal Reports or another third-party reporting
program; however, Data Reports and Crystal Reports 4.6.1 both come with Visual Basic
6.)</P>
<P><B>Microsoft Data Reports</B></P>
<P>With the new Microsoft Data Reports, a developer can add a report directly to
a Visual Basic project. The report can be designed, saved, and compiled with a project
just as a form or class would be. This feature integrates well with the Visual Basic
IDE, and you can create reports natively and intuitively as you would create any
other form.</P>
<P>There are two major differences between creating reports with Microsoft Data Reports
and creating other forms within the project:</P>

<UL>
	<LI>The Data Report dimension is based on the printed page, whereas a form is based
	on twips.
	<P>
	<LI>The Data Report does not use the intrinsic controls or ActiveX controls that
	regular Visual Basic forms use; they have their own report intrinsic controls.
</UL>

<P>With Microsoft Data Reports, a report can be displayed to the screen in the form
of a Print Preview window. From this window the user can print the report to a printer
or export the report to a file (including HTML). The report can be printed to a printer
or exported to a file without any user intervention by using Visual Basic code.</P>
<P><B>Crystal Reports</B></P>
<P>Crystal Reports is still included with Visual Basic 6. It includes the Crystal
Reports Designer, ActiveX control, and necessary runtimes. Visual Basic 6 is backward-compatible
with projects created with Crystal Reports with earlier versions of Visual Basic.</P>
<P>Any Crystal Reports report must be created using the report designer. Although
certain report elements can be changed at runtime through the Crystal Reports OLE
custom control, the control does not have the ability to create a report from scratch.</P>
<P><B>Running and Configuring Crystal Reports Designer</B></P>
<P>The Crystal Reports Designer works as a separate process from Visual Basic and
keeps the report definition in a report definition file with a .rpt file extension.
You should try to save your report definition files in your Visual Basic project
directory to make project management and program distribution easier.</P>
<P>If you installed Visual Basic with the defaults, you'll find a Crystal Reports
icon in the Microsoft Visual Basic 6.0 program group. You can also start Crystal
Reports by selecting Add-Ins|Report Designer from the Visual Basic main menu.</P>
<P>All the How-To's in this chapter assume that your Crystal Reports Designer program
is set up the way ours is. Select File|Options from the Crystal Reports main menu.
On the Layout tab, check the Show Field Names option. On the New Report tab (see
Figure 9.1), check the Use Report Gallery for new reports option. You can also enter
a report directory as the default location for report definition files.</P>
<P><A HREF="javascript:popUp('09fig01.gif')"><B>Figure 9.1.</B></A><B> </B><I>The
Crystal Reports Designer File Options dialog box.</I></P>
<P><B>Printing Reports</B></P>
<P>You have two printing approaches with Crystal Reports:</P>

<UL>
	<LI><I>Using the Crystal Reports report designer.</I> This program must be used to
	design all reports, and it can print them as well. This means you don't need to run
	a Visual Basic application to print reports on data maintained by your application.
	The program, however, can't be distributed to users of your application.
	<P>
	<LI><I>Using Crystal Reports OLE custom control (OCX).</I> This OCX is included in
	the package and can be dropped into a Visual Basic form to control report printing.
	The control gives your application access to most of the more useful features of
	the Crystal Reports program. With this control, you can have the report displayed
	in a Print Preview window, printed directly to a printer, or exported to a file.
</UL>

<P><B>Which Report Engine Should I Use?</B></P>
<P>With both Microsoft Data Reports and Crystal Reports included with Visual Basic
6, you have alternatives not previously available with Visual Basic. The tool you
use will depend on your particular situation and personal preferences. You need to
consider the reporting engines' different approaches to designing reports and how
Visual Basic interfaces with the respective reporting engines.</P>
<P><B>When to Use Microsoft Data Reports</B></P>
<P>Data Reports integrates very well into the Visual Basic environment. The reports
are generated directly in the Visual Basic IDE. There are no separate report files,
and the report definitions are stored in an ActiveX designer form with the Visual
Basic project. This means when a project is compiled, the report definition is compiled
within the executable file (EXE). The report retrieves the data to be used from a
Data Connection within a Data Environment. This enables the report to retrieve data
from this powerful new feature in Visual Basic 6.</P>
<P>Microsoft Data Reports integrates well with Visual Basic by using the new powerful
Data Environment and enabling the programmer to create reports with similar methods
in which forms are created. Data Reports is great for basic reports; however, it
does not have the options or advanced report features of the mature Crystal Reports
and is not backward compatible with Crystal Report .RPT files.</P>
<P><B>When to Use Crystal Reports</B></P>
<P>Crystal Reports takes a totally different approach to creating reports to use
with Visual Basic. A separate application creates the report definitions, and these
reports are stored in a separate .RPT file that must be distributed with the EXE
file. Also, additional DLLs and an OCX control must be included for the Visual Basic
application to use a Crystal Reports report. The distribution requirements are therefore
much heavier than those for Microsoft Data Reports. Furthermore, a Crystal Reports
report uses ODBC to connect to a data source, not to the new powerful Data Environment.</P>
<P>Crystal Reports is much more mature that Microsoft Data Reports. Many applications
have already been written using Crystal Reports as their reporting engine. Also,
Crystal Reports has a wider feature set than Data Reports. It can generate cross-tab
reports and sub reports, and it has much more powerful formula and many number crunching
features. Crystal Reports also has an upgrade path that provides new features and
more power.</P>
<P>Crystal is a mature and proven product. It might be heavier than Data Reports,
but it offers a richer feature set and has upgrade options for scalability.</P>


<BLOCKQUOTE>
	<P>
<HR>
<B><STRONG>CRYSTAL REPORTS UPGRADE OPTIONS</STRONG></B><BR>
	<B><BR>
	Crystal Reports Professional 6</B><BR>
	This version of Crystal Reports includes an updated feature set to Crystal 4.6.1,
	which is included with Visual Basic. An updated report designer and an ISAPI module
	is included, which allows reports to be placed on a IIS Web server. Java, ActiveX,
	and pure HTML viewers can be used to display a report on the Web server. This version
	of Crystal Reports enables you to export a report in various formats including HTML,
	MS-Excel, MS-Word, and Lotus 1-2-3.<BR>
	<B><BR>
	Crystal Info</B><BR>
	Crystal Info is a server-based solution that enables multiple users to view, schedule,
	and manipulate shared reports. It can be used as a central storage for reports, for
	multiple users to view. It can be used to schedule when complex and time consuming
	reports will be run so data can be viewed without having to run the report each time.
	What SQL Server is to Microsoft Access, Crystal Info is to Crystal Reports.<BR>
	<B><BR>
	Crystal Report Designer</B><BR>
	This is an ActiveX designer that works in the same vein as Microsoft Data Reports.
	It gives you 100% functionality of Crystal Reports 6 with the Visual Basic IDE. Take
	the way Microsoft Data Reports integrates into Visual Basic and add the power of
	Crystal Reports 6. WOW! Prior to the release of Visual Basic 6, the only version
	of this tool available was for Visual Basic 5, but keep an eye on the Seagate Software
	Web site (<TT>www.seagatesoftware.<BR>
	com</TT>) for a Visual Basic 6 version. 
<HR>


</BLOCKQUOTE>

<P><B>Sample Databases in the How-To's</B></P>
<P>The How-To's in this chapter use the Microsoft Access .MDB file BIBLIO.MDB that
was shipped with Visual Basic. If you selected the default program locations when
you installed Visual Basic, the Visual Basic files are located in the \Program Files\Visual
Basic directory. If these files are not located in the default directories, you'll
need to tell Crystal where to find them.</P>
<P>Table 9.1 lists the tables in the BIBLIO.MDB database. You might want to add one
index (duplicates are OK) on the <TT>Au_ID</TT> field in the Title Author table to
speed reporting. Use either Microsoft Access or the VisData sample application that
is included with Visual Basic to add the index.</P>
<P>
<H4>Table 9.1. Tables from BIBLIO.MDB.</H4>
<P>
<TABLE BORDER="1">
	<TR ALIGN="LEFT" VALIGN="TOP">
		<TD ALIGN="LEFT"><B><I>TABLE NAME</I></B></TD>
		<TD ALIGN="LEFT"><B><I>Description</I></B></TD>
	</TR>
	<TR ALIGN="LEFT" VALIGN="TOP">
		<TD ALIGN="LEFT">Authors</TD>
		<TD ALIGN="LEFT">Book author names</TD>
	</TR>
	<TR ALIGN="LEFT" VALIGN="TOP">
		<TD ALIGN="LEFT">Publishers</TD>
		<TD ALIGN="LEFT">Names, phones, and other information about each publisher</TD>
	</TR>
	<TR ALIGN="LEFT" VALIGN="TOP">
		<TD ALIGN="LEFT">Title Author</TD>
		<TD ALIGN="LEFT">Records linking the Author and Titles tables</TD>
	</TR>
	<TR ALIGN="LEFT" VALIGN="TOP">
		<TD ALIGN="LEFT">Titles</TD>
		<TD ALIGN="LEFT">Books published by each company</TD>
	</TR>
</TABLE>
</P>
<P>You can find the next set of tables, shown in Table 9.2, in the file CRYSTAL.MDB,
which is included on the CD-ROM. These files make up a basic order-entry system.</P>
<P>
<H4>Table 9.2. Tables from CRYSTAL.MDB.</H4>
<P>
<TABLE BORDER="1">
	<TR ALIGN="LEFT" VALIGN="TOP">
		<TD ALIGN="LEFT"><B><I>TABLE NAME</I></B></TD>
		<TD ALIGN="LEFT"><B><I>Description</I></B></TD>
	</TR>
	<TR ALIGN="LEFT" VALIGN="TOP">
		<TD ALIGN="LEFT">Company</TD>
		<TD ALIGN="LEFT">Company name and information</TD>
	</TR>
	<TR ALIGN="LEFT" VALIGN="TOP">
		<TD ALIGN="LEFT">Header</TD>
		<TD ALIGN="LEFT">Order invoice header</TD>
	</TR>
	<TR ALIGN="LEFT" VALIGN="TOP">
		<TD ALIGN="LEFT">Detail</TD>
		<TD ALIGN="LEFT">Order detail records</TD>
	</TR>
</TABLE>
</P>
<P>The last database is Mailing List, in the file MAIL.MDB. Create this new table
using the fields shown in Table 9.3. It is easiest if you place the file in the same
directory as the .RPT file that uses it.</P>
<P>
<H4>Table 9.3. Mailing List table in MAIL.MDB.</H4>
<P>
<TABLE BORDER="1">
	<TR ALIGN="LEFT" VALIGN="TOP">
		<TD ALIGN="LEFT"><B><I>FIELD NAME</I></B></TD>
		<TD ALIGN="LEFT"><B><I>Data Type</I></B></TD>
		<TD ALIGN="LEFT"><B><I>Size</I></B></TD>
	</TR>
	<TR ALIGN="LEFT" VALIGN="TOP">
		<TD ALIGN="LEFT"><TT>Contact</TT></TD>
		<TD ALIGN="LEFT">Text</TD>
		<TD ALIGN="LEFT">30</TD>
	</TR>
	<TR ALIGN="LEFT" VALIGN="TOP">
		<TD ALIGN="LEFT"><TT>Addr1</TT></TD>
		<TD ALIGN="LEFT">Text</TD>
		<TD ALIGN="LEFT">40</TD>
	</TR>
	<TR ALIGN="LEFT" VALIGN="TOP">
		<TD ALIGN="LEFT"><TT>City</TT></TD>
		<TD ALIGN="LEFT">Text</TD>
		<TD ALIGN="LEFT">30</TD>
	</TR>
	<TR ALIGN="LEFT" VALIGN="TOP">
		<TD ALIGN="LEFT"><TT>State</TT></TD>
		<TD ALIGN="LEFT">Text</TD>
		<TD ALIGN="LEFT">20</TD>
	</TR>
	<TR ALIGN="LEFT" VALIGN="TOP">
		<TD ALIGN="LEFT"><TT>Zip</TT></TD>
		<TD ALIGN="LEFT">Text</TD>
		<TD ALIGN="LEFT">10</TD>
	</TR>
	<TR ALIGN="LEFT" VALIGN="TOP">
		<TD ALIGN="LEFT"><TT>Week</TT> <TT>Day</TT></TD>
		<TD ALIGN="LEFT">Text</TD>
		<TD ALIGN="LEFT">10</TD>
	</TR>
</TABLE>
</P>
<P>Enter some sample data in the Mailing List table. Table 9.4 lists a few sample
lines of the table in MAIL.MDB on the CD-ROM enclosed with this book. Enter various
<TT>Contact</TT> names and <TT>Week</TT> <TT>Days</TT>. Include a number of records
from each <TT>City</TT>, <TT>State</TT>, and <TT>Zip</TT>. There are more than 600
records in the MAIL.MDB on the CD-ROM.</P>
<P>
<H4>Table 9.4. Sample data in Mailing List table in MAIL.MDB.</H4>
<P>
<TABLE BORDER="1">
	<TR ALIGN="LEFT" VALIGN="TOP">
		<TD ALIGN="LEFT"><B><I>CONTACT</I></B></TD>
		<TD ALIGN="LEFT"><B><I>Addr1</I></B></TD>
		<TD ALIGN="LEFT"><B><I>City</I></B></TD>
		<TD ALIGN="LEFT"><B><I>State</I></B></TD>
		<TD ALIGN="LEFT"><B><I>Zip</I></B></TD>
		<TD ALIGN="LEFT"><B><I>Week Day</I></B></TD>
	</TR>
	<TR ALIGN="LEFT" VALIGN="TOP">
		<TD ALIGN="LEFT">Resident</TD>
		<TD ALIGN="LEFT">4 Goodyear Street</TD>
		<TD ALIGN="LEFT">Boulder</TD>
		<TD ALIGN="LEFT">Colorado</TD>
		<TD ALIGN="LEFT">80302-0302</TD>
		<TD ALIGN="LEFT">Monday</TD>
	</TR>
	<TR ALIGN="LEFT" VALIGN="TOP">
		<TD ALIGN="LEFT">Occupant</TD>
		<TD ALIGN="LEFT">2291 Arapahoe</TD>
		<TD ALIGN="LEFT">Irvine</TD>
		<TD ALIGN="LEFT">California</TD>
		<TD ALIGN="LEFT">92711-2002</TD>
		<TD ALIGN="LEFT">Monday</TD>
	</TR>
	<TR ALIGN="LEFT" VALIGN="TOP">
		<TD ALIGN="LEFT">Resident</TD>
		<TD ALIGN="LEFT">8 Hazelnut</TD>
		<TD ALIGN="LEFT">Irvine</TD>
		<TD ALIGN="LEFT">California</TD>
		<TD ALIGN="LEFT">92711-3810</TD>
		<TD ALIGN="LEFT">Monday</TD>
	</TR>
	<TR ALIGN="LEFT" VALIGN="TOP">
		<TD ALIGN="LEFT">Occupant</TD>
		<TD ALIGN="LEFT">2 Orion</TD>
		<TD ALIGN="LEFT">Aliso Viejo</TD>
		<TD ALIGN="LEFT">California</TD>
		<TD ALIGN="LEFT">92656-4200</TD>
		<TD ALIGN="LEFT">Sunday</TD>
	</TR>
	<TR ALIGN="LEFT" VALIGN="TOP">
		<TD ALIGN="LEFT">Medical Practitioner</TD>
		<TD ALIGN="LEFT">1 Jenner</TD>
		<TD ALIGN="LEFT">Tacoma</TD>
		<TD ALIGN="LEFT">Washington</TD>
		<TD ALIGN="LEFT">98402-8402</TD>
		<TD ALIGN="LEFT">Thursday</TD>
	</TR>
	<TR ALIGN="LEFT" VALIGN="TOP">
		<TD ALIGN="LEFT">Medical Practitioner</TD>
		<TD ALIGN="LEFT">Civic Center</TD>
		<TD ALIGN="LEFT">Anaheim</TD>
		<TD ALIGN="LEFT">California</TD>
		<TD ALIGN="LEFT">92805-2805</TD>
		<TD ALIGN="LEFT">Tuesday</TD>
	</TR>
	<TR ALIGN="LEFT" VALIGN="TOP">
		<TD ALIGN="LEFT">Occupant</TD>
		<TD ALIGN="LEFT">2 Park Plaza</TD>
		<TD ALIGN="LEFT">Irvine</TD>
		<TD ALIGN="LEFT">California</TD>
		<TD ALIGN="LEFT">92714-271Thursday</TD>
		<TD ALIGN="LEFT"></TD>
	</TR>
</TABLE>

<H4>9.1 Create a report using Microsoft Data Report Designer</H4>
<P>Using the Data Report Designer, you will lay out a report and place report intrinsic
controls on the form to create a simple Data Report. This How-To will get your feet
wet with the new Data Report Designer and how it relates to the Visual Basic IDE.</P>
<P>
<H4>9.2 Add Calculated Fields to a Microsoft Data Report</H4>
<P>Using the <TT>rptFunction</TT> report control you will add calculations to a Data
Report. You will become familiar with various functions the control can offer when
creating reports.</P>
<P>
<H4>9.3 Select if the Microsoft Data Report will be displayed, printed, or export
using Visual Basic code</H4>
<P>Using Microsoft Data Report and some Visual Basic coding, this How-To will demonstrate
how to display a report to the screen, print the report directly to the printer,
or export the report to a file. The format of a file when exported can be text or
HTML. The ability of exporting a report to HTML opens up multiple possibilities to
Web enable your application.</P>
<P>
<H4>9.Have a Report Displayed Based on Criteria I Choose Using a Microsoft Data Report</H4>
<P>Have a Data Report display data based on a parameter passed to a SQL-based query
contained in a <TT>Data Environment</TT> object.</P>
<P>
<H4>9.5 Determine Which Records Will Be Printed Using Crystal Reports</H4>
<P>Using the <TT>Crystal Reports</TT> custom control, you can specify at runtime
the records to be printed by sending a Crystal Reports formula to the print engine.
In this How-To, you'll create a report using three tables linked together and a simple
Visual Basic program to show how you can control the records printed at runtime.</P>
<P>
<H4>9.6 Create Subtotals and Other Calculated Fields Using Crystal Reports</H4>
<P>Crystal Reports has a rich variety of built-in capabilities for creating very
complex reports. This How-To describes how to create a bulk mail report based on
an address file, sorting, grouping, and performing calculations needed for completion
of a mailing's paperwork. You certainly can't get too much more complex than a system
created over 200 years by the federal bureaucracy!</P>
<P>
<H4>9.7 Control the Order in Which Records Will Be Printed Using Crystal Reports</H4>
<P>Although the Crystal Reports design program provides a very flexible report design
and creation environment, you can change the record sort order from a Visual Basic
application, giving you essentially unlimited flexibility to print different reports,
as you'll see in this How-To. You'll also see how to change the group sort order,
giving you another level of flexibility using database reports.</P>
<P>
<H4>9.8 Print Labels Using Crystal Reports</H4>
<P>Crystal Reports makes it easy to produce almost any type of label using a database.
In this How-To, you'll create mailing labels complete with attractive graphics and
a return address.</P>
<P>
<H4>9.9 Create and Print Form Letters with Crystal Reports</H4>
<P>By using formulas and the flexible formatting in Crystal Reports, you can use
your data to produce form letters. But how do you print different page headers and
footers? And how do you customize the text for each recipient in your mailing list?
This How-To gives you all the information you need to use Crystal Reports for form
letters.</P>
<P>
<H4>9.10 Print Field Data Without Extra Spaces Between the Fields with Crystal Reports</H4>
<P>Although it is not as complete a set of tools as Visual Basic, Crystal Reports
does have a number of useful string manipulation and conversion functions and operators.
In this How-To, you'll design a customer directory showing names, addresses, and
the page number as a single formula field, giving the report a more natural and finished
look.</P>
<P>
<H4>9.11 Prevent Blank Lines from Being Printed when a Field Contains No Data Using
Crystal Reports</H4>
<P>Crystal Reports provides two options that conserve space when reports are printed:
the Suppress Blank Lines property for report sections and Print on Multiple Lines
property for text boxes. Both options are put to good use in this How-To, creating
a report from frequently incomplete data.</P>
<P>
<H4>9.12 Create Cross-Tab Reports with Crystal Reports</H4>
<P>Using Crystal Reports to produce cross-tab reports is very easy when you use the
Cross-Tab layout window. In fact, the hardest part of creating the report is developing
a clear picture of how to analyze the data, but Crystal Reports makes it easy to
try different options until the report gives the information needed. This How-To
demonstrates how to create a summary of customers by city and day of the week that
they receive service.</P>
<P>
<H4>9.13 Generate Reports Using User-Entered Variables with Crystal Reports</H4>
<P>Many of the design elements of a Crystal report can be changed on-the-fly in a
Visual Basic application. Although there aren't enough control properties to completely
change an existing report or create a new report, there are enough changeable properties
available that a Visual Basic application can create entirely different reports using
the same data. This How-To creates a Visual Basic application and a Crystal report
that allows records to be printed in different orders while filtering the records
and customizing the report heading and page numbering.</P>
<P>
<H2>9.1 How Do I...</H2>
<H3><A NAME="Create a report using Microsoft ..."></A><B>Create a report using Microsoft
Data Report Designer?</B></H3>
<P><B>Problem</B></P>
<P>I need to create a report using data from a database that can be displayed to
the user, easily printed or exported to HTML.</P>
<P><B>Technique</B></P>
<P>Using Visual Basic and the included Data Report Designer, a report can be created
to represent the data as desired. Using the BIBLIO.MDB database included with Visual
Basic, you will create a report that displays a list of authors. The preview window
used to display the report will enable the user to print and export the report directly
from the preview.</P>
<P><B>Steps</B></P>
<P>Start Visual Basic, load then run the AuthorsDR.vbp project. Figure 9.2 displays
how the report will look. The report can be printed by clicking the printer icon,
or can be exported to text or HTML by clicking the book icon.</P>
<P><A HREF="javascript:popUp('09vdb35.gif')"><B>Figure 9.2.</B></A><B> </B><I>AuthorsDR
form shown at runtime.</I></P>

<DL>
	<DT><I></I></DT>
	<DD><B>1. </B>Start Visual Basic and select a new Standard EXE project. Select Add
	Data Environment from the Project menu. The window in Figure 9.3 will appear. Right
	click on the Connection1 item in the Data View window. Select the Properties item
	from the popup menu. The following screen is used to set the database and connection
	type. This How-To will use the BIBLIO.MDB database; therefore, select the Microsoft
	Jet 3.51 OLE DB Provider, then click on the Next button. Enter or select the location
	of the BIBLIO.MDB database; it should be in the same folder as Visual Basic. Click
	on the Test button to verify the connection. This handy option enables you to verify
	the database connection without having to write test codes. Run the project. Click
	the OK button.
	<P>
	<DT></DT>
	<DD><B>2. </B>Right-click on the Commands folder in the Data Environment window.
	Select the Add Command item from the popup menu. An item called Command1 will appear
	under the Commands folder. Right click on it and select the Properties item from
	the popup menu. The Properties dialog box that appears is used to select a table
	or query. Click the on Connection drop-down list and select Connection1. From the
	Database drop down select the Table object. From the Object drop-down list, select
	the Authors Table. The dialog should look like Figure 9.4 after the items have been
	chosen.
	<P>
</DL>

<P><A HREF="javascript:popUp('09fig36r.gif')"><B>Figure 9.3.</B></A><B> </B><I>The
Data View Window.</I></P>
<P><A HREF="javascript:popUp('09vdb37.gif')"><B>Figure 9.4.</B></A><B> </B><I>The
Command1 Properties dialog box.</I></P>

<DL>
	<DT><I></I></DT>
	<DD><B>3. </B>From the Visual Basic main menu, select the Add Data Report item from
	the Project menu. Set the properties of the Data Report as in Table 9.5. Then, right-click
	on the report and select Retrieve Structure from the popup menu. Retrieve Structure
	will make the sections of the report match the database connection layout.
	<P>
</DL>



<BLOCKQUOTE>
	<H4>Table 9.5. Properties for drBasic.dsr AuthorsDR.</H4>
	<P>
	<TABLE BORDER="1">
	<TR ALIGN="LEFT" VALIGN="TOP">
		<TD ALIGN="LEFT"><B><I>OBJECT</I></B></TD>
		<TD ALIGN="LEFT"><B><I>Property</I></B></TD>
		<TD ALIGN="LEFT"><B><I>Setting</I></B></TD>
	</TR>
	<TR ALIGN="LEFT" VALIGN="TOP">
		<TD ALIGN="LEFT"><TT>DataReport</TT></TD>
		<TD ALIGN="LEFT"><TT>Name</TT></TD>
		<TD ALIGN="LEFT"><TT>drBasic</TT></TD>
	</TR>
	<TR ALIGN="LEFT" VALIGN="TOP">
		<TD ALIGN="LEFT"></TD>
		<TD ALIGN="LEFT"><TT>DataMember</TT></TD>
		<TD ALIGN="LEFT"><TT>Command1</TT></TD>
	</TR>
	<TR ALIGN="LEFT" VALIGN="TOP">
		<TD ALIGN="LEFT"></TD>
		<TD ALIGN="LEFT"><TT>DataSource</TT></TD>
		<TD ALIGN="LEFT"><TT>DataEnviroment1</TT></TD>
	</TR>
	</TABLE>
</P>

</BLOCKQUOTE>


<DL>
	<DT></DT>
	<DD><B>4. </B>The fields to be displayed can be added in two ways. The first method
	is to draw the fields on the report, then assign the proper <TT>DataMember</TT> and
	<TT>DataField</TT> properties to them. The second method is to open the Data Environment
	window, and drag and drop the fields directly on the report. After a field is dropped
	onto the detail section of the report, the field and its caption are displayed on
	the report. Arrange the items as shown in Figure 9.5.
	<P>
</DL>

<P><A HREF="javascript:popUp('09vdb38.gif')"><B>Figure 9.5.</B></A><B> </B><I>Arranged
report objects.</I></P>

<DL>
	<DT><I></I></DT>
	<DD><B>5. </B>Set the properties of the objects on the report form as in Table 9.6.
	<P>
</DL>



<BLOCKQUOTE>
	<H4>Table 9.6. Objects on drBasic.dsr.</H4>
	<P>
	<TABLE BORDER="1">
	<TR ALIGN="LEFT" VALIGN="TOP">
		<TD ALIGN="LEFT"><B><I>OBJECT</I></B></TD>
		<TD ALIGN="LEFT"><B><I>Property</I></B></TD>
		<TD ALIGN="LEFT"><B><I>Setting</I></B></TD>
	</TR>
	<TR ALIGN="LEFT" VALIGN="TOP">
		<TD ALIGN="LEFT"><TT>RptCaption</TT></TD>
		<TD ALIGN="LEFT"><TT>Name</TT></TD>
		<TD ALIGN="LEFT"><TT>lbTitle</TT></TD>
	</TR>
	<TR ALIGN="LEFT" VALIGN="TOP">
		<TD ALIGN="LEFT"></TD>
		<TD ALIGN="LEFT"><TT>Font</TT></TD>
		<TD ALIGN="LEFT"><TT>Arial</TT></TD>
	</TR>
	<TR ALIGN="LEFT" VALIGN="TOP">
		<TD ALIGN="LEFT"></TD>
		<TD ALIGN="LEFT"><TT>Size</TT></TD>
		<TD ALIGN="LEFT"><TT>12</TT></TD>
	</TR>
	<TR ALIGN="LEFT" VALIGN="TOP">
		<TD ALIGN="LEFT"></TD>
		<TD ALIGN="LEFT"><TT>Caption</TT></TD>
		<TD ALIGN="LEFT"><TT>&quot;List of Authors&quot;</TT></TD>
	</TR>
	<TR ALIGN="LEFT" VALIGN="TOP">
		<TD ALIGN="LEFT"><TT>RptCaption</TT></TD>
		<TD ALIGN="LEFT"><TT>Name</TT></TD>
		<TD ALIGN="LEFT"><TT>lbAuthorTitle</TT></TD>
	</TR>
	<TR ALIGN="LEFT" VALIGN="TOP">
		<TD ALIGN="LEFT"></TD>
		<TD ALIGN="LEFT"><TT>Font</TT></TD>
		<TD ALIGN="LEFT"><TT>Arial</TT></TD>
	</TR>
	<TR ALIGN="LEFT" VALIGN="TOP">
		<TD ALIGN="LEFT"></TD>
		<TD ALIGN="LEFT"><TT>Caption</TT></TD>
		<TD ALIGN="LEFT"><TT>Author:</TT></TD>
	</TR>
	<TR ALIGN="LEFT" VALIGN="TOP">
		<TD ALIGN="LEFT"><TT>RptCaption</TT></TD>
		<TD ALIGN="LEFT"><TT>Name</TT></TD>
		<TD ALIGN="LEFT"><TT>lbYearTitle</TT></TD>
	</TR>
	<TR ALIGN="LEFT" VALIGN="TOP">
		<TD ALIGN="LEFT"></TD>
		<TD ALIGN="LEFT"><TT>Font</TT></TD>
		<TD ALIGN="LEFT"><TT>Arial</TT></TD>
	</TR>
	<TR ALIGN="LEFT" VALIGN="TOP">
		<TD ALIGN="LEFT"></TD>
		<TD ALIGN="LEFT"><TT>Caption</TT></TD>
		<TD ALIGN="LEFT"><TT>&quot;Year Born:&quot;</TT></TD>
	</TR>
	<TR ALIGN="LEFT" VALIGN="TOP">
		<TD ALIGN="LEFT"><TT>RptText</TT></TD>
		<TD ALIGN="LEFT"><TT>Name</TT></TD>
		<TD ALIGN="LEFT"><TT>txtAuthor</TT></TD>
	</TR>
	<TR ALIGN="LEFT" VALIGN="TOP">
		<TD ALIGN="LEFT"></TD>
		<TD ALIGN="LEFT"><TT>Font</TT></TD>
		<TD ALIGN="LEFT"><TT>Arial</TT></TD>
	</TR>
	<TR ALIGN="LEFT" VALIGN="TOP">
		<TD ALIGN="LEFT"></TD>
		<TD ALIGN="LEFT"><TT>DataField</TT></TD>
		<TD ALIGN="LEFT"><TT>Author</TT></TD>
	</TR>
	<TR ALIGN="LEFT" VALIGN="TOP">
		<TD ALIGN="LEFT"></TD>
		<TD ALIGN="LEFT"><TT>DataMember</TT></TD>
		<TD ALIGN="LEFT"><TT>Command1</TT></TD>
	</TR>
	<TR ALIGN="LEFT" VALIGN="TOP">
		<TD ALIGN="LEFT"><TT>RptText</TT></TD>
		<TD ALIGN="LEFT"><TT>Name</TT></TD>
		<TD ALIGN="LEFT"><TT>txtYearBorn</TT></TD>
	</TR>
	<TR ALIGN="LEFT" VALIGN="TOP">
		<TD ALIGN="LEFT"></TD>
		<TD ALIGN="LEFT"><TT>Font</TT></TD>
		<TD ALIGN="LEFT"><TT>Arial</TT></TD>
	</TR>
	<TR ALIGN="LEFT" VALIGN="TOP">
		<TD ALIGN="LEFT"></TD>
		<TD ALIGN="LEFT"><TT>DataField</TT></TD>
		<TD ALIGN="LEFT"><TT>&quot;Year Born&quot;</TT></TD>
	</TR>
	<TR ALIGN="LEFT" VALIGN="TOP">
		<TD ALIGN="LEFT"></TD>
		<TD ALIGN="LEFT"><TT>DataMember</TT></TD>
		<TD ALIGN="LEFT"><TT>Command1</TT></TD>
	</TR>
	<TR ALIGN="LEFT" VALIGN="TOP">
		<TD ALIGN="LEFT"></TD>
		<TD ALIGN="LEFT"><TT>DataSource</TT></TD>
		<TD ALIGN="LEFT"><TT>DataEnviroment1</TT></TD>
	</TR>
	</TABLE>
</P>

</BLOCKQUOTE>


<DL>
	<DT></DT>
	<DD><B>6. </B>Remove the form called Form1 that was automatically created when you
	started Visual Basic. Set the Startup Object to the report form. Run the project.
	<P>
</DL>

<H3><B>HOW IT WORKS</B></H3>
<P>First, a Data Environment must be defined. This is the gateway through which the
report retrieves its data. Then, the report is assigned to a Data Connection. The
structure of the Data Connection is mirrored by the report. Dragging and dropping
the fields into the report creates the report layout. By running the Visual Basic
project the report and data is displayed. At run-time the user can easily print or
export the report.</P>
<P><B>Comments</B></P>
<P>Creating a Data report consists of three basic steps. First, a data connection
must be created. This is the object the report will use to retrieve the data. With
Visual Basic 6 the new Data Environment is very powerful and flexible as it enables
the Data Reports to retrieve data from various data types. You are not limited to
just Access MDB files, but can get data from any ODBC DataSource or use the built
in functionality to connect directly to an Microsoft SQL server or an Oracle database.</P>
<P>The second step is to assign the report to a Data Connector created in the Data
Environment and use the &quot;Retrieve Structure&quot; option so the report section
matches the data connection.</P>
<P>The third step is to add the report controls to the report. These controls will
display the data the report retrieves. These controls can range from displaying the
names of the fields to calculated items that summarize data in the report.</P>
<P>
<H2>9.2 How Do I...</H2>
<H3><A NAME="Add Calculated Fields ..."></A><B>Add Calculated Fields to my Microsoft
Data Report?</B></H3>
<P><B>Problem</B></P>
<P>I have a report that generates a list of items. I need to have the report count
the number of items in the list.</P>
<P><B>Technique</B></P>
<P>Using the Data Report designer included with Visual Basic 6, you can create reports
that can do various calculations based on the data in the report.</P>
<P>This How-To will demonstrate how to make a group based on the Authors field and
add a calculated field that will display the number of books each author has written.
This How-To will be a base demonstration how to add calculated fields to a Data Report.</P>
<P><B>Steps</B></P>
<P>Open and run DataProject.vbp, which displays the Figure 9.7. This displays each
author's list of book and a count of the number of books per author. By using the
toolbar at the top of the report you can print or export the report.</P>

<DL>
	<DT></DT>
	<DD><B>1. </B>Start Visual Basic and select a new Data Project. This will add the
	Data Environment and Data Report to the project. Remove the form that was added to
	the project and set the Data Report as the Startup object.
	<P>
	<DT></DT>
	<DD><B>2. </B>From the Project menu select the Add Data Environment. Double-click
	on the DataEnvironment1 object that was added to the Project window. Right-click
	on the Connection folder and select the Add Connection item from the popup menu.
	Right-click on the <TT>Connection1</TT> object and select the Properties item from
	the popup menu. Select the Microsoft Jet 3.51 OLE DB provider. The next dialog box
	that appears is used to find the BIBLIO.MDB file on your computer. Click the OK button.
	Right-click on the Command folder and select the Add Command item from the popup
	menu. Command1 will be added under the Commands folder. Right click on Command1 and
	select the Properties from the popup menu. Using the Data Object dropdown select
	the Tables item. Using the Object Name dropdown select the Titles item.
	<P>
	<DT></DT>
	<DD>Steps 1 and 2 were to set up the Data Environment. Please refer to the chapters
	in this book for a more detail on the Data Environment.
	<P>
	<DT></DT>
	<DD><B>3. </B>Under the Grouping tab, check the Group Command Object checkbox. This
	will enable the items in the tab. Click on the Author field and click the &quot;&gt;&quot;
	button. This will cause the Data Environment to group the data by Author. Click the
	OK button.
	<P>
	<DT></DT>
	<DD><B>4. </B>Set the DataMember and DataSource of the Data Report. Right-click on
	the bottom of the report and select the Retrieve Structure item from the popup menu.
	This will arrange the sections of the Data Report to match the data used.
	<P>
	<DT></DT>
	<DD><B>5. </B>Place the controls on the data report form as in Figure 9.6. Set the
	properties of the controls as in Table 9.7.
	<P>
</DL>

<P><A HREF="javascript:popUp('09vdb39.gif')"><B>Figure 9.6.</B></A><B> </B><I>Objects
arranged on the report.</I></P>
<P><A HREF="javascript:popUp('09vdb40.gif')"><B>Figure 9.7.</B></A><B> </B><I>The
project at runtime.</I></P>


<BLOCKQUOTE>
	<H4>Table 9.7. Objects and properties for drBasic.dsr.</H4>
	<P>
	<TABLE BORDER="1">
	<TR ALIGN="LEFT" VALIGN="TOP">
		<TD ALIGN="LEFT"><B><I>OBJECT</I></B></TD>
		<TD ALIGN="LEFT"><B><I>Property</I></B></TD>
		<TD ALIGN="LEFT"><B><I>Setting</I></B></TD>
	</TR>
	<TR ALIGN="LEFT" VALIGN="TOP">
		<TD ALIGN="LEFT"><TT>DataReport</TT></TD>
		<TD ALIGN="LEFT"><TT>Name</TT></TD>
		<TD ALIGN="LEFT"><TT>DataReport1</TT></TD>
	</TR>
	<TR ALIGN="LEFT" VALIGN="TOP">
		<TD ALIGN="LEFT"></TD>
		<TD ALIGN="LEFT"><TT>DataMember</TT></TD>
		<TD ALIGN="LEFT"><TT>Command1_Grouping</TT></TD>
	</TR>
	<TR ALIGN="LEFT" VALIGN="TOP">
		<TD ALIGN="LEFT"><TT>RptLabel</TT></TD>
		<TD ALIGN="LEFT"><TT>Name</TT></TD>
		<TD ALIGN="LEFT"><TT>lbTitle</TT></TD>
	</TR>
	<TR ALIGN="LEFT" VALIGN="TOP">
		<TD ALIGN="LEFT"></TD>
		<TD ALIGN="LEFT"><TT>Font</TT></TD>
		<TD ALIGN="LEFT"><TT>Arial</TT></TD>
	</TR>
	<TR ALIGN="LEFT" VALIGN="TOP">
		<TD ALIGN="LEFT"></TD>
		<TD ALIGN="LEFT"><TT>FontSize</TT></TD>
		<TD ALIGN="LEFT"><TT>14.25</TT></TD>
	</TR>
	<TR ALIGN="LEFT" VALIGN="TOP">
		<TD ALIGN="LEFT"></TD>
		<TD ALIGN="LEFT"><TT>Caption</TT></TD>
		<TD ALIGN="LEFT"><TT>&quot;Number of Books per Author&quot;</TT></TD>
	</TR>
	<TR ALIGN="LEFT" VALIGN="TOP">
		<TD ALIGN="LEFT"><TT>RptText</TT></TD>
		<TD ALIGN="LEFT"><TT>Name</TT></TD>
		<TD ALIGN="LEFT"><TT>&quot;txtAuthor&quot;</TT></TD>
	</TR>
	<TR ALIGN="LEFT" VALIGN="TOP">
		<TD ALIGN="LEFT"></TD>
		<TD ALIGN="LEFT"><TT>Font</TT></TD>
		<TD ALIGN="LEFT"><TT>Arial</TT></TD>
	</TR>
	<TR ALIGN="LEFT" VALIGN="TOP">
		<TD ALIGN="LEFT"></TD>
		<TD ALIGN="LEFT"><TT>FontSize</TT></TD>
		<TD ALIGN="LEFT"><TT>12</TT></TD>
	</TR>
	<TR ALIGN="LEFT" VALIGN="TOP">
		<TD ALIGN="LEFT"></TD>
		<TD ALIGN="LEFT"><TT>DataField</TT></TD>
		<TD ALIGN="LEFT"><TT>Author</TT></TD>
	</TR>
	<TR ALIGN="LEFT" VALIGN="TOP">
		<TD ALIGN="LEFT"></TD>
		<TD ALIGN="LEFT"><TT>DataMember</TT></TD>
		<TD ALIGN="LEFT"><TT>Command1_Grouping</TT></TD>
	</TR>
	<TR ALIGN="LEFT" VALIGN="TOP">
		<TD ALIGN="LEFT"><TT>RptLabel</TT></TD>
		<TD ALIGN="LEFT"><TT>Name</TT></TD>
		<TD ALIGN="LEFT"><TT>Label2</TT></TD>
	</TR>
	<TR ALIGN="LEFT" VALIGN="TOP">
		<TD ALIGN="LEFT"></TD>
		<TD ALIGN="LEFT"><TT>Caption</TT></TD>
		<TD ALIGN="LEFT"><TT>Title:</TT></TD>
	</TR>
	<TR ALIGN="LEFT" VALIGN="TOP">
		<TD ALIGN="LEFT"><TT>RptLabel</TT></TD>
		<TD ALIGN="LEFT"><TT>Name</TT></TD>
		<TD ALIGN="LEFT"><TT>Label3</TT>of</TD>
	</TR>
	<TR ALIGN="LEFT" VALIGN="TOP">
		<TD ALIGN="LEFT"></TD>
		<TD ALIGN="LEFT"><TT>Caption</TT></TD>
		<TD ALIGN="LEFT"><TT>&quot;Year Published:&quot;</TT></TD>
	</TR>
	<TR ALIGN="LEFT" VALIGN="TOP">
		<TD ALIGN="LEFT"><TT>RptText</TT></TD>
		<TD ALIGN="LEFT"><TT>Name</TT></TD>
		<TD ALIGN="LEFT"><TT>txtTitle</TT></TD>
	</TR>
	<TR ALIGN="LEFT" VALIGN="TOP">
		<TD ALIGN="LEFT"></TD>
		<TD ALIGN="LEFT"><TT>DataField</TT></TD>
		<TD ALIGN="LEFT"><TT>Title</TT></TD>
	</TR>
	<TR ALIGN="LEFT" VALIGN="TOP">
		<TD ALIGN="LEFT"></TD>
		<TD ALIGN="LEFT"><TT>DataMember</TT></TD>
		<TD ALIGN="LEFT"><TT>Command1</TT></TD>
	</TR>
	<TR ALIGN="LEFT" VALIGN="TOP">
		<TD ALIGN="LEFT"><TT>RptText</TT></TD>
		<TD ALIGN="LEFT"><TT>Name</TT></TD>
		<TD ALIGN="LEFT"><TT>txtYearPublished</TT></TD>
	</TR>
	<TR ALIGN="LEFT" VALIGN="TOP">
		<TD ALIGN="LEFT"></TD>
		<TD ALIGN="LEFT"><TT>DataField</TT></TD>
		<TD ALIGN="LEFT"><TT>&quot;Year Published&quot;</TT></TD>
	</TR>
	<TR ALIGN="LEFT" VALIGN="TOP">
		<TD ALIGN="LEFT"></TD>
		<TD ALIGN="LEFT">DataMember</TD>
		<TD ALIGN="LEFT"><TT>Command1</TT></TD>
	</TR>
	<TR ALIGN="LEFT" VALIGN="TOP">
		<TD ALIGN="LEFT"><TT>RptFunction</TT></TD>
		<TD ALIGN="LEFT"><TT>Name</TT></TD>
		<TD ALIGN="LEFT"><TT>Function1</TT></TD>
	</TR>
	<TR ALIGN="LEFT" VALIGN="TOP">
		<TD ALIGN="LEFT"></TD>
		<TD ALIGN="LEFT"><TT>DataField</TT></TD>
		<TD ALIGN="LEFT"><TT>Title</TT></TD>
	</TR>
	<TR ALIGN="LEFT" VALIGN="TOP">
		<TD ALIGN="LEFT"></TD>
		<TD ALIGN="LEFT"><TT>DataMember</TT></TD>
		<TD ALIGN="LEFT"><TT>Command1</TT></TD>
	</TR>
	<TR ALIGN="LEFT" VALIGN="TOP">
		<TD ALIGN="LEFT"></TD>
		<TD ALIGN="LEFT"><TT>FunctionType</TT></TD>
		<TD ALIGN="LEFT"><TT>4 - rptFunRCnt</TT></TD>
	</TR>
	<TR ALIGN="LEFT" VALIGN="TOP">
		<TD ALIGN="LEFT"><TT>RptLabel</TT></TD>
		<TD ALIGN="LEFT"><TT>Name</TT></TD>
		<TD ALIGN="LEFT"><TT>lbTotalBooks</TT></TD>
	</TR>
	<TR ALIGN="LEFT" VALIGN="TOP">
		<TD ALIGN="LEFT"></TD>
		<TD ALIGN="LEFT"><TT>Caption</TT></TD>
		<TD ALIGN="LEFT"><TT>&quot;Total Books by Author&quot;</TT></TD>
	</TR>
	<TR ALIGN="LEFT" VALIGN="TOP">
		<TD ALIGN="LEFT"><TT>RptLabel</TT></TD>
		<TD ALIGN="LEFT"><TT>Name</TT></TD>
		<TD ALIGN="LEFT"><TT>Label1</TT></TD>
	</TR>
	<TR ALIGN="LEFT" VALIGN="TOP">
		<TD ALIGN="LEFT"></TD>
		<TD ALIGN="LEFT"><TT>Caption</TT></TD>
		<TD ALIGN="LEFT"><TT>&quot;%p&quot;</TT></TD>
	</TR>
	<TR ALIGN="LEFT" VALIGN="TOP">
		<TD ALIGN="LEFT"><TT>RptLabel</TT></TD>
		<TD ALIGN="LEFT"><TT>Name</TT></TD>
		<TD ALIGN="LEFT"><TT>lbPageTitle</TT></TD>
	</TR>
	<TR ALIGN="LEFT" VALIGN="TOP">
		<TD ALIGN="LEFT"></TD>
		<TD ALIGN="LEFT"><TT>Caption</TT></TD>
		<TD ALIGN="LEFT"><TT>Page</TT></TD>
	</TR>
	<TR ALIGN="LEFT" VALIGN="TOP">
		<TD ALIGN="LEFT"><TT>RptLabel</TT></TD>
		<TD ALIGN="LEFT"><TT>Name</TT></TD>
		<TD ALIGN="LEFT"><TT>lbof</TT></TD>
	</TR>
	<TR ALIGN="LEFT" VALIGN="TOP">
		<TD ALIGN="LEFT"></TD>
		<TD ALIGN="LEFT"><TT>Caption</TT></TD>
		<TD ALIGN="LEFT"><TT>of</TT></TD>
	</TR>
	<TR ALIGN="LEFT" VALIGN="TOP">
		<TD ALIGN="LEFT"><TT>RptLabel</TT></TD>
		<TD ALIGN="LEFT"><TT>Name</TT></TD>
		<TD ALIGN="LEFT"><TT>Label4</TT></TD>
	</TR>
	<TR ALIGN="LEFT" VALIGN="TOP">
		<TD ALIGN="LEFT"></TD>
		<TD ALIGN="LEFT"><TT>Caption</TT></TD>
		<TD ALIGN="LEFT"><TT>&quot;%P&quot;</TT></TD>
	</TR>
	</TABLE>
</P>

</BLOCKQUOTE>


<DL>
	<DT></DT>
	<DD><B>6. </B>Run the project. It might take a few minutes to retrieve the data from
	the database. The result should be displayed as in Figure 9.7.
	<P>
</DL>

<P><B>How It Works.</B></P>
<P>The report retrieves the data from the Data Environment. The Data Environment
queries the database and groups the data by author. The rptFunction control that
has been placed in the Group footer displays the total number of books per author.
The rptFunction control can do various functions as in Table 9.8.</P>
<P>
<H4>Table 9.8. rptFunction control functions description.</H4>
<P>
<TABLE BORDER="1">
	<TR ALIGN="LEFT" VALIGN="TOP">
		<TD ALIGN="LEFT"><B><I>FUNCTION</I></B></TD>
		<TD ALIGN="LEFT"><B><I>Setting</I></B></TD>
		<TD ALIGN="LEFT"><B><I>Description</I></B></TD>
	</TR>
	<TR ALIGN="LEFT" VALIGN="TOP">
		<TD ALIGN="LEFT"><TT>Sum</TT></TD>
		<TD ALIGN="LEFT"><TT>0 - rptFuncSum</TT></TD>
		<TD ALIGN="LEFT">Adds the values of the field</TD>
	</TR>
	<TR ALIGN="LEFT" VALIGN="TOP">
		<TD ALIGN="LEFT"><TT>Average</TT></TD>
		<TD ALIGN="LEFT"><TT>1 - rptFuncAve</TT></TD>
		<TD ALIGN="LEFT">Averages the values of the field</TD>
	</TR>
	<TR ALIGN="LEFT" VALIGN="TOP">
		<TD ALIGN="LEFT"><TT>Minimum</TT></TD>
		<TD ALIGN="LEFT"><TT>2 - rptFuncMin</TT></TD>
		<TD ALIGN="LEFT">Displays the minimum value of the field</TD>
	</TR>
	<TR ALIGN="LEFT" VALIGN="TOP">
		<TD ALIGN="LEFT"><TT>Maximum</TT></TD>
		<TD ALIGN="LEFT"><TT>3 - rptFuncMax</TT></TD>
		<TD ALIGN="LEFT">Displays the maximum value of the field</TD>
	</TR>
	<TR ALIGN="LEFT" VALIGN="TOP">
		<TD ALIGN="LEFT"><TT>Row Count</TT></TD>
		<TD ALIGN="LEFT"><TT>4 - rptFuncRCnt</TT></TD>
		<TD ALIGN="LEFT">Displays the number of rows in a section</TD>
	</TR>
	<TR ALIGN="LEFT" VALIGN="TOP">
		<TD ALIGN="LEFT"><TT>Value Count</TT></TD>
		<TD ALIGN="LEFT"><TT>5 - rptFuncVCnt</TT></TD>
		<TD ALIGN="LEFT">Displays the number of rows containing non-null values</TD>
	</TR>
	<TR ALIGN="LEFT" VALIGN="TOP">
		<TD ALIGN="LEFT"><TT>Standard Deviation</TT></TD>
		<TD ALIGN="LEFT"><TT>6 - rptFuncSDEV</TT></TD>
		<TD ALIGN="LEFT">Displays the standard deviation</TD>
	</TR>
	<TR ALIGN="LEFT" VALIGN="TOP">
		<TD ALIGN="LEFT"><TT>Standard Error</TT></TD>
		<TD ALIGN="LEFT"><TT>7 - rptFuncSERR</TT></TD>
		<TD ALIGN="LEFT">Displays the standard error</TD>
	</TR>
</TABLE>
</P>
<P>The rptFunction can be used to do various calculations based on the type of data
in the field. By placing the <TT>rptFunction</TT> control in either a group or report
footer, you can perform calculations on fields contained in the report.</P>
<P><B>Comments</B></P>
<P>Grouping is a very powerful function when generating reports. Grouping enables
the report to list similar items together in the report.</P>
<P>For Example, the books were not added sequentially in the database, so when retrieving
a list of authors and their books from the database all the authors are mixed up
in the list. Grouping allows report to present all the books for one author then
another. Another example is when creating a report to list the books per publisher.
The grouping would be done on publishers not authors.</P>
<P>
<H2>9.3 How Do I...</H2>
<H3><A NAME="Select whether the Microsoft ..."></A><B>Select whether the Microsoft
Data Report will be displayed, printed, or exported using Visual Basic code?</B></H3>
<P><B>Problem</B></P>
<P>I need to create an application that enables the user to choose the output method
for the report. I would like the user to be able to choose whether the report is
previewed to the screen, printed to the printer, or exported to a file.</P>
<P><B>Technique</B></P>
<P>The data report has various methods defined to output a report. By using these
methods, the programmer can determine the output method for the report. This How-To
will demonstrate the ways in which the application can enable the user to choose
the output method for the report.</P>
<P>The <TT>PrintReport</TT> method will be used to print the report directly to the
Printer. This method can be set to print directly to the printer without any user
intervention, or the method can be used to display a dialog box to enable the user
to select the print range and the number of copies to be printed.</P>
<P>The <TT>ExportReport</TT> method will be used to generate a file of the report
data. This method can be set to generate the file without any user intervention or
a dialog can be displayed so the user can select the file type and the page range.</P>
<P>The <TT>Show</TT> method will be used to display a print preview window of the
report. This method is the same used to display any other Visual Basic form.</P>
<P><B>Steps</B></P>
<P>Open and run the OutputType.vbp project. This project enables the user to display,
print, or export the report. When printing or exporting a report, the user can select
the page range to be used. This is useful in large reports.</P>

<DL>
	<DD><B>1. </B>Start Visual Basic and choose a new Data Project. Have the Data Environment
	point to the BIBLO.MDB database.
</DL>


<DL>
	<DT></DT>
	<DD><B>2. </B>Lay out the form as in Figure 9.8 and set the properties of the objects
	as in Table 9.9.
	<P>
</DL>

<P><A HREF="javascript:popUp('09vdb41.gif')"><B>Figure 9.8.</B></A><I> Arrangement
of form frmOutPut.frm.</I></P>


<BLOCKQUOTE>
	<H4>Table 9.9. rptFunction control functions description.</H4>
	<P>
	<TABLE BORDER="1">
	<TR ALIGN="LEFT" VALIGN="TOP">
		<TD ALIGN="LEFT"><B><I>OBJECT</I></B></TD>
		<TD ALIGN="LEFT"><B><I>Property</I></B></TD>
		<TD ALIGN="LEFT"><B><I>Setting</I></B></TD>
	</TR>
	<TR ALIGN="LEFT" VALIGN="TOP">
		<TD ALIGN="LEFT"><TT>Form</TT></TD>
		<TD ALIGN="LEFT">Name</TD>
		<TD ALIGN="LEFT"><TT>frmOutPut</TT></TD>
	</TR>
	<TR ALIGN="LEFT" VALIGN="TOP">
		<TD ALIGN="LEFT"></TD>
		<TD ALIGN="LEFT">Caption</TD>
		<TD ALIGN="LEFT"><TT>&quot;Data Report Output&quot;</TT></TD>
	</TR>
	<TR ALIGN="LEFT" VALIGN="TOP">
		<TD ALIGN="LEFT"><TT>Frame</TT></TD>
		<TD ALIGN="LEFT">Name</TD>
		<TD ALIGN="LEFT"><TT>frExport</TT></TD>
	</TR>
	<TR ALIGN="LEFT" VALIGN="TOP">
		<TD ALIGN="LEFT"></TD>
		<TD ALIGN="LEFT">Caption</TD>
		<TD ALIGN="LEFT"><TT>&quot;Export Options&quot;</TT></TD>
	</TR>
	<TR ALIGN="LEFT" VALIGN="TOP">
		<TD ALIGN="LEFT"><TT>CheckBox</TT></TD>
		<TD ALIGN="LEFT">Name</TD>
		<TD ALIGN="LEFT"><TT>chkExport</TT></TD>
	</TR>
	<TR ALIGN="LEFT" VALIGN="TOP">
		<TD ALIGN="LEFT"></TD>
		<TD ALIGN="LEFT">Caption</TD>
		<TD ALIGN="LEFT"><TT>&quot;Show Export Dialog&quot;</TT></TD>
	</TR>
	<TR ALIGN="LEFT" VALIGN="TOP">
		<TD ALIGN="LEFT"><TT>TextBox</TT></TD>
		<TD ALIGN="LEFT">Name</TD>
		<TD ALIGN="LEFT"><TT>txtStartPageEx</TT></TD>
	</TR>
	<TR ALIGN="LEFT" VALIGN="TOP">
		<TD ALIGN="LEFT"><TT>TextBox</TT></TD>
		<TD ALIGN="LEFT">Name</TD>
		<TD ALIGN="LEFT"><TT>txtPrintToEx</TT></TD>
	</TR>
	<TR ALIGN="LEFT" VALIGN="TOP">
		<TD ALIGN="LEFT"><TT>ComboBox</TT></TD>
		<TD ALIGN="LEFT">Name</TD>
		<TD ALIGN="LEFT"><TT>cbExportType</TT></TD>
	</TR>
	<TR ALIGN="LEFT" VALIGN="TOP">
		<TD ALIGN="LEFT"><TT>Label</TT></TD>
		<TD ALIGN="LEFT">Name</TD>
		<TD ALIGN="LEFT"><TT>lbExportType</TT></TD>
	</TR>
	<TR ALIGN="LEFT" VALIGN="TOP">
		<TD ALIGN="LEFT"></TD>
		<TD ALIGN="LEFT">Caption</TD>
		<TD ALIGN="LEFT"><TT>&quot;Export Type&quot;</TT></TD>
	</TR>
	<TR ALIGN="LEFT" VALIGN="TOP">
		<TD ALIGN="LEFT"><TT>Label</TT></TD>
		<TD ALIGN="LEFT">Name</TD>
		<TD ALIGN="LEFT"><TT>lbStartPageEx</TT></TD>
	</TR>
	<TR ALIGN="LEFT" VALIGN="TOP">
		<TD ALIGN="LEFT"></TD>
		<TD ALIGN="LEFT">Caption</TD>
		<TD ALIGN="LEFT"><TT>&quot;Start Page:&quot;</TT></TD>
	</TR>
	<TR ALIGN="LEFT" VALIGN="TOP">
		<TD ALIGN="LEFT"><TT>Label</TT></TD>
		<TD ALIGN="LEFT">Name</TD>
		<TD ALIGN="LEFT"><TT>lbPrintToEx</TT></TD>
	</TR>
	<TR ALIGN="LEFT" VALIGN="TOP">
		<TD ALIGN="LEFT"></TD>
		<TD ALIGN="LEFT">Caption</TD>
		<TD ALIGN="LEFT"><TT>&quot;Print To:&quot;</TT></TD>
	</TR>
	<TR ALIGN="LEFT" VALIGN="TOP">
		<TD ALIGN="LEFT"><TT>CommonDialog</TT></TD>
		<TD ALIGN="LEFT">Name</TD>
		<TD ALIGN="LEFT"><TT>CD</TT></TD>
	</TR>
	<TR ALIGN="LEFT" VALIGN="TOP">
		<TD ALIGN="LEFT"><TT>Frame</TT></TD>
		<TD ALIGN="LEFT">Name</TD>
		<TD ALIGN="LEFT"><TT>frPrint</TT></TD>
	</TR>
	<TR ALIGN="LEFT" VALIGN="TOP">
		<TD ALIGN="LEFT"></TD>
		<TD ALIGN="LEFT">Caption</TD>
		<TD ALIGN="LEFT"><TT>&quot;Print Options&quot;</TT></TD>
	</TR>
	<TR ALIGN="LEFT" VALIGN="TOP">
		<TD ALIGN="LEFT"><TT>TextBox</TT></TD>
		<TD ALIGN="LEFT">Name</TD>
		<TD ALIGN="LEFT"><TT>txtPrintTo</TT></TD>
	</TR>
	<TR ALIGN="LEFT" VALIGN="TOP">
		<TD ALIGN="LEFT"><TT>TextBox</TT></TD>
		<TD ALIGN="LEFT">Name</TD>
		<TD ALIGN="LEFT"><TT>txtStartPage</TT></TD>
	</TR>
	<TR ALIGN="LEFT" VALIGN="TOP">
		<TD ALIGN="LEFT"><TT>CheckBox</TT></TD>
		<TD ALIGN="LEFT">Name</TD>
		<TD ALIGN="LEFT"><TT>chkShowDialog</TT></TD>
	</TR>
	<TR ALIGN="LEFT" VALIGN="TOP">
		<TD ALIGN="LEFT"></TD>
		<TD ALIGN="LEFT">Caption</TD>
		<TD ALIGN="LEFT"><TT>&quot;Show Print Dialog&quot;</TT></TD>
	</TR>
	<TR ALIGN="LEFT" VALIGN="TOP">
		<TD ALIGN="LEFT"><TT>Label</TT></TD>
		<TD ALIGN="LEFT">Name</TD>
		<TD ALIGN="LEFT"><TT>lbPrintTo</TT></TD>
	</TR>
	<TR ALIGN="LEFT" VALIGN="TOP">
		<TD ALIGN="LEFT"></TD>
		<TD ALIGN="LEFT">Caption</TD>
		<TD ALIGN="LEFT"><TT>&quot;Print To:&quot;</TT></TD>
	</TR>
	<TR ALIGN="LEFT" VALIGN="TOP">
		<TD ALIGN="LEFT"><TT>Label</TT></TD>
		<TD ALIGN="LEFT">Name</TD>
		<TD ALIGN="LEFT"><TT>lbStart</TT></TD>
	</TR>
	<TR ALIGN="LEFT" VALIGN="TOP">
		<TD ALIGN="LEFT"></TD>
		<TD ALIGN="LEFT">Caption</TD>
		<TD ALIGN="LEFT"><TT>&quot;Start Page:&quot;</TT></TD>
	</TR>
	<TR ALIGN="LEFT" VALIGN="TOP">
		<TD ALIGN="LEFT"><TT>CommandButton</TT></TD>
		<TD ALIGN="LEFT">Name</TD>
		<TD ALIGN="LEFT"><TT>cmdExit</TT></TD>
	</TR>
	<TR ALIGN="LEFT" VALIGN="TOP">
		<TD ALIGN="LEFT"></TD>
		<TD ALIGN="LEFT">Caption</TD>
		<TD ALIGN="LEFT"><TT>Exit</TT></TD>
	</TR>
	<TR ALIGN="LEFT" VALIGN="TOP">
		<TD ALIGN="LEFT"><TT>CommandButton</TT></TD>
		<TD ALIGN="LEFT">Name</TD>
		<TD ALIGN="LEFT"><TT>cmdExport</TT></TD>
	</TR>
	<TR ALIGN="LEFT" VALIGN="TOP">
		<TD ALIGN="LEFT"></TD>
		<TD ALIGN="LEFT">Caption</TD>
		<TD ALIGN="LEFT"><TT>Export</TT></TD>
	</TR>
	<TR ALIGN="LEFT" VALIGN="TOP">
		<TD ALIGN="LEFT"><TT>CommandButton</TT></TD>
		<TD ALIGN="LEFT">Name</TD>
		<TD ALIGN="LEFT"><TT>cmdPrint</TT></TD>
	</TR>
	<TR ALIGN="LEFT" VALIGN="TOP">
		<TD ALIGN="LEFT"></TD>
		<TD ALIGN="LEFT">Caption</TD>
		<TD ALIGN="LEFT"><TT>&quot;Print&quot;</TT></TD>
	</TR>
	<TR ALIGN="LEFT" VALIGN="TOP">
		<TD ALIGN="LEFT"><TT>CommandButton</TT></TD>
		<TD ALIGN="LEFT">Name</TD>
		<TD ALIGN="LEFT"><TT>cmdPreview</TT></TD>
	</TR>
	<TR ALIGN="LEFT" VALIGN="TOP">
		<TD ALIGN="LEFT"></TD>
		<TD ALIGN="LEFT">Caption</TD>
		<TD ALIGN="LEFT"><TT>Preview</TT></TD>
	</TR>
	</TABLE>
</P>

</BLOCKQUOTE>


<DL>
	<DT></DT>
	<DD><B>3. </B>Add the following code in the <TT>Load</TT> event of the Form:
	<P>
</DL>



<BLOCKQUOTE>
	<PRE><TT>Private Sub Form_Load()</TT>
<TT>    cbExportType.AddItem &quot;1 - HTML&quot;</TT>
<TT>    cbExportType.AddItem &quot;2 - Text&quot;</TT>
<TT>    cbExportType.AddItem &quot;3 - Unicode HTML&quot;</TT>
<TT>    cbExportType.AddItem &quot;4 - Unicode Text&quot;</TT>
<TT>    cbExportType.ListIndex = 0</TT>
<TT>End Sub</TT></PRE>

</BLOCKQUOTE>

<PRE><TT></TT></PRE>

<DL>
	<DT><TT></TT></DT>
	<DD>This procedure will add the export types to the list box so the user can choose
	the format in which the report will be exported.
	<P>
	<DT></DT>
	<DD><B>4. </B>Add the following code to the <TT>Click</TT> event of the <TT>cmdPreview</TT>
	button:
	<P>
</DL>



<BLOCKQUOTE>
	<PRE><TT>Private Sub cmdPreview_Click()</TT>
<TT>    DataReport1.StartUpPosition = 0</TT>
<TT>    DataReport1.WindowState = 2</TT>
<TT>    DataReport1.Show</TT>
<TT>End Sub</TT></PRE>

</BLOCKQUOTE>

<PRE><TT></TT></PRE>

<DL>
	<DT><TT></TT></DT>
	<DD>This procedure will maximize the size of the report windows to the full screen,
	then display the report.
	<P>
	<DT></DT>
	<DD><B>5. </B>Add the following code to the Click event of the cmdPrint button:
	<P>
</DL>



<BLOCKQUOTE>
	<PRE><TT>Private Sub cmdPrint_Click()</TT>
<TT>    Dim fReturn As Long</TT>
<TT>    If txtStartPage.Text &lt;&gt; &quot;&quot; Or txtPrintTo.Text &lt;&gt; &quot;&quot; Then</TT>
<TT>        If IsNumeric(txtStartPage.Text) = False Or _</TT>
<TT>IsNumeric(txtPrintTo.Text) = False Then</TT>
<TT>            MsgBox &quot;The start or end pages to print is invalid.&quot;, _</TT>
<TT>64</TT>
<TT>            Exit Sub</TT>
<TT>        End If</TT>
<TT>    End If</TT>
<TT>    If txtStartPage.Text = &quot;&quot; And txtPrintTo.Text = &quot;&quot; Then</TT>
<TT>        fReturn = DataReport1.PrintReport(chkShowDialog.Value * _</TT>
<TT>-1, rptRangeAllPages)</TT>
<TT>    Else</TT>
<TT>        fReturn = DataReport1.PrintReport(chkShowDialog.Value * _</TT>
<TT>-1, _</TT>
<TT>        txtStartPage.Text, txtPrintTo.Text)</TT>
<TT>    End If</TT>
<TT>    If fReturn = 2 Then</TT>
<TT>        MsgBox &quot;Print Job Sent to Printer.&quot;</TT>
<TT>    Else</TT>
<TT>        MsgBox &quot;Print Job Cancelled&quot;</TT>
<TT>    End If</TT>
<TT>End Sub</TT></PRE>

</BLOCKQUOTE>

<PRE><TT></TT></PRE>

<DL>
	<DT><TT></TT></DT>
	<DD>This procedure prints the report to the printer. There are three variables that
	can be passed to the <TT>PrintReport</TT> method. The first value is a Boolean value
	that determines if the Print dialog box is displayed. The second determines if all
	the pages are to be printed. If the second value is not set to <TT>rptRangeAllPages</TT>,
	then a third value can be used to determine the range of pages that will be printed.
	<P>
	<DT></DT>
	<DD><B>6. </B>Add the following code to the click event of the cmdExport button:
	<P>
</DL>



<BLOCKQUOTE>
	<PRE><TT>Private Sub cmdExport_Click()</TT>
<TT>    Dim Overwrite As Boolean</TT>
<TT>    If txtStartPageEx.Text &lt;&gt; &quot;&quot; Or txtPrintToEx.Text &lt;&gt; &quot;&quot; Then</TT>
<TT>        If IsNumeric(txtStartPageEx.Text) = False Or IsNumeric(txtPrintToEx.Text) = False Then _</TT>
<TT>            MsgBox &quot;The start or end pages to print is invalid.&quot;, _</TT>
<TT>64</TT>
<TT>            Exit Sub</TT>
<TT>        End If</TT>
<TT>    End If</TT>
<TT>    CD.ShowSave</TT>
<TT>    If CD.FileName &lt;&gt; &quot;&quot; Then</TT>
<TT>        If Dir(CD.FileName) &lt;&gt; &quot;&quot; Then</TT>
<TT>            Ans% = MsgBox(&quot;Do you want to overwrite this file ?&quot;, _</TT>
<TT>vbQuestion Or vbYesNo)</TT>
<TT>            If Ans% = 6 Then</TT>
<TT>                Overwrite = True</TT>
<TT>            Else</TT>
<TT>                Overwrite = False</TT>
<TT>            End If</TT>
<TT>        Else</TT>
<TT>            Overwrite = False</TT>
<TT>        End If</TT>
<TT>        If txtStartPageEx.Text = &quot;&quot; And txtPrintToEx.Text = &quot;&quot; _</TT>
<TT>Then</TT>
<TT>            DataReport1.ExportReport DataReport1.ExportFormats(CLng(Left$(cbExportType.List _</TT>
<TT>(cbExportType.ListIndex), 1))).Key, CD.FileName, Overwrite, _</TT>
<TT>chkExport.Value * -1, rptRangeAllPages</TT>
<TT>        Else</TT>
<TT>            DataReport1.ExportReport DataReport1.ExportFormats _</TT>
<TT>(CLng(Left$(cbExportType.List(cbExportType.ListIndex) _</TT>
<TT>, 1))).Key, CD.FileName, Overwrite, chkExport.Value * -1, _</TT>
<TT>txtStartPageEx.Text, txtPrintToEx.Text</TT>
<TT>        End If</TT>
<TT>    End If</TT>
<TT>End Sub</TT></PRE>

</BLOCKQUOTE>

<PRE><TT></TT></PRE>

<DL>
	<DT><TT></TT></DT>
	<DD>The <TT>ExportReport</TT> method is used to export a report to a file. There
	are two primary file types, HTML and text. Unicode versions of both types can also
	be exported. The <TT>ExportReport</TT> method has four (five if all pages are not
	selected) variables which can be passed to the method. The first is the format type
	in which the report will be exported. If this value is left blank, a dialog box will
	appear, asking the user which format is preferred. There are various ways to pass
	the export type using code. This example uses the <TT>ExportFormats</TT> collection
	of the report. These are predefined types as outlined in Table 9.10. The second value
	is the filename of the report to be written. In this example, the filename is set
	from the Common dialog box. The third variable determines if a file should be overwritten.
	The fourth variable determines if the Export dialog box should be displayed. The
	next two variables are identical to those used in <TT>PrintReport</TT> method and
	determine the page range to be exported.
	<P>
</DL>



<BLOCKQUOTE>
	<H4>Table 9.10. Export file types.</H4>
	<P>
	<TABLE BORDER="1">
	<TR ALIGN="LEFT" VALIGN="TOP">
		<TD ALIGN="LEFT"><B><I>EXPORT TYPE</I></B></TD>
		<TD ALIGN="LEFT"><B><I>Constant</I></B></TD>
		<TD ALIGN="LEFT"><B><I>Description</I></B></TD>
	</TR>
	<TR ALIGN="LEFT" VALIGN="TOP">
		<TD ALIGN="LEFT">HTML</TD>
		<TD ALIGN="LEFT">rptKeyHTML</TD>
		<TD ALIGN="LEFT">Export in HTML Format</TD>
	</TR>
	<TR ALIGN="LEFT" VALIGN="TOP">
		<TD ALIGN="LEFT">HTML Unicode</TD>
		<TD ALIGN="LEFT">rptKeyUnicodeHTML_UTF8</TD>
		<TD ALIGN="LEFT">Export in HTML Unicode Format</TD>
	</TR>
	<TR ALIGN="LEFT" VALIGN="TOP">
		<TD ALIGN="LEFT">Text</TD>
		<TD ALIGN="LEFT">rptKeyText</TD>
		<TD ALIGN="LEFT">Export in Text Format</TD>
	</TR>
	<TR ALIGN="LEFT" VALIGN="TOP">
		<TD ALIGN="LEFT">Text Unicode</TD>
		<TD ALIGN="LEFT">rptKeyUnicodeText</TD>
		<TD ALIGN="LEFT">Export in Text Unicode Format</TD>
	</TR>
	</TABLE>
</P>

</BLOCKQUOTE>


<DL>
	<DT></DT>
	<DD>Note that if the overwrite variable is set to <TT>False</TT> and if an attempt
	is made to overwrite a file, the Export dialog box will appear.
	<P>
	<DT></DT>
	<DD><B>7.</B> Add the following code to the Click event of the cmdExit button:
	<P>
</DL>



<BLOCKQUOTE>
	<PRE><TT>Private Sub cmdExit_Click()</TT>
<TT>    End</TT>
<TT>End Sub</TT></PRE>

</BLOCKQUOTE>

<PRE><TT></TT></PRE>

<DL>
	<DT><TT></TT></DT>
	<DD>Clicking this button will cause the application to end.
	<P>
	<DT></DT>
	<DD><B>8. </B>Lay out the report as in Figure 9.9. Set the properties as in Table
	9.11.
	<P>
</DL>

<P><A HREF="javascript:popUp('09vdb42.gif')"><B>Figure 9.9.</B></A><B> </B><I>The
arrangement of the report DataReport1.dsr.</I></P>


<BLOCKQUOTE>
	<H4>Table 9.11. Object and Properties for DataReport1.</H4>
	<P>
	<TABLE BORDER="1">
	<TR ALIGN="LEFT" VALIGN="TOP">
		<TD ALIGN="LEFT"><B><I>OBJECT</I></B></TD>
		<TD ALIGN="LEFT"><B><I>Property</I></B></TD>
		<TD ALIGN="LEFT"><B><I>Setting</I></B></TD>
	</TR>
	<TR ALIGN="LEFT" VALIGN="TOP">
		<TD ALIGN="LEFT"><TT>DataReport</TT></TD>
		<TD ALIGN="LEFT"><TT>Name</TT></TD>
		<TD ALIGN="LEFT"><TT>DataReport1</TT></TD>
	</TR>
	<TR ALIGN="LEFT" VALIGN="TOP">
		<TD ALIGN="LEFT"><TT>DataMember</TT></TD>
		<TD ALIGN="LEFT"></TD>
		<TD ALIGN="LEFT"><TT>Command1_Grouping</TT></TD>
	</TR>
	<TR ALIGN="LEFT" VALIGN="TOP">
		<TD ALIGN="LEFT"><TT>rptLabel</TT></TD>
		<TD ALIGN="LEFT"><TT>Name</TT></TD>
		<TD ALIGN="LEFT"><TT>lbTitle</TT></TD>
	</TR>
	<TR ALIGN="LEFT" VALIGN="TOP">
		<TD ALIGN="LEFT"><TT>Font</TT></TD>
		<TD ALIGN="LEFT"><TT>Arial</TT></TD>
		<TD ALIGN="LEFT"></TD>
	</TR>
	<TR ALIGN="LEFT" VALIGN="TOP">
		<TD ALIGN="LEFT"><TT>FontSize</TT></TD>
		<TD ALIGN="LEFT"><TT>14.25</TT></TD>
		<TD ALIGN="LEFT"></TD>
	</TR>
	<TR ALIGN="LEFT" VALIGN="TOP">
		<TD ALIGN="LEFT"></TD>
		<TD ALIGN="LEFT"><TT>Caption</TT></TD>
		<TD ALIGN="LEFT"><TT>&quot;Number of Books per Author&quot;</TT></TD>
	</TR>
	<TR ALIGN="LEFT" VALIGN="TOP">
		<TD ALIGN="LEFT"><TT>RptTextbox</TT></TD>
		<TD ALIGN="LEFT"><TT>Name</TT></TD>
		<TD ALIGN="LEFT"><TT>txtAuthor</TT></TD>
	</TR>
	<TR ALIGN="LEFT" VALIGN="TOP">
		<TD ALIGN="LEFT"></TD>
		<TD ALIGN="LEFT"><TT>Font</TT></TD>
		<TD ALIGN="LEFT"><TT>Arial</TT></TD>
	</TR>
	<TR ALIGN="LEFT" VALIGN="TOP">
		<TD ALIGN="LEFT"><TT>FontSize</TT></TD>
		<TD ALIGN="LEFT"></TD>
		<TD ALIGN="LEFT"><TT>12</TT></TD>
	</TR>
	<TR ALIGN="LEFT" VALIGN="TOP">
		<TD ALIGN="LEFT"><TT>DataField</TT></TD>
		<TD ALIGN="LEFT"></TD>
		<TD ALIGN="LEFT"><TT>Author</TT></TD>
	</TR>
	<TR ALIGN="LEFT" VALIGN="TOP">
		<TD ALIGN="LEFT"><TT>DataMember</TT></TD>
		<TD ALIGN="LEFT"></TD>
		<TD ALIGN="LEFT"><TT>Command1_Grouping</TT></TD>
	</TR>
	<TR ALIGN="LEFT" VALIGN="TOP">
		<TD ALIGN="LEFT"><TT>RptLabel</TT></TD>
		<TD ALIGN="LEFT"><TT>Name</TT></TD>
		<TD ALIGN="LEFT"><TT>Label2</TT></TD>
	</TR>
	<TR ALIGN="LEFT" VALIGN="TOP">
		<TD ALIGN="LEFT"></TD>
		<TD ALIGN="LEFT"><TT>Caption</TT></TD>
		<TD ALIGN="LEFT"><TT>Title:</TT></TD>
	</TR>
	<TR ALIGN="LEFT" VALIGN="TOP">
		<TD ALIGN="LEFT"><TT>RptLabel</TT></TD>
		<TD ALIGN="LEFT"><TT>Name</TT></TD>
		<TD ALIGN="LEFT"><TT>Label3</TT></TD>
	</TR>
	<TR ALIGN="LEFT" VALIGN="TOP">
		<TD ALIGN="LEFT"></TD>
		<TD ALIGN="LEFT"><TT>Caption</TT></TD>
		<TD ALIGN="LEFT"><TT>&quot;Year Published:&quot;</TT></TD>
	</TR>
	<TR ALIGN="LEFT" VALIGN="TOP">
		<TD ALIGN="LEFT"><TT>RptTextbox</TT></TD>
		<TD ALIGN="LEFT"><TT>Name</TT></TD>
		<TD ALIGN="LEFT"><TT>txtTitle</TT></TD>
	</TR>
	<TR ALIGN="LEFT" VALIGN="TOP">
		<TD ALIGN="LEFT"><TT>DataField</TT></TD>
		<TD ALIGN="LEFT"><TT>Title</TT></TD>
		<TD ALIGN="LEFT"></TD>
	</TR>
	<TR ALIGN="LEFT" VALIGN="TOP">
		<TD ALIGN="LEFT"><TT>DataMember</TT></TD>
		<TD ALIGN="LEFT"><TT>Command1</TT></TD>
		<TD ALIGN="LEFT"></TD>
	</TR>
	<TR ALIGN="LEFT" VALIGN="TOP">
		<TD ALIGN="LEFT"><TT>RptTextbox</TT></TD>
		<TD ALIGN="LEFT"><TT>Name</TT></TD>
		<TD ALIGN="LEFT"><TT>txtYearPublished</TT></TD>
	</TR>
	<TR ALIGN="LEFT" VALIGN="TOP">
		<TD ALIGN="LEFT"><TT>DataField</TT></TD>
		<TD ALIGN="LEFT"></TD>
		<TD ALIGN="LEFT"><TT>&quot;Year Published&quot;</TT></TD>
	</TR>
	<TR ALIGN="LEFT" VALIGN="TOP">
		<TD ALIGN="LEFT"><TT>DataMember</TT></TD>
		<TD ALIGN="LEFT"><TT>Command1</TT></TD>
		<TD ALIGN="LEFT"></TD>
	</TR>
	<TR ALIGN="LEFT" VALIGN="TOP">
		<TD ALIGN="LEFT"><TT>RptFunction</TT></TD>
		<TD ALIGN="LEFT"><TT>Name</TT></TD>
		<TD ALIGN="LEFT"><TT>Function1</TT></TD>
	</TR>
	<TR ALIGN="LEFT" VALIGN="TOP">
		<TD ALIGN="LEFT"><TT>DataField</TT></TD>
		<TD ALIGN="LEFT"><TT>Title</TT></TD>
		<TD ALIGN="LEFT"></TD>
	</TR>
	<TR ALIGN="LEFT" VALIGN="TOP">
		<TD ALIGN="LEFT"><TT>FunctionType</TT></TD>
		<TD ALIGN="LEFT"></TD>
		<TD ALIGN="LEFT"><TT>4 - rptFuncCnt</TT></TD>
	</TR>
	<TR ALIGN="LEFT" VALIGN="TOP">
		<TD ALIGN="LEFT"><TT>DataMember</TT></TD>
		<TD ALIGN="LEFT"><TT>Command1</TT></TD>
		<TD ALIGN="LEFT"></TD>
	</TR>
	<TR ALIGN="LEFT" VALIGN="TOP">
		<TD ALIGN="LEFT"><TT>RptLabel</TT></TD>
		<TD ALIGN="LEFT"><TT>Name</TT></TD>
		<TD ALIGN="LEFT"><TT>lbTotalBooks</TT></TD>
	</TR>
	<TR ALIGN="LEFT" VALIGN="TOP">
		<TD ALIGN="LEFT"></TD>
		<TD ALIGN="LEFT"><TT>Caption</TT></TD>
		<TD ALIGN="LEFT"><TT>&quot;Total Books by Author&quot;</TT></TD>
	</TR>
	<TR ALIGN="LEFT" VALIGN="TOP">
		<TD ALIGN="LEFT"><TT>RptLabel</TT></TD>
		<TD ALIGN="LEFT"><TT>Name</TT></TD>
		<TD ALIGN="LEFT"><TT>Label1</TT></TD>
	</TR>
	<TR ALIGN="LEFT" VALIGN="TOP">
		<TD ALIGN="LEFT"></TD>
		<TD ALIGN="LEFT"><TT>Caption</TT></TD>
		<TD ALIGN="LEFT"><TT>&quot;%p&quot;</TT></TD>
	</TR>
	<TR ALIGN="LEFT" VALIGN="TOP">
		<TD ALIGN="LEFT"><TT>RptLabel</TT></TD>
		<TD ALIGN="LEFT"><TT>Name</TT></TD>
		<TD ALIGN="LEFT"><TT>lbPageTitle</TT></TD>
	</TR>
	<TR ALIGN="LEFT" VALIGN="TOP">
		<TD ALIGN="LEFT"></TD>
		<TD ALIGN="LEFT"><TT>Caption</TT></TD>
		<TD ALIGN="LEFT"><TT>Page</TT></TD>
	</TR>
	<TR ALIGN="LEFT" VALIGN="TOP">
		<TD ALIGN="LEFT"><TT>RptLabel</TT></TD>
		<TD ALIGN="LEFT"><TT>Name</TT></TD>
		<TD ALIGN="LEFT"><TT>lbof</TT></TD>
	</TR>
	<TR ALIGN="LEFT" VALIGN="TOP">
		<TD ALIGN="LEFT"></TD>
		<TD ALIGN="LEFT"><TT>Caption</TT></TD>
		<TD ALIGN="LEFT"><TT>of</TT></TD>
	</TR>
	<TR ALIGN="LEFT" VALIGN="TOP">
		<TD ALIGN="LEFT"><TT>Rptlabel</TT></TD>
		<TD ALIGN="LEFT"><TT>Name</TT></TD>
		<TD ALIGN="LEFT"><TT>Label4</TT></TD>
	</TR>
	<TR ALIGN="LEFT" VALIGN="TOP">
		<TD ALIGN="LEFT"><TT>Caption</TT></TD>
		<TD ALIGN="LEFT"></TD>
		<TD ALIGN="LEFT"><TT>&quot;%P&quot;</TT></TD>
	</TR>
	</TABLE>
</P>

</BLOCKQUOTE>


<DL>
	<DT></DT>
	<DD><B>9. </B>Run the project. Try the various combinations of report output.
	<P>
</DL>

<P><B>How It Works</B></P>
<P>The <TT>Show</TT> method works as it does with a Visual Basic form. It has the
report display to the screen. Before displaying the report to the screen settings
like <TT>StartupPosition</TT> and <TT>WindowState</TT> can be set. The same properties
used to display Visual Basic forms can be used to tailor the placement and position
of the report on the screen when it is displayed.</P>
<P>The <TT>PrintReport</TT> is used to print the report directly to the printer.
Setting the <TT>ShowVariable</TT> of the <TT>PrintReport</TT> determines if the report
will be automatically routed to the printer or if a dialog box will appear to ask
the user the page range and number of copies to be printed. Setting the range determines
the pages that will be printed. If a value for the range is not set, all the pages
will be printed.</P>
<P>The <TT>ExportReport</TT> method is a very powerful function. It can be used to
export reports as text, HTML, or a user-defined HTML format. This method has six
variables to set to control the way the report will be exported to a file.</P>
<P>
<PRE><B><TT>ExportReport(</TT></B><TT>ExportFormat, filename, Overwrite, ShowDialog, Range, PageFrom, PageTo<B>)</B></TT>
</PRE>
<P>The <TT>ExportFormat</TT> variable (<TT>ExportFormats</TT> collection item) is
used to set the type of file that will be exported. This variable is a member of
the <TT>ExportFormats</TT> collection. The <TT>ExportFormats</TT> is a collection
that stores the type of report formats that can be exported. The <TT>ListBox</TT>
was populated with the default items of the <TT>ExportFormats</TT> collection. The
first character of each item in the <TT>ListBox</TT> is the index of that export
type in the <TT>ExportFormats</TT> collection. The <TT>Left$</TT> function is used
to grab the number from the item displayed in the <TT>ListBox</TT>.</P>
<P>The filename variable (a String value) is used to set the name of the file that
will be generated. If a full path (such as C:\data\mynewfile.html) is not defined,
the current working folder will be used.</P>
<P>The overwrite variable (a Boolean value) is set to determine if a file already
exists as defined by the filename variable should be overwritten. If this value is
set to False and a file does exist, then the Export dialog box will appear as if
the <TT>ShowDialog</TT> variable was set to True.</P>
<P>The ShowDialog variable (a Boolean value) determines is the Export File dialog
box is shown. If this value is True then the filename variable does not need to be
set.</P>
<P>The Range variable(s) (a Long value) is set to determine the range of pages that
will be exported.</P>
<P><B>Comments</B></P>
<P>By using Visual Basic code, a programmer can create an application that generates
reports with or without any user intervention. This How-To could be a primer to create
an application that prints large reports at night or generates HTML pages to be displayed
on the Web.</P>
<P>
<H2>9.4 How Do I...</H2>
<H3><A NAME="Have Visual Basic generate ..."></A><B>Have Visual Basic generate a
Microsoft Data Report based on criteria I choose?</B></H3>
<P><B>Problem</B></P>
<P>How do I pass parameters to the query in which my report is based?</P>
<P><B>Technique</B></P>
<P>Using Visual Basic and the Microsoft Data Reports, build an application that passes
a variable as a parameter to a query contained in a Data Environment. The database
used will be the BIBLIO.MDB. The recordset will be based on an SQL statement entered
into the connection.</P>
<P><B>Steps</B></P>
<P>Open and run DataProject.vbp, which displays the screen in Figure 9.13. From this
screen the report can be printed to a printer or exported to a file.</P>
<P>Adding and configuring the Data Environment in this How-To is similar to adding
one in How-To 9.2. In this How-To, the Data Connection uses a SQL statement instead
of retrieving data directly from a table in the BIBLIO database.</P>

<DL>
	<DT></DT>
	<DD><B>1. </B>Start Visual Basic and select a new Data Project. This will add a Form,
	Report, and Data Environment automatically to your project.
	<P>
	<DT></DT>
	<DD><B>2. </B>Double-click the DataEnvironment1 item in the Project Explorer window.
	This causes the Data View window to appear. Right-click on the Connection1 connection
	and select the Properties item from the popup menu. The dialog box in Figure 9.10
	will appear. Select Microsoft Jet 3.51 OLE DB Provider. Click on the Next button
	and select the BIBLIO.MDB database, then click the OK button. The BIBLIO.MDB database
	should be in the same folder as Visual Basic.
	<P>
	<DT></DT>
	<DD><B>3. </B>Right-click on the Command folder in the Data View window and select
	the Add Command item from the popup menu. You will see Command1 appear under the
	Commands folder. Right click on the Command1 command and select Properties from the
	popup menu. Click the SQL Statement radio button and enter the SQL statement found
	in Figure 9.10 and as shown below.
	<P>
</DL>



<BLOCKQUOTE>
	<PRE><TT>SELECT Author, &acute;Year Born&acute; FROM Authors WHERE (&acute;Year Born&acute; = ?)</TT></PRE>

</BLOCKQUOTE>

<PRE><TT></TT></PRE>
<P><A HREF="javascript:popUp('09vdb43.gif')"><B>Figure 9.10.</B></A><B> </B><I>Data
View window displaying SQL Statement.</I></P>

<DL>
	<DT><I></I></DT>
	<DD><B>4. </B>Click on the Parameters tab and set the values of the parameter as
	in Figure 9.11. Then click on the OK button.
	<P>
	<DT></DT>
	<DD>The variable will be assigned to this parameter, and the report will be generated
	based on the selected criteria.
	<P>
	<DT></DT>
	<DD><B>5. </B>Lay out the form as shown in Figure 9.12. Set the properties of the
	objects on the form as in Table 9.12.
	<P>
</DL>

<P><A HREF="javascript:popUp('09vdb44.gif')"><B>Figure 9.11.</B></A><B> </B><I>The
Parameter Tab.</I></P>
<P><A HREF="javascript:popUp('09vdb45.gif')"><B>Figure 9.12.</B></A><B> </B><I>Form
frmDataEnv.frm.</I></P>


<BLOCKQUOTE>
	<H4>Table 9.12. Objects and Properties of the frmDataEnv.frm Form.</H4>
	<P>
	<TABLE BORDER="1">
	<TR ALIGN="LEFT" VALIGN="TOP">
		<TD ALIGN="LEFT"><B><I>OBJECT</I></B></TD>
		<TD ALIGN="LEFT"><B><I>Property</I></B></TD>
		<TD ALIGN="LEFT"><B><I>Setting</I></B></TD>
	</TR>
	<TR ALIGN="LEFT" VALIGN="TOP">
		<TD ALIGN="LEFT">Form</TD>
		<TD ALIGN="LEFT">Name</TD>
		<TD ALIGN="LEFT"><TT>frmDataEnv</TT></TD>
	</TR>
	<TR ALIGN="LEFT" VALIGN="TOP">
		<TD ALIGN="LEFT"></TD>
		<TD ALIGN="LEFT">Caption</TD>
		<TD ALIGN="LEFT"><TT>&quot;What Year ?&quot;</TT></TD>
	</TR>
	<TR ALIGN="LEFT" VALIGN="TOP">
		<TD ALIGN="LEFT">CommandButton</TD>
		<TD ALIGN="LEFT">Name</TD>
		<TD ALIGN="LEFT"><TT>cmdRunReport</TT></TD>
	</TR>
	<TR ALIGN="LEFT" VALIGN="TOP">
		<TD ALIGN="LEFT">Caption</TD>
		<TD ALIGN="LEFT">&quot;Run Report&quot;</TD>
		<TD ALIGN="LEFT"></TD>
	</TR>
	<TR ALIGN="LEFT" VALIGN="TOP">
		<TD ALIGN="LEFT">TextBox</TD>
		<TD ALIGN="LEFT">Name</TD>
		<TD ALIGN="LEFT"><TT>txtYear</TT></TD>
	</TR>
	</TABLE>
</P>

</BLOCKQUOTE>


<DL>
	<DT></DT>
	<DD><B>6. </B>Add the following code in the Click event of the cmdRunReport button.
	<P>
</DL>



<BLOCKQUOTE>
	<PRE><TT>Private Sub cmdRunReport_Click()</TT>
<TT>    If IsNumeric(txtYear.Text) = True Then</TT>
<TT>        DataEnvironment1.Command1 txtYear.Text</TT>
<TT>        DataReport1.Show</TT>
<TT>    Else</TT>
<TT>        MsgBox &quot;Please enter a valid year, YYYY&quot;, 64</TT>
    End If
<TT>End Sub</TT></PRE>

</BLOCKQUOTE>

<PRE><TT></TT></PRE>

<DL>
	<DT><TT></TT></DT>
	<DD>This code passes the variable from the text box to the parameter contained in
	Data Environment. This means the end of messy parsing and building SQL statement
	in code. The Data Environment is built and the parameters are defined, which makes
	passing variables to SQL statements as simple as using methods.
	<P>
</DL>

<P><B>How It Works</B></P>
<P>By having the database connection based on a SQL statement with a parameter, the
Visual Basic application can easily pass a value to the parameter to be used to query
the database. No longer is there a need to create SQL in Visual Basic code on the
fly for passing to a recordset. A database connection can be created, and a value
can be passed cleanly to it, on which the recordset can be based.</P>
<P><B>Comments</B></P>
<P>A major difference between the Data Report designer and Crystal Reports is the
way parameters are passed to the report engine.</P>
<P>Using the Data Reports, all the record selection is done by the Data Connection
of the Data Environment. The report requests the data from the Data Connection, and
it in turn does all the work of retrieving the proper data; the Data Report does
not worry about that at all.</P>
<P>Crystal Reports does this in a completely different manner (as seen in How-To
9.5).</P>
<P>To set the criteria for Crystal Reports formula, follow these steps:</P>

<DL>
	<DT></DT>
	<DD><B>1. </B>A formula must be defined when creating the report with the Crystal
	Reports' designer.
	<P>
	<DT></DT>
	<DD><B>2. </B>A Crystal Reports formula (a string) is set to the Selection Formula
	property of Crystal OLE control.
	<P>
</DL>

<H2>9.5 How do I...</H2>
<H3><A NAME="Determine which records ..."></A><B>Determine which records will be
printed using Crystal Reports?</B></H3>
<P><B>Problem</B></P>
<P>The recordset I need to print changes each time a report is run. How can I let
the application user specify at runtime which records to print?</P>
<P><B>Technique</B></P>
<P>Many of the parameters used to print a Crystal report through a Visual Basic application
can be set using the Crystal Reports custom control. In this How-To, you'll create
a simple report of authors and the computer books they've written. Because our BIBLIO.MDB
file contains several of the authors' birth years, you can write a Visual Basic program
that enables users to set a range of birth years to be printed, set a minimum or
a maximum birth year, or set no limits at all, printing all the authors.</P>
<P><B>Steps</B></P>
<P>Load and run the Visual Basic application Authors.vbp. The form shown in Figure
9.13 appears. Enter a starting or an ending year, or both, and click the Run Report
button to print the report to a preview window. The BIBLIO.MDB contains more than
16,000 authors, so job this might take a little while.</P>
<P><A HREF="javascript:popUp('09fig02.gif')"><B>Figure 9.13.</B></A><B> </B><I>The
Author Birth Range selection form.</I></P>
<P>Start by creating a simple report that can be modified through Visual Basic during
printing. Start the Crystal Reports program.</P>

<DL>
	<DT></DT>
	<DD><B>1. </B>Click the New Report toolbar button or select File|New from the main
	menu. The New Report Gallery appears, as shown in Figure 9.14. Click the &quot;Standard&quot;
	option button.
	<P>
</DL>

<P><A HREF="javascript:popUp('09fig03.gif')"><B>Figure 9.14.</B></A><B> </B><I>The
New Report Gallery.</I></P>

<DL>
	<DT><I></I></DT>
	<DD><B>2. </B>When the Create Report Expert appears, click the Data File button,
	and use the common dialog to select the location of your Biblio.MDB file.
	<P>
	<DT></DT>
	<DD><B>3. </B>Click the Next button to proceed to tab 2: Links. Notice that Crystal
	has automatically created a set of table <I>Smart Links</I> based on fields with
	the same names in different tables (see Figure 9.15) .
	<P>
</DL>

<P><A HREF="javascript:popUp('09fig04.gif')"><B>Figure 9.15.</B></A><B> </B><I>Automatic
table links defined by Crystal Reports.</I></P>

<DL>
	<DT><I></I></DT>
	<DD><B>4. </B>Click the Next button to proceed to tab 3: Fields. Add the fields listed
	in Table 9.13 to your report by double-clicking on the field name or selecting the
	field name and clicking Add.
	<P>
</DL>



<BLOCKQUOTE>
	<H4>Table 9.13. Computer author report tables and fields.</H4>
	<P>
	<TABLE BORDER="1">
	<TR ALIGN="LEFT" VALIGN="TOP">
		<TD ALIGN="LEFT"><B><I>TABLE</I></B></TD>
		<TD ALIGN="LEFT"><B><I>Field</I></B></TD>
	</TR>
	<TR ALIGN="LEFT" VALIGN="TOP">
		<TD ALIGN="LEFT">Authors</TD>
		<TD ALIGN="LEFT"><TT>Author</TT></TD>
	</TR>
	<TR ALIGN="LEFT" VALIGN="TOP">
		<TD ALIGN="LEFT">Authors</TD>
		<TD ALIGN="LEFT"><TT>Year Born</TT></TD>
	</TR>
	<TR ALIGN="LEFT" VALIGN="TOP">
		<TD ALIGN="LEFT">Titles</TD>
		<TD ALIGN="LEFT"><TT>Title</TT></TD>
	</TR>
	<TR ALIGN="LEFT" VALIGN="TOP">
		<TD ALIGN="LEFT">Titles</TD>
		<TD ALIGN="LEFT"><TT>Year Published</TT></TD>
	</TR>
	</TABLE>
</P>

</BLOCKQUOTE>


<DL>
	<DT></DT>
	<DD><B>5. </B>On tab 4: Sort, add the <TT>Authors.Author</TT> field as a grouping
	field, and specify ascending order.
	<P>
	<DT></DT>
	<DD><B>6. </B>On tab 5: Total, remove <TT>Authors.Year</TT> <TT>Born</TT> and <TT>Titles.Year</TT>
	<TT>Published</TT> from the Total Fields box. Add the <TT>Titles.Title</TT> field
	and specify <TT>count</TT> as the function in the pull-down list, as shown in Figure
	9.16. Remove the checkmark next to Add Grand Totals.
	<P>
	<DT></DT>
	<DD><B>7. </B>Ignore tab 6: Select, and proceed to tab 7: Style. Enter the text <TT>A
	Time for Computer Authors</TT> as the report title.
	<P>
	<DT></DT>
	<DD><B>8. </B>Click Preview Sample to view the results. Enter <B><TT>First 500</TT></B>
	for the number of records to view. Experiment with the Report Zoom button (three
	different-sized squares), page navigation (upper-right), and scrollbars. <I>Hint:</I>
	Crystal's button hints float in the status bar on the <I>bottom right</I> of the
	screen.
	<P>
</DL>

<P><A HREF="javascript:popUp('09fig05.gif')"><B>Figure 9.16.</B></A><B> </B><I>Author
report total fields.</I></P>

<DL>
	<DT><I></I></DT>
	<DD><B>9. </B>Click on the Design tab to return to design mode. Your report design
	should look like Figure 9.17. Move the <TT>Year</TT> <TT>Born</TT> data field from
	the Details band to the Group #1 Header band. Delete the <TT>Author</TT> field from
	the Details band.
	<P>
</DL>

<P><A HREF="javascript:popUp('09fig06.gif')"><B>Figure 9.17.</B></A><B> </B><I>Author
report design view.</I></P>

<DL>
	<DT><I></I></DT>
	<DD><B>10. </B>Modify the number formats for <TT>Year Born</TT> and <TT>Year Published</TT>
	by right-clicking each field and choosing Change Formats. The dialog box shown in
	Figure 9.18 appears. Uncheck the Thousands Separator box.
	<P>
</DL>

<P><A HREF="javascript:popUp('09fig07.gif')"><B>Figure 9.18.</B></A><B> </B><I>The
Crystal Format Number dialog box.</I></P>

<DL>
	<DT><I></I></DT>
	<DD><B>11. </B>Save the report as Authors.rpt for use from the Author Birth Range
	form.
	<P>
	<DT></DT>
	<DD><B>12. </B>Create a new Standard EXE Visual Basic project in your work area.
	Save the default form as Authors.frm and the project as Authors.vbp.
	<P>
	<DT></DT>
	<DD><B>13. </B>From the Project Components menu, select Crystal Report Control and
	Microsoft Common Dialog Control 6.0, and click OK.
	<P>
	<DT></DT>
	<DD><B>14. </B>Place controls on the form as shown previously in Figure 9.13, setting
	the properties as shown in Table 9.14. Note that the common dialog and Crystal Report
	controls are invisible at runtime, so place them anywhere that is convenient.
	<P>
</DL>



<BLOCKQUOTE>
	<H4>Table 9.14. Objects and properties for Authors.frm.</H4>
	<P>
	<TABLE BORDER="1">
	<TR ALIGN="LEFT" VALIGN="TOP">
		<TD ALIGN="LEFT"><B><I>OBJECT</I></B></TD>
		<TD ALIGN="LEFT"><B><I>Property</I></B></TD>
		<TD ALIGN="LEFT"><B><I>Setting</I></B></TD>
	</TR>
	<TR ALIGN="LEFT" VALIGN="TOP">
		<TD ALIGN="LEFT"><TT>Form</TT></TD>
		<TD ALIGN="LEFT"><TT>Name</TT></TD>
		<TD ALIGN="LEFT"><TT>frmAuthors</TT></TD>
	</TR>
	<TR ALIGN="LEFT" VALIGN="TOP">
		<TD ALIGN="LEFT"></TD>
		<TD ALIGN="LEFT"><TT>Caption</TT></TD>
		<TD ALIGN="LEFT"><TT>&quot;Author Birth Range&quot;</TT></TD>
	</TR>
	<TR ALIGN="LEFT" VALIGN="TOP">
		<TD ALIGN="LEFT"><TT>TextBox</TT></TD>
		<TD ALIGN="LEFT"><TT>Name</TT></TD>
		<TD ALIGN="LEFT"><TT>txtEnd</TT></TD>
	</TR>
	<TR ALIGN="LEFT" VALIGN="TOP">
		<TD ALIGN="LEFT"><TT>TextBox</TT></TD>
		<TD ALIGN="LEFT"><TT>Name</TT></TD>
		<TD ALIGN="LEFT"><TT>txtStart</TT></TD>
	</TR>
	<TR ALIGN="LEFT" VALIGN="TOP">
		<TD ALIGN="LEFT"><TT>CommandButton</TT></TD>
		<TD ALIGN="LEFT"><TT>Name</TT></TD>
		<TD ALIGN="LEFT"><TT>cmdQuit</TT></TD>
	</TR>
	<TR ALIGN="LEFT" VALIGN="TOP">
		<TD ALIGN="LEFT"></TD>
		<TD ALIGN="LEFT"><TT>Caption</TT></TD>
		<TD ALIGN="LEFT"><TT>&quot;Quit&quot;</TT></TD>
	</TR>
	<TR ALIGN="LEFT" VALIGN="TOP">
		<TD ALIGN="LEFT"><TT>CommandButton</TT></TD>
		<TD ALIGN="LEFT"><TT>Name</TT></TD>
		<TD ALIGN="LEFT"><TT>cmdReport</TT></TD>
	</TR>
	<TR ALIGN="LEFT" VALIGN="TOP">
		<TD ALIGN="LEFT"></TD>
		<TD ALIGN="LEFT"><TT>Caption</TT></TD>
		<TD ALIGN="LEFT"><TT>&quot;Run Report&quot;</TT></TD>
	</TR>
	<TR ALIGN="LEFT" VALIGN="TOP">
		<TD ALIGN="LEFT"><TT>CommonDialog</TT></TD>
		<TD ALIGN="LEFT"><TT>Name</TT></TD>
		<TD ALIGN="LEFT"><TT>cdOpenReport</TT></TD>
	</TR>
	<TR ALIGN="LEFT" VALIGN="TOP">
		<TD ALIGN="LEFT"><TT>CrystalReport</TT></TD>
		<TD ALIGN="LEFT"><TT>Name</TT></TD>
		<TD ALIGN="LEFT"><TT>crptAuthors</TT></TD>
	</TR>
	<TR ALIGN="LEFT" VALIGN="TOP">
		<TD ALIGN="LEFT"><TT>Label</TT></TD>
		<TD ALIGN="LEFT"><TT>Name</TT></TD>
		<TD ALIGN="LEFT"><TT>Label2</TT></TD>
	</TR>
	<TR ALIGN="LEFT" VALIGN="TOP">
		<TD ALIGN="LEFT"></TD>
		<TD ALIGN="LEFT"><TT>Caption</TT></TD>
		<TD ALIGN="LEFT"><TT>&quot;End Year:&quot;</TT></TD>
	</TR>
	<TR ALIGN="LEFT" VALIGN="TOP">
		<TD ALIGN="LEFT"><TT>Label</TT></TD>
		<TD ALIGN="LEFT"><TT>Name</TT></TD>
		<TD ALIGN="LEFT"><TT>Label1</TT></TD>
	</TR>
	<TR ALIGN="LEFT" VALIGN="TOP">
		<TD ALIGN="LEFT"></TD>
		<TD ALIGN="LEFT"><TT>Caption</TT></TD>
		<TD ALIGN="LEFT"><TT>&quot;Start Year:&quot;</TT></TD>
	</TR>
	</TABLE>
</P>

</BLOCKQUOTE>


<DL>
	<DT></DT>
	<DD><B>15. </B>Select the <TT>Crystal Report</TT> control. Invoke the custom property
	pages for the control by clicking the Custom property in the property box and then
	the ellipsis button (...). The Property Pages dialog box shown in Figure 9.19 appears.
	<P>
</DL>

<P><A HREF="javascript:popUp('09fig08.gif')"><B>Figure 9.19.</B></A><B> </B><I><TT>Crystal
Report</TT> control property pages.</I></P>

<DL>
	<DT><I></I></DT>
	<DD><B>16. </B>Be sure that the Crystal Report General properties are set as shown
	in Table 9.15. The ReportFileName text box is left blank because that value will
	be set using the common dialog control.
	<P>
</DL>



<BLOCKQUOTE>
	<H4>Table 9.15. Custom properties.</H4>
	<P>
	<TABLE BORDER="1">
	<TR ALIGN="LEFT" VALIGN="TOP">
		<TD ALIGN="LEFT"><B><I>PROPERTY</I></B></TD>
		<TD ALIGN="LEFT"><B><I>Setting</I></B></TD>
	</TR>
	<TR ALIGN="LEFT" VALIGN="TOP">
		<TD ALIGN="LEFT"><TT>ReportFileName</TT></TD>
		<TD ALIGN="LEFT"><TT>&quot;&quot;</TT></TD>
	</TR>
	<TR ALIGN="LEFT" VALIGN="TOP">
		<TD ALIGN="LEFT"><TT>Destination</TT></TD>
		<TD ALIGN="LEFT"><TT>To Window</TT></TD>
	</TR>
	</TABLE>
</P>

</BLOCKQUOTE>


<DL>
	<DT></DT>
	<DD><B>17. </B>Add the following code to the form's <TT>Load</TT> event procedure.
	This code simply moves the form to the lower-right portion of the screen, out of
	the way of the report window when it appears.
	<P>
</DL>



<BLOCKQUOTE>
	<PRE><TT>Private Sub Form_Load()</TT>
<TT>    `Move the form to the lower-right of screen</TT>
<TT>    Me.Move Screen.Width - 1.1 * Me.Width, _</TT>
<TT>        Screen.Height - 1.25 * Me.Height</TT>
<TT>End Sub</TT></PRE>

</BLOCKQUOTE>

<PRE><TT></TT></PRE>

<DL>
	<DT><TT></TT></DT>
	<DD><B>18. </B>Insert the following code in the <TT>Click</TT> event procedure of
	the <TT>cmdReport</TT> command button. This code performs two main functions: validating
	the data that has been entered in the two text boxes and setting the properties of
	the Crystal Report control.
	<P>
	<DT></DT>
	<DD>Validation is performed for simple errors in the start and end years--checking
	that the start year is before or equal to the end year and that the years are in
	a reasonable range for computer book authors (being conservative: 1850 to the present!).
	<P>
</DL>



<BLOCKQUOTE>
	<PRE><TT>Private Sub cmdReport_Click()</TT>
<TT>    Dim strSelectCritera As String</TT>
<TT>    Dim strDbName As String</TT>
<TT>    Static strSaveDir As String</TT>
<TT>    `Check for errors in the input year boxes</TT>
<TT>    If (Val(txtStart.Text) &gt; Val(txtEnd.Text)) And _</TT>
<TT>Val(txtEnd.Text) Then</TT>
<TT>        MsgBox &quot;Start year must be before End year.&quot;</TT>
<TT>        Exit Sub</TT>
<TT>    End If</TT>
<TT>    If Val(txtStart.Text) And Val(txtStart.Text) &lt; 1850 And _</TT>
<TT>        Val(txtStart.Text) &gt; Year(Now) Then</TT>
<TT>        MsgBox &quot;Please enter a start year in the range 1850 to &quot; &amp; _</TT>
<TT>Year(Now)</TT>
<TT>        Exit Sub</TT>
<TT>    End If</TT>
<TT>    If Val(txtEnd.Text) And Val(txtEnd.Text) &lt; 1850 And _</TT>
<TT>        Val(txtEnd.Text) &gt; Year(Now) Then</TT>
<TT>        MsgBox &quot;Please enter an ending year in the range 1850 to &quot; _</TT>
<TT>&amp; Year(Now)</TT>
<TT>        Exit Sub</TT>
<TT>    End If</TT>
<TT>    `Get the file to print using Common Dialog</TT>
<TT>    cdOpenReport.InitDir = strSaveDir</TT>
<TT>    cdOpenReport.ShowOpen</TT>
<TT>    `Let's be nice and &quot;remember&quot; the directory for the next use</TT>
<TT>    strSaveDir = cdOpenReport.filename</TT>
<TT>    If Len(cdOpenReport.filename) Then</TT>
<TT>        `Adding the data to the control</TT>
<TT>        crptAuthors.Destination = 0 `To Window</TT>
<TT>        crptAuthors.ReportFileName = cdOpenReport.filename</TT>
<TT>        If Len(txtStart.Text) And Len(txtEnd.Text) Then</TT>
<TT>            `Year range entered</TT>
<TT>            strSelectCritera = &quot;{Authors.Year Born} in &quot; &amp; _</TT>
<TT>                txtStart.Text &amp; &quot; to &quot; &amp; txtEnd.Text</TT>
<TT>        ElseIf Len(txtStart.Text) And Len(txtEnd.Text) = 0 Then</TT>
<TT>            `Only starting year selected</TT>
<TT>            strSelectCritera = &quot;{Authors.Year Born} &gt;= &quot; &amp; _</TT>
<TT>                txtStart.Text</TT>
<TT>        ElseIf Len(txtStart.Text) = 0 And Len(txtEnd.Text) Then</TT>
<TT>            strSelectCritera = &quot;{Authors.Year Born} &lt;= &quot; &amp; _</TT>
<TT>                txtEnd.Text</TT>
<TT>        Else</TT>
<TT>            `Both boxes are emtpy; don't limit range</TT>
<TT>            strSelectCritera = &quot;&quot;</TT>
<TT>        End If</TT>
<TT>        crptAuthors.SelectionFormula = strSelectCritera</TT>
<TT>        ` Get the Biblio.mdb database location</TT>
<TT>        strDbName = strBiblioDb()</TT>
<TT>        ` Assign the data file location for the report</TT>
<TT>        crptAuthors.DataFiles(0) = strDbName</TT>
<TT>`Run the report</TT>
<TT>        crptAuthors.Action = 1</TT>
<TT>    Else</TT>
<TT>        `User pressed Cancel in Common Dialog</TT>
<TT>        MsgBox &quot;No report file selected.&quot;</TT>
<TT>    End If</TT>
<TT>End Sub</TT></PRE>

</BLOCKQUOTE>

<PRE><TT></TT></PRE>

<DL>
	<DT><TT></TT></DT>
	<DD>After activating a common dialog Open File window to get the name of the report
	to use (select AUTHORS.RPT), the program sets several properties of the Crystal Report
	control: <TT>Destination</TT>, <TT>ReportFileName</TT>, and <TT>SelectionFormula</TT>.
	Remember that you set a few properties in the control as well. The program checks
	to see that a combination of start and end were selected (all records will print
	if nothing was entered) and creates the selection string used to set the <TT>SelectionFormula</TT>
	property. Finally, the report is printed by setting the Crystal Report control's
	<TT>Action</TT> property to <TT>1</TT>.
	<P>
	<DT></DT>
	<DD><B>19. </B>Add the following code to the <TT>Click</TT> event of the <TT>cmdQuit</TT>
	command button, to provide an exit point from the program:
	<P>
</DL>



<BLOCKQUOTE>
	<PRE><TT>Private Sub cmdQuit_Click()</TT>
<TT>    Unload Me</TT>
<TT>End Sub</TT></PRE>

</BLOCKQUOTE>

<PRE><TT></TT></PRE>
<P><B>How It Works</B></P>
<P>All the actions of the Crystal Reports control are controlled by the way various
properties are set. A number of properties can specify exactly how the report is
printed, as listed in Table 9.15 at the end of the chapter. There are additional
properties, but those listed in the table are the most useful in controlling the
print behavior of the report.</P>
<P>Setting the <TT>Action</TT> property of the control to <TT>1</TT> causes the report
to print. The Crystal Reports control uses this property as a pseudo-control method.
It is very important to note that printing the report does not tie up the program
at the point where the <TT>Action</TT> property is set to <TT>1</TT>. In most cases,
after the report writer has begun, the Visual Basic program continues executing,
so you can't perform any actions that are dependent on the completion of the report.
On the other hand, your program can continue executing and performing other tasks
while the report prints.</P>
<P><B>Crystal Reports Formula Formats</B></P>
<P>For the control properties that require formulas, such as <TT>SelectionFormula</TT>
and <TT>GroupSelectionFormula</TT>, the formulas specified must be in the Crystal
Reports format, which is quite different from the format of a Visual Basic statement.
The formula itself is used to set the property as a Visual Basic string, so any literal
strings needed in the formula must be enclosed in single quotation marks. In the
case of the <TT>Sub</TT> procedure, <TT>cmdReport_Click,</TT> in this How-To, this
formula is used when both a starting year and an ending year are specified:</P>


<BLOCKQUOTE>
	<PRE><TT>&quot;{Authors.Year Born} in &quot; &amp; txtStart.Text &amp; &quot; to &quot; &amp; txtEnd.Text</TT></PRE>

</BLOCKQUOTE>

<PRE><TT></TT></PRE>
<P>If the start year is 1940 and the end year is 1950, the actual formula sent to
Crystal Reports is this:</P>


<BLOCKQUOTE>
	<PRE><TT>&quot;{Authors.Year Born} in 1940 to 1950&quot;</TT></PRE>

</BLOCKQUOTE>

<PRE><TT></TT></PRE>
<P>The following example shows how a string in the Visual Basic variable <TT>stateName</TT>
would be coded:</P>


<BLOCKQUOTE>
	<PRE><TT>&quot;{Market.State} = `&quot; &amp; stateName &amp; &quot;`&quot;</TT></PRE>

</BLOCKQUOTE>

<PRE><TT></TT></PRE>
<P>Note the inclusion of the single quotation marks, because the string literal must
be enclosed by single quotation marks. If California is the contents of the <TT>stateName</TT>
variable, Crystal Reports receives this statement as this:</P>


<BLOCKQUOTE>
	<PRE><TT>&quot;{Market.State} = `California'&quot;</TT></PRE>

</BLOCKQUOTE>

<PRE><TT></TT></PRE>
<P>It is very important to avoid extraneous spaces in the string sent to the report.
If the preceding Visual Basic string were instead set to</P>


<BLOCKQUOTE>
	<PRE><TT>&quot;{Market.State} = ` &quot; &amp; stateName &amp; &quot; `&quot;</TT></PRE>

</BLOCKQUOTE>

<PRE><TT></TT></PRE>
<P>the following formula would be sent to the report:</P>


<BLOCKQUOTE>
	<PRE><TT>&quot;{Market.State} = ` California `&quot;</TT></PRE>

</BLOCKQUOTE>

<PRE><TT></TT></PRE>
<P>As a result, only records with a leading space before &quot;California&quot; would
print in the report, because of the extra space at the beginning of the criteria
string.</P>
<P>More information about Crystal Reports formula formats can be found in the documentation
for Crystal Reports.</P>
<P><B>Comments</B></P>
<P>Crystal Reports selects records differently than Microsoft Data Reports. With
Crystal Reports, a String is created and assigned to the SelectionFormula properties
of the Crystal Reports OLE control. If you are creating a formula to pass to the
SelectionFormula property, all the error-checking must be done by the programmer.
If the string is not valid, then Crystal Reports will generate a runtime error but
will not tell you what part of the string is incorrect.</P>
<P>
<H2>9.6 How do I...</H2>
<H3><A NAME="Create subtotals ..."></A><B>Create subtotals and other calculated fields
using Crystal Reports?</B></H3>
<P><B>Problem</B></P>
<P>How do I make Crystal Reports calculate subtotals and make other calculations
that I need? All of my data is in an Access .MDB file, but several of the fields
I need aren't data fields at all, but are calculated from the fields in the file.</P>
<P><B>Technique</B></P>
<P>Crystal Reports supports a rich set of calculation tools and functions that enable
you to make almost any type of calculation on database field data. It usually takes
some work to get everything working properly, but when you are finished, you will
have a powerful tool that can be used repeatedly.</P>
<P>In this How-To, you'll use those tools to create a bulk mail report, which can
be used as the basis for completing the post office paperwork for bulk mailings.
Getting the figures needed for the postage calculation involves sorting the zip codes,
counting them in various groups, and checking to see which groups meet the minimum
quantity requirements for the lowest postage rates.</P>
<P><B>Bulk Mailing Basics</B></P>
<P>This chapter won't be a primer on bulk mailing (the rules change constantly anyway),
but here are a few basics so that the report created in this How-To will be clearer.
The premise of the bulk mailing system is that if you are willing to do some of the
work for the post office, you should get a break on postage. The breaks are attractive
enough that a whole mailing industry has arisen around preparing mailings to qualify
for those breaks.</P>
<P>This How-To uses a subset of all the different bulk mail categories. The categories
you'll design into the report are five-digit presort, three-digit presort, state
presort, and first class (the &quot;catch-all&quot; category). When you sort bulk
mail, follow these steps:</P>

<DL>
	<DT></DT>
	<DD><B>1. </B>Sort all the mailing pieces into groups that have 10 or more pieces
	going to the same first five digits of the zip code. Bundle those by the five-digit
	zip code, count them, and multiply the total by .191, the lowest postage cost of
	the categories used here. This gives you the total cost of that category of mail.
	<P>
	<DT></DT>
	<DD><B>2. </B>From the remaining pieces of mail (those that don't have at least 10
	pieces per five-digit zip code), sort and extract the pieces that have at least 10
	pieces going to the same first three digits of the zip code. Bundle those groups,
	multiply the postage by .191, and set them aside.
	<P>
	<DT></DT>
	<DD><B>3. </B>Again from the remaining pieces, select and sort all the pieces that
	have at least 10 pieces going to the same state. Bundle, calculate the postage using
	.238 per piece, and set the pieces aside.
	<P>
	<DT></DT>
	<DD><B>4. </B>Finally, gather all the remaining pieces and place first-class stamps
	on them. They can go with the mailing, but you aren't saving any money on them.
	<P>
</DL>

<P>Before you start planning to pay your bills using bulk mail, you must have several
hundred pieces mailed at the same time, and the same item must be mailed to every
address. You can't even include a note in that letter, unless you include the same
note to all the other people.</P>
<P>There is actually another category after the state level for multi-state pieces,
but each additional layer complicates things at an increasing rate. So, to avoid
having an entire book about a single Crystal report for bulk mailing, this How-To
is limited to these categories.</P>
<P><B>Steps</B></P>
<P>The steps in this How-To show in detail how to create a bulk mail report that
calculates postage and sorting order. On completion, the report, which will look
as shown in Figure 9.20, will show two windows: one showing the report header and
the other showing the report footer.</P>
<P>To open and run a report in Crystal Reports, select File|Open from the Crystal
main menu, and select the BULKMAIL.RPT report. To print the report, click the Print
button on the toolbar, or select File|Print from the main menu. To preview the report
onscreen, click the Print Preview button on the toolbar, or select File|Print Preview
from the Crystal Reports main menu. The general design details are shown in the various
tables throughout this How-To. You'll go through the individual steps needed to create
the bulk mail report. Figure 9.21 shows the main report elements in the Crystal Reports
design window.</P>

<DL>
	<DT></DT>
	<DD><B>1. </B>This How-To uses the MAIL.MDB database described in the introduction
	to this chapter. Start Crystal Reports, and start a new report by clicking the New
	Report toolbar button or selecting File|New from the main menu. Click on Standard
	when the Create New Report Gallery appears.
	<P>
	<DT></DT>
	<DD><B>2. </B>Click on Data File when the Create Report Expert appears. Use the dialog
	box to find the MAIL.MDB Access database file. Click Done to close the dialog box.
	<P>
	<DT></DT>
	<DD><B>3. </B>From the Fields tab, add the <TT>Contact</TT>, <TT>City</TT>, <TT>State</TT>,
	and <TT>Zip</TT> fields from the <TT>MailingList</TT> table.
	<P>
	<DT></DT>
	<DD><B>4. </B>On the Style tab, enter <B><TT>Bulk Mail Calculation Report</TT></B>
	as the title.
	<P>
</DL>

<P><A HREF="09fig09a.gif" tppabs="http://pbs.mcp.com/ebooks/1571691529/ch09/09fig09a.gif"><B>Figure 9.20.</B></A><B> </B><I>Print preview of bulk
mail report.</I></P>
<P><A HREF="javascript:popUp('09fig09b.gif')"><B>Figure 9.20.</B></A></P>
<P><A HREF="javascript:popUp('09fig10.gif')"><B>Figure 9.21.</B></A><B> </B><I>Crystal
Reports design window for bulk mail reports.</I></P>

<DL>
	<DT><I></I></DT>
	<DD><B>5. </B>Insert a formula field by either clicking the Insert Formula toolbar
	button or selecting Insert formula Field from the main menu. Name the formula <B><TT>@Zip5Increment</TT></B>.
	Be sure to leave off the <TT>@</TT> when typing the name. Enter the following code
	in the Edit Formula window:
	<P>
</DL>



<BLOCKQUOTE>
	<PRE><TT>WhilePrintingRecords;</TT>
<TT>NumberVar Zip5Count;</TT>
<TT>Zip5Count := Zip5Count + 1;</TT></PRE>

</BLOCKQUOTE>

<PRE><TT></TT></PRE>

<DL>
	<DT><TT></TT></DT>
	<DD>The Edit Formula window should look like Figure 9.22 when you have entered the
	<TT>@Zip5Increment</TT> formula text. Click the Check button to have Crystal Reports
	evaluate the formula and check for errors. Click Accept when you're finished. After
	the Edit Formula window closes, your cursor is dragging a dotted box around the design
	window. Move your cursor to the Page Footer section of the screen, and click your
	left mouse button. This click &quot;drops&quot; the new field onto the report page.
	Don't worry about the exact location because we will hide the field later.
	<P>
</DL>

<P><A HREF="javascript:popUp('09fig11.gif')"><B>Figure 9.22.</B></A><B> </B><I>The
<TT>Zip5Increment</TT> formula entry.</I></P>

<DL>
	<DT><I></I></DT>
	<DD><B>6. </B>In the same way, enter the <TT>@TotalCountIncrement</TT> formula:
	<P>
</DL>



<BLOCKQUOTE>
	<PRE><TT>WhilePrintingRecords;</TT>
<TT>NumberVar Zip5Count;</TT>
<TT>Zip5Count := Zip5Count + 1;</TT></PRE>

</BLOCKQUOTE>

<PRE><TT></TT></PRE>

<DL>
	<DT><TT></TT></DT>
	<DD><B>7. </B>Format the newly added fields by right-clicking each one and choosing
	Change Format from the popup menu. Check the Hide when printing box. (Notice the
	other format choices available, and try to keep the formatting options in mind when
	you develop your reports.)
	<P>
	<DT></DT>
	<DD><B>8. </B>Shorten each of the fields and headers by approximately one-half inch,
	and move all the fields to the right side of the page. Click on the Contact header,
	and then Ctrl-click on the contact field. Click over one of the black &quot;ears&quot;
	on the one Contact header, and shorten the field. You can also select multiple fields
	by choosing Edit|Select Fields from the main menu or by clicking the Select Fields
	toolbar button. After you make all the detail fields smaller, place them toward the
	right side of the detail line to leave room for section headers on the left side
	of the page.
	<P>
	<DT></DT>
	<DD><B>9. </B>Add a section to the report to group information by state. Select Insert|Group
	Section from the Crystal Reports main menu. From the first list box, select <TT>Mailing
	List.STATE</TT>. Note that the outermost group sections must be entered first, because
	subsequent sections will be inserted within the preceding innermost section. Make
	sure that the sorting field is set to ascending order, which is the default. Click
	OK to create the report section.
	<P>
	<DT></DT>
	<DD><B>10. </B>Insert the <TT>STATE</TT> field in the #1 State group by using Insert|Database
	Field from the main menu or the Insert Database Field toolbar button.
	<P>
	<DT></DT>
	<DD><B>11. </B>Insert the formula <TT>@StatePrint</TT>, which prints the total number
	of state addresses if they number at least 10. Place the field to the far right in
	the #1 State group footer band.
	<P>
</DL>



<BLOCKQUOTE>
	<PRE><TT>WhilePrintingRecords;</TT>
<TT>NumberVar StateCount;</TT>
<TT>NumberVar StateTotalCount;</TT>
<TT>NumberVar StateCost;</TT>
<TT>NumberVar StateUnitCost;</TT>
<TT>NumberVar FirstClassCount;</TT>
<TT>NumberVar FirstClassCost;</TT>
<TT>if StateCount &gt;= 10 then</TT>
<TT>    StateCost := StateCost + (StateCount * StateUnitCost)</TT>
<TT>else</TT>
<TT>    FirstClassCount := FirstClassCount + StateCount;</TT>
<TT>if StateCount &gt;= 10 then</TT>
<TT>    StateTotalCount := StateTotalCount + StateCount;</TT>
<TT>if StateCount &gt;= 10 then</TT>
<TT>    StateCount;</TT></PRE>

</BLOCKQUOTE>

<PRE><TT></TT></PRE>

<DL>
	<DT><TT></TT></DT>
	<DD><B>12. </B>Insert <TT>@StateTotalLine</TT>, which prints a text prompt for the
	total number of state addresses. Place the field just to the left of the <TT>StatePrint</TT>
	formula field.
	<P>
</DL>



<BLOCKQUOTE>
	<PRE><TT>WhilePrintingRecords;</TT>
<TT>NumberVar StateCount;</TT>
<TT>if StateCount &gt;= 10 then</TT>
<TT>    &quot;Total Count for &quot; + {Mailing List.STATE} + &quot;: &quot;</TT>
<TT>else</TT>
<TT>    &quot;&quot;</TT></PRE>

</BLOCKQUOTE>

<PRE><TT></TT></PRE>

<DL>
	<DT><TT></TT></DT>
	<DD><B>13. </B>Insert the formula <TT>@StateReset</TT>, which resets the <TT>State</TT>
	count to zero. The field will be hidden, so place the field anywhere in the #1 State
	group header band, make it a small width, and hide it by changing its format. It
	is usually convenient to place hidden fields to the far right. This formula is placed
	in the header area to ensure that the <TT>StateCount</TT> variable is reset to zero
	at the beginning of every state. The <TT>WhilePrintingRecords</TT> statement ensures
	that the Crystal Reports will calculate this formula during printing and not before
	reading records.
	<P>
</DL>



<BLOCKQUOTE>
	<PRE><TT>WhilePrintingRecords;</TT>
<TT>NumberVar StateCount;</TT>
<TT>StateCount := 0;</TT></PRE>

</BLOCKQUOTE>

<PRE><TT></TT></PRE>

<DL>
	<DT><TT></TT></DT>
	<DD><B>14. </B>Format the <TT>@StateReset</TT> field to hide it while printing. Format
	the <TT>@StatePrint</TT> field to have zero decimal places. Check the Suppress if
	Zero box. The Format Number dialog box should look like Figure 9.23.
	<P>
</DL>

<P><A HREF="javascript:popUp('09fig12.gif')"><B>Figure 9.23.</B></A><B> </B><I>Formatting
for zero decimal places.</I></P>

<DL>
	<DT><I></I></DT>
	<DD><B>15. </B>Insert the formula field <TT>@Zip_3</TT>, which takes the first three
	digits of the zip code. For the moment, place the field on the report somewhere that
	is convenient. You'll move it in a moment, after creating the next group section.
	<P>
</DL>



<BLOCKQUOTE>
	<PRE><TT>{Mailing List.ZIP}[1 to 3]</TT></PRE>

</BLOCKQUOTE>

<PRE><TT></TT></PRE>

<DL>
	<DT><TT></TT></DT>
	<DD><B>16. </B>Add the three-digit Zip group section. Select Insert|Group Section
	from the Crystal Reports main menu. From the first list box, select the formula <TT>@Zip_3</TT>.
	Make sure that the sorting field is set to ascending order, which is the default.
	<P>
	<DT></DT>
	<DD><B>17. </B>Move the <TT>@Zip_3</TT> formula field to the far left of the #2 @Zip_3
	group header band.
	<P>
	<DT></DT>
	<DD><B>18. </B>Insert the formula <TT>@Zip3Print</TT>, which prints the total number
	of three-digit zip code addresses if there are at least 10. Place the field to the
	far right of the #2 @Zip_3 group footer band.
	<P>
</DL>



<BLOCKQUOTE>
	<PRE><TT>WhilePrintingRecords;</TT>
<TT>NumberVar Zip3Count;</TT>
<TT>NumberVar Zip3TotalCount;</TT>
<TT>NumberVar Zip3Cost;</TT>
<TT>NumberVar Zip3UnitCost;</TT>
<TT>NumberVar StateCount;</TT>
<TT>if Zip3Count &gt;= 10 then</TT>
<TT>    Zip3Cost := Zip3Cost + (Zip3Count * Zip3UnitCost)</TT>
<TT>else</TT>
<TT>    StateCount := StateCount + Zip3Count;</TT>
<TT>if Zip3Count &gt;= 10 then</TT>
<TT>    Zip3TotalCount := Zip3TotalCount + Zip3Count;</TT>
<TT>if Zip3Count &gt;= 10 then</TT>
<TT>    Zip3Count;</TT></PRE>

</BLOCKQUOTE>

<PRE><TT></TT></PRE>

<DL>
	<DT><TT></TT></DT>
	<DD><B>19. </B>Insert the formula <TT>@Zip3TotalLine</TT>, which prints the text
	for the total number of three-digit zip addresses.
	<P>
</DL>



<BLOCKQUOTE>
	<PRE><TT>WhilePrintingRecords;</TT>
<TT>NumberVar Zip3Count;</TT>
<TT>if Zip3Count &gt;= 10 then</TT>
<TT>    &quot;Total Count for &quot; + {Mailing LIst.ZIP}[1 to 3] + &quot;: &quot;</TT>
<TT>else</TT>
<TT>    &quot;&quot;</TT></PRE>

</BLOCKQUOTE>

<PRE><TT></TT></PRE>

<DL>
	<DT><TT></TT></DT>
	<DD><B>20. </B>Insert the formula field <TT>@Zip3Reset</TT>, which resets the three-digit
	<TT>Zip</TT> count to zero. The field will be hidden, so place the field anywhere
	in the #2 @Zip_3 group section header band, and make it a minimum width. Placing
	hidden fields out of the way to the far right is usually most convenient.
	<P>
</DL>



<BLOCKQUOTE>
	<PRE><TT>WhilePrintingRecords;</TT>
<TT>NumberVar Zip3Count;</TT>
<TT>Zip3Count := 0;</TT></PRE>

</BLOCKQUOTE>

<PRE><TT></TT></PRE>

<DL>
	<DT><TT></TT></DT>
	<DD><B>21. </B>Format the <TT>@Zip3Reset</TT> field to hide it while printing. Format
	the <TT>@Zip3Print</TT> field to have zero decimal places and to suppress if zero.
	<P>
	<DT></DT>
	<DD><B>22. </B>Insert the formula field <TT>@Zip_5</TT>, which takes the first five
	digits of the zip code. For the moment, place the field somewhere that is convenient
	on the report. You'll move it in a moment, after creating the next group section.
	<P>
</DL>



<BLOCKQUOTE>
	<PRE><TT>{Mailing List.ZIP}[1 to 5]</TT></PRE>

</BLOCKQUOTE>

<PRE><TT></TT></PRE>

<DL>
	<DT><TT></TT></DT>
	<DD><B>23. </B>Now add the five-digit Zip group section. Select Insert|Group Section
	from the Crystal Reports main menu. From the first list box, select the formula <TT>@Zip_5</TT>.
	Make sure that the sorting field is set to ascending order, which is the default.
	<P>
	<DT></DT>
	<DD><B>24. </B>Move the <TT>@Zip_5</TT> formula field to the far left of the #3 @Zip_5
	group section header band.
	<P>
	<DT></DT>
	<DD><B>25. </B>Insert the formula <TT>@Zip5Print</TT>, which prints the total number
	of five-digit zip code addresses if there are at least 10. Place the field to the
	far right of the #3 @Zip_5 group section footer band.
	<P>
</DL>



<BLOCKQUOTE>
	<PRE><TT>WhilePrintingRecords;</TT>
<TT>NumberVar Zip5Count;</TT>
<TT>NumberVar Zip5TotalCount;</TT>
<TT>NumberVar Zip3Count;</TT>
<TT>NumberVar Zip5Cost;</TT>
<TT>NumberVar Zip5UnitCost;</TT>
<TT>if Zip5Count &gt;= 10 then</TT>
    Zip5Cost := Zip5Cost + (Zip5Count * Zip5UnitCost)
<TT>else</TT>
<TT>    Zip3Count := Zip3Count + Zip5Count;</TT>
<TT>if Zip5Count &gt;= 10 then</TT>
<TT>    Zip5TotalCount := Zip5TotalCount + Zip5Count;</TT>
<TT>if Zip5Count &gt;= 10 then</TT>
<TT>    Zip5Count;</TT></PRE>

</BLOCKQUOTE>

<PRE><TT></TT></PRE>

<DL>
	<DT><TT></TT></DT>
	<DD><B>26. </B>Insert the formula <TT>@Zip5TotalLine</TT>, which prints the text
	for the total number of five-digit zip addresses.
	<P>
</DL>



<BLOCKQUOTE>
	<PRE><TT>WhilePrintingRecords;</TT>
<TT>NumberVar Zip5Count;</TT>
<TT>if Zip5Count &gt;= 10 then</TT>
<TT>    &quot;Total Zip (5) Count for &quot; + {Mailing LIst.ZIP}[1 to 5] + &quot;: &quot;</TT>
<TT>else</TT>
<TT>    &quot;&quot;</TT></PRE>

</BLOCKQUOTE>

<PRE><TT></TT></PRE>

<DL>
	<DT><TT></TT></DT>
	<DD><B>27. </B>Insert the formula field <TT>@Zip5Reset</TT>, which resets the five-digit
	<TT>Zip</TT> count to zero. The field will be hidden, so place the field anywhere
	in the #3 @Zip_5 group section header band, and make it a minimum width. Placing
	hidden fields to the far right is usually convenient.
	<P>
</DL>



<BLOCKQUOTE>
	<PRE><TT>WhilePrintingRecords;</TT>
<TT>NumberVar Zip5Count;</TT>
<TT>Zip5Count := 0;</TT></PRE>

</BLOCKQUOTE>

<PRE><TT></TT></PRE>

<DL>
	<DT><TT></TT></DT>
	<DD><B>28. </B>Format the <TT>@Zip5Reset</TT> field to hide it while printing. Format
	the <TT>@Zip5Print</TT> field to have zero decimal places and to suppress printing
	if zero.
	<P>
	<DT></DT>
	<DD><B>29. </B>Set the sorting order of the fields in the report by selecting Report
	Sort Records from the Crystal Reports main menu. The three group sections should
	already appear in the right Sort Fields list, because by default the order of group
	sections in the report are sorted by the group field. Add the zip code field by selecting
	that field in the Report Fields list on the left, and either double-click on that
	field or click the Add button. Make sure that the order setting is set to ascending,
	which is the default. The Record sort Order window should now appear as shown in
	Figure 9.24.
	<P>
</DL>

<P><A HREF="javascript:popUp('09fig13.gif')"><B>Figure 9.24.</B></A><B> </B><I>Setting
the record sort order.</I></P>

<DL>
	<DT><I></I></DT>
	<DD><B>30. </B>Insert the formula field <TT>@TotalCountReset</TT>, which sets the
	total count to zero at the beginning of the report. The field will be hidden, so
	place the field anywhere in the page header band, and make it a small width. Placing
	hidden fields to the far right is usually convenient. For convenience, this field
	also sets the postage amounts for the different classes of mail.
	<P>
</DL>



<BLOCKQUOTE>
	<PRE><TT>WhilePrintingRecords;</TT>
<TT>NumberVar Zip5UnitCost;</TT>
<TT>NumberVar Zip3UnitCost;</TT>
<TT>NumberVar StateUnitCost;</TT>
<TT>NumberVar FirstClassUnitCost;</TT>
<TT>Zip5UnitCost := .191;</TT>
<TT>Zip3UnitCost := .191;</TT>
<TT>StateUnitCost := .256;</TT>
<TT>FirstClassUnitCost := .320;</TT></PRE>

</BLOCKQUOTE>

<PRE><TT></TT></PRE>

<DL>
	<DT><TT></TT></DT>
	<DD><B>31. </B>Next, add the fields to the page footer. This is where you'll place
	the various counts and total postage for the different classes of mail. Start by
	adding the <TT>@FirstClassPrint</TT> formula field, which is the total count of the
	&quot;miscellaneous&quot; category of mail. Place the field in the top line of the
	page footer section, as far right as possible.
	<P>
</DL>



<BLOCKQUOTE>
	<PRE><TT>WhilePrintingRecords;</TT>
<TT>NumberVar FirstClassCount;</TT>
<TT>NumberVar FirstClassCost;</TT>
<TT>NumberVar FirstClassUnitCost;</TT>
<TT>FirstClassCost := FirstClassCount * FirstClassUnitCost;</TT>
<TT>FirstClassCount;</TT></PRE>

</BLOCKQUOTE>

<PRE><TT></TT></PRE>

<DL>
	<DT><TT></TT></DT>
	<DD><B>32. </B>Add the <TT>@FirstClassTotalLine</TT>, which is the heading for the
	total count of the &quot;miscellaneous&quot; category of mail. Place the field in
	the top line of the page footer section, just to the left of the <TT>@FirstClassPrint</TT>
	field.
	<P>
</DL>



<BLOCKQUOTE>
	<PRE><TT>WhilePrintingRecords;</TT>
<TT>NumberVar FirstClassCount;</TT>
<TT>&quot;Total First Class Count: &quot;;</TT></PRE>

</BLOCKQUOTE>

<PRE><TT></TT></PRE>

<DL>
	<DT><TT></TT></DT>
	<DD><B>33. </B>Now add the various running and final total formula fields. Add the
	<TT>@Zip3CostPrint</TT> formula field, which is the total count label of the three-digit
	zip category of mail. Place the field in the top line of the page footer section,
	at the far left.
	<P>
</DL>



<BLOCKQUOTE>
	<P>
	<PRE><TT>WhilePrintingRecords;</TT>
<TT>&quot;Zip (3) Totals:&quot;</TT></PRE>

</BLOCKQUOTE>

<PRE><TT></TT></PRE>

<DL>
	<DT><TT></TT></DT>
	<DD><B>34. </B>Add the <TT>@Zip3Count</TT> formula field. This is the running count
	of the number of pieces of mail that qualify for three-digit zip bulk rates. Add
	the field just to the right of the <TT>@Zip3CostPrint</TT> field. Format the field
	to have zero decimal places.
	<P>
</DL>



<BLOCKQUOTE>
	<PRE><TT>WhilePrintingRecords;</TT>
<TT>NumberVar Zip3TotalCount;</TT>
<TT>Zip3TotalCount;</TT></PRE>

</BLOCKQUOTE>

<PRE><TT></TT></PRE>

<DL>
	<DT><TT></TT></DT>
	<DD><B>35. </B>Add the <TT>@Zip3TotalCost</TT> formula field. This field prints the
	running cost of the three-digit zip mail. Add the field just to the right of the
	<TT>@Zip3Count</TT> field. The cost of each category is calculated as you go, so
	all you need to do here is print the total. Format the field to have a currency symbol
	by checking the Currency Symbol checkbox in the Format Number dialog box, shown previously
	in Figure 9.23.
	<P>
</DL>



<BLOCKQUOTE>
	<PRE><TT>WhilePrintingRecords;</TT>
<TT>NumberVar Zip3Cost;</TT>
<TT>Zip3Cost;</TT></PRE>

</BLOCKQUOTE>

<PRE><TT></TT></PRE>

<DL>
	<DT><TT></TT></DT>
	<DD><B>36. </B>Add the <TT>@Zip5CostPrint</TT> formula field, which is the total
	count label of the five-digit zip category of mail. Place the field in the second
	line of the page footer section, to the far left.
	<P>
</DL>



<BLOCKQUOTE>
	<PRE><TT>WhilePrintingRecords;</TT>
<TT>NumberVar Zip5Cost;</TT>
<TT>&quot;Zip (5) Totals:&quot;;</TT></PRE>

</BLOCKQUOTE>

<PRE><TT></TT></PRE>

<DL>
	<DT><TT></TT></DT>
	<DD><B>37. </B>Add the <TT>@Zip5Count</TT> formula field. This is the running count
	of the number of pieces of mail that qualify for five-digit zip bulk rates. Add the
	field just to the right of the <TT>@Zip5CostPrint</TT> field. Format the field to
	have zero decimal places.
	<P>
</DL>



<BLOCKQUOTE>
	<PRE><TT>WhilePrintingRecords;</TT>
<TT>NumberVar Zip5TotalCount;</TT>
<TT>Zip5TotalCount;</TT></PRE>

</BLOCKQUOTE>

<PRE><TT></TT></PRE>

<DL>
	<DT><TT></TT></DT>
	<DD><B>38. </B>Add the <TT>@Zip5TotalCost</TT> formula field. This field prints the
	running cost of the five-digit zip mail. Add the field just to the right of the <TT>@Zip5Count</TT>
	field. The cost of each category is calculated as the mail is processed, so only
	the total is printed here. Format the field to have a currency symbol by checking
	the Currency Symbol checkbox in the Format Number dialog box.
	<P>
</DL>



<BLOCKQUOTE>
	<PRE><TT>WhilePrintingRecords;</TT>
<TT>NumberVar Zip5Cost;</TT>
<TT>Zip5Cost;</TT></PRE>

</BLOCKQUOTE>

<PRE><TT></TT></PRE>

<DL>
	<DT><TT></TT></DT>
	<DD><B>39. </B>Add the <TT>@StateCostPrint</TT> formula field, which is the total
	count label of the state category of mail. Place the field in the third line of the
	page footer section, to the far left.
	<P>
</DL>



<BLOCKQUOTE>
	<PRE><TT>WhilePrintingRecords;</TT>
<TT>&quot;State Totals:&quot;;</TT></PRE>

</BLOCKQUOTE>

<PRE><TT></TT></PRE>

<DL>
	<DT><TT></TT></DT>
	<DD><B>40. </B>Add the <TT>@StateCount</TT> formula field. This is the running count
	of the number of pieces of mail that qualify for state bulk rates. Add the field
	just to the right of the <TT>@StateCostPrint</TT> field. Format the field to have
	zero decimal places.
	<P>
</DL>



<BLOCKQUOTE>
	<PRE><TT>WhilePrintingRecords;</TT>
<TT>NumberVar StateTotalCount;</TT>
<TT>StateTotalCount;</TT></PRE>

</BLOCKQUOTE>

<PRE><TT></TT></PRE>

<DL>
	<DT><TT></TT></DT>
	<DD><B>41. </B>Add the <TT>@StateTotalCost</TT> formula field. This field prints
	the running cost of the state mail. Add the field just to the right of the <TT>@StateCount</TT>
	field. The cost of each category is calculated as the mail is processed, so only
	the total is printed here. Format the field to have a currency symbol by checking
	the Currency Symbol checkbox in the Format Number dialog box.
	<P>
</DL>



<BLOCKQUOTE>
	<PRE><TT>WhilePrintingRecords;</TT>
<TT>NumberVar StateCost;</TT>
<TT>StateCost;</TT></PRE>

</BLOCKQUOTE>

<PRE><TT></TT></PRE>

<DL>
	<DT><TT></TT></DT>
	<DD><B>42. </B>Add the <TT>@FirstClassCostPrint</TT> formula field, which is the
	total count label of the &quot;miscellaneous&quot; category of mail that is charged
	full fare. Place the field in the second line of the page footer section, to the
	right of the five-digit zip information.
	<P>
</DL>



<BLOCKQUOTE>
	<PRE><TT>WhilePrintingRecords;</TT>
<TT>&quot;First Class Totals:&quot;;</TT></PRE>

</BLOCKQUOTE>

<PRE><TT></TT></PRE>

<DL>
	<DT><TT></TT></DT>
	<DD><B>43. </B>Add the <TT>@FirstClassCount</TT> formula field. This is the running
	count of the number of pieces of mail that don't qualify for bulk rates. Add the
	field just to the right of the <TT>@FirstClassCostPrint</TT> field.
	<P>
</DL>



<BLOCKQUOTE>
	<PRE><TT>WhilePrintingRecords;</TT>
<TT>NumberVar FirstClassCount;</TT>
<TT>FirstClassCount;</TT></PRE>

</BLOCKQUOTE>

<PRE><TT></TT></PRE>

<DL>
	<DT><TT></TT></DT>
	<DD><B>44. </B>Add the <TT>@FirstClassTotalCost</TT> formula field. This field prints
	the running cost of the first-class mail. Add the field just to the right of the
	<TT>@FirstClassCount</TT> field. The cost of each category is calculated as the mail
	is processed, so only the total is printed here.
	<P>
</DL>



<BLOCKQUOTE>
	<PRE><TT>WhilePrintingRecords;</TT>
<TT>NumberVar FirstClassCost;</TT>
<TT>FirstClassCost;</TT></PRE>

</BLOCKQUOTE>

<PRE><TT></TT></PRE>

<DL>
	<DT><TT></TT></DT>
	<DD><B>45. </B>Add <TT>@TotalCostPrint</TT> formula field, which is the total count
	label of all the categories of mail. Place the field in the third line of the page
	footer section, below the first-class mail information.
	<P>
</DL>



<BLOCKQUOTE>
	<PRE><TT>WhilePrintingRecords;</TT>
<TT>&quot;Mailing Totals:&quot;;</TT></PRE>

</BLOCKQUOTE>

<PRE><TT></TT></PRE>

<DL>
	<DT><TT></TT></DT>
	<DD><B>46. </B>Add the <TT>@TotalCount</TT> formula field. This is the running count
	of the number of pieces of all the mail. Add the field just to the right of the <TT>@TotalCostPrint</TT>
	field.
	<P>
</DL>



<BLOCKQUOTE>
	<PRE><TT>WhilePrintingRecords;</TT>
<TT>NumberVar TotalCount;</TT>
<TT>TotalCount;</TT></PRE>

</BLOCKQUOTE>

<PRE><TT></TT></PRE>

<DL>
	<DT><TT></TT></DT>
	<DD><B>47. </B>Add the <TT>@TotalCost</TT> formula field. This field prints the running
	cost of all the mail. Add the field just to the right of the <TT>@TotalCount</TT>
	field. The cost of each category is calculated as the mail is processed, so only
	the total is printed here.
	<P>
</DL>



<BLOCKQUOTE>
	<PRE><TT>WhilePrintingRecords;</TT>
<TT>NumberVar Zip5Cost;</TT>
<TT>NumberVar Zip3Cost;</TT>
<TT>NumberVar StateCost;</TT>
<TT>NumberVar FirstClassCost;</TT>
<TT>NumberVar TotalCost;</TT>
<TT>TotalCost := Zip5Cost + Zip3Cost + StateCost + FirstClassCost;</TT>
<TT>TotalCost;</TT></PRE>

</BLOCKQUOTE>

<PRE><TT></TT></PRE>

<DL>
	<DT><TT></TT></DT>
	<DD><B>48. </B>When you are finished inserting the various fields and group sections,
	the design should look something like Figure 9.25. This screen shows the design window
	with the main menu File Options Show Field Names option checked and all the hidden
	fields unhidden so that they appear more clearly.
	<P>
	<DT></DT>
	<DD><B>49. </B>Select File|Print Preview to preview the report, or click on the Print
	Preview button in the toolbar. To print the report, select File|Print Printer in
	the main menu, or click on the Print toolbar button.
	<P>
</DL>

<P><A HREF="javascript:popUp('09fig14.gif')"><B>Figure 9.25.</B></A><B> </B><I>The
completed bulk mail report design.</I></P>
<P><B>How It Works</B></P>
<P>Crystal Reports gives you all the tools you need to create complex reports. The
bulk mail report created in this How-To approaches the upper limit of complexity
of a typical database report.</P>
<P>By using formulas in Crystal Reports, you can create customized fields to present
data in almost any form, including a wide variety of database formats to which you
can connect with the Open Database Connectivity (ODBC) standard. See Chapter 6, &quot;Connecting
to an ODBC Server,&quot; for a discussion about ODBC.</P>
<P>Many formulas start with the <TT>WhilePrintingRecords</TT> function. Although
it is probably overkill in some cases, this function forces the formula to be evaluated
while records are being printed. This is the normal order of evaluation:</P>

<UL>
	<LI>If no database or group field is included in the formula, the formula is evaluated
	before the program reads database records.
	<P>
	<LI>If a database is included in the formula, the formula is evaluated while the
	program reads database records.
	<P>
	<LI>If a group field, page # field, subtotal, and so on is included in the formula,
	the formula is evaluated after database records are read and while the data from
	the records are being printed in the report.
</UL>

<P>Including <TT>WhilePrintingRecords</TT> ensures that formulas are evaluated as
the report is being printed. Other functions, <TT>BeforeReadingRecords</TT> and <TT>WhileReadingRecords</TT>,
can be used to perform formula evaluations at different times. For example, you might
want to record the system time at the beginning of a report for use throughout. <TT>WhileReadingRecords</TT>
lets the Crystal Reports formula check to make sure that you haven't included elements
in the formula that need to be evaluated while printing, such as group calculations
or report elements like a page number.</P>
<P>One important note must be made about the placement of the <TT>@FirstClassCount</TT>
and <TT>@FirstClassTotalCost</TT> fields. The <TT>@FirstClassTotalCost</TT> field
must be placed on a lower line than the <TT>@FirstClassCount</TT> field; otherwise,
the total cost will be incorrect. Crystal Reports generally performs its calculations
in a row order, so placing <TT>@FirstClassTotalCost</TT> on the same line to the
left of <TT>@FirstClassCount</TT> calculates the cost before the final count is updated.</P>
<P><B>Subtotals and Other Group Calculations</B></P>
<P>Crystal Reports provides the capability to &quot;band&quot; the report, which
means to group similar records for grouping, sorting, and calculating. Virtually
any field or portion of a field can be used to group data at various levels. In this
How-To, you grouped by state, five-digit zip code, and three-digit zip code. In the
latter two groups, you used the first five or three digits of the zip code, using
the following Crystal Reports substring array notation:</P>


<BLOCKQUOTE>
	<PRE><TT>{database.field}[1 to 5]</TT></PRE>

</BLOCKQUOTE>

<PRE><TT></TT></PRE>
<P>Crystal Reports sorts records at various levels, providing options for sorting
the different groups you designate, the groups themselves, and the records within
the groups. This capability made it simple to put the records in the right sort order
for the bulk mail groupings and to put them into the right groups. Formulas then
determined whether the post office's requirement for a minimum number of mail pieces
was met.</P>
<P>Crystal Reports provides a set of grand total functions that make it easy to provide
subtotals and counts of data, as well as statistical analysis, at any group level.
That way, complex formulas aren't needed in many cases. Everything in this How-To
was done without any outside database processing.</P>
<P><B>Comments</B></P>
<P>Crystal formulas provide tremendous flexibility to meet your reporting needs,
but they can become cumbersome, as they did in this How-To. It might make more sense
to write complex reports through the use of intermediate database tables. Create
the table with complex formulas in code and SQL, and then write a Crystal report
to display the summarized information. The use of a private class module to build
the reporting table helps make code maintenance easier.</P>
<P>
<H2>9.7 How do I...</H2>
<H3><A NAME="Control the order ..."></A><B>Control the order in which records will
be printed using Crystal Reports?</B></H3>
<P><B>Problem</B></P>
<P>I want to be able to print the same Crystal report in different sort orders, but
this task is a pain--and it is time-consuming to leave my Visual Basic application
to make a change to the report in the Crystal Reports design program. How can I set
a report's sort order from my application?</P>
<P><B>Technique</B></P>
<P>Many of the parameters used to print a report through a Visual Basic application
can be easily set using the Crystal Reports custom control. In this How-To, you'll
create a list of computer book publishers. Through a Visual Basic program, you'll
change the sort order of the report at runtime.</P>
<P><B>Steps</B></P>
<P>Load and run the Visual Basic application PUBLISH.VBP. Click one of the Report
buttons to view the report in a preview window in zip, name, or city sort order.
See Figure 9.26.</P>
<P><A HREF="javascript:popUp('09fig15.gif')"><B>Figure 9.26.</B></A><B> </B><I>The
Print Publishers' Names selection window.</I></P>
<P>Start by creating a simple report that can be modified through Visual Basic during
printing. Start the Crystal Reports program.</P>

<DL>
	<DT></DT>
	<DD><B>1. </B>Click on the New Report toolbar button, or select File|New from the
	main menu. The New Report Gallery appears. Click the Listing option button.
	<P>
	<DT></DT>
	<DD><B>2. </B>When the Create Report Expert appears, click the Data File button,
	and use the common dialog to select the location of your Biblio.MDB file.
	<P>
	<DT></DT>
	<DD><B>3. </B>On the Fields tab, add the fields listed in Table 9.15 to your report
	by either double-clicking on the field name or selecting the field name and clicking
	Add.
	<P>
</DL>



<BLOCKQUOTE>
	<H4>Table 9.15. Computer author report tables and fields.</H4>
	<P>
	<TABLE BORDER="1">
	<TR ALIGN="LEFT" VALIGN="TOP">
		<TD ALIGN="LEFT"><B><I>TABLE</I></B></TD>
		<TD ALIGN="LEFT"><B><I>Field</I></B></TD>
	</TR>
	<TR ALIGN="LEFT" VALIGN="TOP">
		<TD ALIGN="LEFT">Publishers</TD>
		<TD ALIGN="LEFT"><TT>State</TT></TD>
	</TR>
	<TR ALIGN="LEFT" VALIGN="TOP">
		<TD ALIGN="LEFT">Publishers</TD>
		<TD ALIGN="LEFT"><TT>Zip</TT></TD>
	</TR>
	<TR ALIGN="LEFT" VALIGN="TOP">
		<TD ALIGN="LEFT">Publishers</TD>
		<TD ALIGN="LEFT"><TT>Telephone</TT></TD>
	</TR>
	<TR ALIGN="LEFT" VALIGN="TOP">
		<TD ALIGN="LEFT">Publishers</TD>
		<TD ALIGN="LEFT"><TT>City</TT></TD>
	</TR>
	<TR ALIGN="LEFT" VALIGN="TOP">
		<TD ALIGN="LEFT">Publishers</TD>
		<TD ALIGN="LEFT"><TT>Name</TT></TD>
	</TR>
	</TABLE>
</P>

</BLOCKQUOTE>


<DL>
	<DT></DT>
	<DD><B>4. </B>On the Style tab, enter the text <B><TT>Computer Book Publishers</TT></B>
	as the report title.
	<P>
	<DT></DT>
	<DD><B>5. </B>Preview the report.
	<P>
	<DT></DT>
	<DD><B>6. </B>Now add the State group section. Inserting this section keeps the records
	grouped by state, so the individual records are sorted by zip, name, or city within
	each state. Select Insert|Group Section from the Crystal Reports main menu. From
	the first list box, select <TT>Publishers.State</TT>. Make sure that the sorting
	option is set to ascending order, which is the default. You won't enter any other
	fields in this group section.
	<P>
	<DT></DT>
	<DD><B>7. </B>This is the report you'll use. Remember to save the file, calling it
	PUBLISH.RPT.
	<P>
	<DT></DT>
	<DD><B>8. </B>Start Visual Basic and create a new Standard EXE project in your work
	area. Save the default form as PUBLISH.FRM, and save the project as PUBLISH.VBP.
	Select Project Components from the Visual Basic main menu, and make sure that the
	Crystal Reports control is selected. Add the READINI.BAS file to the project to find
	your copy of the BIBLIO.MDB file.
	<P>
	<DT></DT>
	<DD><B>9. </B>Place controls on the form as shown in Figure 9.26, and set the properties
	as shown in Table 9.16. Note that the Crystal Reports control is invisible at runtime,
	so place it anywhere on the form that is convenient. Note also that the three report
	command buttons make up a control array.
	<P>
</DL>



<BLOCKQUOTE>
	<H4>Table 9.16. Objects and properties for. PUBLISH.FRM.</H4>
	<P>
	<TABLE BORDER="1">
	<TR ALIGN="LEFT" VALIGN="TOP">
		<TD ALIGN="LEFT"><B><I>OBJECT</I></B></TD>
		<TD ALIGN="LEFT"><B><I>Property</I></B></TD>
		<TD ALIGN="LEFT"><B><I>Setting</I></B></TD>
	</TR>
	<TR ALIGN="LEFT" VALIGN="TOP">
		<TD ALIGN="LEFT"><TT>Form</TT></TD>
		<TD ALIGN="LEFT"><TT>Name</TT></TD>
		<TD ALIGN="LEFT"><TT>frmPublishers</TT></TD>
	</TR>
	<TR ALIGN="LEFT" VALIGN="TOP">
		<TD ALIGN="LEFT"></TD>
		<TD ALIGN="LEFT"><TT>Caption</TT></TD>
		<TD ALIGN="LEFT"><TT>&quot;Print Publishers' Names&quot;</TT></TD>
	</TR>
	<TR ALIGN="LEFT" VALIGN="TOP">
		<TD ALIGN="LEFT"><TT>CommandButton</TT></TD>
		<TD ALIGN="LEFT"><TT>Name</TT></TD>
		<TD ALIGN="LEFT"><TT>cmdQuit</TT></TD>
	</TR>
	<TR ALIGN="LEFT" VALIGN="TOP">
		<TD ALIGN="LEFT"></TD>
		<TD ALIGN="LEFT"><TT>Caption</TT></TD>
		<TD ALIGN="LEFT"><TT>&quot;Quit&quot;</TT></TD>
	</TR>
	<TR ALIGN="LEFT" VALIGN="TOP">
		<TD ALIGN="LEFT"><TT>CommandButton</TT></TD>
		<TD ALIGN="LEFT"><TT>Name</TT></TD>
		<TD ALIGN="LEFT"><TT>cmdReport</TT></TD>
	</TR>
	<TR ALIGN="LEFT" VALIGN="TOP">
		<TD ALIGN="LEFT"></TD>
		<TD ALIGN="LEFT"><TT>Caption</TT></TD>
		<TD ALIGN="LEFT"><TT>&quot;Report by Zip&quot;</TT></TD>
	</TR>
	<TR ALIGN="LEFT" VALIGN="TOP">
		<TD ALIGN="LEFT"></TD>
		<TD ALIGN="LEFT"><TT>Index</TT></TD>
		<TD ALIGN="LEFT"><TT>0</TT></TD>
	</TR>
	<TR ALIGN="LEFT" VALIGN="TOP">
		<TD ALIGN="LEFT"><TT>CommandButton</TT></TD>
		<TD ALIGN="LEFT"><TT>Name</TT></TD>
		<TD ALIGN="LEFT"><TT>cmdReport</TT></TD>
	</TR>
	<TR ALIGN="LEFT" VALIGN="TOP">
		<TD ALIGN="LEFT"></TD>
		<TD ALIGN="LEFT"><TT>Caption</TT></TD>
		<TD ALIGN="LEFT"><TT>&quot;Report by City&quot;</TT></TD>
	</TR>
	<TR ALIGN="LEFT" VALIGN="TOP">
		<TD ALIGN="LEFT"></TD>
		<TD ALIGN="LEFT"><TT>Index</TT></TD>
		<TD ALIGN="LEFT"><TT>1</TT></TD>
	</TR>
	<TR ALIGN="LEFT" VALIGN="TOP">
		<TD ALIGN="LEFT"><TT>CommandButton</TT></TD>
		<TD ALIGN="LEFT"><TT>Name</TT></TD>
		<TD ALIGN="LEFT"><TT>cmdReport</TT></TD>
	</TR>
	<TR ALIGN="LEFT" VALIGN="TOP">
		<TD ALIGN="LEFT"></TD>
		<TD ALIGN="LEFT"><TT>Caption</TT></TD>
		<TD ALIGN="LEFT"><TT>&quot;Report by Name&quot;</TT></TD>
	</TR>
	<TR ALIGN="LEFT" VALIGN="TOP">
		<TD ALIGN="LEFT"></TD>
		<TD ALIGN="LEFT"><TT>Index</TT></TD>
		<TD ALIGN="LEFT"><TT>2</TT></TD>
	</TR>
	<TR ALIGN="LEFT" VALIGN="TOP">
		<TD ALIGN="LEFT"><TT>CrystalReport</TT></TD>
		<TD ALIGN="LEFT"><TT>Name</TT></TD>
		<TD ALIGN="LEFT"><TT>crptPublishers</TT></TD>
	</TR>
	<TR ALIGN="LEFT" VALIGN="TOP">
		<TD ALIGN="LEFT"></TD>
		<TD ALIGN="LEFT"><TT>ReportFileName</TT></TD>
		<TD ALIGN="LEFT"><TT>&quot;D:\Waite\Chapter.11\How-to.113\Publish.rpt&quot;</TT></TD>
	</TR>
	<TR ALIGN="LEFT" VALIGN="TOP">
		<TD ALIGN="LEFT"></TD>
		<TD ALIGN="LEFT"><TT>Destination</TT></TD>
		<TD ALIGN="LEFT"><TT>0 `To Window</TT></TD>
	</TR>
	</TABLE>
</P>

</BLOCKQUOTE>


<DL>
	<DT></DT>
	<DD><B>10. </B>Add the following code to the <TT>Click</TT> event of the <TT>cmdReport</TT>
	command-button control array. This procedure sets the <TT>ReportFileName</TT> to
	<TT>&quot;PUBLISH.RPT&quot;</TT> in the application's path, sets the <TT>SortFields</TT>
	property of the Crystal Reports custom control to the sort order desired, and assigns
	the Crystal Reports print preview window title. Then it sets the <TT>Action</TT>
	property to <TT>1</TT> to print the report.
	<P>
</DL>



<BLOCKQUOTE>
	<PRE><TT>Private Sub cmdReport_Click(Index As Integer)</TT>
<TT>    Dim strDbName As String</TT>
<TT>    ` Get the Biblio.mdb database location</TT>
<TT>    strDbName = strBiblioDb()</TT>
<TT>    ` Assign the data file location for the report</TT>
<TT>    crptPublishers.DataFiles(0) = strDbName</TT>
<TT>    ` Assign the report file name</TT>
<TT>    crptPublishers.ReportFileName = App.Path &amp; &quot;\Publish.rpt&quot;</TT>
<TT>    `Set up the Report control</TT>
<TT>    Select Case Index</TT>
<TT>        Case 0   `Print by Zip</TT>
<TT>            crptPublishers.SortFields(0) = &quot;+{Publishers.Zip}&quot;</TT>
<TT>            crptPublishers.WindowTitle = &quot;Publishers by Zip Code&quot;</TT>
<TT>        Case 1   `Print by City</TT>
<TT>            crptPublishers.SortFields(0) = &quot;+{Publishers.City}&quot;</TT>
<TT>            crptPublishers.WindowTitle = &quot;Publishers by City&quot;</TT>
<TT>        Case 2   `Print by Name</TT>
<TT>            crptPublishers.SortFields(0) = &quot;+{Publishers.Name}&quot;</TT>
<TT>            crptPublishers.WindowTitle = &quot;Publishers by Company Name&quot;</TT>
<TT>    End Select</TT>
<TT>    crptPublishers.Action = 1</TT>
<TT>End Sub</TT></PRE>

</BLOCKQUOTE>

<PRE><TT></TT></PRE>

<DL>
	<DT><TT></TT></DT>
	<DD><B>11. </B>Add the following code to the <TT>Click</TT> event of the <TT>cmdQuit</TT>
	command button, to provide an exit point from the program:
	<P>
</DL>



<BLOCKQUOTE>
	<PRE>Private Sub cmdQuit_Click()
<TT>    Unload Me</TT>
<TT>End Sub</TT></PRE>

</BLOCKQUOTE>

<PRE><TT></TT></PRE>

<DL>
	<DT><TT></TT></DT>
	<DD><B>12. </B>Add the following code to the form's <TT>Load</TT> event procedure.
	This code simply moves the form to the lower-right portion of the screen, out of
	the way of the report window when it appears.
	<P>
</DL>



<BLOCKQUOTE>
	<PRE><TT>Private Sub Form_Load()</TT>
<TT>    `Move the form to the lower right of screen</TT>
<TT>    Me.Move Screen.Width - 1.1 * Me.Width, _</TT>
<TT>        Screen.Height - 1.25 * Me.Height</TT>
<TT>End Sub</TT></PRE>

</BLOCKQUOTE>

<PRE><TT></TT></PRE>
<P><B>How It Works</B></P>
<P>This is all it takes to create a report in Crystal Reports and an application
in Visual Basic that controls the sort order of the report. Entering a state group
section causes the overall sort order of the report to always be by state. Then the
individual publisher records are sorted within each state. Leaving out the group
section would cause all records to be sorted by zip, city, or name, without regard
to state.</P>
<P>This How-To used the properties of the Crystal Reports custom control. You had
to change only a single property, <TT>SortFields</TT>, to set the sort order. <TT>SortFields</TT>
is an array, so you can enter as many sort fields as you want. In fact, the following
groups of Visual Basic code would also keep all the records sorted by state and then
by the secondary sort order:</P>


<BLOCKQUOTE>
	<PRE><TT>CrystalReport1.SortFields(0) = &quot;+{Publishers.State}&quot;</TT>
<TT>CrystalReport1.SortFields(1) = &quot;+{Publishers.Zip}&quot;</TT>
<TT>CrystalReport1.SortFields(0) = &quot;+{Publishers.State}&quot;</TT>
<TT>CrystalReport1.SortFields(1) = &quot;+{Publishers.City}&quot;</TT>
<TT>CrystalReport1.SortFields(0) = &quot;+{Publishers.State}&quot;</TT>
<TT>CrystalReport1.SortFields(1) = &quot;+{Publishers.Name}&quot;</TT></PRE>

</BLOCKQUOTE>

<PRE><TT></TT></PRE>
<P>The plus sign at the beginning of each field name means to sort the records in
ascending order. Use a minus sign to sort in descending order. The use of ascending
and descending sort orders for different fields can be mixed and matched in a single
report as much as you like.</P>
<P>Crystal Reports also has the capability to sort the group sections in any order
you like. This can be set either in the report itself or again through the Crystal
Reports custom control using the <TT>GroupSortFields</TT> property in the same way
as the <TT>SortFields</TT> property is used. So, for example, in this report you
could have specified to sort the state groups in descending order, starting with
Washington and progressing to Alaska at the end of the report.</P>
<P><B>Comments</B></P>
<P>This How-To has illustrated one of the most frequent changes required for a report--changing
the sort order. Consider using this feature carefully on very large, frequently used
reports if the underlying database does not provide a convenient index. The Crystal
Reports engine is pretty good at using database indices to retrieve data in the order
it is needed, but a poorly sorted report can take forever to run.</P>
<P>
<H2>9.8 How do I...</H2>
<H3><A NAME="Print labels using Crystal Reports?"></A><B>Print labels using Crystal
Reports?</B></H3>
<P><B>Problem</B></P>
<P>I need to produce mailing labels for our marketing program. How can I use Visual
Basic to automatically print the labels we need so that they are ready for use on
our mailings?</P>
<P><B>Technique</B></P>
<P>This How-To uses Crystal Reports' Mailing Labels design window. Crystal Reports
ships with various standard Avery label formats, so there is a pretty good chance
that the exact label you need is one of the Avery formats. Even if it isn't, it is
quite easy and straightforward to modify one of the formats or create your own label.</P>
<P>This How-To can be combined with How-To 9.6, which creates a bulk mailing report,
to print labels already sorted for bulk mailing, with the postage already calculated.</P>
<P><B>Steps</B></P>
<P>The steps in this How-To show in detail how to create a shipping label. To open
and run a report in Crystal Reports, select File|Open from the Crystal main menu,
and select the SHIPLBL.RPT report file, as shown in Figure 9.27. To print the report,
click the Print button on the toolbar, or select File|Print from the main menu. To
preview the report on-screen, click the Print Preview button on the toolbar, or select
File|Print Preview from the Crystal Reports main menu.</P>

<DL>
	<DT></DT>
	<DD><B>1. </B>This How-To uses the MAIL.MDB database described in the introduction
	to this chapter. Start Crystal Reports, and start a new report by clicking the New
	Report toolbar button or selecting File|New from the main menu. Click on Mail Label
	when the Create New Report Gallery appears.
	<P>
</DL>

<P><A HREF="javascript:popUp('09fig16.gif')"><B>Figure 9.27.</B></A><B> </B><I>Crystal
Reports design view for SHIPLBL.RPT.</I></P>

<DL>
	<DT><I></I></DT>
	<DD><B>2. </B>Click on Data File when the Create Report Expert appears. Use the dialog
	box to find the MAIL.MDB Access database file. Click Done to close the dialog box.
	<P>
	<DT></DT>
	<DD><B>3. </B>From the Fields tab, add the <TT>Contact</TT> and <TT>ADDR1</TT> fields
	to the report.
	<P>
	<DT></DT>
	<DD><B>4. </B>Now, instead of placing the <TT>City</TT>, <TT>State</TT>, and <TT>Zip</TT>
	fields separately, you'll use a Crystal Reports formula so that all three fields
	appear on the same line without extra spaces. Start by clicking the Formula button
	on the Fields tab. Name the formula <TT>CityStateZip</TT>, click OK, and enter this
	formula:
	<P>
</DL>



<BLOCKQUOTE>
	<PRE><TT>TrimRight({Mailing LIst.CITY}) + &quot;, &quot; + TrimRight({Mailing LIst.STATE}) _</TT>
<TT>    + &quot; &quot; + {Mailing LIst.ZIP}</TT></PRE>

</BLOCKQUOTE>

<PRE><TT></TT></PRE>

<DL>
	<DT><TT></TT></DT>
	<DD>The Crystal Reports <TT>TrimRight</TT> function removes extra spaces from text
	fields. Click Check to make sure that the formula is correct, and then click Accept
	to define the formula. Click the Add button to include <TT>@CityStateZip</TT> with
	the printed fields in the right-hand window.
	<P>
	<DT></DT>
	<DD><B>5. </B>On the Label tab, Select an Avery Shipping/Address label (Avery 5164).
	This label is 4 inches wide by 3.33 inches high, so there are two columns of three
	labels. That leaves room for both a snazzy return address and the addressee information.
	<P>
	<DT></DT>
	<DD>Select the Avery 5164 label by scrolling down through the Choose Mailing Label
	Type list box. Click on that entry, and you are finished designing the label layout.
	The Label tab of the Create Report Expert dialog box should then look like the one
	shown in Figure 9.28. You can also select the print sequence, either across or down
	first, by making a selection in the Printing Direction box. Leave the default set
	at Across then Down. Click OK to insert this format into the report.
	<P>
</DL>

<P><A HREF="javascript:popUp('09fig17.gif')"><B>Figure 9.28.</B></A><B> </B><I>The
Create Report Expert dialog box.</I></P>

<DL>
	<DT><I></I></DT>
	<DD><B>6. </B>Click Preview Report to see the basic report. After reviewing the labels,
	switch to design view by clicking the Design tab.
	<P>
	<DT></DT>
	<DD><B>7. </B>Select the three fields on the report by Ctrl-clicking on each field
	in turn. Right-click and use the Change Font dialog box to increase the font size
	to 12 points. You can also change font attributes by using the font toolbar at the
	bottom of the Crystal Reports designer window. Drag the three fields down the label
	to just below the middle on the left side.
	<P>
	<DT></DT>
	<DD><B>8. </B>Add agraphic element in the upper-left corner. Select Insert|Picture
	from the main menu, or click the Insert Picture button on the toolbar. When the Choose
	Graphic File box appears, select a graphics file from any of the supported formats:
	Windows bitmap (BMP), CompuServe (GIF), PC Paintbrush (PCX), TIFF (TIF), or TARGA
	(TGA). EARTH.GIF, courtesy of NASA and the Galileo spacecraft program, is included
	on the CD-ROM that accompanies this book.
	<P>
	<DT></DT>
	<DD>After you select the file, click OK and the image appears on the Crystal Reports
	design screen. Position it so that the upper-left corner of the image is at or near
	the upper-left corner of the label, inside the left vertical and top horizontal gray
	lines. Choose Format|Picture from the main menu, and format the picture 2 inches
	wide and 1.5 inches tall, as shown in Figure 9.29. You'll need to play with the aspect
	ratio (the ratio of height to width) to get it to look right. Because of different
	screen and printer aspect ratios, what looks right on the screen might not look right
	on your printer.
	<P>
</DL>

<P><A HREF="javascript:popUp('09fig18.gif')"><B>Figure 9.29.</B></A><B> </B><I>The
Graphic format dialog box.</I></P>

<DL>
	<DT><I></I></DT>
	<DD><B>9. </B>Enter three text fields, and enter the text <TT>Global Research Network</TT>,
	<TT>One Uranus Place</TT>, and <TT>Houston, Texas 04107</TT>. Place these text fields
	in the upper-right quarter of the label next to the picture. Format the fields for
	a 12-point bold italic font.
	<P>
	<DT></DT>
	<DD><B>10. </B>Insert a horizontal dividing line to split the two address areas of
	the label, by either selecting Insert Line from the main menu or clicking on the
	Insert Line button on the toolbar. Place the point of the line drawing tool directly
	on the label's left border, with the gray vertical line near the left edge of the
	label. Click and hold down the left mouse button as you drag the tool to the right
	edge of the label. Release the mouse button. If you need to, adjust the position
	or length of the line just as you would with any other field. Format the line to
	your preferred thickness.
	<P>
	<DT></DT>
	<DD><B>11. </B>Some versions of Crystal Reports enlarge the label size on the design
	window when you increase the font size on a line of the report. This causes you to
	end up with only one or two rows of labels on the page, rather than three rows. To
	restore the proper label size, scroll down to the bottom of the label. Notice that
	the bottom section border (the line that extends into the gray area to the left of
	the design area) is one-half to one-fourth of an inch below the rectangle of the
	label. Drag the bottom section edge as far up as it will go, adjacent to the dashed
	gray line. In other words, the bottom edge of the label, the bottom edge of the section,
	and the dashed line should all be very close to one another.
	<P>
	<DT></DT>
	<DD><B>12. </B>Remember to save the file, calling it SHIPLBL.RPT.
	<P>
</DL>

<P><B>How It Works</B></P>
<P>When you run this report, Crystal uses the label format specifications to repeat
different records across and down the page. The selected graphic is automatically
included on each label.</P>
<P><B>Comments</B></P>
<P>Designing labels with Crystal Reports is essentially the same as designing any
other report. Crystal Reports has support for most of the labels you'll need. If
none of the formats is exactly right, pick something close and change the sizes and
format to fit your needs.</P>
<P>
<H2>9.9 How do I...</H2>
<H3><A NAME="Create and print form ..."></A><B>Create and print form letters using
Crystal Reports?</B></H3>
<P><B>Problem</B></P>
<P>Now that I can print my mailing labels, how can I print the form letters that
will go into the mailing envelopes? How can I use my database with text to prepare
form letter reports?</P>
<P><B>Technique</B></P>
<P>By using a couple of formatting tricks with Crystal Reports, you can use the report
writer to generate almost any type of database report you need. This How-To shows
how you can use Crystal Reports to replace your word processor's mail merge, and
how to use formulas and field formatting to present your data in the most attractive
format.</P>
<P><B>Steps</B></P>
<P>The steps in this How-To show in detail how to create a multi-page form letter.
To open and run a report in Crystal Reports, select File|Open from the Crystal main
menu, and select the FORMLTR.RPT report file, as shown in Figure 9.30. To print the
report, click the Print button on the toolbar, or select File|Print from the main
menu. To preview the report on-screen, click the Print Preview button on the toolbar,
or select File|Print Preview from the Crystal Reports main menu.</P>

<DL>
	<DT></DT>
	<DD><B>1. </B>This How-To uses the MAIL.MDB database described in the introduction
	to this chapter. Start Crystal Reports, and begin a new report by clicking the New
	Report toolbar button or selecting File|New from the main menu. Click the Custom
	button when the Create New Report Gallery appears.
	<P>
	<DT></DT>
	<DD><B>2. </B>Click on Data File in the lower-right corner after the Create Report
	Expert expands. Use the dialog box to find the MAIL.MDB Access database file. Click
	Done to close the dialog box. A screen similar to that shown in Figure 9.31 appears.
	<P>
</DL>

<P><A HREF="javascript:popUp('09fig19.gif')"><B>Figure 9.30.</B></A><B> </B><I>Crystal
Reports design view for FORMLTR.RPT.</I></P>
<P><A HREF="javascript:popUp('09fig20.gif')"><B>Figure 9.31.</B></A><B> </B><I>Crystal
Reports blank report design view.</I></P>

<DL>
	<DT><I></I></DT>
	<DD><B>3. </B>As you design the report, be sure to save your work periodically by
	selecting File|Save (or File|Save As, the first time) from the Crystal Reports main
	menu.
	<P>
	<DT></DT>
	<DD><B>4. </B>Because you don't want extra column headings for a form letter, Select
	File|Options from the main menu. On the Layout tab, uncheck the Insert Detail Field
	Titles option.
	<P>
	<DT></DT>
	<DD><B>5. </B>Start by inserting the date for the letter. Select Insert|Special Field|Print
	Date Field. Locate the field in the detail section, to the far left.
	<P>
	<DT></DT>
	<DD><B>6. </B>Expand the size of the detail section by dragging the bottom gray line
	of the section down as far as it will go. Alternatively, place the text cursor on
	the last line of the detail section and press Enter as many times as needed to expand
	the section.
	<P>
	<DT></DT>
	<DD><B>7. </B>In the Insert Database Field window, double-click on the Contact field;
	then enter it in the detail line, or drag it from the Insert Database Field window.
	Place the field on the second line after the <TT>Date</TT> field.
	<P>
	<DT></DT>
	<DD><B>8. </B>Repeat the last step for the <TT>Addr1</TT> field, placing it on the
	line after the <TT>Contact</TT> field.
	<P>
	<DT></DT>
	<DD><B>9. </B>Now, instead of placing the <TT>City</TT>, <TT>State</TT>, and <TT>Zip</TT>
	fields separately, you'll use a Crystal Reports formula so that all three fields
	appear on the same line without extraneous spaces. Start by clicking the Done button
	on the Insert Database Field window to get it out of the way. Select Insert|Formula
	Field from the Crystal Reports main menu, and enter the name <TT>CityStateZip</TT>
	in the Formula name text box. Click OK, and enter this formula:
	<P>
</DL>



<BLOCKQUOTE>
	<PRE><TT>TrimRight({Mailing LIst.CITY}) + &quot;, &quot; + TrimRight({Mailing _</TT>
<TT>LIst.STATE})</TT>
<TT>    + &quot; &quot; + {Mailing LIst.ZIP}</TT></PRE>

</BLOCKQUOTE>

<PRE><TT></TT></PRE>

<DL>
	<DT><TT></TT></DT>
	<DD>The Crystal Reports <TT>TrimRight</TT> function removes extra spaces from text
	fields. Click Check to make sure that the formula is correct; then click Accept to
	place the formula field on the report, on the line under the <TT>Addr1</TT> field.
	<P>
	<DT></DT>
	<DD><B>10. </B>You'll use another formula field for the salutation. Select Insert|Formula
	Field from the Crystal Reports main menu, and enter the name <TT>Salutation</TT>
	in the Formula name text box. Click OK, and enter this formula:
	<P>
</DL>



<BLOCKQUOTE>
	<PRE><TT>&quot;Dear &quot; + TrimRight({Mailing LIst.CONTACT}) + &quot;,&quot;</TT></PRE>

</BLOCKQUOTE>

<PRE><TT></TT></PRE>

<DL>
	<DT><TT></TT></DT>
	<DD>The Contact file in the Mailing List table has generic names, such as Medical
	Practitioner and Occupant. You can easily modify this formula to accommodate a Salutation
	field, an actual name, or the ever-so-personal &quot;Dear Sir or Madam.&quot;
	<P>
	<DT></DT>
	<DD><B>11. </B>Set the margins for the letter. Select File|Page Margins from the
	main menu, and enter 1.00 inch for the top and bottom margins, and 1.25 inches for
	the side margins. Click OK to return to the report and set the margins.
	<P>
	<DT></DT>
	<DD><B>12. </B>Now you'll enter the body of the letter. In this How-To, you'll enter
	the text in separate text fields for each paragraph so that you can enter fields
	in certain paragraphs to customize each letter. You can also enter all the text in
	a single text field if you don't need to customize the text, or even in a single
	formula field. The latter method tends to get a bit unwieldy and reduces your formatting
	options.
	<P>
	<DT></DT>
	<DD>Crystal Reports has a rather serious flaw that turns what should be a single
	step into two steps. If you simply type each paragraph's text into the Edit Text
	Field window and enter the field into the report, Crystal Reports makes the field
	as wide as needed to fit the text. When you're using entire paragraphs, the field
	becomes several times the width of the report. When a Crystal Reports field extends
	beyond the right margin, there is no way to make the field narrower because Crystal
	Reports prevents you from grabbing the right edge of the field. On top of that, there
	is no field formatting option for field width. So you'll need to enter a text field
	with a single space in it and place that field on the report. You should then edit
	the text of the field, entering the text you actually want. Then you can size the
	field to the full width of the report.
	<P>
	<DT></DT>
	<DD>Start by expanding the detail section, if necessary. Select Insert|Text Field
	from the main menu, or click the Insert Text button on the toolbar. Enter one or
	two spaces, and click OK to place the field on the report. Place the field on the
	second line after the salutation, at the left margin. Format the field's font for
	12-point type.
	<P>
	<DT></DT>
	<DD><B>13. </B>Go back into the field to edit the text by right-clicking on the field
	and then selecting Edit Text Field from the popup menu, or by selecting Edit|Text
	Field from the main menu. Enter the following text in the Edit Text Field window.
	When you're finished typing, click the Accept button to insert the field on the report,
	and stretch the field to the full width of the report.
	<P>
</DL>



<BLOCKQUOTE>
	<PRE><TT>Welcome to the Slick Willy Sales Course!  I congratulate you on your decision to take the course, because with hard work and study the experience should greatly increase your sales skills.  I can speak from experience--after I took the course five years ago, my sales success went up dramatically.</TT></PRE>

</BLOCKQUOTE>

<PRE><TT></TT></PRE>

<DL>
	<DT><TT></TT></DT>
	<DD>The field remains one line long in the report design window. When you format
	the following fields, you'll set an option that tells Crystal Reports to expand the
	field vertically to show all the text.
	<P>
	<DT></DT>
	<DD><B>14. </B>Repeating the procedure in the preceding two steps, enter each of
	the following paragraphs in a separate text field. You'll need to enter a lot of
	text so that the letter is two pages long to illustrate how to format different page
	headers.
	<P>
</DL>



<BLOCKQUOTE>

	<BLOCKQUOTE>
		<P>I am the Group Leader assigned to keep in contact with you throughout the course.
		I'll call you regularly to find out how you are doing, whether you need any help,
		answer any questions you might have, and help you get the most out of the course.
		I'd be happy to meet with you to discuss the course, too--sometimes face to face
		is the only way to work out issues. This applies not only to the class material but
		also to particular sales calls or prospects you might like to discuss.<BR>
		<BR>
		Feel free to call on any of the other Group Leaders. Call on whatever resources you
		feel will best help you become a better salesperson.<BR>
		<BR>
		Please come to class with the homework prepared, for two reasons<BR>
		<BR>
		First, doing the work is the only way to learn the material. The class will be a
		waste of your time if you don't learn anything! Second, we will use the assignments
		in class the following week.<BR>
		<BR>
		The reading assignments are important too, not just for the lessons they contain,
		but because you'll occasionally be called upon to give summaries of the readings.<BR>
		<BR>
		And finally, read through the next week's lesson in the workbook, so you'll have
		an idea of what to expect in class and can be prepared to discuss the lessons.<BR>
		<BR>
		The single most important way to learn the material and use it successfully is to
		use it during the following week. Plan ahead and incorporate it into your sales calls.
		Think about how to make it work for you. In fact, not everything will work for you
		directly, but you can almost always adapt a concept to your advantage.<BR>
		<BR>
		Charley and all of the Group Leaders arrive at the classroom by 5:30 P.M. the night
		of each class, so come early if you'd like to discuss any of the material in person.
		Also, as I previously mentioned, any of us can meet with you during the week.</P>

	</BLOCKQUOTE>

</BLOCKQUOTE>


<DL>
	<DT></DT>
	<DD><B>15. </B>Now, enter a customized paragraph. Select Insert|Formula Field from
	the main menu, or click the Insert Formula Field button on the toolbar. Name the
	field <TT>CustomParagraph</TT>, and enter this formula:
	<P>
</DL>



<BLOCKQUOTE>
	<PRE><TT>WhilePrintingRecords;</TT>
<TT>StringVar para;</TT>
<TT>if {Mailing LIst.CONTACT} = &quot;Medical Practioner&quot; then</TT>
<TT>    para := &quot;Since you live in the city of &quot; +</TT>
<TT>    TrimRight({Mailing LIst.CITY}) +</TT>
<TT>    &quot;, you can take advantage of our convenient MedShuttle. &quot;</TT>
<TT>else</TT>
<TT>    if {Mailing LIst.CONTACT} = &quot;Occupant&quot; then</TT>
<TT>        para := &quot;In the city of &quot; + TrimRight({Mailing LIst.CITY}) _ </TT>
<TT>        + &quot;, there is an excellent rail system, &quot; +</TT>
<TT>        &quot;with a stop within walking distance of the meeting room.&quot;</TT>
<TT>    else</TT>
<TT>        para := &quot; Please arrange your own transportation from &quot;</TT>
<TT>        + TrimRight({Mailing List.CITY}) + &quot;. &quot;;</TT>
<TT>para := para +</TT>
&quot;Please call us at 800-555-1212 if you need more information about getting here.&quot;</PRE>

</BLOCKQUOTE>

<PRE></PRE>

<DL>
	<DT></DT>
	<DD><B>16. </B>Enter the final two text fields. The Sincerely yours...Group Leader
	lines can be in a single text field, using carriage returns at the end of each line.
	<P>
</DL>



<BLOCKQUOTE>
	<PRE><TT>We want you to be successful in the class and in your selling future. Let us know if there is any way we can help you achieve that success.</TT>
<TT>Sincerely yours,</TT>
<TT>Bill Morehours</TT>
<TT>Group Leader</TT></PRE>

</BLOCKQUOTE>

<PRE><TT></TT></PRE>

<DL>
	<DT><TT></TT></DT>
	<DD><B>17. </B>Format these detail section fields as shown in Table 9.17. The most
	important setting is Print on Multiple Lines for all the paragraph fields so that
	the text fields will expand vertically to accommodate all the text in the paragraph.
	<P>
</DL>



<BLOCKQUOTE>
	<H4>Table 9.17. The detail section fields and formatting.</H4>
	<P>
	<TABLE BORDER="1">
	<TR ALIGN="LEFT" VALIGN="TOP">
		<TD ALIGN="LEFT"><B><I>REPORT ELEMENT</I></B></TD>
		<TD ALIGN="LEFT"><B><I>Values</I></B></TD>
	</TR>
	<TR ALIGN="LEFT" VALIGN="TOP">
		<TD ALIGN="LEFT"><TT>Detail Section</TT></TD>
		<TD ALIGN="LEFT"><TT>New Page After</TT></TD>
	</TR>
	<TR ALIGN="LEFT" VALIGN="TOP">
		<TD ALIGN="LEFT"><TT>PrintDate</TT></TD>
		<TD ALIGN="LEFT"><TT>Date</TT>, <TT>Default Alignment</TT>, <TT>1 March, 1999</TT></TD>
	</TR>
	<TR ALIGN="LEFT" VALIGN="TOP">
		<TD ALIGN="LEFT"><TT>Mailing List.CONTACT</TT></TD>
		<TD ALIGN="LEFT"><TT>String</TT>, <TT>Default Alignment</TT></TD>
	</TR>
	<TR ALIGN="LEFT" VALIGN="TOP">
		<TD ALIGN="LEFT"><TT>Mailing List.ADDR1</TT></TD>
		<TD ALIGN="LEFT"><TT>String</TT>, <TT>Default Alignment</TT></TD>
	</TR>
	<TR ALIGN="LEFT" VALIGN="TOP">
		<TD ALIGN="LEFT"><TT>@CityStateZip</TT></TD>
		<TD ALIGN="LEFT"><TT>String</TT>, <TT>Default Alignment</TT></TD>
	</TR>
	<TR ALIGN="LEFT" VALIGN="TOP">
		<TD ALIGN="LEFT"><TT>@Salutation</TT></TD>
		<TD ALIGN="LEFT"><TT>String</TT>, <TT>Default Alignment</TT></TD>
	</TR>
	<TR ALIGN="LEFT" VALIGN="TOP">
		<TD ALIGN="LEFT"><TT>Paragraph text fields</TT></TD>
		<TD ALIGN="LEFT"><TT>String</TT>, <TT>Default Alignment</TT>, <TT>MultipleLines</TT>, <TT>12 pt Font</TT></TD>
	</TR>
	<TR ALIGN="LEFT" VALIGN="TOP">
		<TD ALIGN="LEFT"><TT>@CustomParagraph</TT></TD>
		<TD ALIGN="LEFT"><TT>String</TT>, <TT>Default Alignment</TT>, <TT>MultipleLines</TT>, <TT>12 pt Font</TT></TD>
	</TR>
	</TABLE>
</P>

</BLOCKQUOTE>


<DL>
	<DT></DT>
	<DD><B>18. </B>Now, enter the fields for the page header. You have two sets of fields:
	one for the first page of the letter with your company name and address, and another
	for the second page header showing the addressee, date, and page. Use a Boolean variable
	<TT>FirstPage</TT> to keep track of whether this is the first page of the letter.
	<P>
	<DT></DT>
	<DD>Select Insert|Formula Field from the main menu, or click the Insert Formula Field
	button on the toolbar. Name the formula <TT>Masthead1</TT>, and enter the following
	formula. Place the field on the top line of the page header, at the left margin.
	<P>
</DL>



<BLOCKQUOTE>
	<PRE><TT>WhilePrintingRecords;</TT>
<TT>BooleanVar FirstPage;</TT>
<TT>if FirstPage then</TT>
<TT>    FirstPage := False</TT>
<TT>else</TT>
<TT>    FirstPage := True;</TT>
<TT>if FirstPage then</TT>
<TT>    &quot;Slick Willy Sales and Aerobics Training&quot;;</TT></PRE>

</BLOCKQUOTE>

<PRE><TT></TT></PRE>

<DL>
	<DT><TT></TT></DT>
	<DD><B>19. </B>Select Insert|Formula Field from the main menu, or click the Insert
	Formula Field button on the toolbar. Name the formula <TT>Masthead2</TT>, and enter
	the following formula. Place the field against the right margin on the second line
	of the page header.
	<P>
</DL>



<BLOCKQUOTE>
	<PRE><TT>WhilePrintingRecords;</TT>
<TT>BooleanVar FirstPage;</TT>
<TT>if FirstPage = True then</TT>
<TT>    &quot;One Pennsylvania Avenue, Nashville, Tennessee 80104&quot;;</TT></PRE>

</BLOCKQUOTE>

<PRE><TT></TT></PRE>

<DL>
	<DT><TT></TT></DT>
	<DD><B>20. </B>Select Insert|Formula Field from the main menu, or click the Insert
	Formula Field button on the toolbar. Name the formula <TT>Masthead3</TT>, and enter
	the following formula. Place the field against the right margin on the third line
	of the page header.
	<P>
</DL>



<BLOCKQUOTE>
	<PRE><TT>WhilePrintingRecords;</TT>
<TT>BooleanVar FirstPage;</TT>
<TT>if FirstPage = True then</TT>
<TT>    &quot;(800) 555-9875&quot;;</TT></PRE>

</BLOCKQUOTE>

<PRE><TT></TT></PRE>

<DL>
	<DT><TT></TT></DT>
	<DD><B>21. </B>Now, enter the second set of page header fields, for the second page
	of the letter. Select Insert|Formula Field from the main menu, or click the Insert
	Formula Field button on the toolbar. Name the formula <TT>PageHead</TT>, and enter
	the following formula. Place the field against the left margin on the second line
	of the page header, under <TT>@Masthead1</TT>.
	<P>
</DL>



<BLOCKQUOTE>
	<PRE><TT>WhilePrintingRecords;</TT>
<TT>BooleanVar FirstPage;</TT>
<TT>if FirstPage = False then</TT>
<TT>    {Mailing LIst.CONTACT};</TT></PRE>

</BLOCKQUOTE>

<PRE><TT></TT></PRE>

<DL>
	<DT><TT></TT></DT>
	<DD><B>22. </B>Select Insert|Formula Field from the main menu, or click the Insert
	Formula Field button on the toolbar. Name the formula <TT>PageHeadDate</TT>, and
	enter the following formula. Place the field against the left margin on the third
	line of the page header.
	<P>
</DL>



<BLOCKQUOTE>
	<PRE><TT>WhilePrintingRecords;</TT>
<TT>BooleanVar FirstPage;</TT>
<TT>if FirstPage = False then</TT>
<TT>    Today;</TT></PRE>

</BLOCKQUOTE>

<PRE><TT></TT></PRE>

<DL>
	<DT><TT></TT></DT>
	<DD><B>23. </B>Select Insert|Formula Field from the main menu, or click the Insert
	Formula Field button on the toolbar. Name the formula <TT>PageHeadPage</TT>, and
	enter the following formula. Place the field against the left margin on the third
	line of the page header.
	<P>
</DL>



<BLOCKQUOTE>
	<PRE><TT>WhilePrintingRecords;</TT>
<TT>BooleanVar FirstPage;</TT>
<TT>if FirstPage = False then</TT>
<TT>    &quot;Page 2&quot;;</TT></PRE>

</BLOCKQUOTE>

<PRE><TT></TT></PRE>

<DL>
	<DT><TT></TT></DT>
	<DD><B>24. </B>Expand the size of the page header section to be one line longer than
	the bottom-most field so that both pages will have a blank line between the page
	header and the start of the text (detail section).
	<P>
	<DT></DT>
	<DD><B>25. </B>Format the page header section fields as shown in Table 9.18.
	<P>
</DL>



<BLOCKQUOTE>
	<H4>Table 9.18. The page header section fields and formatting.</H4>
	<P>
	<TABLE BORDER="1">
	<TR ALIGN="LEFT" VALIGN="TOP">
		<TD ALIGN="LEFT"><B><I>REPORT ELEMENT</I></B></TD>
		<TD ALIGN="LEFT"><B><I>Values</I></B></TD>
	</TR>
	<TR ALIGN="LEFT" VALIGN="TOP">
		<TD ALIGN="LEFT"><TT>Header Section</TT></TD>
		<TD ALIGN="LEFT"><TT>Visible</TT>, <TT>New Page Before</TT>, <TT>Keep Together</TT></TD>
	</TR>
	<TR ALIGN="LEFT" VALIGN="TOP">
		<TD ALIGN="LEFT"><TT>@Masthead1</TT></TD>
		<TD ALIGN="LEFT"><TT>String</TT>, <TT>Default Alignment</TT>, <TT>16pt Font</TT>, <TT>Bold Italic</TT></TD>
	</TR>
	<TR ALIGN="LEFT" VALIGN="TOP">
		<TD ALIGN="LEFT"><TT>@PageHead</TT></TD>
		<TD ALIGN="LEFT"><TT>String</TT>, <TT>Default Alignment</TT></TD>
	</TR>
	<TR ALIGN="LEFT" VALIGN="TOP">
		<TD ALIGN="LEFT"><TT>@Masthead2</TT></TD>
		<TD ALIGN="LEFT"><TT>String</TT>, <TT>Right Alignment</TT>, <TT>10pt Font</TT>, <TT>Italic</TT></TD>
	</TR>
	<TR ALIGN="LEFT" VALIGN="TOP">
		<TD ALIGN="LEFT"><TT>@PageHeadDate</TT></TD>
		<TD ALIGN="LEFT"><TT>Date</TT>, <TT>Default Alignment</TT>, <TT>1 March, 1999</TT></TD>
	</TR>
	<TR ALIGN="LEFT" VALIGN="TOP">
		<TD ALIGN="LEFT"><TT>@Masthead3</TT></TD>
		<TD ALIGN="LEFT"><TT>String</TT>, <TT>Right Alignment</TT>, <TT>10pt Font</TT>, <TT>Italic</TT></TD>
	</TR>
	<TR ALIGN="LEFT" VALIGN="TOP">
		<TD ALIGN="LEFT"><TT>@PageHeadPage</TT></TD>
		<TD ALIGN="LEFT"><TT>String</TT>, <TT>Default Alignment</TT></TD>
	</TR>
	</TABLE>
</P>

</BLOCKQUOTE>


<DL>
	<DT></DT>
	<DD><B>26. </B>Run the report, making sure that the different page headers print
	on the correct page.
	<P>
</DL>

<P><B>How It Works</B></P>
<P>This How-To used a Crystal Reports Boolean variable to keep track of which page
was printing. Although Crystal Reports can print different headers and footers on
the first page of the report, it treats <I>all</I><TT> </TT>subsequent pages as &quot;nonfirst
page.&quot; In situations like this form letter, in which each record prints one
or more full pages, keep track of where you are by using formulas.</P>
<P>As mentioned in the preceding set of steps, the text for the letter can be put
into fields, it can come from the database in memo fields, or it can all be put into
one large text field. It really depends on a few factors:</P>

<UL>
	<LI>If every letter will be the same, with only one or two small customizations,
	use the technique in this How-To, in which a text field is used for each paragraph.
	This technique gives you the best combination of formatting flexibility and also
	allows the customization.
	<P>
	<LI>If all the text of the letters is the same, you could use one large text field
	to hold it all. This means all the text must be formatted the same, and you must
	use trial and error to get the page headers and footers to work right. Also, Crystal
	Reports has a problem with General Protection Faults and some video drivers, particularly
	when editing text fields that have some trailing space configurations.
	<P>
	<LI>If the text in each letter changes substantially, and if much of the text is
	in the table you use for the report, you can use database fields in combination with
	text fields and formulas to control (to a low level of detail) how each letter is
	formatted and what information it contains.
</UL>

<P>Other than keeping track of which header to print, this form letter report is
created in the same way as the other reports in this chapter. Crystal Reports formulas
provide you with a great deal of flexibility in presenting database records in the
most useful format.</P>
<P><B>Comments</B></P>
<P>Using Crystal Reports to print form letters probably isn't the best way to perform
the task. Today's word processors make the job easy. Generally, they can use data
in a wide variety of formats and provide far more formatting flexibility. But as
this How-To shows, Crystal Reports has its own wide variety of flexible tools to
perform many printing jobs on its own. Who was it who said, &quot;If the only tool
you have is a screwdriver, the whole world looks like a screw&quot;?</P>
<P>
<H2>9.10 How do I...</H2>
<H3><A NAME="Print field data without extra ..."></A><B>Print field data without
extra spaces between the fields using Crystal Reports?</B></H3>
<P><B>Problem</B></P>
<P>When I create a report, I always need to put individual fields on the report for
each database field. My database splits a client's name into &quot;Mr.,&quot; &quot;John,&quot;
and &quot;Jones,&quot; and I'd like that name to appear as &quot;Mr. John Jones.&quot;
How can I do this in Crystal Reports?</P>
<P><B>Technique</B></P>
<P>This How-To creates a customer directory list using the string functions of Crystal
Reports and operators to make the report fields appear as one field, even though
the information is in several different fields. After the report is created, the
functions and operators that Crystal Reports provides to manipulate strings in your
database will be discussed.</P>
<P><B>Steps</B></P>
<P>The steps in this How-To show in detail how to create a customer directory in
Crystal Reports. Select File|Open from the Crystal main menu, and select the CUSTDIR.RPT
report file, as shown in Figure 9.32. To print the report, click the Print button
on the toolbar, or select File|Print from the main menu. To preview the report on-screen,
click the Print Preview button on the toolbar, or select File|Print Preview from
the Crystal Reports main menu.</P>

<DL>
	<DT></DT>
	<DD><B>1. </B>This How-To uses the CRYSTAL.MDB database described in the introduction
	to this chapter. Start Crystal Reports, and begin a new report by clicking the New
	Report toolbar button or selecting File|New from the main menu. Click the Custom
	button when the Create New Report Gallery appears.
	<P>
	<DT></DT>
	<DD><B>2. </B>Make sure that Detail field names are automatically inserted into the
	page header. Select File|Options from the main menu. On the Layout tab, check the
	Insert Detail Field Titles option.
	<P>
	<DT></DT>
	<DD><B>3. </B>Click on Data File in the lower-right corner after the Create Report
	Expert expands. Use the dialog box to find the CRYSTAL.MDB Access database file.
	Click Done to close the dialog box.
	<P>
</DL>

<P><A HREF="javascript:popUp('09fig21.gif')"><B>Figure 9.32.</B></A><B> </B><I>Crystal
Reports design view for CUSTDIR.RPT.</I></P>

<DL>
	<DT><I></I></DT>
	<DD><B>4. </B>Start by adjusting the margins for the report. Select File|Page Margins
	from the Crystal Reports main menu. Set the top margin to 0.5 inch and the other
	three margins to 1.0 inch.
	<P>
	<DT></DT>
	<DD><B>5. </B>Double-click on the <TT>CoName</TT> field and enter it in the detail
	line, or drag it from the Insert Database Field window. Place the field about one-fourth
	of an inch from the left margin in the detail section.
	<P>
	<DT></DT>
	<DD><B>6. </B>Now, create an <TT>@Contact</TT> field, using the <TT>FormAddress</TT>,
	<TT>ContactFN</TT>, and <TT>ContactLN</TT> fields. Select Insert|Formula Field from
	the Crystal Reports main menu, or click the Insert Formula Field button on the toolbar.
	Name the field <TT>Contact</TT>, and enter this formula. Place the field to the right
	of the <TT>CoName</TT> field.
	<P>
</DL>



<BLOCKQUOTE>
	<PRE><TT>WhilePrintingRecords;</TT>
<TT>StringVar BuiltStr;</TT>
<TT>if Length({COMPANY.FORMADDRES}) &gt; 0 then</TT>
<TT>    BuiltStr := TrimRight({COMPANY.FORMADDRES}) + &quot; &quot;;</TT>
<TT>BuiltStr := BuiltStr + TrimRight({COMPANY.CONTACTFN}) + &quot; &quot;</TT>
<TT>+ TrimRight({COMPANY.CONTACTLN});</TT></PRE>

</BLOCKQUOTE>

<PRE><TT></TT></PRE>

<DL>
	<DT><TT></TT></DT>
	<DD><B>7. </B>Select Insert|Formula Field from the Crystal Reports main menu, or
	click the Insert Formula Field button on the toolbar. Name the field <TT>CustomerID</TT>,
	and enter this formula. Place the field to the right of the <TT>@Contact</TT> formula
	field.
	<P>
</DL>



<BLOCKQUOTE>
	<PRE><TT>TrimRight({COMPANY.CUSTNUM})</TT></PRE>

</BLOCKQUOTE>

<PRE><TT></TT></PRE>

<DL>
	<DT><TT></TT></DT>
	<DD><B>8. </B>Enlarge the height of the detail section by one line by dragging the
	lower-section line down with the mouse. To expand the section using the keyboard,
	place the text cursor at the beginning of the last line of the section and press
	Enter once.
	<P>
	<DT></DT>
	<DD><B>9. </B>Select Insert|Formula Field from the Crystal Reports main menu, or
	click the Insert Formula Field button on the toolbar. Name the field <TT>CompanyAddress</TT>,
	and enter this formula. Place the field on the second line of the detail section,
	about one-half inch to the right of the left margin. Delete the field title Crystal
	Reports automatically generated from the Page Header section.
	<P>
</DL>



<BLOCKQUOTE>
	<PRE><TT>WhilePrintingRecords;</TT>
<TT>TrimRight({COMPANY.ADDRESS}) + &quot;, &quot; +</TT>
<TT>TrimRight({COMPANY.CITY}) + &quot;, &quot; +</TT>
<TT>TrimRight({COMPANY.STATE}) + &quot; &quot; +</TT>
<TT>{COMPANY.ZIP_POSTAL}</TT></PRE>

</BLOCKQUOTE>

<PRE><TT></TT></PRE>

<DL>
	<DT><TT></TT></DT>
	<DD><B>10. </B>Format these detail section fields as shown in Table 9.19.
	<P>
</DL>



<BLOCKQUOTE>
	<H4>Table 9.19. The detail section fields and formatting.</H4>
	<P>
	<TABLE BORDER="1">
	<TR ALIGN="LEFT" VALIGN="TOP">
		<TD ALIGN="LEFT"><B><I>REPORT ELEMENT</I></B></TD>
		<TD ALIGN="LEFT"><B><I>Values</I></B></TD>
	</TR>
	<TR ALIGN="LEFT" VALIGN="TOP">
		<TD ALIGN="LEFT"><TT>Detail Section</TT></TD>
		<TD ALIGN="LEFT"><TT>Visible</TT></TD>
	</TR>
	<TR ALIGN="LEFT" VALIGN="TOP">
		<TD ALIGN="LEFT"><TT>@CustomerID</TT></TD>
		<TD ALIGN="LEFT"><TT>String,</TT> <TT>Centered</TT> <TT>Alignment</TT></TD>
	</TR>
	<TR ALIGN="LEFT" VALIGN="TOP">
		<TD ALIGN="LEFT"><TT>COMPANY.CONAME</TT></TD>
		<TD ALIGN="LEFT"><TT>String,</TT> <TT>Default</TT> <TT>Alignment</TT></TD>
	</TR>
	<TR ALIGN="LEFT" VALIGN="TOP">
		<TD ALIGN="LEFT"><TT>@Contact</TT></TD>
		<TD ALIGN="LEFT"><TT>String,</TT> <TT>Default</TT> <TT>Alignment</TT></TD>
	</TR>
	<TR ALIGN="LEFT" VALIGN="TOP">
		<TD ALIGN="LEFT"><TT>@CompanyAddress</TT></TD>
		<TD ALIGN="LEFT"><TT>String,</TT> <TT>Default</TT> <TT>Alignment,</TT> <TT>Multiple</TT> <TT>Lines</TT></TD>
	</TR>
	</TABLE>
</P>

</BLOCKQUOTE>


<DL>
	<DT></DT>
	<DD><B>11. </B>Insert a report heading in the page header. Select Insert|Text Field
	from the Crystal Reports main menu, and enter <TT>Customer</TT> <TT>Directory</TT>.
	Place the field at the upper-left corner of the report area. Wait to adjust the width
	of the field until you change the font size.
	<P>
	<DT></DT>
	<DD><B>12. </B>As you entered fields in the detail section, Crystal Reports should
	have inserted corresponding column titles in the page header section. Adjust those
	text fields so that they are more or less above the appropriate field. You'll need
	to adjust them later when everything else is finished so that they are aesthetically
	pleasing.
	<P>
	<DT></DT>
	<DD><B>13. </B>Expand the size of the page header by dragging the lower edge down
	one line of text. Select Insert|Line from the Crystal Reports main menu, or click
	the Insert Line button on the toolbar. Place the tip of the drawing tool at the left
	margin, just a bit lower than the bottom edge of the line of column headings. Drag
	the tool across the width of the report, and release the mouse button at the right
	margin. Click the line with the right mouse button, and select Change Format from
	the popup menu, or select Format|Line from the main menu. On the Width line, select
	the third box from the right, for a line width of 2.50 points. Click OK to close
	the Line Format window.
	<P>
	<DT></DT>
	<DD><B>14. </B>Add a page number in the page footer section. Select Insert|Special
	Field|Page Number.
	<P>
	<DT></DT>
	<DD><B>15. </B>Format the page header and footer section fields, as shown in Table
	9.20.
	<P>
</DL>



<BLOCKQUOTE>
	<H4>Table 9.20. The page header and footer section fields and formatting.</H4>
	<P>
	<TABLE BORDER="1">
	<TR ALIGN="LEFT" VALIGN="TOP">
		<TD ALIGN="LEFT"><B><I>REPORT ELEMENT</I></B></TD>
		<TD ALIGN="LEFT"><B><I>Values</I></B></TD>
	</TR>
	<TR ALIGN="LEFT" VALIGN="TOP">
		<TD ALIGN="LEFT"><TT>Header Section</TT></TD>
		<TD ALIGN="LEFT"><TT>Visible</TT>, <TT>New Page Before</TT>, <TT>Keep Together</TT></TD>
	</TR>
	<TR ALIGN="LEFT" VALIGN="TOP">
		<TD ALIGN="LEFT"><TT>Text Field</TT></TD>
		<TD ALIGN="LEFT"><TT>Customer</TT> <TT>Directory</TT></TD>
	</TR>
	<TR ALIGN="LEFT" VALIGN="TOP">
		<TD ALIGN="LEFT"></TD>
		<TD ALIGN="LEFT"><TT>String</TT>, <TT>Centered Alignment</TT>, <TT>14pt Font</TT>, <TT>Bold Italic</TT></TD>
	</TR>
	<TR ALIGN="LEFT" VALIGN="TOP">
		<TD ALIGN="LEFT"><TT>Text Field</TT></TD>
		<TD ALIGN="LEFT"><TT>Contact</TT></TD>
	</TR>
	<TR ALIGN="LEFT" VALIGN="TOP">
		<TD ALIGN="LEFT"></TD>
		<TD ALIGN="LEFT"><TT>String</TT>, <TT>Left Alignment</TT></TD>
	</TR>
	<TR ALIGN="LEFT" VALIGN="TOP">
		<TD ALIGN="LEFT"><TT>Text Field</TT></TD>
		<TD ALIGN="LEFT"><TT>Customer</TT></TD>
	</TR>
	<TR ALIGN="LEFT" VALIGN="TOP">
		<TD ALIGN="LEFT"></TD>
		<TD ALIGN="LEFT"><TT>String</TT>, <TT>Left Alignment</TT></TD>
	</TR>
	<TR ALIGN="LEFT" VALIGN="TOP">
		<TD ALIGN="LEFT"><TT>Text Field</TT></TD>
		<TD ALIGN="LEFT"><TT>Customer ID</TT></TD>
	</TR>
	<TR ALIGN="LEFT" VALIGN="TOP">
		<TD ALIGN="LEFT"></TD>
		<TD ALIGN="LEFT"><TT>String</TT>, <TT>Centered Alignment</TT></TD>
	</TR>
	<TR ALIGN="LEFT" VALIGN="TOP">
		<TD ALIGN="LEFT"><TT>Line</TT></TD>
		<TD ALIGN="LEFT"><TT>2.50pt Width</TT></TD>
	</TR>
	<TR ALIGN="LEFT" VALIGN="TOP">
		<TD ALIGN="LEFT"><TT>Footer Section</TT></TD>
		<TD ALIGN="LEFT"><TT>Visible</TT>, <TT>New Page After</TT>, <TT>Keep Together</TT>, <TT>Print at Page</TT>,
			<TT>Bottom</TT></TD>
	</TR>
	<TR ALIGN="LEFT" VALIGN="TOP">
		<TD ALIGN="LEFT"><TT>@PageNo</TT></TD>
		<TD ALIGN="LEFT"><TT>String</TT>, <TT>Right Alignment</TT></TD>
	</TR>
	</TABLE>
</P>

</BLOCKQUOTE>


<DL>
	<DT></DT>
	<DD><B>16. </B>This finishes the Customer Directory report. Remember to save the
	file, calling it CUSTDIR.RPT.
	<P>
</DL>

<P><B>How It Works</B></P>
<P>Crystal Reports has several functions and operators for converting other data
types to strings and manipulating strings to appear the way you want. Table 9.21
lists the primary functions that Crystal Reports provides for this purpose, and Table
9.22 lists the operators that are most useful.</P>
<P>
<H4>Table 9.21. Useful Crystal Reports functions for manipulating strings.</H4>
<P>
<TABLE BORDER="1">
	<TR ALIGN="LEFT" VALIGN="TOP">
		<TD ALIGN="LEFT"><B><I>FUNCTION</I></B></TD>
		<TD ALIGN="LEFT"><B><I>Description</I></B></TD>
	</TR>
	<TR ALIGN="LEFT" VALIGN="TOP">
		<TD ALIGN="LEFT"><TT>Length(<I>x</I>)</TT></TD>
		<TD ALIGN="LEFT">Indicates the number of characters in the string, including leading and trailing
			spaces</TD>
	</TR>
	<TR ALIGN="LEFT" VALIGN="TOP">
		<TD ALIGN="LEFT"><TT>LowerCase (<I>x</I>)</TT></TD>
		<TD ALIGN="LEFT">Converts all alphabetical characters in the string to lowercase</TD>
	</TR>
	<TR ALIGN="LEFT" VALIGN="TOP">
		<TD ALIGN="LEFT"><TT>NumericText(<I>fieldname</I>)</TT></TD>
		<TD ALIGN="LEFT">Indicates whether all characters are numeric</TD>
	</TR>
	<TR ALIGN="LEFT" VALIGN="TOP">
		<TD ALIGN="LEFT"><TT>ReplicateString(x, n)</TT></TD>
		<TD ALIGN="LEFT">Prints string <I><TT>x</TT></I>, <I><TT>n</TT></I> times</TD>
	</TR>
	<TR ALIGN="LEFT" VALIGN="TOP">
		<TD ALIGN="LEFT"><TT>ToNumber (<I>x</I>)</TT></TD>
		<TD ALIGN="LEFT">Converts the string to a number</TD>
	</TR>
	<TR ALIGN="LEFT" VALIGN="TOP">
		<TD ALIGN="LEFT"><TT>ToText (<I>x</I>)</TT></TD>
		<TD ALIGN="LEFT">Converts a number to a text string, with two decimal places</TD>
	</TR>
	<TR ALIGN="LEFT" VALIGN="TOP">
		<TD ALIGN="LEFT"><TT>ToText (<I>x</I>, <I># places</I>)</TT></TD>
		<TD ALIGN="LEFT">Converts a number to a text string, with <I><TT>#</TT></I> decimal places</TD>
	</TR>
	<TR ALIGN="LEFT" VALIGN="TOP">
		<TD ALIGN="LEFT"><TT>TrimLeft (<I>x</I>)</TT></TD>
		<TD ALIGN="LEFT">Removes leading spaces from the string</TD>
	</TR>
	<TR ALIGN="LEFT" VALIGN="TOP">
		<TD ALIGN="LEFT"><TT>TrimRight (<I>x</I>)</TT></TD>
		<TD ALIGN="LEFT">Removes trailing spaces from the string</TD>
	</TR>
	<TR ALIGN="LEFT" VALIGN="TOP">
		<TD ALIGN="LEFT"><TT>UpperCase (<I>x</I>)</TT></TD>
		<TD ALIGN="LEFT">Converts all alphabetical characters in the string to uppercase</TD>
	</TR>
</TABLE>

<H4>Table 9.22. Useful Crystal Reports operators for manipulating strings.</H4>
<P>
<TABLE BORDER="1">
	<TR ALIGN="LEFT" VALIGN="TOP">
		<TD ALIGN="LEFT"><B><I>FUNCTION</I></B></TD>
		<TD ALIGN="LEFT"><B><I>DESCRIPTION</I></B></TD>
	</TR>
	<TR ALIGN="LEFT" VALIGN="TOP">
		<TD ALIGN="LEFT"><TT>+</TT></TD>
		<TD ALIGN="LEFT">Concatenation</TD>
	</TR>
	<TR ALIGN="LEFT" VALIGN="TOP">
		<TD ALIGN="LEFT"><TT>[]</TT></TD>
		<TD ALIGN="LEFT">Subscript</TD>
	</TR>
	<TR ALIGN="LEFT" VALIGN="TOP">
		<TD ALIGN="LEFT"><TT>In</TT></TD>
		<TD ALIGN="LEFT">In string</TD>
	</TR>
</TABLE>
</P>
<P>Crystal Reports likes an array of characters, so you can use array notation to
extract characters from a string, as shown in the following examples. Using a field
called <TT>Address</TT>:</P>


<BLOCKQUOTE>
	<PRE><TT>{Company.Address} = &quot;1245 East Elm Lane&quot;</TT></PRE>

</BLOCKQUOTE>

<PRE><TT></TT></PRE>
<P>Use the substring operator in the following lines to show different extractions:</P>


<BLOCKQUOTE>
	<PRE><TT>{Company.Address}[1 to 5] equals &quot;1245 &quot;</TT>
<TT>{Company.Address}[6 to 200] equals &quot;East Elm Lane&quot;</TT>
<TT>{Company.Address}[3 to Len(TrimRight({Company.Address}))</TT>
<TT>    equals &quot;45 East Elm Lane&quot;</TT></PRE>

</BLOCKQUOTE>

<PRE><TT></TT></PRE>
<P>Here are a couple of final notes about strings in Crystal Reports:</P>

<UL>
	<LI>When you trim and concatenate strings, remember to add spaces where you need
	them. For example, you needed to include a space within the quotation marks when
	you concatenated the <TT>FormAddress</TT>, <TT>ContactFN</TT>, and <TT>ContactLN</TT>
	fields. Otherwise, there would have been no space between the names.
	<P>
	<LI>In some databases, such as Paradox, it isn't necessary to use the <TT>TrimRight</TT>
	function to eliminate trailing spaces. Paradox includes a null character at the end
	of the string, effectively making the length of the string the number of characters
	without trailing spaces. It doesn't hurt to include the <TT>TrimRight</TT> function,
	because the format could change in the future or you might need to adapt the report
	to be used with another database.
</UL>

<H4><B>COMMENTS</B></H4>
<P>Although Crystal provides many options for manipulating strings, consider carefully
the best way to accomplish your goal, especially if the database server is able to
perform your task. The use of SQL enables you to perform many string operations in
the database and simplifies Crystal operations. In some cases, printing directly
from Visual Basic might be the best solution.</P>
<P>
<H2>9.11 How do I...</H2>
<H3><A NAME="Prevent blank lines from being ..."></A><B>Prevent blank lines from
being printed when a field contains no data using Crystal Reports?</B></H3>
<P><B>Problem</B></P>
<P>We use some tables that have many fields that only occasionally have data in them.
How can I set up a report so that a line prints only when it has data, and still
allow memo fields with lots of data to print in their entirety?</P>
<P><B>Technique</B></P>
<P>This How-To uses two of the space saving features of Crystal Reports--the Suppress
Blank Lines option and Print on Multiple Lines option for text boxes. The Suppress
Blank Lines option applies to an entire section, setting the report to print only
lines that contain data. That means you can conserve paper and save trees that would
otherwise be needed to print much longer reports containing many blank fields.</P>
<P>The Print on Multiple Lines option lets you place a text box on the report as
a single line so that the box doesn't need to be made large enough to show the longest
possible string, wasting space on the report. This option tells Crystal Reports to
go ahead and expand the field vertically to fit the text if the text requires two
or more lines. Otherwise, only the portion of the string that fits in the first line
of the field will print on the report.</P>
<P>Even when using these two options, you still need to design reports intelligently.
It would be easy to have a line with several fields, any of which could be blank
or contain data. The line would print if <I>any</I> of the fields has data, so you
need to try to put only a single field on each line or to group fields together that
are likely to be blank at the same time.</P>
<P>This How-To uses the Publishers, Publishers Comments, and Titles tables in the
BIBLIO.MDB file. Each table has several fields that are often blank mixed in with
long memo fields.</P>
<P><B>Steps</B></P>
<P>The steps in this How-To show in detail how to create a fairly complex report
from multiple tables and allow for missing information. To open and run a report
in Crystal Reports, select File|Open from the Crystal main menu, and select the TITLES.RPT
report file, as shown in Figure 9.33. To print the report, click the Print button
on the toolbar, or select File|Print from the main menu. To preview the report onscreen,
click the Print Preview button on the toolbar, or select File|Print Preview from
the Crystal Reports main menu.</P>
<P><A HREF="javascript:popUp('09fig23.gif')"><B>Figure 9.33.</B></A><B> </B><I>Crystal
Reports design view for the publisher titles report.</I></P>

<DL>
	<DT><I></I></DT>
	<DD><B>1. </B>This How-To uses the BIBLIO.MDB database described in the introduction
	to this chapter. Start Crystal Reports, and begin a new report by clicking the New
	Report toolbar button or selecting File|New from the main menu. Click the Custom
	button when the Create New Report Gallery appears.
	<P>
	<DT></DT>
	<DD><B>2. </B>Make sure that Detail field names are not automatically inserted into
	the page header section. Select File|Options from the main menu. On the Layout tab,
	uncheck the Insert Detail Field Titles option.
	<P>
	<DT></DT>
	<DD><B>3. </B>Click on Data File in the lower-right corner after the Create Report
	Expert expands. Use the dialog box to locate the BIBLIO.MDB Access database file
	installed with Visual Basic.
	<P>
	<DT></DT>
	<DD><B>4. </B>Start by adjusting the margins for the report. Select File|Page Margins
	from the Crystal Reports main menu. Set the top margin to 0.5 inch and the other
	three margins to 1.0 inch.
	<P>
	<DT></DT>
	<DD><B>5. </B>Add an asterisk at the beginning of the Details line to make the individual
	titles (Detail section) stand out more clearly to the reader of the report. Enter
	this as a formula field, because it is conceivable that a record in the table would
	not have a title but would still have other relevant information. Select Insert|Formula
	Field from the main menu, or click the Insert Formula Field button on the toolbar.
	Enter the formula name <TT>Bullet</TT>, and insert the following formula. Place the
	field about one-fourth of an inch from the left margin, and make its width just wide
	enough for the asterisk.
	<P>
</DL>



<BLOCKQUOTE>
	<PRE><TT>if Not IsNull({Titles.Title}) then</TT>
<TT>    &quot;*&quot;</TT></PRE>

</BLOCKQUOTE>

<PRE><TT></TT></PRE>

<DL>
	<DT><TT></TT></DT>
	<DD><B>6. </B>Double-click on the <TT>Titles.Title</TT> field and enter it in the
	detail line, or drag it from the Insert Database Field window. Place the field just
	to the right of the Bullet field. Don't adjust the width until after the font size
	is set.
	<P>
	<DT></DT>
	<DD><B>7. </B>Expand the size of the detail section by dragging the lower boundary
	down as far as it will go. Because Crystal Reports limits the amount by which you
	can expand a section's size, you might need to expand the section again as you add
	fields.
	<P>
	<DT></DT>
	<DD><B>8. </B>Double-click on the Description field and enter it in the detail line,
	or drag it from the Insert Database Field window. Place the field on the line below
	the <TT>Title</TT> field, about one-fourth of an inch to the right of the Title.
	Drag the right border to the right margin so that the field takes up the remaining
	width of the report.
	<P>
	<DT></DT>
	<DD><B>9. </B>In the same way, add the <TT>Notes</TT>, <TT>Subject</TT>, and <TT>Comments</TT>
	fields to the report, adding each below the preceding field. Align the <TT>Notes</TT>
	and <TT>Subject</TT> fields with the <TT>Description</TT> field, and place the <TT>Comments</TT>
	field about one-fourth of an inch to the right. Expand all the fields so that the
	right edge of each field is at the right margin of the report.
	<P>
	<DT></DT>
	<DD><B>10. </B>Format these detail section fields as shown in Table 9.23. Remember
	to expand the <TT>Title</TT> field to the right margin after changing the font to
	bold. Also, if there are any blank lines at the bottom of the detail section, drag
	the lower detail section border up to the bottom of the <TT>Comments</TT> field.
	A very quick way to format for multiple lines is to double-click the field for which
	you want to format a string.
	<P>
</DL>



<BLOCKQUOTE>
	<H4>Table 9.23. The detail section fields and formatting.</H4>
	<P>
	<TABLE BORDER="1">
	<TR ALIGN="LEFT" VALIGN="TOP">
		<TD ALIGN="LEFT"><B><I>REPORT ELEMENT</I></B></TD>
		<TD ALIGN="LEFT"><B><I>Values</I></B></TD>
	</TR>
	<TR ALIGN="LEFT" VALIGN="TOP">
		<TD ALIGN="LEFT"><TT>Detail Section</TT></TD>
		<TD ALIGN="LEFT"><TT>Visible</TT>, <TT>Suppress Blank Lines</TT></TD>
	</TR>
	<TR ALIGN="LEFT" VALIGN="TOP">
		<TD ALIGN="LEFT"><TT>@Bullet</TT></TD>
		<TD ALIGN="LEFT"><TT>String</TT>, <TT>Default Alignment</TT></TD>
	</TR>
	<TR ALIGN="LEFT" VALIGN="TOP">
		<TD ALIGN="LEFT"><TT>Titles.Title</TT></TD>
		<TD ALIGN="LEFT"><TT>String</TT>, <TT>Default Alignment</TT>, <TT>Font 10pt Bold</TT>, <TT>Multiple
			Lines</TT></TD>
	</TR>
	<TR ALIGN="LEFT" VALIGN="TOP">
		<TD ALIGN="LEFT"><TT>Titles.Description</TT></TD>
		<TD ALIGN="LEFT"><TT>String</TT>, <TT>Default Alignment</TT>, <TT>Multiple Lines</TT></TD>
	</TR>
	<TR ALIGN="LEFT" VALIGN="TOP">
		<TD ALIGN="LEFT"><TT>Titles.Notes</TT></TD>
		<TD ALIGN="LEFT"><TT>String</TT>, <TT>Default Alignment</TT>, <TT>Multiple Lines</TT></TD>
	</TR>
	<TR ALIGN="LEFT" VALIGN="TOP">
		<TD ALIGN="LEFT"><TT>Titles.Subject</TT></TD>
		<TD ALIGN="LEFT"><TT>String</TT>, <TT>Default Alignment</TT>, <TT>Multiple Lines</TT></TD>
	</TR>
	<TR ALIGN="LEFT" VALIGN="TOP">
		<TD ALIGN="LEFT"><TT>Titles.Comments</TT></TD>
		<TD ALIGN="LEFT"><TT>Memo</TT>, <TT>Default Alignment</TT>, <TT>Multiple Lines</TT></TD>
	</TR>
	</TABLE>
</P>

</BLOCKQUOTE>


<DL>
	<DT></DT>
	<DD><B>11. </B>Now add the Company Name group section. Select Insert|Group Section
	from the Crystal Reports main menu. From the first list box, select <TT>Publishers.Company</TT>
	<TT>Name</TT>. Leave the sorting option set to ascending order, which is the default,
	and click OK to proceed.
	<P>
	<DT></DT>
	<DD><B>12. </B>The first field you'll enter in this group section is the publisher's
	company name. There is a problem, however, with simply adding the field to the report.
	Some of the publishers have a long list of books that span more than one page, whereas
	others have none. It would be nice to be able to reprint the company name at the
	beginning of the next page if that company's list of books continues from one page
	to the next. So you'll enter the company name as a formula, testing to see whether
	this is a continuation. Select Insert|Formula Field from the Crystal Reports main
	menu, or click the Insert Formula Field button on the toolbar. Name the formula <TT>GroupHeaderLater</TT>,
	and enter the following formula. The formula first checks to see whether the preceding
	company name was null, in which case the name is printed. Otherwise, the new company
	name is checked to see whether it is the same as the preceding name. If it isn't,
	you'll start a list for a new company, and print the name. If this is a continuation
	list, you'll print the name in a formula field that can be put in the page header.
	<P>
</DL>



<BLOCKQUOTE>
	<PRE><TT>If PreviousIsNull({Publishers.Company Name}) then</TT>
<TT>    {Publishers.Company Name}</TT>
<TT>else</TT>
<TT>     if Previous ({Publishers.Company Name})  {Publishers.Company Name} then</TT>
<TT>        {Publishers.Company Name}</TT>
<TT>    else</TT>
<TT>        &quot;&quot;</TT></PRE>

</BLOCKQUOTE>

<PRE><TT></TT></PRE>

<DL>
	<DT><TT></TT></DT>
	<DD><B>13. </B>Next, enter the publisher's phone number. There might not be a phone
	number in the file, and you want to label the number as the phone (and later the
	fax number as the fax); therefore, you should enter a formula field. That way, you
	won't have the word &quot;Phone:&quot; sitting in the report with nothing else there.
	Select Insert|Formula Field from the Crystal Reports main menu, or click the Insert
	Formula Field button on the toolbar. Name the formula <TT>PubPhone</TT>, and enter
	the following formula. Place the field to the right of the <TT>@GroupHeadLater</TT>
	field.
	<P>
</DL>



<BLOCKQUOTE>
	<PRE><TT>WhilePrintingRecords;</TT>
<TT>if Length({Publishers.Telephone}) &gt; 0 then</TT>
<TT>    &quot;Phone: &quot; + {Publishers.Telephone}</TT></PRE>

</BLOCKQUOTE>

<PRE><TT></TT></PRE>

<DL>
	<DT><TT></TT></DT>
	<DD><B>14. </B>Do the same thing for the fax number. Select Insert|Formula Field
	from the Crystal Reports main menu, or click the Insert Formula Field button on the
	toolbar. Name the formula <TT>PubFax</TT>, and enter the following formula. Place
	the field to the right of the <TT>@PubPhone</TT> field.
	<P>
</DL>



<BLOCKQUOTE>
	<PRE><TT>WhilePrintingRecords;</TT>
<TT>if Length({Publishers.Fax}) &gt; 0 then</TT>
<TT>    &quot;Fax: &quot; + {Publishers.Fax}</TT>
</PRE>

</BLOCKQUOTE>


<DL>
	<DT></DT>
	<DD><B>15. </B>Double-click on the <TT>Address</TT> field in the Insert Database
	Field window and enter it in the group section, or drag it from the Insert Database
	Field window. Place the field on the line below the <TT>@GroupHeaderLater</TT> field,
	about one-fourth of an inch to the right of that field. Drag the right border to
	make the width of the field the same as the <TT>@GroupHeaderLater</TT> field.
	<P>
	<DT></DT>
	<DD><B>16. </B>The city, state, and zip code should appear on one line, so enter
	them as a formula field. Select Insert|Formula Field from the Crystal Reports main
	menu, or click the Insert Formula Field button on the toolbar. Name the formula <TT>PubCityStateZip</TT>,
	and enter the following formula. Place the field on the line after the <TT>Address</TT>
	field in the group section header.
	<P>
</DL>



<BLOCKQUOTE>
	<PRE><TT>WhilePrintingRecords;</TT>
<TT>TrimRight({Publishers.City}) + &quot;, &quot; + TrimRight({Publishers.State}) +</TT>
<TT>&quot; &quot; + {Publishers.Zip}</TT></PRE>

</BLOCKQUOTE>

<PRE><TT></TT></PRE>

<DL>
	<DT><TT></TT></DT>
	<DD><B>17. </B>Double-click on the <TT>Publisher.Comments</TT> field in the Insert
	Database Field window and enter it in the group section, or drag it from the Insert
	Database Field window. Place the field on the line below the <TT>@PubAddress</TT>
	field, and align the left edge with that field. Drag the right edge of the field
	to the report's right margin.
	<P>
	<DT></DT>
	<DD><B>18. </B>Now, enter the fields in the group footer that show the number of
	titles the publisher has on the list. Select Insert|Text Field from the main menu,
	or click the Insert Text Field button on the toolbar. Enter <TT>Title(s)</TT> in
	the field, and place the field in the first group section footer line, at the far
	right margin. Adjust the size of the field so that it is only wide enough to show
	the text.
	<P>
	<DT></DT>
	<DD><B>19. </B>To insert a summary field, you must first highlight the field you
	want to count. Click on the <TT>Title</TT> field in the detail section, and then
	select Insert|Summary from the main menu so that the Insert Summary window appears.
	Select <TT>Count</TT> from the first list box, and leave the second list box to the
	default group section #1 sorting and grouping. The window should look like the one
	shown in Figure 9.34 just before you click OK to enter the field. Place this field
	so that it reaches from the left margin to the left edge of the Title(s) text box.
	<P>
	<DT></DT>
	<DD><B>20. </B>Format these group section fields as shown in Table 9.24.
	<P>
</DL>

<P><A HREF="javascript:popUp('09fig24.gif')"><B>Figure 9.34.</B></A><B> </B><I>The
Insert Summary window.</I></P>


<BLOCKQUOTE>
	<H4>Table 9.24. The detail section fields and formatting.</H4>
	<P>
	<TABLE BORDER="1">
	<TR ALIGN="LEFT" VALIGN="TOP">
		<TD ALIGN="LEFT"><B><I>REPORT ELEMENT</I></B></TD>
		<TD ALIGN="LEFT"><B><I>Values</I></B></TD>
	</TR>
	<TR ALIGN="LEFT" VALIGN="TOP">
		<TD ALIGN="LEFT"><TT>Group header #1:</TT></TD>
		<TD ALIGN="LEFT"><TT>Suppress Blank Lines</TT>, <TT>Keep Section Together</TT></TD>
	</TR>
	<TR ALIGN="LEFT" VALIGN="TOP">
		<TD ALIGN="LEFT"><TT>@PubFax</TT></TD>
		<TD ALIGN="LEFT"><TT>String</TT>, <TT>Default Alignment</TT></TD>
	</TR>
	<TR ALIGN="LEFT" VALIGN="TOP">
		<TD ALIGN="LEFT"><TT>@PubPhone</TT></TD>
		<TD ALIGN="LEFT"><TT>String</TT>, <TT>Default Alignment</TT></TD>
	</TR>
	<TR ALIGN="LEFT" VALIGN="TOP">
		<TD ALIGN="LEFT"><TT>@GroupHeaderLater</TT></TD>
		<TD ALIGN="LEFT"><TT>String</TT>, <TT>Default Alignment</TT>, <TT>12pt Font</TT>, <TT>Bold Italic</TT>,</TD>
	</TR>
	<TR ALIGN="LEFT" VALIGN="TOP">
		<TD ALIGN="LEFT"></TD>
		<TD ALIGN="LEFT"><TT>Multiple Lines</TT></TD>
	</TR>
	<TR ALIGN="LEFT" VALIGN="TOP">
		<TD ALIGN="LEFT"><TT>Publishers.Address</TT></TD>
		<TD ALIGN="LEFT"><TT>String</TT>, <TT>Default Alignment</TT></TD>
	</TR>
	<TR ALIGN="LEFT" VALIGN="TOP">
		<TD ALIGN="LEFT"><TT>@PubCityStateZip</TT></TD>
		<TD ALIGN="LEFT"><TT>String</TT>, <TT>Default Alignment</TT></TD>
	</TR>
	<TR ALIGN="LEFT" VALIGN="TOP">
		<TD ALIGN="LEFT"><TT>Comments</TT></TD>
		<TD ALIGN="LEFT"><TT>Default Alignment</TT>, <TT>Multiple Lines</TT></TD>
	</TR>
	<TR ALIGN="LEFT" VALIGN="TOP">
		<TD ALIGN="LEFT"><TT>Title(s)</TT></TD>
		<TD ALIGN="LEFT"><TT>String</TT>, <TT>Default Alignment</TT></TD>
	</TR>
	<TR ALIGN="LEFT" VALIGN="TOP">
		<TD ALIGN="LEFT"><TT>Group footer #1:</TT></TD>
		<TD ALIGN="LEFT"><TT>Suppress Blank Lines</TT></TD>
	</TR>
	<TR ALIGN="LEFT" VALIGN="TOP">
		<TD ALIGN="LEFT"><TT>Count of Titles.Title</TT></TD>
		<TD ALIGN="LEFT"><TT>Numeric</TT>, <TT>Default Alignment</TT>, <TT>Leading</TT> <TT>Minus</TT>, <TT>0
			Decimal</TT></TD>
	</TR>
	<TR ALIGN="LEFT" VALIGN="TOP">
		<TD ALIGN="LEFT"></TD>
		<TD ALIGN="LEFT"><TT>Places</TT>, <TT>Rounding: None</TT>, <TT>Thousands Symbol: `,',</TT></TD>
	</TR>
	<TR ALIGN="LEFT" VALIGN="TOP">
		<TD ALIGN="LEFT"></TD>
		<TD ALIGN="LEFT"><TT>Decimal</TT></TD>
	</TR>
	<TR ALIGN="LEFT" VALIGN="TOP">
		<TD ALIGN="LEFT"></TD>
		<TD ALIGN="LEFT"><TT>Symbol: `.'</TT></TD>
	</TR>
	</TABLE>
</P>

</BLOCKQUOTE>


<DL>
	<DT></DT>
	<DD><B>21. </B>Now move to the page header and footer. Select Insert|Text Field from
	the main menu, or click the Insert Text Field button on the toolbar. Enter the text
	<TT>Publisher Titles Detail</TT>, and place the field at the upper-left corner of
	the page header section. Wait to widen the field until you change the font so that
	Crystal Reports doesn't make the field so wide that you can't adjust the right edge.
	<P>
	<DT></DT>
	<DD><B>22. </B>Now, enter a group header to print the publisher's company name if
	the list of titles continues from the preceding page. Select Insert|Formula Field
	from the main menu, or click the Insert Formula Field button on the toolbar. Name
	the formula <TT>@GroupHeaderFirst</TT>, and enter the following formula. Place the
	field on the third line of the page header, but don't adjust its width yet.
	<P>
</DL>



<BLOCKQUOTE>
	<PRE><TT>if Previous({Publishers.Company Name}) = {Publishers.Company Name} _</TT>
<TT>then</TT>
<TT>    {Publishers.Company Name} + &quot; continued&quot;</TT>
<TT>else</TT>
<TT>    &quot;&quot;</TT></PRE>

</BLOCKQUOTE>

<PRE><TT></TT></PRE>

<DL>
	<DT><TT></TT></DT>
	<DD><B>23. </B>Now, enter a page number field in the page footer section. Select
	Insert|Formula Field from the main menu, or click the Insert Formula Field button
	on the toolbar. Name the formula <TT>@PageNo</TT>, and enter the following formula.
	Place the field on the third line of the page footer at the far-right edge of the
	line.
	<P>
</DL>



<BLOCKQUOTE>
	<PRE><TT>&quot;Page &quot; + ToText(PageNumber, 0)</TT></PRE>

</BLOCKQUOTE>

<PRE><TT></TT></PRE>

<DL>
	<DT><TT></TT></DT>
	<DD><B>24. </B>Format these page header and footer fields as shown in Table 9.25.
	<P>
</DL>

<H4>Table 9.25. The page header and footer fields and formatting.</H4>
<P>
<TABLE BORDER="1">
	<TR ALIGN="LEFT" VALIGN="TOP">
		<TD ALIGN="LEFT"><B><I>REPORT ELEMENT</I></B></TD>
		<TD ALIGN="LEFT">Values</TD>
	</TR>
	<TR ALIGN="LEFT" VALIGN="TOP">
		<TD ALIGN="LEFT"><TT>Text Field</TT></TD>
		<TD ALIGN="LEFT"><TT>Publisher Titles Detail</TT>, <TT>14 pt Font</TT>, <TT>Bold</TT></TD>
	</TR>
	<TR ALIGN="LEFT" VALIGN="TOP">
		<TD ALIGN="LEFT"><TT>@GroupHeaderFirst</TT></TD>
		<TD ALIGN="LEFT"><TT>String</TT>, <TT>Default Alignment</TT>, <TT>12pt Font</TT>, <TT>Bold Italic</TT></TD>
	</TR>
	<TR ALIGN="LEFT" VALIGN="TOP">
		<TD ALIGN="LEFT"><TT>@PageNo</TT></TD>
		<TD ALIGN="LEFT"><TT>String</TT>, <TT>Right Alignment</TT></TD>
	</TR>
</TABLE>
</P>
<P><B>How It Works</B></P>
<P>When you run this report, you should see blank lines only where they were intentionally
left in the report. Leave margins at the top and bottom of the page because some
white space makes a report more easily read and understood.</P>
<P>Two interesting features were used to create this report. The first is the Suppress
Blank Lines section formatting option. Using this option means that all you have
to do is make sure that no extraneous text appears on a line that otherwise would
be blank so that the line is not printed at all. The phone and fax fields were put
into formulas rather than separate text fields to make some of the text fields the
full (or nearly full) width of the report. This way, if any field is blank, the entire
line won't print. If two or more fields could be blank on the same line, all the
fields would have to be blank for the line not to print, resulting in a checkerboard
effect if some fields contain data and others do not.</P>
<P>The other interesting feature used in this report was a summary field. Crystal
Reports automatically calculates the maximum, minimum, count, and distinct count
on any fields indicated. This How-To used a summary field to keep count of how many
titles each publisher had on the list.</P>
<P><B>Comments</B></P>
<P>Most of this How-To has focused on making a report &quot;pretty.&quot; Although
programming style is tremendously important to how well a system works, good appearances
will be remembered by anyone who sees your creations.</P>
<P>
<H2>9.12 How do I...</H2>
<H3><A NAME="Create cross-tab reports ..."></A><B>Create cross-tab reports with Crystal
Reports?</B></H3>
<P><B>Problem</B></P>
<P>I use a table that needs to be summarized weekly in a cross-tab style report.
It is almost impossible to produce the report in Visual Basic before printing it.
Can I use Crystal Reports to produce a cross-tab report from my tables?</P>
<P><B>Technique</B></P>
<P>Crystal Reports can analyze data as well as print it. One method is a cross-tab
report, which summarizes two or more dimensions of data in tables. In this How-To
you will create a marketing analysis report that produces a breakdown of customers
by city and by the day of the week they were serviced, giving totals by weekday and
by city.</P>
<P><B>Steps</B></P>
<P>The steps in this How-To show in detail how to create a cross-tab report. To open
and run a report in Crystal Reports, select File|Open from the Crystal main menu,
and select the MAILANAL.RPT report file, shown in Figure 9.35. To print the report,
click the Print button on the toolbar, or select File|Print from the main menu. To
preview the report onscreen, click the Print Preview button on the toolbar, or select
File|Print Preview from the Crystal Reports main menu.</P>

<DL>
	<DT></DT>
	<DD><B>1. </B>This How-To uses the MAIL.MDB database described in the introduction
	to this chapter. Start Crystal Reports, and start a new report by clicking the New
	Report toolbar button or selecting File|New from the main menu. Click on Cross-Tab
	when the Create New Report Gallery appears.
	<P>
	<DT></DT>
	<DD><B>2. </B>Click on Data File when the Create Report Expert appears. Use the dialog
	box to find the MAIL.MDB Access database file. Click Done to close the dialog box.
	<P>
</DL>

<P><A HREF="javascript:popUp('09fig25.gif')"><B>Figure 9.35.</B></A><B> </B><I>The
Crystal Reports design window for marketing analysis report.</I></P>

<DL>
	<DT><I></I></DT>
	<DD><B>3. </B>From the Fields tab, add the <TT>Contact</TT>, <TT>City</TT>, <TT>State</TT>,
	and <TT>Zip</TT> fields from the MailingList table.
	<P>
	<DT></DT>
	<DD><B>4. </B>On the Style tab, enter <TT>Bulk Mail Calculation Report</TT> as the
	title.
	<P>
	<DT></DT>
	<DD><B>5. </B>After you select the database file to use for the report, the CrossTab
	window appears, as shown in Figure 9.36. The layout of this window makes it easy
	to visualize the final report. You will need to enter the field or formula used for
	the rows and columns, and then enter a field or formula for the data that is contained
	in the body of the report. Crystal Reports will then handle all the calculations
	to produce the report.
	<P>
</DL>

<P><A HREF="javascript:popUp('09fig26.gif')"><B>Figure 9.36.</B></A><B> </B><I>The
Cross Tab tab of the Crystal Reports Create Report Expert.</I></P>

<DL>
	<DT><I></I></DT>
	<DD><B>6. </B>Start by double-clicking on the Mailing List table name in the Fields
	list box so that the fields in the table appear. Drag the <TT>Mailing List.CITY</TT>
	field to the Rows cross-tab list. This tells Crystal Reports that a list of cities
	contained in the file will compose the rows of the report.
	<P>
	<DT></DT>
	<DD><B>7. </B>You will want to use the days of the week for the report columns. But
	first consider the space you have. There will be a column for each day of the week,
	plus one for the list of city names and another for the total for each city, so there
	will be nine columns altogether. If you don't abbreviate the days of the week, the
	data won't fit on a report, or part of the names will get cut off. Unfortunately,
	Crystal Reports can't print text vertically, so you should use a formula field to
	print only the first three characters of the day's name.
	<P>
	<DT></DT>
	<DD>Click the New Formula button, and enter <TT>DayOfWeek</TT> as the formula name.
	Enter the following formula, which tells Crystal Reports to use a substring consisting
	of the first three characters of the name. Drag the new formula to the Columns cross-tab
	list.
	<P>
</DL>



<BLOCKQUOTE>
	<PRE><TT>{Mailing List.Week Day}[1 to 3]</TT></PRE>

</BLOCKQUOTE>

<PRE><TT></TT></PRE>

<DL>
	<DT><TT></TT></DT>
	<DD><B>8. </B>The last step is to tell Crystal Reports what information will make
	up the body of the table. You just want to count contacts, so drag the <TT>Contact</TT>
	field to the <TT>Summarized</TT> field. (The default function for the summarized
	field is <TT>Count</TT>, so you won't need to make a change. You'll see in a moment
	how to change that.) That's all there is to designing the cross-tab layout, so click
	Preview Report to see the results so far.
	<P>
	<DT></DT>
	<DD><B>9. </B>All that is left to do is to reposition and resize the cross-tab fields
	so that the font can be read, and to enter a report title and page number. Start
	by setting the four margins of the report to 0.5 inch by selecting File|Page Margins
	from the main menu.
	<P>
	<DT></DT>
	<DD><B>10. </B>Next, move the cross-tab grid to the left so that there will be enough
	room on the page for all nine columns in the report. Use the mouse to drag the vertical
	line on the left side of the <TT>DayOfWeek</TT> column to the left until it is about
	1 to 1.5 inches from the left margin, leaving enough room for the city names to print.
	The space to the right of the <TT>Total</TT> column will contain the day-of-the-week
	columns. Narrow the <TT>Week</TT> <TT>Day</TT> column to about three-fourths of an
	inch and the <TT>Total</TT> column to about one-half of an inch. You'll need to set
	the spacings by trial and error when all the report elements have been entered into
	the report.
	<P>
	<DT></DT>
	<DD><B>11. </B>To enter a report heading, select Insert|Text Field from the main
	menu, or click the Insert Text Field button on the toolbar. Enter <TT>Marketing</TT>
	<TT>Analysis</TT> <TT>by</TT> <TT>City</TT> <TT>and</TT> <TT>Day</TT> <TT>of</TT>
	<TT>Week</TT>, and place the field in the upper-left position in the page header.
	Change the font size to 14 point by using the list of font sizes in the font toolbar,
	and click the B in the toolbar to make the font bold.
	<P>
	<DT></DT>
	<DD><B>12. </B>Enter a page number field on the page footer. First, show the Page
	Footer section by right-clicking in the gray left margin of the design window and
	selecting Show/Hide Sections from the menu. Show the Page Footer section. Then, select
	Insert|Formula Field from the main menu, or click the Insert Formula Field button
	on the toolbar. Name the formula <TT>PageNo</TT>, and enter the following formula.
	Place the field in the lower-left portion of the page footer, against the left margin.
	<P>
</DL>



<BLOCKQUOTE>
	<PRE><TT>&quot;Page &quot; + ToText(PageNumber, 0)</TT></PRE>

</BLOCKQUOTE>

<PRE><TT></TT></PRE>

<DL>
	<DT><TT></TT></DT>
	<DD><B>13. </B>If you want to make changes to the cross-tab design of the report,
	use the right mouse button to click in the gray area to the left of the page edge
	in the Cross-Tab detail section, and select Cross-Tab Layout from the popup menu.
	Then make any changes you want in the same Cross-Tab layout window you used to create
	the report. To use a summarization function other than <TT>Count</TT>, highlight
	the grid cell at the intersection of the City row and Week Day column, and select
	Edit|Summary Field from the main menu. Figure 9.37 shows the options available. The
	options for any given report depend on the type of field data selected for the <TT>Summarization</TT>
	field in the Cross-Tab layout window.
	<P>
</DL>

<P><A HREF="javascript:popUp('09fig27.gif')"><B>Figure 9.37.</B></A><B> </B><I>Cross-tab
summarization function selections.</I></P>
<P><B>How It Works</B></P>
<P>Creating a cross-tab report in Crystal Reports is an almost trivial task after
you understand how to present data using this type of report. The table used in this
How-To consists of names, addresses, dates, and week days. By using a cross-tab report,
you transform this data into a breakdown of clients by week, day, and geographic
location. In fact, the hardest part of producing the report is to size and position
the report elements so that all the fields show their data and everything fits on
the page.</P>
<P>Creating the report is easy, partially because the same record selection, sorting,
and formatting options are available with cross-tab reports as with other report
formats used in this chapter.</P>
<P><B>Comments</B></P>
<P>One rather serious flaw of Crystal Reports is that any fields or columns that
are off the right side of the report page do not print and cannot be reached in the
report design window. You can change the page orientation to landscape by using File|Printer
Setup, but even that orientation is not wide enough for some reports.</P>
<P>
<H2>9.13 How do I...</H2>
<H3><A NAME="Generate reports using ..."></A><B>Generate reports using user-entered
variables?</B></H3>
<P><B>Problem</B></P>
<P>Each time I print a report, I need to change elements of the report, such as the
record sort order, the heading, and the name of the person running the report. How
can I run a report through a Visual Basic application and change selected elements
of the report?</P>
<P><B>Technique</B></P>
<P>This How-To takes advantage of three of the properties that the Crystal Reports
custom control provides to modify the conditions under which a report is printed
at runtime in a Visual Basic application. It is simply a matter of setting the properties
of the control.</P>
<P><B>Steps</B></P>
<P>Load and run the Visual Basic application MAILLIST.VBP. From the Print Sorted
Mailing List window (see Figure 9.38), select a report type to print (City, State,
or Zip) and either enter a particular value to use in selecting records or leave
the field blank to include all records. Select a page number format to be used, and
then click the Print Report button to preview the report.</P>

<DL>
	<DT></DT>
	<DD><B>1. </B>Start by creating a simple report that you can modify when printing
	through Visual Basic (see Figure 9.39). Start Crystal Reports, and start a new report
	by clicking the New Report toolbar button or selecting File | New from the main menu.
	Click on Standard when the Create New Report Gallery appears.
	<P>
</DL>

<P><A HREF="javascript:popUp('09fig30.gif')"><B>Figure 9.38.</B></A><B> </B><I>The
Print Sorted Mailing List window (<TT>frmMailList</TT>).</I></P>
<P><A HREF="javascript:popUp('09fig31.gif')"><B>Figure 9.39.</B></A><B> </B><I>The
Crystal Reports design window for a mailing list report.</I></P>

<DL>
	<DT><I></I></DT>
	<DD><B>2. </B>Click on Data File when the Create Report Expert appears. Use the dialog
	box to find the MAIL.MDB Access database file. Click Done to close the dialog box.
	<P>
	<DT></DT>
	<DD><B>3. </B>From the Fields tab, add the Contact, City, State, Zip, and Week Day
	fields from the Mailing List table.
	<P>
	<DT></DT>
	<DD><B>4. </B>Preview the report and save the report file, calling it MAILLIST.RPT.
	<P>
	<DT></DT>
	<DD><B>5. </B>Because you want to be able to change the report heading from the Visual
	Basic application, enter the heading as a formula with a default value. That way,
	if the application doesn't change the title, something relatively meaningful will
	print. Select Insert | Text Field from the Crystal Reports main menu, or click the
	Insert Text Field button on the toolbar. Name the formula field <TT>ReportTitle</TT>,
	and enter this formula:
	<P>
</DL>



<BLOCKQUOTE>
	<PRE><TT>`Mailing List'</TT></PRE>

</BLOCKQUOTE>

<PRE><TT></TT></PRE>

<DL>
	<DT><TT></TT></DT>
	<DD>Format the title to be 14-point font, bold by using the font tool at the bottom
	of the Crystal Reports design window.
	<P>
	<DT></DT>
	<DD><B>6. </B>Insert the page number formula field <TT>@PageFooter</TT> by selecting
	Insert | Formula Filed from the main menu or clicking the Insert Formula Field button
	on the toolbar. Enter this formula:
	<P>
</DL>



<BLOCKQUOTE>
	<PRE>&quot;Page &quot; + ToText(PageNumber,0)</PRE>

</BLOCKQUOTE>

<PRE></PRE>

<DL>
	<DT></DT>
	<DD><B>7. </B>That's all there is to the report. Note that you didn't set up any
	sorting at all, nor any group sections. Next, you'll see how to make changes through
	a Visual Basic application. Remember to save the report file, calling it MAILLIST.RPT.
	<P>
	<DT></DT>
	<DD><B>8. </B>Start Visual Basic and create a new project in your work area. Save
	the default form as MAILLIST.FRM, and save the project as MAILLIST.VBP. Select Project
	| Components from the Visual Basic main menu, and make sure that the Crystal Reports
	control is selected.
	<P>
	<DT></DT>
	<DD><B>9. </B>Place the controls on the form as shown in Figure 9.38, and set the
	properties as shown in Table 9.26. Note that the Crystal Reports control is invisible
	at runtime, so place it anywhere that is convenient. Note also that the three page-number-format
	option buttons make up a control array. The label control <TT>lblInstruction</TT>
	and text box <TT>txtValue</TT> have their <TT>Visible</TT> property set to <TT>False</TT>;
	place them in the open area below the Report Type list box. Note that you are &quot;hard
	coding&quot; the name of the report to use in the properties of the Crystal Reports
	control; change its location to wherever the report is located on your drive.
	<P>
</DL>



<BLOCKQUOTE>
	<H4>Table 9.26. Objects and properties for MAILLIST.FRM.</H4>
	<P>
	<TABLE BORDER="1">
	<TR ALIGN="LEFT" VALIGN="TOP">
		<TD ALIGN="LEFT"><B><I>OBJECT</I></B></TD>
		<TD ALIGN="LEFT"><B><I>PROPERTY</I></B></TD>
		<TD ALIGN="LEFT"><B><I>Setting</I></B></TD>
	</TR>
	<TR ALIGN="LEFT" VALIGN="TOP">
		<TD ALIGN="LEFT"><TT>Form</TT></TD>
		<TD ALIGN="LEFT"><TT>Name</TT></TD>
		<TD ALIGN="LEFT"><TT>frmMailList</TT></TD>
	</TR>
	<TR ALIGN="LEFT" VALIGN="TOP">
		<TD ALIGN="LEFT"></TD>
		<TD ALIGN="LEFT"><TT>Caption</TT></TD>
		<TD ALIGN="LEFT"><TT>&quot;Print Sorted Mailing List&quot;</TT></TD>
	</TR>
	<TR ALIGN="LEFT" VALIGN="TOP">
		<TD ALIGN="LEFT"><TT>CommandButton</TT></TD>
		<TD ALIGN="LEFT"><TT>Name</TT></TD>
		<TD ALIGN="LEFT"><TT>cmdQuit</TT></TD>
	</TR>
	<TR ALIGN="LEFT" VALIGN="TOP">
		<TD ALIGN="LEFT"></TD>
		<TD ALIGN="LEFT"><TT>Caption</TT></TD>
		<TD ALIGN="LEFT"><TT>&quot;&amp;Quit&quot;</TT></TD>
	</TR>
	<TR ALIGN="LEFT" VALIGN="TOP">
		<TD ALIGN="LEFT"><TT>CommandButton</TT></TD>
		<TD ALIGN="LEFT"><TT>Name</TT></TD>
		<TD ALIGN="LEFT"><TT>cmdReport</TT></TD>
	</TR>
	<TR ALIGN="LEFT" VALIGN="TOP">
		<TD ALIGN="LEFT"></TD>
		<TD ALIGN="LEFT"><TT>Caption</TT></TD>
		<TD ALIGN="LEFT"><TT>&quot;&amp;Print Report&quot;</TT></TD>
	</TR>
	<TR ALIGN="LEFT" VALIGN="TOP">
		<TD ALIGN="LEFT"></TD>
		<TD ALIGN="LEFT"><TT>Default</TT></TD>
		<TD ALIGN="LEFT"><TT>-1 `True</TT></TD>
	</TR>
	<TR ALIGN="LEFT" VALIGN="TOP">
		<TD ALIGN="LEFT"><TT>TextBox</TT></TD>
		<TD ALIGN="LEFT"><TT>Name</TT></TD>
		<TD ALIGN="LEFT"><TT>txtValue</TT></TD>
	</TR>
	<TR ALIGN="LEFT" VALIGN="TOP">
		<TD ALIGN="LEFT"></TD>
		<TD ALIGN="LEFT"><TT>Visible</TT></TD>
		<TD ALIGN="LEFT"><TT>0 `False</TT></TD>
	</TR>
	<TR ALIGN="LEFT" VALIGN="TOP">
		<TD ALIGN="LEFT"><TT>Frame</TT></TD>
		<TD ALIGN="LEFT"><TT>Name</TT></TD>
		<TD ALIGN="LEFT"><TT>Frame1</TT></TD>
	</TR>
	<TR ALIGN="LEFT" VALIGN="TOP">
		<TD ALIGN="LEFT"></TD>
		<TD ALIGN="LEFT"><TT>Caption</TT></TD>
		<TD ALIGN="LEFT"><TT>&quot;Select Page Number Format&quot;</TT></TD>
	</TR>
	<TR ALIGN="LEFT" VALIGN="TOP">
		<TD ALIGN="LEFT"><TT>OptionButton</TT></TD>
		<TD ALIGN="LEFT"><TT>Name</TT></TD>
		<TD ALIGN="LEFT"><TT>optPageNoType</TT></TD>
	</TR>
	<TR ALIGN="LEFT" VALIGN="TOP">
		<TD ALIGN="LEFT"></TD>
		<TD ALIGN="LEFT"><TT>Caption</TT></TD>
		<TD ALIGN="LEFT"><TT>&quot;page &amp;one&quot;</TT></TD>
	</TR>
	<TR ALIGN="LEFT" VALIGN="TOP">
		<TD ALIGN="LEFT"><TT>OptionButton</TT></TD>
		<TD ALIGN="LEFT"><TT>Name</TT></TD>
		<TD ALIGN="LEFT"><TT>optPageNoType</TT></TD>
	</TR>
	<TR ALIGN="LEFT" VALIGN="TOP">
		<TD ALIGN="LEFT"></TD>
		<TD ALIGN="LEFT"><TT>Caption</TT></TD>
		<TD ALIGN="LEFT"><TT>&quot;&amp;1&quot;</TT></TD>
	</TR>
	<TR ALIGN="LEFT" VALIGN="TOP">
		<TD ALIGN="LEFT"><TT>OptionButton</TT></TD>
		<TD ALIGN="LEFT"><TT>Name</TT></TD>
		<TD ALIGN="LEFT"><TT>optPageNoType</TT></TD>
	</TR>
	<TR ALIGN="LEFT" VALIGN="TOP">
		<TD ALIGN="LEFT"></TD>
		<TD ALIGN="LEFT"><TT>Caption</TT></TD>
		<TD ALIGN="LEFT"><TT>&quot;&amp;Page 1&quot;</TT></TD>
	</TR>
	<TR ALIGN="LEFT" VALIGN="TOP">
		<TD ALIGN="LEFT"></TD>
		<TD ALIGN="LEFT"><TT>Value</TT></TD>
		<TD ALIGN="LEFT"><TT>-1 `True</TT></TD>
	</TR>
	<TR ALIGN="LEFT" VALIGN="TOP">
		<TD ALIGN="LEFT"><TT>PictureBox</TT></TD>
		<TD ALIGN="LEFT"><TT>Name</TT></TD>
		<TD ALIGN="LEFT"><TT>Picture1</TT></TD>
	</TR>
	<TR ALIGN="LEFT" VALIGN="TOP">
		<TD ALIGN="LEFT"></TD>
		<TD ALIGN="LEFT"><TT>Align</TT></TD>
		<TD ALIGN="LEFT"><TT>2 `Align Bottom</TT></TD>
	</TR>
	<TR ALIGN="LEFT" VALIGN="TOP">
		<TD ALIGN="LEFT"><TT>Label</TT></TD>
		<TD ALIGN="LEFT"><TT>Name</TT></TD>
		<TD ALIGN="LEFT"><TT>lblStatus</TT></TD>
	</TR>
	<TR ALIGN="LEFT" VALIGN="TOP">
		<TD ALIGN="LEFT"><TT>ComboBox</TT></TD>
		<TD ALIGN="LEFT"><TT>Name</TT></TD>
		<TD ALIGN="LEFT"><TT>lstReportType</TT></TD>
	</TR>
	<TR ALIGN="LEFT" VALIGN="TOP">
		<TD ALIGN="LEFT"></TD>
		<TD ALIGN="LEFT"><TT>Style</TT></TD>
		<TD ALIGN="LEFT"><TT>2 `Dropdown List</TT></TD>
	</TR>
	<TR ALIGN="LEFT" VALIGN="TOP">
		<TD ALIGN="LEFT"><TT>Label</TT></TD>
		<TD ALIGN="LEFT"><TT>Name</TT></TD>
		<TD ALIGN="LEFT"><TT>Label1</TT></TD>
	</TR>
	<TR ALIGN="LEFT" VALIGN="TOP">
		<TD ALIGN="LEFT"></TD>
		<TD ALIGN="LEFT"><TT>Caption</TT></TD>
		<TD ALIGN="LEFT"><TT>&quot;&amp;Select Report Type:&quot;</TT></TD>
	</TR>
	<TR ALIGN="LEFT" VALIGN="TOP">
		<TD ALIGN="LEFT"><TT>Label</TT></TD>
		<TD ALIGN="LEFT"><TT>Name</TT></TD>
		<TD ALIGN="LEFT"><TT>lblInstruction</TT></TD>
	</TR>
	<TR ALIGN="LEFT" VALIGN="TOP">
		<TD ALIGN="LEFT"></TD>
		<TD ALIGN="LEFT"><TT>AutoSize</TT></TD>
		<TD ALIGN="LEFT"><TT>-1 `True</TT></TD>
	</TR>
	<TR ALIGN="LEFT" VALIGN="TOP">
		<TD ALIGN="LEFT"></TD>
		<TD ALIGN="LEFT"><TT>Visible</TT></TD>
		<TD ALIGN="LEFT"><TT>0 `False</TT></TD>
	</TR>
	<TR ALIGN="LEFT" VALIGN="TOP">
		<TD ALIGN="LEFT"><TT>CrystalReport</TT></TD>
		<TD ALIGN="LEFT"><TT>Name</TT></TD>
		<TD ALIGN="LEFT"><TT>CrystalReport1</TT></TD>
	</TR>
	<TR ALIGN="LEFT" VALIGN="TOP">
		<TD ALIGN="LEFT"></TD>
		<TD ALIGN="LEFT"><TT>ReportFileName</TT></TD>
		<TD ALIGN="LEFT"><TT>&quot;C:\VB\REPORT\MAILLIST.RPT&quot; (Your local path)</TT></TD>
	</TR>
	<TR ALIGN="LEFT" VALIGN="TOP">
		<TD ALIGN="LEFT"></TD>
		<TD ALIGN="LEFT"><TT>Destination</TT></TD>
		<TD ALIGN="LEFT"><TT>0 `To Print Preview Window</TT></TD>
	</TR>
	<TR ALIGN="LEFT" VALIGN="TOP">
		<TD ALIGN="LEFT"></TD>
		<TD ALIGN="LEFT"><TT>SelectionFormula</TT></TD>
		<TD ALIGN="LEFT"><TT>&quot;&quot;</TT></TD>
	</TR>
	<TR ALIGN="LEFT" VALIGN="TOP">
		<TD ALIGN="LEFT"></TD>
		<TD ALIGN="LEFT"><TT>GroupSelectionFormula</TT></TD>
		<TD ALIGN="LEFT"><TT>&quot;&quot;</TT></TD>
	</TR>
	<TR ALIGN="LEFT" VALIGN="TOP">
		<TD ALIGN="LEFT"></TD>
		<TD ALIGN="LEFT"><TT>Connect</TT></TD>
		<TD ALIGN="LEFT"><TT>&quot;&quot;</TT></TD>
	</TR>
	<TR ALIGN="LEFT" VALIGN="TOP">
		<TD ALIGN="LEFT"></TD>
		<TD ALIGN="LEFT"><TT>UserName</TT></TD>
		<TD ALIGN="LEFT"><TT>&quot;&quot;</TT></TD>
	</TR>
	</TABLE>
</P>

</BLOCKQUOTE>


<DL>
	<DT></DT>
	<DD><B>10. </B>Enter the following code in the <TT>Load</TT> event procedure of the
	form. This procedure initializes the <TT>lstReportType</TT> list box to the types
	of reports available and sets the default page format as &quot;Page 1.&quot;
	<P>
</DL>



<BLOCKQUOTE>
	<PRE><TT>Private Sub Form_Load()</TT>
<TT>    `Load the lstReportType list box</TT>
<TT>    lstReportType.Clear</TT>
<TT>    lstReportType.AddItem &quot;City&quot;</TT>
<TT>    lstReportType.AddItem &quot;State&quot;</TT>
<TT>    lstReportType.AddItem &quot;Zip&quot;</TT>
<TT>    lblStatus.Caption = &quot;Select a report type.&quot;</TT>
<TT>    `Set the report file name</TT>
<TT>    CrystalReport1.ReportFileName = App.Path &amp; &quot;\MAILLIST.RPT&quot;</TT>
<TT>    `Set the initial value of the page format</TT>
<TT>    optPageNoType_Click (0)</TT>
<TT>End Sub</TT></PRE>

</BLOCKQUOTE>

<PRE><TT></TT></PRE>

<DL>
	<DT><TT></TT></DT>
	<DD><B>11. </B>Add the following code to the <TT>lstReportType Click</TT> event procedure.
	When a particular report type is selected, the text of the <TT>lblInstruction</TT>
	label is set to prompt for the appropriate value, and it and the <TT>txtValue</TT>
	text box are made visible. If the text of the <TT>lstReportType</TT> field is empty,
	the <TT>Visible</TT> property of the two controls is set to <TT>False</TT>.
	<P>
</DL>



<BLOCKQUOTE>
	<PRE><TT>Private Sub lstReportType_Click()</TT>
<TT>    If Len(lstReportType.Text) Then</TT>
<TT>        Select Case lstReportType.Text</TT>
<TT>            Case &quot;City&quot;</TT>
<TT>                lblInstruction.Caption = &quot;&amp;Enter the City name:&quot;</TT>
<TT>                lblStatus.Caption = _</TT>
<TT>                &quot;Enter a city name or blank for all.&quot;</TT>
<TT>            Case &quot;State&quot;</TT>
<TT>                lblInstruction.Caption = &quot;&amp;Enter the State name:&quot;</TT>
<TT>                lblStatus.Caption = _</TT>
<TT>                &quot;Enter a state name or blank for all.&quot;</TT>
<TT>            Case &quot;Zip&quot;</TT>
<TT>                lblInstruction.Caption = &quot;&amp;Enter the Zip Code:&quot;</TT>
<TT>                lblStatus.Caption = _</TT>
<TT>                &quot;Enter a zip code or blank for all.&quot;</TT>
<TT>        End Select</TT>
<TT>        txtValue.Text = &quot;&quot;</TT>
<TT>        lblInstruction.Visible = True</TT>
<TT>        txtValue.Visible = True</TT>
<TT>        txtValue.SetFocus</TT>
<TT>    Else</TT>
<TT>        lblInstruction.Visible = False</TT>
<TT>        txtValue.Text = &quot;&quot;</TT>
<TT>        txtValue.Visible = False</TT>
<TT>    End If</TT>
<TT>End Sub</TT></PRE>

</BLOCKQUOTE>

<PRE><TT></TT></PRE>

<DL>
	<DT><TT></TT></DT>
	<DD><B>12. </B>Add the following code to the <TT>Click</TT> event procedure of the
	<TT>optPageNoType</TT> option button control array. Recall that you entered the page
	number in the report footer as a formula field <TT>@PageFooter</TT>. You also set
	the default formula to print a page number in the form &quot;page one.&quot; Any
	time the report is printed through the Crystal Reports program, the page number appears
	in the same form. This Visual Basic program simply sets the <TT>@PageFooter</TT>
	formula to whatever formula you want. In this case, one of the three formats shown
	in the option button group, &quot;Page 1,&quot; &quot;1,&quot; or &quot;page one.&quot;
	<P>
</DL>



<BLOCKQUOTE>
	<PRE><TT>Private Sub optPageNoType_Click(Index As Integer)</TT>
<TT>    `Set the page number format</TT>
<TT>    Select Case Index</TT>
<TT>        Case 0</TT>
<TT>            CrystalReport1.Formulas(1) = &quot;PageFooter= `Page ` + _</TT>
<TT>                ToText(PageNumber, 0)&quot;</TT>
<TT>        Case 1</TT>
<TT>            CrystalReport1.Formulas(1) = &quot;PageFooter= _</TT>
<TT>ToText(PageNumber, 0)&quot;</TT>
<TT>End Select</TT>
<TT>End Sub</TT></PRE>

</BLOCKQUOTE>

<PRE><TT></TT></PRE>

<DL>
	<DT><TT></TT></DT>
	<DD><B>13. </B>Add the following code to the <TT>Click</TT> event procedure of the
	<TT>cmdReport</TT> command button. Now that the relevant properties of the report
	have been set, it is time to actually print it. In contrast to previous How-To's,
	a different technique for setting the properties is demonstrated here. They are all
	set at once at print time, instead of as they are changed on the form (with the exception
	of the page number format). Use whichever technique works best in the context of
	your application.
	<P>
	<DT></DT>
	<DD>Three different types of reports can be printed using this program:
	<P>
</DL>



<BLOCKQUOTE>

	<UL>
	<LI>For one city or all cities sorted by city and zip.<BR>
	<BR>
	
	<LI>For one state or all states sorted by state, city, and zip.<BR>
	<BR>
	
	<LI>For one zip code or all zip codes sorted by zip.
	</UL>


</BLOCKQUOTE>


<DL>
	<DT></DT>
	<DD>Any of the initial digits of a zip code can be entered to obtain a zip code list;
	the program selects all the zip codes that begin with those starting characters.
	<P>
	<DT></DT>
	<DD>For each selected report type, this procedure first sets the <TT>SelectionFormula</TT>,
	which filters the records for the particular city, state, or zip code. If no value
	was entered, the records for all of that particular group are filtered. Then the
	formulas you built into the report are reset as appropriate. In the case of a city
	report, for example, the report title formula <TT>@ReportTitle</TT> is set to <TT>&quot;Mailing
	list for City of &lt;<I>city name</I>&gt;&quot;</TT> or <TT>&quot;Full City Mailing&quot;</TT>
	if no city name was entered. Finally, the <TT>SortFields</TT> array of fields for
	sorting are set. In each case, three elements of the array are set, clearing any
	elements that are not used for the particular report. If you didn't clear unused
	array elements, they would remain set for the next report unless explicitly overwritten.
	<P>
</DL>



<BLOCKQUOTE>
	<P>
	<PRE><TT>Private Sub cmdReport_Click()</TT>
<TT>    Dim ZipDigits As String</TT>
<TT>    lblStatus.Caption = &quot;Setting report options. Please wait...&quot;</TT>
<TT>    DoEvents</TT>
<TT>    Select Case lstReportType.Text</TT>
<TT>      Case &quot;City&quot;</TT>
          `Set the filter and title for the report
<TT>          If Len(txtValue) Then</TT>
<TT>              CrystalReport1.SelectionFormula = _</TT>
<TT>&quot;{Mailing LIst.CITY}= `&quot; _</TT>
<TT>                   &amp; txtValue &amp; &quot;`&quot;</TT>
<TT>              CrystalReport1.Formulas(0) = _</TT>
<TT>                  &quot;ReportTitle= `Mailing List for City of &quot; &amp; _</TT>
<TT>txtValue &amp; &quot;`&quot;</TT>
<TT>          Else</TT>
<TT>              CrystalReport1.SelectionFormula = &quot;&quot;</TT>
<TT>              CrystalReport1.Formulas(0) = _</TT>
<TT>                  &quot;ReportTitle= `Full City Mailing List'&quot;</TT>
<TT>          End If</TT>
<TT>          `Set the sort order and clear second element</TT>
<TT>          CrystalReport1.SortFields(0) = &quot;+{Mailing LIst.CITY}&quot;</TT>
<TT>          CrystalReport1.SortFields(1) = &quot;+{Mailing LIst.ZIP}&quot;</TT>
<TT>          CrystalReport1.SortFields(2) = &quot;&quot;</TT>
<TT>      Case &quot;State&quot;</TT>
<TT>         `Set the filter and title for the report</TT>
<TT>         If Len(txtValue) Then</TT>
<TT>             CrystalReport1.SelectionFormula = _</TT>
<TT>                 &quot;{Mailing LIst.STATE}= `&quot; &amp; txtValue &amp; &quot;`&quot;</TT>
<TT>             CrystalReport1.Formulas(0) = _</TT>
<TT>                 &quot;ReportTitle= `Mailing List for State of &quot; &amp; _</TT>
<TT>txtValue &amp; &quot;`&quot;</TT>
<TT>         Else</TT>
<TT>             CrystalReport1.SelectionFormula = _</TT>
<TT>                 &quot;{Mailing LIst.STATE}= {Mailing LIst.STATE}&quot;</TT>
<TT>             CrystalReport1.Formulas(0) = _</TT>
<TT>                 &quot;ReportTitle= `Full State Mailing List'&quot;</TT>
<TT>         End If</TT>
<TT>         `Set the sort order</TT>
<TT>         CrystalReport1.SortFields(0) = &quot;+{Mailing LIst.STATE}&quot;</TT>
<TT>         CrystalReport1.SortFields(1) = &quot;+{Mailing LIst.CITY}&quot;</TT>
<TT>         CrystalReport1.SortFields(2) = &quot;+{Mailing LIst.ZIP}&quot;</TT>
<TT>     Case &quot;Zip&quot;</TT>
<TT>         `Set the filter and title for the report</TT>
<TT>         If Len(txtValue) Then</TT>
<TT>             ZipDigits = Trim(Str(Len(txtValue)))</TT>
<TT>             CrystalReport1.SelectionFormula = _</TT>
<TT>                 &quot;{Mailing LIst.ZIP}[1 to &quot; _</TT>
<TT>                 &amp; ZipDigits &amp; &quot;]= `&quot; &amp; txtValue &amp; &quot;`&quot;</TT>
<TT>             CrystalReport1.Formulas(0) = _</TT>
<TT>                 &quot;ReportTitle= `Mailing List for Zip Code &quot; &amp; _</TT>
<TT>txtValue &amp; &quot;`&quot;</TT>
<TT>         Else</TT>
<TT>             CrystalReport1.SelectionFormula = _</TT>
<TT>                 &quot;{Mailing LIst.ZIP}= {Mailing LIst.ZIP}&quot;</TT>
<TT>             CrystalReport1.Formulas(0) = _</TT>
<TT>                 &quot;ReportTitle= `Full Zip Code Mailing List'&quot;</TT>
<TT>         End If</TT>
<TT>         `Set the sort order</TT>
<TT>         CrystalReport1.SortFields(0) = &quot;+{Mailing LIst.ZIP}&quot;</TT>
<TT>         CrystalReport1.SortFields(1) = &quot;&quot;</TT>
<TT>         CrystalReport1.SortFields(2) = &quot;&quot;</TT>
<TT>    End Select</TT>
<TT>    `Print the report</TT>
<TT>    lblStatus.Caption = &quot;Printing the report. Please wait...&quot;</TT>
<TT>    DoEvents</TT>
<TT>    CrystalReport1.Action = 1</TT>
<TT>    lblStatus.Caption = &quot;Enter new selections and print or quit.&quot;</TT>
<TT>    DoEvents</TT>
<TT>End Sub</TT></PRE>

</BLOCKQUOTE>

<PRE><TT></TT></PRE>

<DL>
	<DT><TT></TT></DT>
	<DD><B>14. </B>Add the following code to the <TT>Click</TT> event of the <TT>cmdQuit</TT>
	command button to provide an exit point from the program:
	<P>
</DL>



<BLOCKQUOTE>
	<PRE><TT>Private Sub cmdQuit_Click()</TT>
<TT>    End</TT>
<TT>End Sub</TT></PRE>

</BLOCKQUOTE>

<PRE><TT></TT></PRE>
<P><B>How It Works</B></P>
<P>This How-To takes advantage of properties of the Crystal Reports custom control
to modify the design of the report at runtime. These changes stay in effect only
for the lifetime of the Crystal Reports custom control in the form, and they are
not saved in the report file itself. This means that if the form with the control
is unloaded, the options revert to the settings in the report until you explicitly
set them again. This &quot;stickiness&quot; trait of the control makes it critical
to set any unused formulas or fields to a null string if they aren't required for
the current operation.</P>
<P>If you specified any particular sorting order in the report design, setting the
particular formula or field through your application would replace that formula for
this report. So if a report has five formula fields and you change only two, the
other three fields remain as they were set in the report.</P>
<P>Three formula and field properties of the custom control were used in this How-To:</P>

<UL>
	<LI><TT>SelectionFormula</TT>: There is one selection formula in each report. But
	because it is a Crystal Reports formula, it can be as complex as you care to make
	it. In this How-To, the <TT>City</TT>, <TT>State</TT>, and <TT>Zip</TT> fields of
	the report are set to the particular values entered; if no values are entered, they
	are set to empty strings so that all records print.
	<P>
	<LI><TT>Formulas</TT>: Any formula contained in the report file can be changed at
	runtime through the Crystal Reports control. In this How-To, the <TT>@ReportTitle</TT>
	and <TT>@PageFooter</TT> formulas were changed.
</UL>


<UL>
	<LI><TT>SortFields</TT>: This property resets the record sort order of the report.
	A similar <TT>GroupSortFields</TT> property wasn't used in this program, but it can
	be used to reset the sorting order of any groups in the report. Both of these properties
	are implemented as arrays so that fields entered into the array are sorted in the
	order of the 0th element, 1st element, and so on.
</UL>

<P>It is important to remember that the format of any formulas set in Visual Basic
must be in the Crystal Reports format of formulas, not Visual Basic's statement format.
This requires placing the entire formula in &quot;double&quot; quotation marks and
placing any literals used in the formula in &quot;single&quot; quotation marks. This
is the reason for the convoluted form of this setting for the <TT>Formulas(0)</TT>
property:</P>


<BLOCKQUOTE>
	<PRE><TT>&quot;ReportTitle= `Mailing List for City of &quot; &amp; txtValue &amp; &quot;`&quot;</TT></PRE>

</BLOCKQUOTE>

<PRE><TT></TT></PRE>
<P><B>Comments</B></P>
<P>This How-To has shown the power of Crystal Reports to improve your development
by setting different OCX control properties. The creative combination of multiple
control properties can help you deliver high-quality results to your customers.</P>
<CENTER>
<P>
<HR>
<A HREF="ch08.htm" tppabs="http://pbs.mcp.com/ebooks/1571691529/ch08/ch08.htm"><IMG SRC="previous.gif" tppabs="http://pbs.mcp.com/ebooks/1571691529/button/previous.gif" WIDTH="128" HEIGHT="28"
ALIGN="BOTTOM" ALT="Previous chapter" BORDER="0"></A><A HREF="ch10.htm" tppabs="http://pbs.mcp.com/ebooks/1571691529/ch10/ch10.htm"><IMG
SRC="next.gif" tppabs="http://pbs.mcp.com/ebooks/1571691529/button/next.gif" WIDTH="128" HEIGHT="28" ALIGN="BOTTOM" ALT="Next chapter"
BORDER="0"></A><A HREF="index-21.htm" tppabs="http://pbs.mcp.com/ebooks/1571691529/index.htm"><IMG SRC="contents.gif" tppabs="http://pbs.mcp.com/ebooks/1571691529/button/contents.gif" WIDTH="128"
HEIGHT="28" ALIGN="BOTTOM" ALT="Contents" BORDER="0"></A> </P>

<P>&copy; <A HREF="copy.htm" tppabs="http://pbs.mcp.com/ebooks/1571691529/copy.htm">Copyright</A>, Macmillan Computer Publishing. All
rights reserved.
</CENTER>

</BODY>

</HTML>
