<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2//EN">
<HTML>

<HEAD>
<SCRIPT LANGUAGE="JavaScript">

<!--

function popUp(pPage) {
 var fullURL = document.location;
 var textURL = fullURL.toString();
 var URLlen = textURL.length;
 var lenMinusPage = textURL.lastIndexOf("/");
 lenMinusPage += 1;
 var fullPath = textURL.substring(0,lenMinusPage);
 popUpWin = window.open('','popWin','resizable=yes,scrollbars=no,width=525,height=394');
 figDoc= popUpWin.document;
 zhtm= '<HTML><HEAD><TITLE>' + pPage + '</TITLE>';
 zhtm += '</head>';
 zhtm += '<BODY bgcolor="#FFFFFF">';
 zhtm += '<IMG SRC="' + fullPath + pPage + '">';
 zhtm += '<P><B>' + pPage + '</B>';
 zhtm += '</BODY></HTML>';
 window.popUpWin.document.write(zhtm);
 window.popUpWin.document.close();
 // Johnny Jackson 4/28/98
 }

//-->
                                                                
</SCRIPT>
<link rel="stylesheet" href="ebooks.css" tppabs="http://pbs.mcp.com/includes/stylesheets/ebooks.css">

	<META HTTP-EQUIV="Content-Type" CONTENT="text/html;CHARSET=iso-8859-1">
	<TITLE>Using Visual Basic 6 -- Ch 17 -- Adding Graphics to Your Programs</TITLE>
</HEAD>

<BODY TEXT="#000000" BGCOLOR="#FFFFFF">

<CENTER>
<H1><IMG SRC="que.gif" tppabs="http://pbs.mcp.com/ebooks/078971633X/button/que.gif" WIDTH="171" HEIGHT="66" ALIGN="BOTTOM" BORDER="0"><BR>
Using Visual Basic 6</H1>
</CENTER>
<CENTER>
<P><A HREF="ch16.htm" tppabs="http://pbs.mcp.com/ebooks/078971633X/ch16/ch16.htm"><IMG SRC="previous.gif" tppabs="http://pbs.mcp.com/ebooks/078971633X/button/previous.gif" WIDTH="128" HEIGHT="28"
ALIGN="BOTTOM" ALT="Previous chapter" BORDER="0"></A><A HREF="ch18.htm" tppabs="http://pbs.mcp.com/ebooks/078971633X/ch18/ch18.htm"><IMG
SRC="next.gif" tppabs="http://pbs.mcp.com/ebooks/078971633X/button/next.gif" WIDTH="128" HEIGHT="28" ALIGN="BOTTOM" ALT="Next chapter"
BORDER="0"></A><A HREF="index-38.htm" tppabs="http://pbs.mcp.com/ebooks/078971633X/index.htm"><IMG SRC="contents.gif" tppabs="http://pbs.mcp.com/ebooks/078971633X/button/contents.gif" WIDTH="128"
HEIGHT="28" ALIGN="BOTTOM" ALT="Contents" BORDER="0"></A> 
<HR>

</CENTER>
<CENTER>
<H1>- 17 -<BR>
Adding Graphics to Your Programs</H1>
</CENTER>

<UL>
	<LI><A HREF="#Heading1">Adding Graphics to a Form</A>
	<LI><A HREF="#Heading2">Changing a Picture at Runtime</A>
	<LI><A HREF="#Heading3">Making a Custom Button</A>
	<LI><A HREF="#Heading4">Adding Graphics to Forms with LoadPicture()</A>
	<LI><A HREF="#Heading5">Making a Form Icon</A>
	<LI><A HREF="#Heading6">Loading Files with a File List Box</A>
</UL>

<P>
<HR SIZE="4">

<CENTER>
<H1></H1>
</CENTER>
<H2><A NAME="Heading1"></A>Adding Graphics to a Form</H2>


<BLOCKQUOTE>
	<P>
<HR>
<STRONG>Remember to experiment</STRONG></P>
	<P>Although the projects, forms, and so on, have specific names in this chapter,
	you can experiment with naming convention and with other parts of the code to fit
	your needs. 
<HR>
</P>

</BLOCKQUOTE>

<P><B>Add graphics to a form</B>

<DL>
	<DT></DT>
	<DD><B>1. </B>Open a Standard EXE project and name it SmplGrfx. Name the default
	form frmMain. Set the form's Caption property to Simple Graphics.
	<P>
	<DT></DT>
	<DD><B>2. </B>Add a PictureBox to the form by double-clicking the PictureBox icon
	in the toolbox or by selecting the PictureBox and then drawing the control on the
	form. Name the PictureBox picMain.
	<P>
	<DT></DT>
	<DD><B>3. </B>Add an Image control to the form by using the same procedures as those
	described in step 2 for the PictureBox. Name the Image control imgMain.
	<P>
	<DT></DT>
	<DD><B>4. </B>Size and place the PictureBox and Image controls where you want them
	on the form, as shown in Figure 17.1.
	<P>
</DL>

<P><A HREF="javascript:popUp('17fig01.gif')"><B>FIGURE 17.1</B></A> <I>The default
value for the BorderStyle property of the PictureBox is 1 - Fixed Single. The default
value for the BorderStyle property of the Image control is 0 - None.</I></P>

<DL>
	<DT><I></I></DT>
	<DD><B>5. </B>Select the <B>picMain</B> PictureBox. Go to the Picture property in
	the Properties window and open the Load Picture dialog by clicking the ellipsis button
	(see Figure 17.2).
	<P>
</DL>

<P><A HREF="javascript:popUp('17fig02.gif')"><B>FIGURE 17.2</B></A> <I>The Windows
directory on your system ships with many different types of graphics files.</I></P>


<BLOCKQUOTE>
	<P>
<HR>
<STRONG>Many graphics files will work</STRONG></P>
	<P>Bubbles.bmp is a bitmap that ships with Windows. If for some reason this file
	isn't present in your Windows directory, choose another bitmap or choose any icon,
	metafile or enhanced metafile, JPEG, or GIF file. All these formats can be contained
	within a PictureBox. 
<HR>


</BLOCKQUOTE>


<DL>
	<DT></DT>
	<DD><B>6. </B>Go to the Windows directory and select <B>Bubbles.bmp</B>. When you
	click the <B>Open</B> button, this bitmap will appear in the PictureBox.
	<P>
	<DT></DT>
	<DD><B>7. </B>Set the value of the AutoSize property of the picMain PictureBox to
	<B>True</B>. This enlarges the area of the PictureBox to accommodate the size of
	the bitmap Bubbles.bmp.
	<P>
	<DT></DT>
	<DD><B>8. </B>Select the Image control and set the value of the Picture property
	to the bitmap <B>Triangles.bmp</B>. (This file is also in the Windows directory.)
	Do this the same way you added a picture to the PictureBox. You can't set the AutoSize
	property, however, because it isn't supported by the Image control.
	<P>
	<DT></DT>
	<DD><B>9. </B>Save and run your code (see Figure 17.3).
	<P>
</DL>

<P><A HREF="javascript:popUp('17fig03.gif')"><B>FIGURE 17.3</B></A> <I>The Image
control doesn't support an AutoSize property. It automatically resizes itself to
the dimensions of the assigned picture when the graphic is added.</I></P>
<P>
<H2><A NAME="Heading2"></A>Changing a Picture at Runtime</H2>
<P>You can change the graphic assigned to the Picture property of a PictureBox or
Image control at runtime by changing the value of the control's Picture property.</P>


<BLOCKQUOTE>
	<P>
<HR>
<STRONG>Download this project's code</STRONG></P>
	<P>The code for this example can be found at http://www. mcp.com/info. When prompted,
	enter 078971633x for the ISBN and click the Search button. 
<HR>
</P>

</BLOCKQUOTE>

<P><B>Change a control's <I>Picture</I> property at runtime</B>

<DL>
	<DT></DT>
	<DD><B>1. </B>Reopen the SmplGrfx.vbp project that you created earlier.
	<P>
	<DT></DT>
	<DD><B>2. </B>Add a CommandButton to the form and name it cmdChange. Set the value
	of the Caption property to Change the graphic.
	<P>
	<DT></DT>
	<DD><B>3. </B>Add the following code to the cmdChange_Click() event procedure:
	<P>
</DL>



<BLOCKQUOTE>
	<PRE>picMain.Picture = imgMain.Picture</PRE>

</BLOCKQUOTE>

<PRE></PRE>

<DL>
	<DT></DT>
	<DD><B>4. </B>Save and run the code (see Figure 17.4).
	<P>
</DL>

<P><A HREF="javascript:popUp('17fig04.gif')"><B>FIGURE 17.4</B></A> <I>Setting the
PictureBox control's AutoSize property to True resizes the control's area to the
same size as the image.</I></P>
<P>
<H2><A NAME="Heading3"></A>Making a Custom Button</H2>
<P>You can use the process of setting a Picture property at runtime to make a custom
button that looks different but works the same as a CommandButton.</P>
<P><B>Make a custom button</B>

<DL>
	<DT></DT>
	<DD><B>1. </B>Open a Standard EXE project and name it CustBut.vbp. Change the name
	of the default form to frmCust and set the form's Caption property to Custom Button.
	<P>
	<DT></DT>
	<DD><B>2. </B>Add three Image controls to the form. Set the Name property of one
	to imgMain, another to imgUp, and the last to imgDown.
	<P>
	<DT></DT>
	<DD><B>3. </B>Assign the icon file cbUp.ico to imgUp and assign cbDown.ico to imgDown.
	(You can find these files at http://www.mcp.com/info.) Don't assign a picture to
	imgMain.
	<P>
	<DT></DT>
	<DD><B>4. </B>Arrange the Image controls on the form as shown in Figure 17.5.
	<P>
	<DT></DT>
	<DD><B>5. </B>Add the event procedure code shown in Listing 17.1 for the Form_Load(),
	imgMain_MouseDown(), and imgMain_MouseUp() event procedures to the General section
	of frmCust.
	<P>
</DL>

<P><A HREF="javascript:popUp('17fig05.gif')"><B>FIGURE 17.5</B></A> <I>Creating a
custom button requires three Image controls. When you don't add an image to an Image
control, it appears as a dashed box on your form.</I></P>
<P>
<H4>LISTING 17.1&#160;&#160;17LIST01.TXT--Settings for the Custom Button Image Control</H4>
<PRE><B>01</B> Private Sub Form_Load()</PRE>
<PRE><B>02</B> imgMain.Picture = imgUp.Picture</PRE>
<PRE><B>03</B> End Sub</PRE>
<PRE><B>04</B></PRE>
<PRE><B>05</B> Private Sub imgMain_MouseDown(Button As Integer, _</PRE>
<PRE><B>06</B> Shift As Integer, X As Single, Y As Single)</PRE>
<PRE><B>07</B> imgMain.Picture = imgDown.Picture</PRE>
<PRE><B>08</B> End Sub</PRE>
<PRE><B>09</B></PRE>
<PRE><B>10</B> Private Sub imgMain_MouseUp(Button As Integer, _</PRE>
<PRE><B>11</B> Shift As Integer, X As Single, Y As Single)</PRE>
<PRE><B>12</B> imgMain.Picture = imgUp.Picture</PRE>
<PRE><B>13</B> End Sub</PRE>

<DL>
	<DT></DT>
	<DD><B>6. </B>Set the value of the Visible property for the Image controls imgDown
	and imgUp to False.
	<P>
	<DT></DT>
	<DD><B>7. </B>Set the following code in the Click event procedure of the Image control
	imgMain:
	<P>
</DL>



<BLOCKQUOTE>
	<PRE>MsgBox &quot;I am a custom button!&quot;</PRE>

</BLOCKQUOTE>

<PRE></PRE>

<DL>
	<DT></DT>
	<DD><B>8. </B>Save and run the code (see Figure 17.6).
	<P>
</DL>

<P><A HREF="javascript:popUp('17fig06.gif')"><B>FIGURE 17.6</B></A> <I>The custom
button, imgMain, can still reference the Picture property of the imgDown and imgUp
controls, even though the Visible property of these buttons is set to False.</I></P>
<P>When you run the code in the project CustBut.vbp, the Image control imgMain becomes
a custom button with an associated Click event procedure. The key to the construction
of the custom button is to have the Image control's MouseDown and MouseUp behavior
resemble general button down and button up graphical behaviors of a CommandButton.
For example, when you click a CommandButton, notice that it shows a slightly different
picture when the mouse button is down compared to when the mouse button is up. The
custom button you just made does the same thing (see Figure 17.7). You can program
the Click event procedure of the Image control custom button without interfering
with other mouse behaviors because the imaging behavior of that control is relegated
only to the MouseDown and MouseUp event procedures.</P>
<P><A HREF="javascript:popUp('17fig07.gif')"><B>FIGURE 17.7</B></A> <I>MouseDown
and MouseUp images vary slightly to indicate state changes.</I></P>
<P>
<H2><A NAME="Heading4"></A>Adding Graphics to Forms with LoadPicture()</H2>
<P>If you want to load a graphic file into a PictureBox or Image control from your
hard disk, you use the LoadPicture() function:</P>
<P>
<PRE><I>MyPicture</I> = <I>LoadPicture</I>(<I>strFilePath</I>)
</PRE>
<P>In this syntax,</P>

<UL>
	<LI><I>MyPicture</I> is a picture for a PictureBox or Image control.
	<P>
	<LI><I>LoadPicture</I> is the function name.
	<P>
	<LI><I>strFilePath</I> is a string that references the exact location on the hard
	disk of the graphics file that you want to load. This string must be in quotation
	marks.
</UL>



<BLOCKQUOTE>
	<P>
<HR>
<STRONG>You can download this example</STRONG></P>
	<P>The code for this example can be found at http://www.mcp.com/info. When prompted,
	enter 078971633x for the ISBN and click the Search button. 
<HR>
</P>

</BLOCKQUOTE>

<P><B>Load a file from disk</B>

<DL>
	<DT></DT>
	<DD><B>1. </B>Open a standard EXE project and name it LoadPrj.vbp. Rename the default
	form frmLoad. Set the form's Caption property to Load File.
	<P>
	<DT></DT>
	<DD><B>2. </B>Add a PictureBox to the form and name it picLoad. Set the value of
	the AutoSize property of the PictureBox to <B>True</B>.
	<P>
	<DT></DT>
	<DD><B>3. </B>Add a CommandButton to the form and name it cmdLoad. Set the Caption
	property of cmdLoad to Load from File.
	<P>
	<DT></DT>
	<DD><B>4. </B>Size and place the controls on the form as shown in Figure 17.8.
	<P>
</DL>

<P><A HREF="javascript:popUp('17fig08.gif')"><B>FIGURE 17.8</B></A> <I>When you set
the AutoSize property of a PictureBox to True, be sure to leave enough expansion
room for the PictureBox to accommodate a large picture.</I></P>

<DL>
	<DT><I></I></DT>
	<DD><B>5. </B>Add the following code to the Click event procedure of the CommandButton
	cmdLoad. (If you want to use a bitmap from a different folder or if circles.bmp is
	in a different folder on your system, use that path instead.)
	<P>
</DL>



<BLOCKQUOTE>
	<PRE>picLoad.Picture = LoadPicture(&quot;c:\windows\circles.bmp&quot;)</PRE>

</BLOCKQUOTE>

<PRE></PRE>

<DL>
	<DT></DT>
	<DD><B>6. </B>Save and run the code. Figure 17.9 shows the program in run mode.
	<P>
</DL>

<P><A HREF="javascript:popUp('17fig09.gif')"><B>FIGURE 17.9</B></A> <I>To clear a
PictureBox or Image control, call LoadPicture without any arguments: picLoad.Picture
= LoadPicture.</I></P>
<P>
<H2><A NAME="Heading5"></A>Making a Form Icon</H2>
<P>Windows programs commonly have an icon embedded within the executable file (.exe)
to graphically represent the given program. When you create a program, Visual Basic
automatically assigns one of your form's icons to your executable. Unless you change
it, Visual Basic will use the default form icon (see Figure 17.10).</P>
<P><A HREF="javascript:popUp('17fig10.gif')"><B>FIGURE 17.10</B></A> <I>You set the
unique properties of your program within the Project Properties dialog.</I></P>
<P>You can embed a custom icon into your program's executable file, however, by assigning
an icon to the Icon property of a form in your project. Visual Basic contains many
icons for you to use in the \VB\Graphics\Icons folder within the Visual Basic folder
on your hard drive.</P>
<P><B>Change a form's icon</B>

<DL>
	<DT></DT>
	<DD><B>1. </B>Select the <B>Icon</B> property of the form.
	<P>
	<DT></DT>
	<DD><B>2. </B>Click the ellipsis button to display the Load Icon dialog and browse
	for your custom icon (see Figure 17.11).
	<P>
	<DT></DT>
	<DD><B>3. </B>Click the <B>Open</B> button to add the icon to the form.
	<P>
</DL>

<P><A HREF="javascript:popUp('17fig11.gif')"><B>FIGURE 17.11</B></A> <I>In Windows,
icon files show their image in all views.</I></P>
<P>If your project has only one form, adding a custom icon to the Icon property of
the form will automatically assign the same icon to the program. If your project
has multiple forms, you must set the application icon from the Project Properties
dialog.</P>


<BLOCKQUOTE>
	<P>
<HR>
<STRONG>Creating a new icon</STRONG></P>
	<P>You can't create an icon within Visual Basic or with the MS Paint program that
	ships with Windows. However, the Visual Basic 6 CD-ROM does contain a program for
	making icons. It's called the Microsoft Image Editor (imagedit.exe), located in the
	directory \Tools\Imagedit. If you can't find this program on your system, it probably
	wasn't installed; run Visual Basic setup again to install it. 
<HR>
</P>

</BLOCKQUOTE>

<P><B>Set the icon for your application</B>

<DL>
	<DT></DT>
	<DD><B>1. </B>Set the icon for each form in your application.
	<P>
	<DT></DT>
	<DD><B>2. </B>Open the Project Properties dialog and select the <B>Make</B> tab.
	<P>
	<DT></DT>
	<DD><B>3. </B>From the <B>Icon</B> drop-down list, select the form that has the icon
	you want to use as your program's icon (see Figure 17.12).
	<P>
	<DT><A HREF="javascript:popUp('17fig12.gif')"><B>Figure 17.12</B></A> <I>You can
	set many of your project's properties in the Project Properties dialog.</I></DT>
</DL>

<P>
<H2><A NAME="Heading6"></A>Loading Files with a File List Box</H2>
<P>Look at the project MoreGrfx.vbp (from http://www.mcp.com/info). This program
sums up the techniques you've learned thus far to display graphics (see Figure 17.13).
It enables you to display icon or bitmap images embedded in the form and to select
a file from disk to display in the main PictureBox control picDisplay.</P>
<P><A HREF="javascript:popUp('17fig13.gif')"><B>FIGURE 17.13</B></A> <I>The application
More Graphics uses OptionButtons to determine which technique the program should
use to display images.</I></P>
<P>MoreGrfx uses a FileListBox (similar to a ListBox) to display the available graphic
files. However, whereas the ListBox must be programmed to load string values to display,
the FileListBox automatically displays strings that reflect the files of a specific
folder. All you need to do is tell the FileListBox which folder by setting the value
of the Path property of the FileListBox to the exact location of the folder containing
the files you want to display.</P>
<P>Listing 17.2 shows the Form_Load() event procedure for the project MoreGrfx.vbp.
This event procedure is where the value of the Path property for the FileListBox
File1 is set.</P>
<P>
<H4>LISTING 17.2&#160;&#160;17LIST02.TXT--Using the Pattern Property of the FileListBox</H4>
<PRE><B>01</B> Private Sub Form_Load()</PRE>
<PRE><B>02</B> `Set the path of the FileListbox to be the</PRE>
<PRE><B>03</B> `directory in which the application resides.</PRE>
<PRE><B>04</B> File1.Path = App.Path</PRE>
<PRE><B>05</B></PRE>
<PRE><B>06</B> `Make it so the FileListbox only displays</PRE>
<PRE><B>07</B> `bitmap and icon files.</PRE>
<PRE><B>08</B> File1.Pattern = &quot;*.bmp;*.ico&quot;</PRE>
<PRE><B>09</B> End Sub</PRE>
<P>Notice that the value of the FileListBox's Path property is set to the value of
the Path property of the App object, which holds information about your application.
The value of the App object's Path property reports the directory in which the application
executable file resides. Thus, the FileListBox displays the files in the folder from
which the application was started.</P>
<P>After a file is selected in the FileListBox File1, the user clicks the CommandButton
cmdAssign. Listing 17.3 shows the Click event procedure for this CommandButton.</P>


<BLOCKQUOTE>
	<P>
<HR>
<STRONG>Study this code closely</STRONG></P>
	<P>Many of this program's nuances can be understood only by working directly with
	the program and looking at the entire code. 
<HR>


</BLOCKQUOTE>

<H4>LISTING 17.3&#160;&#160;17LIST03.TXT--The Click() Event Procedure of the <BR>
CommandButton</H4>
<PRE><B>01</B> Private Sub cmdAssign_Click()</PRE>
<PRE><B>02</B> Dim strFilePath As String</PRE>
<PRE><B>03</B></PRE>
<PRE><B>04</B> `Query the option buttons to see which one</PRE>
<PRE><B>05</B> `has been checked.</PRE>
<PRE><B>06</B> If optBitmap.Value = True Then</PRE>
<PRE><B>07</B> `Show the bitmap graphic</PRE>
<PRE><B>08</B> picDisplay.Picture = picBitmap.Picture</PRE>
<PRE><B>09</B> ElseIf optIcon.Value = True Then</PRE>
<PRE><B>10</B> `Show the icon graphic</PRE>
<PRE><B>11</B> picDisplay.Picture = picIcon.Picture</PRE>
<PRE><B>12</B> ElseIf optList.Value = True Then</PRE>
<PRE><B>13</B> `Assign the exact path of the graphic in the file</PRE>
<PRE><B>14</B> `list box to the strFilePath string variable.</PRE>
<PRE><B>15</B> `Don't forget, to get the string in a list box</PRE>
<PRE><B>16</B> `you must identify the Listindex selected within</PRE>
<PRE><B>17</B> `a List Control's List array.</PRE>
<PRE><B>18</B> strFilePath = File1.Path &amp; &quot;\&quot; _</PRE>
<PRE>&amp; File1.List(File1.ListIndex)</PRE>
<PRE><B>19</B> `Load the picture from disk and assign it to the</PRE>
<PRE><B>20</B> `picture property of the Picture control.</PRE>
<PRE><B>21</B> picDisplay.Picture = LoadPicture(strFilePath)</PRE>
<PRE><B>22</B></PRE>
<PRE><B>23</B> End If</PRE>
<PRE><B>24</B> End Sub</PRE>
<P>As shown in Listing 17.3, if the OptionButton optList is checked (line 12), the
application loads the selected file from disk into the PictureBox picDisplay by using
the LoadPicture() function.</P>
<P>Creating Special Graphic Effects</P>
<P>In the project MoreGrfx.vbp, after users assign a picture to the PictureBox picDisplay,
they can decide to distort the picture by clicking the CommandButton cmdDistort.
When this button is clicked, the picture in the PictureBox is assigned to the Picture
property of the Image control imgDistort with the following statements:</P>
<P>
<PRE>imgDistort.Width = picDisplay.Width * 1.5
imgDistort.Picture = picDisplay.Picture
</PRE>
<P>The Image control distorts the picture because the value of the Stretch property
of imgDistort is set to True and the value of the Width property of the Image control
is modified to be irregular relative to the PictureBox picDisplay. The PictureBox
must have the value of its AutoSize property set to True to resize itself and accommodate
the area of pictures assigned to it. The Image control resizes itself by default
to accommodate the area of assigned pictures. However, when the value of the Image
control's Stretch property is set to True, Visual Basic resizes the assigned picture
to the dimensions of the Image control, regardless of the size of the Image control.
This can make for some unusual distortions (see Figure 17.14).</P>
<P>However, you can use the Stretch property to enlarge a picture within an Image
control. Listing 17.4 shows the code for the cmdEnlarge_Click() event procedure.
The cmdEnlarge CommandButton allows users to enlarge the picture displayed in the
smaller PictureBox picDisplay. The trick to enlarging a picture is to maintain the
width-to-height (aspect) ratio of the picture when sizing the Image control to which
the picture will be stretched. The code in Listing 17.4 determines the ratio of the
PictureBox picDisplay by calculating the control's width over its height (line 4).
Then the code applies that ratio to the Height of the Image control imgDistort (line
8). As a result, the value of imgDistort.Width is reset, and the aspect ratio is
maintained.</P>
<P><A HREF="javascript:popUp('17fig14.gif')"><B>FIGURE 17.14</B></A> <I>You can use
the Stretch property of the Image control to distort pictures. To enlarge a picture,
size the Image control to the same ratio as the original picture.</I></P>
<P>
<H4>LISTING 17.4&#160;&#160; 17LIST04.TXT--The Code to Enlarge a Picture</H4>
<PRE><B>01</B> Private Sub cmdEnlarge_Click()</PRE>
<PRE><B>02</B> Dim dSizeRatio As Double</PRE>
<PRE><B>03</B> `Figure out the ratio</PRE>
<PRE><B>04</B> dSizeRatio = picDisplay.Width / picDisplay.Height</PRE>
<PRE><B>05</B></PRE>
<PRE><B>06</B> `Apply the ratio to Image control's Height to</PRE>
<PRE><B>07</B> `get the new Width</PRE>
<PRE><B>08</B> imgDistort.Width = imgDistort.Height * dSizeRatio</PRE>
<PRE><B>09</B> End Sub</PRE>
<H1></H1>
<CENTER>
<P>
<HR>
<A HREF="ch16.htm" tppabs="http://pbs.mcp.com/ebooks/078971633X/ch16/ch16.htm"><IMG SRC="previous.gif" tppabs="http://pbs.mcp.com/ebooks/078971633X/button/previous.gif" WIDTH="128" HEIGHT="28"
ALIGN="BOTTOM" ALT="Previous chapter" BORDER="0"></A><A HREF="ch18.htm" tppabs="http://pbs.mcp.com/ebooks/078971633X/ch18/ch18.htm"><IMG
SRC="next.gif" tppabs="http://pbs.mcp.com/ebooks/078971633X/button/next.gif" WIDTH="128" HEIGHT="28" ALIGN="BOTTOM" ALT="Next chapter"
BORDER="0"></A><A HREF="index-38.htm" tppabs="http://pbs.mcp.com/ebooks/078971633X/index.htm"><IMG SRC="contents.gif" tppabs="http://pbs.mcp.com/ebooks/078971633X/button/contents.gif" WIDTH="128"
HEIGHT="28" ALIGN="BOTTOM" ALT="Contents" BORDER="0"></A> <BR>
</P>

<P>&#169; <A HREF="copy.htm" tppabs="http://pbs.mcp.com/ebooks/078971633X/copy.htm">Copyright</A>, Macmillan Computer Publishing. All
rights reserved.
</CENTER>


</BODY>

</HTML>
