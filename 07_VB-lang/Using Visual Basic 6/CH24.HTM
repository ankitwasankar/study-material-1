<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2//EN">
<HTML>

<HEAD>
<SCRIPT LANGUAGE="JavaScript">

<!--

function popUp(pPage) {
 var fullURL = document.location;
 var textURL = fullURL.toString();
 var URLlen = textURL.length;
 var lenMinusPage = textURL.lastIndexOf("/");
 lenMinusPage += 1;
 var fullPath = textURL.substring(0,lenMinusPage);
 popUpWin = window.open('','popWin','resizable=yes,scrollbars=no,width=525,height=394');
 figDoc= popUpWin.document;
 zhtm= '<HTML><HEAD><TITLE>' + pPage + '</TITLE>';
 zhtm += '</head>';
 zhtm += '<BODY bgcolor="#FFFFFF">';
 zhtm += '<IMG SRC="' + fullPath + pPage + '">';
 zhtm += '<P><B>' + pPage + '</B>';
 zhtm += '</BODY></HTML>';
 window.popUpWin.document.write(zhtm);
 window.popUpWin.document.close();
 // Johnny Jackson 4/28/98
 }

//-->
                                                                
</SCRIPT>
<link rel="stylesheet" href="ebooks.css" tppabs="http://pbs.mcp.com/includes/stylesheets/ebooks.css">

	<META HTTP-EQUIV="Content-Type" CONTENT="text/html;CHARSET=iso-8859-1">
	<TITLE>Using Visual Basic 6 -- Ch 24 -- Adding Help to Your Programs</TITLE>
</HEAD>

<BODY TEXT="#000000" BGCOLOR="#FFFFFF">

<CENTER>
<H1><IMG SRC="que.gif" tppabs="http://pbs.mcp.com/ebooks/078971633X/button/que.gif" WIDTH="171" HEIGHT="66" ALIGN="BOTTOM" BORDER="0"><BR>
Using Visual Basic 6</H1>
</CENTER>
<CENTER>
<P><A HREF="ch23.htm" tppabs="http://pbs.mcp.com/ebooks/078971633X/ch23/ch23.htm"><IMG SRC="previous.gif" tppabs="http://pbs.mcp.com/ebooks/078971633X/button/previous.gif" WIDTH="128" HEIGHT="28"
ALIGN="BOTTOM" ALT="Previous chapter" BORDER="0"></A><A HREF="ch25.htm" tppabs="http://pbs.mcp.com/ebooks/078971633X/ch25/ch25.htm"><IMG
SRC="next.gif" tppabs="http://pbs.mcp.com/ebooks/078971633X/button/next.gif" WIDTH="128" HEIGHT="28" ALIGN="BOTTOM" ALT="Next chapter"
BORDER="0"></A><A HREF="index-38.htm" tppabs="http://pbs.mcp.com/ebooks/078971633X/index.htm"><IMG SRC="contents.gif" tppabs="http://pbs.mcp.com/ebooks/078971633X/button/contents.gif" WIDTH="128"
HEIGHT="28" ALIGN="BOTTOM" ALT="Contents" BORDER="0"></A> 
<HR>

</CENTER>
<CENTER>
<H1>- 24 -<BR>
Adding Help to Your Programs</H1>
</CENTER>

<UL>
	<LI><A HREF="#Heading1">Providing Help for Your Programs</A>
	<LI><A HREF="#Heading2">Using the Help Workshop</A>
	<LI><A HREF="#Heading3">Making a Help File</A>
	<LI><A HREF="#Heading4">Adding Help Files to Your Application</A>
	<LI><A HREF="#Heading5">Making Context-Sensitive Help</A>
</UL>

<P>
<HR SIZE="4">

<CENTER>
<H1></H1>
</CENTER>
<H2><A NAME="Heading1"></A>Providing Help for Your Programs</H2>
<P>Professionally programmed applications provide online help. Whether your Visual
Basic application is intended for general deployment to a wide variety of users or
is a specialized corporate application to be used within a limited enterprise, you
owe it to your users to provide detailed and understandable online documentation.
Also, the documentation should be as context sensitive as possible so that when users
press the F1 key, they arrive at the exact topic in the help documentation that addresses
the particular need at hand.</P>
<P>Learning to create useful, appropriate online help is a profession in itself.
There's more to creating good help documentation than learning the mechanics of making
help files. A good help system allows users to find the information they need, when
they need it. That information should be clear, concise, and instructive.</P>
<P>
<H2><A NAME="Heading2"></A>Using the Help Workshop</H2>


<BLOCKQUOTE>
	<P>
<HR>
<STRONG>Use this chapter's sample project</STRONG></P>
	<P>This chapter is simply an overview. For a more detailed description of the process
	of creating help files, take the time to read the Help Workshop's online documentation
	and study the sample Composer.hpj project provided for this chapter. You can find
	this project at <A target="_new" HREF="javascript:if(confirm('http://www.mcp.com/info  \n\nThis file was not retrieved by Teleport Pro, because it is addressed on a domain or path outside the boundaries set for its Starting Address.  \n\nDo you want to open it from the server?'))window.location='http://www.mcp.com/info'" tppabs="http://www.mcp.com/info">http://www.mcp.com/info</A>. When
	you locate this Web site, you'll be asked to enter an ISBN; enter 078971633x and
	then click the Search button to go to the Book Info page for Using Visual Basic 6.
	
<HR>


</BLOCKQUOTE>

<P>The Microsoft Help Workshop 4.0 is a set of tools, separate from Visual Basic,
that you use to create help files for applications that run under 32-bit Windows
systems. The Help Workshop is shipped on the same CD-ROM on which you received your
copy of Visual Basic 6.0, in the directory \Tools\Hcw. You invoke Setup.exe to install
the Help Workshop on your computer.</P>
<P>You use the tools in the Help Workshop to make a set of help files for your application.
Generally, the help files that you make for your application's online help documentation
are a contents file (.cnt--see Figure 24.1) and associated help files (.hlp--see
Figure 24.2).</P>
<P><A HREF="javascript:popUp('24fig01.gif')"><B>FIGURE 24.1</B></A> <I>Content files
(.cnt) list the topics of your applicationís help documentation in a hierarchy.</I></P>
<P><A HREF="javascript:popUp('24fig02.gif')"><B>FIGURE 24.2</B></A> <I>A help file
(.hlp) contains various topics' text and hypertext.</I></P>
<P>A content file is similar to a global table of contents for your help documentation.
Users click a topic description on the Contents page to find a specific topic within
a help file. For example, when users choose Claude Debussy in Figure 24.1, they're
presented with the help topic for Claude Debussy, as shown in Figure 24.2.</P>
<P>You create your help data by using any word processor that supports footnotes
and the Rich Text Format (.rtf). Then you &quot;compile&quot; the RTF files and the
help project file (.hpj) with the Help compiler to create the help file (.hlp--see
Figure 24.3). Table 24.1 shows the different data and executable files used within
this process. You make the contents file within the Help Workshop environment (see
Figure 24.4).</P>
<P><A HREF="javascript:popUp('24fig03.gif')"><B>FIGURE 24.3</B></A> <I>You create
the help project file (.hpj) and the help document's content file (.cnt) in the Help
Workshop. You make help data in any word processor that supports Rich Text Format
(.rtf).</I></P>
<P>
<H4>TABLE 24.1&#160;&#160;Parts of the Help Workshop</H4>
<P>
<TABLE BORDER="1">
	<TR ALIGN="LEFT" VALIGN="TOP">
		<TD ALIGN="LEFT"><B><I>File</I></B></TD>
		<TD ALIGN="LEFT"><B><I>Name</I></B></TD>
		<TD ALIGN="LEFT"><B><I>Description</I></B></TD>
	</TR>
	<TR ALIGN="LEFT" VALIGN="TOP">
		<TD ALIGN="LEFT">Hcw.exe</TD>
		<TD ALIGN="LEFT">Help Workshop</TD>
		<TD ALIGN="LEFT">Online documentation workspace</TD>
	</TR>
	<TR ALIGN="LEFT" VALIGN="TOP">
		<TD ALIGN="LEFT">Hcrtf.exe</TD>
		<TD ALIGN="LEFT">Help Compiler</TD>
		<TD ALIGN="LEFT">Transforms an .rtf file into an .hlp file</TD>
	</TR>
	<TR ALIGN="LEFT" VALIGN="TOP">
		<TD ALIGN="LEFT">Shed.exe</TD>
		<TD ALIGN="LEFT">Hotspot Editor</TD>
		<TD ALIGN="LEFT">Creates hypertext jump regions on bitmaps</TD>
	</TR>
	<TR ALIGN="LEFT" VALIGN="TOP">
		<TD ALIGN="LEFT">Dbhe.exe</TD>
		<TD ALIGN="LEFT">Dialog Box <BR>
			Help Editor</TD>
		<TD ALIGN="LEFT">Makes context-sensitive help dialogs</TD>
	</TR>
	<TR ALIGN="LEFT" VALIGN="TOP">
		<TD ALIGN="LEFT">Hcw.hlp</TD>
		<TD ALIGN="LEFT"></TD>
		<TD ALIGN="LEFT">The help file for the Help Workshop</TD>
	</TR>
	<TR ALIGN="LEFT" VALIGN="TOP">
		<TD ALIGN="LEFT">Shed.hlp</TD>
		<TD ALIGN="LEFT"></TD>
		<TD ALIGN="LEFT">The help file for the Hotspot Editor</TD>
	</TR>
	<TR ALIGN="LEFT" VALIGN="TOP">
		<TD ALIGN="LEFT">Dbhe.hlp</TD>
		<TD ALIGN="LEFT"></TD>
		<TD ALIGN="LEFT">The help file for the Dialog Box Help Editor</TD>
	</TR>
	<TR ALIGN="LEFT" VALIGN="TOP">
		<TD ALIGN="LEFT">MyProject.hpj</TD>
		<TD ALIGN="LEFT">Help project file</TD>
		<TD ALIGN="LEFT">Project-specific data created by the Help Workshop</TD>
	</TR>
	<TR ALIGN="LEFT" VALIGN="TOP">
		<TD ALIGN="LEFT">*.rtf</TD>
		<TD ALIGN="LEFT">Rich text format files</TD>
		<TD ALIGN="LEFT">RTF files that will be transformed into an .hlp file</TD>
	</TR>
	<TR ALIGN="LEFT" VALIGN="TOP">
		<TD ALIGN="LEFT">MyProject.hlp</TD>
		<TD ALIGN="LEFT">Help file</TD>
		<TD ALIGN="LEFT">The help file made from the .rtf file</TD>
	</TR>
	<TR ALIGN="LEFT" VALIGN="TOP">
		<TD ALIGN="LEFT">MyProject.cnt</TD>
		<TD ALIGN="LEFT">Contents file</TD>
		<TD ALIGN="LEFT">The contents file associated with given online help</TD>
	</TR>
	<TR ALIGN="LEFT" VALIGN="TOP">
		<TD ALIGN="LEFT">MyProject.log</TD>
		<TD ALIGN="LEFT">Log file</TD>
		<TD ALIGN="LEFT">The file that lists compilation errors</TD>
	</TR>
</TABLE>
</P>
<P><A HREF="javascript:popUp('24fig04.gif')"><B>FIGURE 24.4</B></A> <I>You set the
topic hierarchy of a content file within the Help Workshop environment.</I></P>


<BLOCKQUOTE>
	<P>
<HR>
<STRONG>Third-party tools</STRONG></P>
	<P>Third-party tools, such as RoboHelp, also are available to automate the creation
	of content and help files. These tools work just as well as, if not better than,
	the Help Workshop. 
<HR>


</BLOCKQUOTE>

<P>You can have help documentation that references more than one distinct help file
through a content file (see Figure 24.5). This sort of configuration is useful if
you have a large program with many categories of help topics. Breaking up help files
into numerous smaller ones makes the development process easier to distribute among
many documentation developers. Also, smaller help files load faster, making the overall
performance of your program better.</P>
<P><A HREF="javascript:popUp('24fig05.gif')"><B>FIGURE 24.5</B></A> <I>You can have
your content file reference more than one help file.</I></P>
<P>
<H2><A NAME="Heading3"></A>Making a Help File</H2>
<P>You make a help file by using a special footnote markup language in Rich Text
Format. The RTF file is constructed in three sections: the jump text, the topic text,
and the footnote tags (see Figure 24.6).</P>
<P><A HREF="javascript:popUp('24fig06.gif')"><B>FIGURE 24.6</B></A> <I>You use footnote
tags to set up the hypertext jump structure of a help file.</I></P>
<P>The heart of the help document structure is the topic, a section of Rich Text
bounded with a page break. The first line of the section is footnoted with at least
the special footnote character #. You enter the topic ID of the topic section next
to this character in the footnote area of the RTF file. (A topic ID is a location
address of the given topic within the RTF file.) You also use the characters $ and
k as footnote characters at the beginning of each topic section. The $ character
represents a tag for subject. The k character is used to denote index keywords that
will show up when you look at the Index page in the Help Topics dialog, as shown
in Figure 24.7. Words entered in the subject footnote appear in the History window
of the help documentation.</P>
<P><A HREF="javascript:popUp('24fig07.gif')"><B>FIGURE 24.7</B></A> <I>A help document
has a variety of windows.</I></P>
<P>The sections interact by the use of strikethrough text to indicate that the characters
of that text are hypertext. You place text formatted as hidden after the strikethrough
text. The text formatted as hidden is the jump-to address that will be referenced
by the strikethrough text. The contents of the jump-to address is formally known
as the Topic ID. When you run the RTF file through the Help Workshop's Help Compiler,
the strikethrough text is transformed into hypertext. When users click the hypertext,
the Help runtime engine (WinHelp.exe) looks to the text that was formatted as Hidden
and placed after the strikethrough characters for the address of where to jump. Then,
after the engine knows the address, it looks in the footnote section for the location
of that address within the help file. The engine then goes to the topic at that address
and displays the information (see Figure 24.8).</P>
<P><A HREF="javascript:popUp('24fig08.gif')"><B>FIGURE 24.8</B></A> <I>Make sure
that no space appears between the strikethrough text and the hidden text for the
topic ID. If there is, you can't make a jump, and you'll receive an error.</I></P>
<P><B>Make a simple RTF help file</B>

<DL>
	<DT></DT>
	<DD><B>1. </B>Open a <U>N</U>ew document from the <U>F</U>ile menu in Microsoft Word.
	<P>
	<DT></DT>
	<DD><B>2. </B>Enter the following:
	<P>
</DL>



<BLOCKQUOTE>
	<PRE>Moe
Larry
Curly</PRE>

</BLOCKQUOTE>

<PRE></PRE>

<DL>
	<DT></DT>
	<DD><B>3. </B>Enter a blank line following the last line above.
	<P>
	<DT></DT>
	<DD><B>4. </B>Enter a page break by choosing <U>B</U>reak from Word's <U>I</U>nsert
	menu and then selecting <U>P</U>age Break, or by pressing Ctrl+Enter.
	<P>
	<DT></DT>
	<DD><B>5. </B>Enter the following line of text, followed by a page break:
	<P>
</DL>



<BLOCKQUOTE>
	<PRE>Moe is a bossy stooge.</PRE>

</BLOCKQUOTE>

<PRE></PRE>

<DL>
	<DT></DT>
	<DD><B>6. </B>Enter the following line of text, followed by a page break:
	<P>
</DL>



<BLOCKQUOTE>
	<PRE>Larry has funny hair.</PRE>

</BLOCKQUOTE>

<PRE></PRE>

<DL>
	<DT></DT>
	<DD><B>7. </B>Enter the following line of text, followed by a page break:
	<P>
</DL>



<BLOCKQUOTE>
	<PRE>Curly is roly-poly.</PRE>

</BLOCKQUOTE>

<PRE></PRE>

<DL>
	<DT></DT>
	<DD><B>8. </B>Go back to the first three lines of text. Enter IDH_MOE after the word
	Moe. Be sure to enter the text directly after the word; don't insert a space.
	<P>
	<DT></DT>
	<DD><B>9. </B>Select the word Moe and select Stri<U>k</U>ethrough in the Font dialog
	(choose <U>F</U>ont from the F<U>o</U>rmat menu). Make sure that the word isn't marked
	as Hidden.
	<P>
	<DT></DT>
	<DD><B>10. </B>Select IDH_MOE with your mouse. In the Font dialog, select <U>H</U>idden.
	(Hidden format doesn't hide the text onscreen.) Repeat this step for the IDH_LARRY
	text on the next line.
	<P>
	<DT></DT>
	<DD><B>11. </B>Format Larry as Stri<U>k</U>ethrough. Again, make sure that the word
	isn't marked as Hidden.
	<P>
	<DT></DT>
	<DD><B>12. </B>Enter IDH_CURLY after Curly on the third line.
	<P>
	<DT></DT>
	<DD><B>13. </B>Format Curly as Stri<U>k</U>ethrough (make sure that the word isn't
	marked as Hidden). Format IDH_CURLY as <U>H</U>idden.
	<P>
	<DT></DT>
	<DD><B>14. </B>Place the text cursor at the beginning of the line Moe is a bossy
	stooge. Choose Foot<U>n</U>ote from the <U>I</U>nsert menu.
	<P>
	<DT></DT>
	<DD><B>15. </B>In the Footnote and Endnote dialog (see Figure 24.9), select <U>C</U>ustom
	Mark and enter # in the text box. Click OK. The footnote section of the Word document
	appears.
	<P>
</DL>

<P><A HREF="javascript:popUp('24fig09a.gif')"><B>FIGURE 24.9</B></A> <I>Use the #
character within an RTF document's footnote to apply a Topic ID to a topic.</I></P>

<DL>
	<DT><I></I></DT>
	<DD><B>16. </B>Enter IDH_MOE next the # character in the footnote section.
	<P>
	<DT></DT>
	<DD><B>17. </B>Place the text cursor at the beginning of the Larry has funny hair
	line. Enter a custom footnote as explained in steps 14 and 15.
	<P>
	<DT></DT>
	<DD><B>18. </B>Enter IDH_LARRY after the newly inserted # character in the footnote
	section.
	<P>
	<DT></DT>
	<DD><B>19. </B>Place the text cursor at the beginning of the Curly is roly-poly line.
	Enter a custom footnote.
	<P>
	<DT></DT>
	<DD><B>20. </B>Enter IDH_CURLY after the newly inserted # character in the footnote
	section.
	<P>
	<DT></DT>
	<DD><B>21. </B>Save the document as an RTF file, stooges.rtf (select Rich Text Format
	from the Save as <U>T</U>ype drop-down list of the Save <U>A</U>s dialog).
	<P>
</DL>

<P><B>Compiling an RTF file into an .hlp file</B>

<DL>
	<DT></DT>
	<DD><B>1. </B>Launch the Help Workshop by choosing Microsoft Help Workshop from the
	Programs submenu of the Start menu, or by finding and double-clicking HCW.EXE in
	Windows Explorer.
	<P>
	<DT></DT>
	<DD><B>2. </B>Choose <U>N</U>ew from the <U>F</U>ile menu.
	<P>
	<DT></DT>
	<DD><B>3. </B>In the New dialog, select a new help project. Save the new project
	as stooges.hpj (see Figure 24.10).
	<P>
</DL>

<P><A HREF="javascript:popUp('24fig10a.gif')"><B>FIGURE 24.10</B></A> <I>You can
make either a help file (.hlp) or a content file (.cnt) with the Help Workshop.</I></P>

<DL>
	<DT><I></I></DT>
	<DD><B>4. </B>Click F<U>i</U>le on the right side of the Workshop to access the Topic
	File dialog. Click <U>A</U>dd to display the Open File dialog.
	<P>
	<DT></DT>
	<DD><B>5. </B>Select the stooges.rtf and click OK to add it to the Help Workshop
	(see Figure 24.11).
	<P>
</DL>

<P><A HREF="javascript:popUp('24fig11a.gif')"><B>FIGURE 24.11</B></A> <I>The content
for a help file is an RTF file, which the Help Workshop compiles an HLP file.</I></P>


<BLOCKQUOTE>
	<P>
<HR>
<STRONG>HTML help</STRONG></P>
	<P>In addition to the Help Workshop, Microsoft is beginning to support a newer technology
	called HTML Help. HTML Help uses documents written in HTML and viewed through Internet
	Explorer to implement the features seen in the Help Workshop. The help system for
	VB6 is written in HTML Help. HTML Help ships in the Windows NT 4.0 Service Pack 3,
	available on MSDN. As of this writing, however, the Help Workshop is still the authoring
	environment that ships with VB6. Be advised, however, that HTML help is destined
	to be the help authoring environment of the very near future. 
<HR>


</BLOCKQUOTE>


<DL>
	<DT></DT>
	<DD><B>6. </B>To compile the .RTF file into an .HLP file, click Save and Compile
	at the bottom right of the Help Workshop.
	<P>
	<DT></DT>
	<DD><B>7. </B>Choose <U>R</U>un WinHelp from the <U>F</U>ile menu.
	<P>
	<DT></DT>
	<DD><B>8. </B>In the View Help File dialog, click Vie<U>w</U> Help to view the compiled
	help file, stooges.hlp (see Figure 24.12). You also can go to the project's working
	directory within Windows Explorer and double-click stooges.hlp to view the file.
	<P>
</DL>

<P>The mechanics of the markup language are difficult to understand at first pass.
The purpose of this discussion is to give you a sense of how the help files work.
You should read the detailed set of online help files that comes with the Help Workshop.
You also can download the example files for this chapter from http://www.mcp.com/info.</P>
<P>The Help Workshop is an extensive development environment. You can add custom
bitmaps to your files and associate certain topics with certain custom windows. It
even has a complete built-in macro language that allows you to make conditional decisions
and use functionality from other programs. If you want, you can access the WinHelp
API, a powerful tool with many levels of complexity that will take you a while to
master.</P>
<P><A HREF="javascript:popUp('24fig12a.gif')"><B>FIGURE 24.12</B></A> <I>You can
view help files from within the Help Workshop.</I></P>
<P>
<H2><A NAME="Heading4"></A>Adding Help Files to Your Application</H2>
<P>After you make your help documentation, you need to integrate it in your program.
You associate a help file to your program at design time from the Project Properties
dialog.</P>
<P><B>Associate a help file to a program</B>

<DL>
	<DT></DT>
	<DD><B>1. </B>Open the project Composer.vbp, which is available from the vb6ch24.zip
	file on <A target="_new" HREF="javascript:if(confirm('http://www.mcp.com/info  \n\nThis file was not retrieved by Teleport Pro, because it is addressed on a domain or path outside the boundaries set for its Starting Address.  \n\nDo you want to open it from the server?'))window.location='http://www.mcp.com/info'" tppabs="http://www.mcp.com/info">http://www.mcp.com/info</A>.
	<P>
	<DT></DT>
	<DD><B>2. </B>Choose Composer Prop<U>e</U>rties from the <U>P</U>roject menu.
	<P>
	<DT></DT>
	<DD><B>3. </B>Click the ... button to the right of the Help File Name text box.
	<P>
	<DT></DT>
	<DD><B>4. </B>From the Help File dialog, browse to find the help file Composer.hlp,
	which also available from vb6ch24.zip.
</DL>



<BLOCKQUOTE>
	<P><B>5. </B>Click the <U>O</U>pen button in the Help File dialog to add the filename
	to the Project Properties dialog.

</BLOCKQUOTE>


<DL>
	<DT></DT>
	<DD><B>6. </B>Click OK in the Project Properties dialog (see Figure 24.13).
	<P>
</DL>

<P><A HREF="javascript:popUp('24fig09.gif')"><B>FIGURE 24.13</B></A> <I>You can associate
a help file with a project at design time from the Project Properties dialog.</I></P>
<P>You can associate a help file to an application at runtime by using the HelpFile
property of the App object:</P>
<P>
<PRE>Private Sub Form_Load()
    App.HelpFile = &quot;Composer.hlp&quot;
End Sub
</PRE>
<P>When you associate a help file to an application with the Project Properties dialog,
if you put the help file in the same directory as the application, you can truncate
the drive and directory path from the filename. This eliminates a possible runtime
error.</P>
<P>After a help file is associated with an application, if you press F1 when your
application has the focus, the associated help file will always appear.</P>
<P>
<H2><A NAME="Heading5"></A>Making Context-Sensitive Help</H2>
<P>Context-sensitive help means that your application can call up a specific topic
in a help file based on the area from which your program is making the call for help.
For example, if you are in a message box that has a Help button, clicking the button
displays a help file specific to the message box (see Figure 24.14).</P>
<P>You make your application and your application's help context- sensitive by assigning
a topic ID's numeric value to the HelpContextID property of a given control or object.
As you learned earlier, the topic ID is the string that identifies the location of
a given topic within the structure of a help file. Generally, topic IDs follow a
naming convention that begins with the characters IDH_, which loosely stands for
&quot;identification for help file.&quot; You follow the underscore character with
some additional naming logic. (In the sample file, Composer.rtf, French composers
start with the characters FR followed by serialization numbers, and German composers
follow the underscore with the characters GR, which are also serialized--GR01, GR02,
and GR03. The composer prefix naming convention is programmer defined.) After the
help file is tagged with topic IDs, you assign a number that corresponds to a topic
ID's string.</P>
<P><A HREF="javascript:popUp('24fig10.gif')"><B>FIGURE 24.14</B></A> <I>Applications
with context-sensitive help are much easier to use.</I></P>
<P>You assign the topic ID a number in the Map dialog of the Help Workshop (see Figure
24.15). After the topic IDs are assigned a unique number, you compile the help project
file. The number assigned to the topic ID is the value that you'll assign to the
HelpContextID property in your Visual Basic application.</P>
<P>The Composer.vbp project illustrates assigning a value to the HelpContextID property.
The project is a control array of five OptionButtons. The HelpContextID property
of each OptionButton is assigned a unique value that corresponds to a related topic
ID within the help file Composer.hlp (see Figure 24.16). When users select a specific
OptionButton and then press F1, the help file Composer.hlp automatically opens to
the topic related to the OptionButton (see Figure 24.17).</P>
<P><A HREF="javascript:popUp('24fig11.gif')"><B>FIGURE 24.15</B></A> <I>You access
the Map dialog by clicking the Map button of the Help Workshop window.</I></P>

<P><A HREF="javascript:popUp('24fig12.gif')"><B>FIGURE 24.16</B></A> <I>The value
for HelpContextID is created when you make the help file in the Help Workshop.</I></P>

<P>In addition to using the HelpContextID property to make your program react in
a context-sensitive manner when users press F1, you can also make message boxes display
context-sensitive <U>H</U>elp buttons. Listing 24.1 shows you how to take advantage
of the last two arguments of the MsgBox() function, HelpFile and HelpContextID, which
assign a help file and topic to the message box. Notice that the HelpFile argument
is assigned the value of the App object's HelpFile property (line 20). The HelpContextID
of the given OptionButton is assigned to the HelpContextID argument of the MsgBox()
function on line 21. Assigning the specific HelpContextID of the OptionButton to
the HelpContextID argument of the MsgBox() function displays the exact topic for
that OptionButton when users click the <U>H</U>elp button. Figure 24.10 shows the
listed code in action.</P>
<P><A HREF="javascript:popUp('24fig13.gif')"><B>FIGURE 24.17</B></A> <I>When users
select the OptionButton and press F1, the appropriate topic appears in the help window.</I></P>
<P>
<H4>LISTING 24.1&#160;&#160;24LIST01.TXT--Assigning Context-Sensitive Help to <BR>
a Message Box</H4>
<PRE>01 Private Sub cmdAdd_Click()</PRE>
<PRE>02 Dim i%</PRE>
<PRE>03 Dim Result%</PRE>
<PRE>04 Dim Msg$</PRE>
<PRE>05 `Make a message for the Message Box</PRE>
<PRE>06 Msg$ = &quot;Strike the Help Button for more help&quot;</PRE>
<PRE>07</PRE>
<PRE>08 `Traverse all the OptionButtons in the control array</PRE>
<PRE>09 `to find the one that is true. (Count is a property</PRE>
<PRE>10 `of the control array collection that reports the</PRE>
<PRE>11 `number of items in the control array.)</PRE>
<PRE>12 For i% = 0 To optComposer.Count - 1</PRE>
<PRE>13 If optComposer(i).Value = True Then</PRE>
<PRE>14 lblComposer.Caption = optComposer(i%).Caption</PRE>
<PRE>15</PRE>
<PRE>16 `Display a Message Box with a Help button. Also</PRE>
<PRE>17 `assign a Help file and Help topic to the</PRE>
<PRE>18 `Message Box</PRE>
<PRE>19 Result% = MsgBox(Msg$, vbMsgBoxHelpButton, _ &quot;Help Demo&quot;, App.HelpFile, _ optComposer(i).HelpContextID)</PRE>
<PRE>20 End If</PRE>
<PRE>21 Next i%</PRE>
<PRE>22 End Sub</PRE>


<BLOCKQUOTE>
	<P>
<HR>
<STRONG>Usable error reporting</STRONG></P>
	<P>A message box that reports an error should convey three points of information:
	what the error is, what probably caused the error, and what users can do to correct
	the error. 
<HR>


</BLOCKQUOTE>

<P>A good prompting scheme not only notifies users that an error has occurred or
a decision must be made, but also provides details about what the issue is and suggestions
on how to resolve it. By assigning a help file and HelpContextID to a message box,
you greatly increase the amount of information that you provide to users at key decision
points or when they need to address errors.</P>
<P>You can never offer your users too much help. A good, easy-to-use and easy-to-understand
help system will distinguish your program for the better. If you are so inclined,
study other programs' help documentation. Many companies devote a great deal of resources
to making quality help systems, and taking advantage of their efforts will help you
in your own endeavors.</P>
<H1></H1>
<CENTER>
<P>
<HR>
<A HREF="ch23.htm" tppabs="http://pbs.mcp.com/ebooks/078971633X/ch23/ch23.htm"><IMG SRC="previous.gif" tppabs="http://pbs.mcp.com/ebooks/078971633X/button/previous.gif" WIDTH="128" HEIGHT="28"
ALIGN="BOTTOM" ALT="Previous chapter" BORDER="0"></A><A HREF="ch25.htm" tppabs="http://pbs.mcp.com/ebooks/078971633X/ch25/ch25.htm"><IMG
SRC="next.gif" tppabs="http://pbs.mcp.com/ebooks/078971633X/button/next.gif" WIDTH="128" HEIGHT="28" ALIGN="BOTTOM" ALT="Next chapter"
BORDER="0"></A><A HREF="index-38.htm" tppabs="http://pbs.mcp.com/ebooks/078971633X/index.htm"><IMG SRC="contents.gif" tppabs="http://pbs.mcp.com/ebooks/078971633X/button/contents.gif" WIDTH="128"
HEIGHT="28" ALIGN="BOTTOM" ALT="Contents" BORDER="0"></A></P>

<P>&#169; <A HREF="copy.htm" tppabs="http://pbs.mcp.com/ebooks/078971633X/copy.htm">Copyright</A>, Macmillan Computer Publishing. All
rights reserved.
</CENTER>


</BODY>

</HTML>
