<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2//EN">
<HTML>

<HEAD>
<SCRIPT LANGUAGE="JavaScript">

<!--

function popUp(pPage) {
 var fullURL = document.location;
 var textURL = fullURL.toString();
 var URLlen = textURL.length;
 var lenMinusPage = textURL.lastIndexOf("/");
 lenMinusPage += 1;
 var fullPath = textURL.substring(0,lenMinusPage);
 popUpWin = window.open('','popWin','resizable=yes,scrollbars=no,width=525,height=394');
 figDoc= popUpWin.document;
 zhtm= '<HTML><HEAD><TITLE>' + pPage + '</TITLE>';
 zhtm += '</head>';
 zhtm += '<BODY bgcolor="#FFFFFF">';
 zhtm += '<IMG SRC="' + fullPath + pPage + '">';
 zhtm += '<P><B>' + pPage + '</B>';
 zhtm += '</BODY></HTML>';
 window.popUpWin.document.write(zhtm);
 window.popUpWin.document.close();
 // Johnny Jackson 4/28/98
 }

//-->
                                                                
</SCRIPT>
<link rel="stylesheet" href="ebooks.css" tppabs="http://pbs.mcp.com/includes/stylesheets/ebooks.css">

	<META HTTP-EQUIV="Content-Type" CONTENT="text/html;CHARSET=iso-8859-1">
	<TITLE>Using Visual Basic 6 -- Appendix A -- Command Syntax</TITLE>
</HEAD>

<BODY TEXT="#000000" BGCOLOR="#FFFFFF">

<CENTER>
<H1><IMG SRC="que.gif" tppabs="http://pbs.mcp.com/ebooks/078971633X/button/que.gif" WIDTH="171" HEIGHT="66" ALIGN="BOTTOM" BORDER="0"><BR>
Using Visual Basic 6</H1>
</CENTER>
<CENTER>
<P><A HREF="ch32.htm" tppabs="http://pbs.mcp.com/ebooks/078971633X/ch32/ch32.htm"><IMG SRC="previous.gif" tppabs="http://pbs.mcp.com/ebooks/078971633X/button/previous.gif" WIDTH="128" HEIGHT="28"
ALIGN="BOTTOM" ALT="Previous chapter" BORDER="0"></A><A HREF="apb.htm" tppabs="http://pbs.mcp.com/ebooks/078971633X/apb/apb.htm"><IMG
SRC="next.gif" tppabs="http://pbs.mcp.com/ebooks/078971633X/button/next.gif" WIDTH="128" HEIGHT="28" ALIGN="BOTTOM" ALT="Next chapter"
BORDER="0"></A><A HREF="index-38.htm" tppabs="http://pbs.mcp.com/ebooks/078971633X/index.htm"><IMG SRC="contents.gif" tppabs="http://pbs.mcp.com/ebooks/078971633X/button/contents.gif" WIDTH="128"
HEIGHT="28" ALIGN="BOTTOM" ALT="Contents" BORDER="0"></A> 
<HR>

</CENTER>
<CENTER>
<H1>- A -<BR>
Command Syntax</H1>
</CENTER>

<UL>
	<LI><A HREF="#Heading1">Functions and Statements</A>
	<UL>
		<LI><A HREF="#Heading2">Abs Function</A>
		<LI><A HREF="#Heading3">AppActivate Statement</A>
		<LI><A HREF="#Heading4">Array Function</A>
		<LI><A HREF="#Heading5">Asc Function</A>
		<LI><A HREF="#Heading6">Atn Function</A>
		<LI><A HREF="#Heading7">Beep Statement</A>
		<LI><A HREF="#Heading8">Call Statement</A>
		<LI><A HREF="#Heading9">CBool Function</A>
		<LI><A HREF="#Heading10">CByte Function</A>
		<LI><A HREF="#Heading11">CCur Function</A>
		<LI><A HREF="#Heading12">CDate Function</A>
		<LI><A HREF="#Heading13">CDbl Function</A>
		<LI><A HREF="#Heading14">CDec Function</A>
		<LI><A HREF="#Heading15">ChDir Statement</A>
		<LI><A HREF="#Heading16">ChDrive Statement</A>
		<LI><A HREF="#Heading17">Choose Function</A>
		<LI><A HREF="#Heading18">Chr Function</A>
		<LI><A HREF="#Heading19">CInt Function</A>
		<LI><A HREF="#Heading20">CLng Function</A>
		<LI><A HREF="#Heading21">Close Statement</A>
		<LI><A HREF="#Heading22">Command Function</A>
		<LI><A HREF="#Heading23">Const Statement</A>
		<LI><A HREF="#Heading24">Cos Function</A>
		<LI><A HREF="#Heading25">CreateObject Function</A>
		<LI><A HREF="#Heading26">CSng Function</A>
		<LI><A HREF="#Heading27">CStr Function</A>
		<LI><A HREF="#Heading28">CurDir Function</A>
		<LI><A HREF="#Heading29">CVar Function</A>
		<LI><A HREF="#Heading30">CVErr Function</A>
		<LI><A HREF="#Heading31">Date Function</A>
		<LI><A HREF="#Heading32">Date Statement</A>
		<LI><A HREF="#Heading33">DateAdd Function</A>
		<LI><A HREF="#Heading34">DateDiff Function</A>
		<LI><A HREF="#Heading35">DatePart Function</A>
		<LI><A HREF="#Heading36">DateSerial Function</A>
		<LI><A HREF="#Heading37">DateValue Function</A>
		<LI><A HREF="#Heading38">Day Function</A>
		<LI><A HREF="#Heading39">DDB Function</A>
		<LI><A HREF="#Heading40">Declare Statement</A>
		<LI><A HREF="#Heading41">DefBool Statement</A>
		<LI><A HREF="#Heading42">DefByte Statement</A>
		<LI><A HREF="#Heading43">DefCur Statement</A>
		<LI><A HREF="#Heading44">DefDate Statement</A>
		<LI><A HREF="#Heading45">DefDbl Statement</A>
		<LI><A HREF="#Heading46">DefDec Statement</A>
		<LI><A HREF="#Heading47">DefInt Statement</A>
		<LI><A HREF="#Heading48">DefLng Statement</A>
		<LI><A HREF="#Heading49">DefObj Statement</A>
		<LI><A HREF="#Heading50">DefSng Statement</A>
		<LI><A HREF="#Heading51">DefStr Statement</A>
		<LI><A HREF="#Heading52">DefVar Statement</A>
		<LI><A HREF="#Heading53">DeleteSetting Statement</A>
		<LI><A HREF="#Heading54">Dim Statement</A>
		<LI><A HREF="#Heading55">Dir Function</A>
		<LI><A HREF="#Heading56">Do...Loop Statement</A>
		<LI><A HREF="#Heading57">DoEvents Function</A>
		<LI><A HREF="#Heading58">End Statement</A>
		<LI><A HREF="#Heading59">Enum Statement</A>
		<LI><A HREF="#Heading60">Environ Function</A>
		<LI><A HREF="#Heading61">EOF Function</A>
		<LI><A HREF="#Heading62">Erase Statement</A>
		<LI><A HREF="#Heading63">Error Function</A>
		<LI><A HREF="#Heading64">Error Statement</A>
		<LI><A HREF="#Heading65">Event Statement</A>
		<LI><A HREF="#Heading66">Exit Statement</A>
		<LI><A HREF="#Heading67">Exp Function</A>
		<LI><A HREF="#Heading68">FileAttr Function</A>
		<LI><A HREF="#Heading69">FileCopy Statement</A>
		<LI><A HREF="#Heading70">FileDateTime Function</A>
		<LI><A HREF="#Heading71">FileLen Function</A>
		<LI><A HREF="#Heading72">Fix Function</A>
		<LI><A HREF="#Heading73">For Each...Next Statement</A>
		<LI><A HREF="#Heading74">For...Next Statement</A>
		<LI><A HREF="#Heading75">Format Function</A>
		<LI><A HREF="#Heading76">FreeFile Function</A>
		<LI><A HREF="#Heading77">Function Statement</A>
		<LI><A HREF="#Heading78">FV Function</A>
		<LI><A HREF="#Heading79">Get Statement</A>
		<LI><A HREF="#Heading80">GetAllSettings Function</A>
		<LI><A HREF="#Heading81">GetAttr Function</A>
		<LI><A HREF="#Heading82">GetAutoServerSettings Function</A>
		<LI><A HREF="#Heading83">GetObject Function</A>
		<LI><A HREF="#Heading84">GetSetting Function</A>
		<LI><A HREF="#Heading85">GoSub...Return Statement</A>
		<LI><A HREF="#Heading86">GoTo Statement</A>
		<LI><A HREF="#Heading87">Hex Function</A>
		<LI><A HREF="#Heading88">Hour Function</A>
		<LI><A HREF="#Heading89">If...Then...Else Statement</A>
		<LI><A HREF="#Heading90">IIf Function</A>
		<LI><A HREF="#Heading91">IMEStatus Function</A>
		<LI><A HREF="#Heading92">Implements Statement</A>
		<LI><A HREF="#Heading93">Input # Statement</A>
		<LI><A HREF="#Heading94">Input Function</A>
		<LI><A HREF="#Heading95">InputBox Function</A>
		<LI><A HREF="#Heading96">InStr Function</A>
		<LI><A HREF="#Heading97">Int Function</A>
		<LI><A HREF="#Heading98">IPmt Function</A>
		<LI><A HREF="#Heading99">IRR Function</A>
		<LI><A HREF="#Heading100">IsArray Function</A>
		<LI><A HREF="#Heading101">IsDate Function</A>
		<LI><A HREF="#Heading102">IsEmpty Function</A>
		<LI><A HREF="#Heading103">IsError Function</A>
		<LI><A HREF="#Heading104">IsMissing Function</A>
		<LI><A HREF="#Heading105">IsNull Function</A>
		<LI><A HREF="#Heading106">IsNumeric Function</A>
		<LI><A HREF="#Heading107">IsObject Function</A>
		<LI><A HREF="#Heading108">Kill Statement</A>
		<LI><A HREF="#Heading109">LBound Function</A>
		<LI><A HREF="#Heading110">LCase Function</A>
		<LI><A HREF="#Heading111">Left Function</A>
		<LI><A HREF="#Heading112">Len Function</A>
		<LI><A HREF="#Heading113">Let Statement</A>
		<LI><A HREF="#Heading114">Line Input # Statement</A>
		<LI><A HREF="#Heading115">Load Statement</A>
		<LI><A HREF="#Heading116">LoadPicture Function</A>
		<LI><A HREF="#Heading117">LoadResData Function</A>
		<LI><A HREF="#Heading118">LoadResPicture Function</A>
		<LI><A HREF="#Heading119">LoadResString Function</A>
		<LI><A HREF="#Heading120">Loc Function</A>
		<LI><A HREF="#Heading121">Lock Statement</A>
		<LI><A HREF="#Heading122">LOF Function</A>
		<LI><A HREF="#Heading123">Log Function</A>
		<LI><A HREF="#Heading124">LSet Statement</A>
		<LI><A HREF="#Heading125">LTrim Function</A>
		<LI><A HREF="#Heading126">Mid Function</A>
		<LI><A HREF="#Heading127">Mid Statement</A>
		<LI><A HREF="#Heading128">Minute Function</A>
		<LI><A HREF="#Heading129">MIRR Function</A>
		<LI><A HREF="#Heading130">MkDir Statement</A>
		<LI><A HREF="#Heading131">Month Function</A>
		<LI><A HREF="#Heading132">MsgBox Function</A>
		<LI><A HREF="#Heading133">Name Statement</A>
		<LI><A HREF="#Heading134">Now Function</A>
		<LI><A HREF="#Heading135">NPer Function</A>
		<LI><A HREF="#Heading136">NPV Function</A>
		<LI><A HREF="#Heading137">Oct Function</A>
		<LI><A HREF="#Heading138">On Error Statement</A>
		<LI><A HREF="#Heading139">On...GoSub Statement</A>
		<LI><A HREF="#Heading140">On...GoTo Statement</A>
		<LI><A HREF="#Heading141">Open Statement</A>
		<LI><A HREF="#Heading142">Option Base Statement</A>
		<LI><A HREF="#Heading143">Option Compare Statement</A>
		<LI><A HREF="#Heading144">Option Explicit Statement</A>
		<LI><A HREF="#Heading145">Option Private Statement</A>
		<LI><A HREF="#Heading146">Partition Function</A>
		<LI><A HREF="#Heading147">Pmt Function</A>
		<LI><A HREF="#Heading148">PPmt Function</A>
		<LI><A HREF="#Heading149">Print # Statement</A>
		<LI><A HREF="#Heading150">Private Statement</A>
		<LI><A HREF="#Heading151">Property Get Statement</A>
		<LI><A HREF="#Heading152">Property Let Statement</A>
		<LI><A HREF="#Heading153">Property Set Statement</A>
		<LI><A HREF="#Heading154">Public Statement</A>
		<LI><A HREF="#Heading155">Put Statement</A>
		<LI><A HREF="#Heading156">PV Function</A>
		<LI><A HREF="#Heading157">QBColor Function</A>
		<LI><A HREF="#Heading158">RaiseEvent Function</A>
		<LI><A HREF="#Heading159">Randomize Statement</A>
		<LI><A HREF="#Heading160">Rate Function</A>
		<LI><A HREF="#Heading161">ReDim Statement</A>
		<LI><A HREF="#Heading162">Rem Statement</A>
		<LI><A HREF="#Heading163">Reset Statement</A>
		<LI><A HREF="#Heading164">Resume Statement</A>
		<LI><A HREF="#Heading165">RGB Function</A>
		<LI><A HREF="#Heading166">Right Function</A>
		<LI><A HREF="#Heading167">RmDir Statement</A>
		<LI><A HREF="#Heading168">Rnd Function</A>
		<LI><A HREF="#Heading169">RSet Statement</A>
		<LI><A HREF="#Heading170">RTrim Function</A>
		<LI><A HREF="#Heading171">SavePicture Statement</A>
		<LI><A HREF="#Heading172">SaveSetting Statement</A>
		<LI><A HREF="#Heading173">Second Function</A>
		<LI><A HREF="#Heading174">Seek Function</A>
		<LI><A HREF="#Heading175">Seek Statement</A>
		<LI><A HREF="#Heading176">Select Case Statement</A>
		<LI><A HREF="#Heading177">SendKeys Statement</A>
		<LI><A HREF="#Heading178">Set Statement</A>
		<LI><A HREF="#Heading179">SetAttr Statement</A>
		<LI><A HREF="#Heading180">Sgn Function</A>
		<LI><A HREF="#Heading181">Shell Function</A>
		<LI><A HREF="#Heading182">Sin Function</A>
		<LI><A HREF="#Heading183">SLN Function</A>
		<LI><A HREF="#Heading184">Space Function</A>
		<LI><A HREF="#Heading185">Spc Function</A>
		<LI><A HREF="#Heading186">Sqr Function</A>
		<LI><A HREF="#Heading187">Static Statement</A>
		<LI><A HREF="#Heading188">Stop Statement</A>
		<LI><A HREF="#Heading189">Str Function</A>
		<LI><A HREF="#Heading190">StrComp Function</A>
		<LI><A HREF="#Heading191">StrConv Function</A>
		<LI><A HREF="#Heading192">String Function</A>
		<LI><A HREF="#Heading193">Sub Statement</A>
		<LI><A HREF="#Heading194">Switch Function</A>
		<LI><A HREF="#Heading195">SYD Function</A>
		<LI><A HREF="#Heading196">Tab Function</A>
		<LI><A HREF="#Heading197">Tan Function</A>
		<LI><A HREF="#Heading198">Time Function</A>
		<LI><A HREF="#Heading199">Time Statement</A>
		<LI><A HREF="#Heading200">Timer Function</A>
		<LI><A HREF="#Heading201">TimeSerial Function</A>
		<LI><A HREF="#Heading202">TimeValue Function</A>
		<LI><A HREF="#Heading203">Trim Function</A>
		<LI><A HREF="#Heading204">Type Statement</A>
		<LI><A HREF="#Heading205">TypeName Function</A>
		<LI><A HREF="#Heading206">UBound Function</A>
		<LI><A HREF="#Heading207">UCase Function</A>
		<LI><A HREF="#Heading208">Unload Statement</A>
		<LI><A HREF="#Heading209">Unlock Statement</A>
		<LI><A HREF="#Heading210">Val Function</A>
		<LI><A HREF="#Heading211">VarType Function</A>
		<LI><A HREF="#Heading212">Weekday Function</A>
		<LI><A HREF="#Heading213">While...Wend Statement</A>
		<LI><A HREF="#Heading214">Width # Statement</A>
		<LI><A HREF="#Heading215">With Statement</A>
		<LI><A HREF="#Heading216">Write # Statement</A>
		<LI><A HREF="#Heading217">Year Function</A>
	</UL>
	<LI><A HREF="#Heading218">Summary</A>
</UL>

<P>
<HR SIZE="4">

<CENTER>
<H1></H1>
</CENTER>
<P>Visual Basic provides more than 200 built-in statements and functions. Some are
used frequently; some are seldom used at all. Even experienced programmers sometimes
happen upon a statement or function they didn't know about.</P>
<P>This appendix can be considered a quick-reference guide to all of VB's built-in
statements and functions. It offers the syntax for each, as well as a brief description
of what it does and how its arguments (if any) are used. This is by no means a complete
reference. Microsoft's<I> Visual Basic 6.0 Language Reference</I> is probably the
best source for in-depth information on VB's statements and functions. If you have
any questions about syntax or use of a particular statement or function, then you
are strongly urged to consult that reference to obtain additional information.</P>
<P>
<H2><A NAME="Heading1"></A>Functions and Statements</H2>
<H3><A NAME="Heading2"></A>Abs Function</H3>
<PRE>Abs(<I>number</I>)
</PRE>
<P>Returns the absolute value of <I>number</I>. The data type returned is the same
as the data type of the <I>number</I> argument.</P>
<P>
<H3><A NAME="Heading3"></A>AppActivate Statement</H3>
<PRE>AppActivate <I>title</I>[,<I>wait</I>]
</PRE>
<P>Activates the application window that has the string <I>title</I> in its title
bar or, alternatively, the task ID specified by <I>title</I>. The optional <I>wait</I>
argument (Boolean) can be used to specify whether the calling application should
wait until it has the focus before the application window is activated.</P>
<P>
<H3><A NAME="Heading4"></A>Array Function</H3>
<PRE>Array(<I>arglist</I>)
</PRE>
<P>Returns a Variant data item that contains an array. <I>arglist</I> refers to a
comma-delimited list of values that make up the elements of the array, with the first
value corresponding to the first element of the array, the second value corresponding
to the second element of the array, and so on.</P>
<P>
<H3><A NAME="Heading5"></A>Asc Function</H3>
<PRE>Asc(<I>string</I>)
</PRE>
<P>Returns an Integer value that represents the ASCII code for the first character
in the <I>string</I>.</P>
<P>
<H3><A NAME="Heading6"></A>Atn Function</H3>
<PRE>Atn(<I>number</I>)
</PRE>
<P>Returns a Double value that is the arctangent of <I>number</I>.</P>
<P>
<H3><A NAME="Heading7"></A>Beep Statement</H3>
<PRE>Beep
</PRE>
<P>Sounds a tone through the PC's speaker. Frequency and duration of the tone may
vary from system to system.</P>
<P>
<H3><A NAME="Heading8"></A>Call Statement</H3>
<PRE>[Call] <I>name</I> [<I>argumentlist</I>]
</PRE>
<P>Executes a sub, function, or DLL procedure. The <I>name</I> argument specifies
the name of the procedure to call, and <I>argumentlist</I> is an optional list of
arguments that will be passed to the called procedure. The Call keyword is optional,
but if it is included, then at least one or more arguments for <I>argumentlist</I>
must also be included.</P>
<P>
<H3><A NAME="Heading9"></A>CBool Function</H3>
<PRE>CBool(<I>expression</I>)
</PRE>
<P>Converts the value of <I>expression</I> to a Boolean data type. The argument <I>expression</I>
can be any valid string or numeric expression.</P>
<P>
<H3><A NAME="Heading10"></A>CByte Function</H3>
<PRE>CByte(<I>expression</I>)
</PRE>
<P>Converts the value of <I>expression</I> to a Byte data type. The argument <I>expression</I>
must be a numeric value between 0 and 255.</P>
<P>
<H3><A NAME="Heading11"></A>CCur Function</H3>
<PRE>CCur(<I>expression</I>)
</PRE>
<P>Converts the value of <I>expression</I> to a Currency data type. The argument
<I>expression</I> must be a numeric value between -922,337,203,685,477.5808 and 922,337,203,685,477.5807.</P>
<P>
<H3><A NAME="Heading12"></A>CDate Function</H3>
<PRE>CDate(<I>expression</I>)
</PRE>
<P>Converts the value of <I>expression</I> to a Date data type. The argument <I>expression</I>
must be a valid date expression.</P>
<P>
<H3><A NAME="Heading13"></A>CDbl Function</H3>
<PRE>CDbl(<I>expression</I>)
</PRE>
<P>Converts the value of <I>expression</I> to a Double data type. The argument <I>expression</I>
must be a numeric value between -1.79769313486232E308 and -4.94065645841247E-324
for negative values, or between 4.94065645841247E-324 and 1.79769313486232E308 for
positive values.</P>
<P>
<H3><A NAME="Heading14"></A>CDec Function</H3>
<PRE>CDec(<I>expression</I>)
</PRE>
<P>Converts the value of <I>expression</I> to a Decimal data type. The argument <I>expression</I>
must be a numeric value of +/-79,228,162,514,264,337,593,543,950,335 for zero-scaled
numbers (numbers with no decimal places), or +/-7.9228162514264337593543950335 for
numbers with 28 decimal places.</P>
<P>
<H3><A NAME="Heading15"></A>ChDir Statement</H3>
<PRE>ChDir <I>path</I>
</PRE>
<P>Changes the current directory to the one specified by the <I>path</I> argument.
Note that although ChDir changes the default directory, it does not change the default
drive as well.</P>
<P>
<H3><A NAME="Heading16"></A>ChDrive Statement</H3>
<PRE>ChDrive <I>drive</I>
</PRE>
<P>Changes the current drive to the one specified by the <I>drive</I> argument.</P>
<P>
<H3><A NAME="Heading17"></A>Choose Function</H3>
<PRE>Choose(<I>index</I>, <I>choice-1</I>[, <I>choice-2</I>, ... [, <I>choice-n</I>]])
</PRE>
<P>Returns a value from a list of choices (specified by the arguments <I>choice-1</I>
through <I>choice-n</I>) based on the value of the <I>index</I> argument. If <I>index</I>
is 1, then the value returned by the Choose function will be the value represented
by <I>choice-1</I>; if <I>index</I> is 2, then the value returned will be that of
<I>choice-2</I>; and so on.</P>
<P>
<H3><A NAME="Heading18"></A>Chr Function</H3>
<PRE>Chr(<I>charcode</I>)
</PRE>
<P>Returns a one-character String value that represents the ASCII character of the
number specified by the <I>charcode</I> argument.</P>
<P>
<H3><A NAME="Heading19"></A>CInt Function</H3>
<PRE>CInt(<I>expression</I>)
</PRE>
<P>Converts the value of <I>expression</I> to an Integer data type. The argument
<I>expression</I> must be a numeric value from -32,768 to 32,767. Fractions are rounded.</P>
<P>
<H3><A NAME="Heading20"></A>CLng Function</H3>
<PRE>CLng(<I>expression</I>)
</PRE>
<P>Converts the value of <I>expression</I> to a Long data type. The argument <I>expression</I>
must be a numeric value from -2,147,483,648 to 2,147,483,647. Fractions are rounded.</P>
<P>
<H3><A NAME="Heading21"></A>Close Statement</H3>
<PRE>Close [<I>filenumberlist</I>]
</PRE>
<P>Closes any files opened with the Open statement that corre- spond to the file
numbers specified by <I>filenumberlist</I>. The <I>filenumberlist</I> argument can
contain a single file number (for example, #1) or multiple file numbers (for example,
#1, #4, #5). If the <I>filenumberlist</I> argument is omitted, all open files will
be closed.</P>
<P>
<H3><A NAME="Heading22"></A>Command Function</H3>
<PRE>Command
</PRE>
<P>Returns any command-line arguments specified when launching Visual Basic. For
compiled programs, Command returns the command-line arguments specified when the
program was launched.</P>
<P>
<H3><A NAME="Heading23"></A>Const Statement</H3>
<PRE>[Public | Private] Const <I>constname</I> [As <I>type</I>] = <I>expression</I>
</PRE>
<P>Declares a constant with the name <I>constname</I> and the value represented by
<I>expression</I>. The Public and Private keywords define the constant's scope, and
the optional As <I>type</I> specifies the constant's data type. If the As <I>type</I>
is omitted, the constant will be declared as the data type most appropriate for <I>expression</I>.</P>
<P>
<H3><A NAME="Heading24"></A>Cos Function</H3>
<PRE>Cos(<I>number</I>)
</PRE>
<P>Returns a Double value that is the cosine of the angle specified by the <I>number</I>
argument.</P>
<P>
<H3><A NAME="Heading25"></A>CreateObject Function</H3>
<PRE>CreateObject(<I>class</I>)
</PRE>
<P>Creates and returns a reference to an ActiveX object of type <I>class</I>. The
<I>class</I> argument should use the syntax <I>appname.objecttype</I>, where <I>appname</I>
is the name of the application providing the object, and <I>objecttype</I> is the
class of the object to be created.</P>
<P>
<H3><A NAME="Heading26"></A>CSng Function</H3>
<PRE>CSng(<I>expression</I>)
</PRE>
<P>Converts the value of <I>expression</I> to a Single data type. The argument <I>expression</I>
must be a numeric value from -3.402823E38 to -1.401298E-45 for negative values, or
from 1.401298E-45 to 3.402823E38 for positive values.</P>
<P>
<H3><A NAME="Heading27"></A>CStr Function</H3>
<PRE>CStr(<I>expression</I>)
</PRE>
<P>Converts the value of <I>expression</I> to a String data type. The string that
CStr returns depends on the data type of the <I>expression</I> argument: For Booleans,
CStr returns either True or False; for Dates, CStr returns a date based on the short
date format on your system; for Errors, CStr returns the word Error followed by the
error number. <I>expression</I> values that are Empty return a zero-length string,
and numeric <I>expression</I> values return a string containing the number. A Null
<I>expression</I> value will cause a runtime error.</P>
<P>
<H3><A NAME="Heading28"></A>CurDir Function</H3>
<PRE>CurDir[(<I>drive</I>)]
</PRE>
<P>Returns a String value that represents the full path of the current directory.
If the <I>drive</I> argument is given, then CurDir returns the directory path of
the current directory for that drive.</P>
<P>
<H3><A NAME="Heading29"></A>CVar Function</H3>
<PRE>CVar(<I>expression</I>)
</PRE>
<P>Converts the value of <I>expression</I> to a Variant data type. The argument <I>expression</I>
can be either numeric or a string.</P>
<P>
<H3><A NAME="Heading30"></A>CVErr Function</H3>
<PRE>CVErr(<I>errornumber</I>)
</PRE>
<P>Returns a Variant of subtype Error that contains the error number specified by
the <I>errornumber</I> argument.</P>
<P>
<H3><A NAME="Heading31"></A>Date Function</H3>
<PRE>Date
</PRE>
<P>Returns a Variant of subtype Date that contains the current system date.</P>
<P>
<H3><A NAME="Heading32"></A>Date Statement</H3>
<PRE>Date = <I>date</I>
</PRE>
<P>Sets the current system date as specified by the <I>date</I> argument. For Windows
95 systems, <I>date</I> must be a valid date between January 1, 1980 and December
31, 2099. For Windows NT systems, <I>date</I> must be a valid date between January
1, 1980 and December 31, 2079.</P>
<P>
<H3><A NAME="Heading33"></A>DateAdd Function</H3>
<PRE>DateAdd(<I>interval</I>, <I>number</I>, <I>date</I>)
</PRE>
<P>Returns a Variant of subtype Date calculated by taking the date specified by the
<I>date </I>argument and adding or subtracting the amount of time specified by <I>interval</I>
and <I>time</I>. The <I>interval</I> argument contains a code that represents a unit
of time (for example, <I>yyyy</I> for years, <I>m</I> for months, <I>d</I> for days),
and <I>number</I> is the number of units to be added to <I>date</I>.</P>
<P>
<H3><A NAME="Heading34"></A>DateDiff Function</H3>
<PRE>DateDiff(<I>interval</I>, <I>date1</I>, <I>date2</I>[,<I>firstdayofweek</I>[, <I>firstweekofyear</I>]])
</PRE>
<P>Returns a Variant of subtype Long that represents the number of time units between
two dates (<I>date1</I> and <I>date2</I>). The <I>interval</I> argument contains
a code that represents the unit of time (for example, <I>yyyy</I> for years) that
will be returned by the function. The optional <I>firstdayofweek</I> and <I>firstweekofyear</I>
arguments are used to specify how the time difference should be calculated when certain
codes are used for <I>interval</I>.</P>
<P>
<H3><A NAME="Heading35"></A>DatePart Function</H3>
<PRE>DatePart(<I>interval</I>, <I>date</I>[,<I>firstdayofweek</I>[,<I>firstweekofyear</I>]])
</PRE>
<P>Returns a Variant of subtype Integer that contains the part of <I>date </I>specified
by <I>interval</I>. The <I>interval</I> argument contains a code that represents
the unit of time (for example, <I>ww</I> for weeks) that will be returned by the
function. The optional <I>firstdayofweek</I> and <I>firstweekofyear</I> arguments
are used to specify how the date should be calculated when certain <I>interval</I>
codes are used.</P>
<P>
<H3><A NAME="Heading36"></A>DateSerial Function</H3>
<PRE>DateSerial(<I>year</I>, <I>month</I>, <I>day</I>)
</PRE>
<P>Returns a Variant of subtype Date that represents a date as specified by the <I>year</I>,
<I>month</I>, and <I>day</I> arguments.</P>
<P>
<H3><A NAME="Heading37"></A>DateValue Function</H3>
<PRE>DateValue(<I>date</I>)
</PRE>
<P>Returns a Variant of subtype Date that is derived from the date value specified
by the <I>date</I> argument.</P>
<P>
<H3><A NAME="Heading38"></A>Day Function</H3>
<PRE>Day(<I>date</I>)
</PRE>
<P>Returns a Variant of subtype Integer that represents the day of the month (1[nd]31)
for the date value specified by the <I>date</I> argument.</P>
<P>
<H3><A NAME="Heading39"></A>DDB Function</H3>
<PRE>DDB(<I>cost</I>, <I>salvage</I>, <I>life</I>, <I>period</I>[, <I>factor</I>])
</PRE>
<P>Returns a Double value that represents the depreciation of an asset for a specified
amount of time using a given method of depreciation. The <I>cost</I> argument represents
the initial cost of the asset, <I>salvage</I> represents the value of the asset at
the end of its working lifetime, <I>life</I> represents the lifetime of the asset,
and <I>period</I> represents the period (in months) for which the depreciation is
calculated. The optional <I>factor</I> argument specifies the rate at which the balance
declines. If it is omitted, then the double-declining depreciation method is used.</P>
<P>
<H3><A NAME="Heading40"></A>Declare Statement</H3>
<PRE>[Public | Private] Declare Sub <I>name</I> Lib &quot;<I>libname</I>&quot; [Alias _ &quot;<I>aliasname</I>&quot;][([<I>arglist</I>])]
</PRE>
<P>or</P>
<P>
<PRE>[Public | Private] Declare Function <I>name</I> Lib &quot;<I>libname</I>&quot; 
[Alias &quot;<I>aliasname</I>&quot;][([<I>arglist</I>])][As <I>type</I>]
</PRE>
<P>Declares references to Sub or Function procedures in an external DLL (dynamic-link
library). The optional Public and Private keywords define the procedure's scope.
The <I>name</I> argument is the name of the procedure, and the <I>libname</I> argument
specifies the DLL that contains the procedure. The optional <I>aliasname</I> argument
specifies an alternate name for the procedure in the DLL. <I>arglist</I> is a list
of arguments passed to the procedure. For Function procedures, the As <I>type</I>
specifies the data type of the value returned by the Function. Declare statements
can only be used at module level.</P>
<P>
<H3><A NAME="Heading41"></A>DefBool Statement</H3>
<PRE>DefBool <I>letterrange</I>[, <I>letterrange</I>]...
</PRE>
<P>Specifies that all variables and function return values that begin with the letters
specified by the <I>letterrange</I> arguments are automatically defined to be of
the Boolean data type. The <I>letterrange</I> arguments should be constructed as
<I>letter1</I>[-<I>letter2</I>], where <I>letter1</I> is the first (or only) letter
in the range, and <I>letter2</I> is the last letter in the range. DefBool can only
be used at module level.</P>
<P>
<H3><A NAME="Heading42"></A>DefByte Statement</H3>
<PRE>DefByte <I>letterrange</I>[, <I>letterrange</I>]...
</PRE>
<P>Specifies that all variables and function return values that begin with the letters
specified by the <I>letterrange</I> arguments are automatically defined to be of
the Byte data type. The <I>letterrange</I> arguments should be constructed as <I>letter1</I>[-<I>letter2</I>],
where <I>letter1</I> is the first (or only) letter in the range, and <I>letter2</I>
is the last letter in the range. DefByte can only be used at module level.</P>
<P>
<H3><A NAME="Heading43"></A>DefCur Statement</H3>
<PRE>DefCur <I>letterrange</I>[, <I>letterrange</I>]...
</PRE>
<P>Specifies that all variables and function return values that begin with the letters
specified by the <I>letterrange</I> arguments are automatically defined to be of
the Currency data type. The <I>letterrange</I> arguments should be constructed as
<I>letter1 </I>[-<I>letter2</I>], where <I>letter1</I> is the first (or only) letter
in the range, and <I>letter2</I> is the last letter in the range. DefCur can only
be used at module level.</P>
<P>
<H3><A NAME="Heading44"></A>DefDate Statement</H3>
<PRE>DefDate <I>letterrange</I>[, <I>letterrange</I>]...
</PRE>
<P>Specifies that all variables and function return values that begin with the letters
specified by the <I>letterrange</I> arguments are automatically defined to be of
the Date data type. The <I>letterrange</I> arguments should be constructed as <I>letter1</I>[-<I>letter2</I>],
where <I>letter1</I> is the first (or only) letter in the range, and <I>letter2</I>
is the last letter in the range. DefDate can only be used at module level.</P>
<P>
<H3><A NAME="Heading45"></A>DefDbl Statement</H3>
<PRE>DefDbl <I>letterrange</I>[, <I>letterrange</I>]...
</PRE>
<P>Specifies that all variables and function return values that begin with the letters
specified by the <I>letterrange</I> arguments are automatically defined to be of
the Double data type. The <I>letterrange</I> arguments should be constructed as <I>letter1</I>[-<I>letter2</I>],
where <I>letter1</I> is the first (or only) letter in the range, and <I>letter2</I>
is the last letter in the range. DefDbl can only be used at module level.</P>
<P>
<H3><A NAME="Heading46"></A>DefDec Statement</H3>
<PRE>DefDec <I>letterrange</I>[, <I>letterrange</I>]...
</PRE>
<P>Specifies that all variables and function return values that begin with the letters
specified by the <I>letterrange</I> arguments are automatically defined to be of
the Decimal data type. The <I>letterrange</I> arguments should be constructed as
<I>letter1</I>[-<I>letter2</I>], where <I>letter1</I> is the first (or only) letter
in the range, and <I>letter2</I> is the last letter in the range. DefDec can only
be used at module level.</P>
<P>
<H3><A NAME="Heading47"></A>DefInt Statement</H3>
<PRE>DefInt <I>letterrange</I>[, <I>letterrange</I>]...
</PRE>
<P>Specifies that all variables and function return values that begin with the letters
specified by the <I>letterrange</I> arguments are automatically defined to be of
the Integer data type. The <I>letterrange</I> arguments should be constructed as
<I>letter1</I>[-<I>letter2</I>], where <I>letter1</I> is the first (or only) letter
in the range, and <I>letter2</I> is the last letter in the range. DefInt can only
be used at module level.</P>
<P>
<H3><A NAME="Heading48"></A>DefLng Statement</H3>
<PRE>DefLng <I>letterrange</I>[, <I>letterrange</I>]...
</PRE>
<P>Specifies that all variables and function return values that begin with the letters
specified by the <I>letterrange</I> arguments are automatically defined to be of
the Long data type. The <I>letterrange</I> arguments should be constructed as <I>letter1</I>[-<I>letter2</I>],
where <I>letter1</I> is the first (or only) letter in the range, and <I>letter2</I>
is the last letter in the range. DefLng can only be used at module level.</P>
<P>
<H3><A NAME="Heading49"></A>DefObj Statement</H3>
<PRE>DefObj <I>letterrange</I>[, <I>letterrange</I>]...
</PRE>
<P>Specifies that all variables and function return values that begin with the letters
specified by the <I>letterrange</I> arguments are automatically defined to be of
the Object data type. The <I>letterrange</I> arguments should be constructed as <I>letter1</I>[-<I>letter2</I>],
where <I>letter1</I> is the first (or only) letter in the range, and <I>letter2</I>
is the last letter in the range. DefObj can only be used at module level.</P>
<P>
<H3><A NAME="Heading50"></A>DefSng Statement</H3>
<PRE>DefSng <I>letterrange</I>[, <I>letterrange</I>]...
</PRE>
<P>Specifies that all variables and function return values that begin with the letters
specified by the <I>letterrange</I> arguments are automatically defined to be of
the Single data type. The <I>letterrange</I> arguments should be constructed as <I>letter1</I>[-<I>letter2</I>],
where <I>letter1</I> is the first (or only) letter in the range, and <I>letter2</I>
is the last letter in the range. DefSng can only be used at module level.</P>
<P>
<H3><A NAME="Heading51"></A>DefStr Statement</H3>
<PRE>DefStr <I>letterrange</I>[, <I>letterrange</I>]...
</PRE>
<P>Specifies that all variables and function return values that begin with the letters
specified by the <I>letterrange</I> arguments are automatically defined to be of
the String data type. The <I>letterrange</I> arguments should be constructed as <I>letter1</I>[-<I>letter2</I>],
where <I>letter1</I> is the first (or only) letter in the range, and <I>letter2</I>
is the last letter in the range. DefStr can only be used at module level.</P>
<P>
<H3><A NAME="Heading52"></A>DefVar Statement</H3>
<PRE>DefVar <I>letterrange</I>[, <I>letterrange</I>]...
</PRE>
<P>Specifies that all variables and function return values that begin with the letters
specified by the <I>letterrange</I> arguments are automatically defined to be of
the Variant data type. The <I>letterrange</I> arguments should be constructed as
<I>letter1</I>[-<I>letter2</I>], where <I>letter1</I> is the first (or only) letter
in the range, and <I>letter2</I> is the last letter in the range. DefVar can only
be used at module level.</P>
<P>
<H3><A NAME="Heading53"></A>DeleteSetting Statement</H3>
<PRE>DeleteSetting <I>appname</I>, <I>section</I>[, <I>key</I>]
</PRE>
<P>Deletes an application's section or key setting entries from the System Registry.
The <I>appname</I> argument specifies the name of the application, and <I>section</I>
is the name of the section to be deleted. If the optional <I>key</I> argument is
used, then only that key (and not the whole section) will be deleted.</P>
<P>
<H3><A NAME="Heading54"></A>Dim Statement</H3>
<PRE>Dim [WithEvents] <I>varname</I>[([<I>subscripts</I>])] [As [New] <I>type</I>] [,[WithEvents] 
<I>varname</I>[([<I>subscripts</I>])] [As [New] <I>type</I>]]...
</PRE>
<P>Declares one or more variables or objects. The <I>varname</I> argument is the
name of the variable, and the optional As [New] <I>type</I> indicates its data type.
If the New keyword is used, then an implicit creation of the object is made. The
optional WithEvents keyword (valid only when the Dim statement is used in class modules)
indicates that <I>varname</I> is an object variable as is used to respond to events
triggered by an ActiveX object. The optional <I>subscripts </I>are the dimensions
of an array variable.</P>
<P>
<H3><A NAME="Heading55"></A>Dir Function</H3>
<PRE>Dir[(<I>pathname</I>[, <I>attributes</I>])]
</PRE>
<P>Returns a String value containing the name of a file, directory, or folder that
matches a pattern (specified in the <I>pathname</I> argument) and/or a file attribute
(specified in <I>attributes</I>). The first time the Dir function is called, it returns
the name of a file based on the <I>pathname</I> and <I>attributes</I> arguments.
If the function is called again and no arguments are given, then it returns the second
file name for the given <I>pathname</I> and <I>attributes</I>, and so on.</P>
<P>
<H3><A NAME="Heading56"></A>Do...Loop Statement</H3>
<PRE>Do [{While | Until} condition]
   [statements]
   [Exit Do]
   [statements]
Loop
</PRE>
<P>or</P>
<P>
<PRE>Do
   [statements]
   [Exit Do]
   [statements]
Loop [{While | Until} condition]
</PRE>
<P>Repeats one or more <I>statements</I> while a <I>condition</I> is True or until
a <I>condition</I> becomes True. The optional Exit Do keywords pass control to the
line of code immediately following the Do...Loop structure.</P>
<P>
<H3><A NAME="Heading57"></A>DoEvents Function</H3>
<PRE>DoEvents( )
</PRE>
<P>Temporarily gives control to the operating system so that it can process other
events. The DoEvents function is typically used inside loops so that a program does
not tie up system resources for a long period of time.</P>
<P>
<H3><A NAME="Heading58"></A>End Statement</H3>
<PRE>End
End Function
End If
End Property
End Select
End Sub
End Type
End With
</PRE>
<P>Ends a program (End), procedure (End Function, End Property, or End Sub), type
structure (End Type), or program block (End If, End Select, or End With).</P>
<P>
<H3><A NAME="Heading59"></A>Enum Statement</H3>
<PRE>[Public | Private] Enum name
    membername [= constantexpression]
    membername [= constantexpression]
      ...
End Enum
</PRE>
<P>Declares an enumeration type named <I>name</I> that is composed of one or more
members specified by <I>membername</I>. Members can be assigned values using <I>constantexpression</I>.
The optional Public and Private keywords define the enumeration's scope.</P>
<P>
<H3><A NAME="Heading60"></A>Environ Function</H3>
<PRE>Environ({<I>envstring</I> | <I>number</I>})
</PRE>
<P>Returns the String value of the operating system variable specified by <I>envstring</I>
or, alternatively, the numeric order of the environment string in the environment-string
table specified by <I>number</I>.</P>
<P>
<H3><A NAME="Heading61"></A>EOF Function</H3>
<PRE>EOF(<I>filenumber</I>)
</PRE>
<P>Returns a True or False value (Integer) that indicates whether the end of file
marker has been reached for the Random or Input<B> </B>file associated with the <I>filenumber</I>
argument.</P>
<P>
<H3><A NAME="Heading62"></A>Erase Statement</H3>
<PRE>Erase <I>arraylist</I>
</PRE>
<P>Reinitializes the elements in one or more fixed-size array and frees up the dynamic-array
storage space that was taken up by the array(s). The <I>arraylist</I> argument is
one or more comma-delimited array names.</P>
<P>
<H3><A NAME="Heading63"></A>Error Function</H3>
<PRE>Error[(<I>errornumber</I>)]
</PRE>
<P>Returns a String value that contains the error message that corresponds to the
<I>errornumber</I> argument.</P>
<P>
<H3><A NAME="Heading64"></A>Error Statement</H3>
<PRE>Error <I>errornumber</I>
</PRE>
<P>Causes an error to occur. The <I>errornumber</I> argument indicates the type of
error that should occur.</P>
<P>
<H3><A NAME="Heading65"></A>Event Statement</H3>
<PRE>[Public] Event <I>procedurename</I> [(<I>arglist</I>)]
</PRE>
<P>Declares a user-defined event with the name <I>procedurename</I>. The optional
Public keyword indicates that the Event should be visible throughout the project,
even though that is the default. The optional argument list (<I>arglist</I>) should
contain one or more arguments defined using the syntax:</P>
<P>
<PRE>   [ByVal | ByRef] <I>varname</I>[()] [As <I>type</I>]
</PRE>
<P>where <I>varname</I> is the name of the argument, As <I>type</I> indicates the
data type of the argument, and the optional ByRef or ByVal keywords specify whether
the argument should be passed by reference (ByRef) or by value (ByVal). If ByRef<B>
</B>and ByVal are not specified, then the argument will be passed by reference.</P>
<P>
<H3><A NAME="Heading66"></A>Exit Statement</H3>
<PRE>Exit Do
Exit For
Exit Function
Exit Property
Exit Sub
</PRE>
<P>Exits a procedure (Exit Function, Exit Property, or Exit Sub) or looping structure
(Exit Do or Exit For).</P>
<P>
<H3><A NAME="Heading67"></A>Exp Function</H3>
<PRE>Exp(<I>number</I>)
</PRE>
<P>Returns a Double value that is <I>e</I> (the base of natural logarithms) raised
to the power specified by <I>number</I>.</P>
<P>
<H3><A NAME="Heading68"></A>FileAttr Function</H3>
<PRE>FileAttr(<I>filenumber</I>, <I>returntype</I>)
</PRE>
<P>Returns a Long<B> </B>value that indicates the file mode for a file opened using
the Open statement. The argument <I>filenumber</I> is the file number for the open
file, and <I>returntype</I> indicates the type of information to be returned. Although
<I>returntype</I> can be set to 2 to return the operating system file handle for
the open file, it only works on 16-bit systems and should be avoided in VB5. Instead,
use a value of 1 for <I>returntype</I> to return the open file type. The possible
values returned by the FileAttr function for indicating file type are: 1 for Input,
2 for Output, 4 for Random, 8 for Append, and 32 for Binary.</P>
<P>
<H3><A NAME="Heading69"></A>FileCopy Statement</H3>
<PRE>FileCopy <I>source</I>, <I>destination</I>
</PRE>
<P>Copies the filename and path specified by the <I>source</I> argument to the filename
and path specified by the <I>destination</I> argument.</P>
<P>
<H3><A NAME="Heading70"></A>FileDateTime Function</H3>
<PRE>FileDateTime(<I>pathname</I>)
</PRE>
<P>Returns a Variant of subtype Date that indicates the date and time when the file
specified by the <I>pathname</I> argument was last modified.</P>
<P>
<H3><A NAME="Heading71"></A>FileLen Function</H3>
<PRE>FileLen(<I>pathname</I>)
</PRE>
<P>Returns a Long value that contains the file size (in bytes) of the file specified
by the <I>pathname</I> argument.</P>
<P>
<H3><A NAME="Heading72"></A>Fix Function</H3>
<PRE>Fix(<I>number</I>)
</PRE>
<P>Returns the integer portion of the number specified by the <I>number</I> argument.
If <I>number</I> is negative, then Fix returns the first negative integer greater
than or equal to <I>number</I>.</P>
<P>
<H3><A NAME="Heading73"></A>For Each...Next Statement</H3>
<PRE>For Each <I>element</I> In group
    [<I>statements</I>]
    [Exit For]
    [<I>statements</I>]
Next [<I>element</I>]
</PRE>
<P>Executes one or more <I>statements</I> for each <I>element</I> in the array or
collection specified by <I>group</I>. The optional Exit For can be used to immediately
exit the looping structure.</P>
<P>
<H3><A NAME="Heading74"></A>For...Next Statement</H3>
<PRE>For <I>counter</I> = start To end [Step <I>step</I>]
    [<I>statements</I>]
    [Exit For]
    [<I>statements</I>]
Next [<I>counter</I>]
</PRE>
<P>Executes one or more <I>statements</I> a specified number of times. The <I>counter</I>
argument is a variable used to increment from <I>start</I> to <I>end</I>. By default,
<I>counter</I> is incremented by 1 each time the loop is executed, although the optional
<I>step</I> argument can be used to specify a different increment. The optional Exit
For can be used to immediately exit the looping structure.</P>
<P>
<H3><A NAME="Heading75"></A>Format Function</H3>
<PRE>Format(<I>expression</I>[, <I>format</I>[, <I>firstdayofweek</I>[, _  <I>firstweekofyear</I>]]])
</PRE>
<P>Returns a Variant of subtype String that contains the value specified by <I>expression</I>
using a format defined by the <I>format</I> argument. The <I>format</I> argument
uses codes (for example, <I>d</I> for days or <I>#</I> for numbers) to determine
how <I>expression</I> will be formatted. The optional <I>firstdayofweek</I> and <I>firstweekofyear</I>
arguments are used when formatting certain values.</P>
<P>
<H3><A NAME="Heading76"></A>FreeFile Function</H3>
<PRE>FreeFile[(<I>rangenumber</I>)]
</PRE>
<P>Returns an Integer value the represents the next file number available for use
with the Open statement. The optional <I>rangenumber</I> argument can be used to
specify which range of file numbers should be used: 0 (the default) for file numbers
in the range of 1-255, or 1 for file numbers in the range of 256-511.</P>
<P>
<H3><A NAME="Heading77"></A>Function Statement</H3>
<PRE>[Public | Private | Friend] [Static] Function name _ [(<I>arglist</I>)] [As <I>type</I>]
    [<I>statements</I>]
    [<I>name = expression</I>]
    [Exit Function]
    [<I>statements</I>]
    [<I>name = expression</I>]
End Function
</PRE>
<P>Declares the various parts of a Function procedure. The optional Public, Private,
and Friend keywords can be used to define the Function's scope, and the optional
Static keyword indicates that the procedure's local variables are preserved between
calls to the Function. The <I>name</I> argument specifies the name of the Function
procedure and can be assigned a value (<I>name</I> = <I>expression</I>) that will
be returned by the procedure. The data type of the return value can be specified
using the As <I>type</I> clause. The optional<B> </B>Exit Function can be used to
exit the Function procedure immediately.</P>
<P>The optional list of arguments (<I>arglist</I>) defines the arguments that will
be passed to the procedure. The arguments should use the following syntax:</P>
<P>
<PRE>[Optional] [ByVal | ByRef] [ParamArray] <I>varname</I>[()] [As _ <I>type</I>] [= <I>default value</I>]
</PRE>
<P>where the Optional keyword can be used to specify that the argument is not required
(<I>default value</I> assigns the argument's default value), ByVal and ByRef determine
whether the argument should be passed by value or by reference (the default), and
the ParamArray keyword specifies that the argument is an Optional array of Variant
elements. ParamArray can only be used with the last argument in the argument list.</P>
<P>
<H3><A NAME="Heading78"></A>FV Function</H3>
<PRE>FV(<I>rate</I>, <I>nper</I>, <I>pmt</I>[, <I>pv</I>[, <I>type</I>]])
</PRE>
<P>Returns a Double<B> </B>value that indicates the future value of an annuity based
on a number (<I>nper</I>) of periodic fixed payment amounts (<I>pmt</I>) and a fixed
interest rate (<I>rate</I>). The optional <I>pv</I> argument specifies a present
value or lump sum of a series of future payments, and the optional <I>type</I> argument
specifies when payments are due (0 for end of the payment period, the default; 1
for beginning of the payment period).</P>
<P>
<H3><A NAME="Heading79"></A>Get Statement</H3>
<PRE>Get [#]filenumber,[ recnumber,] varname
</PRE>
<P>Reads data from the open disk file corresponding to the <I>filenumber</I> argument
into a variable (<I>varname</I>). Get works with files open as Random or Binary,
and a record number (<I>recnumber</I>) can be specified when retrieving data from
a Random file. When using Binary files, <I>recnumber</I> can alternatively be used
to specify the byte position from which the data is to be read.</P>
<P>
<H3><A NAME="Heading80"></A>GetAllSettings Function</H3>
<PRE>GetAllSettings(<I>appname</I>, <I>section</I>)
</PRE>
<P>Returns a list of key settings and their values from a specific application (<I>appname</I>)
entry and section (<I>section</I>) in the System Registry.</P>
<P>
<H3><A NAME="Heading81"></A>GetAttr Function</H3>
<PRE>GetAttr(<I>pathname</I>)
</PRE>
<P>Returns an Integer value that represents the attributes for the file, directory,
or folder specified by the <I>pathname</I> argument. The value returned can be compared
bitwise with several VB constants (vbNormal, vbReadOnly, vbHidden, vbSystem, vbDirectory,
and vbArchive) to determine which attributes are set.</P>
<P>
<H3><A NAME="Heading82"></A>GetAutoServerSettings Function</H3>
<PRE><I>object</I>.GetAutoServerSettings([<I>progid</I>], [<I>clsid</I>])
</PRE>
<P>Returns a Variant array that contains information concerning the state of an ActiveX
<I>object</I>'s registration. The optional <I>progid</I> and <I>clsid</I> can be
included to specify the object's ProgID and CLSID, respectively. The values of the
elements of the Variant array that are returned by GetAutoServerSettings are, in
order: local/remote registration of object (True if the object is registered remotely),
the remote machine name, the RPC network protocol name, and the RPC authentication
level.</P>
<P>
<H3><A NAME="Heading83"></A>GetObject Function</H3>
<PRE>GetObject([<I>pathname</I>] [,<I>class</I>])
</PRE>
<P>Returns a reference to an object of type <I>class</I>. The <I>pathname</I> argument
can be included to specify the path and filename from which the object should be
retrieved; however, if it is omitted, then the <I>class</I> name must be specified.</P>
<P>
<H3><A NAME="Heading84"></A>GetSetting Function</H3>
<PRE>GetSetting(<I>appname</I>, <I>section</I>, <I>key</I>[, <I>default</I>])
</PRE>
<P>Returns a single key setting value from a specific application (<I>appname</I>)
entry and section (<I>section</I>) in the System Registry. If no value is set for
the key setting specified, then the optional <I>default</I> value can be returned.
If default is omitted, then the default value returned will be a zero-length string.</P>
<P>
<H3><A NAME="Heading85"></A>GoSub...Return Statement</H3>
<PRE>GoSub line
    ...
    line
    ...
Return
</PRE>
<P>Transfers program control to the subroutine indicated by the line label or line
number <I>line</I> until the Return statement is reached; then returns control to
the line of code immediately following the GoSub statement.</P>
<P>
<H3><A NAME="Heading86"></A>GoTo Statement</H3>
<PRE>GoTo <I>line</I>
</PRE>
<P>Transfers program control to the line of code specified by the line label or line
number <I>line</I>. The line must be inside the procedure that contains the GoTo
statement.</P>
<P>
<H3><A NAME="Heading87"></A>Hex Function</H3>
<PRE>Hex(<I>number</I>)
</PRE>
<P>Returns a String value that represents the hexadecimal value of the argument <I>number</I>.</P>
<P>
<H3><A NAME="Heading88"></A>Hour Function</H3>
<PRE>Hour(<I>time</I>)
</PRE>
<P>Returns a Variant of subtype Integer that represents the hour (0[nd]23) of the
time value specified by the <I>time</I> argument.</P>
<P>
<H3><A NAME="Heading89"></A>If...Then...Else Statement</H3>
<PRE>If condition Then [statements] [Else elsestatements]
</PRE>
<P>or</P>
<P>
<PRE>If <I>condition</I> Then
    [<I>statements</I>]
[ElseIf <I>condition-n</I> Then
    [<I>elseifstatements</I>] ...
[Else
    [<I>elsestatements</I>]]
End If
</PRE>
<P>Conditionally executes one or more <I>statements</I> if the value expressed by
<I>condition</I> is True. One or more ElseIf clauses can be included to test other
conditions and execute other statements (<I>elseifstatements</I>) if the preceding
condition is False. An Else clause can also be included to execute other statements
(<I>elsestatements</I>) if none of the preceding conditions are True.</P>
<P>
<H3><A NAME="Heading90"></A>IIf Function</H3>
<PRE>IIf(<I>expression</I>, <I>truepart</I>, <I>falsepart</I>)
</PRE>
<P>Returns one of two values based on whether <I>expression</I> evaluates to True
or False. If True, then IIf returns the <I>truepart</I> value; if False, then the
<I>falsepart</I> value is returned.</P>
<P>
<H3><A NAME="Heading91"></A>IMEStatus Function</H3>
<PRE>IMEStatus
</PRE>
<P>Returns an Integer value that represents Windows' current Input Method Editor
(IME) mode. IMEStatus is only available in Far East versions.</P>
<P>
<H3><A NAME="Heading92"></A>Implements Statement</H3>
<PRE>Implements [<I>interfacename</I> | <I>class</I>]
</PRE>
<P>Specifies an interface (<I>interfacename</I>) or class (<I>class</I>) that will
be implemented in the class module in which the Implements statement is used.</P>
<P>
<H3><A NAME="Heading93"></A>Input # Statement</H3>
<PRE>Input #<I>filenumber</I>, <I>varlist</I>
</PRE>
<P>Reads data from the open file associated with the <I>filenumber</I> argument and
places it in the variables in the <I>varlist</I> argument. The <I>varlist</I> argument
should contain one or more comma-delimited variables.</P>
<P>
<H3><A NAME="Heading94"></A>Input Function</H3>
<PRE>Input(<I>number</I>, [#]<I>filenumber</I>)
</PRE>
<P>Returns a String value containing characters read in from the open file that corresponds
to the <I>filenumber</I> argument. The number of characters to be read in are specified
by the <I>number</I> argument.</P>
<P>
<H3><A NAME="Heading95"></A>InputBox Function</H3>
<PRE>InputBox(<I>prompt</I>[, <I>title</I>][, <I>default</I>][, <I>xpos</I>][, _ <I>ypos</I>][,<I>helpfile</I>, <I>context</I>])
</PRE>
<P>Displays a dialog box and waits for the user to enter text or click a button;
then returns what the user entered in a String value. The <I>prompt</I> argument
specifies the message to be displayed in the dialog box, <I>title</I> specifies an
optional caption for the dialog box's title bar, and <I>default</I> specifies the
optional default value returned by the InputBox function if no value is entered by
the user. The optional <I>xpos</I> and <I>ypos</I> arguments specify (in twips) the
horizontal and vertical position of the dialog box on the screen. The optional <I>helpfile</I>
and <I>context</I> arguments are used to provide context-sensitive Help for the dialog
box.</P>
<P>
<H3><A NAME="Heading96"></A>InStr Function</H3>
<PRE>InStr([<I>start</I>, ]<I>string1</I>, <I>string2</I>[, <I>compare</I>])
</PRE>
<P>Returns a Variant of subtype Long that specifies the starting position of the
first occurrence of a substring (<I>string2</I>) within another string (<I>string1</I>).
The optional <I>start</I> argument specifies from which character in <I>string2</I>
to start searching; the default is 1 (first character). The optional <I>compare</I>
argument specifies the type of string comparison that will be made (0 for binary
or 1 for textual noncase-sensitive).</P>
<P>
<H3><A NAME="Heading97"></A>Int Function</H3>
<PRE>Int(<I>number</I>)
</PRE>
<P>Returns the integer portion of the number specified by the <I>number</I> argument.
If <I>number</I> is negative, then Int returns the first negative integer less than
or equal to <I>number</I>.</P>
<P>
<H3><A NAME="Heading98"></A>IPmt Function</H3>
<PRE>IPmt(<I>rate</I>, <I>per</I>, <I>nper</I>, <I>pv</I>[, <I>fv</I>[, <I>type</I>]])
</PRE>
<P>Returns a Double value that indicates the interest payment for a fixed-period
annuity based on a number (<I>nper</I>) of periodic fixed payments (<I>per</I>) and
a fixed interest rate (<I>rate</I>). The <I>pv</I> argument specifies the present
value of a series of payments or receipts. The optional <I>fv</I> argument specifies
the future value or cash balance left after the final payment. The optional <I>type</I>
argument specifies when payments are due (0 for end of the payment period, the default;
1 for beginning of the payment period).</P>
<P>
<H3><A NAME="Heading99"></A>IRR Function</H3>
<PRE>IRR(<I>values</I>()[, <I>guess</I>])
</PRE>
<P>Returns a Double value indicating the internal rate of return for an array of
<I>values</I> that represent cash flow. The <I>values</I>() array must contain at
least one negative value (payment) and one positive value (receipt). The optional
<I>guess</I> argument specifies an estimate value to be returned by IRR (default
estimate is .1).</P>
<P>
<H3><A NAME="Heading100"></A>IsArray Function</H3>
<PRE>IsArray(<I>varname</I>)
</PRE>
<P>Returns a Boolean value that indicates whether the variable specified by <I>varname</I>
is an array.</P>
<P>
<H3><A NAME="Heading101"></A>IsDate Function</H3>
<PRE>IsDate(<I>expression</I>)
</PRE>
<P>Returns a Boolean value that indicates whether <I>expression</I> is capable of
being converted to a date value.</P>
<P>
<H3><A NAME="Heading102"></A>IsEmpty Function</H3>
<PRE>IsEmpty(<I>expression</I>)
</PRE>
<P>Returns a Boolean value that indicates whether a numeric or string <I>expression</I>
has been initialized.</P>
<P>
<H3><A NAME="Heading103"></A>IsError Function</H3>
<PRE>IsError(<I>expression</I>)
</PRE>
<P>Returns a Boolean value that indicates whether a given <I>expression</I> is an
error value.</P>
<P>
<H3><A NAME="Heading104"></A>IsMissing Function</H3>
<PRE>IsMissing(<I>argname</I>)
</PRE>
<P>Returns a Boolean value that indicates whether an optional Variant argument (<I>argname</I>)
has been passed to a procedure. IsMissing returns True if no value has been provided
for the specified argument.</P>
<P>
<H3><A NAME="Heading105"></A>IsNull Function</H3>
<PRE>IsNull(<I>expression</I>)
</PRE>
<P>Returns a Boolean value that indicates whether a given <I>expression</I> contains
no data and is Null.</P>
<P>
<H3><A NAME="Heading106"></A>IsNumeric Function</H3>
<PRE>IsNumeric(<I>expression</I>)
</PRE>
<P>Returns a Boolean value that indicates whether a given <I>expression</I> can be
evaluated as a numeric value.</P>
<P>
<H3><A NAME="Heading107"></A>IsObject Function</H3>
<PRE>IsObject(<I>identifier</I>)
</PRE>
<P>Returns a Boolean value that indicates whether a given <I>identifier</I> represents
an object variable.</P>
<P>
<H3><A NAME="Heading108"></A>Kill Statement</H3>
<PRE>Kill <I>pathname</I>
</PRE>
<P>Deletes the file(s) or directory represented by the <I>pathname</I> argument.
Filenames in the <I>pathname</I> argument can contain wildcards, allowing multiple
files to be deleted.</P>
<P>
<H3><A NAME="Heading109"></A>LBound Function</H3>
<PRE>LBound(<I>arrayname</I>[, <I>dimension</I>])
</PRE>
<P>Returns a Long value that represents the smallest subscript for a dimensioned
array (<I>arrayname</I>). For multidimensional arrays, the <I>dimension</I> argument
can be included to specify which dimension should be used.</P>
<P>
<H3><A NAME="Heading110"></A>LCase Function</H3>
<PRE>LCase(<I>string</I>)
</PRE>
<P>Converts a <I>string</I> to all lowercase characters and returns a new String
value.</P>
<P>
<H3><A NAME="Heading111"></A>Left Function</H3>
<PRE>Left(<I>string</I>, <I>length</I>)
</PRE>
<P>Returns a String value <I>length</I> characters long that is taken from the left
side of a given <I>string</I>.</P>
<P>
<H3><A NAME="Heading112"></A>Len Function</H3>
<PRE>Len(<I>string</I> | <I>varname</I>)
</PRE>
<P>Returns a Long value that indicates the number of characters in a <I>string</I>
or, alternatively, the number of bytes required to store a particular variable (<I>varname</I>).</P>
<P>
<H3><A NAME="Heading113"></A>Let Statement</H3>
<PRE>[Let] <I>varname</I> = <I>expression</I>
</PRE>
<P>Assigns the value of an <I>expression</I> to a variable (<I>varname</I>). The
Let keyword is usually omitted and is assumed by Visual Basic.</P>
<P>
<H3><A NAME="Heading114"></A>Line Input # Statement</H3>
<PRE>Line Input #<I>filenumber</I>, <I>varname</I>
</PRE>
<P>Reads a line of data (ending with a carriage return or carriage return-linefeed)
from an open disk file corresponding to the <I>filenumber</I> argument. The data
is placed in the String or Variant variable specified by <I>varname</I>.</P>
<P>
<H3><A NAME="Heading115"></A>Load Statement</H3>
<PRE>Load <I>object</I>
</PRE>
<P>Loads an <I>object</I>, such as a form or control, into memory.</P>
<P>
<H3><A NAME="Heading116"></A>LoadPicture Function</H3>
<PRE>LoadPicture([<I>stringexpression</I>])
</PRE>
<P>Loads the image specified by the <I>stringexpression</I> argument and returns
it. This allows pictures to be loaded in and assigned to a Form's Picture property,
a PictureBox control, or an Image control. If no <I>stringexpression</I> argument
is given, then LoadPicture returns an empty picture.</P>
<P>
<H3><A NAME="Heading117"></A>LoadResData Function</H3>
<PRE>LoadResData(<I>index</I>, <I>format</I>)
</PRE>
<P>Loads data from the resource (.RES) file with the identifier of the <I>index</I>
argument. The <I>format</I> argument specifies the format of the data (1 for cursors,
2 for bitmaps, 3 for icons, 4 for menus, 5 for dialog boxes, 6 for strings, 7 for
font directories, 8 for fonts, 9 for accelerator tables, 10 for user-defined resources,
12 for group cursors, and 14 for group icons). The data returned by the LoadResData
function can be assigned to a variable or object of the appropriate type.</P>
<P>
<H3><A NAME="Heading118"></A>LoadResPicture Function</H3>
<PRE>LoadResPicture(<I>index</I>, <I>format</I>)
</PRE>
<P>Loads a bitmap, icon, or cursor from the resource (.RES) file with the identifier
of the <I>index</I> argument. The <I>format</I> argument specifies the format of
the data (0 for bitmaps, 1 for icons, and 2 for cursors). The data returned by the
LoadResPicture function can be assigned to an object of the appropriate type.</P>
<P>
<H3><A NAME="Heading119"></A>LoadResString Function</H3>
<PRE>LoadResString(<I>index</I>)
</PRE>
<P>Loads a string from the resource (.RES) file with the identifier of the <I>index</I>
argument. The string that is returned can be assigned to a variable of String or
Variant data type.</P>
<P>
<H3><A NAME="Heading120"></A>Loc Function</H3>
<PRE>Loc(<I>filenumber</I>)
</PRE>
<P>Returns a Long value that indicates the current byte position within the open
file that corresponds to the <I>filenumber</I> argument.</P>
<P>
<H3><A NAME="Heading121"></A>Lock Statement</H3>
<PRE>Lock [#]filenumber[, recordrange]
</PRE>
<P>Prevents another process from accessing all or part of the open file that corresponds
to the <I>filenumber</I> argument. The <I>recordrange</I> argument refers to a range
of records (or bytes) that are to be locked and should use the syntax:</P>
<P>
<PRE><I>recnumber</I> | [<I>start</I>] To <I>end</I>
</PRE>
<P>where <I>recnumber</I> is the record number (for Random files) or byte position
(for Binary files) where locking should begin. Alternatively, the starting and ending
record numbers or bytes to be locked can be specified using the <I>start</I> and
<I>end</I> arguments.</P>
<P>
<H3><A NAME="Heading122"></A>LOF Function</H3>
<PRE>LOF(<I>filenumber</I>)
</PRE>
<P>Returns a Boolean value that represents the byte size of the open file that corresponds
to the <I>filenumber</I> argument.</P>
<P>
<H3><A NAME="Heading123"></A>Log Function</H3>
<PRE>Log(<I>number</I>)
</PRE>
<P>Returns a Double value that represents the natural logarithm of a specified <I>number</I>.</P>
<P>
<H3><A NAME="Heading124"></A>LSet Statement</H3>
<PRE>LSet <I>stringvar</I> = <I>string</I>
</PRE>
<P>or</P>
<P>
<PRE>LSet <I>varname1</I> = <I>varname2</I>
</PRE>
<P>In the first syntax, LSet assigns a <I>string</I> value to a String variable (<I>stringvar</I>),
left-aligning the string to the String variable. In the second syntax, LSet copies
a variable (<I>varname2</I>) from one user-defined type to a variable (<I>varname1</I>)
in another user-defined type.</P>
<P>
<H3><A NAME="Heading125"></A>LTrim Function</H3>
<PRE>LTrim(<I>string</I>)
</PRE>
<P>Returns a Variant of subtype String that contains a copy of a given <I>string</I>
with any leading spaces removed.</P>
<P>
<H3><A NAME="Heading126"></A>Mid Function</H3>
<PRE>Mid(<I>string</I>, <I>start</I>[, <I>length</I>])
</PRE>
<P>Returns a String value of one or more characters, taken from the String variable
specified by the <I>string</I> argument. The <I>start</I> argument specifies the
character position within <I>string</I> where the new String is to be obtained, and
the optional <I>length</I> argument specifies how many characters are to be taken
from <I>string</I>. If no <I>length</I> is specified, then all the characters in
<I>string</I> (starting at the position given in the <I>start</I> argument) are used.</P>
<P>
<H3><A NAME="Heading127"></A>Mid Statement</H3>
<PRE>Mid(<I>stringvar</I>, <I>start</I>[, <I>length</I>]) = <I>string</I>
</PRE>
<P>Replaces one or more characters in a String variable (<I>stringvar</I>) with another
<I>string</I>. The <I>start</I> argument specifies the character position within
<I>stringvar</I> to place the new <I>string</I>, and the optional <I>length</I> argument
specifies how many characters of <I>string</I> should be used. If <I>length</I> is
omitted, then the entire <I>string</I> is used.</P>
<P>
<H3><A NAME="Heading128"></A>Minute Function</H3>
<PRE>Minute(<I>time</I>)
</PRE>
<P>Returns a Variant of subtype Integer that represents the minute (0-59) of the
time value specified by the <I>time</I> argument.</P>
<P>
<H3><A NAME="Heading129"></A>MIRR Function</H3>
<PRE>MIRR(<I>values</I>(), <I>financerate</I>, <I>reinvestrate</I>)
</PRE>
<P>Returns a Double value that represents the modified internal rate of return for
an array of <I>values</I> that represent cash flow. The <I>values</I>() array must
contain at least one negative value (payment) and one positive value (receipt). The
<I>financerate</I> argument specifies the interest rate paid as a cost of financing,
and the <I>reinvestrate</I> argument specifies the interest rate received on gains
from cash reinvestment.</P>
<P>
<H3><A NAME="Heading130"></A>MkDir Statement</H3>
<PRE>MkDir <I>path</I>
</PRE>
<P>Creates the new directory or folder specified by the <I>path</I> argument.</P>
<P>
<H3><A NAME="Heading131"></A>Month Function</H3>
<PRE>Month(<I>date</I>)
</PRE>
<P>Returns a Variant of subtype Integer that represents the month (1[nd]12) for the
date value specified by the <I>date</I> argument.</P>
<P>
<H3><A NAME="Heading132"></A>MsgBox Function</H3>
<PRE>MsgBox(<I>prompt</I>[, <I>buttons</I>][, <I>title</I>][, <I>helpfile</I>, <I>context</I>]
</PRE>
<P>Displays a message in a dialog box with one or more buttons and waits for the
user to respond. MsgBox then returns an Integer value that represents the button
that was clicked. The <I>prompt</I> argument specifies the message to be displayed
in the dialog box, and <I>title</I> specifies an optional caption for the dialog
box's title bar. The optional <I>buttons</I> argument specifies which buttons will
be displayed. The optional <I>helpfile</I> and <I>context</I> arguments are used
to provide context-sensitive Help for the dialog box.</P>
<P>
<H3><A NAME="Heading133"></A>Name Statement</H3>
<PRE>Name <I>oldpathname</I> As <I>newpathname</I>
</PRE>
<P>Renames the file, directory, or folder specified by the <I>oldpathname</I> argument
to the name specified by <I>newpathname</I>.</P>
<P>
<H3><A NAME="Heading134"></A>Now Function</H3>
<PRE>Now
</PRE>
<P>Returns a Variant of subtype Date that contains the current system date and time.</P>
<P>
<H3><A NAME="Heading135"></A>NPer Function</H3>
<PRE>NPer(<I>rate</I>, <I>pmt</I>, <I>pv</I>[, <I>fv</I>[, <I>type</I>]])
</PRE>
<P>Returns a Double value that indicates the number of periods for an annuity based
on periodic fixed payments (<I>pmt</I>) and a fixed interest rate (<I>rate</I>).
The <I>pv</I> argument specifies the present value of a series of payments or receipts.
The optional <I>fv</I> argument specifies the future value or cash balance left after
the final payment. The optional <I>type</I> argument specifies when payments are
due (0 for end of the payment period, the default; 1 for beginning of the payment
period).</P>
<P>
<H3><A NAME="Heading136"></A>NPV Function</H3>
<PRE>NPV(<I>rate</I>, <I>values</I>())
</PRE>
<P>Returns a Double value that represents the present value of an investment based
on a discount rate (<I>rate</I>) and an array of <I>values</I> that represent cash
flow. The <I>values</I>() array must contain at least one negative value (payment)
and one positive value (receipt).</P>
<P>
<H3><A NAME="Heading137"></A>Oct Function</H3>
<PRE>Oct(<I>number</I>)
</PRE>
<P>Returns a String value that represents the octal value of the argument <I>number</I>.</P>
<P>
<H3><A NAME="Heading138"></A>On Error Statement</H3>
<PRE>On Error GoTo <I>line</I>
On Error Resume Next
On Error GoTo 0
</PRE>
<P>Enables or disables the use of an error-handling routine. The On Error statement
can specify a line label or line number (specified by the <I>line</I> argument) to
branch to when an error occurs, allowing error-handling to be enabled. Alternatively,
using On Error Resume Next causes program control to be transferred to the line of
code immediately following the line of code that causes an error. Finally, On Error
GoTo 0 disables all error-handling.</P>
<P>
<H3><A NAME="Heading139"></A>On...GoSub Statement</H3>
<PRE>On <I>expression</I> GoSub <I>destinationlist</I>
</PRE>
<P>Evaluates a given <I>expression</I> and, depending on its value, transfers program
control to a certain subroutine. The possible subroutines are contained in the <I>destinationlist</I>
argument, which contains one or more comma-delimited line labels or line numbers.
If <I>expression</I> evaluates to 1, then the first subroutine in the <I>destinationlist</I>
is used; if it evaluates to 2, then the second subroutine in the <I>destinationlist</I>
is used; and so on. Control is transferred to the line of code immediately following
the On...GoSub line when a Return statement is encountered.</P>
<P>
<H3><A NAME="Heading140"></A>On...GoTo Statement</H3>
<PRE>On <I>expression</I> GoTo <I>destinationlist</I>
</PRE>
<P>Evaluates a given <I>expression</I> and, depending on its value, transfers program
control to a certain line label or line number. The possible transfer points are
contained in the <I>destinationlist</I> argument, which contains one or more comma-delimited
line labels or line numbers. If <I>expression</I> evaluates to 1, then the first
line label in the <I>destinationlist</I> is used; if it evaluates to 2, then the
second line label in the <I>destinationlist</I> is used; and so on.</P>
<P>
<H3><A NAME="Heading141"></A>Open Statement</H3>
<PRE>Open <I>pathname</I> For <I>mode</I> [Access <I>access</I>] [<I>lock</I>] As _  [#]<I>filenumber</I> [Len=<I>reclength</I>]
</PRE>
<P>Opens a file for input/output and assigns it to the given <I>filenumber</I>. The
<I>pathname</I> argument specifies the name of the file to open, and <I>mode</I>
indicates the file mode (Append, Binary, Input, Output, or Random). The optional
Access clause can be used to specify permissions for the file (Read, Write, or Read
Write). The optional <I>lock</I> argument can specify the operations that can be
performed on the file by other processes (Shared, Lock Read, Lock Write, or Lock
Read Write). The <I>reclength</I> argument can be used to specify the record size
for random files or the buffer size for sequential files.</P>
<P>
<H3><A NAME="Heading142"></A>Option Base Statement</H3>
<PRE>Option Base [0 | 1]
</PRE>
<P>Declares the default lower bound of array subscripts. Option Base can only be
used at module level.</P>
<P>
<H3><A NAME="Heading143"></A>Option Compare Statement</H3>
<PRE>Option Compare [Binary | Text | Database]
</PRE>
<P>Declares the default method used for string comparisons. Option Compare can only
be used at module level.</P>
<P>
<H3><A NAME="Heading144"></A>Option Explicit Statement</H3>
<PRE>Option Explicit
</PRE>
<P>Forces explicit declaration of all variables in a module. If Option Explicit is
not used, undeclared variables are automatically typed as Variants. Option Explicit
can only be used at module level.</P>
<P>
<H3><A NAME="Heading145"></A>Option Private Statement</H3>
<PRE>Option Private Module
</PRE>
<P>Prevents a module's contents (that is, variables and objects) from being used
outside its project. Option Private is only necessary when working with host applications
that allow variables and objects to be referenced across multiple projects.</P>
<P>
<H3><A NAME="Heading146"></A>Partition Function</H3>
<PRE>Partition(<I>number</I>, <I>start</I>, <I>stop</I>, <I>interval</I>)
</PRE>
<P>Returns a Variant of subtype String that describes a range of numbers in which
the <I>number</I> argument falls. The <I>start</I> and <I>stop</I> arguments specify
the overall range of numbers, which is split up into smaller ranges as specified
by the <I>interval</I> argument. The Partition function returns a string representation
of the smaller range in which the number can be found, such as &quot; 1: 10&quot;
for a <I>number</I> that falls in the range of 1 to 10.</P>
<P>
<H3><A NAME="Heading147"></A>Pmt Function</H3>
<PRE>Pmt(<I>rate</I>, <I>nper</I>, <I>pv</I>[, <I>fv</I>[, <I>type</I>]])
</PRE>
<P>Returns a Double value that indicates the payment for an annuity based on a number
(<I>nper</I>) of periodic fixed payments and a fixed interest rate (<I>rate</I>).
The <I>pv</I> argument specifies the present value of a series of payments or receipts.
The optional <I>fv</I> argument specifies the future value or cash balance left after
the final payment. The optional <I>type</I> argument specifies when payments are
due (0 for end of the payment period, the default; 1 for beginning of the payment
period).</P>
<P>
<H3><A NAME="Heading148"></A>PPmt Function</H3>
<PRE>PPmt(<I>rate</I>, <I>per</I>, <I>nper</I>, <I>pv</I>[, <I>fv</I>[, <I>type</I>]])
</PRE>
<P>Returns a Double value that indicates the principle payment for a given period
(<I>per</I>) of an annuity based on a number (<I>nper</I>) of periodic fixed payments
and a fixed interest rate (<I>rate</I>). The <I>pv</I> argument specifies the present
value of a series of payments or receipts. The optional <I>fv</I> argument specifies
the future value or cash balance left after the final payment. The optional <I>type</I>
argument specifies when payments are due (0 for end of the payment period, the default;
1 for beginning of the payment period).</P>
<P>
<H3><A NAME="Heading149"></A>Print # Statement</H3>
<PRE>Print #<I>filenumber</I>, [<I>outputlist</I>]
</PRE>
<P>Writes data to the open sequential file that corresponds to <I>filenumber</I>.
The optional <I>outputlist</I> argument can consist of one or more comma-delimited
expressions to be written and should use the following syntax:</P>
<P>
<PRE>[{Spc(<I>n</I>) | Tab[(<I>n</I>)]}] [<I>expression</I>][<I>charpos</I>]
</PRE>
<P>where Spc is optionally used to write <I>n</I> spaces, and Tab is optionally used
to advance to the <I>n</I>th column number. The <I>expression</I> argument can specify
the data to be written, and the <I>charpos</I> argument can specify the insertion
point for the next character. If <I>charpos</I> is omitted, the next character will
be written on the next line. If it is a semicolon, the next character will be written
immediately following the last character.</P>
<P>
<H3><A NAME="Heading150"></A>Private Statement</H3>
<PRE>Private [WithEvents] <I>varname</I>[([<I>subscripts</I>])] [As [New] <I>type</I>][,[WithEvents] 
<I>varname</I>[([<I>subscripts</I>])]      [As [New] <I>type</I>]]...
</PRE>
<P>Declares one or more private variables. The <I>varname</I> argument specifies
the name of the variable being declared, and <I>subscripts</I> are the dimensions
for an array variable. The optional As [New] <I>type</I> clause can be used to specify
the variable's data type, with the New keyword enabling implicit creation of an object.
The optional WithEvents keyword specifies that the variable being declared is an
object variable used to respond to events triggered by an ActiveX object. The Private
statement can only be used at module level, and variables declared with it cannot
be used outside their own module.</P>
<P>
<H3><A NAME="Heading151"></A>Property Get Statement</H3>
<PRE>[Public | Private | Friend] [Static] Property Get name [(<I>arglist</I>)] [As <I>type</I>]
    [<I>statements</I>]
    [<I>name</I> = <I>expression</I>]
    [Exit Property]
    [<I>statements</I>]
    [<I>name</I> = <I>expression</I>]
End Property
</PRE>
<P>Declares the various parts of a Property Get procedure, which is used to obtain
the value of a property. The optional Public, Private, and Friend keywords can be
used to define the procedure's scope, and the optional Static keyword indicates that
the procedure's local variables are preserved between calls to the procedure. The
<I>name</I> argument specifies the name of the property to be retrieved and can be
assigned a value (<I>name =</I> <I>expression</I>) that will be returned as the property's
value. The data type of the property can be specified using the As <I>type</I> clause.
The optional<B> </B>Exit Property can be used to exit the Property Get<B> </B>procedure
immediately.</P>
<P>The optional list of arguments (<I>arglist</I>) defines the arguments that will
be passed to the procedure. The arguments should use the following syntax:</P>
<P>
<PRE>[Optional] [ByVal | ByRef] [ParamArray] <I>varname</I>[()]     [As <I>type</I>] [= <I>default value</I>]
</PRE>
<P>where the Optional keyword can be used to specify that the argument is not required
(<I>default value</I> assigns the argument's default value), ByVal and ByRef determine
whether the argument should be passed by value or by reference (the default), and
the ParamArray keyword specifies that the argument is an Optional array of Variant
elements. ParamArray can only be used with the last argument in the argument list.</P>
<P>
<H3><A NAME="Heading152"></A>Property Let Statement</H3>
<PRE>[Public | Private | Friend] [Static] Property Let name ([arglist,] value)
    [statements]
    [Exit Property]
    [statements]
End Property
</PRE>
<P>Declares the various parts of a Property Let procedure, which is used to assign
a value to a property. The optional Public, Private, and Friend keywords can be used
to define the procedure's scope, and the optional Static keyword indicates that the
procedure's local variables are preserved between calls to the procedure. The <I>name</I>
argument specifies the name of the property being referenced, and <I>value</I> indicates
the value to be assigned to the property. The optional<B> </B>Exit Property can be
used to exit the Property Let<B> </B>procedure immediately.</P>
<P>The optional list of arguments (<I>arglist</I>) defines the arguments that will
be passed to the procedure. The arguments should use the following syntax:</P>
<P>
<PRE>[Optional] [ByVal | ByRef] [ParamArray] <I>varname</I>[()]     [As <I>type</I>] [= <I>default value</I>]
</PRE>
<P>where the Optional keyword can be used to specify that the argument is not required
(<I>default value</I> assigns the argument's default value), ByVal and ByRef determine
whether the argument should be passed by value or by reference (the default), and
the ParamArray keyword specifies that the argument is an Optional array of Variant
elements. ParamArray can only be used with the last argument in the argument list.</P>
<P>
<H3><A NAME="Heading153"></A>Property Set Statement</H3>
<PRE>[Public | Private | Friend] [Static] Property Set name ([<I>arglist</I>,] <I>reference</I>)
    [<I>statements</I>]
    [Exit Property]
    [<I>statements</I>]
End Property
</PRE>
<P>Declares the various parts of a Property Set procedure, which is used to set a
reference to an object. The optional Public, Private, and Friend keywords can be
used to define the procedure's scope, and the optional Static keyword indicates that
the procedure's local variables are preserved between calls to the procedure. The
<I>name</I> argument specifies the name of the property being used, and <I>reference</I>
indicates the object reference to be set to the property. The optional<B> </B>Exit
Property can be used to exit the Property Set<B> </B>procedure immediately.</P>
<P>The optional list of arguments (<I>arglist</I>) defines the arguments that will
be passed to the procedure. The arguments should use the following syntax:</P>
<P>
<PRE>[Optional] [ByVal | ByRef] [ParamArray] <I>varname</I>[()] [As <I>type</I>] [= <I>default value</I>]
</PRE>
<P>where the Optional keyword can be used to specify that the argument is not required
(<I>default value</I> assigns the argument's default value), ByVal and ByRef determine
whether the argument should be passed by value or by reference (the default), and
the ParamArray keyword specifies that the argument is an Optional array of Variant
elements. ParamArray can only be used with the last argument in the argument list.</P>
<P>
<H3><A NAME="Heading154"></A>Public Statement</H3>
<PRE>Public [WithEvents] <I>varname</I>[([<I>subscripts</I>])] [As [New] <I>type</I>][,[WithEvents] 
<I>varname</I>[([<I>subscripts</I>])] [As [New] <I>type</I>]]...
</PRE>
<P>Declares one or more public variables. The <I>varname</I> argument specifies the
name of the variable being declared, and <I>subscripts</I> are the dimensions for
an array variable. The optional As [New] <I>type</I> clause can be used to specify
the variable's data type, with the New keyword enabling implicit creation of an object.
The optional WithEvents keyword specifies that the variable being declared is an
object variable used to respond to events triggered by an ActiveX object. The Public
statement can only be used at module level, and variables declared with it can be
used outside their own module.</P>
<P>
<H3><A NAME="Heading155"></A>Put Statement</H3>
<PRE>Put [#]<I>filenumber</I>, [<I>recnumber</I>], <I>varname</I>
</PRE>
<P>Writes data to the open disk file corresponding to the <I>filenumber</I> argument
from a variable (<I>varname</I>). Put works with files open as Random or Binary,
and a record number (<I>recnumber</I>) can be specified when writing data to a Random
file. When using Binary files, <I>recnumber</I> can alternatively be used to specify
the byte position at which the data is to be written.</P>
<P>
<H3><A NAME="Heading156"></A>PV Function</H3>
<PRE>PV(<I>rate</I>, <I>nper</I>, <I>pmt</I>[, <I>fv</I>[, <I>type</I>]])
</PRE>
<P>Returns a Double value that indicates the present value of an annuity based on
a number (<I>nper</I>) of periodic fixed payments (<I>pmt</I>) and a fixed interest
rate (<I>rate</I>). The optional <I>fv</I> argument specifies the future value or
cash balance left after the final payment. The optional <I>type</I> argument specifies
when payments are due (0 for end of the payment period, the default; 1 for beginning
of the payment period).</P>
<P>
<H3><A NAME="Heading157"></A>QBColor Function</H3>
<PRE>QBColor(<I>color</I>)
</PRE>
<P>Returns a Long value that represents the RGB color code that corresponds to a
given color <I>number</I> (0[nd]15) of the color palette used in Microsoft QuickBasic.</P>
<P>
<H3><A NAME="Heading158"></A>RaiseEvent Function</H3>
<PRE>RaiseEvent <I>eventname</I> [(<I>argumentlist</I>)]
</PRE>
<P>Triggers an event. The optional <I>argumentlist</I> specifies one or more comma-delimited
arguments to be passed to the event procedure. The event procedure must be declared
in the same module as the RaiseEvent function or an error will occur.</P>
<P>
<H3><A NAME="Heading159"></A>Randomize Statement</H3>
<PRE>Randomize [<I>number</I>]
</PRE>
<P>Initializes the random number generator, using the optional <I>number</I> argument
as a seed value.</P>
<P>
<H3><A NAME="Heading160"></A>Rate Function</H3>
<PRE>Rate(<I>nper</I>, <I>pmt</I>, <I>pv</I>[, <I>fv</I>[, <I>type</I>[, <I>guess</I>]]])
</PRE>
<P>Returns a Double value that indicates the fixed interest rate per period for an
annuity based on a number (<I>nper</I>) of periodic fixed payments (<I>pmt</I>).
The optional <I>fv</I> argument specifies the future value or cash balance left after
the final payment. The optional <I>type</I> argument specifies when payments are
due (0 for end of the payment period, the default; 1 for beginning of the payment
period). The optional <I>guess</I> argument specifies an estimate value to be returned
by Rate (default estimate is .1).</P>
<P>
<H3><A NAME="Heading161"></A>ReDim Statement</H3>
<PRE>ReDim [Preserve] <I>varname</I>(<I>subscripts</I>) [As <I>type</I>] [, <I>varname</I>(<I>subscripts</I>) [As <I>type</I>]]...
</PRE>
<P>Redimensions one or more dynamic array variables and reallocates their storage
space. The optional Preserve keyword can be used to keep the contents of the array
intact when it is being redimensioned. The <I>varname</I> argument is the name of
the variable, and the optional As <I>type</I> clause indicates its data type. The
<I>subscripts </I>are the dimensions of the array variable.</P>
<P>
<H3><A NAME="Heading162"></A>Rem Statement</H3>
<PRE>Rem <I>comments</I>
</PRE>
<P>Allows <I>comments</I> to be added to a program. Everything on the line after
the Rem statement is ignored by Visual Basic. An apostrophe (`) can also be used
in lieu of the Rem statement.</P>
<P>
<H3><A NAME="Heading163"></A>Reset Statement</H3>
<PRE>Reset
</PRE>
<P>Closes all files opened with the Open statement and writes any file buffer contents
to disk.</P>
<P>
<H3><A NAME="Heading164"></A>Resume Statement</H3>
<PRE>Resume [0]
Resume Next
Resume <I>line</I>
</PRE>
<P>Resumes execution of a program when an error-handling routine is finished. Resume
by itself causes execution to resume with the statement that caused the error or,
if the error occurred in a called procedure, the statement that last called out of
the error-handling procedure<B>. </B>Resume Next causes execution to resume with
the statement immediately following the one that caused the error. Resume <I>line</I>
transfers control to the line label or line number specified by the <I>line</I> argument.</P>
<P>
<H3><A NAME="Heading165"></A>RGB Function</H3>
<PRE>RGB(<I>red</I>, <I>green</I>, <I>blue</I>)
</PRE>
<P>Returns a Long value that represents an RGB color value as specified by the <I>red</I>,
<I>green</I>, and <I>blue</I> color components passed to the RGB function. All color
components should be Integers in the 0[nd]255 range.</P>
<P>
<H3><A NAME="Heading166"></A>Right Function</H3>
<PRE>Right(<I>string</I>, <I>length</I>)
</PRE>
<P>Returns a String value <I>length</I> characters long that is taken from the right
side of a given <I>string</I>.</P>
<P>
<H3><A NAME="Heading167"></A>RmDir Statement</H3>
<PRE>RmDir <I>path</I>
</PRE>
<P>Removes the directory or folder specified by the <I>path</I> argument.</P>
<P>
<H3><A NAME="Heading168"></A>Rnd Function</H3>
<PRE>Rnd[(<I>number</I>)]
</PRE>
<P>Returns a Single value that contains a randomly generated number less than 1 but
greater than or equal to zero. The optional <I>number</I> argument can be used to
determine how Rnd generates the random number.</P>
<P>
<H3><A NAME="Heading169"></A>RSet Statement</H3>
<PRE>RSet <I>stringvar</I> = <I>string</I>
</PRE>
<P>Assigns a <I>string</I> value to a String variable (<I>stringvar</I>), right-aligning
the string to the String variable.</P>
<P>
<H3><A NAME="Heading170"></A>RTrim Function</H3>
<PRE>RTrim(<I>string</I>)
</PRE>
<P>Returns a Variant of subtype String that contains a copy of a given <I>string</I>
with any trailing spaces removed.</P>
<P>
<H3><A NAME="Heading171"></A>SavePicture Statement</H3>
<PRE>SavePicture <I>picture</I>, <I>stringexpression</I>
</PRE>
<P>Saves an graphic image from an object's Picture or Image property to a file. The
<I>picture</I> argument specifies the control from which the graphics file is to
be created (Picture or Image), and <I>stringexpression</I> specifies the path and
filename to which the image is saved.</P>
<P>
<H3><A NAME="Heading172"></A>SaveSetting Statement</H3>
<PRE>SaveSetting <I>appname</I>, <I>section</I>, <I>key</I>, <I>setting</I>
</PRE>
<P>Saves or creates an application (<I>appname</I>) entry, section (<I>section</I>),
key setting (<I>key</I>), and value (<I>setting</I>) in the System Registry.</P>
<P>
<H3><A NAME="Heading173"></A>Second Function</H3>
<PRE>Second(<I>time</I>)
</PRE>
<P>Returns a Variant of subtype Integer that represents the second (0[nd]59) of the
time value specified by the <I>time</I> argument.</P>
<P>
<H3><A NAME="Heading174"></A>Seek Function</H3>
<PRE>Seek(<I>filenumber</I>)
</PRE>
<P>Returns a Long value that specifies the current record or byte position for the
open file associated with <I>filenumber</I>. When dealing with Random files, Seek
returns the number of the next record to be read or written. For all other file types,
Seek returns a byte position.</P>
<P>
<H3><A NAME="Heading175"></A>Seek Statement</H3>
<PRE>Seek [#]<I>filenumber</I>, <I>position</I>
</PRE>
<P>Sets the record or byte <I>position</I> of the open file associated with <I>filenumber</I>.</P>
<P>
<H3><A NAME="Heading176"></A>Select Case Statement</H3>
<PRE>Select Case <I>testexpression</I>
    [Case <I>expressionlist-n</I>
        [<I>statements-n</I>]] ...
    [Case Else
        [<I>elsestatements</I>]]
End Select
</PRE>
<P>Evaluates an expression (<I>testexpression</I>) and, depending on the result,
executes one or more statements (<I>statements-n</I>) that correspond to the expression's
value (<I>expressionlist-n</I>). In other words, the value of <I>testexpression</I>
is compared with one or more other values (<I>expressionlist-n</I>), and whichever
matches gets its statements (<I>statements-n</I>) executed. If there are no matches,
an optional Case Else set of statements (<I>elsestatements</I>) is executed.</P>
<P>
<H3><A NAME="Heading177"></A>SendKeys Statement</H3>
<P>Generates one or more keystrokes as if they came from the keyboard. The <I>string</I>
argument determines which keystrokes to send, and the optional Wait argument (Boolean)
specifies whether keystrokes must be processed before control is returned to the
procedure. False, the default value, means that control is returned to the procedure
immediately after the keystrokes are sent.</P>
<P>
<H3><A NAME="Heading178"></A>Set Statement</H3>
<PRE>Set <I>objectvar</I> = {[New] <I>objectexpression</I> | Nothing}
</PRE>
<P>Assigns an object reference (<I>objectexpression</I>) to a variable or property
(<I>objectvar</I>). The optional New keyword can be used to indicate that the object
should be created implicitly. To disassociate <I>objectvar</I> with a specific object
and free up the resources it is using, assign it the Nothing keyword.</P>
<P>
<H3><A NAME="Heading179"></A>SetAttr Statement</H3>
<PRE>SetAttr <I>pathname</I>, <I>attributes</I>
</PRE>
<P>Sets attributes for the file or directory specified by the <I>pathname</I> argument.
The <I>attributes</I> argument can use several VB constants (vbNormal, vbReadOnly,
vbHidden, vbSystem, vbDirectory, and vbArchive) that can be combined bitwise to determine
which attributes are set.</P>
<P>
<H3><A NAME="Heading180"></A>Sgn Function</H3>
<PRE>Sgn(<I>number</I>)
</PRE>
<P>Returns a Variant of subtype Integer that represents the sign of a given <I>number</I>.</P>
<P>
<H3><A NAME="Heading181"></A>Shell Function</H3>
<PRE>Shell(<I>pathname</I>[, <I>windowstyle</I>])
</PRE>
<P>Runs the executable program specified by the <I>pathname</I> argument and returns
a Variant of subtype Double that represents the program's task ID. If Shell is unsuccessful,
it returns zero. The optional <I>windowstyle</I> argument determines the style of
the window in which the shelled program runs.</P>
<P>
<H3><A NAME="Heading182"></A>Sin Function</H3>
<PRE>Sin(<I>number</I>)
</PRE>
<P>Returns a Double value that represents the sine of a given angle (as specified
by the <I>number</I> argument).</P>
<P>
<H3><A NAME="Heading183"></A>SLN Function</H3>
<PRE>SLN(<I>cost</I>, <I>salvage</I>, <I>life</I>)
</PRE>
<P>Returns a Double value that represents the straight-line depreciation of an asset
when given its initial <I>cost</I>, <I>salvage</I> value at the end of its useful
life, and <I>life</I> span.</P>
<P>
<H3><A NAME="Heading184"></A>Space Function</H3>
<PRE>Space(<I>number</I>)
</PRE>
<P>Returns a Variant of subtype String that contains a <I>number</I> of spaces.</P>
<P>
<H3><A NAME="Heading185"></A>Spc Function</H3>
<PRE>Spc(<I>n</I>)
</PRE>
<P>Inserts a specified number of spaces (<I>n</I>) when writing or displaying text
using the Print # statement or the Print method.</P>
<P>
<H3><A NAME="Heading186"></A>Sqr Function</H3>
<PRE>Sqr(<I>number</I>)
</PRE>
<P>Returns a Double value that represents the square root of a given <I>number</I>.</P>
<P>
<H3><A NAME="Heading187"></A>Static Statement</H3>
<PRE>Static <I>varname</I>[([<I>subscripts</I>])] [As [New] <I>type</I>] [, <I>varname</I>[([<I>subscripts</I>])] 
[As [New] <I>type</I>] ...
</PRE>
<P>Declares one or more static variables, which retain their values as long as the
program is running. The <I>varname</I> argument is the name of the variable, and
the optional As [New] <I>type</I> indicates its data type. If the New keyword is
used, then an implicit creation of the object is made. The optional <I>subscripts
</I>are the dimensions of an array variable.</P>
<P>
<H3><A NAME="Heading188"></A>Stop Statement</H3>
<PRE>Stop
</PRE>
<P>Suspends program execution.</P>
<P>
<H3><A NAME="Heading189"></A>Str Function</H3>
<PRE>Str(<I>number</I>)
</PRE>
<P>Returns a Variant of subtype String that is a representation of a given <I>number</I>.</P>
<P>
<H3><A NAME="Heading190"></A>StrComp Function</H3>
<PRE>StrComp(<I>string1</I>, <I>string2</I>[, <I>compare</I>])
</PRE>
<P>Returns a Variant of subtype Integer that indicates the result of a comparison
between two strings (<I>string1</I> and <I>string2</I>). The optional <I>compare</I>
argument specifies how strings are to be compared, with 0 for a binary comparison
and 1 for a noncase- sensitive textual comparison.</P>
<P>
<H3><A NAME="Heading191"></A>StrConv Function</H3>
<PRE>StrConv(<I>string</I>, <I>conversion</I>)
</PRE>
<P>Returns a Variant of subtype String that has been converted from an original <I>string</I>
as specified by the <I>conversion</I> argument. The <I>conversion</I> argument can
use several VB constants to specify the type of conversion, such as vbUpperCase,
vbLowerCase, and vbProperCase.</P>
<P>
<H3><A NAME="Heading192"></A>String Function</H3>
<PRE>String(<I>number</I>, <I>character</I>)
</PRE>
<P>Returns a Variant of subtype String that is of the length specified by <I>number</I>
and is filled with a given <I>character</I>.</P>
<P>
<H3><A NAME="Heading193"></A>Sub Statement</H3>
<PRE>[Public | Private | Friend] [Static] Sub <I>name </I>[(<I>arglist</I>)]
    [<I>statements</I>]
    [Exit Sub]
    [<I>statements</I>]
End Sub
</PRE>
<P>Declares the various parts of a Sub procedure. The optional Public, Private, and
Friend keywords can be used to define the Sub's scope, and the optional Static keyword
indicates that the procedure's local variables are preserved between calls to the
Sub. The <I>name</I> argument specifies the name of the Sub procedure. The optional<B>
</B>Exit Sub can be used to exit the Sub procedure immediately.</P>
<P>The optional list of arguments (<I>arglist</I>) defines the arguments that will
be passed to the procedure. The arguments should use the following syntax:</P>
<P>
<PRE>[Optional] [ByVal | ByRef] [ParamArray] <I>varname</I>[()] [As _ <I>type</I>] [= <I>default value</I>]
</PRE>
<P>where the Optional keyword can be used to specify that the argument is not required
(<I>default value</I> assigns the argument's default value), ByVal and ByRef determine
whether the argument should be passed by value or by reference (the default), and
the ParamArray keyword specifies that the argument is an Optional array of Variant
elements. ParamArray can only be used with the last argument in the argument list.</P>
<P>
<H3><A NAME="Heading194"></A>Switch Function</H3>
<PRE>Switch(<I>expr-1</I>, <I>value-1</I>[, <I>expr-2</I>, <I>value-2</I> ... [, <I>expr-n</I>, _ <I>value-n</I>]])
</PRE>
<P>Evaluates a list of expressions (<I>expr-1</I>, <I>expr-2</I>...<I>expr-n</I>)
and returns a Variant value that corresponds to the first expression that evaluates
as True. If <I>expr-1</I> is True, then Switch returns the value indicated by <I>value-1</I>;
if <I>expr-2</I> is True, then Switch returns the value indicated by <I>value-2</I>;
and so on.</P>
<P>
<H3><A NAME="Heading195"></A>SYD Function</H3>
<PRE>SYD(<I>cost</I>, <I>salvage</I>, <I>life</I>, <I>period</I>)
</PRE>
<P>Returns a Double value that represents the sum-of-years' digits depreciation of
an asset when given its initial <I>cost</I>, <I>salvage</I> value at the end of its
useful life, <I>life</I> span, and <I>period</I> for which depreciation is calculated.</P>
<P>
<H3><A NAME="Heading196"></A>Tab Function</H3>
<PRE>Tab(<I>n</I>)
</PRE>
<P>Positions output to a given column (<I>n</I>) when writing or displaying text
using the Print # statement or the Print method.</P>
<P>
<H3><A NAME="Heading197"></A>Tan Function</H3>
<PRE>Tan(<I>number</I>)
</PRE>
<P>Returns a Double value that represents the tangent of a given angle (specified
by the <I>number </I>argument).</P>
<P>
<H3><A NAME="Heading198"></A>Time Function</H3>
<PRE>Time
</PRE>
<P>Returns a Variant of subtype Date that contains the current system time.</P>
<P>
<H3><A NAME="Heading199"></A>Time Statement</H3>
<PRE>Time = <I>time</I>
</PRE>
<P>Sets the system time to the time specified by the <I>time</I> argument.</P>
<P>
<H3><A NAME="Heading200"></A>Timer Function</H3>
<PRE>Timer
</PRE>
<P>Returns a Single value that represents the number of seconds that have elapsed
since midnight.</P>
<P>
<H3><A NAME="Heading201"></A>TimeSerial Function</H3>
<PRE>TimeSerial(<I>hour</I>, <I>minute</I>, <I>second</I>)
</PRE>
<P>Returns a Variant of subtype Date that represents a time as specified by the <I>hour</I>,
<I>minute</I>, and <I>second</I> arguments.</P>
<P>
<H3><A NAME="Heading202"></A>TimeValue Function</H3>
<PRE>TimeValue(<I>time</I>)
</PRE>
<P>Returns a Variant of subtype Date that is derived from the time value specified
by the <I>time</I> argument.</P>
<P>
<H3><A NAME="Heading203"></A>Trim Function</H3>
<PRE>Trim(<I>string</I>)
</PRE>
<P>Returns a Variant of subtype String that contains a copy of a given <I>string</I>
with any leading and trailing spaces removed.</P>
<P>
<H3><A NAME="Heading204"></A>Type Statement</H3>
<PRE>[Private | Public] Type <I>varname</I>
    <I>elementname</I> [([<I>subscripts</I>])] As <I>type</I>
    [<I>elementname</I> [([<I>subscripts</I>])] As <I>type</I>]
    ...
End Type
</PRE>
<P>Defines a user-defined type (UDT) structure that contains one or more elements
(<I>elementname</I>). The optional Public and Private keywords specify the UDT's
scope, and <I>varname</I> specifies the UDT's name. Elements can be arrays (by specifying
<I>subscripts</I>), and their data type must be defined using the As <I>type</I>
clause. The Type statement can only be used at module level.</P>
<P>
<H3><A NAME="Heading205"></A>TypeName Function</H3>
<PRE>TypeName(<I>varname</I>)
</PRE>
<P>Returns a String value that indicates the data type of a given variable (<I>varname</I>).
Possible return values are: Byte, Integer, Long, Single, Double, Currency, Decimal,
Date, String, Boolean, Error, Empty, Null, Object, Unknown, Nothing, or an object
type.</P>
<P>
<H3><A NAME="Heading206"></A>UBound Function</H3>
<PRE>UBound(<I>arrayname</I>[, <I>dimension</I>])
</PRE>
<P>Returns a Long value that represents the largest subscript for a dimensioned array
(<I>arrayname</I>). For multidimensional arrays, the <I>dimension</I> argument can
be included to specify which dimension should be used.</P>
<P>
<H3><A NAME="Heading207"></A>UCase Function</H3>
<PRE>UCase(<I>string</I>)
</PRE>
<P>Converts a <I>string</I> to all uppercase characters and returns a new String
value.</P>
<P>
<H3><A NAME="Heading208"></A>Unload Statement</H3>
<PRE>Unload <I>object</I>
</PRE>
<P>Unloads an <I>object</I> (such as a form or control) from memory and frees up
any resources being used by the object.</P>
<P>
<H3><A NAME="Heading209"></A>Unlock Statement</H3>
<PRE>Unlock [#]<I>filenumber</I>[, <I>recordrange</I>]
</PRE>
<P>Removes locking that prevents another process from accessing all or part of the
open file that corresponds to the <I>filenumber</I> argument. The <I>recordrange</I>
argument refers to a range of records (or bytes) that are to be unlocked and should
use the syntax:</P>
<P>
<PRE><I>recnumber</I> | [<I>start</I>] To <I>end</I>
</PRE>
<P>where <I>recnumber</I> is the record number (for Random files) or byte position
(for Binary files) where unlocking should begin. Alternatively, the starting and
ending record numbers or bytes to be unlocked can be specified using the <I>start</I>
and <I>end</I> arguments.</P>
<P>
<H3><A NAME="Heading210"></A>Val Function</H3>
<PRE>Val(<I>string</I>)
</PRE>
<P>Returns the numeric value of a <I>string</I>. The data type that is returned by
Val depends on the kind of numeric value the string contains. If the string does
not contain a numeric value, then Val returns zero.</P>
<P>
<H3><A NAME="Heading211"></A>VarType Function</H3>
<PRE>VarType(<I>varname</I>)
</PRE>
<P>Returns an Integer value that represents the subtype of the variable specified
by <I>varname</I>. Several VB constants are used to define the data type values returned
by the VarType function, including: vbEmpty, vbNull, vbInteger, vbLong, vbSingle,
vbDouble, vbCurrency, vbDate, vbString, vbObject, vbError, vbBoolean, vbVariant,
vbDataObject, vbDecimal, vbByte, and vbArray.</P>
<P>
<H3><A NAME="Heading212"></A>Weekday Function</H3>
<PRE>Weekday(<I>date</I>, [<I>firstdayofweek</I>])
</PRE>
<P>Returns a Variant of subtype Integer that represents the day of the week for a
given <I>date</I>. Weekday returns a 1 for Sunday, 2 for Monday, and so on. The optional
<I>firstdayofweek</I> argument can be used to specify the first day of the week.
If <I>firstdayofweek</I> is not specified, then Sunday (1) is assumed.</P>
<P>
<H3><A NAME="Heading213"></A>While...Wend Statement</H3>
<PRE>While <I>condition</I>
    [<I>statements</I>]
Wend
</PRE>
<P>Repeats one or more <I>statements</I> while a <I>condition</I> remains True. When
the <I>condition</I> becomes False, then control is passed to the line of code immediately
following the While...Wend structure.</P>
<P>
<H3><A NAME="Heading214"></A>Width # Statement</H3>
<PRE>Width #<I>filenumber</I>, <I>width</I>
</PRE>
<P>Assigns an output line <I>width</I> (in characters) for the open file associated
with <I>filenumber</I>.</P>
<P>
<H3><A NAME="Heading215"></A>With Statement</H3>
<PRE>With <I>object</I>
    [<I>statements</I>]
End With
</PRE>
<P>Executes one or more <I>statements</I> on a single <I>object</I> or user-defined
type.</P>
<P>
<H3><A NAME="Heading216"></A>Write # Statement</H3>
<PRE>Write #<I>filenumber</I>, [<I>outputlist</I>]
</PRE>
<P>Writes data to the open sequential file associated with the <I>filenumber</I>
argument. The <I>varlist</I> argument should contain one or more comma-delimited
variables that contain the data to be written to the file.</P>
<P>
<H3><A NAME="Heading217"></A>Year Function</H3>
<PRE>Year(<I>date</I>)
</PRE>
<P>Returns a Variant that represents the year for the date value specified by the
<I>date</I> argument.</P>
<P>
<H2><A NAME="Heading218"></A>Summary</H2>
<P>This chapter is designed to be a quick-reference for all of VB's built-in functions
and statements, providing syntax and a brief description for each. For more information
about particular functions and statements, consult Visual Basic's online Help system
or Microsoft's <I>Visual Basic 5.0 Language Reference</I>.</P>
<H1></H1>
<CENTER>
<P>
<HR>
<A HREF="ch32.htm" tppabs="http://pbs.mcp.com/ebooks/078971633X/ch32/ch32.htm"><IMG SRC="previous.gif" tppabs="http://pbs.mcp.com/ebooks/078971633X/button/previous.gif" WIDTH="128" HEIGHT="28"
ALIGN="BOTTOM" ALT="Previous chapter" BORDER="0"></A><A HREF="apb.htm" tppabs="http://pbs.mcp.com/ebooks/078971633X/apb/apb.htm"><IMG
SRC="next.gif" tppabs="http://pbs.mcp.com/ebooks/078971633X/button/next.gif" WIDTH="128" HEIGHT="28" ALIGN="BOTTOM" ALT="Next chapter"
BORDER="0"></A><A HREF="index-38.htm" tppabs="http://pbs.mcp.com/ebooks/078971633X/index.htm"><IMG SRC="contents.gif" tppabs="http://pbs.mcp.com/ebooks/078971633X/button/contents.gif" WIDTH="128"
HEIGHT="28" ALIGN="BOTTOM" ALT="Contents" BORDER="0"></A></P>

<P>&#169; <A HREF="copy.htm" tppabs="http://pbs.mcp.com/ebooks/078971633X/copy.htm">Copyright</A>, Macmillan Computer Publishing. All
rights reserved.
</CENTER>


</BODY>

</HTML>
