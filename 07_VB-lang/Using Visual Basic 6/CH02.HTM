<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2//EN">
<HTML>

<HEAD>
	<META HTTP-EQUIV="Content-Type" CONTENT="text/html;CHARSET=iso-8859-1">
<SCRIPT LANGUAGE="JavaScript">

<!--

function popUp(pPage) {
 var fullURL = document.location;
 var textURL = fullURL.toString();
 var URLlen = textURL.length;
 var lenMinusPage = textURL.lastIndexOf("/");
 lenMinusPage += 1;
 var fullPath = textURL.substring(0,lenMinusPage);
 popUpWin = window.open('','popWin','resizable=yes,scrollbars=no,width=525,height=394');
 figDoc= popUpWin.document;
 zhtm= '<HTML><HEAD><TITLE>' + pPage + '</TITLE>';
 zhtm += '</head>';
 zhtm += '<BODY bgcolor="#FFFFFF">';
 zhtm += '<IMG SRC="' + fullPath + pPage + '">';
 zhtm += '<P><B>' + pPage + '</B>';
 zhtm += '</BODY></HTML>';
 window.popUpWin.document.write(zhtm);
 window.popUpWin.document.close();
 // Johnny Jackson 4/28/98
 }

//-->
                                                                
</SCRIPT>
<link rel="stylesheet" href="ebooks.css" tppabs="http://pbs.mcp.com/includes/stylesheets/ebooks.css">

	<META NAME="GENERATOR" Content="Symantec Visual Page Mac 1.1.1">
	<TITLE>Using Visual Basic 6 -- Ch 2 -- What's New with Visual Basic 6</TITLE>
</HEAD>

<BODY TEXT="#000000" BGCOLOR="#FFFFFF">

<H1 ALIGN="CENTER"><IMG SRC="que.gif" tppabs="http://pbs.mcp.com/ebooks/078971633X/button/que.gif" WIDTH="171" HEIGHT="66" ALIGN="BOTTOM"
BORDER="0"><BR>
Using Visual Basic 6</H1>
<CENTER>
<P><A HREF="ch01.htm" tppabs="http://pbs.mcp.com/ebooks/078971633X/ch01/ch01.htm"><IMG SRC="previous.gif" tppabs="http://pbs.mcp.com/ebooks/078971633X/button/previous.gif" WIDTH="128" HEIGHT="28"
ALIGN="BOTTOM" ALT="Previous chapter" BORDER="0"></A><A HREF="ch03.htm" tppabs="http://pbs.mcp.com/ebooks/078971633X/ch03/ch03.htm"><IMG
SRC="next.gif" tppabs="http://pbs.mcp.com/ebooks/078971633X/button/next.gif" WIDTH="128" HEIGHT="28" ALIGN="BOTTOM" ALT="Next chapter"
BORDER="0"></A><A HREF="index-38.htm" tppabs="http://pbs.mcp.com/ebooks/078971633X/index.htm"><IMG SRC="contents.gif" tppabs="http://pbs.mcp.com/ebooks/078971633X/button/contents.gif" WIDTH="128"
HEIGHT="28" ALIGN="BOTTOM" ALT="Contents" BORDER="0"></A> 
<HR>

</CENTER>
<H1 ALIGN="CENTER">- 2 -<BR>
What's New with Visual Basic 6</H1>

<UL>
	<LI><A HREF="#Heading1">Getting a Quick Overview of VB6</A>
	<LI><A HREF="#Heading2">Getting More Power from Enhanced Controls</A>
	<UL>
		<LI><A HREF="#Heading3">The Validate Event and the CausesValidation Property</A>
		<LI><A HREF="#Heading4">Adding Excitement with the New Graphical Enhancements</A>
	</UL>
	<LI><A HREF="#Heading5">Working with the New Controls</A>
	<UL>
		<LI><A HREF="#Heading6">Selecting Dates with the MonthView and DateTimePicker Controls</A>
		<LI><A HREF="#Heading7">Making Movable Toolbars with the CoolBar</A>
		<LI><A HREF="#Heading8">Using Graphics with an ImageCombo</A>
		<LI><A HREF="#Heading9">The FlatScrollBar Control</A>
	</UL>
	<LI><A HREF="#Heading10">Working with the New Language Features</A>
	<UL>
		<LI><A HREF="#Heading11">File System Objects</A>
		<LI><A HREF="#Heading12">New String Functions</A>
		<LI><A HREF="#Heading13">True Dynamic Control Creation</A>
	</UL>
	<LI><A HREF="#Heading14">Learning About VB and the Internet</A>
	<LI><A HREF="#Heading15">Finding Out About the New Data Capabilities</A>
	<LI><A HREF="#Heading16">New Object Programming Additions</A>
</UL>

<P>
<HR SIZE="4">

<H1 ALIGN="CENTER"></H1>
<H2><A NAME="Heading1"></A>Getting a Quick Overview of VB6</H2>
<P>If you're new to Visual Basic, the title of this chapter might be a little confusing.
Clearly if you are a novice to the language, everything about VB is new. Even so,
you shouldn't avoid this chapter. There's something in it for you, particularly in
the sections focusing on the new ActiveX controls. For those of you who have done
some work in other versions of Visual Basic, you'll find this chapter very relevant.</P>


<BLOCKQUOTE>
	<P>
<HR>
<STRONG>What's Omitted</STRONG></P>
	<P>Keep in mind that some new features in VB6 have been omitted from this discussion.
	These features require more than an introductory knowledge to fully understand them.
	Many of these features that weren't discussed, however, are covered in later chapters,
	whereas others are described in the documentation that comes with the product. 
<HR>


</BLOCKQUOTE>

<P>Saying that Visual Basic 6 has some interesting new features is nothing short
of an understatement. Visual Basic 6 has so many amazing new features that overstatement
is next to impossible because so much is new in so many areas. New controls allow
your applications to incorporate the look, feel, and function of Office 97 applications
and Internet Explorer. No more do you have to have at least one instance of a control
on your form to create controls on-the-fly. With VB6, you add controls to your project
dynamically with only code, and you can make custom ActiveX controls leaner and meaner
than ever. You can even write server-side applications that use Dynamic HTML embedded
with Internet Information Server DLLs.</P>
<P>This chapter gives some new features a bit more attention than others. Some new
improvements involve working with larger-scale data access programs that might involve
hundreds--if not thousands--of users on a corporate network or on the Internet. These
types of Visual Basic applications, known as enterprise applications, are usually
written with the Enterprise Edition of VB. These new enterprise features are referenced
here but fall outside the scope of this book.</P>


<BLOCKQUOTE>
	<P>
<HR>
<STRONG>Working with the Windows common controls</STRONG></P>
	<P>Most controls discussed in this chapter are <I>not</I> intrinsic (standard) ActiveX
	controls. Therefore, they must be added to your project from the Components dialog
	(choose C<U>o</U>mponents from the <U>P</U>roject menu). When you open the Components
	dialog, select Microsoft Windows Common Controls, Microsoft Windows Common Controls-2,
	and Microsoft Windows Common Controls-3 from the list. 
<HR>


</BLOCKQUOTE>

<H2><A NAME="Heading2"></A>Getting More Power from Enhanced Controls</H2>
<P>Before we look at the completely new additions to VB6, let's look at some enhancements
to the features from the previous version.</P>
<H3><A NAME="Heading3"></A>The Validate Event and the CausesValidation Property</H3>
<P>The first enhancement that affects just about all intrinsic ActiveX controls is
the addition of the Validate event and the CausesValidation property. Before VB6,
if you had to check to see if a word was typed properly in a TextBox, you most likely
would program the TextBox's LostFocus event handler to see if, indeed, the user entered
correct data. If they hadn't, you could invoke the control's SetFocus method in which
validation was occurring to keep the user from proceeding. Sometimes the logic of
this programming could cause your users problems. If they never entered the right
data, they would be locked into that one control--they couldn't even click a Help
button. The new Validate event procedure and the CausesValidation property address
this issue.</P>
<P>Listing 2.1 shows how to use the Validate event procedure to check a TextBox's
data. The code relates to the illustration in Figure 2.1. If users don't type the
word Cherries in the first TextBox, they can't proceed to the second TextBox. However,
because the value CausesValidation property of the CommandButton is set to False,
users can click it to help determine the right word to enter.</P>


<BLOCKQUOTE>
	<P>
<HR>
<STRONG>Using the CausesValidation property</STRONG></P>
	<P>Notice the Cancel <I>parameter</I> on Line 1. Visual Basic provides this parameter
	within the control's Validate event procedure. If you set the value of Cancel to
	True (Line 7), the program's focus won't be allowed to leave the control except to
	go to other controls that have their CausesValidation property set to False. 
<HR>


</BLOCKQUOTE>

<H4>LISTING 2.1&nbsp;&nbsp;02LIST01.TXT--Allowing Some Controls Event Handling Activity
<BR>
During Data Validation</H4>
<PRE><B>01 </B>Private Sub Text1_Validate(Cancel As Boolean)</PRE>
<PRE><B>02 </B>`Make it so that if the user does not</PRE>
<PRE><B>03 </B>`enter the word, &quot;Cherries&quot; in the TextBox</PRE>
<PRE><B>04 </B>`the cursor will be returned this TextBox</PRE>
<PRE><B>05 </B>If Text1.Text &lt;&gt; &quot;Cherries&quot; Then</PRE>
<PRE><B>06 </B>MsgBox &quot;You cannot go on!&quot;</PRE>
<PRE><B>07 </B>Cancel = True</PRE>
<PRE><B>08 </B>End If</PRE>
<PRE><B>09 </B>End Sub</PRE>
<PRE><B>10 </B>Private Sub Command1_Click()</PRE>
<PRE><B>11 </B>Dim strMsg As String</PRE>
<PRE><B>12 </B>Dim strQuote As String</PRE>
<PRE><B>13 </B>strQuote = &quot;&quot;&quot;&quot;</PRE>
<PRE><B>14 </B>`Make an instructional message</PRE>
<PRE><B>15 </B>strMsg = &quot;You must type the word,&quot; &amp; strQuote</PRE>
<PRE><B>16 </B>strMsg = strMsg &amp; &quot;Cherries&quot; &amp; strQuote &amp; &quot; &quot;</PRE>
<PRE><B>17 </B>strMsg = strMsg &amp; &quot;in the first TextBox.&quot;</PRE>
<PRE><B>18 </B>MsgBox strMsg, vbInformation, &quot;Instructions&quot;</PRE>
<PRE><B>19 </B>`The reason that you can click on this</PRE>
<PRE><B>20 </B>`CommandButton even though the Cancel parameter</PRE>
<PRE><B>21 </B>`of the Validate event handler is set to True</PRE>
<PRE><B>22 </B>`is because the value of CauseValidation</PRE>
<PRE><B>23 </B>`property of this CommandButton is set to false.</PRE>
<PRE><B>24 </B>End Sub</PRE>


<BLOCKQUOTE>
	<P>
<HR>
<STRONG>Commenting code</STRONG></P>
	<P>The apostrophe (`) before a line of code denotes a commented line. That line of
	code isn't run by Visual Basic. 
<HR>


</BLOCKQUOTE>

<P><A HREF="javascript:popUp('02fig01.gif')"><B>FIGURE 2.1</B></A> <I>The Validate
event procedure allows you to check for correct data while still allowing you to
access other controls during the validation process.</I></P>
<P>
<H3><A NAME="Heading4"></A>Adding Excitement with the New Graphical Enhancements</H3>
<P>Visual Basic, as always, allows you to use graphics to make your programs come
alive, and Microsoft has enhanced the graphical capabilities of many controls. First,
the ImageList control now supports .gif files. This enhancement is substantial because
just about every control that uses graphics has an ImageList control associated with
it.</P>
<P>The ListView and TabStrip controls have been enhanced to allow you to use pictures
and icons for decoration and description. Figure 2.2 shows you the new ListView control,
to which you can add a background picture in the <I>client area</I>. The background
picture can be centered, tiled, or placed at any corner. You can add check boxes
to ListItems child objects within the control by setting the ListView's CheckBoxes
property to True. Also, you can make the scrollbars of the ListView appear in the
new flat style by setting the FlatScrollBars property to True. (If you want to see
some of the ListView control enhancements demonstrated within a programming context,
download the file VB6Ch2.zip and look at the project prjListView.vbp.)</P>


<BLOCKQUOTE>
	<P>
<HR>
<STRONG>Getting files From the Web site</STRONG></P>
	<P>The files referenced in this book can be downloaded from the Web site dedicated
	to this book. The source code can be found at <A target="_new" HREF="javascript:if(confirm('http://www.mcp. com/info  \n\nThis file was not retrieved by Teleport Pro, because it is addressed on a domain or path outside the boundaries set for its Starting Address.  \n\nDo you want to open it from the server?'))window.location='http://www.mcp. com/info'" tppabs="http://www.mcp. com/info">http://www.mcp.
	com/info</A>. When you get the URL, enter 078971633x, and then click the Search button
	to go to the Book Info page. 
<HR>


</BLOCKQUOTE>

<P><A HREF="javascript:popUp('02fig02.gif')"><B>FIGURE 2.2</B></A> <I>You now can
have a background graphic in the ListView control client area.</I></P>
<P>Figure 2.3 shows you the new TabStrip control, which now allows you to place graphics
in each tab. The control also has a new property, HotTracking, that you can assign
at design time. If you set the value of HotTracking to True, the tab highlights when
you pass the mouse pointer over it. As mentioned earlier, as with all the new controls,
the TabStrip control has a Validate event procedure. (The example code for this control
is in project prjTabStrip.vbp, in the VB98Ch2.zip file on the book's Web site.)</P>
<P><A HREF="javascript:popUp('02fig03.gif')"><B>FIGURE 2.3</B></A> <I>The TabStrip
control has been enhanced to allow for icons on each tab.</I></P>

<P>The Slider control has a new property, Text. When you set a string to the value
of the Text property, that string appears within a ToolTip window. The position of
the ToolTip window is determined by the Slider control's new TextPosition property
(see Figure 2.4). To see this code in action, review the project prjSlider.vbp from
the book's Web site.</P>

<P><A HREF="javascript:popUp('02fig04.gif')"><B>FIGURE 2.4</B></A> <I>The Slider
control now has a Text property that shows you a ToolTip window.</I></P>

<P>Many enhancements have been made to the ToolBar control. You can now add drop-down
menus to the toolbar by using a ButtonMenu. The Style property supports a transparent
setting (tbrTransparent) that allows you to have the buttons on your toolbar appear
and behave like the buttons on the Internet Explorer toolbar. Figure 2.5 shows the
effect of the new transparent setting and a collection of buttons with each button
having its own ButtonMenu. If you want to find out how to set up your toolbar as
shown in the figure, download the project prjToolBar.vbp from the book's Web site.
Open the project, select the form, and then right-click the ToolBar control to view
the property page for the control. You then can review the various settings for the
control.</P>

<P><A HREF="javascript:popUp('02fig05.gif')"><B>FIGURE 2.5</B></A> <I>The ToolBar
control is enhanced to provide ButtonsMenus and hotspots. The control's property
page allows you to configure a ToolBar at a very detailed level.</I></P>
<P>
<H2><A NAME="Heading5"></A>Working with the New Controls</H2>
<P>Visual Basic 6 ships with many new ActiveX controls. Some of these controls apply
to stand-alone desktop programs; others pertain to enterprise-wide data access development
projects. In the following sections, you'll see the new controls that relate to your
desktop development efforts.</P>
<P>
<H3><A NAME="Heading6"></A>Selecting Dates with the MonthView and DateTimePicker
Controls</H3>
<P>VB6 has two controls that provide you with a new way to view and select dates:
MonthView and DateTimePicker. What's interesting about these controls is that they
let you view and select dates within the context of a calendar. The MonthView control
presents a full calendar that you can traverse from day to day or month to month.
The DateTimePicker control is similar to the MonthView except that its calendar drops
down when the user clicks the control's down arrow. Figure 2.6 shows you the Using
all the new controls</P>


<BLOCKQUOTE>
	<P>
<HR>
All the controls discussed in this section are displayed and used within a single
	project, WhatsNew.vbp. You can download this code from <A target="_new" HREF="javascript:if(confirm('http:// www.mcp.com/info  \n\nThis file was not retrieved by Teleport Pro, because it is addressed on a domain or path outside the boundaries set for its Starting Address.  \n\nDo you want to open it from the server?'))window.location='http:// www.mcp.com/info'" tppabs="http:// www.mcp.com/info">http://
	www.mcp.com/info</A>, as explained earlier.MonthView and DateTimePicker controls.
	
<HR>


</BLOCKQUOTE>

<P><A HREF="javascript:popUp('02fig06.gif')"><B>FIGURE 2.6</B></A> <I>All the new
Windows common controls are embedded in the OCXs MSCOMCTRL.OCX, MSCOMCT2.OCX, and
COMCT332.OCX.</I></P>
<P>
<H3><A NAME="Heading7"></A>Making Movable Toolbars with the CoolBar</H3>
<P>The new CoolBar control is similar to the <I>Coolbars</I> you've been using in
Office 97 and Internet Explorer. A CoolBar is a toolbar that you can move on a form,
and the CoolBar control is a <I>container</I> for other ActiveX controls. Thus, you
can offer your users more flexibility and utility by embedding other controls within
the CoolBar. Figure 2.6 shows a CoolBar with three <I>Band</I> objects. The first
Band contains two OptionButtons, the second contains a ToolBar control with three
buttons, and the third band contains a ComboBox control. At <I>runtime</I> you can
move the Bands around the Coolbar's client area any way you want.</P>


<BLOCKQUOTE>
	<P>
<HR>
<STRONG>CoolBar bands</STRONG></P>
	<P>A <I>band</I> is a bar within a CoolBar. A CoolBar can have many bands that can
	be moved about in the CoolBar client area. 
<HR>


</BLOCKQUOTE>

<H3><A NAME="Heading8"></A>Using Graphics with an ImageCombo</H3>


<BLOCKQUOTE>
	<P>
<HR>
<STRONG>Working with ImageLists</STRONG></P>
	<P>An <I>ImageList</I> is a &quot;windowless&quot; control that you use to store
	different types of graphics: bitmaps, gifs, icons, and so on. You associate an ImageList
	with a control by assigning the ImageList in question to a control's ImageList property.
	For example, to assign an ImageList named ImageList1 to an ImageCombo, the code is
	ImageList1.ImageList = ImageList1. 
<HR>


</BLOCKQUOTE>

<P>The ImageCombo control, new with Visual Basic 6, allows you to embed graphics
within a ComboBox. To accomplish this, Visual Basic introduces a new <I>object</I>,
the ComboItem, which encapsulates all layout and data properties that are needed
to work with an ImageCombo. A ComboItem has a Text property for string display of
a line within the ImageCombo and an Image property that can define the graphic to
show on a line within the ImageCombo. As with most of the new graphical ActiveX controls,
the ImageCombo has an ImageList from which it references images and pictures.</P>
<P>Use the code in Listing 2.2 to add a ComboItem that has a graphic to an ImageCombo.
This code is from the cmdAddCbo_Click() event procedure of the <B>CommandButton</B>
cmdAddCbo, which is part of the code from the project WhatsNew.vbp. You can download
the code from the Web side dedicated to this book.</P>
<P>
<H4>LISTING 2.2&nbsp;&nbsp;02LIST02.TXT--Creating ComboItems and Adding Them to an
<BR>
ImageCombo</H4>
<PRE><B>01 </B>Static i% `A counting integer</PRE>
<PRE><B>02 </B>Static imgi% `A index for a graphic</PRE>
<PRE><B>03 </B>`within an ImageList</PRE>
<PRE><B>04 </B>Dim ci As ComboItem `Object variable for a</PRE>
<PRE><B>05 </B>`ComboItem</PRE>
<PRE><B>06</B></PRE>
<PRE><B>07 </B>`Get a reference to ComboItem object using</PRE>
<PRE><B>08 </B>`a ComboItems Add method.</PRE>
<PRE><B>09 </B>Set ci = ImageCombo1.ComboItems.Add</PRE>
<PRE><B>10 </B>`Assign some data a line of text</PRE>
<PRE><B>11 </B>`ci.Text = &quot;My Caption &quot; &amp; CStr(i%)</PRE>
<PRE><B>12 </B>`Add a graphic by referencing an index in the</PRE>
<PRE><B>13 </B>`associated ImageList</PRE>
<PRE><B>14 </B>ci.Image = imgi% + 1</PRE>
<PRE><B>15 </B>`Make sure that you haven't exceeded the number</PRE>
<PRE><B>16 </B>`of images in the ImageList</PRE>
<PRE><B>17 </B>If imgi% = ImageList1.ListImages.Count - 1 Then</PRE>
<PRE><B>18 </B>imgi% = 0</PRE>
<PRE><B>19 </B>Else</PRE>
<PRE><B>20 </B>imgi% = imgi% + 1</PRE>
<PRE><B>21 </B>End If</PRE>
<PRE><B>22 </B>`Increment the string counter</PRE>
<PRE><B>23 </B>i% = i% + 1</PRE>


<BLOCKQUOTE>
	<P>
<HR>
<STRONG>Code for the ComboItem</STRONG></P>
	<P>If you're beginning programmer, the code shown in Listing 2.2 is probably a little
	beyond your needs right now. This code is provided to show those with some VB background
	how to work with the newer features of the ComboItem object. 
<HR>


</BLOCKQUOTE>

<P>Figure 2.6 shows you the result of clicking the cmdAddCbo button. Notice that
the ImageCombo contains a graphic and a string.</P>
<P>
<H3><A NAME="Heading9"></A>The FlatScrollBar Control</H3>
<P>Visual Basic 6 provides a new variation of the familiar scrollbar control: the
FlatScrollBar. The FlatScrollBar is fundamentally the same as the ScrollBar, except
that the FlatScrollBar has three Appearance styles: a standard style, a three-dimensional
(beveled) style, and a two-dimensional style that becomes beveled when the mouse
pointer hovers over it (refer to Figure 2.6).</P>
<P>
<H2><A NAME="Heading10"></A>Working with the New Language Features</H2>
<P>In addition to enhanced and new ActiveX controls, VB6 also provides new features
within the Visual Basic language itself. Again, if you have no previous experience
with Visual Basic, the following sections might seem a bit baffling. You still might
want to read through it anyway, however; these new features will make your programming
efforts easier regardless of degree of prior experience.</P>
<P>
<H3><A NAME="Heading11"></A>File System Objects</H3>
<P>In older versions of Visual Basic, if you wanted to get file system information
or perform file system tasks, such as writing to a file or changing a directory,
you had a number of techniques available, most of which were quite laborious. In
Visual Basic 6, all these chores have been contained with a new object, FileSystemObject,
which is part of the Visual Basic Scripting Library. Thus, when you learn to use
this object within VB6, you can easily transfer your knowledge to scripting within
Internet Explorer or Internet Information Server to do system-level programming.</P>


<BLOCKQUOTE>
	<P>
<HR>
<STRONG>Internet Information Server</STRONG></P>
	<P>Internet Information Server (IIS) is a complex program, the function of which
	is to deliver information and files over the Internet. An Internet server is a physical
	computer, and IIS is software that runs on an Internet server. As you read in this
	book, you'll learn that you can use Visual Basic to write programs that are extensions
	of IIS, called IIS Applications. An application that runs on an Internet server is
	called a <I>server-side application</I>. 
<HR>


</BLOCKQUOTE>

<P>The FileSystemObject is quite complex. It's made of a number of objects and methods
that encapsulate the file system functions, which you use to work with drives and
files on a local machine or over the network. Table 2.1 describes the new FileSystemObject
objects.</P>


<BLOCKQUOTE>
	<P>
<HR>
<STRONG>Microsoft Scripting RunTime component</STRONG></P>
	<P>If you plan to program with the FileSystemObject, make sure that you include a
	reference in your project to the Microsoft Scripting RunTime ActiveX component. You
	include a reference to the MS Scripting RunTime through the References dialog (choose
	Refere<U>n</U>ces from the <U>P</U>roject menu). Then select the Microsoft Scripting
	RunTime in the References list. 
<HR>


</BLOCKQUOTE>

<H4>TABLE 2.1&nbsp;&nbsp;FileSystemObject Objects</H4>
<P>
<TABLE BORDER="1">
	<TR ALIGN="LEFT" VALIGN="TOP">
		<TD ALIGN="LEFT"><B><I>Object</I></B></TD>
		<TD ALIGN="LEFT"><B><I>Description</I></B></TD>
	</TR>
	<TR ALIGN="LEFT" VALIGN="TOP">
		<TD ALIGN="LEFT">Drive</TD>
		<TD ALIGN="LEFT">Provides properties and methods for describing and working with local and network
			drives</TD>
	</TR>
	<TR ALIGN="LEFT" VALIGN="TOP">
		<TD ALIGN="LEFT">File</TD>
		<TD ALIGN="LEFT">Provides properties and methods for working with files</TD>
	</TR>
	<TR ALIGN="LEFT" VALIGN="TOP">
		<TD ALIGN="LEFT">Folder</TD>
		<TD ALIGN="LEFT">Provides properties and methods for working with folders</TD>
	</TR>
	<TR ALIGN="LEFT" VALIGN="TOP">
		<TD ALIGN="LEFT">FileSystemObject</TD>
		<TD ALIGN="LEFT">Provides properties and methods for defining and working with collections of drives,
			folders, and files</TD>
	</TR>
	<TR ALIGN="LEFT" VALIGN="TOP">
		<TD ALIGN="LEFT">TextStream</TD>
		<TD ALIGN="LEFT">Provides properties and methods that allow you work with text files</TD>
	</TR>
</TABLE>
</P>
<P>If you want an introduction to the FileSystemObject, the project prjFileSystem.vbp
is a small program that shows you how to use the various FileSystemObject features
to find out how many drives are on your computer (see Figure 2.7). Also, when you
select a found drive, the program reports back the amount of unused disk space on
a drive. You can find the project prjFileSystem.vbp on the Web site dedicated to
this book.</P>
<P><A HREF="javascript:popUp('02fig07.gif')"><B>FIGURE 2.7</B></A> <I>The project
prjFileSystem gives you an introduction about how to use the FileSystemObject.</I></P>
<P>
<H3><A NAME="Heading12"></A>New String Functions</H3>
<P>Visual Basic 6 provides a number of new functions for working with strings (see
Table 2.2).</P>
<P>
<H4>TABLE 2.2&nbsp;&nbsp;The New String Functions</H4>
<P>
<TABLE BORDER="1" HEIGHT="841">
	<TR ALIGN="LEFT" VALIGN="TOP">
		<TD ALIGN="LEFT"><B><I>Function</I></B></TD>
		<TD ALIGN="LEFT"><B><I>Name</I></B></TD>
	</TR>
	<TR ALIGN="LEFT" VALIGN="TOP">
		<TD ALIGN="LEFT">(Return Type)</TD>
		<TD ALIGN="LEFT">Description</TD>
	</TR>
	<TR ALIGN="LEFT" VALIGN="TOP">
		<TD ALIGN="LEFT">Filter</TD>
		<TD ALIGN="LEFT">Allows you to filter a string for various</TD>
	</TR>
	<TR ALIGN="LEFT" VALIGN="TOP">
		<TD ALIGN="LEFT">(string array)</TD>
		<TD ALIGN="LEFT">substrings</TD>
	</TR>
	<TR ALIGN="LEFT" VALIGN="TOP">
		<TD ALIGN="LEFT">FormatCurrency (string)</TD>
		<TD ALIGN="LEFT">Allows you to format a string to currency</TD>
	</TR>
	<TR ALIGN="LEFT" VALIGN="TOP">
		<TD ALIGN="LEFT">FormatDateTime (string)</TD>
		<TD ALIGN="LEFT">Allows you to format a string to a time or date</TD>
	</TR>
	<TR ALIGN="LEFT" VALIGN="TOP">
		<TD ALIGN="LEFT">FormatPercent (string)</TD>
		<TD ALIGN="LEFT">Allows you to format a string as a percent</TD>
	</TR>
	<TR ALIGN="LEFT" VALIGN="TOP">
		<TD ALIGN="LEFT">InStrRev (string)</TD>
		<TD ALIGN="LEFT">Returns the position of one string within another string; unlike InStr, InStrRev
			starts at the end of the string being searched</TD>
	</TR>
	<TR ALIGN="LEFT" VALIGN="TOP">
		<TD ALIGN="LEFT">Join (string)</TD>
		<TD ALIGN="LEFT">Takes a string array and combines its elements into one string</TD>
	</TR>
	<TR ALIGN="LEFT" VALIGN="TOP">
		<TD ALIGN="LEFT">MonthName (string)</TD>
		<TD ALIGN="LEFT">Returns the name of a month when you have the number of the month (for example, 1
			returns January)</TD>
	</TR>
	<TR ALIGN="LEFT" VALIGN="TOP">
		<TD ALIGN="LEFT">Replace (string)</TD>
		<TD ALIGN="LEFT">Replaces substrings within a string</TD>
	</TR>
	<TR ALIGN="LEFT" VALIGN="TOP">
		<TD ALIGN="LEFT">Round (string)</TD>
		<TD ALIGN="LEFT">Returns a rounded number as specified</TD>
	</TR>
	<TR ALIGN="LEFT" VALIGN="TOP">
		<TD ALIGN="LEFT">Split (string array)</TD>
		<TD ALIGN="LEFT">Splits a string into an array of strings</TD>
	</TR>
	<TR ALIGN="LEFT" VALIGN="TOP">
		<TD ALIGN="LEFT">StrReverse (string)</TD>
		<TD ALIGN="LEFT">Reverses the order of a string--for example, &quot;cat&quot; becomes &quot;tac&quot;</TD>
	</TR>
	<TR ALIGN="LEFT" VALIGN="TOP">
		<TD ALIGN="LEFT">WeekdayByName (string)</TD>
		<TD ALIGN="LEFT">Returns the day of the week</TD>
	</TR>
</TABLE>
</P>
<P>As you can see in Table 2.2, some new string functions return string arrays. The
capability of a function to return an array is also a new feature in VB6.</P>
<P>Each new function listed in Table 2.2 could warrant a section of a chapter dedicated
solely to it. Clearly, such description is beyond the scope of this chapter, but
if you need more details for how to use a specific string function, read the documentation
that comes with your edition of VB6 or Chapter 12<I>, &quot;</I>Working with Strings
and Typecasting.&quot;</P>
<P>
<H3><A NAME="Heading13"></A>True Dynamic Control Creation</H3>


<BLOCKQUOTE>
	<P>
<HR>
<STRONG>On-the-fly versus runtime</STRONG></P>
	<P>The phrase <I>on-the-fly</I> is used when you are creating something while a program
	is running. Another term for the state when a program is running is <I>runtime</I>.
	
<HR>


</BLOCKQUOTE>

<P>For those of you familiar with VB, you might know that in prior versions of VB
you created controls on-the-fly by using <I>control arrays</I>. One drawback to creating
controls with a control array was that at least one control had to be present on
a form for you to create others <I>dynamically</I>. This is no longer true in VB6;
you can create a control at runtime purely from code by using the Add method of the
Controls collection.</P>
<P>Listing 2.3 shows you the code that you must use to create a CommandButton purely
from code, without having to drag a CommandButton from the ToolBox first.</P>
<P>
<H4>LISTING 2.3&nbsp;&nbsp;02LIST03.TXT--The New Add Method for the Controls Collection</H4>
<PRE><B>01 </B>Option Explicit</PRE>
<PRE><B>02 </B>`WithEvents is a way tell the program to</PRE>
<PRE><B>03 </B>`respect all the events that are associated</PRE>
<PRE><B>04 </B>`a CommandButton such as the click event.</PRE>
<PRE><B>05 </B>Private WithEvents cmdMyButton As CommandButton</PRE>
<PRE><B>06</B></PRE>
<PRE><B>07 </B>Private Sub Form_Load()</PRE>
<PRE><B>08 </B>Set cmdButton = Controls.Add(&quot;VB.CommandButton&quot;, _ &quot;Button&quot;)</PRE>
<PRE>09 With mdButton</PRE>
<PRE><B>10 </B>.Visible = True</PRE>
<PRE><B>11 </B>.Width = 3000</PRE>
<PRE><B>12 </B>.Caption = &quot;A real surprise&quot;</PRE>
<PRE><B>12 </B>.Top = 1000</PRE>
<PRE><B>14 </B>.Left = 1000</PRE>
<PRE><B>15 </B>End With</PRE>
<PRE><B>16 </B>End Sub</PRE>
<PRE><B>17</B></PRE>
<PRE><B>18 </B>Sub cmdButton _Click()</PRE>
<PRE><B>19 </B>cmdButton.Caption = &quot;At last, real OOP!</PRE>
<PRE><B>20 </B>End Sub</PRE>
<P>If you want to see this code in action, go to the project prjDynCtrl.vbp on the
Web site dedicated to this book.</P>
<P>
<H2><A NAME="Heading14"></A>Learning About VB and the Internet</H2>


<BLOCKQUOTE>
	<P>
<HR>
<STRONG>Working with DHTML</STRONG></P>
	<P>Dynamic Hypertext Markup Language is an extension of HTML (Hypertext Markup Language),
	the language of the Internet. All Web browsers, regardless of manufacturer, use HMTL
	to decode information passed through the Internet that's presented to end users.
	DHTML takes HTML one step further by permitting a greater degree of programmability
	to take place. Thus, with <I>DHTML</I> you can send code via the Internet that allows
	end users to move things around the computer monitor with a mouse, to hide things,
	or even to delete items. 
<HR>


</BLOCKQUOTE>

<P>Visual Basic has been positioned very nicely for Internet development. You can
use <I>VBScript</I> to write applications that run on your desktop computer with
Internet Explorer. Also, you can use VBScript on the server side to work with Internet
Explorer. Visual Basic 6 has sharpened the focus on Internet development; it extends
your ability to write <I>server-side</I> applications for Microsoft's Internet Information
Server by introducing a project type named IIS Applications. Also, Visual Basic extends
and simplifies DHTML (Dynamic Hypertext Markup Language, the language used by all
Web browsers) by introducing a project type named DHTML Applications. For more about
programming with VB, VBScript, and DHTML, read Chapter 28, &quot;Creating VB Programs
for the Internet.&quot;</P>
<P>An IIS application is a Visual Basic program that resides server side as an extension
of Internet Application Server. An IIS application is called by a <I>client</I> computer
via the Internet. Although the Visual Basic IIS Application sends data back to the
calling client through HTML, the actual calculation on the server-side computer is
done by using compiled Visual Basic code. This enhancement is significant; before
this, IIS Applications were written in C++ or, if you wanted to program IIS, you
had to do it with VBScript under Active Server Pages (ASP).</P>


<BLOCKQUOTE>
	<P>
<HR>
<STRONG>VB's integrated development environment</STRONG></P>
	<P>IDE stands for integrated development environment. The Visual Basic IDE is your
	programming workbench, where you write and debug code as well as manage your applications.
	You'll learn more about the Visual Basic IDE in Chapter 3, &quot;Working in the Visual
	Basic 6 Programming Environment.&quot; 
<HR>


</BLOCKQUOTE>

<P>A DHTML application is a project that presents a Visual Basic <I>Designer</I>,
a tool that automates the writing of VB code. The DHTML Application Designer allows
you to write DHTML code within the Visual Basic <I>IDE</I>. You can find the actual
DHTML on the IIS Web server in the form of an <I>ActiveX DLL</I>. This is significant
because DHTML is somewhat different than VB code. Thus, you're leveraging the inner
workings of IIS and VB to actually translate VB into DHTML at runtime.</P>
<P>One problem with programming for the Internet is that the programming dynamic
is stateless by nature. Interaction is analogous to a telephone call. Every time
you contact a server on the Internet, it's as though you're making a telephone call
to a stranger who has no prior knowledge of the information passed in any previous
call. Therefore, working with a body of data that must be transmitted from session
to session is difficult. Visual Basic uses a new feature within Internet Explorer,
the Global Property Bag, to allow you to share information from session to session.</P>
<P>Microsoft has extended the Setup Wizard into a set of new tools to make publishing
your application to and deploying it from a Web server easier. These tools--the Web
Publishing Wizard and the Package and Deployment Wizard--come as part of your purchase
when you buy your edition of Visual Basic 6. You'll take a close look at the Web
Publishing Wizard and the Package and Deployment Wizard in Chapter 20, &quot;Deploying
Your Visual Basic Applications.&quot;</P>
<P>
<H2><A NAME="Heading15"></A>Finding Out About the New Data Capabilities</H2>
<P>Visual Basic 6 supports ActiveX Data Objects (ADO). In prior versions of VB, data
access was handled under the umbrella of Data Access Objects (DAO) and Remote Data
Objects (RDO). ADO has combined and superseded these technologies. ADO is easier
to use and has a broader scope of implementation. You can use ADO to connect to a
database on a local desktop or to a remote database server. Also, ADO allows you
to access more types of data--e-mail, for example.</P>
<P>The current ADO technology is contained within the new ADO Data control. The ADO
Data control might look the same as the familiar Data control of prior versions,
but when you look at the Property Page of the control (see Figure 2.8), you see a
significant difference. The ADO control allows you to connect to a desktop database
file or an ODBC server on a network, or you can create a new connection to another
database.</P>
<P><A HREF="javascript:popUp('02fig08.gif')"><B>FIGURE 2.8</B></A> <I>The ADO data
control combines the functionality of DAO and RDO, as well as allows you to access
non-traditional data types such as e-mail or files within the file system.</I></P>
<P>In addition to ADO, Visual Basic 6 also comes with a new set of tools and technologies
that make data access easier. The Data Environment Designer allows you to view and
manipulate data in various databases. Because data environments are objects in their
own right, you can use them as you would a Data control. You can even <I>bind</I>
other controls, such as a TextBox or Label, to a Data control.</P>
<P>Some new data controls allow you take advantage of the enhancements built into
the ADO Data control. The DataGrid allows you to view your data in a row and column
format. The DataList and DataCombo are similar to the DBList and DBCombo in earlier
editions of VB; you can use them to get a pick list of data from an ADO control in
a ListBox or ComboBox configuration. You also can use the more advanced FlexGrid
and hierarchical FlexGrid controls to get a clear, visual view of complex data. Visual
Basic also provides a new Data Setup Wizard to make deploying your larger-scale database
applications easier.</P>
<P>Visual Basic 6 enhances its reporting capabilities with the Data Report Designer
(see Figure 2.9), which lets you create, preview, and print reports in Visual Basic
as you would in Access. (If you've worked in Access 97, you'll find the Data Report
Designer familiar.) You set report controls from the new Data Reports Toolbox (VB
also has some new IDE features) onto the Data Report form. Then you invoke the Data
Report's PrintReport() method. Granted, as you go along, you'll find things to be
more complex. You can get more details on Data Environments and Data Reports in the
chapters in Part V of this book, &quot;Database Programming with Visual Basic 6.&quot;</P>
<P><A HREF="javascript:popUp('02fig09.gif')"><B>FIGURE 2.9</B></A><I> The Data Report
Designer brings the ease of Access 97 reporting to Visual Basic.</I></P>
<P>
<H2><A NAME="Heading16"></A>New Object Programming Additions</H2>
<P>Visual Basic 6 has made creating classes and ActiveX controls a much broader activity.
You can now save your custom-made class's data from session to session in a <I>Property
Bag</I>. You can also create two new types of data-aware custom classes, Data Sources
and Data Consumers. These types of data classes behave very much as the ADO Data
objects, except they allow you to have more flexibility to suit your custom needs.</P>
<P>With regard to custom ActiveX controls, you now can make lightweight ActiveX controls
in VB6. These types of controls are &quot;windowless&quot; and thus require fewer
system resources than full-fledged ActiveX controls. To determine if an ActiveX control
is indeed windowless, Visual Basic provides a new property, HasDC.</P>


<BLOCKQUOTE>
	<P>
<HR>
<STRONG>Using add-ins</STRONG></P>
	<P>An <I>add-in</I> is a Visual Basic tool that VB programmers make for other VB
	programmers. An add-in is written in VB and can run only within the Visual Basic
	IDE. The Application Wizard is an add-in, as is the Data Forms Wizard. 
<HR>


</BLOCKQUOTE>

<P>Probably the most helpful additions to Visual Basic 6 are all the new wizards
that come bundled with it. Table 2.3 briefly describes each new wizard and add-in.</P>
<P>
<H4>TABLE 2.3&nbsp;&nbsp;Visual Basic 6 Wizards and Add-Ins</H4>
<P>
<TABLE BORDER="1">
	<TR ALIGN="LEFT" VALIGN="TOP">
		<TD ALIGN="LEFT"><B><I>Wizard/Add-In</I></B></TD>
		<TD ALIGN="LEFT"><B><I>Description</I></B></TD>
	</TR>
	<TR ALIGN="LEFT" VALIGN="TOP">
		<TD ALIGN="LEFT"><I>All Editions</I></TD>
		<TD ALIGN="LEFT"></TD>
	</TR>
	<TR ALIGN="LEFT" VALIGN="TOP">
		<TD ALIGN="LEFT">Package and Deployment</TD>
		<TD ALIGN="LEFT">Helps you prepare and deploy your</TD>
	</TR>
	<TR ALIGN="LEFT" VALIGN="TOP">
		<TD ALIGN="LEFT">Wizard</TD>
		<TD ALIGN="LEFT">application for desktop or network use.</TD>
	</TR>
	<TR ALIGN="LEFT" VALIGN="TOP">
		<TD ALIGN="LEFT">Application Wizard</TD>
		<TD ALIGN="LEFT">Helps you set up a framework for your application. It automatically adds menus, toolbars,
			resource files, intrinsic ActiveX controls, and data controls.</TD>
	</TR>
	<TR ALIGN="LEFT" VALIGN="TOP">
		<TD ALIGN="LEFT">Wizard Manager</TD>
		<TD ALIGN="LEFT">Helps you organize the various wizards that you can access within your IDE.</TD>
	</TR>
	<TR ALIGN="LEFT" VALIGN="TOP">
		<TD ALIGN="LEFT"><I>Professional and Enterprise Editions</I></TD>
		<TD ALIGN="LEFT"></TD>
	</TR>
	<TR ALIGN="LEFT" VALIGN="TOP">
		<TD ALIGN="LEFT">Data Object Wizard</TD>
		<TD ALIGN="LEFT">Helps you create data objects bound to data controls and custom ActiveX controls.</TD>
	</TR>
	<TR ALIGN="LEFT" VALIGN="TOP">
		<TD ALIGN="LEFT">Class Builder Utility</TD>
		<TD ALIGN="LEFT">Helps you visually build custom classes.</TD>
	</TR>
	<TR ALIGN="LEFT" VALIGN="TOP">
		<TD ALIGN="LEFT">ToolBar Wizard</TD>
		<TD ALIGN="LEFT">Helps you visually create custom toolbars for your forms.</TD>
	</TR>
	<TR ALIGN="LEFT" VALIGN="TOP">
		<TD ALIGN="LEFT">Data Form Wizard</TD>
		<TD ALIGN="LEFT">Helps you create forms with controls that reference data in a database.</TD>
	</TR>
	<TR ALIGN="LEFT" VALIGN="TOP">
		<TD ALIGN="LEFT">Add-In Designer</TD>
		<TD ALIGN="LEFT">Helps you create custom VB add-ins.</TD>
	</TR>
	<TR ALIGN="LEFT" VALIGN="TOP">
		<TD ALIGN="LEFT">Property Page Wizard</TD>
		<TD ALIGN="LEFT">Helps you create property dialogs for the ActiveX controls you make in VB.</TD>
	</TR>
	<TR ALIGN="LEFT" VALIGN="TOP">
		<TD ALIGN="LEFT">T-SQL Debugger</TD>
		<TD ALIGN="LEFT">Helps you debug code that you write for Microsoft's SQL Server Database.</TD>
	</TR>
	<TR ALIGN="LEFT" VALIGN="TOP">
		<TD ALIGN="LEFT">API Viewer</TD>
		<TD ALIGN="LEFT">Helps you work with declares (functions), constants, and types from the Windows API.</TD>
	</TR>
	<TR ALIGN="LEFT" VALIGN="TOP">
		<TD ALIGN="LEFT">ActiveX Control</TD>
		<TD ALIGN="LEFT">Helps you make ActiveX controls.</TD>
	</TR>
	<TR ALIGN="LEFT" VALIGN="TOP">
		<TD ALIGN="LEFT"><I>Interface Wizard</I></TD>
		<TD ALIGN="LEFT"></TD>
	</TR>
</TABLE>
</P>
<H1></H1>
<CENTER>
<P>
<HR>
<A HREF="ch01.htm" tppabs="http://pbs.mcp.com/ebooks/078971633X/ch01/ch01.htm"><IMG SRC="previous.gif" tppabs="http://pbs.mcp.com/ebooks/078971633X/button/previous.gif" WIDTH="128" HEIGHT="28"
ALIGN="BOTTOM" ALT="Previous chapter" BORDER="0"></A><A HREF="ch03.htm" tppabs="http://pbs.mcp.com/ebooks/078971633X/ch03/ch03.htm"><IMG
SRC="next.gif" tppabs="http://pbs.mcp.com/ebooks/078971633X/button/next.gif" WIDTH="128" HEIGHT="28" ALIGN="BOTTOM" ALT="Next chapter"
BORDER="0"></A><A HREF="index-38.htm" tppabs="http://pbs.mcp.com/ebooks/078971633X/index.htm"><IMG SRC="contents.gif" tppabs="http://pbs.mcp.com/ebooks/078971633X/button/contents.gif" WIDTH="128"
HEIGHT="28" ALIGN="BOTTOM" ALT="Contents" BORDER="0"></A> </P>

<P>&copy; <A HREF="copy.htm" tppabs="http://pbs.mcp.com/ebooks/078971633X/copy.htm">Copyright</A>, Macmillan Computer Publishing. All
rights reserved.
</CENTER>

</BODY>

</HTML>
