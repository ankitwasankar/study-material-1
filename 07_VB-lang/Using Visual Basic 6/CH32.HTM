<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2//EN">
<HTML>

<HEAD>
<SCRIPT LANGUAGE="JavaScript">

<!--

function popUp(pPage) {
 var fullURL = document.location;
 var textURL = fullURL.toString();
 var URLlen = textURL.length;
 var lenMinusPage = textURL.lastIndexOf("/");
 lenMinusPage += 1;
 var fullPath = textURL.substring(0,lenMinusPage);
 popUpWin = window.open('','popWin','resizable=yes,scrollbars=no,width=525,height=394');
 figDoc= popUpWin.document;
 zhtm= '<HTML><HEAD><TITLE>' + pPage + '</TITLE>';
 zhtm += '</head>';
 zhtm += '<BODY bgcolor="#FFFFFF">';
 zhtm += '<IMG SRC="' + fullPath + pPage + '">';
 zhtm += '<P><B>' + pPage + '</B>';
 zhtm += '</BODY></HTML>';
 window.popUpWin.document.write(zhtm);
 window.popUpWin.document.close();
 // Johnny Jackson 4/28/98
 }

//-->
                                                                
</SCRIPT>
<link rel="stylesheet" href="ebooks.css" tppabs="http://pbs.mcp.com/includes/stylesheets/ebooks.css">

	<META HTTP-EQUIV="Content-Type" CONTENT="text/html;CHARSET=iso-8859-1">
	<TITLE>Using Visual Basic 6 -- Ch 32 -- Enhancing Your Programs Using the Advanced Data Controls</TITLE>
</HEAD>

<BODY TEXT="#000000" BGCOLOR="#FFFFFF">

<CENTER>
<H1><IMG SRC="que.gif" tppabs="http://pbs.mcp.com/ebooks/078971633X/button/que.gif" WIDTH="171" HEIGHT="66" ALIGN="BOTTOM" BORDER="0"><BR>
Using Visual Basic 6</H1>
</CENTER>
<CENTER>
<P><A HREF="ch31.htm" tppabs="http://pbs.mcp.com/ebooks/078971633X/ch31/ch31.htm"><IMG SRC="previous.gif" tppabs="http://pbs.mcp.com/ebooks/078971633X/button/previous.gif" WIDTH="128" HEIGHT="28"
ALIGN="BOTTOM" ALT="Previous chapter" BORDER="0"></A><A HREF="apa.htm" tppabs="http://pbs.mcp.com/ebooks/078971633X/apa/apa.htm"><IMG
SRC="next.gif" tppabs="http://pbs.mcp.com/ebooks/078971633X/button/next.gif" WIDTH="128" HEIGHT="28" ALIGN="BOTTOM" ALT="Next chapter"
BORDER="0"></A><A HREF="index-38.htm" tppabs="http://pbs.mcp.com/ebooks/078971633X/index.htm"><IMG SRC="contents.gif" tppabs="http://pbs.mcp.com/ebooks/078971633X/button/contents.gif" WIDTH="128"
HEIGHT="28" ALIGN="BOTTOM" ALT="Contents" BORDER="0"></A> 
<HR>

</CENTER>
<CENTER>
<H1>- 32 -<BR>
Enhancing Your Programs Using the Advanced Data Controls</H1>
</CENTER>

<UL>
	<LI><A HREF="#Heading1">What Are Advanced Data Controls?</A>
	<LI><A HREF="#Heading2">Adding and Configuring the ADO Data Control</A>
	<UL>
		<LI><A HREF="#Heading3">Using the DataGrid Control</A>
		<LI><A HREF="#Heading4">Selecting Grid Columns</A>
		<LI><A HREF="#Heading5">Cleaning Up the Form</A>
		<LI><A HREF="#Heading6">Configuring Other DataGrid Properties</A>
	</UL>
	<LI><A HREF="#Heading7">Using the DataList Control</A>
	<UL>
		<LI><A HREF="#Heading8">Configuring DataList Control Properties</A>
	</UL>
	<LI><A HREF="#Heading9">Using the DataCombo Control</A>
	<LI><A HREF="#Heading10">Working with the Data Form Wizard</A>
</UL>

<P>
<HR SIZE="4">

<CENTER>
<H1></H1>
</CENTER>
<H2><A NAME="Heading1"></A>What Are Advanced Data Controls?</H2>
<P>In Chapter 30, &quot;Database Basics and the Data Control,&quot; you learned how
to use the Data control to link automatically to a database. The Data control is
good for browsing records and allowing you to edit existing records one at a time.
With the data binding possible with the Data control, you can build a simple data
entry form quickly.</P>
<P>However, very few applications can use a data-entry form as simple as the one
you built. Most forms enable users to choose values from various lists, such as state
or country codes. In other cases, it's more helpful for users to see multiple records
at the same time, especially when dealing with financial data.</P>


<BLOCKQUOTE>
	<P>
<HR>
<STRONG>Active Data Objects (ADO)</STRONG></P>
	<P>ADO is Microsoft's long-term data access strategy. Instead of the alphabet soup
	that exists now (DAO, RDO, ODBC, and so on), ADO will replace all of them. ADO also
	can read data from sources other than databases. For instance, ADO can read data
	from Microsoft Index Server, which is used to search the contents of a Web site.
	ADO uses OLE DB and OLE DB providers to actually connect to a data source. Just like
	DAO can be used to connect to Access' Jet engine, ADO is used to connect to the OLE
	DB engine. Microsoft has already released OLE DB providers for Access/Jet, ODBC,
	and others. Visit <A target="_new" HREF="javascript:if(confirm('http://www.microsoft. com/data  \n\nThis file was not retrieved by Teleport Pro, because it is addressed on a domain or path outside the boundaries set for its Starting Address.  \n\nDo you want to open it from the server?'))window.location='http://www.microsoft. com/data'" tppabs="http://www.microsoft. com/data">http://www.microsoft.
	com/data</A> for more information on Microsoft's strategic plans for ADO. 
<HR>


</BLOCKQUOTE>

<P>For these and other reasons, Visual Basic includes three other specialized controls
that bind to data in different ways for more flexibility. This chapter will show
you how to use these three controls: DataGrid, DataList, and DataCombo. These new
controls use Active Data Objects (ADO) to communicate with the database. Visual Basic
6 makes extensive use of ADO in advanced database programming. Rather than use the
Data control that you learned about in Chapter 30, these new controls make use of
the ADO Data control. This control works similar to a Data control in that it handles
the database access. However, it's much more flexible than a standard Data control
because it uses ADO to communicate with the database instead of the older Data Access
Objects (DAO).</P>
<P>
<H2><A NAME="Heading2"></A>Adding and Configuring the ADO Data Control</H2>
<P>Before you can use these new controls, you have to create at least one ADO Data
control on the form.</P>
<P><B>Create and configure an ADO Data control</B>

<DL>
	<DT></DT>
	<DD><B>1. </B>From the <B>Project </B>menu, choose <B>Components</B>.
	<P>
	<DT></DT>
	<DD><B>2. </B>From the list, select <B>Microsoft ADO Data Control 6.0 (OLE DB)</B>
	and then click <B>OK</B> (see Figure 32.1). The ADO Data control will now be shown
	in your Toolbox (see Figure 32.2).
</DL>

<P><A HREF="javascript:popUp('32fig01.gif')"><B>FIGURE 32.1</B></A> <I>Add the ADO
Data control to your Toolbox by selecting it from this dialog.</I></P>
<P><A HREF="javascript:popUp('32fig02.gif')"><B>FIGURE 32.2</B></A> <I>The ADO Data
control is now part of your Toolbox.</I></P>


<BLOCKQUOTE>
	<P>
<HR>
<STRONG>Sample databases</STRONG></P>
	<P>The examples in this chapter all use several sample Access databases included
	with Visual Basic. These databases are located in Visual Basic's installation directory.
	You can modify these databases to your heart's content. Before you do, however, make
	a copy of them--you may want to reuse the database later. 
<HR>


</BLOCKQUOTE>


<DL>
	<DT></DT>
	<DD><B>3. </B>Double-click the ADO Data control to add one to your form. Set the
	control's name to adcCustomers, because it will be showing customer information from
	the sample database.
	<P>
	<DT></DT>
	<DD><B>4. </B>With the control added to the form, it's time to configure it to talk
	to the database. Click the ellipsis button in the ConnectionString property and then
	click the <B>Build</B> button on the Property Pages dialog (see Figure 32.3).
	<P>
</DL>

<P><A HREF="javascript:popUp('32fig03.gif')"><B>FIGURE 32.3</B></A> <I>The Property
Pages dialog lets you specify how to connect to the data source.</I></P>

<DL>
	<DD><B>5. </B>Select an OLE DB provider to use. Because the sample database is an
	Access database, select the <B>Microsoft</B> <B>Jet 3.51 OLE DB</B> <B>Provider</B>
	to connect to it (see Figure 32.4). Click <B>Next </B>to continue.
	<P>
</DL>

<P><A HREF="javascript:popUp('32fig04.gif')"><B>FIGURE 32.4</B></A> <I>The ADO Data
control can connect to a data source by using any of these OLE DB providers. Use
the Jet provider for any Access database.</I></P>

<DL>
	<DT><I></I></DT>
	<DD><B>6. </B>Select the database file to use with this connection. Click the ellipsis
	button next to the database name text box to select the Nwind.mdb file in the main
	VB directory. The database filename will be filled in the Database Name field on
	the dialog (see Figure 32.5).
	<P>
</DL>

<P><A HREF="javascript:popUp('32fig05.gif')"><B>FIGURE 32.5</B></A> <I>After you
select a database, its filename will appear in this dialog.</I></P>

<DL>
	<DD>Notice that a user ID has been entered in this dialog. That user ID should be
	left as is for now. Every Access database has a default user ID of Admin created.
	You need to specify this when you're building the connection.
	<P>
	<DT></DT>
	<DD><B>7. </B>Click the <B>Test Connection</B> button to make sure that the connection
	will work. If you get a good result (see Figure 32.6), click <B>OK</B> to continue.
	If not, follow the steps again to make sure that all the information is filled in
	properly.
	<P>
</DL>

<P><A HREF="javascript:popUp('32fig06.gif')"><B>FIGURE 32.6</B></A> <I>If you see
this message, you correctly configured your ADO Data control.</I></P>

<DL>
	<DD><B>8. </B>With the connection to the database working, you can specify which
	table to load. Click the Custom property's ellipsis button and then select the <B>RecordSource</B>
	tab (see Figure 32.7). From the <B>Command Type</B> drop-down list, select <B>2 -
	adCmdTable</B>. Then, from the <B>Table or Stored Procedure Name</B> drop-down list,
	select <B>Customers</B>. Click <B>OK</B>.
	<P>
</DL>

<P>That's all you have to do to configure the ADO Data control. It may seem like
a lot of steps, but after a few times it will become second nature to you.</P>
<P><A HREF="javascript:popUp('32fig07.gif')"><B>FIGURE 32.7</B></A> <I>The <B>RecordSource
</B>tab lets you specify the data to use in your ADO Data control.</I></P>
<P>
<H3><A NAME="Heading3"></A>Using the DataGrid Control</H3>
<P>The first control you'll be using is the DataGrid, which lets users see and edit
multiple rows of data simultaneously. The DataGrid is also useful for rapid entry
of large amounts of data. To use this control, you have to add it to the Visual Basic
Toolbox.</P>
<P><B>Add the DataGrid control</B>

<DL>
	<DT></DT>
	<DD><B>1. </B>From the <B>Project </B>menu, choose <B>Components</B>.
	<P>
	<DT></DT>
	<DD><B>2. </B>From the list, select <B>Microsoft DataGrid Control 6.0 </B>and then
	click <B>OK</B>. The DataGrid control will now be shown in your Toolbox window.
	<P>
</DL>

<P>You can now add a DataGrid to your form. Double-click the DataGrid icon in your
Toolbox. Enlarge the control so that it fills most of the form.</P>
<P>If you were to run your program now, the DataGrid would be completely empty because
you haven't linked it to the ADO Data control yet.</P>
<P><B>Linking a DataGrid to the ADO Data control</B>

<DL>
	<DT></DT>
	<DD><B>1. </B>Click the DataGrid control on your form. Set its Name property to dgrdCustomers
	because it will be showing customer information.
	<P>
	<DT></DT>
	<DD><B>2. </B>From the DataSource<B> </B>property's drop-down list, select adcCustomers,
	which is the ADO Data control you created earlier.
	<P>
</DL>

<P>After you specify the DataSource for the DataGrid, the DataGrid can configure
itself automatically with the appropriate number of columns and rows. To see the
form in action, choose <B>Start </B>from the <B>Run</B> menu . The window will show
data from the Customers table (see Figure 32.8).</P>
<P><A HREF="javascript:popUp('32fig10.gif')"><B>FIGURE 32.8</B></A> <I>The DataGrid
control can automatically configure itself to show the data from the source you specify.</I></P>
<P>Because the default settings aren't always the best, the DataGrid is fully configurable
and lets you specify which columns are shown, the format, and the color of each.
You also can split the DataGrid into multiple parts that each scroll independently
of the other parts. This functionality is common to Microsoft Excel and other spreadsheets.</P>
<P>
<H3><A NAME="Heading4"></A>Selecting Grid Columns</H3>
<P>Because database tables can grow quite large, you won't always want to show users
every single column in the table. At other times, you will want to show every column
so that users can add more records. This section will show you how to specify the
columns to show in a DataGrid control. Before you start, however, you have to decide
which columns to show in the DataGrid. For this example, the DataGrid will show the
Company Name, the Contact Name, the Phone Number, and the Country.</P>
<P><B>Specify columns in a DataGrid</B>

<DL>
	<DT></DT>
	<DD><B>1. </B>Right-click the DataGrid and select <B>Retrieve Fields </B>from the
	pop-up menu. Answer <B>Yes</B> when VB asks if you want to replace the existing grid
	layout. All the fields from the selected RecordSource (in this case, the Customers
	table) will be loaded into the DataGrid control (see Figure 32.9).
	<P>
</DL>

<P><A HREF="javascript:popUp('32fig11.gif')"><B>FIGURE 32.9</B></A> <I>The DataGrid
control loads all the fields from the table so that you can select the ones you want
to see.</I></P>

<DL>
	<DD><B>2. </B>Right-click the DataGrid and select <B>Edit </B>from the pop-up menu.
	You won't see any changes to the control when you choose Edit; however, you now can
	click individual columns and edit them.
	<P>
</DL>

<P><A HREF="javascript:popUp('32fig12.gif')"><B>FIGURE 32.10</B></A> <I>When the
DataGrid is in Edit mode, you can add and remove columns visually.</I></P>

<DL>
	<DT><I></I></DT>
	<DD><B>3. </B>To delete columns from this list, right-click the <B>CustomerID </B>field
	and choose <B>Delete</B>. The CustomerID field will no longer be shown (see Figure
	32.10).
	<P>
	<DT></DT>
	<DD><B>4. </B>Delete the ContactTitle, Address, City, Region, PostalCode, and Fax
	columns by using the same technique used in step 3.
	<P>
	<DT></DT>
	<DD><B>5. </B>The control won't quite let you rearrange the columns by using drag-and-drop.
	If, for instance, you wanted to swap the ContactName and CompanyName columns, you
	would first cut the ContactName column and then right-click CompanyName and select
	Paste. The DataGrid will keep all the settings you've made for a column. Feel free
	to rearrange the columns as you see fit.
	<P>
	<DT></DT>
	<DD><B>6. </B>When showing the data in this DataGrid, the column headers don't necessarily
	have to be the same as the field names. For instance, <B>CompanyName</B> should be
	written <B>Company</B>
	<P>
	<DT><B>Name</B>. To make this change, right-click a column and select <B>Properties</B>.
	On the <B>Columns</B> page, enter the new name for the column in the <B>Caption</B>
	text box (see Figure 32.11).</DT>
	<P>
</DL>

<P><A HREF="javascript:popUp('32fig13.gif')"><B>FIGURE 32.11</B></A> <I>The Caption
property on the <B>Columns </B>page controls what will be shown in each column's
header.</I></P>

<DL>
	<DD><B>7. </B>Repeat step 6 for each column header whose caption you want to change.
	You can pick each column without leaving the Properties window.
	<P>
</DL>

<H3><A NAME="Heading5"></A>Cleaning Up the Form</H3>
<P>You can do some fine-tuning to this form to make it look more finished. First,
the ADO Data control doesn't need to be visible. It's used automatically by the DataGrid,
and it isn't necessary to allow users to see it. Set the ADO Data control's Visible<B>
</B>property to False.</P>
<P>You also can cause the DataGrid to always fill the form. First, set the Align
property to 1 - vbAlignTop to cause the DataGrid to sit at the top of the form and
fill the form left to right. Then add the following code to force the DataGrid to
fill top to bottom:</P>
<P>
<PRE>Private Sub Form_Resize()
   dgrdCustomers.Height = Me.ScaleHeight
End Sub
</PRE>
<P><A HREF="javascript:popUp('32fig14.gif')"><B>FIGURE 32.12</B></A> <I>Your DataGrid
is complete and even includes a few professional touches.</I></P>
<P>A final polish is to add a title to your form, such as Customer Viewer, through
the form's Caption property. When you're done, your form will have a more professional
look (see Figure 32.12).</P>
<P>
<H3><A NAME="Heading6"></A>Configuring Other DataGrid Properties</H3>
<P>You can configure quite a few other properties on the DataGrid. As they're all
fairly easy to use, Table 32.1 explains the purpose of each property.</P>


<BLOCKQUOTE>
	<P>
<HR>
<STRONG>Be careful with AllowDelete</STRONG></P>
	<P>If your record is linked to other tables in any type of relationship, deleting
	the record won't be allowed and the resulting error message could confuse your users.
	Deletions can normally take place only if all other related records have been removed.
	
<HR>


</BLOCKQUOTE>

<H4>TABLE 32.1&#160;&#160;DataGrid Properties</H4>
<P>
<TABLE BORDER="1">
	<TR ALIGN="LEFT" VALIGN="TOP">
		<TD ALIGN="LEFT"><B><I>Property</I></B></TD>
		<TD ALIGN="LEFT"><B><I>Explanation</I></B></TD>
	</TR>
	<TR ALIGN="LEFT" VALIGN="TOP">
		<TD ALIGN="LEFT">Align</TD>
		<TD ALIGN="LEFT">Specifies whether the DataGrid should be aligned with the top, left, right, or bottom
			of the form.</TD>
	</TR>
	<TR ALIGN="LEFT" VALIGN="TOP">
		<TD ALIGN="LEFT">AllowAddNew</TD>
		<TD ALIGN="LEFT">If set to True, new records can be added at the bottom of the DataGrid.</TD>
	</TR>
	<TR ALIGN="LEFT" VALIGN="TOP">
		<TD ALIGN="LEFT">AllowArrows</TD>
		<TD ALIGN="LEFT">If set to True, navigation can be performed by using the arrow keys.</TD>
	</TR>
	<TR ALIGN="LEFT" VALIGN="TOP">
		<TD ALIGN="LEFT">AllowDelete</TD>
		<TD ALIGN="LEFT">If set to True, rows can be deleted from the DataGrid by pressing the Delete key.</TD>
	</TR>
	<TR ALIGN="LEFT" VALIGN="TOP">
		<TD ALIGN="LEFT">AllowUpdate</TD>
		<TD ALIGN="LEFT">If set to True, rows can be edited and have their changes saved automatically.</TD>
	</TR>
	<TR ALIGN="LEFT" VALIGN="TOP">
		<TD ALIGN="LEFT">Property</TD>
		<TD ALIGN="LEFT">Explanation</TD>
	</TR>
	<TR ALIGN="LEFT" VALIGN="TOP">
		<TD ALIGN="LEFT">CausesValidation</TD>
		<TD ALIGN="LEFT">If set to True, the Validate event will trigger when focus shifts to another control.</TD>
	</TR>
	<TR ALIGN="LEFT" VALIGN="TOP">
		<TD ALIGN="LEFT">ColumnHeaders</TD>
		<TD ALIGN="LEFT">Turns column headers on or off.</TD>
	</TR>
	<TR ALIGN="LEFT" VALIGN="TOP">
		<TD ALIGN="LEFT">HeadLines</TD>
		<TD ALIGN="LEFT">Specifies the number of vertical lines for the column headers.</TD>
	</TR>
	<TR ALIGN="LEFT" VALIGN="TOP">
		<TD ALIGN="LEFT">RowDividerStyle</TD>
		<TD ALIGN="LEFT">Supplies various options for the format of the row dividers.</TD>
	</TR>
	<TR ALIGN="LEFT" VALIGN="TOP">
		<TD ALIGN="LEFT">TabAcrossSplits</TD>
		<TD ALIGN="LEFT">Performs the Tab key shift between the split portions of the DataGrid</TD>
	</TR>
	<TR ALIGN="LEFT" VALIGN="TOP">
		<TD ALIGN="LEFT">TabAction</TD>
		<TD ALIGN="LEFT">Specifies the response to a Tab keypress</TD>
	</TR>
	<TR ALIGN="LEFT" VALIGN="TOP">
		<TD ALIGN="LEFT">WrapCellPointer</TD>
		<TD ALIGN="LEFT">Specifies whether the cursor should shift to the next row and first column when reaching
			the end of a row.</TD>
	</TR>
</TABLE>



<BLOCKQUOTE>
	<P>
<HR>
<STRONG>Editing rows in a grid</STRONG></P>
	<P>When you're designing your application and think about using a grid, you can edit
	data in a grid only if you store the data in a single table. If you need to put data
	into more than one table for a single record, you must use a different type of form.
	For example, an order will have both information about the order and information
	about the items on the order. You couldn't edit an order in a single grid because
	the data would be stored in at least two different tables. However, the DataGrid
	can show lists of items, such as shippers or state codes. If you just need to view
	data from other tables, the DataGrid may still be an option for you. 
<HR>


</BLOCKQUOTE>

<H2><A NAME="Heading7"></A>Using the DataList Control</H2>
<P>The DataList control is much simpler than the DataGrid control. It's used to show
a single column list of entries from a database table. Because it's data-bound, there's
no memory limit as to how many items you can show. However, the more you add, the
harder it is for users to find a particular item. Like the DataGrid, the DataList
also uses an ADO Data control.</P>
<P><B>Create and use a DataList control</B>

<DL>
	<DT></DT>
	<DD><B>1. </B>On a new form, add a new ADO Data control that accesses the Customers
	table in the Nwind.mdb database, as explained earlier in this chapter.
	<P>
	<DT></DT>
	<DD><B>2. </B>Add the DataList control to your Toolbox window by choosing <B>Components</B>
	from the <B>Project </B>menu.
	<P>
	<DT></DT>
	<DD><B>3. </B>From the list, select <B>Microsoft DataList Controls 6.0 </B>and then
	click <B>OK</B>.
	<P>
	<DT></DT>
	<DD><B>4. </B>The DataList control will now be shown in your Toolbox window. Double-click
	it to add it to your form with the ADO Data Control.
	<P>
	<DT></DT>
	<DD><B>5. </B>Name the DataList control dlstCustomers. This example will list the
	customer names in the DataList control so you can see the differences in presentation.
	<P>
	<DT></DT>
	<DD><B>6. </B>Set the RowSource property to adcCustomers. This property specifies
	the data source that will provide the list of data to show. To specify which field
	to show, set the ListField<B> </B>property to CompanyName.
	<P>
</DL>

<P><A HREF="javascript:popUp('32fig17.gif')"><B>FIGURE 32.13</B></A> <I>The DataList
control shows a single column of data from the data source.</I></P>
<P>Those are the only properties you have to set to make this form work. Make sure
that the DataList is large enough for you to see the contents, and then choose <B>Start</B>
from the <B>Run</B> menu . The companies will be listed in the DataList control (see
Figure 32.13).</P>
<P>You can also apply the same cleanup techniques to this form. To automatically
resize the DataList to fill the whole form, simply add the following code to the
form:</P>
<P>
<PRE>Private Sub Form_Resize()
   dlstCustomers.Height = Me.ScaleHeight
   dlstCustomers.Width = Me.ScaleWidth
End Sub
</PRE>
<H3><A NAME="Heading8"></A>Configuring DataList Control Properties</H3>
<P>As mentioned earlier, the DataList control has far fewer properties than the DataGrid.
However, it does have some interesting features that the DataGrid doesn't, as listed
in Table 32.2.</P>
<P>
<H4>TABLE 32.2&#160;&#160;Selected DataList Properties</H4>
<P>
<TABLE BORDER="1">
	<TR ALIGN="LEFT" VALIGN="TOP">
		<TD ALIGN="LEFT"><B><I>Property</I></B></TD>
		<TD ALIGN="LEFT"><B><I>Explanation</I></B></TD>
	</TR>
	<TR ALIGN="LEFT" VALIGN="TOP">
		<TD ALIGN="LEFT">CausesValidation</TD>
		<TD ALIGN="LEFT">If set to True, the Validate event will trigger when focus shifts to another control.</TD>
	</TR>
	<TR ALIGN="LEFT" VALIGN="TOP">
		<TD ALIGN="LEFT">IntegralHeight</TD>
		<TD ALIGN="LEFT">Specifies whether the DataList control will show portions of items if the control
			isn't large enough.</TD>
	</TR>
	<TR ALIGN="LEFT" VALIGN="TOP">
		<TD ALIGN="LEFT">MatchEntry</TD>
		<TD ALIGN="LEFT">As users type, the DataList jumps based on the characters entered. This property
			determines how that matching works.</TD>
	</TR>
</TABLE>

<H2><A NAME="Heading9"></A>Using the DataCombo Control</H2>
<P>The DataCombo control is nearly identical to the DataList except in its appearance.
Rather than take up a lot of vertical space, the DataCombo's list portion can drop
down as necessary. This is especially helpful in cases where the form needs to stay
small. The DataCombo, like a standard ComboBox, should be used for small numbers
(less than 100) of items.</P>
<P><B>Create and use a DataCombo control</B>

<DL>
	<DT></DT>
	<DD><B>1. </B>On a new form, add a new ADO Data control that accesses the Customers
	table in the Nwind.mdb database, as explained earlier in this chapter. Because the
	DataList and DataCombo controls are packaged together, the DataCombo control is already
	in your Toolbox.
	<P>
	<DT></DT>
	<DD><B>2. </B>Double-click the DataCombo control. Name it dcboShippers because it
	will be used to hold the names of available shippers.
	<P>
	<DT></DT>
	<DD><B>3. </B>Add an ADO Data control that accesses the Shippers table in the Nwind.mdb
	table, as explained earlier in the chapter. Name the control adcShippers<B>.</B>
	<P>
</DL>

<P><A HREF="javascript:popUp('32fig19.gif')"><B>FIGURE 32.14</B></A> <I>The DataCombo
control loads the CompanyName field from the rows in the Shippers table.</I></P>

<DL>
	<DT><I></I></DT>
	<DD><B>4. </B>Set the DataCombo's RowSource<B> </B>property to adcShippers and ListField<B>
	</B>property to CompanyName, like you did with the DataList control.
	<P>
</DL>

<P>When you run your program now, you'll see the available shippers listed in the
DataCombo control (see Figure 32.14).</P>
<P>The configurable properties for the DataCombo are basically the same as the ones
available for the DataList control. One difference is the Style property, which functions
in a similar fashion to the ComboBox's Style property. The DataCombo can be read-only
or editable, which gives users a chance to add their own record to the available
list. Because the DataCombo is used most often for selecting values from a set list,
you normally want to leave the Style property at 2 - Dropdown List.</P>
<P>
<H2><A NAME="Heading10"></A>Working with the Data Form Wizard</H2>
<P>If all the preceding material looks a little daunting, don't fear because Visual
Basic 6 comes with an all-new Data Form Wizard that can create most of these controls
and data entry forms for you. In this section, you'll learn a little bit about what
types of forms the Data Form Wizard can build and how you can make the most of this
helpful tool.</P>
<P><A HREF="javascript:popUp('32fig21.gif')"><B>FIGURE 32.15</B></A> <I>Select the
type of form the wizard should build.</I></P>
<P>After selecting the database you want to use in the Data Form Wizard, you'll be
presented with several options for what you want your form to do (see Figure 32.15).</P>
<P>As you select each type of form, the graphic in the upper-left corner will show
a sample of what the form will look like. The Binding Type section shows how the
form will work:</P>

<UL>
	<LI><B>ADO Data Control</B> uses the techniques you just learned in this chapter.
	<P>
	<LI><B>ADO Code</B> doesn't use any ADO Data controls. Instead, the wizard generates
	code that operates the controls. If you want examples of how ADO code works, let
	the wizard generate a sample for you.
	<P>
	<LI><B>Class</B> creates a class module that provides the data-access functionality.
</UL>

<P>Feel free to try out all three methods with any of the form types and see what
you get. In most cases, you'll have to adjust the output a bit to get what you want,
but the Data Form Wizard is certainly a major timesaver for these types of forms.</P>
<P>Later in the process of answering the wizard's questions, you'll select a table
or query to use, pick the fields for the form, select a sorting order, and even select
which actions are allowed for the form. The wizard can automatically build code to
handle adding new records, editing existing ones, deleting records, and refreshing
the existing data.</P>
<H1></H1>
<CENTER>
<P>
<HR>
<A HREF="ch31.htm" tppabs="http://pbs.mcp.com/ebooks/078971633X/ch31/ch31.htm"><IMG SRC="previous.gif" tppabs="http://pbs.mcp.com/ebooks/078971633X/button/previous.gif" WIDTH="128" HEIGHT="28"
ALIGN="BOTTOM" ALT="Previous chapter" BORDER="0"></A><A HREF="apa.htm" tppabs="http://pbs.mcp.com/ebooks/078971633X/apa/apa.htm"><IMG
SRC="next.gif" tppabs="http://pbs.mcp.com/ebooks/078971633X/button/next.gif" WIDTH="128" HEIGHT="28" ALIGN="BOTTOM" ALT="Next chapter"
BORDER="0"></A><A HREF="index-38.htm" tppabs="http://pbs.mcp.com/ebooks/078971633X/index.htm"><IMG SRC="contents.gif" tppabs="http://pbs.mcp.com/ebooks/078971633X/button/contents.gif" WIDTH="128"
HEIGHT="28" ALIGN="BOTTOM" ALT="Contents" BORDER="0"></A></P>

<P>&#169; <A HREF="copy.htm" tppabs="http://pbs.mcp.com/ebooks/078971633X/copy.htm">Copyright</A>, Macmillan Computer Publishing. All
rights reserved.
</CENTER>


</BODY>

</HTML>
