<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2//EN">
<HTML>

<HEAD>
	<META HTTP-EQUIV="Content-Type" CONTENT="text/html;CHARSET=iso-8859-1">
<SCRIPT LANGUAGE="JavaScript">

<!--

function popUp(pPage) {
 var fullURL = document.location;
 var textURL = fullURL.toString();
 var URLlen = textURL.length;
 var lenMinusPage = textURL.lastIndexOf("/");
 lenMinusPage += 1;
 var fullPath = textURL.substring(0,lenMinusPage);
 popUpWin = window.open('','popWin','resizable=yes,scrollbars=no,width=525,height=394');
 figDoc= popUpWin.document;
 zhtm= '<HTML><HEAD><TITLE>' + pPage + '</TITLE>';
 zhtm += '</head>';
 zhtm += '<BODY bgcolor="#FFFFFF">';
 zhtm += '<IMG SRC="' + fullPath + pPage + '">';
 zhtm += '<P><B>' + pPage + '</B>';
 zhtm += '</BODY></HTML>';
 window.popUpWin.document.write(zhtm);
 window.popUpWin.document.close();
 // Johnny Jackson 4/28/98
 }

//-->
                                                                
</SCRIPT>
<link rel="stylesheet" href="ebooks.css" tppabs="http://pbs.mcp.com/includes/stylesheets/ebooks.css">

	<META NAME="GENERATOR" Content="Symantec Visual Page Mac 1.1.1">
	<TITLE>Using Visual Basic 6 -- Ch 3 -- Working in the Visual Basic 6 Programming Environment</TITLE>
</HEAD>

<BODY TEXT="#000000" BGCOLOR="#FFFFFF">

<H1 ALIGN="CENTER"><IMG SRC="que.gif" tppabs="http://pbs.mcp.com/ebooks/078971633X/button/que.gif" WIDTH="171" HEIGHT="66" ALIGN="BOTTOM"
BORDER="0"><BR>
Using Visual Basic 6</H1>
<CENTER>
<P><A HREF="ch02.htm" tppabs="http://pbs.mcp.com/ebooks/078971633X/ch02/ch02.htm"><IMG SRC="previous.gif" tppabs="http://pbs.mcp.com/ebooks/078971633X/button/previous.gif" WIDTH="128" HEIGHT="28"
ALIGN="BOTTOM" ALT="Previous chapter" BORDER="0"></A><A HREF="ch04.htm" tppabs="http://pbs.mcp.com/ebooks/078971633X/ch04/ch04.htm"><IMG
SRC="next.gif" tppabs="http://pbs.mcp.com/ebooks/078971633X/button/next.gif" WIDTH="128" HEIGHT="28" ALIGN="BOTTOM" ALT="Next chapter"
BORDER="0"></A><A HREF="index-38.htm" tppabs="http://pbs.mcp.com/ebooks/078971633X/index.htm"><IMG SRC="contents.gif" tppabs="http://pbs.mcp.com/ebooks/078971633X/button/contents.gif" WIDTH="128"
HEIGHT="28" ALIGN="BOTTOM" ALT="Contents" BORDER="0"></A> 
<HR>

</CENTER>
<H1 ALIGN="CENTER">- 3 -<BR>
Working in the Visual Basic 6 Programming Environment</H1>

<UL>
	<LI><A HREF="#Heading1">Understanding the Parts of the IDE</A>
	<LI><A HREF="#Heading2">Adding and Removing Toolbars in the Visual Basic IDE</A>
	<UL>
		<LI><A HREF="#Heading3">Using the Debug Toolbar</A>
		<LI><A HREF="#Heading4">Using the Edit Toolbar</A>
		<LI><A HREF="#Heading5">Using the Form Editor Toolbar</A>
		<LI><A HREF="#Heading6">Using the Standard Toolbar</A>
	</UL>
	<LI><A HREF="#Heading7">Adding Controls with the ToolBox</A>
	<LI><A HREF="#Heading8">Navigating Through the Form Window and Code Window</A>
	<LI><A HREF="#Heading9">Managing Applications with the Project Explorer</A>
	<LI><A HREF="#Heading10">Controlling Settings with the Properties Window</A>
	<LI><A HREF="#Heading11">Setting Form Position with the Form Layout Window</A>
	<LI><A HREF="#Heading12">Viewing the IDE</A>
</UL>

<P>
<HR SIZE="4">

<H1 ALIGN="CENTER"></H1>
<H2><A NAME="Heading1"></A>Understanding the Parts of the IDE</H2>


<BLOCKQUOTE>
	<P>
<HR>
<STRONG>Defining IDE</STRONG></P>
	<P>IDE is an acronym for Integrated Development Environment. The IDE is the workbench
	on which you make your programs in Visual Basic. 
<HR>


</BLOCKQUOTE>

<P>The Visual Basic IDE is a collection of menus, toolbars, and windows that make
up your programming workbench (see Figure 3.1). Each part of the IDE has features
that affect different aspects of your programming activity. The menu bar lets you
direct the overall activity and management of your programming. The toolbar enables
you to access much of the menu bar's functionality through various toolbar buttons.
Forms--the basic building blocks of Visual Basic programs--are presented in a Form
window. You use the ToolBox to add controls to the forms of your project. The Project
Explorer displays the projects on which you're working, as well as the different
parts of each of those projects. You browse and set a control, form, and module's
properties within the Properties window. Finally, you position and view a form or
forms onscreen within the Form Layout window.</P>
<P><A HREF="javascript:popUp('03fig01.gif')"><B>FIGURE 3.1</B></A> <I>The VB IDE
is the programmer's workbench.</I></P>
<P>
<H2><A NAME="Heading2"></A>Adding and Removing Toolbars in the Visual Basic IDE</H2>
<P>Toolbars are collections of small iconic buttons that reside in a bar underneath
the menu bar. These buttons offer access to the most commonly used functions that
you have in the Visual Basic menu structure. Toolbars are useful because rather than
have to negotiate menus and submenus to do what you want, you click a specific button
in the toolbar to call a specific functionality in the Visual Basic IDE.</P>


<BLOCKQUOTE>
	<P>
<HR>
<STRONG>ToolTips</STRONG></P>
	<P>ToolTips are little windows that appear when you hold the mouse pointer over a
	control or toolbar button for a few seconds. Inside these windows is some text that
	tells you what the control or toolbar button is about. 
<HR>


</BLOCKQUOTE>

<P>Toolbars usually reside under the menu and can be grouped into a single bar. Also,
you can drag a toolbar onto the IDE's Code and Form windows to have it &quot;float&quot;
for more convenient access.</P>
<P><B>Add or remove a toolbar to or from the IDE</B>

<DL>
	<DT></DT>
	<DD><B>1. </B>Right-click anywhere on the menu bar, or choose <B>Toolbars</B> from
	the <B>View</B> menu. The toolbar pop-up menu appears (see Figure 3.2).
	<P>
</DL>

<P><A HREF="javascript:popUp('03fig02.gif')"><B>FIGURE 3.2</B></A> <I>You select
a predefined toolbar type by right-clicking the VB toolbar.</I></P>

<DL>
	<DT><I></I></DT>
	<DD><B>2. </B>Select the type of standard toolbar that you want from the pop-up menu.
	If a check is to the left of a toolbar type, that toolbar is already visible.
	<P>
</DL>

<H3><A NAME="Heading3"></A>Using the Debug Toolbar</H3>
<P>You use the Debug toolbar (see Figure 3.3) to test your program and resolve errors
that might occur. When you debug a program, you do things such as run the code a
line at a time, examine the values of variables, and stop the code at certain critical
points or under certain conditions. For an in-depth discussion of debugging, see
Chapter 21, &quot;Debugging Your Applications.&quot;</P>
<P>
<H3><A NAME="Heading4"></A>Using the Edit Toolbar</H3>
<P>You use the Edit toolbar (see Figure 3.4) when you're working with code in a Code
window. The features of the Edit toolbar are similar to those of the <B>Edit</B>
menu. You can <B>Cut</B> and <B>Paste</B> text. You can manipulate the layout of
your code and do text selection, searches, and replacement. Also, you can use automatic
coding features such as Quick Info.</P>
<P>An interesting VB IDE feature that the Edit toolbar uses is the Complete Word
feature (also trademarked by Microsoft as Intelli-sense). This feature automatically
completes a keyword for you. For example, if you were to type Ms into a code window
and then invoke the Complete Word feature, Visual Basic would complete the word as
MsgBox, an intrinsic Visual Basic function that displays a Windows message box. The
Complete Word feature is very useful for avoiding syntax errors due to misspelling.
For more information about the specifics of debugging, see Chapter 21.</P>
<P><A HREF="javascript:popUp('03fig03.gif')"><B>FIGURE 3.3</B></A> <I>The Debug toolbar
enables you to access the debugging functions of the Visual Basic IDE.</I></P>
<P><A HREF="javascript:popUp('03fig04.gif')"><B>FIGURE 3.4</B></A> <I>You can access
the extended <U>E</U>dit menu and some <U>D</U>ebug menu functions from the Edit
toolbar.</I></P>
<P>
<H3><A NAME="Heading5"></A>Using the Form Editor Toolbar</H3>
<P>You use the Form Editor toolbar (see Figure 3.5) to size, move, and align controls
on a form. The Form Editor toolbar has the same set of features as the <B>Format</B>
menu.</P>
<P><A HREF="javascript:popUp('03fig05.gif')"><B>FIGURE 3.5</B></A> <I>You align and
size multiple controls on a form with the Form Editor toolbar.</I></P>
<P>Notice the small downward-facing arrowheads to the right of the Align, Center,
and Make toolbar buttons. These arrowheads indicate that a drop-down menu will appear
when you select that toolbar button.</P>
<P>Working with forms and controls requires that sometimes you have to work with
the ZOrder property of a control. ZOrder determines which control has the &quot;right&quot;
to supersede the position of another control. Sometimes you might want one control
to appear over another--an OptionButton over a PictureBox, for instance. You can
accomplish this by dragging the OptionButton over the PictureBox. Alternatively,
in code, you can set the value of the OptionButton's ZOrder property to 0. Then,
no matter where you place the control at design time, the OptionButton will always
be on top. When you place one control over another on a form, you're affecting each
control's ZOrder property. The Z order determines the &quot;top most-ness&quot; of
a control. Controls with a ZOrder value of 0 are always on top; however, if two controls
each have a ZOrder value of 0, they nullify each other.</P>
<P>
<H3><A NAME="Heading6"></A>Using the Standard Toolbar</H3>
<P>The standard toolbar (see Figure 3.6) is the central toolbar in the Visual Basic
IDE. The standard toolbar offers many features found in the <B>File</B>, <B>Project</B>,
<B>Debug</B>, and <B>Run</B> menus.</P>
<P><A HREF="javascript:popUp('03fig06.gif')"><B>FIGURE 3.6</B></A> <I>The standard
toolbar gives you fast access to often-used functionality and information.</I></P>
<P>
<H2><A NAME="Heading7"></A>Adding Controls with the ToolBox</H2>
<P>Controls are the building blocks with which you assemble your Visual Basic program.
The ToolBox is a palette of controls, and you build your user interface by selecting
controls from the ToolBox and placing them on your forms (see Figure 3.7).</P>
<P>Some controls are built into Visual Basic and can't be removed from the ToolBox;
these controls reside within Visual Basic itself. These controls are known as <I>intrinsic
controls</I>. Others live outside Visual Basic and reside in files that end with
the extension .ocx. These controls can be added and removed from the ToolBox.</P>
<P>A full discussion of the ToolBox, intrinsic controls, and ActiveX controls takes
place in Chapter 4, &quot;Using the Intrinsic Controls.&quot;</P>
<P><A HREF="javascript:popUp('03fig07.gif')"><B>FIGURE 3.7</B></A> <I>This ToolBox
shows both intrinsic controls and the extra ActiveX controls that ship with Visual
Basic 6.</I></P>
<P>
<H2><A NAME="Heading8"></A>Navigating Through the Form Window and Code Window</H2>
<P>Just as controls are the building blocks that you use to assemble your Visual
Basic program, a Visual Basic form is the foundation on which you build with those
blocks. Forms reside in the Form Designer window (see Figure 3.8). You work in the
Form Designer window to add controls to your form.</P>
<P><A HREF="javascript:popUp('03fig08.gif')"><B>FIGURE 3.8</B></A> <I>The Form Designer
window is where you create forms for your Visual Basic programs.</I></P>
<P>For each Form Designer window, you can also open a Code window. Code windows are
where you work with the Visual Basic code that you write &quot;behind&quot; your
form (refer to Figure 3.8). You open a code window by double-clicking a form or a
control on the form. You also can open a code window by choosing <B>Code</B> from
the <B>View</B> menu. For how to access Code windows, review the process described
for the application that you made in Chapter 1, &quot;Building Your First Application.&quot;</P>
<P>
<H2><A NAME="Heading9"></A>Managing Applications with the Project Explorer</H2>
<P>The Project Explorer in Visual Basic 6 helps you manage and navigate multiple
projects. Visual Basic enables you to organize multiple projects into groups called
<I>project groups</I>. You can save the collection of projects in your Visual Basic
session into a project group file. Project Group files end with the extension .vbg.</P>
<P>The Project Explorer is a hierarchical tree-branch structure. Projects are at
the top of the tree, and the project parts (forms, modules, and so on) descend from
the tree. If you want to work on a particular part, you double-click the part to
display it. If you want to see the part in a particular view--say, a form in a Code
window--you select the form by clicking it once. Then click the View Code icon at
the top of the Project Explorer window (see Figure 3.9).</P>
<P><A HREF="javascript:popUp('03fig09.gif')"><B>FIGURE 3.9</B></A> <I>You can work
with multiple projects in the Project Explorer window.</I></P>
<P>As you become a more adept programmer and the scope and size of your programs
grow to include multiple projects, you'll find the Project Explorer to be an extremely
useful tool for doing large-scale programming. For example, if want to add a form
to your project, you can do so by using the Project Explorer.</P>
<P><B>Add a form from the Project Explorer</B>

<DL>
	<DT></DT>
	<DD><B>1. </B>Position the pointer on the white area of the Project window (<B>not</B>
	over a form or any other item on the tree view).
	<P>
	<DT></DT>
	<DD><B>2. </B>Right-click to display the Project Explorer context menu.
	<P>
	<DT></DT>
	<DD><B>3. </B>Choose <B>Add</B> and then <B>Form</B> (see Figure 3.10).
	<P>
</DL>

<P><A HREF="javascript:popUp('03fig10.gif')"><B>FIGURE 3.10</B></A> <I>You can add
or remove projects, forms, and modules to or from the Project Explorer by using its
context menu.</I></P>
<P>
<H2><A NAME="Heading10"></A>Controlling Settings with the Properties Window</H2>


<BLOCKQUOTE>
	<P>
<HR>
<STRONG>Properties and values</STRONG></P>
	<P>The programming jargon for a property's setting is a property's value. 
<HR>


</BLOCKQUOTE>

<P>In the Properties window, you read, configure, and control the initial settings
of the <I>ActiveX controls</I> in your program. As you become more familiar with
Visual Basic programming, a good portion of your time will be spent learning, setting,
and manipulating control properties. Because controls are the building blocks of
Visual Basic programs, the Properties window is an essential tool to master. Figure
3.11 shows the structure of the Properties window.</P>
<P><A HREF="javascript:popUp('03fig10b.gif')"><B>FIGURE 3.11</B></A> <I>You set the
attributes of a control with the Properties window.</I></P>
<P>
<H2><A NAME="Heading11"></A>Setting Form Position with the Form Layout Window</H2>
<P>The Form Layout window enables you to set the <I>runtime</I> position of one or
more forms onscreen.</P>
<P>You position a form by moving its representation on the &quot;computer screen&quot;
in the Form Layout window with your mouse. As you move the pointer over the small
form in the Form Layout window, the pointer changes into a four-directional, arrow-headed
cross. To position the screen, hold down your mouse button and drag the form to where
you want it to be on the computer screen (see Figure 3.12).</P>
<P><A HREF="javascript:popUp('03fig11.gif')"><B>FIGURE 3.12</B></A> <I>The Form Layout
window lets you position one or more forms as they appear onscreen.</I></P>
<P>The Form Layout window is a little tricky to use. Remember, the placement of a
form in the Form Designer window doesn't affect the screen position of your program's
form at runtime. If the IDE is in MDI display mode, you set the runtime startup position
of a form in the Form Layout window. When the IDE is in SDI display move, there's
no display of a Form Layout window. Thus, the position of the form onscreen is the
startup position of the form at runtime.</P>
<P>
<H2><A NAME="Heading12"></A>Viewing the IDE</H2>


<BLOCKQUOTE>
	<P>
<HR>
<STRONG>MDI versus SDI</STRONG></P>
	<P>MDI stands for multiple document interface; SDI stands for single document interface.
	A multiple document graphical user interface is one that allows you to view multiple
	windows within a larger window--various Word document windows within the Word application
	window, for example. A single document interface is one where all windows appear
	independently of one another without the unification of a single parent window. 
<HR>


</BLOCKQUOTE>

<P>You can view the Visual Basic IDE in two ways: with the multiple document interface
(MDI) or the single document interface (SDI). MDI view shows all the distinct windows
of the Visual Basic IDE as member windows within one large IDE window (refer to Figure
3.1).</P>
<P>In the SDI view (shown in Figure 3.13), distinct windows of the Visual Basic IDE
exist independently of each other. There's no master window to contain and provide
a unified feel to the IDE. Some people who've worked with previous versions of Visual
Basic find working with the IDE in an SDI view a little bit easier in that it's similar
to the earlier versions' environment; others find the unified layout of the MDI environment
more appealing. There's no better or worse way; it's all a matter of work style.</P>
<P><A HREF="javascript:popUp('03fig12.gif')"><B>FIGURE 3.13</B></A> <I>The SDI view
is the way the VB IDE looked before version 5.</I></P>
<P><B>Change from MDI view to SDI view</B>

<DL>
	<DT></DT>
	<DD><B>1. </B>Choose <B>Options</B> from the <B>Tools</B> menu. The Options dialog
	box appears (see Figure 3.14).
	<P>
	<DT></DT>
	<DD><B>2. </B>On the Advanced page, select the <B>SDI Development</B> <B>Environment</B>
	check box; then click <B>OK</B>. The Visual Basic IDE will reconfigure to the SDI
	view the next time you start a Visual Basic programming session.
	<P>
	<DT></DT>
	<DD><B>3. </B>Click <B>OK</B>; then terminate and restart Visual Basic.
	<P>
</DL>

<P><A HREF="javascript:popUp('03fig13.gif')"><B>FIGURE 3.14</B></A> <I>You custom
configure the IDE from within the Options dialog box.</I></P>
<H1><I></I></H1>
<CENTER>
<P>
<HR>
<A HREF="ch02.htm" tppabs="http://pbs.mcp.com/ebooks/078971633X/ch02/ch02.htm"><IMG SRC="previous.gif" tppabs="http://pbs.mcp.com/ebooks/078971633X/button/previous.gif" WIDTH="128" HEIGHT="28"
ALIGN="BOTTOM" ALT="Previous chapter" BORDER="0"></A><A HREF="ch04.htm" tppabs="http://pbs.mcp.com/ebooks/078971633X/ch04/ch04.htm"><IMG
SRC="next.gif" tppabs="http://pbs.mcp.com/ebooks/078971633X/button/next.gif" WIDTH="128" HEIGHT="28" ALIGN="BOTTOM" ALT="Next chapter"
BORDER="0"></A><A HREF="index-38.htm" tppabs="http://pbs.mcp.com/ebooks/078971633X/index.htm"><IMG SRC="contents.gif" tppabs="http://pbs.mcp.com/ebooks/078971633X/button/contents.gif" WIDTH="128"
HEIGHT="28" ALIGN="BOTTOM" ALT="Contents" BORDER="0"></A> <BR>
</P>

<P>&copy; <A HREF="copy.htm" tppabs="http://pbs.mcp.com/ebooks/078971633X/copy.htm">Copyright</A>, Macmillan Computer Publishing. All
rights reserved.
</CENTER>

</BODY>

</HTML>
