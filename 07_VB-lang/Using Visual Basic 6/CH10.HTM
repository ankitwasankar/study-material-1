<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2//EN">
<HTML>

<HEAD>
	<META HTTP-EQUIV="Content-Type" CONTENT="text/html;CHARSET=iso-8859-1">
<SCRIPT LANGUAGE="JavaScript">

<!--

function popUp(pPage) {
 var fullURL = document.location;
 var textURL = fullURL.toString();
 var URLlen = textURL.length;
 var lenMinusPage = textURL.lastIndexOf("/");
 lenMinusPage += 1;
 var fullPath = textURL.substring(0,lenMinusPage);
 popUpWin = window.open('','popWin','resizable=yes,scrollbars=no,width=525,height=394');
 figDoc= popUpWin.document;
 zhtm= '<HTML><HEAD><TITLE>' + pPage + '</TITLE>';
 zhtm += '</head>';
 zhtm += '<BODY bgcolor="#FFFFFF">';
 zhtm += '<IMG SRC="' + fullPath + pPage + '">';
 zhtm += '<P><B>' + pPage + '</B>';
 zhtm += '</BODY></HTML>';
 window.popUpWin.document.write(zhtm);
 window.popUpWin.document.close();
 // Johnny Jackson 4/28/98
 }

//-->
                                                                
</SCRIPT>
<link rel="stylesheet" href="ebooks.css" tppabs="http://pbs.mcp.com/includes/stylesheets/ebooks.css">

	<META NAME="GENERATOR" Content="Symantec Visual Page Mac 1.1.1">
	<TITLE>Using Visual Basic 6 -- Ch 10 -- Working with Loops</TITLE>
</HEAD>

<BODY TEXT="#000000" BGCOLOR="#FFFFFF">

<H1 ALIGN="CENTER"><IMG SRC="que.gif" tppabs="http://pbs.mcp.com/ebooks/078971633X/button/que.gif" WIDTH="171" HEIGHT="66" ALIGN="BOTTOM"
BORDER="0"><BR>
Using Visual Basic 6</H1>
<CENTER>
<P><A HREF="ch09.htm" tppabs="http://pbs.mcp.com/ebooks/078971633X/ch09/ch09.htm"><IMG SRC="previous.gif" tppabs="http://pbs.mcp.com/ebooks/078971633X/button/previous.gif" WIDTH="128" HEIGHT="28"
ALIGN="BOTTOM" ALT="Previous chapter" BORDER="0"></A><A HREF="ch11.htm" tppabs="http://pbs.mcp.com/ebooks/078971633X/ch11/ch11.htm"><IMG
SRC="next.gif" tppabs="http://pbs.mcp.com/ebooks/078971633X/button/next.gif" WIDTH="128" HEIGHT="28" ALIGN="BOTTOM" ALT="Next chapter"
BORDER="0"></A><A HREF="index-38.htm" tppabs="http://pbs.mcp.com/ebooks/078971633X/index.htm"><IMG SRC="contents.gif" tppabs="http://pbs.mcp.com/ebooks/078971633X/button/contents.gif" WIDTH="128"
HEIGHT="28" ALIGN="BOTTOM" ALT="Contents" BORDER="0"></A> 
<HR>

</CENTER>
<H1 ALIGN="CENTER">- 10 -<BR>
Working with Loops</H1>

<UL>
	<LI><A HREF="#Heading1">Putting Loops to Work</A>
	<LI><A HREF="#Heading2">Using For...Next Loops</A>
	<UL>
		<LI><A HREF="#Heading3">Terminating the For...Next Loop Early</A>
	</UL>
	<LI><A HREF="#Heading4">Using Do...Loop Statements</A>
	<UL>
		<LI><A HREF="#Heading5">Using Do...While Loops</A>
		<LI><A HREF="#Heading6">Do loops will always run once if tested at the end</A>
		<LI><A HREF="#Heading7">Using Do...Until Statements</A>
	</UL>
	<LI><A HREF="#Heading8">Breaking an Infinite Loop</A>
	<UL>
		<LI><A HREF="#Heading9">Nesting Loops</A>
		<LI><A HREF="#Heading10">Working with Multiple Loops</A>
		<LI><A HREF="#Heading11">Using Nested Loops to Eliminate Loops</A>
		<LI><A HREF="#Heading12">Loading Data with Nested Loops</A>
	</UL>
</UL>

<P>
<HR SIZE="4">

<H1 ALIGN="CENTER"></H1>
<H2><A NAME="Heading1"></A>Putting Loops to Work</H2>
<P>One benefit of computer programming is the capability to repeat a set of instructions
reliably after they're written. The specific commands you put at the beginning and
end of a set of instructions to control their repeated execution are known as <I>loops</I>.
These commands tell the computer when and how often to perform the set of instructions.
By using loops, you can write simpler programs that would have otherwise required
redundant lines of code. Loops can be used to inspect arrays (discussed in Chapter
11, &quot;Working with Arrays&quot;), change properties of a program's controls,
and do a set of tasks for as long as a certain condition exists, or skip a set of
tasks until a certain condition is met.</P>


<BLOCKQUOTE>
	<P>
<HR>
<STRONG>Reading collections with loops</STRONG></P>
	<P>Visual Basic 6.0 supports other looping commands, including collection loops that
	use the For Each...Next statement. For more information about collections, see Chapter
	26, &quot;Making Object-Oriented Programs with Visual Basic.&quot; 
<HR>


</BLOCKQUOTE>

<P>Visual Basic supports two commonly used types of loops: <I>counter loops</I>,
which perform a task a set number of times, and <I>conditional loops</I>, which perform
a task while a specified condition exists or until a specified condition exists.</P>
<P>
<H2><A NAME="Heading2"></A>Using For...Next Loops</H2>
<P>Counter loops are also known as For or For...Next loops. They're called For...Next
loops because the beginning and end of the loop are defined by the For statement
and the Next statement, respectively. The syntax of a For...Next loop is</P>
<P>
<PRE>For <I>CounterVar</I> = <I>StartNum</I> To <I>EndNum</I> [Step <I>StepNum</I>]
     <I>statements</I>
Next [<I>CounterVar</I>]
</PRE>
<P>Keyword that starts a loop</P>
<P>User-defined numeric variable that the loop uses as a counter</P>
<P>Number from which the loop starts</P>
<P>Keyword that separates <I>StartNum</I> from <I>EndNum</I></P>
<P>Number at which the loop stops</P>
<P>Optional keyword that indicates that loop should <I>step</I></P>
<P>Indicates what size step increment/decrement should be (can be negative)</P>
<P>Keyword that completes the loop</P>
<P>Identifies which <I>CounterVar</I> is updated by the Next keyword</P>
<P>At the beginning of a For...Next loop, you define a counter variable, as well
as the beginning and end points of the variable's value. The first time the loop
is run, the counter variable is set to the value of the beginning point. Each time
the program runs through the loop, the value of the counter increments. If the Step
keyword is used, the counter variable increments as dictated by the number following
the Step keyword. For example, in the following statement, intCntr will increment
by 2:</P>
<P>
<PRE>For intCntr = 0 To 10 Step 2
</PRE>
<P>As the counter variable increments, it's checked against the value of the end
point. If the counter is larger than the end point, the program skips out of the
loop and onto the first statement following the loop.</P>
<P>If the beginning value of the loop is greater than the ending value, the loop
won't execute at all, unless you set up the loop to count backward. For example,
the following loop doesn't cause an error, but because the start boundary of the
loop (9) is greater than the end boundary (0), the loop is ignored and the message
box doesn't appear:</P>


<BLOCKQUOTE>
	<P>
<HR>
<STRONG>Stepping through the loop</STRONG></P>
	<P>The default or assumed value for the Step in a For...Next loop is a positive 1,
	which increments the counter. Including the step value on all For...Next loops, even
	when the value is 1, improves readability and aids maintenance. 
<HR>
<BR>
	
<HR>
<STRONG>Concatenation</STRONG></P>
	<P>You concatenate a string when you add another string onto a string. An example
	of concatenating three strings onto one string is FullName = First &amp; &quot; &quot;
	&amp; Last, which performs two successive concatenations into the string variable
	FullName. 
<HR>


</BLOCKQUOTE>

<PRE>For intCntr = 9 To 0 `This loop will not run!
     MsgBox &quot;This is loop number: &quot; &amp; Cstr(intCntr)
Next intCntr
</PRE>
<P>The following loop works, however, because the loop uses the Step keyword to decrement
&gt;backward (-1) from 9 to 0:</P>
<P>
<PRE>For intCntr = 9 To 0 Step -1
     MsgBox &quot;This is loop number: &quot; &amp; Cstr(intCntr)
Next intCntr
</PRE>
<P>The counter variable is changed each time the loop reaches the Next statement.
Unless otherwise specified with the Step keyword, the counter is increased by one
for each loop.</P>
<P>Listing 10.1, the event handler for the For...Next button click event, shows a
For...Next loop that exposes the counter variable within a larger string displayed
in a TextBox (see Figure 10.1). As the loop progresses, the counter variable is converted
to a string and inserted within strings, StrBegin and StrEnd. Those strings are concatenated
onto a master &quot;holding&quot; string, StrMsg, which grows with each trip through
the loop. A carriage return and line-break character is added to StrMsg at the end
of the loop, and then the StrMsg is assigned to the Text property of txtDisplay.
The loop then refreshes the form to repaint the TextBox.</P>
<H4>LISTING 10.1 10LIST01.TXT--Using a For...Next Loop to Concatenate Strings</H4>
<PRE><B>01</B> Private Sub cmdForNext_Click()</PRE>
<PRE><B>02</B> Dim intCntr As Integer</PRE>
<PRE><B>03</B> Dim strBegin As String</PRE>
<PRE><B>04</B> Dim strEnd As String</PRE>
<PRE><B>05</B> Dim strMsg As String</PRE>
<PRE><B>06</B></PRE>
<PRE><B>07</B> `Make a phrase for the beginning of a line</PRE>
<PRE><B>08</B> strBegin = &quot;This is line: &quot;</PRE>
<PRE><B>09</B></PRE>
<PRE><B>10</B> `Make a phrase for the end of a line</PRE>
<PRE><B>11</B> strEnd = &quot; of a For...Next loop&quot;</PRE>
<PRE><B>12</B></PRE>
<PRE><B>13</B> `Make a For...Next Loop</PRE>
<PRE><B>14</B> For intCntr = 0 To 20</PRE>
<PRE><B>15</B></PRE>
<PRE><B>16</B> `Put the beginning of the line in place</PRE>
<PRE><B>17</B> strMsg = strMsg &amp; strBegin</PRE>
<PRE><B>18</B></PRE>
<PRE><B>19</B> `Convert the counter integer to a string</PRE>
<PRE><B>20</B> `and place it in the middle of the string</PRE>
<PRE><B>21</B> `that is being constructed</PRE>
<PRE><B>22</B> strMsg = strMsg &amp; CStr(intCntr)</PRE>
<PRE><B>23</B></PRE>
<PRE><B>24</B> `Add the end of the message</PRE>
<PRE><B>25</B> strMsg = strMsg &amp; strEnd</PRE>
<PRE><B>26</B></PRE>
<PRE><B>27</B> `Put in a line break constant</PRE>
<PRE><B>28</B> strMsg = strMsg &amp; vbCrLf</PRE>
<PRE><B>29</B> `Display the resulting string in the textbox</PRE>
<PRE><B>30</B> txtDisplay.Text = strMsg</PRE>
<PRE><B>31</B> Refresh `force a repaint of the screen</PRE>
<PRE><B>32</B> Next intCntr</PRE>
<PRE><B>33</B> End Sub</PRE>


<BLOCKQUOTE>
	<P>
<HR>
<STRONG>Documenting the end of a For...Loop</STRONG></P>
	<P>For ease of reading your program code, it's good practice to include the variable
	name in the Next statement (like on line 32 of Listing 10.1). This is especially
	important in <I>nested loops</I>. 
<HR>


</BLOCKQUOTE>

<P><A HREF="javascript:popUp('10fig01.gif')"><B>FIGURE 10.1</B></A> <I>When you set
a TextBox's MultiLine property to True, make sure that you set the TextBox's ScrollBars
property accordingly. Otherwise, you may not see all the text.</I></P>


<BLOCKQUOTE>
	<P>
<HR>
vbCrLf is a Visual Basic global constant that could have been substituted with the
	string &quot;Chr(13) &amp; Chr(10)&quot;. Both the VBA constant and this literal
	string are equivalent to a carriage return/line feed combination. For more information
	about using VBA constants, see Chapter 7, &quot;Using Data Types, Constants, and
	Variables.&quot; 
<HR>


</BLOCKQUOTE>

<P>An alternative method would be to only update the screen after leaving the loop.
You would move the assignment statement immediately after the Next command to prevent
the program from displaying any text until the loop is completed. In the case of
a long-running process, you should give users a visual indication that the program
is running. In long-running loops, if you wait to the end of the loop to display
the results onscreen, your users may think the program has locked up.</P>
<P>Although you can use any numeric variable for the counter, you need to be aware
of the limits of each variable type. For example, trying to run a loop 40,000 times
starting from 0 with a step of 1 and an integer variable as the CounterVar causes
an overrun error during execution. This is because an integer has a maximum positive
value of 32,767. Using a Long integer will solve this problem when larger loop counters
are required. The limitation on Long integers is negative 2,147,483,648 to positive
2,147,483,647.</P>
<P>Using floating-point variables such as Singles and Doubles for a CounterVar will
work. There's even the capability to support fractional Step variables, although
these can become difficult to maintain and should be avoided unless required by the
functionality of the statements inside the loop.</P>
<P>You should exercise great care when manually changing the value of the counter
variable inside the loop. Never reset the value of the counter variable inside a
For...Next loop, because doing so may create an infinite loop or a program lockup.
For example, the following code causes the For...Loop to go into an infinite loop,
because the end value of 4 is never reached:</P>
<P>
<PRE>For intCntr = 0 to 4
     intCntr = 0 ` This line causes an infinite loop
Next intCntr
</PRE>
<H3><A NAME="Heading3"></A>Terminating the For...Next Loop Early</H3>
<P>Typically, your For...Next loop should run through all the values of the counter
variable, but sometimes you'll want the loop to terminate early. To do this, simply
place an Exit For statement where you want the loop to stop. This statement is typically
associated within an If...Then statement.</P>
<P>Listing 10.2 shows an enhancement to the code in Listing 10.1. Lines 16 through
22 show an added If...Then statement at the beginning of the For...Next loop. When
the loop begins, the code enters the If...Then statement to take a look at the value
of the CheckBox on the form. Selecting the CheckBox on the form tells the program
that the loop needs to terminate when the value of the counting variable exceeds
the quantity 10 (see Figure 10.2). Therefore, if this condition exists (the CheckBox
is checked), the Exit For statement--contained in the If...Then statement within
the first If...Then statement--forces the program out of the For...Next loop.</P>
<P>
<H4>LISTING 10.2 10LIST02.TXT--Setting Many Alternative Actions Within a <BR>
For...Next Loop</H4>
<PRE><B>01</B> Private Sub cmdForNext_Click()</PRE>
<PRE><B>02</B> Dim intCntr As Integer</PRE>
<PRE><B>03</B> Dim strBegin As String</PRE>
<PRE><B>04</B> Dim strEnd As String</PRE>
<PRE><B>05</B> Dim strMsg As String</PRE>
<PRE><B>06</B></PRE>
<PRE><B>07</B> `Make a phrase for the beginning of a line</PRE>
<PRE><B>08</B> strBegin = &quot;This is line: &quot;</PRE>
<PRE><B>09</B></PRE>
<PRE><B>10</B> `Make a phrase for the end of a line</PRE>
<PRE><B>11</B> strEnd = &quot; of a For...Next loop&quot;</PRE>
<PRE><B>12</B></PRE>
<PRE><B>13</B> `Make a For...Next Loop</PRE>
<PRE><B>14</B> For intCntr = 0 To 20</PRE>
<PRE>15</PRE>
<PRE><B>16</B> `Take a look to see if the checkbox</PRE>
<PRE><B>17</B> `on the form is checked</PRE>
<PRE><B>18</B> If chkLimit.Value = 1 Then</PRE>
<PRE><B>19</B> `if it is, then Exit the For statement</PRE>
<PRE><B>20</B> `when intCntr is greater than 10</PRE>
<PRE><B>21</B> If intCntr &gt; 10 Then Exit For</PRE>
<PRE><B>22</B> End If</PRE>
<PRE><B>23</B> `Put the beginning of the line in place</PRE>
<PRE><B>24</B> strMsg = strMsg &amp; strBegin</PRE>
<PRE><B>25</B></PRE>
<PRE><B>26</B> `Convert the counter integer to a string</PRE>
<PRE><B>27</B> `and place it in the middle of the string</PRE>
<PRE><B>28</B> `that is being constructed</PRE>
<PRE><B>29</B> strMsg = strMsg &amp; CStr(intCntr)</PRE>
<PRE><B>30</B></PRE>
<PRE><B>31</B> `Add the end of the message</PRE>
<PRE><B>32</B> strMsg = strMsg &amp; strEnd</PRE>
<PRE><B>33</B></PRE>
<PRE><B>34</B> `Put in a line break constant</PRE>
<PRE><B>35</B> strMsg = strMsg &amp; vbCrLf</PRE>
<PRE><B>36</B> `Display the resulting string in the textbox</PRE>
<PRE><B>37</B> txtDisplay.Text = strMsg</PRE>
<PRE><B>38</B> Refresh `force a repaint of the screen</PRE>
<PRE><B>39</B> Next intCntr</PRE>
<PRE><B>40</B> End Sub</PRE>
<P><A HREF="javascript:popUp('10fig02.gif')"><B>FIGURE 10.2</B></A> <I>CheckBoxes
are a good means of control when you need to set or clear a condition.</I></P>
<P>
<H2><A NAME="Heading4"></A>Using Do...Loop Statements</H2>
<P>A Do...Loop is a <I>conditional loop</I>, which is active as long or until a condition
exists. The key feature of a conditional loop is, of course, the <I>condition</I>
(any expression that can return a True or False value). This True/False can be a
return value from a function; the value of a property, such as the Value property
of an OptionButton; or an expression, such as NumVal &lt; 15. (Chapter 18, &quot;Writing
Reusable Code with Subs and Functions,&quot; discusses functions fully.) The two
basic types of conditional loops are Do...While, which repeats while the condition
is True, and Do...Until, which repeats until the condition is True.</P>
<P>
<H3><A NAME="Heading5"></A>Using Do...While Loops</H3>
<P>A Do...While loop works pretty much as the name implies--it does something while
a certain condition is true. For example, to keep adding one to MyNum while MyNum
is less than 20, you would use this:</P>
<P>
<PRE>Do While MyNum &lt;20
     MyNum = MyNum + 1
Loop
</PRE>
<P>The keyword While in the Do...While statement tells the program that the loop
will be repeated while<B> </B>the condition expression is true. When the condition
in a Do...While loop becomes false, the program moves out of the loop and onto the
next statement after the Loop statement.</P>
<P>The syntax for a Do...While loop is</P>
<P>
<PRE>Do While <I>condition</I>
    <I>statement(s)</I>
Loop
</PRE>
<P>The keyword that denotes the beginning of the loop</P>
<P>The keyword that denotes what kind of loop it is</P>
<P>The state that <I>must</I> exist (for example, x = 10, MyVal &lt;&gt; True, or
y &lt; x)</P>
<P>The statement(s) to execute while the loop is active</P>
<P>The keyword that indicates the end of the loop block</P>
<P>Both statements must be present</P>
<P>Or you can use this equally valid syntax:</P>
<P>
<PRE>Do
<I>    statement(s)</I>
Loop While <I>condition</I>
</PRE>
<P>As you can see in this example, the Do...While loop has two forms. The difference
between the two is the placement of the condition--at the beginning of the loop or
at the end.</P>
<P>Listing 10.3 looks similar to the For...Next loop code in Listing 10.2. When you
take a closer look at Lines 13 through 41, however, you'll notice that where there
was a For...Next loop, there's now a Do...While loop that runs while the value of
intCntr is less than or equal to 20 (see Figure 10.3). Line 21 has also been changed
from Exit For to Exit Do because the loop is now change to a Do loop. The Exit Do
command is used with both types of Do loops.</P>
<P>
<H3><A NAME="Heading6"></A>Do loops will always run once if tested at the end</H3>


<BLOCKQUOTE>
	<P>
<HR>
When the condition statement is placed after the Loop keyword in a Do...While or
	Do...Until loop, the set of instructions contained between Do and Loop is always
	executed once. The condition is checked only after the first iteration of the loop.
	
<HR>


</BLOCKQUOTE>

<H4>LISTING 10.3 10LIST03.TXT--A Do...While Loop That Does the Same Thing as a For...Next
Loop</H4>
<PRE><B>01</B> Private Sub cmdDoWhile_Click()</PRE>
<PRE><B>02</B> Dim intCntr As Integer</PRE>
<PRE><B>03</B> Dim strBegin As String</PRE>
<PRE><B>04</B> Dim strEnd As String</PRE>
<PRE><B>05</B> Dim strMsg As String</PRE>
<PRE><B>06</B></PRE>
<PRE><B>07</B> `Make a phrase for the beginning of a line</PRE>
<PRE><B>08</B> strBegin = &quot;This is line: &quot;</PRE>
<PRE><B>09</B></PRE>
<PRE><B>10</B> `Make a phrase for the end of a line</PRE>
<PRE><B>11</B> strEnd = &quot; of a Do...While loop&quot;</PRE>
<PRE><B>12</B></PRE>
<PRE><B>13</B> `Make a Do..While Loop</PRE>
<PRE><B>14</B> Do While intCntr &lt;= 20</PRE>
<PRE><B>15</B></PRE>
<PRE><B>16</B> `Take a look to see if the checkbox</PRE>
<PRE><B>17</B> `on the form is checked</PRE>
<PRE><B>18</B> If chkLimit.Value = 1 Then</PRE>
<PRE><B>19</B> `if it is, then Exit the Do statement</PRE>
<PRE><B>21</B> If intCntr &gt; 10 Then Exit Do</PRE>
<PRE><B>22</B> End If</PRE>
<PRE><B>23</B></PRE>
<PRE><B>24</B> `Put the beginning of the line in place</PRE>
<PRE><B>25</B> strMsg = strMsg &amp; strBegin</PRE>
<PRE><B>26</B></PRE>
<PRE><B>27</B> `Convert the counter integer to a string</PRE>
<PRE><B>28</B> `and place it in the middle of the string</PRE>
<PRE><B>29</B> `that is being constructed</PRE>
<PRE><B>30</B> strMsg = strMsg &amp; CStr(intCntr)</PRE>
<PRE><B>31</B></PRE>
<PRE><B>32</B> `Add the end of the message</PRE>
<PRE><B>33</B> strMsg = strMsg &amp; strEnd</PRE>
<PRE><B>34</B></PRE>
<PRE><B>35</B> `Put in a line break constant</PRE>
<PRE><B>36</B> strMsg = strMsg &amp; vbCrLf</PRE>
<PRE><B>37</B> `Display the resulting string in the textbox</PRE>
<PRE><B>38</B> txtDisplay.Text = strMsg</PRE>
<PRE><B>39</B> Refresh `force a repaint of the screen</PRE>
<PRE><B>40</B> intCntr = intCntr + 1</PRE>
<PRE><B>41</B> Loop</PRE>
<PRE><B>42</B> End Sub</PRE>
<P><A HREF="javascript:popUp('10fig03.gif')"><B>FIGURE 10.3</B></A> <I>You can us
Do...While to loop while intCntr is less than or equal to 20.</I></P>
<P>By placing the While condition clause in the Do statement, you tell the program
that you want to evaluate the condition <I>before</I> you run any statements inside
the loop. If the condition is True, the repetitive statements between the Do statement
and the Loop statement are run. Then the program returns to the Do statement to evaluate
the condition again. As soon as the condition is False, the program moves to the
statement following the Loop statement.</P>


<BLOCKQUOTE>
	<P>
<HR>
<STRONG>Put conditional clauses in only one place</STRONG></P>
	<P>Don't put the While condition clause in both the Do and Loop statements because
	this causes an error when you try to run your program. 
<HR>


</BLOCKQUOTE>

<P>When the form of the loop is located with the While keyword right after the Do
keyword, the statements inside the loop may never be run. If the condition is False
before the loop is run the first time, the program just proceeds to the statements
after the loop. To run the Do...While loop at least once, use the second form of
the Do...While loop, which places the condition after the Loop statement. For example,</P>
<P>
<PRE>Do
    Text1.Text = Text1.Text &amp; CStr(intCntr )
    intCntr  = intCntr  + 1
Loop While intCntr  &lt; 10
</PRE>
<P>This form of the Do...Loop tells the program that you want the loop to run at
least once and then evaluate the condition to determine whether to repeat the loop.</P>


<BLOCKQUOTE>
	<P>
<HR>
<STRONG>Replace <I>While...Wend</I> loops with <I>Do...While</I></STRONG></P>
	<P>If you're working on code developed by someone else, you may find a loop that
	starts with a While statement and ends with a Wend statement. This type of loop works
	the same as a Do...While loop with the While clause in the Do statement. Visual Basic
	still supports a While...Wend loop, but it's recommended to that you use the Do...While
	type of loop because it's more flexible. 
<HR>


</BLOCKQUOTE>

<P>When using a Do...While loop, don't forget to increment the conditional variable
in your code. Unlike the For...Next loop, the conditional or counting variables in
Do loops are your responsibility to manage. Also, it's good practice to initialize
the loop variable rather than rely on the default. For example, the following goes
on infinitely because the While condition is never changed:</P>
<PRE>
Dim intCntr


intCntr = 0
txtMessage.Text = &quot;&quot;
Do While intCntr &lt; 10
     txtMessage.Text = txtMessage.Text _
                       &amp; CStr(intCntr)
Loop
</PRE>
<P>The following code loops, terminates, and displays the TextBox's text just fine:</P>
<P>
<PRE>Dim intCntr
intCntr = 0
txtMessage.Text = &quot;&quot;
Do While intCntr &lt; 10
     txtMessage.Text = txtMessage.Text _
                      &amp; CStr(intCntr)
     intCntr = intCntr + 1
Loop
</PRE>
<H3><A NAME="Heading7"></A>Using Do...Until Statements</H3>
<P>The Do...Until loop is basically the same as the Do...While loop, except that
the statements inside a Do...Until loop are run only as long as the condition is
false--in other words, as long as the condition isn't met. When the condition becomes
true, the loop terminates.</P>
<P>The syntax for a Do...Until loop is</P>
<P>
<PRE>Do Until <I>condition</I>
<I>statement(s)</I>
Loop
</PRE>
<P>There are two forms of syntax for the Do...Until loop, just as there are two forms
of syntax for the Do...While loop--one with the condition in the Do statement and
one with the condition in the Loop statement. If you place the condition in the same
line as the Do keyword, the condition is evaluated before the statements in the loop
are executed. If you place the condition in the same line as the Loop keyword, the
loop is run at least once before the condition is evaluated.</P>
<P>Listing 10.4 shows the event procedure for the cmdDoUntil button's Click event
(see Figure 10.4). A Do...Until loop within the event procedure runs until the counter
variable, intCntr, is greater than 20, or the Stop at 10 CheckBox is selected. This
code is similar to the code for the cmdDoWhile_Click() event procedure in Listing
10.3. The only difference is that the Do...While loop is changed to a Do...Until
loop (Lines 13 through 41). Also, the StrEnd string on Line 11 is changed from &quot;
of a Do...While loop&quot; to &quot; of a Do...Until loop&quot;. As you can see,
Do...While loops and Do...Until loops are closely related. Generally, which one you
use is a matter of personal style.</P>
<P>
<H4>LISTING 10.4 10LIST04.TXT--Terminating the Loop When the Condition Is True</H4>
<PRE><B>01</B> Private Sub cmdDoUntil_Click()</PRE>
<PRE><B>02</B> Dim intCntr As Integer</PRE>
<PRE><B>03</B> Dim strBegin As String</PRE>
<PRE><B>04</B> Dim strEnd As String</PRE>
<PRE><B>05</B> Dim strMsg As String</PRE>
<PRE><B>06</B></PRE>
<PRE><B>07</B> `Make a phrase for the beginning of a line</PRE>
<PRE><B>08</B> strBegin = &quot;This is line: &quot;</PRE>
<PRE><B>09</B></PRE>
<PRE><B>10</B> `Make a phrase for the end of a line</PRE>
<PRE><B>11</B> strEnd = &quot; of a Do...Until loop&quot;</PRE>
<PRE><B>12</B></PRE>
<PRE><B>13</B> `Make a Do..Until Loop</PRE>
<PRE><B>14</B> Do Until intCntr &gt; 20</PRE>
<PRE>...</PRE>
<PRE><B>41</B> Loop</PRE>
<PRE><B>42</B> End Sub</PRE>
<P><A HREF="javascript:popUp('10fig04.gif')"><B>FIGURE 10.4</B></A> <I>The Do...Until
code still checks the value of the CheckBox.</I></P>
<P>
<H2><A NAME="Heading8"></A>Breaking an Infinite Loop</H2>


<BLOCKQUOTE>
	<P>
<HR>
<STRONG>Terminate an infinite loop</STRONG></P>
	<P>If your program is running within the Visual Basic IDE, press Ctrl+Break. When
	you press these keys, the loop breaks at a line of code within the infinite loop.
	If your program isn't running within the IDE, the only way to terminate it is to
	end the program from within the Windows Task Manager. (For detailed information about
	the Task Manager, read the online documentation that comes with Windows.) 
<HR>


</BLOCKQUOTE>

<P>Getting comfortable using loops takes time. The more you use them, the better
you'll get at identifying situations in which to use them. Loops can be a powerful
programming tool, but they can cause enormous headaches if not properly written.</P>
<P>The following shows a programmer's worst nightmare--the infinite loop:</P>
<P>
<PRE>Dim intCntr as Integer
Do While intCntr = 0
     intCntr = 0
Loop
</PRE>
<P>The command inside the loop sets the conditional variables and prevents the program
from going beyond loop. So the code tells the program to loop <I>forever</I>. When
the program enters this loop, it's locked into the loop; everything else waits for
the loop to complete, which never happens. If you run this program within the Visual
Basic IDE, be aware that infinite loops will often lock it up and you may lose any
program changes you made since your last update.</P>
<P>The best way to avoid an infinite loop is to carefully double-check any code you
write that changes the conditional or counter variables in your loops. This may seem
simplistic, but the power of loops is also the danger of loops. A loop can just as
quickly tie up your system doing a desired productive task as it can counting to
2 billion for no reason.</P>
<P>
<H3><A NAME="Heading9"></A>Nesting Loops</H3>
<P>In some situations, it becomes important to repeat a subtask several times during
a larger task that's also being repeated. The way you write this type of program
is by including a loop inside the set of instructions being repeated by a loop. This
loop-within-a-loop structure is called <I>nesting</I>, or a nested loop. Nested loops
can be a powerful programming tool, but they're confusing to understand if they're
not properly written and documented.</P>
<P>
<H3><A NAME="Heading10"></A>Working with Multiple Loops</H3>
<P>Listing 10.5 shows an example of multiple loops that change the Background Color
property of the vpjLoops form and CheckBox during runtime. The main form and the
CheckBox are changed to include all the visible background on the frame. This sample
program is run from the Simple Color command button (refer to Figure 10.4).</P>


<BLOCKQUOTE>
	<P>
<HR>
<STRONG>Download this code</STRONG></P>
	<P>The code for this example is included in the prjLoops project. To use the code
	without having to type it all in, you can download this project from the Web at <A
	HREF="javascript:if(confirm('http://www. mcp.com/info  \n\nThis file was not retrieved by Teleport Pro, because it is addressed on a domain or path outside the boundaries set for its Starting Address.  \n\nDo you want to open it from the server?'))window.location='http://www. mcp.com/info'" tppabs="http://www. mcp.com/info">http://www. mcp.com/info</A>. You'll be asked to
	enter an ISBN; enter 078971633x, and then click the <B>Search</B> button to go to
	the Book Info page for <I>Using VB6</I>. 
<HR>


</BLOCKQUOTE>

<H4>LISTING 10.5 10LIST05.TXT--An Example of Multiple For Loops</H4>
<PRE><B>01</B> Private Sub cmdForColor_Click()</PRE>
<PRE><B>02</B> Dim lngBlu As Long</PRE>
<PRE><B>03</B> Dim lngGrn As Long</PRE>
<PRE><B>04</B> Dim lngRed As Long</PRE>
<PRE><B>05</B> Dim SaveBack As Long</PRE>
<PRE><B>06</B> `Assign intColor Variables to initial values</PRE>
<PRE><B>07</B> `This will display white because all colors are 255</PRE>
<PRE><B>08</B> lngBlu = 255</PRE>
<PRE><B>09</B> lngGrn = 255</PRE>
<PRE><B>10</B> lngRed = 255</PRE>
<PRE><B>11</B></PRE>
<PRE><B>12</B> `Save the current background color of the form</PRE>
<PRE><B>13</B> SaveBack = frmLoop.BackColor</PRE>
<PRE><B>14</B> `Both the Form and CheckBox background are the same</PRE>
<PRE><B>15</B></PRE>
<PRE><B>16</B> `Loop 255 times reducing the Red color by 1</PRE>
<PRE><B>17</B> For lngRed = 255 To 1 Step -1</PRE>
<PRE><B>18</B> `Set the background color of the form and CheckBox</PRE>
<PRE><B>19</B> frmLoop.BackColor = RGB(lngRed, lngGrn, lngBlu)</PRE>
<PRE><B>20</B> chkLimit.BackColor = frmLoop.BackColor</PRE>
<PRE><B>21</B> Refresh `force a repaint of the screen</PRE>
<PRE><B>22</B> Next lngRed</PRE>
<PRE><B>23</B></PRE>
<PRE><B>24</B> `Loop 255 times reducing the Green color by 1</PRE>
<PRE><B>25</B> For lngGrn = 255 To 1 Step -1</PRE>
<PRE><B>26</B> `Set the background color of the form and CheckBox</PRE>
<PRE><B>27</B> frmLoop.BackColor = RGB(lngRed, lngGrn, lngBlu)</PRE>
<PRE><B>28</B> chkLimit.BackColor = frmLoop.BackColor</PRE>
<PRE><B>29</B> Refresh `force a repaint of the screen</PRE>
<PRE><B>30</B> Next lngGrn</PRE>
<PRE><B>31</B></PRE>
<PRE><B>32</B> `Loop 255 times reducing the Blue color by 1</PRE>
<PRE><B>33</B> For lngBlu = 255 To 1 Step -1</PRE>
<PRE><B>34</B> `Set the background color of the form and CheckBox</PRE>
<PRE><B>35</B> frmLoop.BackColor = RGB(lngRed, lngGrn, lngBlu)</PRE>
<PRE><B>36</B> chkLimit.BackColor = frmLoop.BackColor</PRE>
<PRE><B>37</B> Refresh `force a repaint of the screen</PRE>
<PRE><B>38</B> Next lngBlu</PRE>
<PRE><B>39</B></PRE>
<PRE><B>40</B> `Loop 255 times increasing the Red color by 1</PRE>
<PRE><B>41</B> For lngRed = 0 To 254 Step 1</PRE>
<PRE><B>42</B> `Set the background color of the form and CheckBox</PRE>
<PRE><B>43</B> frmLoop.BackColor = RGB(lngRed, lngGrn, lngBlu)</PRE>
<PRE><B>44</B> chkLimit.BackColor = frmLoop.BackColor</PRE>
<PRE><B>45</B> Refresh `force a repaint of the screen</PRE>
<PRE><B>46</B> Next lngRed</PRE>
<PRE><B>47</B></PRE>
<PRE><B>48</B> `Loop 255 times increasing the Green color by 1</PRE>
<PRE><B>49</B> For lngGrn = 0 To 254 Step 1</PRE>
<PRE><B>50</B> `Set the background color of the form and CheckBox</PRE>
<PRE><B>51</B> frmLoop.BackColor = RGB(lngRed, lngGrn, lngBlu)</PRE>
<PRE><B>52</B> chkLimit.BackColor = frmLoop.BackColor</PRE>
<PRE><B>53</B> Refresh `force a repaint of the screen</PRE>
<PRE><B>54</B> Next lngGrn</PRE>
<PRE><B>55</B></PRE>
<PRE><B>56</B> `Loop 255 times increasing the Blue color by 1</PRE>
<PRE><B>57</B> For lngBlu = 0 To 254 Step 1</PRE>
<PRE><B>58</B> `Set the background color of the form and CheckBox</PRE>
<PRE><B>59</B> frmLoop.BackColor = RGB(lngRed, lngGrn, lngBlu)</PRE>
<PRE><B>60</B> chkLimit.BackColor = frmLoop.BackColor</PRE>
<PRE><B>61</B> Refresh `force a repaint of the screen</PRE>
<PRE><B>62</B> Next lngBlu</PRE>
<PRE><B>63</B></PRE>
<PRE><B>64</B> `Reset the background color on both to original</PRE>
<PRE><B>65</B> frmLoop.BackColor = SaveBack</PRE>
<PRE><B>66</B> chkLimit.BackColor = frmLoop.BackColor</PRE>
<PRE><B>67</B> End Sub</PRE>


<BLOCKQUOTE>
	<P>
<HR>
<STRONG>Make code easier to read</STRONG></P>
	<P>Indenting code nested inside a loop or other structure (such as an If statement)
	makes the code easier to read. 
<HR>


</BLOCKQUOTE>

<P>The program first saves the current background color and then proceeds to remove
each of the three screen colors through a set of 255 increments. The first color
removed is red, then green, and finally blue. The second set of three loops does
just the opposite: first it adds in the red, then green, and finally blue. The last
two lines (65 and 66) put both elements back to their original background color settings.</P>
<P>There are six separate loops for 67 total lines of code. These loops have many
lines in common, and with a little effort, you can identify those common elements.</P>
<P>
<H3><A NAME="Heading11"></A>Using Nested Loops to Eliminate Loops</H3>
<P>You'll notice the use of a long integer array to accomplish the function of the
inner loop. Arrays are covered in depth in Chapter 11, &quot;Working with Arrays.&quot;</P>
<P>Listing 10.6 shows Listing 10.5 rewritten as two nested loops. The first loop
dims the background color by color. The second, as in Listing 10.5, adds the colors
back in. This sample program is run from the Nested Color command button (see Figure
10.5).</P>


<BLOCKQUOTE>
	<P>
<HR>
<STRONG>Download this code</STRONG></P>
	<P>The code for this example is also included in the prjLoops project, which you
	can download from <A target="_new" HREF="javascript:if(confirm('http://www.mcp.com/ info  \n\nThis file was not retrieved by Teleport Pro, because it is addressed on a domain or path outside the boundaries set for its Starting Address.  \n\nDo you want to open it from the server?'))window.location='http://www.mcp.com/%20info'" tppabs="http://www.mcp.com/%20info">http://www.mcp.com/ info</A>.
	
<HR>


</BLOCKQUOTE>

<H4>LISTING 10.6 10LIST06.TXT--An Wxample of Two Nested Loops That Use a Long Integer
Array</H4>
<PRE><B>01</B> Private Sub cmdNestColor_Click()</PRE>
<PRE><B>02</B> Dim intColorArray(1 To 3) As Long</PRE>
<PRE><B>03</B> Dim SaveBack As Long</PRE>
<PRE><B>04</B> Dim intPass As Integer</PRE>
<PRE><B>05</B> Dim intHue As Integer</PRE>
<PRE><B>06</B> `Assign intColor Variables to initial values</PRE>
<PRE><B>07</B> `This will display white because all colors are 255</PRE>
<PRE><B>08</B> intColorArray(1) = 255 `Red</PRE>
<PRE><B>09</B> intColorArray(2) = 255 `Green</PRE>
<PRE><B>10</B> intColorArray(3) = 255 `Blue</PRE>
<PRE><B>11</B></PRE>
<PRE><B>12</B> `Save the current background color of the form</PRE>
<PRE><B>13</B> SaveBack = frmLoop.BackColor</PRE>
<PRE><B>14</B> `Both the Form and CheckBox background are the same</PRE>
<PRE><B>15</B></PRE>
<PRE><B>16</B> `Top Loop does each color in turn Red, Green, Blue</PRE>
<PRE><B>17</B> For intPass = 1 To 3</PRE>
<PRE><B>18</B> `Then Loop2 255 times reducing color by 1</PRE>
<PRE><B>19</B> For intHue = 255 To 1 Step -1</PRE>
<PRE><B>20</B> intColorArray(intPass) = intHue</PRE>
<PRE><B>21</B> frmLoop.BackColor = RGB(intColorArray(1), _ intColorArray(2), intColorArray(3))</PRE>
<PRE><B>22</B> chkLimit.BackColor = frmLoop.BackColor</PRE>
<PRE><B>23</B> Refresh `force a repaint of the screen</PRE>
<PRE><B>24</B> Next intHue</PRE>
<PRE><B>25</B> Next intPass</PRE>
<PRE><B>26</B></PRE>
<PRE><B>27</B> `Top Loop does each color in turn Red, Green, Blue</PRE>
<PRE><B>28</B> For intPass = 1 To 3</PRE>
<PRE><B>29</B> `Then Loop2 255 times increasing color by 1</PRE>
<PRE><B>30</B> For intHue = 0 To 254 Step 1</PRE>
<PRE><B>31</B> intColorArray(intPass) = intHue</PRE>
<PRE><B>32</B> frmLoop.BackColor = RGB(intColorArray(1), _ intColorArray(2), intColorArray(3))</PRE>
<PRE><B>33</B> chkLimit.BackColor = frmLoop.BackColor</PRE>
<PRE><B>34</B> Refresh `force a repaint of the screen</PRE>
<PRE><B>35</B> Next intHue</PRE>
<PRE><B>36</B> Next intPass</PRE>
<PRE><B>37</B></PRE>
<PRE><B>38</B> `Reset the background color on both to original</PRE>
<PRE><B>39</B> frmLoop.BackColor = SaveBack</PRE>
<PRE><B>40</B> chkLimit.BackColor = frmLoop.BackColor</PRE>
<PRE><B>41</B> End Sub</PRE>
<P>There are only 41 lines of code and only two nested loops to maintain in this
new version of the program. This reduces line count by 35 percent with no loss of
functionality. The key benefits that nested loops provide are consistent operation
and ease of maintenance. If the same code is being used every time a loop is run,
it becomes easy to make sure that it does the same tasks.</P>
<P>Nested loops require more effort to write and debug than simple loops. Reusable
code is harder to develop than redundant code by at least a factor of 2. This topic
is covered more in Chapter 18, &quot;Writing Reusable Code with Subs and Functions.&quot;</P>
<P>Visual Basic's IDE makes it very tempting to write a simple loop and then cut
and paste it six, seven, or 200 times in a row. Most programming tools make it very
easy to copy lines of code. The challenge comes in learning to write better programs
that are easier to maintain and that perform consistently.</P>
<P>
<H3><A NAME="Heading12"></A>Loading Data with Nested Loops</H3>
<P>There are more useful examples where nested loops are invaluable. The final example
in this chapter is based on the MSFlexGrid ActiveX control and how it could be loaded
from a text file by using a nested loop. In this example, the control isn't bound
to any data source. The example program uses a simple text file that contains one
field or cell per row. The nested loop is a big help here, as it can be used to step
through the rows in the grid column by column. This allows the read or input statement
to appear only once in the program.</P>


<BLOCKQUOTE>
	<P>
<HR>
<STRONG>Loading the MSFlxGrd.ocx file</STRONG></P>
	<P>An enhanced version of MSFlexGrid comes with VB6. Before you can use the MSFlexGrid
	control in your application, you must add the MSFlxGrd.ocx file to your Microsoft
	Windows System directory. For more information about adding an ActiveX control to
	a project, see Chapter 4, &quot;Using the Intrinsic Controls.&quot; 
<HR>


</BLOCKQUOTE>

<P>Listing 10.7 lists the setup commands for the MSFlexGrid control that are executed
when the form loads. These commands set the width of the four columns used in the
example. (The details of this are covered in Chapter 32, &quot;Enhancing Your Programs
Using the Advanced Data Controls.&quot;)</P>
<P>
<H4>LISTING 10.7 10LIST07.TXT--Parameters for the MSFlexGrid Control</H4>
<PRE><B>01</B> Private Sub Form_Load()</PRE>
<PRE><B>02</B> `These values are in TWIPS and set the columns on the</PRE>
<PRE><B>03</B> `MSFlexGrid at run time. If you change these values</PRE>
<PRE>04 `you may need to also readjust the size of the Control.</PRE>
<PRE><B>05</B> MSFlexGrid1.ColWidth(0) = 640</PRE>
<PRE><B>06</B> MSFlexGrid1.ColWidth(1) = 1280</PRE>
<PRE><B>07</B> MSFlexGrid1.ColWidth(2) = 1280</PRE>
<PRE><B>08</B> MSFlexGrid1.ColWidth(3) = 1440</PRE>
<PRE><B>09</B> End Sub</PRE>
<P>By default, the Load event fires when a form is displayed. Figure 10.5 shows the
grid after it has been loaded. By using this event, the program adjusts the width
of the four columns to values that fit the amount of data in each column. These were
identified by trial and error, but a routine could have been written to inspect the
data in each grid cell and then determine the right width for each column. This function
would work like the <B>Format</B> menu's <B>Column</B> and <B>Autofit</B> command
in Microsoft Excel.</P>
<P><A HREF="javascript:popUp('10fig05.gif')"><B>FIGURE 10.5</B></A> <I>When you load
the MSFlexGrid ActiveX control, you can specify runtime properties.</I></P>
<P>Now that the control is set up, the actual program is straightforward. An ASCII
text file contains 24 lines or rows. Each line is read in turn and loaded into the
grid. Listing 10.8 shows a partial listing of the text file; the full listing can
be downloaded from the Web site, along with the sample program and the actual IMPORT.TXT
file.</P>
<P>
<H4>LISTING 10.8 10LIST08.TXT--Part of IMPORT.TXT, Which is Read by the <BR>
cmdNextData Subroutine</H4>
<PRE><B>01</B> StoreID</PRE>
<PRE><B>02</B> Location</PRE>
<PRE><B>03</B> Manager</PRE>
<PRE><B>04</B> Sales</PRE>
<PRE><B>05</B> 1566</PRE>
<PRE><B>06</B> Minneapolis</PRE>
<PRE><B>07</B> James Archie</PRE>
<PRE><B>08</B> &quot;$14,187,944&quot;</PRE>
<PRE>...</PRE>
<PRE><B>21</B> 1032</PRE>
<PRE><B>22</B> New York</PRE>
<PRE><B>23</B> Elmer Doren</PRE>
<PRE><B>24</B> &quot;$5,437,104&quot;</PRE>


<BLOCKQUOTE>
	<P>
<HR>
<STRONG>IMPORT.TXT is an ASCII file</STRONG></P>
	<P>The IMPORT.TXT file was created with Microsoft Notepad and can be edited. The
	name of the file, its location, and the number of rows is part of the program statements
	and must be changed to read different filenames. 
<HR>


</BLOCKQUOTE>

<P>Rows 1 through 4 of Listing 10.8 are used as the column headings in the grid control.
There's nothing special about these rows, other than they are first, and the background
and font in the MSFlexGrid control was formatted. Rows 5 though 24 are the detailed
records for each of five stores, including the store ID, location, manager's name,
and total sales.</P>
<P>The program in Listing 10.9 shows the 39 lines of code required to accomplish
the task of loading the grid. Lines 21 through 34 are the nested loop that reads
each line from the file and moves it into the proper cell of the grid.</P>
<P>
<H4>LISTING 10.9 10LIST09.TXT--Data Read Into Control a MSFlexGrid Control From <BR>
a Txt File with a Nested Loop</H4>
<PRE><B>01</B> Private Sub cmdNestData_Click()</PRE>
<PRE><B>02</B> Dim strBuff As String</PRE>
<PRE><B>03</B> Dim intFile As Integer</PRE>
<PRE><B>04</B> Dim intCol As Integer</PRE>
<PRE><B>05</B> Dim intRow As Integer</PRE>
<PRE><B>06</B></PRE>
<PRE><B>07</B> `This message informs the user of the runtime path</PRE>
<PRE><B>08</B> `where the IMPORT.TXT file must be located. If</PRE>
<PRE><B>09</B> `the file is not found a run-time error will result.</PRE>
<PRE><B>10</B></PRE>
<PRE><B>11</B> MsgBox (&quot;The current system path is set to: &quot; _</PRE>
<PRE>&amp; CurDir &amp; vbCrLf &amp; &quot;The program will run only&quot; _</PRE>
<PRE>&amp; &quot; if: IMPORT.TXT is found at the current path&quot;)</PRE>
<PRE><B>12</B></PRE>
<PRE><B>13</B> ` The next avaialble file is assigned to intFile</PRE>
<PRE><B>14</B> ` and file is opened for input.</PRE>
<PRE><B>15</B> intFile = FreeFile</PRE>
<PRE><B>16</B> Open CurDir &amp; &quot;\IMPORT.TXT&quot; For Input As #intFile</PRE>
<PRE><B>17</B></PRE>
<PRE><B>18</B> `The MSFlexGrid was set-up for 6 rows and 4 columns</PRE>
<PRE><B>19</B> ` Zero(0) is the default first value</PRE>
<PRE><B>20</B></PRE>
<PRE><B>21</B> `First Loop steps through each row</PRE>
<PRE><B>22</B> For intRow = 0 To 5</PRE>
<PRE><B>23</B> ` Second Loop steps through each column</PRE>
<PRE><B>24</B> For intCol = 0 To 3</PRE>
<PRE><B>25</B> `Reads file #intFile into variable strBuff</PRE>
<PRE><B>26</B> Input #intFile, strBuff</PRE>
<PRE><B>27</B> `Set pointer to proper column</PRE>
<PRE><B>28</B> MSFlexGrid1.Col = intCol</PRE>
<PRE><B>29</B> `Set pointer tp proper row</PRE>
<PRE><B>30</B> MSFlexGrid1.Row = intRow</PRE>
<PRE><B>31</B> `Assigns the read value to the Cell text</PRE>
<PRE><B>32</B> MSFlexGrid1.Text = strBuff</PRE>
<PRE>33 Next intCol</PRE>
<PRE><B>34</B> Next intRow</PRE>
<PRE><B>35</B></PRE>
<PRE><B>36</B> Close #intFile `close files as soon as you can</PRE>
<PRE><B>37</B> End Sub</PRE>
<P>Lines 7 through 18 in Listing 10.9 are for finding and opening the text file for
input. The MessageBox displays the current default path of the local user's system.
This is important because the default path is used with the file handler number given
by the FileFree function to locate and open IMPORT.TXT. If the file isn't at this
location, an error message will occur.</P>
<P>When the Click event on the Nested Data Read command button is fired, IMPORT.TXT
is read row by row. Figure 10.6 show the grid control once the data has been read
and loaded into the cells.</P>
<P><A HREF="javascript:popUp('10fig06.gif')"><B>FIGURE 10.6</B></A> <I>The nested
loop reads the text file and loads the control.</I></P>
<H1><I></I></H1>
<CENTER>
<P>
<HR>
<A HREF="ch09.htm" tppabs="http://pbs.mcp.com/ebooks/078971633X/ch09/ch09.htm"><IMG SRC="previous.gif" tppabs="http://pbs.mcp.com/ebooks/078971633X/button/previous.gif" WIDTH="128" HEIGHT="28"
ALIGN="BOTTOM" ALT="Previous chapter" BORDER="0"></A><A HREF="ch11.htm" tppabs="http://pbs.mcp.com/ebooks/078971633X/ch11/ch11.htm"><IMG
SRC="next.gif" tppabs="http://pbs.mcp.com/ebooks/078971633X/button/next.gif" WIDTH="128" HEIGHT="28" ALIGN="BOTTOM" ALT="Next chapter"
BORDER="0"></A><A HREF="index-38.htm" tppabs="http://pbs.mcp.com/ebooks/078971633X/index.htm"><IMG SRC="contents.gif" tppabs="http://pbs.mcp.com/ebooks/078971633X/button/contents.gif" WIDTH="128"
HEIGHT="28" ALIGN="BOTTOM" ALT="Contents" BORDER="0"></A> <BR>
</P>

<P>&copy; <A HREF="copy.htm" tppabs="http://pbs.mcp.com/ebooks/078971633X/copy.htm">Copyright</A>, Macmillan Computer Publishing. All
rights reserved.
</CENTER>

</BODY>

</HTML>
