<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2//EN">
<HTML>

<HEAD>
	<META HTTP-EQUIV="Content-Type" CONTENT="text/html;CHARSET=iso-8859-1">
<SCRIPT LANGUAGE="JavaScript">

<!--

function popUp(pPage) {
 var fullURL = document.location;
 var textURL = fullURL.toString();
 var URLlen = textURL.length;
 var lenMinusPage = textURL.lastIndexOf("/");
 lenMinusPage += 1;
 var fullPath = textURL.substring(0,lenMinusPage);
 popUpWin = window.open('','popWin','resizable=yes,scrollbars=no,width=525,height=394');
 figDoc= popUpWin.document;
 zhtm= '<HTML><HEAD><TITLE>' + pPage + '</TITLE>';
 zhtm += '</head>';
 zhtm += '<BODY bgcolor="#FFFFFF">';
 zhtm += '<IMG SRC="' + fullPath + pPage + '">';
 zhtm += '<P><B>' + pPage + '</B>';
 zhtm += '</BODY></HTML>';
 window.popUpWin.document.write(zhtm);
 window.popUpWin.document.close();
 // Johnny Jackson 4/28/98
 }

//-->
                                                                
</SCRIPT>
<link rel="stylesheet" href="ebooks.css" tppabs="http://pbs.mcp.com/includes/stylesheets/ebooks.css">

	<META NAME="GENERATOR" Content="Symantec Visual Page Mac 1.1.1">
	<TITLE>Using Visual Basic 6 -- Ch 4 -- Using the Intrinsic Controls</TITLE>
</HEAD>

<BODY TEXT="#000000" BGCOLOR="#FFFFFF">

<H1 ALIGN="CENTER"><IMG SRC="que.gif" tppabs="http://pbs.mcp.com/ebooks/078971633X/button/que.gif" WIDTH="171" HEIGHT="66" ALIGN="BOTTOM"
BORDER="0"><BR>
Using Visual Basic 6</H1>
<CENTER>
<P><A HREF="ch03.htm" tppabs="http://pbs.mcp.com/ebooks/078971633X/ch03/ch03.htm"><IMG SRC="previous.gif" tppabs="http://pbs.mcp.com/ebooks/078971633X/button/previous.gif" WIDTH="128" HEIGHT="28"
ALIGN="BOTTOM" ALT="Previous chapter" BORDER="0"></A><A HREF="ch05.htm" tppabs="http://pbs.mcp.com/ebooks/078971633X/ch05/ch05.htm"><IMG
SRC="next.gif" tppabs="http://pbs.mcp.com/ebooks/078971633X/button/next.gif" WIDTH="128" HEIGHT="28" ALIGN="BOTTOM" ALT="Next chapter"
BORDER="0"></A><A HREF="index-38.htm" tppabs="http://pbs.mcp.com/ebooks/078971633X/index.htm"><IMG SRC="contents.gif" tppabs="http://pbs.mcp.com/ebooks/078971633X/button/contents.gif" WIDTH="128"
HEIGHT="28" ALIGN="BOTTOM" ALT="Contents" BORDER="0"></A> 
<HR>

</CENTER>
<H1 ALIGN="CENTER">- 4 -<BR>
Using the Intrinsic Controls</H1>

<UL>
	<LI><A HREF="#Heading1">What Are Forms and Controls?</A>
	<LI><A HREF="#Heading2">What Are Intrinsic Controls?</A>
	<LI><A HREF="#Heading3">Adding and Removing Controls</A>
	<LI><A HREF="#Heading4">The Importance of Naming Controls</A>
	<LI><A HREF="#Heading5">How to Size and Position a Control</A>
	<LI><A HREF="#Heading6">Modifying a Form's Size</A>
	<LI><A HREF="#Heading7">Working with Containers</A>
	<LI><A HREF="#Heading8">Extending Visual Basic by Adding Controls</A>
</UL>

<P>
<HR SIZE="4">

<H1 ALIGN="CENTER"></H1>
<H2><A NAME="Heading1"></A>What Are Forms and Controls?</H2>


<BLOCKQUOTE>
	<P>
<HR>
<STRONG>Are there programs you can't see?</STRONG></P>
	<P>Although most programs you write will start with a form, not all programs use
	forms. These programs don't have any way for a person to use them directly; instead,
	other programs use them. Don't worry about this yet. Right now, just remember that
	people will be using your program and will use the controls you put on a form. 
<HR>
<BR>
	
<HR>
<STRONG>Distributing intrinsic controls</STRONG></P>
	<P>When you distribute a program that includes intrinsic controls only, you don't
	need to include OCX files. All the intrinsic controls are contained within the Visual
	Basic runtime files, so they'll be available to your program as long as the runtime
	files are present on the system. 
<HR>


</BLOCKQUOTE>

<P>In Visual Basic, <I>forms</I> are the foundations you generally use to build programs.
A form is where you put all the things that people interact with as they use your
program. Those things you put on the form are <I>controls</I>, which enable the people
who use your program to do things, such as enter text and click buttons.</P>
<P>Think of it this way: If you build a house, you start with a foundation--think
of this as the form. On top of the foundation, you add all the things that allow
you use the house: a floor, walls, and doors. These things are the controls.</P>
<P>
<H2><A NAME="Heading2"></A>What Are Intrinsic Controls?</H2>
<P>For the most part, you'll use a relatively small set of controls when you program
in Visual Basic. However, these controls are very powerful. With them, you can add
buttons, check boxes, labels, and text boxes to your programs. You can use them to
see files on your hard drive right from your program. You can even read a database!
These basic controls are <I>intrinsic controls</I>, and they're available in every
edition of Visual Basic 6.</P>
<P>The intrinsic controls are available whenever you use Visual Basic. During design
time, you can access them from the Toolbox (see Figure 4.1). Table 4.1 lists the
intrinsic controls.</P>
<P><A HREF="javascript:popUp('04fig01.gif')"><B>FIGURE 4.1</B></A> <I>By using only
the intrinsic controls, you can create powerful programs. To select a control, just
click it.</I></P>
<P>
<H4>TABLE 4.1&nbsp;&nbsp;The Visual Basic 6 Intrinsic Controls</H4>
<P>
<TABLE BORDER="1">
	<TR ALIGN="LEFT" VALIGN="TOP">
		<TD ALIGN="LEFT"><B><I>Control</I></B></TD>
		<TD ALIGN="LEFT"><B><I>Description</I></B></TD>
	</TR>
	<TR ALIGN="LEFT" VALIGN="TOP">
		<TD ALIGN="LEFT">Label</TD>
		<TD ALIGN="LEFT">Displays text on a form</TD>
	</TR>
	<TR ALIGN="LEFT" VALIGN="TOP">
		<TD ALIGN="LEFT">Frame</TD>
		<TD ALIGN="LEFT">Serves as a <I>container</I> for other controls</TD>
	</TR>
	<TR ALIGN="LEFT" VALIGN="TOP">
		<TD ALIGN="LEFT">CheckBox</TD>
		<TD ALIGN="LEFT">Enables users to select or deselect an option</TD>
	</TR>
	<TR ALIGN="LEFT" VALIGN="TOP">
		<TD ALIGN="LEFT">ComboBox</TD>
		<TD ALIGN="LEFT">Allows users to select from a list of items or add a new value</TD>
	</TR>
	<TR ALIGN="LEFT" VALIGN="TOP">
		<TD ALIGN="LEFT">HscrollBar</TD>
		<TD ALIGN="LEFT">Allows users to scroll horizontally through a list of data in another control</TD>
	</TR>
	<TR ALIGN="LEFT" VALIGN="TOP">
		<TD ALIGN="LEFT">Timer</TD>
		<TD ALIGN="LEFT">Lets your program perform actions in real time, without user interaction</TD>
	</TR>
	<TR ALIGN="LEFT" VALIGN="TOP">
		<TD ALIGN="LEFT">DirListBox</TD>
		<TD ALIGN="LEFT">Enables users to select a directory or folder</TD>
	</TR>
	<TR ALIGN="LEFT" VALIGN="TOP">
		<TD ALIGN="LEFT">Shape</TD>
		<TD ALIGN="LEFT">Displays a shape on a form</TD>
	</TR>
	<TR ALIGN="LEFT" VALIGN="TOP">
		<TD ALIGN="LEFT">Image</TD>
		<TD ALIGN="LEFT">Displays graphics (images) on a form but can't be a container</TD>
	</TR>
	<TR ALIGN="LEFT" VALIGN="TOP">
		<TD ALIGN="LEFT">OLE Container</TD>
		<TD ALIGN="LEFT">Enables you to add the functionality of another Control program to your program</TD>
	</TR>
	<TR ALIGN="LEFT" VALIGN="TOP">
		<TD ALIGN="LEFT">PictureBox</TD>
		<TD ALIGN="LEFT">Displays graphics (images) on a form and can serve as a container</TD>
	</TR>
	<TR ALIGN="LEFT" VALIGN="TOP">
		<TD ALIGN="LEFT">TextBox</TD>
		<TD ALIGN="LEFT">Can be used to display text but also enables users to enter or edit new or existing
			text</TD>
	</TR>
	<TR ALIGN="LEFT" VALIGN="TOP">
		<TD ALIGN="LEFT">CommandButton</TD>
		<TD ALIGN="LEFT">Enables users to initiate actions</TD>
	</TR>
	<TR ALIGN="LEFT" VALIGN="TOP">
		<TD ALIGN="LEFT">OptionButton</TD>
		<TD ALIGN="LEFT">Lets users select one choice from a group; must be used in groups of two or more</TD>
	</TR>
	<TR ALIGN="LEFT" VALIGN="TOP">
		<TD ALIGN="LEFT">ListBox</TD>
		<TD ALIGN="LEFT">Enables users to select from a list of items</TD>
	</TR>
	<TR ALIGN="LEFT" VALIGN="TOP">
		<TD ALIGN="LEFT">VscrollBar</TD>
		<TD ALIGN="LEFT">Enables users to scroll vertically through a list of data in another control</TD>
	</TR>
	<TR ALIGN="LEFT" VALIGN="TOP">
		<TD ALIGN="LEFT">DriveListBox</TD>
		<TD ALIGN="LEFT">Lets users select a disk drive</TD>
	</TR>
	<TR ALIGN="LEFT" VALIGN="TOP">
		<TD ALIGN="LEFT">FileListBox</TD>
		<TD ALIGN="LEFT">Lets users select a file</TD>
	</TR>
	<TR ALIGN="LEFT" VALIGN="TOP">
		<TD ALIGN="LEFT">Line</TD>
		<TD ALIGN="LEFT">Displays a line on a form</TD>
	</TR>
	<TR ALIGN="LEFT" VALIGN="TOP">
		<TD ALIGN="LEFT">Data</TD>
		<TD ALIGN="LEFT">Lets your program connect to a database</TD>
	</TR>
</TABLE>

<H2><A NAME="Heading3"></A>Adding and Removing Controls</H2>
<P>You can add controls to a form in two ways: by double-clicking and by drawing.
You learned about double-clicking in Chapter 1, &quot;Building Your Application;&quot;
whenever you double-click an icon on the toolbar, the associated control appears
on your form. When you do this, though, you can't control where the control goes:
You're at the mercy of Visual Basic. When you draw a control on your form, you can
put it wherever you want it.</P>
<P><B>Draw a control on a form</B>

<DL>
	<DT></DT>
	<DD><B>1. </B>Click the control's Toolbox icon.
	<P>
	<DT></DT>
	<DD><B>2. </B>Move the mouse pointer over your form. Notice that your pointer is
	now shaped as a crosshair instead of an arrow. Click (and hold) the mouse button
	where you want the control to go.
	<P>
	<DT></DT>
	<DD><B>3. </B>Drag the mouse down slightly and to the left. As you move the mouse,
	notice that a box starts to appear (see Figure 4.2).
	<P>
	<DT></DT>
	<DD><B>4. </B>When the box is the proper size, let go of the mouse button. The control
	you selected now appears on the form.
	<P>
</DL>

<P><A HREF="javascript:popUp('04fig02.gif')"><B>FIGURE 4.2</B></A> <I>When drawing
controls, use the box to approximate the size of your control.</I>\</P>
<P><B>Remove a control from a form</B>

<DL>
	<DT></DT>
	<DD><B>1. </B>Select the control you want to delete by clicking it. The control you
	select will appear with a box at each corner and side (see Figure 4.3).
	<P>
	<DT></DT>
	<DD><B>2. </B>Press the Delete key.
	<P>
</DL>

<P>You can also remove a control by right-clicking it. From the context menu that
appears, select <B>Delete</B>.</P>
<P><A HREF="javascript:popUp('04fig03.gif')"><B>FIGURE 4.3</B></A> <I>You know a
control is selected when boxes called sizing handles surround it.</I></P>
<P>
<H2><A NAME="Heading4"></A>The Importance of Naming Controls</H2>
<P>A control's name is one of its most important attributes because you literally
refer to a control by its name whenever you want it to do something. Names are so
important that every time you put a control on your form, Visual Basic automatically
gives a name to it. If you add a CommandButton, Visual Basic names it Command1; if
you add a TextBox, it's automatically named Text1.</P>
<P>However, naming controls like this can be confusing. For example, if you add six
CommandButtons to your form, Visual Basic will name them Command1, Command2, Command3,
and so on. If you need 100 buttons, Visual Basic will name the last one Command100.
How are you supposed to remember what Command67 does? The trick is, rather than let
Visual Basic name your controls automatically, you should do it yourself.</P>
<P><B>Name a control</B>

<DL>
	<DT></DT>
	<DD><B>1. </B>After you add a control to a form, make sure that it's selected (it
	has a box at each corner and side when it's selected).
	<P>
	<DT></DT>
	<DD><B>2. </B>In the Properties window, click the control's name in the right column
	(see Figure 4.4).
	<P>
	<DT></DT>
	<DD><B>3. </B>Delete the current name and add the name you want.
	<P>
</DL>

<P>A better name for a control is one that tells not only what type of control it
is, but also what it does within your program. Can you see the value here? If you
consistently give your controls descriptive names, you'll always know what they do.
Naturally, there is a convention you can use to help you with this.</P>
<P><A HREF="javascript:popUp('04fig04.gif')"><B>FIGURE 4.4</B></A> <I>You can change
a control's name in the Properties window.</I></P>


<BLOCKQUOTE>
	<P>
<HR>
<STRONG>Friendly names</STRONG></P>
	<P>When naming a control, the first letter of the friendly name is generally uppercase.
	This makes it easier to read the control's name, because you can easily differentiate
	between the friendly name and the control's abbreviation. 
<HR>


</BLOCKQUOTE>

<P>This convention is quite simple. It consists of a short (usually three-letter)
abbreviation that identifies the type of control (see Table 4.2), followed by a longer,
friendly name that describes what the control does within your program. The abbreviation
is lowercase, and the friendly name follows it immediately, without any spaces.</P>
<P>
<H4>TABLE 4.2&nbsp;&nbsp;Common Prefixes for Naming Visual Basic Intrinsic Controls</H4>
<P>
<TABLE BORDER="1">
	<TR ALIGN="LEFT" VALIGN="TOP">
		<TD ALIGN="LEFT"><B><I>Control</I></B></TD>
		<TD ALIGN="LEFT"><B><I>Prefix</I></B></TD>
		<TD ALIGN="LEFT"><B><I>Control</I></B></TD>
		<TD ALIGN="LEFT"><B><I>Prefix</I></B></TD>
	</TR>
	<TR ALIGN="LEFT" VALIGN="TOP">
		<TD ALIGN="LEFT">Label</TD>
		<TD ALIGN="LEFT">lbl</TD>
		<TD ALIGN="LEFT">PictureBox</TD>
		<TD ALIGN="LEFT">pic</TD>
	</TR>
	<TR ALIGN="LEFT" VALIGN="TOP">
		<TD ALIGN="LEFT">Frame</TD>
		<TD ALIGN="LEFT">fra</TD>
		<TD ALIGN="LEFT">TextBox</TD>
		<TD ALIGN="LEFT">txt</TD>
	</TR>
	<TR ALIGN="LEFT" VALIGN="TOP">
		<TD ALIGN="LEFT">CheckBox</TD>
		<TD ALIGN="LEFT">chk</TD>
		<TD ALIGN="LEFT">CommandButton</TD>
		<TD ALIGN="LEFT">cmd</TD>
	</TR>
	<TR ALIGN="LEFT" VALIGN="TOP">
		<TD ALIGN="LEFT">ComboBox</TD>
		<TD ALIGN="LEFT">cbo</TD>
		<TD ALIGN="LEFT">OptionButton</TD>
		<TD ALIGN="LEFT">opt</TD>
	</TR>
	<TR ALIGN="LEFT" VALIGN="TOP">
		<TD ALIGN="LEFT">HscrollBar</TD>
		<TD ALIGN="LEFT">hsb</TD>
		<TD ALIGN="LEFT">ListBox</TD>
		<TD ALIGN="LEFT">lst</TD>
	</TR>
	<TR ALIGN="LEFT" VALIGN="TOP">
		<TD ALIGN="LEFT">Timer</TD>
		<TD ALIGN="LEFT">tmr</TD>
		<TD ALIGN="LEFT">VscrollBar</TD>
		<TD ALIGN="LEFT">vsb</TD>
	</TR>
	<TR ALIGN="LEFT" VALIGN="TOP">
		<TD ALIGN="LEFT">DirListBox</TD>
		<TD ALIGN="LEFT">dir</TD>
		<TD ALIGN="LEFT">DriveListBox</TD>
		<TD ALIGN="LEFT">drv</TD>
	</TR>
	<TR ALIGN="LEFT" VALIGN="TOP">
		<TD ALIGN="LEFT">Shape</TD>
		<TD ALIGN="LEFT">shp</TD>
		<TD ALIGN="LEFT">FileListBox</TD>
		<TD ALIGN="LEFT">fil</TD>
	</TR>
	<TR ALIGN="LEFT" VALIGN="TOP">
		<TD ALIGN="LEFT">Image</TD>
		<TD ALIGN="LEFT">img</TD>
		<TD ALIGN="LEFT">Line</TD>
		<TD ALIGN="LEFT">lin</TD>
	</TR>
	<TR ALIGN="LEFT" VALIGN="TOP">
		<TD ALIGN="LEFT">OLE Container Control</TD>
		<TD ALIGN="LEFT">ole</TD>
		<TD ALIGN="LEFT">Data</TD>
		<TD ALIGN="LEFT">dat</TD>
	</TR>
</TABLE>
</P>
<P>For example, a CommandButton (which has the abbreviation cmd) used to close a
program might be named cmdClose. If you use a TextBox (which has the abbreviation
txt) for users to input their name, you might call it txtName. This convention becomes
especially powerful when you use the same type of control multiple times. Say that
you use two text boxes to capture a user's name. If you let Visual Basic name the
controls, they will be Text1 and Text2. If you take over and name them yourself,
you can name them txtFirstName and txtLastName.</P>
<P>As you write Visual Basic programs, it's very important to name controls properly
and consistently. As a programmer, though, you probably already know this.</P>
<P>
<H2><A NAME="Heading5"></A>How to Size and Position a Control</H2>
<P>When you're drawing controls on a form, you don't have to be exact. It's very
easy to make them bigger or smaller, and to put them in a different spot on the form.</P>
<P><B>Size controls with the mouse</B>

<DL>
	<DT></DT>
	<DD><B>1. </B>In the Toolbox, select the Pointer tool (if it isn't already selected).
	<P>
	<DT></DT>
	<DD><B>2. </B>On your form, select the control you want to resize.
	<P>
	<DT></DT>
	<DD><B>3. </B>Grab a sizing handle with the mouse by moving the pointer over it and
	then holding down the left mouse button. You know when you're over the sizing handle
	because the mouse pointer turns into a double-sided arrow.
	<P>
	<DT></DT>
	<DD><B>4. </B>While holding down the mouse button, notice that a box appears (see
	Figure 4.5). The box shows you what the size of the control will be. When it's the
	right size, release the mouse button.
	<P>
</DL>

<P><A HREF="javascript:popUp('04fig05.gif')"><B>FIGURE 4.5</B></A> <I>You can resize
a control by dragging a sizing handle.</I></P>
<P>Changing the position of a control is also easy. Just click it to select it, and
drag it to its new position.</P>
<H2><A NAME="Heading6"></A>Modifying a Form's Size</H2>
<P>Every new form you start using in Visual Basic will be the same size. However,
this size probably won't be right for your program, so you'll have to resize it to
better fit the controls you're using. You resize a form just as you resize a control:
Grab one of its sizing handles with the mouse and drag it to the proper size (see
Figure 4.6).</P>
<P><A HREF="javascript:popUp('04fig06.gif')"><B>FIGURE 4.6</B></A> <I>Resize your
forms to better fit the controls you're using.</I></P>
<P>
<H2><A NAME="Heading7"></A>Working with Containers</H2>
<P>A <I>container</I> is a control that can hold other controls within it, such as
a Frame or a PictureBox--or a form. Controls inside a container are <I>child controls</I>.
Child controls exist completely within their containers. This means that they can't
be moved outside their containers (see Figure 4.7) and that when a container is deleted,
so are any child controls within it.</P>
<P><A HREF="javascript:popUp('04fig07.gif')"><B>FIGURE 4.7</B></A> <I>If you try
to move a child control outside its parent, part of the control will be cut off.</I></P>
<P>You can add a control to a container by using the drawing method. To do so, you
must select the container on your form before you click the control in the Toolbox.
Then draw the control inside the container.</P>
<P>The concept of container controls becomes especially important when you move and
resize controls through code. For now, just remember that some controls can contain
other controls and that any controls you put on a form are contained within the form.</P>
<P>
<H2><A NAME="Heading8"></A>Extending Visual Basic by Adding Controls</H2>
<P>Although the intrinsic controls are powerful, they won't suit all your programming
needs. Luckily, Visual Basic ships with many other ActiveX controls for you to use
in your programs--they just aren't shown in the Toolbox by default. You have to add
them.</P>
<P><B>Add controls to the Toolbox</B>

<DL>
	<DT></DT>
	<DD><B>1. </B>From the <B>Project</B> menu, select <B>Components.</B>
	<P>
	<DT></DT>
	<DD><B>2. </B>In the Components dialog, make sure that the <B>Selected Items Only</B>
	check box is <I>deselected</I> on the Controls page. You then see a list of all ActiveX
	controls available on your computer.
	<P>
	<DT></DT>
	<DD><B>3. </B>From the list, select the control you want to add by checking its check
	box (see Figure 4.8).
	<P>
</DL>

<P><A HREF="javascript:popUp('04fig09.gif')"><B>FIGURE 4.8</B></A> <I>You can add
ActiveX controls to the Toolbox by checking boxes in the Components list.</I></P>

<DL>
	<DT><I></I></DT>
	<DD><B>4. </B>Click <B>OK</B>. The control you selected will now appear in the Toolbox,
	and you can use it just as you use the intrinsic controls (see Figure 4.9).
	<P>
</DL>

<P><A HREF="javascript:popUp('04fig10.gif')"><B>FIGURE 4.9</B></A> <I>After adding
the calendar control, you can access it from the toolbox.</I></P>
<CENTER>
<P>
<HR>
<A HREF="ch03.htm" tppabs="http://pbs.mcp.com/ebooks/078971633X/ch03/ch03.htm"><IMG SRC="previous.gif" tppabs="http://pbs.mcp.com/ebooks/078971633X/button/previous.gif" WIDTH="128" HEIGHT="28"
ALIGN="BOTTOM" ALT="Previous chapter" BORDER="0"></A><A HREF="ch05.htm" tppabs="http://pbs.mcp.com/ebooks/078971633X/ch05/ch05.htm"><IMG
SRC="next.gif" tppabs="http://pbs.mcp.com/ebooks/078971633X/button/next.gif" WIDTH="128" HEIGHT="28" ALIGN="BOTTOM" ALT="Next chapter"
BORDER="0"></A><A HREF="index-38.htm" tppabs="http://pbs.mcp.com/ebooks/078971633X/index.htm"><IMG SRC="contents.gif" tppabs="http://pbs.mcp.com/ebooks/078971633X/button/contents.gif" WIDTH="128"
HEIGHT="28" ALIGN="BOTTOM" ALT="Contents" BORDER="0"></A> <BR>
</P>

<P>&copy; <A HREF="copy.htm" tppabs="http://pbs.mcp.com/ebooks/078971633X/copy.htm">Copyright</A>, Macmillan Computer Publishing. All
rights reserved.
</CENTER>

</BODY>

</HTML>
