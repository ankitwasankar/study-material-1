<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2//EN">
<HTML>

<HEAD>
<SCRIPT LANGUAGE="JavaScript">

<!--

function popUp(pPage) {
 var fullURL = document.location;
 var textURL = fullURL.toString();
 var URLlen = textURL.length;
 var lenMinusPage = textURL.lastIndexOf("/");
 lenMinusPage += 1;
 var fullPath = textURL.substring(0,lenMinusPage);
 popUpWin = window.open('','popWin','resizable=yes,scrollbars=no,width=525,height=394');
 figDoc= popUpWin.document;
 zhtm= '<HTML><HEAD><TITLE>' + pPage + '</TITLE>';
 zhtm += '</head>';
 zhtm += '<BODY bgcolor="#FFFFFF">';
 zhtm += '<IMG SRC="' + fullPath + pPage + '">';
 zhtm += '<P><B>' + pPage + '</B>';
 zhtm += '</BODY></HTML>';
 window.popUpWin.document.write(zhtm);
 window.popUpWin.document.close();
 // Johnny Jackson 4/28/98
 }

//-->
                                                                
</SCRIPT>
<link rel="stylesheet" href="ebooks.css" tppabs="http://pbs.mcp.com/includes/stylesheets/ebooks.css">

	<META HTTP-EQUIV="Content-Type" CONTENT="text/html;CHARSET=iso-8859-1">
	<TITLE>Using Visual Basic 6 -- Ch 20 -- Deploying Your Visual Basic Applications</TITLE>
</HEAD>

<BODY TEXT="#000000" BGCOLOR="#FFFFFF">

<CENTER>
<H1><IMG SRC="que.gif" tppabs="http://pbs.mcp.com/ebooks/078971633X/button/que.gif" WIDTH="171" HEIGHT="66" ALIGN="BOTTOM" BORDER="0"><BR>
Using Visual Basic 6</H1>
</CENTER>
<CENTER>
<P><A HREF="ch19.htm" tppabs="http://pbs.mcp.com/ebooks/078971633X/ch19/ch19.htm"><IMG SRC="previous.gif" tppabs="http://pbs.mcp.com/ebooks/078971633X/button/previous.gif" WIDTH="128" HEIGHT="28"
ALIGN="BOTTOM" ALT="Previous chapter" BORDER="0"></A><A HREF="ch21.htm" tppabs="http://pbs.mcp.com/ebooks/078971633X/ch21/ch21.htm"><IMG
SRC="next.gif" tppabs="http://pbs.mcp.com/ebooks/078971633X/button/next.gif" WIDTH="128" HEIGHT="28" ALIGN="BOTTOM" ALT="Next chapter"
BORDER="0"></A><A HREF="index-38.htm" tppabs="http://pbs.mcp.com/ebooks/078971633X/index.htm"><IMG SRC="contents.gif" tppabs="http://pbs.mcp.com/ebooks/078971633X/button/contents.gif" WIDTH="128"
HEIGHT="28" ALIGN="BOTTOM" ALT="Contents" BORDER="0"></A> 
<HR>

</CENTER>
<CENTER>
<H1>- 20 -<BR>
Deploying Your Visual Basic Applications</H1>
</CENTER>

<UL>
	<LI><A HREF="#Heading1">Working with Version Information</A>
	<LI><A HREF="#Heading2">Compiling Your Project</A>
	<LI><A HREF="#Heading3">Using the Package and Deployment Wizard</A>
</UL>

<P>
<HR SIZE="4">

<CENTER>
<H1></H1>
</CENTER>
<H2><A NAME="Heading1"></A>Working with Version Information</H2>


<BLOCKQUOTE>
	<P>
<HR>
<STRONG>Using revision numbers</STRONG></P>
	<P>The revision number is also known as the build number because it signifies how
	many times the application has been compiled by its creator. This is often helpful
	in technical support issues because the revision number is how bugs can be tracked.
	
<HR>


</BLOCKQUOTE>

<P>One of the first professional touches you can add to your application is to provide
commonly requested application information. This information includes the company
name, the version number, the revision (or build) number, and other similar information.
Visual Basic enables you to store all this information through the use of the App
object, a predefined object in Visual Basic that doesn't need to be specifically
created by your application.</P>
<P>Most properties of the App object are used to provide general information about
your application. Table 20.1 shows the most commonly used properties.</P>
<P>
<H4>TABLE 20.1&#160;&#160;Commonly Used App Object Properties</H4>
<P>
<TABLE BORDER="1">
	<TR ALIGN="LEFT" VALIGN="TOP">
		<TD ALIGN="LEFT">Property</TD>
		<TD ALIGN="LEFT">Description</TD>
	</TR>
	<TR ALIGN="LEFT" VALIGN="TOP">
		<TD ALIGN="LEFT">Comments</TD>
		<TD ALIGN="LEFT">Returns a string containing comments about the application. Read only at runtime.</TD>
	</TR>
	<TR ALIGN="LEFT" VALIGN="TOP">
		<TD ALIGN="LEFT">CompanyName</TD>
		<TD ALIGN="LEFT">Returns company or creator. Read only at runtime.</TD>
	</TR>
	<TR ALIGN="LEFT" VALIGN="TOP">
		<TD ALIGN="LEFT">EXEName</TD>
		<TD ALIGN="LEFT">Returns filename of .EXE without extension. Read only.</TD>
	</TR>
	<TR ALIGN="LEFT" VALIGN="TOP">
		<TD ALIGN="LEFT">FileDescription</TD>
		<TD ALIGN="LEFT">String that briefly describes the application's purpose. Read only at runtime.</TD>
	</TR>
	<TR ALIGN="LEFT" VALIGN="TOP">
		<TD ALIGN="LEFT">HelpFile</TD>
		<TD ALIGN="LEFT">Specifies the help file associated with the application. Read and write at runtime.</TD>
	</TR>
	<TR ALIGN="LEFT" VALIGN="TOP">
		<TD ALIGN="LEFT">LegalCopyright</TD>
		<TD ALIGN="LEFT">Returns copyright notification string. Use the Character Map program to add special
			symbols in this box. Read only at runtime.</TD>
	</TR>
	<TR ALIGN="LEFT" VALIGN="TOP">
		<TD ALIGN="LEFT">LegalTrademarks</TD>
		<TD ALIGN="LEFT">Returns trademark information, if necessary. Use the Character Map program to add
			special symbols in this box. Read only at runtime.</TD>
	</TR>
	<TR ALIGN="LEFT" VALIGN="TOP">
		<TD ALIGN="LEFT">Major</TD>
		<TD ALIGN="LEFT">Returns major version number (for example, the 4 in 4.3). Read only at runtime.</TD>
	</TR>
	<TR ALIGN="LEFT" VALIGN="TOP">
		<TD ALIGN="LEFT">Minor</TD>
		<TD ALIGN="LEFT">Returns minor version number (for example, the 3 in 4.3). Read only at runtime.</TD>
	</TR>
	<TR ALIGN="LEFT" VALIGN="TOP">
		<TD ALIGN="LEFT">Path</TD>
		<TD ALIGN="LEFT">Returns the directory from which the application started. Read only at runtime.</TD>
	</TR>
	<TR ALIGN="LEFT" VALIGN="TOP">
		<TD ALIGN="LEFT">PrevInstance</TD>
		<TD ALIGN="LEFT">Returns a value if an instance of the application is running. Read only at runtime.</TD>
	</TR>
	<TR ALIGN="LEFT" VALIGN="TOP">
		<TD ALIGN="LEFT">Product Name</TD>
		<TD ALIGN="LEFT">Returns the assigned product name of the application. Read only at runtime.</TD>
	</TR>
	<TR ALIGN="LEFT" VALIGN="TOP">
		<TD ALIGN="LEFT">Revision</TD>
		<TD ALIGN="LEFT">Returns the revision number of the application. Read only at runtime.</TD>
	</TR>
</TABLE>
</P>
<P>You can use these properties to communicate important information about your application
to those who will be using it. These properties are set in the Project Properties
dialog (see Figure 20.1).</P>
<P>You can read the values of these properties at runtime within your VB code (see
Listing 20.1). You can also set the value for the version information properties
of the App object by right-clicking the compiled EXE file and selecting <B>Properties
</B>from the pop-up menu (see Figure 20.2).</P>


<BLOCKQUOTE>
	<P>
<HR>
<STRONG>Read-only App properties</STRONG></P>
	<P>The values of the App object's version information properties are embedded within
	the binary format of your Visual Basic executable. They can't be changed at runtime.
	
<HR>


</BLOCKQUOTE>

<H4>LISTING 20.1&#160;&#160;Reading an App Object's Properties in Code</H4>
<PRE><B>01 </B>Private Sub cmdCopyright_Click()</PRE>
<PRE><B>02 </B>lblMain.Caption = App.LegalCopyright</PRE>
<PRE><B>03 </B>End Sub</PRE>
<PRE><B>04</B></PRE>
<PRE><B>05 </B>Private Sub cmdPath_Click()</PRE>
<PRE><B>06 </B>lblMain.Caption = App.Path</PRE>
<PRE><B>07 </B>End Sub</PRE>
<PRE><B>08</B></PRE>
<PRE><B>09 </B>Private Sub cmdProductName_Click()</PRE>
<PRE><B>10 </B>lblMain.Caption = App.ProductName</PRE>
<PRE><B>11 </B>End Sub</PRE>
<PRE><B>12</B></PRE>
<PRE><B>13 </B>Private Sub cmdVersionNum_Click()</PRE>
<PRE><B>14 </B>Dim strVerNum</PRE>
<PRE><B>15</B></PRE>
<PRE><B>16 </B>strVerNum = CStr(App.Major) &amp; &quot;.&quot; _</PRE>
<PRE>&amp; CStr(App.Minor) &amp; &quot;.&quot; _</PRE>
<PRE>&amp; CStr(App.Revision)</PRE>
<PRE><B>17</B></PRE>
<PRE><B>18 </B>lblMain.Caption = strVerNum</PRE>
<PRE><B>19 </B>End Sub</PRE>
<P><A HREF="javascript:popUp('20fig01.gif')"><B>FIGURE 20.1</B></A> <I>To access
the Project Properties dialog, choose ProjectName Prop<U>e</U>rties from the <U>P</U>roject
menu.</I></P>
<P><A HREF="javascript:popUp('20fig02.gif')"><B>FIGURE 20.2</B></A> <I>Select the
Version tab in Windows Explorer to see the version properties.</I></P>
<P>Working with the App object's properties is important because through these properties
you and your users can manage multiple releases of your code. Also, using the version
properties of the App object, such as LegalCopyright and LegalTrademark, is the way
by which users can verify that the program you made is really yours, thus avoiding
potential incidents of piracy.</P>
<P>
<H2><A NAME="Heading2"></A>Compiling Your Project</H2>
<P>After you set the values for the properties of your project's App object, you
can compile your code. Up to this point in your programming activity, your project
has been a collection of text and graphic files, which you've built with the Visual
Basic IDE. Now it's time to transform these files into an executable file that will
run independently of the IDE. This process is called <I>compiling</I> <I>your code
</I>or <I>making an executable</I>.</P>
<P>Visual Basic 6.0 supports two formats into which you can compile your code: P-code
or native code. When you compile your code into P-code, the resulting executable
file runs as interpreted code, just as it did in previous versions of Visual Basic.
(P-code isn't the same thing as pseudocode.) Interpreted code is read by a runtime
engine that determines the instructions to run. It's like giving someone an instruction
sheet to build a product instead of giving them the product directly. The person
receiving the instructions has to put all the pieces together correctly to create
the end product.</P>


<BLOCKQUOTE>
	<P>
<HR>
<STRONG>P-code versus native code</STRONG></P>
	<P>A native code executable file tends to be bigger in size than its P-code cousin.
	Thus, if you want to deploy the smallest possible executable file, you should use
	P-code. However, if you want the fastest code possible, you should distribute your
	application in Native code. 
<HR>


</BLOCKQUOTE>

<P>If you compile the code as native code, the project files are transformed into
more efficient binary code that uses your computer processor's full capabilities.
This code tends to execute much faster<I>. </I>However, native code still requires
the runtime DLLs--the only difference is that the DLLs are accessed and used differently
by the EXE.</P>
<P><B>Compile your code into a standard EXE</B>

<DL>
	<DT></DT>
	<DD><B>1. </B>Open the project that you want to compile.
	<P>
	<DT></DT>
	<DD><B>2. </B>Choose <B>Make <I>ProjectName</I>.exe</B> from the <B>File</B> menu.
	The Make Project dialog appears (see Figure 20.3).
	<P>
</DL>

<P><A HREF="javascript:popUp('20fig04.gif')"><B>FIGURE 20.3</B></A> <I>Enter the
name of the executable in this dialog. Click the Options button to change some of
the App object's properties.</I></P>

<DL>
	<DT><I></I></DT>
	<DD><B>3. </B>Rename the executable file in the <B>File Name</B> text box, if you
	want.
	<P>
	<DT></DT>
	<DD><B>4. </B>Click the <B>Options</B> button to open the Project Properties dialog.
	On the <B>Compile</B> page, choose between <B>P-Code</B> or <B>Native Code</B> compilation
	(see Figure 20.4).
	<P>
	<DT></DT>
	<DD><B>5. </B>Click <B>OK</B> in the Project Properties and Make Project dialogs
	to compile the code.
	<P>
</DL>

<P><A HREF="javascript:popUp('20fig05.gif')"><B>FIGURE 20.4</B></A> <I>You can select
from many options for native code compilation. Generally, the faster code option
creates a larger file size for the executable.</I></P>


<BLOCKQUOTE>
	<P>
<HR>
The make process that you've just completed pertains to standard EXE projects. You
	can make many other types of projects with Visual Basic 6.0, including ActiveX controls
	and ActiveX DLLs. This chapter is focusing on making standalone executables, however;
	building ActiveX controls is covered in Chapter 27, &quot;Creating Your Own ActiveX
	Controls with Visual Basic.&quot; 
<HR>


</BLOCKQUOTE>

<P>Completing this process produces an executable file that runs outside the Visual
Basic IDE. However, your application isn't fully ready for deployment. To deploy
the application, you need to run the Application Setup Wizard for the executable
to be able to run on a system on which Visual Basic is <I>not</I> installed.</P>
<P>
<H2><A NAME="Heading3"></A>Using the Package and Deployment Wizard</H2>
<P>Because Visual Basic applications can be created in many different forms and used
on different platforms, including the Internet, the old Application Setup Wizard
has been replaced by the Package and Deployment Wizard in Visual Basic 6. You can
use this tool to create installation packages for any type of application you build
in Visual Basic. This section concentrates on creating an installation package for
a standalone application.</P>
<P>To begin, start the Package and Deployment Wizard (shown in Figure 20.5). It should
be listed on the <B>Visual Basic</B> submenu of your <B>Start</B> menu because it's
installed by default. If not, you might have to install the tool on your system.</P>
<P>If you have ever used a previous version of the Setup Wizard included with Visual
Basic, this tool will amaze you. Microsoft finally listened to programmer complaints
and included a respectable installation tool. It doesn't do everything, but it can
handle most of the simple installations required for Visual Basic applications.</P>
<P><A HREF="javascript:popUp('20fig06.gif')"><B>FIGURE 20.5</B></A> <I>The Package
and Deployment Wizard is new with Visual Basic 6.0. It replaces the Setup Wizard.</I></P>
<P><B>Create an installation package</B></P>


<BLOCKQUOTE>
	<P>
<HR>
<STRONG>Selecting a sample project</STRONG></P>
	<P>For these steps, you can use any Visual Basic project you have, or you can use
	a sample from Visual Basic. This section uses the ATM sample project included with
	VB. 
<HR>


</BLOCKQUOTE>


<DL>
	<DT></DT>
	<DD><B>1. </B>Select the project file at the top of the dialog.
	<P>
	<DT></DT>
	<DD><B>2. </B>To build a self-extracting setup program, click the <B>Package</B>
	button.
	<P>
	<DT></DT>
	<DD><B>3. </B>If you haven't compiled your application, the wizard will ask to compile
	the application for you (see Figure 20.6). Click the <B>Compile</B> button to continue.
	<P>
</DL>

<P><A HREF="javascript:popUp('20fig07.gif')"><B>FIGURE 20.6</B></A> <I>The wizard
needs to bundle an EXE file with the setup program, so it automatically compiles
the application for you from the VB project file.</I></P>

<DL>
	<DT><I></I></DT>
	<DD><B>4. </B>After the wizard compiles your application, it will ask you what type
	of package you want to build (see Figure 20.7). Select <B>Standard Setup Package</B>
	and click the <B>Next </B>button.
	<P>
</DL>



<BLOCKQUOTE>
	<P>
<HR>
<STRONG>Save installation files to hard drive</STRONG></P>
	<P>Don't tell the wizard to save your files to floppy or CD-ROM at this point in
	the process; the wizard needs to modify the files several times before completing
	the process. Store the files on your hard drive and create the CD when the process
	is all done. 
<HR>


</BLOCKQUOTE>


<DL>
	<DT></DT>
	<DD><B>5. </B>Indicate where you want to place the installation files that the wizard
	will create. These files will eventually be copied to your distribution media, whether
	it be a disk or CD-ROM. Select a directory (see Figure 20.8) and click <B>Next </B>to
	continue.
	<P>
</DL>

<P><A HREF="javascript:popUp('20fig08.gif')"><B>FIGURE 20.7</B></A> <I>Select the
type of package you want to build with the wizard.</I></P>
<P><A HREF="javascript:popUp('20fig09.gif')"><B>FIGURE 20.8</B></A> <I>The wizard
needs a temporary holding location for the files involved in the installation.</I></P>

<DL>
	<DT><I></I></DT>
	<DD><B>6. </B>As mentioned earlier, Visual Basic applications consist of more files
	than just the executable. The next dialog (see Figure 20.9) lists the files that
	need to be installed with your executable. If you have other files (such as help
	files, as discussed in Chapter 24, &quot;Adding Help to Your Programs&quot;) that
	should be installed, you can add them at this point. Because you don't have any other
	files in this case, click <B>Next </B>to continue.
	<P>
</DL>



<BLOCKQUOTE>
	<P>
<HR>
<STRONG>Working with CAB files</STRONG></P>
	<P>The files that the wizard will produce are called CAB, or cabinet files. These
	files are a special type of archive file designed by Microsoft, much like a ZIP file.
	If you use the popular utility WinZIP, the 7.0 release will have support for viewing
	the contents of CAB files. CAB files are used by various tools, including Windows
	98, for storing installation files. 
<HR>


</BLOCKQUOTE>


<DL>
	<DT></DT>
	<DD><B>7. </B>The next step in the wizard deals with the size of the distribution
	media you want to use. If you plan to put your application on disks, the biggest
	file that the wizard can produce is the maximum size of the disk. Because you're
	not actually going to copy these files to floppy for this example, select the <B>Single
	Cab</B> option and click <B>Next </B>to continue.
	<P>
</DL>

<P><A HREF="javascript:popUp('20fig10.gif')"><B>FIGURE 20.9</B></A> <I>This dialog
shows a complete list of the files required to make this application run on another
computer.</I></P>

<DL>
	<DT><I></I></DT>
	<DD><B>8. </B>Next, specify the title of your application (see Figure 20.10). This
	title will be shown during installation. Enter an appropriate title and click <B>Next
	</B>to continue.
	<P>
</DL>

<P><A HREF="javascript:popUp('20fig11.gif')"><B>FIGURE 20.10</B></A> <I>Enter the
title of your application in this dialog.</I></P>

<DL>
	<DT><I></I></DT>
	<DD><B>9. </B>For your application to be used, it needs to have an icon on the Start
	menu. The next step in the wizard (see Figure 20.11) is a unique way to specify the
	icon groups and icons to create. The default settings are to create a group with
	the application's name and then to create an icon to start the program.
	<P>
	<DT></DT>
	<DD>Because the application has only a single icon, the standard is to create that
	icon under Programs<B>. </B>Click the ATM group and then click the <B>Remove</B>
	button. Next, click the <B>New Item</B> button, enter the name of the application,
	and click <B>OK</B> in the dialog that appears (see Figure 20.12). Click <B>Next
	</B>when you're finished adding groups and icons.
	<P>
</DL>

<P><A HREF="javascript:popUp('20fig12.gif')"><B>FIGURE 20.11</B></A> <I>Pick the
icons and groups you want created for your application.</I></P>
<P><A HREF="javascript:popUp('20fig14.gif')"><B>FIGURE 20.12</B></A> <I>Specify certain
options about each icon you want to create.</I></P>

<DL>
	<DT><I></I></DT>
	<DD><B>10. </B>The next dialog (see Figure 20.13) enables you to change the installation
	location of each file that's not required by the system. All system files are automatically
	installed in the \Windows\System directory; everything else is up to you. Because
	the specified directory is correct for this example, click <B>Next</B>.
	<P>
	<DT></DT>
	<DD><B>11. </B>Certain files, such as DLLs and OCXs, are considered shared files.
	If you were adding any of these files as part of your installation, they should be
	marked as shared so that when users uninstall your application, the shared files
	are verified before removal. The dialog shown in Figure 20.14 lets you mark any files
	as shared. Standalone executables like this one normally aren't shared, however,
	so click <B>Next</B>.
	<P>
</DL>

<P><A HREF="javascript:popUp('20fig15.gif')"><B>FIGURE 20.13</B></A> <I>If you need
to change the installation directory for files you've added, this dialog lets you
do it.</I></P>
<P><A HREF="javascript:popUp('20fig16.gif')"><B>FIGURE 20.14</B></A><B> </B><I>Mark
any shared files as such in this dialog.</I></P>

<DL>
	<DT><I></I></DT>
	<DD><B>12. </B>Give your script a name (see Figure 20.15) and click the <B>Finish
	</B>button to build your installation package.
	<P>
</DL>

<P><A HREF="javascript:popUp('20fig17.gif')"><B>FIGURE 20.15</B></A> <I>The last
step in the wizard enables you to give your script a name for later use.</I></P>

<DL>
	<DT><I></I></DT>
	<DD><B>13. </B>After the wizard finishes building the installation package, it generates
	a report with some important messages about what was accomplished. Read the report
	and then click <B>Close </B>on the report and the wizard.
</DL>

<H1></H1>
<CENTER>
<P>
<HR>
<A HREF="ch19.htm" tppabs="http://pbs.mcp.com/ebooks/078971633X/ch19/ch19.htm"><IMG SRC="previous.gif" tppabs="http://pbs.mcp.com/ebooks/078971633X/button/previous.gif" WIDTH="128" HEIGHT="28"
ALIGN="BOTTOM" ALT="Previous chapter" BORDER="0"></A><A HREF="ch21.htm" tppabs="http://pbs.mcp.com/ebooks/078971633X/ch21/ch21.htm"><IMG
SRC="next.gif" tppabs="http://pbs.mcp.com/ebooks/078971633X/button/next.gif" WIDTH="128" HEIGHT="28" ALIGN="BOTTOM" ALT="Next chapter"
BORDER="0"></A><A HREF="index-38.htm" tppabs="http://pbs.mcp.com/ebooks/078971633X/index.htm"><IMG SRC="contents.gif" tppabs="http://pbs.mcp.com/ebooks/078971633X/button/contents.gif" WIDTH="128"
HEIGHT="28" ALIGN="BOTTOM" ALT="Contents" BORDER="0"></A> </P>

<P>&#169; <A HREF="copy.htm" tppabs="http://pbs.mcp.com/ebooks/078971633X/copy.htm">Copyright</A>, Macmillan Computer Publishing. All
rights reserved.
</CENTER>


</BODY>

</HTML>
