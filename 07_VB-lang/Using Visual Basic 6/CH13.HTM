<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2//EN">
<HTML>

<HEAD>
	<META HTTP-EQUIV="Content-Type" CONTENT="text/html;CHARSET=iso-8859-1">
<SCRIPT LANGUAGE="JavaScript">

<!--

function popUp(pPage) {
 var fullURL = document.location;
 var textURL = fullURL.toString();
 var URLlen = textURL.length;
 var lenMinusPage = textURL.lastIndexOf("/");
 lenMinusPage += 1;
 var fullPath = textURL.substring(0,lenMinusPage);
 popUpWin = window.open('','popWin','resizable=yes,scrollbars=no,width=525,height=394');
 figDoc= popUpWin.document;
 zhtm= '<HTML><HEAD><TITLE>' + pPage + '</TITLE>';
 zhtm += '</head>';
 zhtm += '<BODY bgcolor="#FFFFFF">';
 zhtm += '<IMG SRC="' + fullPath + pPage + '">';
 zhtm += '<P><B>' + pPage + '</B>';
 zhtm += '</BODY></HTML>';
 window.popUpWin.document.write(zhtm);
 window.popUpWin.document.close();
 // Johnny Jackson 4/28/98
 }

//-->
                                                                
</SCRIPT>
<link rel="stylesheet" href="ebooks.css" tppabs="http://pbs.mcp.com/includes/stylesheets/ebooks.css">

	<META NAME="GENERATOR" Content="Symantec Visual Page Mac 1.1.1">
	<TITLE>Using Visual Basic 6 -- Ch 13 -- Creating Menus in Your Programs</TITLE>
</HEAD>

<BODY TEXT="#000000" BGCOLOR="#FFFFFF">

<H1 ALIGN="CENTER"><IMG SRC="que.gif" tppabs="http://pbs.mcp.com/ebooks/078971633X/button/que.gif" WIDTH="171" HEIGHT="66" ALIGN="BOTTOM"
BORDER="0"><BR>
Using Visual Basic 6</H1>
<CENTER>
<P><A HREF="ch12.htm" tppabs="http://pbs.mcp.com/ebooks/078971633X/ch12/ch12.htm"><IMG SRC="previous.gif" tppabs="http://pbs.mcp.com/ebooks/078971633X/button/previous.gif" WIDTH="128" HEIGHT="28"
ALIGN="BOTTOM" ALT="Previous chapter" BORDER="0"></A><A HREF="ch14.htm" tppabs="http://pbs.mcp.com/ebooks/078971633X/ch14/ch14.htm"><IMG
SRC="next.gif" tppabs="http://pbs.mcp.com/ebooks/078971633X/button/next.gif" WIDTH="128" HEIGHT="28" ALIGN="BOTTOM" ALT="Next chapter"
BORDER="0"></A><A HREF="index-38.htm" tppabs="http://pbs.mcp.com/ebooks/078971633X/index.htm"><IMG SRC="contents.gif" tppabs="http://pbs.mcp.com/ebooks/078971633X/button/contents.gif" WIDTH="128"
HEIGHT="28" ALIGN="BOTTOM" ALT="Contents" BORDER="0"></A> 
<HR>

</CENTER>
<H1 ALIGN="CENTER">- 13 -<BR>
Creating Menus in Your Programs</H1>
<H1></H1>

<UL>
	<LI><A HREF="#Heading1">Understanding the Windows Standard Menus</A>
	<LI><A HREF="#Heading2">Using Visual Basic's Application Wizard</A>
	<LI><A HREF="#Heading3">Using Visual Basic's Menu Editor</A>
	<UL>
		<LI><A HREF="#Heading4">Setting Menu Properties</A>
		<LI><A HREF="#Heading5">Adding Access Keys to Menu Items</A>
		<LI><A HREF="#Heading6">Adding Shortcut Keys to Menu Items</A>
		<LI><A HREF="#Heading7">Creating Pop-Up Menus</A>
	</UL>
	<LI><A HREF="#Heading8">Creating Complex Menus</A>
	<UL>
		<LI><A HREF="#Heading9">Adding Separator Lines to Menus</A>
		<LI><A HREF="#Heading10">Using the Checked Property</A>
		<LI><A HREF="#Heading11">Cutting, Copying, and Pasting with the Clipboard Object</A>
		<LI><A HREF="#Heading12">Selecting Text in a TextBox</A>
	</UL>
</UL>

<P>
<HR SIZE="4">

<H2><A NAME="Heading1"></A>Understanding the Windows Standard Menus</H2>
<P>Any program with more than a few simple functions or features can benefit from
the addition of a well-built menu. When you design your program, the goal is to make
your features as easy to use as possible. A well-designed menu will accomplish this
goal.</P>
<P>The menu will be one of the most visible features of your application. A good
menu will make using your program easy. Your program will seem natural and familiar
to the user. A bad menu at best will confuse your users and could actually keep them
from understanding how your program works.</P>
<P>Many programs have file functions that let users create and save files. Programs
that use any common Windows features, such as opening and saving files or copying
and pasting text, have the additional requirement of complying with the expected
standards for Window application menus. You handle this expectation of your programs
by building Windows standard menus.</P>
<P>Microsoft's goal is to make all the main Windows features standard across the
entire Windows graphical user interface (GUI). This basically means that no matter
what program you are in--whether it be Word, Excel, or Access--the main features
will look and work the same. For instance, the way you access the Printer feature
in one program will be the same in all programs across the entire platform. These
standards are documented in many places, such as in the help systems within Windows,
on Microsoft's Web page, and in countless books, magazines, and articles.</P>


<BLOCKQUOTE>
	<P>
<HR>
<STRONG>When to break tradition</STRONG></P>
	<P>Unless there's a powerful reason to go against the tradition of using the <U>F</U>ile,
	<U>E</U>dit, and Help menus in your application, it's better to observe this tradition.
	One example of when it would be important to break with tradition is when your functions
	are significantly different from the standard functions. The new location alerts
	your users that something is different from what they would normally expect to do.
	
<HR>


</BLOCKQUOTE>

<P>The expected location and function of the common Windows menu features have evolved
through habit. The most common features are the <B>File</B>, <B>Edit</B>, and <B>Help</B>
menus. The first two are usually the first choices on the left side of the menu bar;
the <B>Help</B> menu is usually the last choice on the main menu bar. Don't use &gt;&gt;
to indicate submenus.</P>
<P>The individual elements of Windows standard menus also follow a standard, as listed
in Table 13.1.</P>
<P>
<H4>TABLE 13.1&nbsp;&nbsp;Windows Standard Menu Conventions</H4>
<P>
<TABLE BORDER="1">
	<TR ALIGN="LEFT" VALIGN="TOP">
		<TD ALIGN="LEFT"><B><I>Feature</I></B></TD>
		<TD ALIGN="LEFT"><B><I>Convention</I></B></TD>
	</TR>
	<TR ALIGN="LEFT" VALIGN="TOP">
		<TD ALIGN="LEFT">Caption</TD>
		<TD ALIGN="LEFT">Use one or two short specific words.</TD>
	</TR>
	<TR ALIGN="LEFT" VALIGN="TOP">
		<TD ALIGN="LEFT">Organization</TD>
		<TD ALIGN="LEFT">Menu items should be grouped logically by function and allow for a minimal number
			of levels to access each feature.</TD>
	</TR>
	<TR ALIGN="LEFT" VALIGN="TOP">
		<TD ALIGN="LEFT">Access keys</TD>
		<TD ALIGN="LEFT">Each menu item should be assigned an access key (the underlined letter in a menu
			or menu selection) to allow for keyboard access to the menu choices. The key should
			be unique in each section of the menu and is normally the first letter of the caption.</TD>
	</TR>
	<TR ALIGN="LEFT" VALIGN="TOP">
		<TD ALIGN="LEFT">Shortcut keys</TD>
		<TD ALIGN="LEFT">Any menu features that are frequently used or need to be available from any part
			of the program should be assigned a shortcut key. Each shortcut key can be assigned
			to only one menu item.</TD>
	</TR>
	<TR ALIGN="LEFT" VALIGN="TOP">
		<TD ALIGN="LEFT">Check box</TD>
		<TD ALIGN="LEFT">Menu items that simply set or clear a single program option should contain a checked
			feature directly in the menu.</TD>
	</TR>
	<TR ALIGN="LEFT" VALIGN="TOP">
		<TD ALIGN="LEFT">Ellipsis</TD>
		<TD ALIGN="LEFT">Each menu item that opens a dialog should be followed by an ellipsis (...).</TD>
	</TR>
</TABLE>

<H2><A NAME="Heading2"></A>Using Visual Basic's Application Wizard</H2>
<P>Visual Basic 6 has improved the Application Wizard to allow for the creation of
fully customized menus directly in the wizard. In the earlier versions of the wizard,
you could select from only a limited set of standard menu options to include in your
application. This improvement makes the wizard a useful tool and a good starting
point for building and understanding your first menu.</P>


<BLOCKQUOTE>
	<P>
<HR>
<STRONG>Application Wizard options</STRONG></P>
	<P>Most programmers don't know all the standard features they want to use in an application
	until later in the development process. For this reason, if you use the Application
	Wizard, you should select any option you think you might use in your program. You
	can always delete it later. 
<HR>


</BLOCKQUOTE>

<P>The primary benefit of VB's Application Wizard is that it can make menus that
have the Windows standard features already loaded. You simply select the features
you want from the template provided. They're also already arranged in the Windows
standard layout.</P>


<BLOCKQUOTE>
	<P>
<HR>
<STRONG>Limitations of the Application Wizard</STRONG></P>
	<P>You can't use the Application Wizard to modify existing projects. Many third-party
	support programs add more functionality to your project without having you do more
	programming. You can also use the add-ins that come with Visual Basic, such as the
	Menu Editor. 
<HR>


</BLOCKQUOTE>

<P>The Application Wizard is a straightforward tool for building a new application.
This means that the Application Wizard is used to build a functional application
shell with standard features. If you want additional features, you have to program
them yourself or use the Menu Editor to add them. After you click <B>Finish</B> in
the Application Wizard and the base program is generated, you're on your own to make
changes to the program by using the Menu Editor (discussed later in this chapter).</P>
<P><B>Build a simple menu with the Application Wizard</B>

<DL>
	<DT></DT>
	<DD><B>1. </B>Start the Application Wizard through the default dialog that opens
	when Visual Basic 6.0 starts or by choosing <B>New Project</B> from the <B>File</B>
	menu (see Figure 13.1).
	<P>
</DL>

<P><A HREF="javascript:popUp('13fig01.gif')"><B>FIGURE 13.1</B></A> <I>Double-click
the Application Wizard icon to start the wizard.</I></P>

<DL>
	<DT><I></I></DT>
	<DD><B>2. </B>The wizard's Introduction dialog allows you to reuse the answers you
	saved during a previous Application Wizard session (see Figure 13.2). Leave the default
	choice and choose <B>Next</B>.
	<P>
</DL>



<BLOCKQUOTE>
	<P>
<HR>
<B>Save some time in building the program menu</B></P>
	<P>By saving your settings in the Application Wizard, you can save time re-entering
	choices you've already made. The Application Wizard saves the menu and toolbar settings
	in a profile file (.RWP). Profiles also provide a basis for a consistent look and
	feel to your programs while reducing duplicate effort in building the menus. This
	allows for a common starting point in the development of an application, which is
	helpful in large projects in which many teams of developers might be working on separate
	parts of a single large application. 
<HR>


</BLOCKQUOTE>


<DL>
	<DT></DT>
	<DD><B>3. </B>In the Interface Type dialog, select the type for the initial application
	screen (see Figure 13.3). For this sample application, select <B>Single Document
	Interface</B>. Leave the default project name and choose <B>Next</B>.
	<P>
	<DT></DT>
	<DD><B>4. </B>A Windows standard default menu is created for you to begin to modify.
	Not all possible choices have been selected in the initial menu, as shown in Figure
	13.4. After you make your modifications, choose <B>Next</B>.
	<P>
	<DT></DT>
	<DD><B>5. </B>The Application Wizard allows for the customization of a toolbar, resource
	file, browser, database connectivity, and other templates. For this example, skip
	these dialogs; choose <B>Next</B> five times to get to the final dialog.
	<P>
</DL>

<P><A HREF="javascript:popUp('13fig02.gif')"><B>FIGURE 13.2</B></A> <I>Profiles allow
for the reloading of choices from previously completed and saved Application Wizard
sessions.</I></P>
<P><A HREF="javascript:popUp('13fig03.gif')"><B>FIGURE 13.3</B></A> <I>Selection
of interface types is based on how the application will be used. Multitask applications
often use MDI.</I></P>
<P><A HREF="javascript:popUp('13fig04.gif')"><B>FIGURE 13.4</B></A> <I>Select the
menu and submenu types for your application.</I></P>

<DL>
	<DT><I></I></DT>
	<DD><B>6. </B>In the last dialog, you can save your profile (see Figure 13.5). Enter
	a name for your profile that will be easy to relate to your application. After you
	enter the name, choose <B>Finish</B> to complete the Application Wizard. (Clicking
	<B>Finish</B> on any of the earlier dialogs in the wizard bypasses the option to
	save the profile for future use.)
	<P>
</DL>

<P><A HREF="javascript:popUp('13fig05.gif')"><B>FIGURE 13.5</B></A> <I>Enter the
profile name on the final screen.</I></P>
<H2><A NAME="Heading3"></A>Using Visual Basic's Menu Editor</H2>
<P>The Menu Editor allows you to create menu bars from scratch or modify already
created menus. As with the Application Wizard, these menus are located at the top
of a form, with associated drop-down submenus or pop-up menus that users typically
access by right-clicking.</P>
<P><B>Make a simple menu with the Menu Editor</B>

<DL>
	<DT></DT>
	<DD><B>1. </B>Open a new project. Save the project with a new filename. Rename the
	default form (with a name such as frmMenu) and save it to a new filename, such as
	frmMenu.frm.
	<P>
</DL>



<BLOCKQUOTE>
	<P>
<HR>
<STRONG>Don't press Enter yet!</STRONG></P>
	<P>Press Tab or use the mouse to move between text boxes in the Menu Editor; otherwise,
	you cause the Menu Editor to create a new menu item. 
<HR>
<BR>
	
<HR>
<STRONG>Using ampersands</STRONG></P>
	<P>Including an ampersand in the menu caption forces the character that comes after
	it to be underlined when it appears in the menu. The underlined character becomes
	the hot key, which users can press (combined with the Alt key) to make a selection.
	For example, with the F underlined on the <U>F</U>ile menu, users can press Alt+F
	to pull down that menu. 
<HR>


</BLOCKQUOTE>


<DL>
	<DT></DT>
	<DD><B>2. </B>Open the Menu Editor by clicking the Menu Editor button on the Standard
	toolbar. If the form doesn't have the focus, the Menu Editor icon is grayed out.
	<P>
	<DT></DT>
	<DD><B>3. </B>In the Menu Editor dialog, type &amp;File in the <B>Caption</B> text
	box and mnuFile in the <B>Name</B> text box. Click <B>Next</B>.
	<P>
	<DT></DT>
	<DD><B>4. </B>Click the button with the arrow pointing to the right. This is the
	indent button.
	<P>
	<DT></DT>
	<DD><B>5. </B>Type E&amp;xit in the <B>Caption</B> text box and itmExit in the <B>Name</B>
	text box. Your menu should appear in the dialog as shown in Figure 13.6.
	<P>
	<DT></DT>
	<DD><B>6. </B>Click <B>OK.</B>
	<P>
	<DT></DT>
	<DD><B>7. </B>The menu you created is embedded in the form (see Figure 13.7). Drop
	down the <B>File</B> menu that you just created and click <B>Exit</B>. The code window
	for the itmExit_Click() event procedure appears.
	<P>
	<DT></DT>
	<DD><B>8. </B>Add the Unload Me statement to the itmExit event procedure, as shown
	in Figure 13.8.
	<P>
	<DT></DT>
	<DD><B>9. </B>Press F5 to run the code.
	<P>
</DL>

<P><A HREF="javascript:popUp('13fig08.gif')"><B>FIGURE 13.6</B></A> <I>The arrow
buttons allow you to indent and rearrange items in the menu list.</I></P>
<P><A HREF="javascript:popUp('13fig09.gif')"><B>FIGURE 13.7</B></A> <I>An entry item
in a menu is like any other Visual Basic control. It has properties and one event:
the click event.</I></P>
<P>Granted, this exercise is simple, but it demonstrates the fundamental techniques
for making a menu with the Menu Editor. You've added a <B>File</B> menu to the main
form. Your menu has a submenu item, <B>Exit</B>, that allows users to terminate the
program. You accomplished program termination by putting the End statement in the
event procedure for the <B>Exit</B> menu item's click event.</P>
<P><A HREF="javascript:popUp('13fig10.gif')"><B>FIGURE 13.8</B></A> <I>You write
code in menu-item event procedures as you would for any other Visual Basic control.</I></P>
<P>
<H3><A NAME="Heading4"></A>Setting Menu Properties</H3>
<P>As mentioned earlier, a menu is a control with its own set of properties and one
event, the Click() event. Table 13.2 shows the most commonly used properties for
a Menu object.</P>
<P>
<H4>TABLE 13.2&nbsp;&nbsp;Commonly Used Properties of the Menu Object</H4>
<P>
<TABLE BORDER="1">
	<TR ALIGN="LEFT" VALIGN="TOP">
		<TD ALIGN="LEFT"><B><I>Property</I></B></TD>
		<TD ALIGN="LEFT"><B><I>Value/Type</I></B></TD>
		<TD ALIGN="LEFT"><B><I>Description</I></B></TD>
	</TR>
	<TR ALIGN="LEFT" VALIGN="TOP">
		<TD ALIGN="LEFT">Caption</TD>
		<TD ALIGN="LEFT">String</TD>
		<TD ALIGN="LEFT">The text that appears on the menu bar.</TD>
	</TR>
	<TR ALIGN="LEFT" VALIGN="TOP">
		<TD ALIGN="LEFT">Checked</TD>
		<TD ALIGN="LEFT">Boolean</TD>
		<TD ALIGN="LEFT">Puts a check mark before the Caption string of a menu item.</TD>
	</TR>
	<TR ALIGN="LEFT" VALIGN="TOP">
		<TD ALIGN="LEFT">Enabled</TD>
		<TD ALIGN="LEFT">Boolean</TD>
		<TD ALIGN="LEFT">Doesn't gray out the Caption string if True.</TD>
	</TR>
	<TR ALIGN="LEFT" VALIGN="TOP">
		<TD ALIGN="LEFT">Name</TD>
		<TD ALIGN="LEFT">String</TD>
		<TD ALIGN="LEFT">The name of the object--available only at design time.</TD>
	</TR>
	<TR ALIGN="LEFT" VALIGN="TOP">
		<TD ALIGN="LEFT">Property</TD>
		<TD ALIGN="LEFT">Value/Type</TD>
		<TD ALIGN="LEFT">Description</TD>
	</TR>
	<TR ALIGN="LEFT" VALIGN="TOP">
		<TD ALIGN="LEFT">Shortcut</TD>
		<TD ALIGN="LEFT">N/A</TD>
		<TD ALIGN="LEFT">A key combination that allows you to access the menu item's functionality. You can
			choose this setting only at design time from a list that appears in the <B>Shortcut</B>
			drop-down list in the Menu Editor.</TD>
	</TR>
	<TR ALIGN="LEFT" VALIGN="TOP">
		<TD ALIGN="LEFT">WindowList</TD>
		<TD ALIGN="LEFT">Boolean</TD>
		<TD ALIGN="LEFT">Makes a top-level menu in an MDI form display a list of windows open in that MDI
			form--available only at design time.</TD>
	</TR>
</TABLE>
</P>
<P>As with any control, you assign a value to the Name property when you create a
menu or menu item. Failing to set the Name value results in an error. Another common
mistake is to leave the value of the Caption property set to null (&quot;&quot;),
which results in a functional menu item that shows up in the menu bar as a blank
line.</P>
<P>
<H3><A NAME="Heading5"></A>Adding Access Keys to Menu Items</H3>
<P>In addition to clicking a menu item to perform a task, you can access a menu item's
functionality by using <I>access keys</I>. Access keys allow users to perform menu
selections by pressing Alt and then the assigned letter of the access key. After
a menu is open, users select from the menu by pressing the access key for the desired
menu choice.</P>
<P>An access key is denoted by an underlined character in a menu item's Caption--for
example, the F in <B>File</B> on a standard Windows menu bar. When you press Alt+F,
the result is the same as if you had clicked <B>File</B> on the menu bar.</P>
<P>To denote an access character, put an ampersand before the character you want
to use. In Figure 13.9, the ampersand indicates that the letter F in File will be
underlined.</P>
<P><A HREF="javascript:popUp('13fig11.gif')"><B>FIGURE 13.9</B></A> <I>Shortcut keys
are assigned in the Menu Editor before compiling the program and can't be changed
in the runtime environment.</I></P>


<BLOCKQUOTE>
	<P>
<HR>
<STRONG>Don't do this!</STRONG></P>
	<P>Putting two access keys with the same letter in the same part of the submenu is
	bad programming practice and should be avoided. Doing so just complicates things
	for users; however, the purpose of using GUIs is to simplify things. 
<HR>


</BLOCKQUOTE>

<P>Access keys are grouped according to menus. You can have different access keys
with the same letter--<B>Save</B> and <B>Paste Special</B>, for instance--as long
as they appear in different menus. (In Microsoft Word, these commands would appear
under the menus <B>File</B> and <B>Edit</B>, respectively.) If you put two access
keys with the same letter in the same part of the submenu, the first key in the hierarchy
will be the first one executed. When the access key is pressed for the second time,
the next menu item with the same matching key is selected.</P>
<P>Access keys are especially helpful in programs that require a lot of keyboard
entry. If an access key is assigned, your users don't have to break their typing
position and reach for the mouse to perform a function.</P>
<P>
<H3><A NAME="Heading6"></A>Adding Shortcut Keys to Menu Items</H3>


<BLOCKQUOTE>
	<P>
<HR>
<STRONG>Adding shortcut keys with the Menu Editor</STRONG></P>
	<P>In the Application Wizard, you aren't given a chance to enter any shortcut keys
	for your custom menu items; the standard Windows menu shortcuts are added. You have
	to use the Menu Editor to go back in and add shortcut keys to your custom menu elements.
	
<HR>


</BLOCKQUOTE>

<P>Using <I>shortcut keys</I> (also known as <I>accelerator keys</I>) is another
way of performing menu functions from the keyboard. You set a shortcut key combination
by choosing a combination from the Menu Editor's <B>Shortcut</B> drop-down list (see
Figure 13.10).</P>
<P>Shortcut keys work anywhere in the program, whether or not the menu item is visible.
That's why they're called shortcuts--they're active all the time, and users can jump
to the function without going through the menu selection process.</P>
<P><A HREF="javascript:popUp('13fig12.gif')"><B>FIGURE 13.10</B></A> <I>Each application
can have only one instance of an accelerator key combination. If you use Ctrl+N for
<U>N</U>ew, you can't use Ctrl+N for Ope<U>n</U> too.</I></P>
<P>You can assign a shortcut key or key combination to only one menu element; redundancies
aren't accepted. The Visual Basic IDE catches the error when you attempt to enter
a duplicate entry (see Figure 13.11). In this situation, Visual Basic doesn't enforce
uniqueness when editing menus.</P>
<P><A HREF="javascript:popUp('13fig13.gif')"><B>FIGURE 13.11</B></A> <I>Visual Basic's
Menu Editor catches the error when you click OK.</I></P>
<P>
<H3><A NAME="Heading7"></A>Creating Pop-Up Menus</H3>
<P>There are two types of menus: menu bars and pop-up menus. A <I>menu bar </I>is
the type that you made with the wizard and edited in the Menu Editor--a sequence
of menus embedded on a form. A <I>pop-up menu </I>is, as the name implies, a menu
that pops up from somewhere on a form. When you right-click in the Windows Explorer,
for example, a pop-up menu appears. You can make any menu appear as a pop-up menu
by using a form's PopupMenu method:</P>
<P>
<PRE>PopupMenu mnuFile
</PRE>
<P>A menu command can exist within a menu bar and as a pop-up menu, if you want (see
Figure 13.12). You need to create a form to go with the pop-up menu because the PopupMenu
method must be part of a form. The following code demonstrates how this feature works:</P>
<P>
<PRE>Private Sub Form_MouseDown (Button As Integer, _
  Shift As Integer, X As Single, Y As Single
   If Button = 2 Then
      PopupMenu mnuFile
   End If
End Sub
</PRE>
<P>For this code to work, you need to create a form that includes a Menu control
to be named mnuFile, which must have at least one submenu. You need to program this
code into the form's Declarations section and press F5 to run it.</P>
<P><A HREF="javascript:popUp('13fig14.gif')"><B>FIGURE 13.12</B></A> <I>When you
use the PopupMenu method as shown in the form on the right, only the submenu items
of a menu will appear.</I></P>
<P>
<H2><A NAME="Heading8"></A>Creating Complex Menus</H2>
<P>Now that you have an overview of how to use the Menu Editor to make a menu, the
following example creates a menu system for a simple text editor.</P>
<P>The Amazing Text Editor, the code for which is in the project TextEdit.vbp on
the Web site at <A target="_new" HREF="javascript:if(confirm('http://www.mcp.com/info  \n\nThis file was not retrieved by Teleport Pro, because it is addressed on a domain or path outside the boundaries set for its Starting Address.  \n\nDo you want to open it from the server?'))window.location='http://www.mcp.com/info'" tppabs="http://www.mcp.com/info">http://www.mcp.com/info</A>, can
do the following tasks:</P>

<UL>
	<LI>Create a new file
	<P>
	<LI>Open an existing file
	<P>
	<LI>Save a file
	<P>
	<LI>Reverse the editor's font and background color setting
	<P>
	<LI>Provide copyright notification
	<P>
	<LI>Exit the program
	<P>
	<LI>Undo the preceding action
	<P>
	<LI>Cut, copy, and paste text
	<P>
	<LI>Select all text
</UL>

<P>Before you start coding, take some time to review the program's features to make
a properly designed and categorized menu system. As mentioned earlier in the section
&quot;Understanding the Windows Standard Menus,&quot; most menu bars begin with a
<B>File</B> menu and are followed by an <B>Edit</B> menu.</P>
<P>The following is a viable menu categorization for the feature set of the Amazing
Text Editor.</P>
<P>
<TABLE BORDER="1">
	<TR ALIGN="LEFT" VALIGN="TOP">
		<TD HEIGHT="39" ALIGN="LEFT"><B><I>File Menu</I></B></TD>
		<TD HEIGHT="39" ALIGN="LEFT"><B><I>Edit Menu</I></B></TD>
	</TR>
	<TR ALIGN="LEFT" VALIGN="TOP">
		<TD ALIGN="LEFT"><U>N</U>ew</TD>
		<TD ALIGN="LEFT"><U>U</U>ndo</TD>
	</TR>
	<TR ALIGN="LEFT" VALIGN="TOP">
		<TD ALIGN="LEFT"><U>O</U>pen</TD>
		<TD ALIGN="LEFT">Cu<U>t</U></TD>
	</TR>
	<TR ALIGN="LEFT" VALIGN="TOP">
		<TD ALIGN="LEFT"><U>S</U>ave</TD>
		<TD ALIGN="LEFT"><U>C</U>opy</TD>
	</TR>
	<TR ALIGN="LEFT" VALIGN="TOP">
		<TD ALIGN="LEFT">Se<U>t</U>tings</TD>
		<TD ALIGN="LEFT"><U>P</U>aste</TD>
	</TR>
	<TR ALIGN="LEFT" VALIGN="TOP">
		<TD ALIGN="LEFT"><U>A</U>bout</TD>
		<TD ALIGN="LEFT">Select <U>A</U>ll</TD>
	</TR>
	<TR ALIGN="LEFT" VALIGN="TOP">
		<TD ALIGN="LEFT">E<U>x</U>it</TD>
		<TD ALIGN="LEFT"></TD>
	</TR>
</TABLE>
</P>
<P>Now that you have a categorized menu system, you can implement it in the Menu
Editor. Table 13.3 shows the menu hierarchy and Name and Caption properties, as well
as accelerator and shortcut keys for each menu object.</P>


<BLOCKQUOTE>
	<P>
<HR>
<STRONG>Standard functionality of shortcut keys</STRONG></P>
	<P>The shortcut keys used in Table 13.3 adhere to the established convention that
	Windows programmers use for menu items with the demonstrated functionality. 
<HR>


</BLOCKQUOTE>

<H4>TABLE 13.3&nbsp;&nbsp;Menu Objects for the Amazing Text Editor Application</H4>
<P>
<TABLE BORDER="1">
	<TR ALIGN="LEFT" VALIGN="TOP">
		<TD ALIGN="LEFT"><B><I>Name</I></B></TD>
		<TD ALIGN="LEFT"><B><I>Caption</I></B></TD>
		<TD ALIGN="LEFT"><B><I>Level</I></B></TD>
		<TD ALIGN="LEFT"><B><I>Shortcut</I></B></TD>
	</TR>
	<TR ALIGN="LEFT" VALIGN="TOP">
		<TD ALIGN="LEFT">mnuFile</TD>
		<TD ALIGN="LEFT">&amp;File</TD>
		<TD ALIGN="LEFT">0</TD>
		<TD ALIGN="LEFT">None</TD>
	</TR>
	<TR ALIGN="LEFT" VALIGN="TOP">
		<TD ALIGN="LEFT">itmNew</TD>
		<TD ALIGN="LEFT">&amp;New</TD>
		<TD ALIGN="LEFT">1</TD>
		<TD ALIGN="LEFT">None</TD>
	</TR>
	<TR ALIGN="LEFT" VALIGN="TOP">
		<TD ALIGN="LEFT">itmOpen</TD>
		<TD ALIGN="LEFT">&amp;Open</TD>
		<TD ALIGN="LEFT">1</TD>
		<TD ALIGN="LEFT">None</TD>
	</TR>
	<TR ALIGN="LEFT" VALIGN="TOP">
		<TD ALIGN="LEFT">itmSave</TD>
		<TD ALIGN="LEFT">&amp;Save</TD>
		<TD ALIGN="LEFT">1</TD>
		<TD ALIGN="LEFT">None</TD>
	</TR>
	<TR ALIGN="LEFT" VALIGN="TOP">
		<TD ALIGN="LEFT">sepOne</TD>
		<TD ALIGN="LEFT">- (a hyphen)</TD>
		<TD ALIGN="LEFT">1</TD>
		<TD ALIGN="LEFT">None</TD>
	</TR>
	<TR ALIGN="LEFT" VALIGN="TOP">
		<TD ALIGN="LEFT">itmSettings</TD>
		<TD ALIGN="LEFT">Se&amp;ttings</TD>
		<TD ALIGN="LEFT">1</TD>
		<TD ALIGN="LEFT">None</TD>
	</TR>
	<TR ALIGN="LEFT" VALIGN="TOP">
		<TD ALIGN="LEFT">itmBlackOnWhite</TD>
		<TD ALIGN="LEFT">Black On White</TD>
		<TD ALIGN="LEFT">2</TD>
		<TD ALIGN="LEFT">None</TD>
	</TR>
	<TR ALIGN="LEFT" VALIGN="TOP">
		<TD ALIGN="LEFT">itmWhiteOnBlack</TD>
		<TD ALIGN="LEFT">White On Black</TD>
		<TD ALIGN="LEFT">2</TD>
		<TD ALIGN="LEFT">None</TD>
	</TR>
	<TR ALIGN="LEFT" VALIGN="TOP">
		<TD ALIGN="LEFT">itmAbout</TD>
		<TD ALIGN="LEFT">&amp;About</TD>
		<TD ALIGN="LEFT">1</TD>
		<TD ALIGN="LEFT">None</TD>
	</TR>
	<TR ALIGN="LEFT" VALIGN="TOP">
		<TD ALIGN="LEFT">sepTwo</TD>
		<TD ALIGN="LEFT">-</TD>
		<TD ALIGN="LEFT">1</TD>
		<TD ALIGN="LEFT">None</TD>
	</TR>
	<TR ALIGN="LEFT" VALIGN="TOP">
		<TD ALIGN="LEFT">itmExit</TD>
		<TD ALIGN="LEFT">E&amp;xit</TD>
		<TD ALIGN="LEFT">1</TD>
		<TD ALIGN="LEFT">Ctrl+X</TD>
	</TR>
	<TR ALIGN="LEFT" VALIGN="TOP">
		<TD ALIGN="LEFT">mnuEdit</TD>
		<TD ALIGN="LEFT">&amp;Edit</TD>
		<TD ALIGN="LEFT">0</TD>
		<TD ALIGN="LEFT">None</TD>
	</TR>
	<TR ALIGN="LEFT" VALIGN="TOP">
		<TD ALIGN="LEFT">itmUndo</TD>
		<TD ALIGN="LEFT">&amp;Undo</TD>
		<TD ALIGN="LEFT">1</TD>
		<TD ALIGN="LEFT">Ctrl+Z</TD>
	</TR>
	<TR ALIGN="LEFT" VALIGN="TOP">
		<TD ALIGN="LEFT">sepThree</TD>
		<TD ALIGN="LEFT">-</TD>
		<TD ALIGN="LEFT">1</TD>
		<TD ALIGN="LEFT">None</TD>
	</TR>
	<TR ALIGN="LEFT" VALIGN="TOP">
		<TD ALIGN="LEFT">itmCut</TD>
		<TD ALIGN="LEFT">Cu&amp;t</TD>
		<TD ALIGN="LEFT">1</TD>
		<TD ALIGN="LEFT">Ctrl+X</TD>
	</TR>
	<TR ALIGN="LEFT" VALIGN="TOP">
		<TD ALIGN="LEFT">itmCopy</TD>
		<TD ALIGN="LEFT">&amp;Copy</TD>
		<TD ALIGN="LEFT">1</TD>
		<TD ALIGN="LEFT">Ctrl+C</TD>
	</TR>
	<TR ALIGN="LEFT" VALIGN="TOP">
		<TD ALIGN="LEFT">itmPaste</TD>
		<TD ALIGN="LEFT">&amp;Paste</TD>
		<TD ALIGN="LEFT">1</TD>
		<TD ALIGN="LEFT">Ctrl+V</TD>
	</TR>
	<TR ALIGN="LEFT" VALIGN="TOP">
		<TD ALIGN="LEFT">sepFour</TD>
		<TD ALIGN="LEFT">-</TD>
		<TD ALIGN="LEFT">1</TD>
		<TD ALIGN="LEFT">None</TD>
	</TR>
	<TR ALIGN="LEFT" VALIGN="TOP">
		<TD ALIGN="LEFT">itmSelectAll</TD>
		<TD ALIGN="LEFT">Select &amp;All</TD>
		<TD ALIGN="LEFT">1</TD>
		<TD ALIGN="LEFT">Ctrl+A</TD>
	</TR>
</TABLE>

<H3><A NAME="Heading9"></A>Adding Separator Lines to Menus</H3>


<BLOCKQUOTE>
	<P>
<HR>
<STRONG>Separator line limits</STRONG></P>
	<P>You can't use separator lines at the 0 (zero) level of a menu's hierarchy. You
	must be at least one indent level in. 
<HR>


</BLOCKQUOTE>

<P>You add separator lines to a menu by typing a single hyphen (-) in the Menu Editor's
<B>Caption</B> text box. Notice that Table 13.3 lists some entries that have a Caption
value of - and begin with the prefix sep in the object name. When you run the program,
separator lines appear in the drop-down menus where the hyphens are used (see Figure
13.13). I use the sep prefix to denote that the name of the menu item reflects a
separator line.</P>
<P><A HREF="javascript:popUp('13fig15.gif')"><B>FIGURE 13.13</B></A> <I>If a submenu
item has another submenu associated with it, you'll see a right-pointing arrow to
the right of the submenu item's caption.</I></P>
<P>Separator lines</P>
<P>
<H3><A NAME="Heading10"></A>Using the Checked Property</H3>
<P>You use a menu's Checked property to communicate that some state exists or that
a choice has been made. The Amazing Text Editor uses check marks in its menu system
to communicate the current choice made for font/background color layout (refer to
Figure 13.13). If users choose the Black on White menu item, a check mark will appear
next to the selection, the font color will be set to black, and the background client
area will be set to white.</P>
<P>You can set the value of a menu item's Checked property at runtime or design time.
If you want to set its value at design time, you can set it within the Menu Editor
by selecting the <B>Checked</B> check box. You also can set the value of the Checked
property at design time within code, as follows:</P>
<P>
<PRE>MyMenuItem.Checked = True
</PRE>
<P>When the value of the a menu item's Checked property is set to True, a check mark
appears to the left of the menu item's caption.</P>
<P>Listing 13.1 shows the event procedure for the itmBlackOnWhite_Click() event.
This is an example of how to set the Checked property of a menu item at runtime.</P>


<BLOCKQUOTE>
	<P>
<HR>
<STRONG>The Checked property isn't exclusive</STRONG></P>
	<P>You can set multiple checked events to True, if you want. 
<HR>


</BLOCKQUOTE>

<H4>LISTING 13.1 13LIST01.TXT--Setting the Checked Property at Runtime</H4>
<PRE><B>01</B> Private Sub itmBlackOnWhite_Click()
<B>02</B>    `Set the color scheme for Black on White
<B>03</B>    txtMain.BackColor = vbWhite
<B>04</B>    txtMain.ForeColor = vbBlack
<B>05</B>
<B>06</B>    `Set the menu checks accordingly
<B>07</B>    itmBlackOnWhite.Checked = True
<B>08</B>    itmWhiteOnBlack.Checked = False
<B>09</B> End Sub
</PRE>
<H3><A NAME="Heading11"></A>Cutting, Copying, and Pasting with the Clipboard Object</H3>
<P>One of the more important features that the Windows operating system brought to
computing was the capability to transfer data from one application to another via
the Clipboard. The Clipboard is an area of memory reserved by Windows to which you
send and from which you retrieve data. All applications have access to the Clipboard.
Over time, the type of data that you can save to the Clipboard has become complex.
You can save any registered Windows object, as well as simple text and numeric values.</P>
<P>Visual Basic allows your applications to access the Windows Clipboard through
the Clipboard object. This object has no properties, but it does have a number of
methods. Table 13.4 describes the various Clipboard methods.</P>
<P>
<H4>TABLE 13.4&nbsp;&nbsp;Clipboard Methods</H4>
<P>
<TABLE BORDER="1">
	<TR ALIGN="LEFT" VALIGN="TOP">
		<TD ALIGN="LEFT"><B><I>Method</I></B></TD>
		<TD ALIGN="LEFT"><B><I>Description</I></B></TD>
	</TR>
	<TR ALIGN="LEFT" VALIGN="TOP">
		<TD ALIGN="LEFT">Clear</TD>
		<TD ALIGN="LEFT">Clears all data from the Clipboard</TD>
	</TR>
	<TR ALIGN="LEFT" VALIGN="TOP">
		<TD ALIGN="LEFT">GetData</TD>
		<TD ALIGN="LEFT">Returns a graphic from the Clipboard</TD>
	</TR>
	<TR ALIGN="LEFT" VALIGN="TOP">
		<TD ALIGN="LEFT">GetFormat</TD>
		<TD ALIGN="LEFT">Returns an integer that references the type of data in the Clipboard</TD>
	</TR>
	<TR ALIGN="LEFT" VALIGN="TOP">
		<TD ALIGN="LEFT">GetText</TD>
		<TD ALIGN="LEFT">Retrieves ASCII text from the Clipboard</TD>
	</TR>
	<TR ALIGN="LEFT" VALIGN="TOP">
		<TD ALIGN="LEFT">SetData</TD>
		<TD ALIGN="LEFT">Sends a graphic to the Clipboard</TD>
	</TR>
	<TR ALIGN="LEFT" VALIGN="TOP">
		<TD ALIGN="LEFT">SetText</TD>
		<TD ALIGN="LEFT">Sends ASCII text to the Clipboard</TD>
	</TR>
</TABLE>
</P>
<P>The <B>Cut</B>, <B>Copy</B>, and <B>Paste</B> items on the Amazing Text Editor's
<B>Edit</B> menu (see Figure 13.14) use the Clipboard object to set and retrieve
text to and from the Clipboard. The following is the code for itmCopy_Click(), the
event procedure that copies selected text to the Clipboard:</P>
<P>
<PRE><B>01</B> Private Sub itmCopy_Click()
<B>02</B>    Clipboard.SetText txtMain.SelText
<B>03</B> End Sub
</PRE>
<P><A HREF="javascript:popUp('13fig16.gif')"><B>FIGURE 13.14</B></A> <I>The <U>E</U>dit
menu items use the conventional Windows shortcut keys.</I></P>
<P>The code takes the value of the SelText property of the TextBox and uses the Clipboard's
SetText method to send the text to the Clipboard (line 2).</P>
<P>Listing 13.2 shows you how to retrieve text from the Clipboard. The listing is
a snippet of code from the <B>Paste</B> menu item's Click event procedure.</P>
<P>
<H4>LISTING 13.2 13LIST03.TXT--Retrieving Text from the Clipboard</H4>
<PRE><B>01</B> Private Sub itmPaste_Click()
<B>02</B>  Dim Temp$              `Text from clipboard
<B>03</B>  Dim strLeft As String  `Holds text from left of cursor
<B>04</B>  Dim strRight As String `Holds text from right of cursor
<B>05</B>  Dim strFull As String  `Full text
<B>06</B>
<B>07</B>    `Get the text from the clipboard
<B>08</B>    Temp$ = Clipboard.GetText(vbCFText)
...
<B>32</B> End Sub
</PRE>
<H3><A NAME="Heading12"></A>Selecting Text in a TextBox</H3>
<P>The Cut and Paste code in the Amazing Text Editor makes extensive use of copying
selected text to and from the Clipboard. The code determines which text to copy by
using the SelText property of the TextBox.</P>


<BLOCKQUOTE>
	<P>
<HR>
<STRONG>Using text boxes with menus</STRONG></P>
	<P>Although TextBoxes really don't have much to do with menus, this discussion is
	included simply to help you complete the Amazing Text Editor application. 
<HR>


</BLOCKQUOTE>

<P>The TextBox control has many standard Windows text-selection features built in
to it. When you double-click a word that has been written into a TextBox, the TextBox
automatically knows enough to highlight that word's characters. If you drag the mouse
pointer across a line of text, that line will be highlighted automatically. When
you click a TextBox, the text cursor will automatically be positioned between the
characters you clicked.</P>
<P>The TextBox has three selection properties: SelStart, SelLength, and SelText.
The value of SelStart is the string position of the cursor within a TextBox's contents.
The value of SelLength is the number of characters highlighted during a selection
process. The value of SelText is the characters highlighted during the selection
process. The following code shows how to use the SelStart and SelLength properties
to select a block of text (see Figure 13.15):</P>
<P>
<PRE><B>01</B> Private Sub Form_Click()
<B>02</B>    Text1.SelStart = 3
<B>03</B>    Text1.SelLength = 6
<B>04</B> End Sub
</PRE>
<P><A HREF="javascript:popUp('13fig17.gif')"><B>FIGURE 13.15</B></A> <I>The SelStart
and SelLength properties make the TextBox a powerful control.</I></P>
<P>Not only can you read these properties, but you can also set them at runtime.
SelStart and SelLength are pretty straightforward. If you set SelText at runtime,
however, Visual Basic automatically inserts the string value of SelText into the
contents of the TextBox at the cursor position, moving the existing text to accommodate
this (see Figure 13.16):</P>
<P>
<PRE><B>01</B> Private Sub Command1_Click()
<B>02</B>    Text1.SelText = &quot;Dog &quot;
<B>03</B> End Sub
</PRE>
<P><A HREF="javascript:popUp('13fig18.gif')"><B>FIGURE 13.16</B></A> <I>SelText is
a good property to use if you want to insert text into a TextBox repeatedly.</I></P>
<P>The code for the Amazing Text Editor also contains the Right(), Left(), and Len()
functions, and the MsgBox statement. Chapter 12, &quot;Working with Strings and Typecasting,&quot;
discusses these functions in more detail, and Chapter 14, &quot;Enhancing Your Programs
with Forms and Dialog Boxes,&quot; explains how to use the MsgBox statement, as well
as the MsgBox() function.</P>
<CENTER>
<P>
<HR>
<A HREF="ch12.htm" tppabs="http://pbs.mcp.com/ebooks/078971633X/ch12/ch12.htm"><IMG SRC="previous.gif" tppabs="http://pbs.mcp.com/ebooks/078971633X/button/previous.gif" WIDTH="128" HEIGHT="28"
ALIGN="BOTTOM" ALT="Previous chapter" BORDER="0"></A><A HREF="ch14.htm" tppabs="http://pbs.mcp.com/ebooks/078971633X/ch14/ch14.htm"><IMG
SRC="next.gif" tppabs="http://pbs.mcp.com/ebooks/078971633X/button/next.gif" WIDTH="128" HEIGHT="28" ALIGN="BOTTOM" ALT="Next chapter"
BORDER="0"></A><A HREF="index-38.htm" tppabs="http://pbs.mcp.com/ebooks/078971633X/index.htm"><IMG SRC="contents.gif" tppabs="http://pbs.mcp.com/ebooks/078971633X/button/contents.gif" WIDTH="128"
HEIGHT="28" ALIGN="BOTTOM" ALT="Contents" BORDER="0"></A> <BR>
</P>

<P>&copy; <A HREF="copy.htm" tppabs="http://pbs.mcp.com/ebooks/078971633X/copy.htm">Copyright</A>, Macmillan Computer Publishing. All
rights reserved.
</CENTER>

</BODY>

</HTML>
