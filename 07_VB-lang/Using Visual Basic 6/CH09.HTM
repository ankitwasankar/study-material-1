<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2//EN">
<HTML>

<HEAD>
	<META HTTP-EQUIV="Content-Type" CONTENT="text/html;CHARSET=iso-8859-1">
<SCRIPT LANGUAGE="JavaScript">

<!--

function popUp(pPage) {
 var fullURL = document.location;
 var textURL = fullURL.toString();
 var URLlen = textURL.length;
 var lenMinusPage = textURL.lastIndexOf("/");
 lenMinusPage += 1;
 var fullPath = textURL.substring(0,lenMinusPage);
 popUpWin = window.open('','popWin','resizable=yes,scrollbars=no,width=525,height=394');
 figDoc= popUpWin.document;
 zhtm= '<HTML><HEAD><TITLE>' + pPage + '</TITLE>';
 zhtm += '</head>';
 zhtm += '<BODY bgcolor="#FFFFFF">';
 zhtm += '<IMG SRC="' + fullPath + pPage + '">';
 zhtm += '<P><B>' + pPage + '</B>';
 zhtm += '</BODY></HTML>';
 window.popUpWin.document.write(zhtm);
 window.popUpWin.document.close();
 // Johnny Jackson 4/28/98
 }

//-->
                                                                
</SCRIPT>
<link rel="stylesheet" href="ebooks.css" tppabs="http://pbs.mcp.com/includes/stylesheets/ebooks.css">

	<META NAME="GENERATOR" Content="Symantec Visual Page Mac 1.1.1">
	<TITLE>Using Visual Basic 6 -- Ch 9 -- Working with Conditional Statements</TITLE>
</HEAD>

<BODY TEXT="#000000" BGCOLOR="#FFFFFF">

<H1 ALIGN="CENTER"><IMG SRC="que.gif" tppabs="http://pbs.mcp.com/ebooks/078971633X/button/que.gif" WIDTH="171" HEIGHT="66" ALIGN="BOTTOM"
BORDER="0"><BR>
Using Visual Basic 6</H1>
<CENTER>
<P><A HREF="ch08.htm" tppabs="http://pbs.mcp.com/ebooks/078971633X/ch08/ch08.htm"><IMG SRC="previous.gif" tppabs="http://pbs.mcp.com/ebooks/078971633X/button/previous.gif" WIDTH="128" HEIGHT="28"
ALIGN="BOTTOM" ALT="Previous chapter" BORDER="0"></A><A HREF="ch10.htm" tppabs="http://pbs.mcp.com/ebooks/078971633X/ch10/ch10.htm"><IMG
SRC="next.gif" tppabs="http://pbs.mcp.com/ebooks/078971633X/button/next.gif" WIDTH="128" HEIGHT="28" ALIGN="BOTTOM" ALT="Next chapter"
BORDER="0"></A><A HREF="index-38.htm" tppabs="http://pbs.mcp.com/ebooks/078971633X/index.htm"><IMG SRC="contents.gif" tppabs="http://pbs.mcp.com/ebooks/078971633X/button/contents.gif" WIDTH="128"
HEIGHT="28" ALIGN="BOTTOM" ALT="Contents" BORDER="0"></A> 
<HR>

</CENTER>
<H1 ALIGN="CENTER">- 9 -<BR>
Working with Conditional Statements</H1>

<UL>
	<LI><A HREF="#Heading1">Making Decisions in Your Program</A>
	<LI><A HREF="#Heading2">Writing If...Then Statements</A>
	<UL>
		<LI><A HREF="#Heading3">Writing a Single-Line If Statement</A>
		<LI><A HREF="#Heading4">Executing Multiple Commands in the Conditional Statement</A>
		<LI><A HREF="#Heading5">Using If...Then...Else Statements</A>
		<LI><A HREF="#Heading6">Working with Multiple If Statements</A>
		<LI><A HREF="#Heading7">Using Nested If Statements</A>
	</UL>
	<LI><A HREF="#Heading8">Using the Select Case Statement</A>
	<UL>
		<LI><A HREF="#Heading9">Using Relational Operators in Select Case Blocks</A>
	</UL>
</UL>

<P>
<HR SIZE="4">

<H1 ALIGN="CENTER"></H1>
<H2><A NAME="Heading1"></A>Making Decisions in Your Program</H2>
<P>Most statements in your programs will be assignment statements, but other statements
are important for handling more complex tasks. These statements are known collectively
as control statements. Without control statements, you couldn't write a very flexible
program. Your program would start at the first line of code and proceed line by line
until the last line was reached. At that point, the program would stop.</P>
<P>One type of control statement is the decision statement. These statements are
used to control the execution of parts in your program, based on conditions that
exist at the time the statement is encountered. Two main types of decision statements
are If...Then and Select Case.</P>


<BLOCKQUOTE>
	<P>
<HR>
<STRONG>The IF Statement</STRONG></P>
	<P>Most programmers don't really understand the importance of the IF statement because
	it's so common in the programming environment. IF statements use comparison operators
	to test data values. Comparison operators or conditional operators test conditions
	that are either true or false. With this simple programming statement and its cousins,
	you can initiate complex calculations. 
<HR>


</BLOCKQUOTE>

<H2><A NAME="Heading2"></A>Writing If...Then Statements</H2>
<P>In Visual Basic, you can write an If...Then statement for handling True conditions
in two ways: the single-line If...Then statement and the multiline If...Then statement.
Each uses the If...Then keywords to check a condition. If the condition is True,
the program runs the commands associated with the If...Then statement. If the condition
is False, the commands are skipped.</P>
<P>
<H3><A NAME="Heading3"></A>Writing a Single-Line If Statement</H3>
<P>The single-line If statement is used to perform a single task when the condition
in the statement is True. The following is the syntax of the single-line If statement:</P>
<P>
<PRE>If condition Then command
</PRE>
<P>The condition represents any type of statement or function that evaluates to True.
The condition can be any of the following:</P>

<UL>
	<LI>A comparison of a variable to a literal, another variable, or a function
	<P>
	<LI>A variable that contains a True or False value
	<P>
	<LI>Any function that returns a True or False value
</UL>

<P>The command represents the task to be performed if the condition is True. This
can be any valid Visual Basic statement other than a variable declaration.</P>
<P>Look at the Simple Calculator program in Figure 9.1. The way this program works
is that you enter a number in each of the two upper TextBoxes, select a math operation,
and then click the CommandButton. The program performs the selected math operation
on the numbers and displays the result in a third TextBox.</P>
<P><A HREF="javascript:popUp('09fig01.gif')"><B>FIGURE 9.1</B></A> <I>The Simple
Calculator makes decisions in an If...Then statement, based on the value of the OptionButton.</I></P>
<P>The program decides which math operation to perform by evaluating the setting
of the Value property of the OptionButton assigned to each operation. If the Value
property of an OptionButton is set to True, the program does the associated math
operation.</P>
<P>The following shows the If statement from the program. This conditional statement
performs the associated math operation if True and is an example of a single-line
If statement.</P>
<P>
<PRE>If optAddition.Value = True Then z = x + y
</PRE>
<P>Listing 9.1 shows the entire code for the event procedure for the click of the
cmdOperation CommandButton, the button that users click to perform the selected math
operation.</P>


<BLOCKQUOTE>
	<P>
<HR>
<STRONG>Download this code</STRONG></P>
	<P>The source code for this program is the project simplclc.vbp, which is available
	on the Web at <A target="_new" HREF="javascript:if(confirm('http://www.mcp.com/ info  \n\nThis file was not retrieved by Teleport Pro, because it is addressed on a domain or path outside the boundaries set for its Starting Address.  \n\nDo you want to open it from the server?'))window.location='http://www.mcp.com/%20info'" tppabs="http://www.mcp.com/%20info">http://www.mcp.com/ info</A>. You'll
	be asked to enter an ISBN; enter 078971633x and then click the Search button to go
	to the Book Info page for Using Visual Basic 6. 
<HR>


</BLOCKQUOTE>

<H4>LISTING 9.1 09LIST01.TXT--Making Decisions Based on the Value of an<BR>
OptionButton</H4>
<PRE>01 Private Sub cmdOperation_Click()</PRE>
<PRE>02 `Declare a variable for the first number</PRE>
<PRE>03 Dim x As Double</PRE>
<PRE>04</PRE>
<PRE>05 `Declare a variable for the second number</PRE>
<PRE>06 Dim y As Double</PRE>
<PRE>07</PRE>
<PRE>08 `Declare a variable to hold the sum of both numbers</PRE>
<PRE>09 Dim z As Double</PRE>
<PRE>10</PRE>
<PRE>11 `Convert the text inputted into the text box</PRE>
<PRE>12 `into an integer and assign it to the first variable</PRE>
<PRE>13 x = CDbl(txtNumOne.Text)</PRE>
<PRE>14</PRE>
<PRE>15 `Convert the text imputted into the text box</PRE>
<PRE>16 `into an integer and assign it to the second variable</PRE>
<PRE>17 y = CDbl(txtNumTwo.Text)</PRE>
<PRE>18</PRE>
<PRE>19 `Decide what operation to do based on the</PRE>
<PRE>20 `value of selected option but'ton</PRE>
<PRE>21 If optAddition.Value = True Then z = x + y</PRE>
<PRE>22</PRE>
<PRE>23 If optSubtraction.Value = True Then z = x - y</PRE>
<PRE>24</PRE>
<PRE>25 If optMultiplication.Value = True Then z = x * y</PRE>
<PRE>26</PRE>
<PRE>27 `For division, make sure that the second number is</PRE>
<PRE>28 `not equal to zero. You cannot divide a number by</PRE>
<PRE>29 `zero. Blows up!</PRE>
<PRE>30 If optDivision.Value = True Then</PRE>
<PRE>31 If y &lt;&gt; 0 Then</PRE>
<PRE>32 z = x / y</PRE>
<PRE>33 Else</PRE>
<PRE>34 `Report an error</PRE>
<PRE>35 MsgBox &quot;Cannot divide by zero&quot;, vbCritical, &quot;Error&quot;</PRE>
<PRE>36 End If</PRE>
<PRE>37 End If</PRE>
<PRE>38 `Convert the third variable (which is a Double)</PRE>
<PRE>39 `to text and assign it to the text property of the</PRE>
<PRE>40 `textbox for the result.</PRE>
<PRE>41 txtTotal.Text = CStr(z)</PRE>
<PRE>42 End Sub</PRE>
<P>
<P>
<H3><A NAME="Heading4"></A>Executing Multiple Commands in the Conditional Statement</H3>
<P>If you need to execute more than one command in response to a condition, you can
use a block If...Then statement. A block If...Then statement bounds a range of statements
between the If...Then statement and an End If statement. If the condition in the
If...Then statement is True, all the commands between the If...Then and End If statements
are run. If the condition is False, the program skips to the first line after the
End If statement.</P>
<P>The structure of a multiple-command If statement is as follows:</P>
<P>
<PRE>If condition Then
     Command1
     Command2
     Commandn
End If
</PRE>
<P>in which If and Then are the Visual Basic keywords that &quot;bracket&quot; the
condition, and End If are the keywords that end the code block.</P>
<P>Listing 9.2 shows a portion of code that enhances the cmdOperation_Click() event
procedure from Listing 9.1.</P>
<P>
<H4>LISTING 9.2 09LIST02.TXT--Using Multiple Commands in an If...Then<BR>
Statement</H4>
<PRE>01 `Decide what operation to do based on the</PRE>
<PRE>02 `value of selected option button</PRE>
<PRE>03 If optAddition.Value = True Then</PRE>
<PRE>04 z = x + y</PRE>
<PRE>05 frmMain.Caption = &quot;Addition&quot;</PRE>
<PRE>06 End If</PRE>
<PRE>07</PRE>
<PRE>08 If optSubtraction.Value = True Then</PRE>
<PRE>09 z = x - y</PRE>
<PRE>10 frmMain.Caption = &quot;Subtraction&quot;</PRE>
<PRE>11 End If</PRE>
<PRE>12</PRE>
<PRE>13 If optMultiplication.Value = True Then</PRE>
<PRE>14 z = x * y</PRE>
<PRE>15 frmMain.Caption = &quot;Multiplication&quot;</PRE>
<PRE>16 End If</PRE>
<P>Whereas the code in Listing 9.1 invokes only one command when an If...Then statement
evaluates True (see line 21 of Listing 9.1), the code in Listing 9.2 invokes two
commands when the If...Then statement evaluates True (see lines 3-6 in Listing 9.2).</P>
<P>
<H3><A NAME="Heading5"></A>Using If...Then...Else Statements</H3>
<P>As you learned earlier, sometimes you might encounter this situation: If one condition
exists, you do one set of commands, and if it doesn't, you do another set. For example,
If you have money in your checking account, write a check; Else, transfer funds from
your savings account into the checking account. This is called an If...Then...Else
statement. If...Then...Else takes the following format:</P>
<PRE>If condition Then
     statements to process if condition is True
Else
     statements to process if condition is False
End If
</PRE>
<P>The If and End If statements of this block are the same as before. The condition
is still any logical expression or variable that yields a True or False value. The
key element in this set of statements is the Else statement. This statement is placed
after the last statement to be executed if the condition is True, and before the
first statement to be executed if the condition is False. For a True condition, the
program processes the statements up to the Else statement and then skips to the first
statement after the End If. If the condition is False, the program skips the statements
before the Else statement and starts processing with the first statement after the
Else.</P>
<P>You saw the following code snippet at the end of Listing 9.1. This is an excellent
example of a simple If...Then...Else statement. If the value of the variable y doesn't
equal zero (line 30), the program does some division (line 31); otherwise, the program
displays a Windows message box with an error message (line 34).</P>
<P>
<PRE>30  If optDivision.Value = True Then
31    If y &lt;&gt; 0 Then
32        z = x / y
33    Else
34      `Report an  error
35      MsgBox &quot;Cannot divide by zero&quot;, vbCritical, &quot;Error&quot;
36    End If
37  End If
</PRE>
<P>If you want to execute code for only the False portion of the statement, you can
place code statements between the Else and End If statements; you aren't required
to place any statements between the If and Else statements:</P>
<P>
<PRE>If x &lt;= 1 then
Else
    MsgBox &quot;X is not greater than 1&quot;
End If
</PRE>
<H3><A NAME="Heading6"></A>Working with Multiple If Statements</H3>
<P>In the preceding sections, you saw simple If...Then statements, which evaluate
one condition and can execute commands for a True or False condition. You can also
evaluate multiple conditions with an additional statement in the block. If...Then...ElseIf
statements let you specify another condition to evaluate whether the first condition
is False. By using the ElseIf statement, you can evaluate any number of conditions.</P>
<P>Listing 9.3 shows a snippet of code from the program Grader.EXE (see Figure 9.2)
from the project grader.vbp, available from the Web site associated with this book.
The code snippet uses the ElseIf conditional structure as a way to determine the
grade for a test, based on a range of correct answers.</P>
<P><A HREF="09fig02.gif" tppabs="http://pbs.mcp.com/ebooks/078971633X/ch09/09fig02.gif"><B>FIGURE 9.2</B></A> <I>The Grader program uses If...Then...ElseIf
statements to determine a grade based on correct answers.</I></P>
<P>
<H4>LISTING 9.3 09LIST03.TXT--Using ElseIf Statements to Evaluate Multiple<BR>
Conditions</H4>
<PRE>01 If CorrectAnswers% &gt;= 10 Then</PRE>
<PRE>02 strGrade = &quot;A&quot;</PRE>
<PRE>03 ElseIf CorrectAnswers% = 9 Then</PRE>
<PRE>04 strGrade = &quot;A-&quot;</PRE>
<PRE>05 ElseIf CorrectAnswers% = 8 Then</PRE>
<PRE>06 strGrade = &quot;B&quot;</PRE>
<PRE>07 ElseIf CorrectAnswers% = 7 Then</PRE>
<PRE>08 strGrade = &quot;B-&quot;</PRE>
<PRE>09 ElseIf CorrectAnswers% = 6 Then</PRE>
<PRE>10 strGrade = &quot;C&quot;</PRE>
<PRE>11 ElseIf CorrectAnswers% = 5 Then</PRE>
<PRE>12 strGrade = &quot;C-&quot;</PRE>
<PRE>13 ElseIf CorrectAnswers% = 4 Then</PRE>
<PRE>14 strGrade = &quot;D&quot;</PRE>
<PRE>15 ElseIf CorrectAnswers% = 3 Then</PRE>
<PRE>16 strGrade = &quot;D-&quot;</PRE>
<PRE>17 Else</PRE>
<PRE>18 strGrade = &quot;F&quot;</PRE>
<PRE>19 End If</PRE>
<P>This code works first by evaluating the condition in the If statement (line 1).
If the condition is True, the statement (or statements) immediately following the
If statement is executed (line 2), and then the program skips to the first statement
after the End If statement (line 19).</P>
<P>If the first condition is False, the program skips to the first ElseIf statement
(line 3) and evaluates its condition. If this condition is True, the statements following
the ElseIf are executed (line 4), and control again passes to the statement after
the End If. If the condition evaluates to False, control passes to the next ElseIf
statement. This process continues for as many ElseIf statements as are in the block.</P>
<P>If all the conditions are False, the program skips to the Else statement and processes
the commands between the Else (line 17) and the End If statements. The Else statement
isn't required.</P>
<P>
<H3><A NAME="Heading7"></A>Using Nested If Statements</H3>
<P>If you need to test for a condition that depends on whether another condition
is already True (such as &quot;If it's 6:30 a.m. and if it's a weekday&quot;), use
nested If statements. A nested If statement is one that's enclosed within another
If statement. The format for a nested If statement is as follows:</P>
<P>
<PRE>If condition Then
   If another_condition Then
       statement
   Else
       another statement
   End If
</PRE>
<PRE>End If</PRE>
<P>The following code snippet demonstrates a nested If statement. You originally
saw it in the cmdOperation Click() event procedure in Listing 9.1.</P>
<P>
<PRE>30  If optDivision.Value = True Then
31    If y &lt;&gt; 0 Then
32        z = x / y
33    Else
34      `Report an  error
35      MsgBox &quot;Cannot divide by zero&quot;, vbCritical, &quot;Error&quot;
36    End If
37  End If
</PRE>
<H2><A NAME="Heading8"></A>Using the Select Case Statement</H2>
<P>Another way to handle decisions in a program is to use the Select Case statement,
which enables you to run any of a series of statement groups, based on the value
of a single variable. The Select Case statement identifies the variable to be evaluated,
and then a series of Case statements specifies the possible values. If the value
of the variable matches the value (or values) indicated in the Case statement, the
commands after the Case statement are executed. If the value doesn't match, the program
proceeds to the next Case statement.</P>
<P>The Select Case structure is similar to a series of If...Then...ElseIf statements.
The following lines of code show the syntax of the Select Case block:</P>
<P>
<PRE>Select Case TestValue
     Case Value1
          Statement_Group_1
     Case Value2
          Statement_Group_2
End Select
</PRE>


<BLOCKQUOTE>
	<P>
<HR>
<STRONG>Correct character order</STRONG></P>
	<P>Pay particular attention to the order of characters in the less-than and greater-than
	symbols. They must be ordered as shown previously. Using =&gt; or =&lt; will produce
	an error. 
<HR>
<BR>
	
<HR>
<STRONG>Select Case limitations</STRONG></P>
	<P>You should never use Select Case if a simple If...Then...Else statement will work.
	Sometimes using Select Case can be overkill and add to the confusion that complex
	logic statements can provide. 
<HR>


</BLOCKQUOTE>

<P>The first statement of the Select Case block is the Select Case statement itself.
This statement identifies the value to be tested against possible results. This value,
represented by the TestValue argument, can be any valid numeric or string expression,
including a literal, a variable, a logical expression, or a function.</P>
<P>Each conditional group of commands (run if the condition is met) is started by
a Case statement. The Case statement identifies the expression to which the TestValue
is compared. The Case statement can express a single value or a range of values.
If the TestValue is equal to or within range of the expression, the commands after
the Case statement are run. The program runs the commands between the current Case
statement and the next Case statement or the End Select statement. If the TestValue
isn't equal to the value expression or doesn't fall within a range defined for the
Case statement, the program proceeds to the next Case statement.</P>
<P>Listing 9.4 shows you a Select Case statement that tests for equality. Listing
9.5 shows you a Select Case statement that tests for a range.</P>
<P>
<H4>LISTING 9.4 09LIST04.TXT--Testing for Equality in a Select Case Statement</H4>
<PRE>01 Select Case x%</PRE>
<PRE>02 Case 1:</PRE>
<PRE>03 MsgBox &quot;I am 1&quot;</PRE>
<PRE>04 Case 2:</PRE>
<PRE>05 MsgBox &quot;I am 2&quot;</PRE>
<PRE>06 End Select</PRE>
<P>
<H4>LISTING 9.5 09LIST05.TXT--Testing for a Range in a Select Case Statement</H4>
<PRE>01 Select Case x%</PRE>
<PRE>02 Case 6 To 9</PRE>
<PRE>03 MsgBox &quot;I am more than 5 and less than 10&quot;</PRE>
<PRE>04 Case 101 To 199</PRE>
<PRE>05 MsgBox &quot;I am more than 100 and less than 200&quot;</PRE>
<PRE>06 Case Else</PRE>
<PRE>07 MsgBox &quot;Not in Range&quot;</PRE>
<PRE>08 End Select</PRE>
<P>The simplest form of the Select Case block uses only a single value for the comparison
expression. Listing 9.6 shows a Select Case statement that accomplishes the same
thing that the If...Then...ElseIf code in Listing 9.3 does. The benefit of using
a Select Case to accomplish the grading task is that the code is easier to read and
easier to extend.</P>
<P>
<H4>LISTING 9.6 09LIST06.TXT--Rewriting an If...Then...ElseIf Statement as a<BR>
Select Case Statement</H4>
<PRE>01 Private Sub cmdGrader_Click()</PRE>
<PRE>02 Dim CorrectAnswers%</PRE>
<PRE>03 Dim strGrade As String</PRE>
<PRE>04</PRE>
<PRE>05 `Get the correct answers from the textbox</PRE>
<PRE>06 CorrectAnswers% = CInt(txtNumberRight.Text)</PRE>
<PRE>07</PRE>
<PRE>08 `Assign the grade based on the correct answers</PRE>
<PRE>09 Select Case CorrectAnswers%</PRE>
<PRE>10 Case 10</PRE>
<PRE>11 strGrade = &quot;A&quot;</PRE>
<PRE>12 Case 9</PRE>
<PRE>13 strGrade = &quot;A-&quot;</PRE>
<PRE>14 Case 8</PRE>
<PRE>15 strGrade = &quot;B&quot;</PRE>
<PRE>16 Case 7</PRE>
<PRE>17 strGrade = &quot;B-&quot;</PRE>
<PRE>18 Case 6</PRE>
<PRE>19 strGrade = &quot;C&quot;</PRE>
<PRE>20 Case 5</PRE>
<PRE>21 strGrade = &quot;C-&quot;</PRE>
<PRE>22 Case 4</PRE>
<PRE>23 strGrade = &quot;D&quot;</PRE>
<PRE>24 Case 3</PRE>
<PRE>25 strGrade = &quot;D-&quot;</PRE>
<PRE>26 Case Else</PRE>
<PRE>27 strGrade = &quot;F&quot;</PRE>
<PRE>28 End Select</PRE>
<PRE>29 `Display the grade</PRE>
<PRE>30 lblGrade.Caption = strGrade</PRE>
<PRE>31 End Sub</PRE>
<P>When it comes time to add another grade level--say, an A+ if the student correctly
answers 11 in the following example--all you need is to add a new case, Case 11 (see
Listing 9.7, line 3). If you were to use the ElseIf technique, you would have to
rewrite significant portions of the If...Then...ElseIf code block.</P>
<P>
<H4>LISTING 9.7 09LIST07.TXT--Extending a Select Case Statement</H4>
<PRE>01 Select Case CorrectAnswers%</PRE>
<PRE>02 `Add a case for 11 correct answers</PRE>
<PRE>03 Case 11</PRE>
<PRE>04 strGrade = &quot;A+&quot;</PRE>
<PRE>05 Case 10</PRE>
<PRE>06 strGrade = &quot;A&quot;</PRE>
<PRE>07 Case 9</PRE>
<PRE>08 strGrade = &quot;A-&quot;</PRE>
<PRE>09 Case 8</PRE>
<PRE>10 strGrade = &quot;B&quot;</PRE>
<PRE>11 Case 7</PRE>
<PRE>12 strGrade = &quot;B-&quot;</PRE>
<PRE>13 Case 6</PRE>
<PRE>14 strGrade = &quot;C&quot;</PRE>
<PRE>15 Case 5</PRE>
<PRE>16 strGrade = &quot;C-&quot;</PRE>
<PRE>17 Case 4</PRE>
<PRE>18 strGrade = &quot;D&quot;</PRE>
<PRE>19 Case 3</PRE>
<PRE>20 strGrade = &quot;D-&quot;</PRE>
<PRE>21 Case Else</PRE>
<PRE>22 strGrade = &quot;F&quot;</PRE>
<PRE>23 End Select</PRE>
<P>
<H3><A NAME="Heading9"></A>Using Relational Operators in Select Case Blocks</H3>
<P>You can also use relational operators in a Select Case block. Sometimes you might
want to test for cases within a range perhaps greater than or less than a certain
number. To accomplish this with a Select Case block, you must use the Is keyword.
To test within a certain range, use the To keyword as you saw earlier in Listing
9.5.</P>
<P>Just as you can check to see whether equality exists between two quantities with
the = sign, you can also check to see whether numbers are less than, greater than,
or not equal to one another. Table 9.1 shows the relational operators that you can
use in your conditional statements.</P>


<BLOCKQUOTE>
	<P>
<HR>
<STRONG>Correct character order</STRONG></P>
	<P>Pay particular attention to the order of characters in the less-than and greater-than
	symbols. They must be ordered as shown previously. Using =&gt; or =&lt; will produce
	an error. 
<HR>


</BLOCKQUOTE>

<H4>TABLE 9.1 Relational Operators</H4>
<P>
<TABLE BORDER="1">
	<TR ALIGN="LEFT" VALIGN="TOP">
		<TD ALIGN="LEFT"><B><I>Symbol</I></B></TD>
		<TD ALIGN="LEFT"><B><I>Meaning</I></B></TD>
		<TD ALIGN="LEFT"><B><I>Example</I></B></TD>
		<TD ALIGN="LEFT"><B><I>Result</I></B></TD>
	</TR>
	<TR ALIGN="LEFT" VALIGN="TOP">
		<TD ALIGN="LEFT">=</TD>
		<TD ALIGN="LEFT">Equal</TD>
		<TD ALIGN="LEFT">8 = 9</TD>
		<TD ALIGN="LEFT">False</TD>
	</TR>
	<TR ALIGN="LEFT" VALIGN="TOP">
		<TD ALIGN="LEFT">&gt;</TD>
		<TD ALIGN="LEFT">Greater than</TD>
		<TD ALIGN="LEFT">8 &gt; 9</TD>
		<TD ALIGN="LEFT">False</TD>
	</TR>
	<TR ALIGN="LEFT" VALIGN="TOP">
		<TD ALIGN="LEFT">&lt;</TD>
		<TD ALIGN="LEFT">Less than</TD>
		<TD ALIGN="LEFT">8 &lt; 9</TD>
		<TD ALIGN="LEFT">True</TD>
	</TR>
	<TR ALIGN="LEFT" VALIGN="TOP">
		<TD ALIGN="LEFT">&gt;=</TD>
		<TD ALIGN="LEFT">Greater than or equal to</TD>
		<TD ALIGN="LEFT">8 &gt;= 8</TD>
		<TD ALIGN="LEFT">True</TD>
	</TR>
	<TR ALIGN="LEFT" VALIGN="TOP">
		<TD ALIGN="LEFT">&lt;=</TD>
		<TD ALIGN="LEFT">Less than or equal to</TD>
		<TD ALIGN="LEFT">7 &lt;= 6</TD>
		<TD ALIGN="LEFT">False</TD>
	</TR>
	<TR ALIGN="LEFT" VALIGN="TOP">
		<TD ALIGN="LEFT">&lt;&gt;</TD>
		<TD ALIGN="LEFT">Not equal to</TD>
		<TD ALIGN="LEFT">6 &lt;&gt; 7</TD>
		<TD ALIGN="LEFT">True</TD>
	</TR>
</TABLE>
</P>
<P>Line 3 of Listing 9.8 shows you how to use the Is keyword to create a greater-than
statement within a Select Case block. Notice that the relational operator (&gt;)
is used to make any number of correct answers greater than 11 result in a grade of
A++.</P>


<BLOCKQUOTE>
	<P>
<HR>
<STRONG>Download this code!</STRONG></P>
	<P>The complete project to which this code applies is Grader2.vbp, which you can
	find on the Web, as explained earlier. 
<HR>


</BLOCKQUOTE>

<H4>LISTING 9.8 09LIST08.TXT--Using Relational Operators with Select Case Statements</H4>
<PRE>01 Select Case CorrectAnswers%</PRE>
<PRE>02 `Make any answer greater than 11 an A++</PRE>
<PRE>03 Case Is &gt; 11</PRE>
<PRE>04 strGrade = &quot;A++&quot;</PRE>
<PRE>05 Case 11</PRE>
<PRE>06 strGrade = &quot;A+&quot;</PRE>
<PRE>07 Case 10</PRE>
<PRE>08 strGrade = &quot;A&quot;</PRE>
<PRE>09 Case 9</PRE>
<PRE>10 strGrade = &quot;A-&quot;</PRE>
<PRE>11 Case 8</PRE>
<PRE>12 strGrade = &quot;B&quot;</PRE>
<PRE>13 Case 7</PRE>
<PRE>14 strGrade = &quot;B-&quot;</PRE>
<PRE>15 Case 6</PRE>
<PRE>16 strGrade = &quot;C&quot;</PRE>
<PRE>17 Case 5</PRE>
<PRE>18 strGrade = &quot;C-&quot;</PRE>
<PRE>19 Case 4</PRE>
<PRE>20 strGrade = &quot;D&quot;</PRE>
<PRE>21 Case 3</PRE>
<PRE>23 strGrade = &quot;D-&quot;</PRE>
<PRE>24 Case Else</PRE>
<PRE>25 strGrade = &quot;F&quot;</PRE>
<PRE>26 End Select</PRE>
<P>Select Case statements are a powerful addition to your programming toolkit and
take you to the next level of programming expertise. As you learn more about them,
you will understand how to use If statements and Select Case statements together
to make very detailed, extended decisions within your programs.</P>
<H1></H1>
<CENTER>
<P>
<HR>
<A HREF="ch08.htm" tppabs="http://pbs.mcp.com/ebooks/078971633X/ch08/ch08.htm"><IMG SRC="previous.gif" tppabs="http://pbs.mcp.com/ebooks/078971633X/button/previous.gif" WIDTH="128" HEIGHT="28"
ALIGN="BOTTOM" ALT="Previous chapter" BORDER="0"></A><A HREF="ch10.htm" tppabs="http://pbs.mcp.com/ebooks/078971633X/ch10/ch10.htm"><IMG
SRC="next.gif" tppabs="http://pbs.mcp.com/ebooks/078971633X/button/next.gif" WIDTH="128" HEIGHT="28" ALIGN="BOTTOM" ALT="Next chapter"
BORDER="0"></A><A HREF="index-38.htm" tppabs="http://pbs.mcp.com/ebooks/078971633X/index.htm"><IMG SRC="contents.gif" tppabs="http://pbs.mcp.com/ebooks/078971633X/button/contents.gif" WIDTH="128"
HEIGHT="28" ALIGN="BOTTOM" ALT="Contents" BORDER="0"></A> <BR>
</P>

<P>&copy; <A HREF="copy.htm" tppabs="http://pbs.mcp.com/ebooks/078971633X/copy.htm">Copyright</A>, Macmillan Computer Publishing. All
rights reserved.
</CENTER>

</BODY>

</HTML>
