<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2//EN">
<HTML>

<HEAD>
<SCRIPT LANGUAGE="JavaScript">

<!--

function popUp(pPage) {
 var fullURL = document.location;
 var textURL = fullURL.toString();
 var URLlen = textURL.length;
 var lenMinusPage = textURL.lastIndexOf("/");
 lenMinusPage += 1;
 var fullPath = textURL.substring(0,lenMinusPage);
 popUpWin = window.open('','popWin','resizable=yes,scrollbars=no,width=525,height=394');
 figDoc= popUpWin.document;
 zhtm= '<HTML><HEAD><TITLE>' + pPage + '</TITLE>';
 zhtm += '</head>';
 zhtm += '<BODY bgcolor="#FFFFFF">';
 zhtm += '<IMG SRC="' + fullPath + pPage + '">';
 zhtm += '<P><B>' + pPage + '</B>';
 zhtm += '</BODY></HTML>';
 window.popUpWin.document.write(zhtm);
 window.popUpWin.document.close();
 // Johnny Jackson 4/28/98
 }

//-->
                                                                
</SCRIPT>
<link rel="stylesheet" href="ebooks.css" tppabs="http://pbs.mcp.com/includes/stylesheets/ebooks.css">

	<META HTTP-EQUIV="Content-Type" CONTENT="text/html;CHARSET=iso-8859-1">
	<TITLE>Using Visual Basic 6 -- Ch 29 -- Making Programming Easier with Visual Basic Add-Ins</TITLE>
</HEAD>

<BODY TEXT="#000000" BGCOLOR="#FFFFFF">

<CENTER>
<H1><IMG SRC="que.gif" tppabs="http://pbs.mcp.com/ebooks/078971633X/button/que.gif" WIDTH="171" HEIGHT="66" ALIGN="BOTTOM" BORDER="0"><BR>
Using Visual Basic 6</H1>
</CENTER>
<CENTER>
<P><A HREF="ch28.htm" tppabs="http://pbs.mcp.com/ebooks/078971633X/ch28/ch28.htm"><IMG SRC="previous.gif" tppabs="http://pbs.mcp.com/ebooks/078971633X/button/previous.gif" WIDTH="128" HEIGHT="28"
ALIGN="BOTTOM" ALT="Previous chapter" BORDER="0"></A><A HREF="ch30.htm" tppabs="http://pbs.mcp.com/ebooks/078971633X/ch30/ch30.htm"><IMG
SRC="next.gif" tppabs="http://pbs.mcp.com/ebooks/078971633X/button/next.gif" WIDTH="128" HEIGHT="28" ALIGN="BOTTOM" ALT="Next chapter"
BORDER="0"></A><A HREF="index-38.htm" tppabs="http://pbs.mcp.com/ebooks/078971633X/index.htm"><IMG SRC="contents.gif" tppabs="http://pbs.mcp.com/ebooks/078971633X/button/contents.gif" WIDTH="128"
HEIGHT="28" ALIGN="BOTTOM" ALT="Contents" BORDER="0"></A> 
<HR>

</CENTER>
<CENTER>
<H1>- 29 -<BR>
Making Programming Easier with Visual Basic Add-Ins</H1>
</CENTER>

<UL>
	<LI><A HREF="#Heading1">Working with Add-Ins</A>
	<UL>
		<LI><A HREF="#Heading2">Attaching Add-Ins to the Add-Ins Menu</A>
		<LI><A HREF="#Heading3">Attaching Add-Ins to the Add-Ins Toolbar</A>
	</UL>
	<LI><A HREF="#Heading4">Using Add-Ins</A>
	<UL>
		<LI><A HREF="#Heading5">Using the VB6 Application Wizard</A>
		<LI><A HREF="#Heading6">Using the VB6 Data Form Wizard</A>
	</UL>
	<LI><A HREF="#Heading7">Creating a Custom Add-In</A>
	<UL>
		<LI><A HREF="#Heading8">How the Add-In Works</A>
		<LI><A HREF="#Heading9">Understanding the Visual Basic 6 IDE Object Model</A>
	</UL>
</UL>

<P>
<HR SIZE="4">

<CENTER>
<H1></H1>
</CENTER>
<H2><A NAME="Heading1"></A>Working with Add-Ins</H2>
<P>An add-in is a design-time tool that you attach to the Visual Basic IDE. Generally,
an add-in simplifies, enhances, or automates some aspect of your programming activity.
You can use add-ins to build classes; view API functions, structures, and constants;
or help create deployment packages of your applications or custom ActiveX controls.</P>
<P>
<H3><A NAME="Heading2"></A>Attaching Add-Ins to the Add-Ins Menu</H3>
<P>Visual Basic 6 ships with a number of add-ins, which you attach to the IDE by
using the Add-In Manager.</P>
<P><B>Attach an add-in to the VB programming environment</B>

<DL>
	<DT></DT>
	<DD><B>1. </B>Choose <B>Add-In Manager</B> from the <B>Add-Ins</B> menu.
	<P>
	<DT></DT>
	<DD><B>2. </B>In the Add-In Manager dialog, select an add-in from the list (see Figure
	29.1).
	<P>
	<DT></DT>
	<DD><B>3. </B>Select one or more of the <B>Load Behavior</B> check boxes.
	<P>
	<DT></DT>
	<DD><B>4. </B>Click <B>OK</B>.
	<P>
</DL>

<P><A HREF="javascript:popUp('29fig01.gif')"><B>FIGURE 29.1</B></A> <I>You use the
Add-In Manager to attach an add-in to the IDE.</I></P>
<P>If you select <B>Loaded/Unloaded</B> as a load behavior, the add-in appears immediately
in the IDE as an item in the <B>Add-Ins</B> menu (see Figure 29.2). If you selected
<B>Load on Startup</B>, you need to close Visual Basic and restart it.</P>
<P><A HREF="javascript:popUp('29fig02.gif')"><B>FIGURE 29.2</B></A> <I>Some tools
that ship with Visual Basic, such as the API Viewer, can be attached to the IDE as
an add-in.</I></P>
<P>
<H3><A NAME="Heading3"></A>Attaching Add-Ins to the Add-Ins Toolbar</H3>
<P>In addition to attaching add-ins to Visual Basic's <B>Add-Ins</B> menu, you can
display an add-in toolbar to which you can insert buttons for various add-ins. This
toolbar itself is an add-in, so you first must attach it to the IDE. After you insert
the toolbar, you insert buttons representing different add-ins.</P>
<P><B>Display the Add-In toolbar</B>

<DL>
	<DT></DT>
	<DD><B>1. </B>Choose <B>Add-In Manager</B> from the <B>Add-Ins</B> menu.
	<P>
	<DT></DT>
	<DD><B>2. </B>Select <B>VB 6 Add-In Toolbar</B> from the <B>Available Add-Ins</B>
	list.
	<P>
	<DT></DT>
	<DD><B>3. </B>Select the <B>Loaded/Unloaded</B> check box.
	<P>
	<DT></DT>
	<DD><B>4. </B>Click <B>OK</B> to insert the toolbar in the Visual Basic IDE (see
	Figure 29.3).
	<P>
</DL>

<P><B>Insert add-ins in the toolbar</B>

<DL>
	<DT></DT>
	<DD><B>1. </B>Click the Add/Remove Add-In button on the add-in toolbar to display
	the Add/Remove Toolbar Items dialog (see Figure 29.4).
	<P>
</DL>

<P><A HREF="javascript:popUp('29fig03.gif')"><B>FIGURE 29.3</B></A> <I>The add-in
toolbar is blank until you insert some add-ins except for the Add/Remove icon.</I></P>
<P><A HREF="javascript:popUp('29fig04.gif')"><B>FIGURE 29.4</B></A> <I>The add-ins
that you insert in the add-in toolbar won't be displayed on the Add-Ins menu.</I></P>

<DL>
	<DD><B>2. </B>Select the add-ins that you want to add to the toolbar.
	<P>
	<DT></DT>
	<DD><B>3. </B>Click <B>OK</B> to close the dialog and insert the add-ins into the
	toolbar (see Figure 29.5).
	<P>
</DL>

<P><A HREF="javascript:popUp('29fig05.gif')"><B>FIGURE 29.5</B></A> <I>The add-in
toolbar is really a coolbar control.</I></P>
<P>
<H2><A NAME="Heading4"></A>Using Add-Ins</H2>


<BLOCKQUOTE>
	<P>
<HR>
<STRONG>Third-party tools</STRONG></P>
	<P>A third-party tool is one made by one developer to support another developer.
	For instance, Microsoft is the maker of Visual Basic, but another company may make
	a control or an add-in designed to work with and add value to Visual Basic. The company
	that makes the tool to support VB is considered a third party, whereas you, the user
	of the product, are considered the first party and Microsoft is considered the second
	party. 
<HR>


</BLOCKQUOTE>

<P>As mentioned, Visual Basic ships with a number of third-party add-ins. Some of
these add-ins are advanced. Most are provided to make your day-to-day programming
much easier. Let's look at two: the Application Wizard and the Data Form Wizard.</P>
<P>
<H3><A NAME="Heading5"></A>Using the VB6 Application Wizard</H3>
<P>The Application Wizard add-in allows you to quickly create a framework for your
application. The Application Wizard is a great tool for creating simple applications
and also for implementing front ends (menus) for your programs.</P>
<P><B>Create a Multiple Document Interface application with a File menu</B>


<BLOCKQUOTE>
	<P>
<HR>
<STRONG>The wizard creates a shell program</STRONG></P>
	<P>If you really want to do specific things with a program created with the Application
	Wizard, you may have to do more programming. The Application Wizard can create programs
	that handle information very well, but you may have to do more programming if you
	want to do much more. It at least provides you with basic code to start with and
	gives you some learning experience if you have never programmed before. 
<HR>


</BLOCKQUOTE>


<DL>
	<DT></DT>
	<DD><B>1. </B>Click the icon on the add-in toolbar.
	<P>
	<DT></DT>
	<DD><B>2. </B>Let the profiles setting stay at <B>(None)</B> in the Application Wizard
	dialog (see Figure 29.6). Click the <B>Next</B> button.
	<P>
</DL>

<P><A HREF="javascript:popUp('29fig06.gif')"><B>FIGURE 29.6</B></A> <I>Eventually
you'll have a number of preset profiles from which you automatically create different
types of applications. You can save these profiles at the end of the creation process
in the Application Wizard.</I></P>


<BLOCKQUOTE>
	<P>
<HR>
<STRONG>Separating menu items</STRONG></P>
	<P>You use separator bars in menus for several reasons. For example, if you have
	several categories of icons (such as programming, applications, and databases), you
	could separate these items and make it easier to find what you're looking for. 
<HR>


</BLOCKQUOTE>


<DL>
	<DT></DT>
	<DD><B>3. </B>Select the <B>Multiple Document Interface (MDI)</B> option button and
	enter a name for your application in the text box at the bottom of the dialog (see
	Figure 29.7). Click <B>Next</B>.
	<P>
	<DT></DT>
	<DD><B>4. </B>Deselect all menu items except <B>&amp;File</B> in the <B>Menus</B>
	list. Deselect all submenu items except <B>&amp;New</B>, <B>&amp;Open</B>, <B>&amp;Close</B>,
	and <B>E&amp;xit</B> in the <B>Sub Menus</B> list (see Figure 29.8). Click <B>Next</B>.
	<P>
	<DT></DT>
	<DD><B>5. </B>Remove all toolbar buttons from the application's toolbar except for
	<B>New</B> and <B>Open</B> by selecting the button in the list on the right and clicking
	the left-arrow button (see Figure 29.9). Click <B>Next</B>.
	<P>
</DL>

<P><A HREF="javascript:popUp('29fig07.gif')"><B>FIGURE 29.7</B></A> <I>You can choose
an MDI, SDI, or Explorer interface for your application. A visual and descriptive
hint appears in the upper left of the dialog.</I></P>
<P><A HREF="javascript:popUp('29fig08.gif')"><B>FIGURE 29.8</B></A> <I>Select menu
items you want to include in your application and then select which submenu items
to include.</I></P>

<DL>
	<DT><I></I></DT>
	<DD><B>6. </B>Select <B>No</B> to avoid adding a resource string to the project (see
	Figure 29.10). Click <B>Next</B>.
	<P>
	<DT></DT>
	<DD><B>7. </B>Select <B>No</B> again to avoid adding a Web page and default URL to
	your project (see Figure 29.11). Click <B>Next</B>.
	<P>
</DL>

<P><A HREF="javascript:popUp('29fig09.gif')"><B>FIGURE 29.9</B></A> <I>You add or
remove the various images that you want to associate with an application's toolbar
in the Customize Toolbar page of the Application Wizard. An example of the toolbar
is shown at the top of the dialog.</I></P>
<P><A HREF="javascript:popUp('29fig10.gif')"><B>FIGURE 29.10</B></A> <I>You can embed
a table of string directly into your executable if you decide to make a string resource
file.</I></P>
<P><A HREF="javascript:popUp('29fig11.gif')"><B>FIGURE 29.11</B></A> <I>If you want,
you can auto- matically make your application Web enabled.</I></P>

<DL>
	<DT><I></I></DT>
	<DD><B>8. </B>Leave all the check boxes deselected on the Standard Forms page of
	the wizard (see Figure 29.12). Click Next.
	<P>
</DL>

<P><A HREF="javascript:popUp('29fig12.gif')"><B>FIGURE 29.12</B></A> <I>You can add
a splash screen, login, custom settings, and an About box form to your application.</I></P>


<BLOCKQUOTE>
	<P>
<HR>
<B><I><EM>Working with resource files</EM></I></B></P>
	<P>With resource files, you can distribute your application in multiple languages
	and increase the performance of the application. The Resource Editor add-in will
	store the resource file in memory until the project is saved. After it's saved, the
	resource file will appear in the project but under the Related Documents category.
	
<HR>


</BLOCKQUOTE>


<DL>
	<DT></DT>
	<DD><B>9. </B>Don't add any data forms to your application (see Figure 29.13). Click
	<B>Next</B>.
	<P>
	<DT></DT>
	<DD><B>10. </B>Don't save this application configuration as a profile (see Figure
	29.14). Click <B>Finish</B>.
	<P>
</DL>

<P><A HREF="javascript:popUp('29fig13.gif')"><B>FIGURE 29.13</B></A> <I>You can create
or add forms that reference a database to your application.</I></P>
<P><A HREF="javascript:popUp('29fig14.gif')"><B>FIGURE_29.14</B></A> <I>You can save
the application's framework configuration as a profile so that the next time you
want to create this type of application, you load the profile within the wizard.</I></P>
<P>As you can see in Figure 29.15, the Application Wizard has created a project according
to the settings provided. Because you chose to make an MDI project, you have an MDI
form and a child form. The wizard created a module as well as named and saved the
forms and project. The wizard also added an ImageList control and a CommonDialog
control to the project to provide images and functionality for the menus and toolbar.</P>
<P><A HREF="javascript:popUp('29fig15.gif')"><B>FIGURE 29.15</B></A> <I>The Application
Wizard makes a full-fledged MDI application project with little effort.</I></P>
<P>
<H3><A NAME="Heading6"></A>Using the VB6 Data Form Wizard</H3>


<BLOCKQUOTE>
	<P>
<HR>
<STRONG>The Biblio and Northwind databases</STRONG></P>
	<P>Microsoft ships two Access data-bases with every copy of Visual Basic: Biblio.mdb
	and Nwind.mdb. These databases are fictitious. Biblio represent a database of books
	and publishers. Northwind is a database of an imaginary food company, Northwind Traders.
	These databases are provided so that you have formal data on which to test your data-access
	tools and routines. These are also great resources to learn from. 
<HR>


</BLOCKQUOTE>

<P>Many Visual Basic applications involve accessing and working with data on a database
or some other type of data source. Therefore, having a tool that allows you to quickly
make forms that map to a given database is a useful addition to your programming
toolbox. The Data Form Wizard is such a tool.</P>
<P>The Data Form Wizard is an add-in that ships with Visual Basic 6. You attach the
Data Form Wizard to the VB IDE by using the Add-In Manager to add it to the <B>Add-Ins</B>
menu. Alternatively, you can attach the add-in toolbar to the IDE and then add the
Data Wizard to the add-in toolbar. Both techniques are described earlier in the section
&quot;Working with Add-Ins.&quot;</P>
<P>After you attach the Data Form Wizard to the IDE, you take the following steps
to create a Data Form for the Access database Biblio.mdb.</P>

<DL>
	<DT></DT>
	<DD><B>1. </B>Invoke the Data Form Wizard by selecting it from the <B>Add-Ins</B>
	menu or by clicking the icon on the add-in toolbar. The Data Wizard - Introduction
	dialog appears (see Figure 29.16).
	<P>
</DL>

<P><A HREF="javascript:popUp('29fig16.gif')"><B>FIGURE 29.16</B></A> <I>The Data
Form Wizard allows you to load a predefined profile from a prior use.</I></P>

<DL>
	<DT><I></I></DT>
	<DD><B>2. </B>Let the profile setting stay at the default, (None). Click Next.
	<P>
	<DT></DT>
	<DD><B>3. </B>Select <B>Access</B> from the list of the wizard's Database Type dialog
	(see Figure 29.17). Click <B>Next</B>.
	<P>
</DL>

<P><A HREF="javascript:popUp('29fig17.gif')"><B>FIGURE 29.17</B></A> <I>You can choose
between ODBC and Access databases.</I></P>

<DL>
	<DT><I></I></DT>
	<DD><B>4. </B>Click the <B>Browse</B> button to browse for an Access database. Select
	<B>Biblo.mdb</B> from the dialog (see Figure 29.18) and click <B>Open</B>. Click
	<B>Next</B>.
	<P>
	<DT></DT>
	<DD><B>5. </B>Enter a name for the data form, keep the form layout as <B>Single Record</B>,
	and keep the binding type as <B>ADO Data Control</B> (see Figure 29.19). Click <B>Next</B>.
	<P>
</DL>

<P><A HREF="javascript:popUp('29fig18.gif')"><B>FIGURE 29.18</B></A> <I>When you
choose an access database, you need to provide the database filename and location.</I></P>
<P><A HREF="javascript:popUp('29fig19.gif')"><B>FIGURE 29.19</B></A> <I>You can view
a thumbnail of the layout type in the upper left corner of the wizard's Form dialog.</I></P>

<DL>
	<DT><I></I></DT>
	<DD><B>6. </B>Select the <B>Titles</B> table from the <B>Record Source</B> drop-down
	list (see Figure 29.20). Select the <B>Subject</B>, <B>Title</B>, and <B>Year Published</B>
	fields in the <B>Available Fields</B> list and click the button to move the fields
	into the <B>Selected Fields</B> list. Select <B>Subject</B> from the <B>Column to
	Sort By</B> drop-down list and then click <B>Next</B>. (For more information on ADO,
	see Chapter 30, &quot;Database Basics and the Data Control,&quot; and Chapter 32,
	&quot;Enhancing Your Programs Using the Advanced Data Controls.&quot;)
	<P>
	<DT></DT>
	<DD><B>7. </B>Click <B>Next</B> to accept the defaults (all available controls) on
	the wizard's Control Selection dialog (see Figure 29.21).
	<P>
	<DT></DT>
	<DD><B>8. </B>Leave the profile settings drop-down list set to <B>(None)</B> on the
	wizard's last dialog (see Figure 29.22). Click <B>Finish</B>. You may want to save
	the profile of this file so it will be available to you next time around.
	<P>
</DL>

<P><A HREF="javascript:popUp('29fig20.gif')"><B>FIGURE 29.20</B></A> <I>You decide
the precise data you want to view by selecting tables and fields from within the
wizard's Record Source dialog.</I></P>
<P><A HREF="javascript:popUp('29fig21.gif')"><B>FIGURE 29.21</B></A> <I>You can use
Add, Update, Delete, Refresh, and Close buttons on your data forms.</I></P>
<P><A HREF="javascript:popUp('29fig22.gif')"><B>FIGURE 29.22</B></A> <I>You can save
the Data Form Wizard's settings to a custom profile as you can in the Application
Wizard.</I></P>
<P>After you click <B>Finish</B>, the wizard creates a form that's bound to the database
of your choice by the method that you've chosen. By following the preceding steps,
you create a database that's connected to the Titles table of the Bibli.mdb database.
The form shown in Figure 29.23 includes the <B>Subject</B>, <B>Title</B>, and <B>Year
Published</B> fields, as well as all the buttons that you selected to be included.</P>
<P>Clearly, if you do much data-access work, the Data Form Wizard is a tool that
saves you a significant amount of time. As you become a more developed programmer,
you'll create a set of profiles within the wizard that you can use repeatedly.</P>
<P><A HREF="javascript:popUp('29fig23.gif')"><B>FIGURE 29.23</B></A> <I>The Data
Form Wizard creates a data-bound form in seconds, as opposed to the hours you'd have
to spend creating the form on your own.</I></P>
<P>
<H2><A NAME="Heading7"></A>Creating a Custom Add-In</H2>


<BLOCKQUOTE>
	<P>
<HR>
<STRONG>Designers</STRONG></P>
	<P>A <I>designer</I> is a programming tool written in C++ that Visual Basic programmers
	use to generate code for a specific functionality. Designers present a graphical
	user interface to programmers. Programmers enter programming information into the
	designer, and the designer in turn generates the appropriate code. VB6 ships with
	designers for data access, add-ins, Internet components, and DHTML pages, to mention
	a few. In this chapter, you use the Add-In Connect Designer. 
<HR>


</BLOCKQUOTE>

<P>Visual Basic 6 is created in such a way as to make writing a custom add-in feasible
for less experienced programmers. Although making a custom add-in was possible in
prior versions of Visual Basic, it was difficult even for the more experienced programmer.
Visual Basic 6 ships with an add-in project type that you can select when you start
a new project. The add-in project uses the Add-In Connect Designer to automatically
do many of the fundamental tasks associated with creating an add-in (see Figure 29.24).
The Add-In Connect Designer is included as a module within the add-in project, as
is a starting form on which you create a graphical user interface for your add-in.</P>
<P>Let's look at a custom add-in that every programmer needs: an automatic procedure-header
generator. Good code is well commented. In the heat of programming, however, many
developers forget to put in the all-important procedure header that describes what
a particular procedure is about and what it does. The add-in ProcHeader is a custom
add-in that allows programmers to generate the code that declares a procedure, either
Sub or Function. When the procedure is declared, the add-in inserts a predefined
procedure header template into the code.</P>
<P>First, you need to generate the framework for the add-in. Then, you code the specifics
for the add-in.</P>
<P><A HREF="javascript:popUp('29fig24.gif')"><B>FIGURE 29.24</B></A> <I>The Add-In
Connect Designer automatically generates code for your custom add-in.</I></P>
<P><B>Create the framework</B>

<DL>
	<DT></DT>
	<DD><B>1. </B>Choose <B>New Project</B> from Visual Basic's <B>File</B> menu.
	<P>
	<DT></DT>
	<DD><B>2. </B>Select <B>Addin</B> in the New Project dialog (see Figure 29.25).
	<P>
	<DT></DT>
	<DD><B>3. </B>Select the <B>Connect Designer</B> in the Project window. Then click
	the View Form icon to display the Designer form (refer to Figure 29.24).
	<P>
	<DT></DT>
	<DD><B>4. </B>Enter the data in the Designer form as shown in Figure 29.24.
	<P>
</DL>

<P><A HREF="javascript:popUp('29fig25.gif')"><B>FIGURE 29.25</B></A> <I>The Addin
project automatically creates a framework on which you can make a custom add-in.</I></P>
<P>An add-in--even one made by using the designer built in to the add-in project--generates
a volume of code that's beyond the breadth of an introductory chapter. Therefore,
the code that you need in order to work with the following can be found at http://www.mcp.com/info.
To gain the most from the following, you might want to open the code in the VB6 IDE
and follow along.</P>
<P>
<H3><A NAME="Heading8"></A>How the Add-In Works</H3>
<P>The way the custom add-in works is that you choose an option from the <B>Add-Ins</B>
menu to display the add-in's form. You select whether the procedure is to be a Sub
or Function and Private or Public in scope (see Figure 29.26). When you click <B>OK</B>,
the add-in goes to the bottom of the code pane and adds a procedure declaration with
a code header. The code header text is defined in an external text file, header.txt.
Last, the add-in moves the text cursor in the code pane to the location of the newly
inserted lines of code so that the code pane displays the declaration for the new
procedure.</P>
<P><A HREF="javascript:popUp('29fig26.gif')"><B>FIGURE 29.26</B></A> <I>The Procedure
with Code Header add-in allows you to declare a Sub or Function and automatically
include a procedure header.</I></P>
<P>Error traps are put in to ensure that there are no errors when accessing the external
text file or when writing to the code pane.</P>
<P>The add-in is an ActiveX DLL and compiled as such. When you compile the code,
the project automatically includes the newly compiled add-in to the list of available
add-ins in the Add-In Manager.</P>
<P>When you deploy the add-in to other programmers, you deploy it as you would any
other ActiveX DLL or EXE. For more information about deploying an ActiveX DLL, see
Chapter 20, &quot;Deploying Your Visual Basic Applications.&quot;</P>
<P>
<H3><A NAME="Heading9"></A>Understanding the Visual Basic 6 IDE Object Model</H3>
<P>Making custom add-ins is possible because Visual Basic exposes itself as a set
of interrelated objects that you can manipulate. You manipulate the VB object model
to make an add-in very much in the same way that you manipulate the Microsoft Word
object model when you write a macro that manipulates the user interface for the word
processing application.</P>
<P>(For more information about object models, see Chapter 25, &quot;Using VBA to
Connect Your VB Programs with Microsoft Office,&quot; Chapter 26, &quot;Making Object-Oriented
Programs with Visual Basic,&quot; and Chapter 27, &quot;Creating Your Own ActiveX
Controls with Visual Basic.&quot;)</P>
<P>The object model is complex and comprehensive. Luckily, the Connect Designer add-in
(Connect.dsr) does most of the preliminary work for you. After the designer sets
up the framework for you, you have to manipulate only a few objects in the model
to get the behaviors that you need in order to declare a procedure and insert a code
header within the procedure block.</P>
<P>The objects that you manipulate are CodePane and CodeModule. The CodePane object
represents the code window in which you add the code; the CodeModule object is the
code that appears in the code window, similar to a module or class file.</P>
<P>The core code that creates the procedure declaration and inserts the code header
is found in the function AddHeaderProc() (see Listing 29.1). AddHeaderProc() is a
procedure of the frmAddIn form.</P>
<P>
<H4>LISTING 29.1&#160;&#160;29LIST01.TXT--Excerpts from the AddHeaderProc Function</H4>
<PRE><B>01 </B>Public Function AddHeaderProc(strHeaderFile As String, _</PRE>
<PRE>strProcName As String, _</PRE>
<PRE>strProcType As String, _</PRE>
<PRE>strProcScope As String) As Boolean</PRE>
<PRE><B>02 </B>`*************************************</PRE>
<PRE><B>03 </B>`Function Name:AddHeaderProc</PRE>
<PRE><B>04</B></PRE>
<PRE><B>05 </B>`</PRE>
<PRE><B>06 </B>`strHeaderFile The path and filename of the file has</PRE>
<PRE><B>07 </B>` the header template</PRE>
<PRE><B>08 </B>`strProcName: The name of the procedure to make</PRE>
<PRE><B>09 </B>`</PRE>
<PRE><B>10 </B>`strProcType: The type of procedure, Sub or Function</PRE>
<PRE><B>11 </B>`</PRE>
<PRE><B>12 </B>`strProcScope: The scope of the procedure, Private or</PRE>
<PRE><B>13 </B>` Public</PRE>
<PRE><B>14 </B>`Remarks: If the function is successful, it returns</PRE>
<PRE><B>15 </B>` True. On an error, this function will</PRE>
<PRE><B>16 </B>` return a message box reporting the error</PRE>
<PRE><B>17 </B>` number and description. In addition, the</PRE>
<PRE><B>18 </B>` function returns False.</PRE>
<PRE><B>19 </B>`History:</PRE>
<PRE><B>20 </B>`Programmer: Bob Reselman</PRE>
<PRE><B>21 </B>`Created: 6/14/98</PRE>
<PRE><B>22 </B>`*************************************</PRE>
<PRE><B>23</B></PRE>
<PRE><B>24 </B>Dim cm As CodeModule `Code Module Object var</PRE>
<PRE><B>25 </B>Dim cp As VBIDE.CodePane `Code Pane Object var</PRE>
<PRE><B>26 </B>Dim strHeader As String `Header string</PRE>
<PRE><B>27 </B>Dim strBuffer As String `Concatenation buffer</PRE>
<PRE><B>28 </B>Dim strFileName As String `Header template filename</PRE>
<PRE><B>29 </B>Dim strBorder As String `Border characters</PRE>
<PRE><B>30 </B>Dim strProcDim As String `Declaration statement</PRE>
<PRE><B>31 </B>Dim strCreated As String `Created date statement</PRE>
<PRE><B>32 </B>Dim strFirstProcLine As String `First line of the code</PRE>
<PRE><B>33 </B>`header</PRE>
<PRE><B>34 </B>Dim strTemp As String `Another string buffer</PRE>
<PRE><B>35 </B>Dim FileHandle As Integer `File handle var</PRE>
<PRE><B>36</B></PRE>
<PRE><B>37 </B>On Error GoTo AddHeaderProcErr:</PRE>
<PRE><B>38</B></PRE>
<PRE><B>39 </B>`Create an object variable for the code pane</PRE>
<PRE><B>40 </B>Set cp = VBInstance.ActiveCodePane</PRE>
<PRE><B>41</B></PRE>
<PRE><B>42 </B>`Create an object variable for the code module</PRE>
<PRE><B>43 </B>`!!!Remember, the code pane only shows lines of the</PRE>
<PRE><B>44 </B>`code module. The code module is where the actual</PRE>
<PRE><B>45 </B>`code lives!!!!!</PRE>
<PRE><B>46 </B>Set cm = cp.CodeModule</PRE>
<PRE><B>47</B></PRE>
<PRE><B>48 </B>`Start building the procedure declaration</PRE>
<PRE><B>49 </B>strProcDim = strProcScope &amp; &quot; &quot; &amp; strProcType &amp; &quot; &quot;</PRE>
<PRE><B>50 </B>strProcDim = strProcDim &amp; &quot; &quot; &amp; strProcName &amp; &quot;()&quot;</PRE>
<PRE><B>51 </B>strProcDim = strProcDim</PRE>
<PRE><B>52</B></PRE>
<PRE>...</PRE>
<PRE><B>67 </B>`Get the header template filename</PRE>
<PRE><B>68 </B>strFileName = strHeaderFile</PRE>
<PRE><B>69 </B>FileHandle = FreeFile()</PRE>
<PRE><B>70</B></PRE>
<PRE><B>71 </B>`Open the file</PRE>
<PRE><B>72 </B>Open strFileName For Input As #FileHandle%</PRE>
<PRE><B>73</B></PRE>
<PRE><B>74 </B>`Make the mouse pointer an hourglass</PRE>
<PRE><B>75 </B>MousePointer = vbHourglass</PRE>
<PRE><B>76</B></PRE>
<PRE><B>77 </B>`Traverse the lines of the file</PRE>
<PRE><B>78 </B>Do While Not EOF(FileHandle%) ` Check for end of file.</PRE>
<PRE><B>79 </B>`Read a line of the file</PRE>
<PRE><B>80 </B>` Read line of data.</PRE>
<PRE><B>81 </B>Line Input #FileHandle%, strTemp</PRE>
<PRE><B>82 </B>`Add the line from the output buffer to the text string</PRE>
<PRE><B>83 </B>strHeader = strHeader &amp; strTemp &amp; vbCrLf</PRE>
<PRE>84 Loop</PRE>
<PRE>...</PRE>
<PRE><B>89 </B>`Close the file once you have had your way with it</PRE>
<PRE><B>90 </B>Close #FileHandle%</PRE>
<PRE><B>91</B></PRE>
<PRE><B>92 </B>`Add the header file template to the string buffer</PRE>
<PRE><B>93 </B>strBuffer = strBuffer &amp; strHeader</PRE>
<PRE>...</PRE>
<PRE><B>103 </B>`Add the End statement for the end of the procedure</PRE>
<PRE><B>104 </B>strBuffer = strBuffer &amp; &quot;End &quot; &amp; strProcType</PRE>
<PRE><B>105</B></PRE>
<PRE><B>106 </B>`Insert the procedure and header into the code page</PRE>
<PRE><B>107 </B>Call cm.InsertLines(cm.CountOfLines + 1, strBuffer)</PRE>
<PRE><B>108</B></PRE>
<PRE><B>109 </B>`Hide the Add-In</PRE>
<PRE><B>110 </B>Connect.Hide</PRE>
<PRE><B>111</B></PRE>
<PRE><B>112 </B>`Set the top line of the pane to the last line</PRE>
<PRE><B>113 </B>cp.TopLine = cm.ProcStartLine(strProcName, _</PRE>
<PRE>vbext_pk_Proc)</PRE>
<PRE><B>114</B></PRE>
<PRE><B>115 </B>`Return a success value</PRE>
<PRE><B>116 </B>AddHeaderProc = True</PRE>
<PRE><B>117</B></PRE>
<PRE><B>118 </B>`Exit the function; things are good!</PRE>
<PRE><B>119 </B>Exit Function</PRE>
<PRE><B>120 </B>AddHeaderProcErr:</PRE>
<PRE>..</PRE>
<PRE><B>126 </B>MsgBox ErrMsg$, vbCritical, Err.Source</PRE>
<PRE><B>127 </B>End Function</PRE>
<P>Notice that line 40 sets a CodePane object variable to the active code pane. Line
46 assigns the CodeModule object variable to the code module associated with the
active code pane by calling CodePane's CodeModule property.</P>
<P>After all the <I>object variables</I> are set, the function goes about constructing
the code procedure declaration and code header. Lines 48-52 construct the declaration
lines of the procedure. Code that isn't shown (but is available on the Web site)
adds the header border and constructs the first line of the header.</P>
<P>Lines 53-72 open the text file that has the header template, cycles through all
the lines within the text file, and concatenates the retrieved lines (strTemp) onto
the header string (strHeader). Line 75 concatenates the constructed header (strHeader)
onto the overall string buffer, strBuffer. Line 77 creates the End procedure line.</P>
<P>After the procedure declaration and procedure header are constructed, they must
be inserted in the code module. The procedure declaration and procedure header are
one very big string. This string is inserted one line beyond the last line of code
in the code module. Inserting the code is accomplished by using the InsertLines()
method of the CodeModule object variable on line 80. InsertLines() takes two arguments:
the location of the line in which to insert the code and the string to insert. The
location is determined by going one line beyond the total number of lines in the
code module, as determined by the value returned by the CodeModule's CountOfLines
property (CountOfLines +1, as shown on line 80). The string to insert is the buffer
that contains the procedure declaration and procedure header (strBuffer).</P>
<P>Line 80 inserts the procedure and procedure header, but you might not be able
to see it if the code pane is set to the top lines or some other spot outside the
viewing area of the code pane. Therefore, the code pane needs to be adjusted to show
the first line of code of the newly inserted procedure. Line 86 resets the top line
of the code pane to be the first line of code in the newly inserted procedure. The
CodeModule object has a method, ProcStartLine(), that allows you to determine the
starting line of a procedure. ProcStartLine() takes two arguments: the name of the
procedure from which to determine the first line and a constant that communicates
the procedure kind. The method returns a Long that's the first line of the procedure
within the code pane. On line 86, the add-in passes in the string variable that represents
the procedure and the constant vbext_pk_Proc, which communicates that the procedure
kind is a procedure. (You can use the Object Browser to look up all the values that
go with the <I>Enum</I>, vbext_ProcKind.)</P>
<P>If everything is successful, the function returns True. If for some reason an
error occurs, control is passed to the AddHeaderProcErr code label for error processing.</P>
<P>Granted, this discussion is very high level for creating a custom add-in. You
might want to take some time to make a detailed study of all the code involved in
making such a tool. As you study the code, you'll see how to use the Office.CommandBarControl
object's PasteFace method to add an icon bitmap to the submenu entry, as shown in
Figure 29.27. You'll also learn how to test to make sure that a code window is indeed
open. Otherwise, you'll be blindly adding procedures to code panes you can't see.
Finally, you'll see how to build on the code and graphical framework that the add-in's
Connect Designer provides. For an exhaustive discussion of the Visual Basic Object
Model (also known as the VB IDE Extensibility Model), look at the documentation that
comes with your copy of Visual Basic.</P>
<P><A HREF="javascript:popUp('29fig27.gif')"><B>FIGURE 29.27</B></A> <I>The ProcHeader
add-in submenu item has a bitmap icon that identifies it.</I></P>
<H1><I></I></H1>
<CENTER>
<P>
<HR>
<A HREF="ch28.htm" tppabs="http://pbs.mcp.com/ebooks/078971633X/ch28/ch28.htm"><IMG SRC="previous.gif" tppabs="http://pbs.mcp.com/ebooks/078971633X/button/previous.gif" WIDTH="128" HEIGHT="28"
ALIGN="BOTTOM" ALT="Previous chapter" BORDER="0"></A><A HREF="ch30.htm" tppabs="http://pbs.mcp.com/ebooks/078971633X/ch30/ch30.htm"><IMG
SRC="next.gif" tppabs="http://pbs.mcp.com/ebooks/078971633X/button/next.gif" WIDTH="128" HEIGHT="28" ALIGN="BOTTOM" ALT="Next chapter"
BORDER="0"></A><A HREF="index-38.htm" tppabs="http://pbs.mcp.com/ebooks/078971633X/index.htm"><IMG SRC="contents.gif" tppabs="http://pbs.mcp.com/ebooks/078971633X/button/contents.gif" WIDTH="128"
HEIGHT="28" ALIGN="BOTTOM" ALT="Contents" BORDER="0"></A> </P>

<P>&#169; <A HREF="copy.htm" tppabs="http://pbs.mcp.com/ebooks/078971633X/copy.htm">Copyright</A>, Macmillan Computer Publishing. All
rights reserved.
</CENTER>


</BODY>

</HTML>
