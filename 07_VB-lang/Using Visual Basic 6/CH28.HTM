<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2//EN">
<HTML>

<HEAD>
<SCRIPT LANGUAGE="JavaScript">

<!--

function popUp(pPage) {
 var fullURL = document.location;
 var textURL = fullURL.toString();
 var URLlen = textURL.length;
 var lenMinusPage = textURL.lastIndexOf("/");
 lenMinusPage += 1;
 var fullPath = textURL.substring(0,lenMinusPage);
 popUpWin = window.open('','popWin','resizable=yes,scrollbars=no,width=525,height=394');
 figDoc= popUpWin.document;
 zhtm= '<HTML><HEAD><TITLE>' + pPage + '</TITLE>';
 zhtm += '</head>';
 zhtm += '<BODY bgcolor="#FFFFFF">';
 zhtm += '<IMG SRC="' + fullPath + pPage + '">';
 zhtm += '<P><B>' + pPage + '</B>';
 zhtm += '</BODY></HTML>';
 window.popUpWin.document.write(zhtm);
 window.popUpWin.document.close();
 // Johnny Jackson 4/28/98
 }

//-->
                                                                
</SCRIPT>
<link rel="stylesheet" href="ebooks.css" tppabs="http://pbs.mcp.com/includes/stylesheets/ebooks.css">

	<META HTTP-EQUIV="Content-Type" CONTENT="text/html;CHARSET=iso-8859-1">
	<TITLE>Using Visual Basic 6 -- Ch 28 -- Creating VB Programs for the Internet</TITLE>
</HEAD>

<BODY TEXT="#000000" BGCOLOR="#FFFFFF">

<CENTER>
<H1><IMG SRC="que.gif" tppabs="http://pbs.mcp.com/ebooks/078971633X/button/que.gif" WIDTH="171" HEIGHT="66" ALIGN="BOTTOM" BORDER="0"><BR>
Using Visual Basic 6</H1>
</CENTER>
<CENTER>
<P><A HREF="ch27.htm" tppabs="http://pbs.mcp.com/ebooks/078971633X/ch27/ch27.htm"><IMG SRC="previous.gif" tppabs="http://pbs.mcp.com/ebooks/078971633X/button/previous.gif" WIDTH="128" HEIGHT="28"
ALIGN="BOTTOM" ALT="Previous chapter" BORDER="0"></A><A HREF="ch29.htm" tppabs="http://pbs.mcp.com/ebooks/078971633X/ch29/ch29.htm"><IMG
SRC="next.gif" tppabs="http://pbs.mcp.com/ebooks/078971633X/button/next.gif" WIDTH="128" HEIGHT="28" ALIGN="BOTTOM" ALT="Next chapter"
BORDER="0"></A><A HREF="index-38.htm" tppabs="http://pbs.mcp.com/ebooks/078971633X/index.htm"><IMG SRC="contents.gif" tppabs="http://pbs.mcp.com/ebooks/078971633X/button/contents.gif" WIDTH="128"
HEIGHT="28" ALIGN="BOTTOM" ALT="Contents" BORDER="0"></A> 
<HR>

</CENTER>
<CENTER>
<H1>- 28 -<BR>
Creating VB Programs for the Internet</H1>
</CENTER>

<UL>
	<LI><A HREF="#Heading1">Working on the Internet</A>
	<LI><A HREF="#Heading2">Making a Simple Program with VBScript</A>
	<LI><A HREF="#Heading3">Using VBScript with Internet Explorer</A>
	<UL>
		<LI><A HREF="#Heading4">Working with HTML Elements</A>
		<LI><A HREF="#Heading5">More on Scripts</A>
		<LI><A HREF="#Heading6">Incorporating VBScript with HTML</A>
		<LI><A HREF="#Heading7">Handling Events with VBScript</A>
	</UL>
	<LI><A HREF="#Heading8">Understanding a DHTML Application</A>
	<UL>
		<LI><A HREF="#Heading9">Programming a Simple DHTML Application</A>
		<LI><A HREF="#Heading10">Rapid Development with DHTML Applications</A>
		<LI><A HREF="#Heading11">Using DHTML with ActiveX Components</A>
		<LI><A HREF="#Heading12">Compiling a DHTML Application</A>
	</UL>
</UL>

<P>
<HR SIZE="4">

<CENTER>
<H1></H1>
</CENTER>
<H2><A NAME="Heading1"></A>Working on the Internet</H2>


<BLOCKQUOTE>
	<P>
<HR>
<STRONG>Advantages of using VB and VBScript on the Internet</STRONG></P>
	<P>More than likely, you already have a general idea of what the Internet is, and
	you use it every day for email, Web browsing, and downloading files. Also, many of
	you probably already develop Internet applications with C++ or Java. You can use
	any document on the Internet, including spreadsheets and databases, but sometimes
	you need to do a little programming to force the application to do what you want
	it to do. Learning Visual Basic and VBScript in relation to Internet programming
	puts you one step ahead, and your Web pages will work and look much better. 
<HR>


</BLOCKQUOTE>

<P>Before you look at how to use Visual Basic to do Internet programming, it's useful
to have a fundamental concept of how the Internet works. In a nutshell, the <I>Internet</I>
is a very large network with millions of users and computers interacting with each
other. To expand on this concept, the entire Internet is nothing more than millions
of computers communicating with each other by means of special documents. These documents
are written in special code that all computers can understand. Some of these documents
are <I>interactive</I>, meaning that any user can change the information that the
document contains. One example of this is the <I>Web page</I>, which is one or many
documents in which users can add or change information.</P>
<P>As complex and unwieldy as the Internet is, its fundamental dynamics concern the
relationship between a client PC and server computer. A <I>client</I> is something
that needs a service, and a <I>server</I> is something that provides a service. In
the case of the Internet, the client is the computer in your home or at your office,
and the server is a computer somewhere on the Web that provides data to the client.</P>
<P>The way by which the client can talk to the server is via protocols. A <I>protocol</I>
is a set of rules by which the client knows how to pass requests for data to the
server. Likewise, the server knows how to send responses back to the calling client.
Protocols are useful because they don't rely on platform specifics. A client doesn't
need to know whether a server is an HP running an operating system such as UNIX or
an IBM running OS/2; the server doesn't need to know whether the client computer
is a Macintosh or a Gateway PC.</P>
<P>The protocol used most often on the Internet is HTTP (Hypertext Transfer Protocol).
Another widely used protocol is FTP (File Transfer Protocol), and there are others.
Any computer that can talk HTTP or FTP can communicate with servers on the Internet,
and vice versa.</P>
<P>For a computer to be a server on the Internet, it must have two things: an address
by which other computers can locate it and the capability to understand and process
the various protocols. A server is assigned a unique numeric ID called an <I>IP </I>(Internet
Protocol) <I>address</I>. Normally, however, you don't use the numeric address when
calling a server on the Internet; instead, you use the server's associated <I>domain
name</I>. The domain name is the friendly addressing format, www.<I>domainname</I>.com,
that you've come to know from using the World Wide Web (see Figure 28.1).</P>
<P><A HREF="javascript:popUp('28fig01.gif')"><B>FIGURE 28.1</B></A> <I>The Internet
is based on discrete conversations between a client computer and an Internet server.</I></P>


<BLOCKQUOTE>
	<P>
<HR>
<STRONG>Many ISPs out there</STRONG></P>
	<P>The ISP that you use might depend on your local area. This book doesn't recommend
	any particular service because they all provide one basic function--connecting you
	to the rest of the world. Each ISP is unique because each has a slightly different
	format. You might try several before settling on one. Some services, such as AT&amp;T
	Worldnet and America Online, offer trial memberships in which you can &quot;try before
	you buy.&quot; 
<HR>


</BLOCKQUOTE>

<P>The software used on the physical computer to make it a server that can speak
the protocols of the Internet and respond accordingly is called <I>Internet server
software</I>. The particular Internet server software manufactured by Microsoft is<I>
</I>Internet Information Server (IIS).</P>
<P>For a client computer to be able to communicate with a server on the Internet,
it must have a connection to the Internet. Then, when connected, it must have a way
to contact and receive data from Internet servers through the various protocols.
The connection is accomplished via an Internet service provider (ISP), such as America
Online, CompuServe, MSN, AT&amp;T Worldnet, MCI, or Sprint. The tool to communicate
to the server and decipher the data returned by the Internet server is handled by
the Internet browser, such as Microsoft's Internet Explorer or Netscape Navigator.</P>
<P>Where does Visual Basic fit in all this? Microsoft has positioned Visual Basic
to play an important role on the client side and the server side. On the client side,
you can use a derivative of Visual Basic, VBScript, to create Web page programs that
can run from within Internet Explorer. You also can use Visual Basic to create custom
ActiveX components that you can embed in Web pages and run as any custom ActiveX
component would.</P>


<BLOCKQUOTE>
	<P>
<HR>
<STRONG>Client side versus server side</STRONG></P>
	<P>If you write a program that resides and executes on a client computer, that program
	is called a <I>client-side</I> program. If you create a program that runs on an Internet
	server, that program is called a <I>server-side</I> program. Microsoft Word is considered
	a client-side program. Yahoo Search, a program that searches for articles on the
	Web, is a server-side program. 
<HR>


</BLOCKQUOTE>

<P>On the server side, you can use VBScript to create Active Server Pages (ASP) in
order to create logic that enables IIS to respond to various input from client computers.
Also, you can use Visual Basic to create custom ActiveX components designed to work
as extensions and enhancements to the IIS environment. These components are called
<I>server-side components</I>.</P>
<P>You can use VBScript with server-side ActiveX components to access databases connected
to the Internet server to return data to the client. You can keep track of the various
activities of the users accessing your server. You can handle mail and deliver files.
You can create responses custom-tailored to the specific requester. You can transact
business.</P>
<P>On the client side, you can use VBScript to make decisions about what information
to send back to the server, to create animation effects, and to interact with other
programs on the client computer, to name a few examples.</P>
<P>Microsoft is very serious about the Internet and is trying to position Visual
Basic as <I>the</I> language by which to program for the Internet, provided that
you use Internet Explorer as the client browser and Internet Information Server as
the Internet server software on the back end. Therefore, using Visual Basic or VBScript
within the context of the Internet is a skill that's more and more expected of programmers.</P>
<P>
<H2><A NAME="Heading2"></A>Making a Simple Program with VBScript</H2>
<P>When you install Internet Explorer on your computer, you have access to some benefits
of the Visual Basic programming environment. Although IE isn't a complete programming
environment, you still have a lot of programming potential at your disposal. Most
commands, statements, and functions available to you in Visual Basic are also accessible
to you in Internet Explorer.</P>


<BLOCKQUOTE>
	<P>
<HR>
<STRONG>Programs versus scripts</STRONG></P>
	<P>Most often you can think of a <I>script</I> as a small program. However, there
	are subtle differences between a program and a script. In the traditional sense,
	you can think of a script as a set of tasks performed in sequence. On a Web page,
	a script is a set of tasks that the page executes as it loads. <I>Programs</I>, on
	the other hand, are a collection of sets of tasks that can be performed sequentially
	or at random. For instance, you can have a program that runs a set of tasks on startup
	and another set of tasks when a user clicks a button (event-driven). As scripting
	languages such as VBScript become more powerful, however, the boundary between where
	a script ends and a program begins becomes more and more complicated. 
<HR>


</BLOCKQUOTE>

<P>When used to its full potential, VBScript is a useful but not really powerful
script language that lets you write programs to control the way things happen on
the Internet and in other environments. There has never been a script language that
can compete with a programming language such as Visual Basic. You could probably
achieve the most power by combining the two environments and using both VBScript
and Visual Basic. Other VBScript limitations include the following:</P>

<UL>
	<LI>VBScript is bound to the interpreter that lives with Internet Explorer.
	<P>
	<LI>VBScript has only one data type, Variant.
</UL>

<P>Also, you can't do the advanced things that Visual Basic enables you to do, such
as create custom controls and classes or access the Windows API. However, with VBScript
you can access ActiveX controls. The more you use VBScript, the more ways you will
discover to make it work to your benefit.</P>
<P>Because VBScript is a text-based programming language, you don't need to have
a copy of Visual Basic to program in VBScript. All you need is a text editor such
as Notepad to create HTML pages with VBScript embedded in it. Advanced tools such
as Visual InterDev offer the benefit of visual programming enhancements and editing
capabilities that enable you to write VBScript more easily.</P>
<P>VBScript executes as a Web page loads into Internet Explorer. For example, you
can use VBScript to write text to a browser window, thus avoiding the need to write
the page in HTML. Although it's far from being a replacement for HTML, VBScript does
most of the same functions, providing you with a quick solution to some Web programming
problems.</P>
<P><B>Creating an Hello World program in VBScript</B>

<DL>
	<DT></DT>
	<DD><B>1. </B>Open Notepad or another text editor and enter the following text:
</DL>



<BLOCKQUOTE>
	<PRE>&lt;SCRIPT LANGUAGE=&quot;VBScript&quot;&gt;
    document.write &quot;Hello World&quot;
&lt;/SCRIPT&gt;
</PRE>
	<P><B>2. </B>Save the text as Test.htm.</P>

</BLOCKQUOTE>


<DL>
	<DT></DT>
	<DD><B>3. </B>Open Internet Explorer.
	<P>
	<DT></DT>
	<DD><B>4. </B>Drag the Test.htm file from Windows Explorer to the client area of
	Internet Explorer (see Figure 28.2).
	<P>
</DL>

<P><A HREF="javascript:popUp('28fig02.gif')"><B>FIGURE 28.2</B></A> <I>VBScript enables
you to control output to Internet Explorer.</I></P>
<P>
<H2><A NAME="Heading3"></A>Using VBScript with Internet Explorer</H2>
<P>You can use VBScript with HTML to make Web pages that appear and behave like Visual
Basic programs. This is possible because, as you read earlier, much of Visual Basic
functionality is built into Internet Explorer. Figure 28.3 shows a simple page of
HTML, 28htm01.htm (see Listing 28.1), presented in Internet Explorer. If users enter
Fred Flintstone in the top text box, the bottom text box returns the validation string
You are in!. Any other text produces the response You are out. If you're interested
in more information on HTML programming, look into some of the books on the subject
at http://www.mcp.com.</P>
<P><A HREF="javascript:popUp('28fig03.gif')"><B>FIGURE 28.3</B></A> <I>You can process
data by using VBScript and HTML.</I></P>


<BLOCKQUOTE>
	<P>
<HR>
<STRONG>Placing VBScript on a Web page</STRONG></P>
	<P>You place VBScript between the &lt;SCRIPT&gt;&lt;/SCRIPT&gt; tags on a Web page.
	As the script is loaded from the Web page, script is executed as each line is encountered.
	If you have script at the top of a page, that script executes even if the page is
	still loading. If the script is a procedure, however, it's not executed until it's
	called from other areas in the page. Usually, procedures are placed within the &lt;HEAD&gt;&lt;/HEAD&gt;
	tags at the beginning of the page. 
<HR>


</BLOCKQUOTE>

<H4>LISTING 28.1&#160;&#160;28HTM01.HTM--A Simple Page of HTML That Processes Data</H4>
<PRE><B>01 </B>&lt;HTML&gt;</PRE>
<PRE><B>02 </B>&lt;TITLE&gt;Using VB6: VBScript&lt;/TITLE&gt;</PRE>
<PRE><B>03 </B>&lt;HEAD&gt;</PRE>
<PRE><B>04 </B>&lt;!--This is how you make a commented line in HTML--&gt;</PRE>
<PRE><B>05 </B>&lt;SCRIPT LANGUAGE=VBSCRIPT&gt;</PRE>
<PRE><B>06 </B>&lt;!--</PRE>
<PRE><B>07 </B>`This is a commented line in VBScript. You only use</PRE>
<PRE><B>08 </B>`the apostrophe within the SCRIPT tag.</PRE>
<PRE><B>09</B></PRE>
<PRE><B>10 </B>Sub cmdValidate_OnClick()</PRE>
<PRE><B>11 </B>`This Sub examines the value of the text</PRE>
<PRE><B>12 </B>`entered in the first TEXT element.</PRE>
<PRE><B>13 </B>If txtName.Value = &quot;Fred Flintstone&quot; Then</PRE>
<PRE><B>14 </B>`If TRUE, then ALLOW Login</PRE>
<PRE><B>15 </B>txtValidate.Value = &quot;You are in!&quot;</PRE>
<PRE><B>16 </B>Else</PRE>
<PRE><B>17 </B>`If NOT, then DISALLOW Login</PRE>
<PRE><B>18 </B>txtValidate.Value = &quot;You are out!&quot;</PRE>
<PRE><B>19 </B>End if</PRE>
<PRE><B>20 </B>End Sub</PRE>
<PRE><B>21 </B>--&gt;</PRE>
<PRE><B>22 </B>&lt;/SCRIPT&gt;</PRE>
<PRE><B>23 </B>&lt;/HEAD&gt;</PRE>
<PRE><B>24</B></PRE>
<PRE><B>25 </B>&lt;BODY&gt;</PRE>
<PRE><B>26</B> &lt;!--Create heading using the heading</PRE>
<PRE><B>27</B> H1 tag and center the heading --&gt;</PRE>
<PRE><B>28</B> &lt;CENTER&gt;</PRE>
<PRE><B>29</B> &lt;H1&gt;Secret Login&lt;/H1&gt;</PRE>
<PRE><B>30</B> &lt;/CENTER&gt;</PRE>
<PRE><B>31</B></PRE>
<PRE><B>32</B> &lt;!--Put in a paragraph break; create a</PRE>
<PRE><B>33</B> textbox using the INPUT TYPE= HTML</PRE>
<PRE><B>34</B> element. Make sure to put some labeling</PRE>
<PRE>35 text above the textbox. --&gt;</PRE>
<PRE><B>36</B> &lt;P&gt;</PRE>
<PRE><B>37</B> Name:</PRE>
<PRE><B>38</B> &lt;BR&gt;</PRE>
<PRE><B>39</B> &lt;INPUT TYPE=Text Size=40 ID=txtName&gt;</PRE>
<PRE><B>40</B></PRE>
<PRE><B>41</B> &lt;!--Put in a paragraph break; create another</PRE>
<PRE><B>42</B> textbox using the INPUT TYPE= HTML</PRE>
<PRE><B>43</B> element. Make sure to put some labeling</PRE>
<PRE><B>44</B> text above the textbox. --&gt;</PRE>
<PRE><B>45</B> &lt;P&gt;</PRE>
<PRE><B>46</B> Authentication:</PRE>
<PRE><B>47</B> &lt;BR&gt;</PRE>
<PRE><B>48</B> &lt;INPUT TYPE=Text Size=40 ID=txtValidate&gt;</PRE>
<PRE><B>49</B></PRE>
<PRE><B>50</B> &lt;!--Put in a paragraph break; create a</PRE>
<PRE><B>51</B> button. Give it an ID of cmdValidate</PRE>
<PRE><B>52</B> so that it will call the event handler</PRE>
<PRE><B>53</B> coded in the above SCRIPT tag. The</PRE>
<PRE><B>54</B> event handler is cmdValidate_OnClick. --&gt;</PRE>
<PRE><B>55</B> &lt;P&gt;</PRE>
<PRE><B>56</B> &lt;INPUT TYPE=Button Value=&quot;Validate&quot; ID=cmdValidate&gt;</PRE>
<PRE><B>57</B> &lt;/BODY&gt;</PRE>


<BLOCKQUOTE>
	<P>
<HR>
<STRONG>Download this code</STRONG></P>
	<P>A fully commented, unnumbered version of this code is available from <A target="_new" HREF="javascript:if(confirm('http://www.mcp/  \n\nThis file was not retrieved by Teleport Pro, because it is addressed on a domain or path outside the boundaries set for its Starting Address.  \n\nDo you want to open it from the server?'))window.location='http://www.mcp/'" tppabs="http://www.mcp/">http://www.mcp</A>.
	com/info. The code for this chapter is in the file VB6CH28.zip. 
<HR>
</P>
	<P>
<HR>
<STRONG>What are HTML elements?</STRONG></P>
	<P>Think of HTML elements as controls embedded in the Internet Explorer browser and
	accessed via HTML. HTML elements are covered in more detail in the following section.
	
<HR>


</BLOCKQUOTE>

<P>What's interesting about this program is that although it appears to be using
an intrinsic Visual Basic ActiveX control, it's not; it's made completely from HTML
and HTML elements.</P>
<P>The way the program works is that two HTML &lt;INPUT TYPE=Text&gt; elements (lines
39 and 48) and an &lt;INPUT TYPE=Button&gt; HTML element (line 56) are created. When
users click the button, a click event handler written in VBScript (lines 10-20) processes
the data input into the first text element (line 13). A response is output in line
15 or 18.</P>
<P>
<H3><A NAME="Heading4"></A>Working with HTML Elements</H3>
<P>If you don't have a working knowledge of HTML, this code might be difficult to
grasp. A fundamental understanding of HTML and HTML elements is a prerequisite for
working with VBScript on the Internet. HTML, the language of the Internet, is a <I>tagged</I>
<I>language</I>, which means that tags are used to issue instructions to the HTML
interpreter about how to process data sent from the server to the calling client.
For instance, the following piece of HTML instructs the browser to make the words
Hello World boldface.</P>
<P>
<PRE>&lt;B&gt;Helllo World&lt;/B&gt;
</PRE>
<P>In addition to tags that tell the browser how to handle text are tags that tell
the browser about the structure of the HTML page. Also, some tags create elements
very similar to the intrinsic ActiveX controls. Table 28.1 lists these elements.</P>
<P>
<H4>TABLE 28.1&#160;&#160;HTML Elements Compared to Intrinsic ActiveX Controls</H4>
<P>
<TABLE BORDER="1">
	<TR ALIGN="LEFT" VALIGN="TOP">
		<TD ALIGN="LEFT">HTML Element</TD>
		<TD ALIGN="LEFT">ActiveX Intrinsic Control</TD>
	</TR>
	<TR ALIGN="LEFT" VALIGN="TOP">
		<TD ALIGN="LEFT">&lt;INPUT TYPE=CHECKBOX&gt;</TD>
		<TD ALIGN="LEFT">CheckBox</TD>
	</TR>
	<TR ALIGN="LEFT" VALIGN="TOP">
		<TD ALIGN="LEFT">&lt;SELECT&gt;</TD>
		<TD ALIGN="LEFT">ComboBox</TD>
	</TR>
	<TR ALIGN="LEFT" VALIGN="TOP">
		<TD ALIGN="LEFT">&lt;INPUT TYPE=BUTTON&gt;</TD>
		<TD ALIGN="LEFT">CommandButtons</TD>
	</TR>
	<TR ALIGN="LEFT" VALIGN="TOP">
		<TD ALIGN="LEFT">&lt;FRAME&gt;</TD>
		<TD ALIGN="LEFT">Frame</TD>
	</TR>
	<TR ALIGN="LEFT" VALIGN="TOP">
		<TD ALIGN="LEFT">&lt;INPUT TYPE=IMAGE&gt;</TD>
		<TD ALIGN="LEFT">Image</TD>
	</TR>
	<TR ALIGN="LEFT" VALIGN="TOP">
		<TD ALIGN="LEFT">&lt;SELECT MULTIPLE&gt;</TD>
		<TD ALIGN="LEFT">ListBox</TD>
	</TR>
	<TR ALIGN="LEFT" VALIGN="TOP">
		<TD ALIGN="LEFT">&lt;INPUT TYPE=RADIO&gt;</TD>
		<TD ALIGN="LEFT">OptionButton</TD>
	</TR>
	<TR ALIGN="LEFT" VALIGN="TOP">
		<TD ALIGN="LEFT">&lt;INPUT TYPE=TEXT&gt;</TD>
		<TD ALIGN="LEFT">TextBox</TD>
	</TR>
	<TR ALIGN="LEFT" VALIGN="TOP">
		<TD ALIGN="LEFT">&lt;TEXTAREA&gt;</TD>
		<TD ALIGN="LEFT">TextBox with multiple lines and scrollbars</TD>
	</TR>
	<TR ALIGN="LEFT" VALIGN="TOP">
		<TD ALIGN="LEFT">&lt;INPUT TYPE=BUTTON&gt;</TD>
		<TD ALIGN="LEFT">CommandButton</TD>
	</TR>
	<TR ALIGN="LEFT" VALIGN="TOP">
		<TD ALIGN="LEFT">&lt;SELECT&gt;</TD>
		<TD ALIGN="LEFT">DropDownCombo or ListBox</TD>
	</TR>
</TABLE>
</P>
<P>HTML elements have properties that you can set at design time, as you would an
ActiveX control. HTML element properties are called <I>arguments</I>. The syntax
for these arguments is a bit different from properties of ActiveX controls. To create
an &lt;INPUT TYPE=TEXT&gt; element with the text Hello World in it, you would use
the following:</P>
<P>
<PRE>&lt;INPUT TYPE=TEXT SIZE=40 VALUE=&quot;Hello World&quot;&gt;
</PRE>
<P>In this syntax,</P>

<UL>
	<LI>INPUT TYPE=TEXT tells the browser to make a text element.
	<P>
	<LI>SIZE=40 tells the browser to make the element 40 characters wide.
	<P>
	<LI>VALUE=&quot;Hello World&quot; tells the browser to set Hello World as the text
	element's string.
</UL>

<P>The following sections provide a more detailed description of the HTML elements
that you use with VBScript.</P>
<P>
<H4>The &lt;FORM&gt; element</H4>
<P>HTML forms begin with the tag &lt;FORM&gt; and ends with the tag &lt;/FORM&gt;.
The &lt;FORM&gt; element takes the following format:</P>
<P>
<PRE>&lt;FORM ACTION = <I>URL</I> METHOD= post|get NAME=<I>aname</I>&gt;
...
&lt;/FORM&gt;
</PRE>
<P>In this syntax,</P>


<BLOCKQUOTE>
	<P>
<HR>
<STRONG>Working with CGI</STRONG></P>
	<P>The <I>common gateway interface</I> (CGI) is a specification that defines a set
	of standards by which data consistently and predictably enters and leaves an Internet
	Server. Originally developed for the UNIX environment, CGI is used for Internet-based
	data-processing and decision-making routines such as queries and lookups. Programs
	that do this sort of server-side processing are called <I>CGI scripts</I> and are
	usually written in a language such as Perl or C++. 
<HR>


</BLOCKQUOTE>


<UL>
	<LI>ACTION is the server-side uniform resource locator to which the form's data will
	be passed. Typically, this is a CGI script.
	<P>
	<LI>METHOD is the way that the data is passed. You can choose between the post (moves
	everything into the URL) and get (sends behind the scenes, in the background) methods.
	These methods evolve from CGI programming.
	<P>
	<LI>NAME is a user-defined ID that identifies the form. This is particularly useful
	when you have Web pages that contain more than one form.
</UL>

<P>Therefore,</P>
<P>
<PRE>&lt;FORM ACTION=http://www.mysite.com/cgi-bin/myscript.exe
 METHOD=post NAME-myform&gt;
...
&lt;/FORM&gt;
</PRE>
<P>denotes a form that will pass its data to a CGI script, myscript.exe, on the server
www.mysite.com. The form will use the post method. The name of the form is myform.</P>
<P>Forms are <I>parent elements</I>, which means that the information gathered is
generated by other HTML elements living between the &lt;FORM&gt; and &lt;/FORM&gt;
tags. An element that lives within a &lt;FORM&gt; is called a <I>child element</I>.</P>
<P>You can think of the &lt;FORM&gt; element as a nongraphical version of a Visual
Basic form. A VB form can contain buttons, text boxes, labels, and a host of other
controls. When you reference a control within a VB form, you do so through the form.
For instance, if you had a CommandButton named Command1 on a form named Form1, you
would reference the CommandButton with the following piece of code:</P>
<P>
<PRE>Form1.Command1.
</PRE>


<BLOCKQUOTE>
	<P>
<HR>
<STRONG>The Document Object Model (DOM)</STRONG></P>
	<P>The Document Object Model is the hierarchical relationship of data in a Web page.
	For example, the window object contains the document object, which can contain a
	form object. Modern VB Internet programming is about using the DOM. In earlier versions
	of HTML, the DOM was much less complex. Now the DOM has hundreds of objects, attributes,
	and methods. For an in-depth look at the DOM, visit Microsoft's Web page at http://
	www. microsoft.com/msdn/sdk/inetsdk/help/ dhtml/references/ domrefs.htm. 
<HR>


</BLOCKQUOTE>

<P>The same is true of an HTML &lt;FORM&gt;. You can have &lt;INPUT&gt;, &lt;TEXTAREA&gt;,
and &lt;SELECT&gt; elements that reside with a &lt;FORM&gt;. Therefore, if you have
a &lt;FORM NAME=MyForm&gt; element that contains an &lt;INPUT TYPE=TEXT NAME=MyText&gt;
element, you would reference it with VBScript as</P>
<P>
<PRE>MyForm.MyText
</PRE>
<P>This notion of parent and child elements becomes very important when you work
with VBScript and the Internet Explorer Document Object Model (DOM).</P>
<P>
<H4>The &lt;INPUT&gt; Element</H4>
<P>The &lt;INPUT&gt; elements are what you provide for users to enter in form data
and trigger a submission of the form's data onto a server on the Internet.</P>
<P>HTML has a standard set of &lt;INPUT&gt; types, just as VB has a standard set
of controls that you adapt to a particular purpose. Also, as with VB control properties,
each &lt;INPUT&gt; element has attributes that you configure to accommodate a particular
layout need.</P>
<P>The &lt;INPUT&gt; element attributes are as follows:</P>
<P>
<TABLE BORDER="1">
	<TR ALIGN="LEFT" VALIGN="TOP">
		<TD ALIGN="LEFT"><B><I>Attribute</I></B></TD>
		<TD ALIGN="LEFT"><B><I>Description</I></B></TD>
	</TR>
	<TR ALIGN="LEFT" VALIGN="TOP">
		<TD ALIGN="LEFT">NAME</TD>
		<TD ALIGN="LEFT">Defined name of &lt;INPUT&gt;'s data, similar to a variable name</TD>
	</TR>
	<TR ALIGN="LEFT" VALIGN="TOP">
		<TD ALIGN="LEFT">VALUE</TD>
		<TD ALIGN="LEFT">&lt;INPUT&gt;'s data, similar to the value of a variable</TD>
	</TR>
	<TR ALIGN="LEFT" VALIGN="TOP">
		<TD ALIGN="LEFT">TYPE</TD>
		<TD ALIGN="LEFT">Defines the type of &lt;INPUT&gt; element, such as Text, Radio, Checkbox, and so
			on</TD>
	</TR>
	<TR ALIGN="LEFT" VALIGN="TOP">
		<TD ALIGN="LEFT">MAXLENGTH</TD>
		<TD ALIGN="LEFT">Specifies the maximum number of characters that may be entered in an &lt;INPUT&gt;
			field</TD>
	</TR>
	<TR ALIGN="LEFT" VALIGN="TOP">
		<TD ALIGN="LEFT">SIZE</TD>
		<TD ALIGN="LEFT">Defines the size (width) of the &lt;INPUT&gt; field, is used for Text or Password</TD>
	</TR>
	<TR ALIGN="LEFT" VALIGN="TOP">
		<TD ALIGN="LEFT">CHECKED</TD>
		<TD ALIGN="LEFT">Marks a check box or sets a radio button to True</TD>
	</TR>
</TABLE>
</P>
<P>The &lt;INPUT&gt; element types are as follows:</P>

<UL>
	<LI>Text--You use the Text type to enable users to enter textual data:
</UL>



<BLOCKQUOTE>
	<PRE>&lt;INPUT TYPE=Text SIZE=40 NAME=txtName&gt;</PRE>

</BLOCKQUOTE>

<PRE></PRE>

<UL>
	<LI>Password--A Password type is similar to a Text &lt;INPUT&gt; element type, but
	the characters that users enter are masked with asterisks. Although the type offers
	some measure of security, the type's security can be breached with little difficulty
	if you don't have a secure transaction.
</UL>



<BLOCKQUOTE>
	<PRE>&lt;INPUT TYPE=Password NAME=pswMain&gt;</PRE>

</BLOCKQUOTE>

<PRE></PRE>

<UL>
	<LI>Submit--The Submit button is the &lt;INPUT&gt; type that you use to create a
	button that, when clicked, triggers the submission of a form's data to a server on
	the Internet. The browser will show the caption of the Submit type to be the string
	Submit unless the VALUE is assigned another string.
</UL>



<BLOCKQUOTE>
	<PRE>&lt;INPUT TYPE=Submit Value=&quot;Submit Profile&quot;
 NAME=Submit&gt;</PRE>

</BLOCKQUOTE>

<PRE></PRE>

<UL>
	<LI>Reset--This &lt;INPUT&gt; type creates a button that clears the data from all
	fields on an HTML form when clicked:
</UL>



<BLOCKQUOTE>
	<PRE>&lt;INPUT TYPE=Reset Value=&quot;Clear Profile&quot;
 NAME=Reset&gt;</PRE>

</BLOCKQUOTE>

<PRE></PRE>

<UL>
	<LI>Button--This &lt;INPUT&gt; type creates a button that can be referenced with
	VBScript:
</UL>



<BLOCKQUOTE>
	<PRE>&lt;INPUT TYPE=Button NAME=cmdValidate
 Value=&quot;Validate&gt;</PRE>

</BLOCKQUOTE>

<PRE></PRE>

<UL>
	<LI>Radio--Radio buttons are used to make exclusive choices, very much in the same
	way that you use an OptionButton control in VB. The tricky thing is to understand
	that for a set of Radio types to be exclusive of one another, all Radio types to
	be grouped must have the same value attached to their NAME attribute:
</UL>



<BLOCKQUOTE>
	<PRE>&lt;INPUT TYPE=RADIO NAME=opFlintstones
 VALUE=&quot;Fred&quot;&gt;Fred&lt;BR&gt;
&lt;INPUT TYPE=RADIO NAME=opFlintstones
 VALUE=&quot;Wilma&quot;&gt;Wilma&lt;BR&gt;
&lt;INPUT TYPE=RADIO NAME=opFlintstones
 VALUE=&quot;Betty&quot;&gt;Betty&lt;BR&gt;
&lt;INPUT TYPE=RADIO NAME=opFlintstones
 VALUE=&quot;Barney&quot;&gt;Barney&lt;BR&gt;</PRE>

</BLOCKQUOTE>

<PRE></PRE>

<UL>
	<LI>When you submit the form, only the VALUE of the chosen Radio type will be sent
	to the server.
	<P>
	<LI>Checkbox--Check boxes are used to make inclusive choices. The value of the NAME
	attribute for each check box must be different. When you add the parameter CHECKED,
	you put a check mark in the check box.
</UL>



<BLOCKQUOTE>
	<PRE>&lt;INPUT TYPE=CHECKBOX NAME=chkCartoon
 VALUE=IsCartoon CHECKED&gt;</PRE>

</BLOCKQUOTE>

<PRE></PRE>

<UL>
	<LI>Hidden--Hidden &lt;INPUT&gt; types are never shown on the form. Using hidden
	types is a good way to send some data from the form to the server without users knowing
	about it. It's as though you have a piece of data embedded in the form, which you
	can return to the server on a free-ride basis. For the following code example, I
	attached this name to a HIDDEN input type:
</UL>



<BLOCKQUOTE>
	<PRE>&lt;INPUT TYPE=Hidden NAME=hidAuthor
 VALUE=&quot;Bob Reselman&quot;&gt;</PRE>

</BLOCKQUOTE>

<PRE></PRE>

<UL>
	<LI>When the data is sent back to the server, my name will also be sent to the server
	without users ever having chosen to have such data sent.
	<P>
	<LI>Image--An IMAGE &lt;Input&gt; type displays a GIF image that has the behavior
	of a SUBMIT &lt;INPUT&gt; type:
</UL>



<BLOCKQUOTE>
	<PRE>INPUT TYPE=image NAME=imgMain SRC=gifs/gifbut.gif&gt;</PRE>

</BLOCKQUOTE>

<PRE></PRE>
<H4>The &lt;SELECT&gt; Element</H4>
<P>A &lt;SELECT&gt; element is similar to an &lt;INPUT&gt; element in that it enables
users to input data to be submitted to a server on the Internet. The &lt;SELECT&gt;
element is a little more powerful, how-ever, in that it has the behavior of a Visual
Basic ListBox or ComboBox.</P>
<P>The tag begins with &lt;SELECT&gt; and ends with &lt;/SELECT&gt;. Between the
tags, you place &lt;OPTION&gt; elements:</P>
<P>
<PRE>&lt;SELECT NAME=&quot;lstUser&quot;&gt;
&lt;OPTION VALUE=&quot;Admin&quot;&gt;Admin
&lt;OPTION VALUE=&quot;Employee&quot;&gt;Employee
&lt;OPTION VALUE=&quot;Guest&quot;&gt;Guest
&lt;/SELECT&gt;
</PRE>
<P>If you use the MULTIPLE attribute in the tag definition, the element will appear
as a list, similar to the Visual Basic ListBox. When the element appears as a list,
you can submit multiple &lt;OPTION&gt; elements to the server. If you omit the MULTIPLE
attribute, the element will appear as a drop-down box, similar to a VB ComboBox,
from which you can choose only one &lt;OPTION&gt;.</P>
<P>
<H4>The &lt;TEXTAREA&gt; Element</H4>


<BLOCKQUOTE>
	<P>
<HR>
<STRONG>Some things in common</STRONG></P>
	<P>Although various HTML elements have common arguments, the behavior associated
	with these elements is different. Fortunately, the VB6 IDE has created a way to set
	HTML elements just as you would an ActiveX control. This topic is covered later in
	the section &quot;Using DHTML with ActiveX Components.&quot; 
<HR>


</BLOCKQUOTE>

<P>The &lt;TEXTAREA&gt; element is similar to a TEXT &lt;INPUT&gt; type, except that
a &lt;TEXTAREA&gt; element can accept multiple lines of text. The tag definition
begins with &lt;TEXTAREA&gt; and ends with &lt;/TEXTAREA&gt;:</P>
<P>
<PRE>&lt;TEXTAREA NAME=txtComments ROWS=5 COLS=30&gt;
&lt;/TEXTAREA&gt;
</PRE>
<P>Any text that appears between the tags will show up in the field of the &lt;TEXTAREA&gt;.
These tags will also accept a default value.</P>
<P>The &lt;TEXTAREA&gt; element has three attributes:</P>
<P><B>Attribute Description</B></P>
<P>NAME The name of the element (required)</P>
<P>ROWS The number of rows in the &lt;TEXTAREA&gt; field</P>
<P>COLS The width of the field in characters</P>
<P>
<H3><A NAME="Heading5"></A>More on Scripts</H3>
<P>From the browser's point of view, the only difference between Web pages that contain
a script and those than don't is the presence of the &lt;SCRIPT&gt; tag in the page's
HTML. A &lt;SCRIPT&gt;&lt;/SCRIPT&gt; tag indicates that everything between the tags
is VBScript or JavaScript. The syntax of the &lt;SCRIPT&gt; tag is</P>
<P>
<PRE>&lt;SCRIPT LANGUAGE = <I>scripting language</I>&gt;...&lt;/SCRIPT&gt;
</PRE>
<P>When a browser sees the &lt;SCRIPT&gt; tag, it says to itself, &quot;I have some
script stuff coming up to consider.&quot; When the browser sees the &lt;/SCRIPT&gt;
tag, it stops that consideration. Unless the script is code for an event handler,
sub, or function, the script will be executed in the order in which it's encountered.</P>
<P>The &lt;SCRIPT&gt; tag has a LANGUAGE attribute that indicates the scripting language
used. The &lt;SCRIPT&gt; tag supports VBScript, Jscript, and JavaScript.</P>
<P>You code VBScript between the &lt;SCRIPT&gt;&lt;/SCRIPT&gt; tags just as you would
code VB within the Visual Basic IDE. You Dim variables, write code, and use apostrophes
to begin comment lines. If you declare a variable within a Sub or Function, that
variable is local to the Sub or Function; variables declared outside a Sub or Function
are global. As mentioned earlier, all variables are variants, but you can typecast
values by using the conversion functions of Cint(), CLng(), CStr(), and so forth.</P>
<P>As mentioned earlier, scripts can run from a server on the Internet or from your
local hard drive. The browser considers only the structure of the script, not its
source. Therefore, you load and run client-side scripted HTML as you load any other
Web page. This might not be entirely true in all cases if you're trying to run scripts
by using objects that will run on the client or the server based on where the page
resides.</P>
<P>In Listing 28.1, lines 5-22 are the &lt;SCRIPT&gt; portion of the page. The script
contains the code for a click event handler for the Button element cmdValidate. The
code for the event handler starts at line 10 and ends at line 20.</P>
<P>
<H3><A NAME="Heading6"></A>Incorporating VBScript with HTML</H3>
<P>Figure 28.4 shows a Web page that contains the &lt;TABLE&gt;, Form, CheckBox,
Radio, Text, &lt;TEXTAREA&gt;, &lt;SELECT&gt;, Password, and Button HTML elements.
At the bottom of the page is a button that, when clicked, displays the Internet Explorer
Alert dialog. If users enter the correct password, the Alert dialog--the HTML equivalent
of a MessageBox--reports back the type of user, any comments from the Comment text
area, the selected Radio elements, and an indication of which check boxes have been
selected. The code that executes this logic is written in the VBScript click event
procedure cmdValidate_OnClick. Listing 28.2 shows the HTML and VBScript for this
page.</P>

<P><A HREF="javascript:popUp('28fig04.gif')"><B>FIGURE 28.4</B></A> <I>The &lt;TABLE&gt;
element, part of the HTML 3.0 standard, creates a table that contains a caption (&lt;CAPTION&gt;)
and any number of rows (&lt;TR&gt;). More new tags are being added to this element
every day.</I></P>

<P><I></I>
<H4>LISTING _28.2&#160;&#160;28HTM02.HTM--A Web Page with the HTML elements</H4>
<PRE><B>01 </B>&lt;html&gt;</PRE>
<PRE><B>02 </B>&lt;!--Created by Bob Reselman</PRE>
<PRE><B>03 </B>Copyright 1998 Macmillan Publishing --&gt;</PRE>
<PRE><B>04 </B>&lt;head&gt;</PRE>
<PRE><B>05 </B>&lt;title&gt;Using VB6: HTML Elements&lt;/title&gt;</PRE>
<PRE><B>06 </B>&lt;/head&gt;</PRE>
<PRE><B>07</B></PRE>


<BLOCKQUOTE>
	<P>
<HR>
<STRONG>Commenting HTML</STRONG></P>
	<P>You comment HTML code by putting comments between the characters, &lt;!-- and
	--&gt;. For example, the code &lt;!-- _Created by Bob Reselman --&gt; indicates that
	the string Created by Bob Reselman won't be interpreted as HTML; it will be ignored
	as comments. You can have as many lines between the begin and end comment characters
	as you want. 
<HR>
</P>

</BLOCKQUOTE>

<PRE><B>08 </B>&lt;body&gt;</PRE>
<PRE><B>09 </B>&lt;script language=&quot;VBScript&quot;&gt;&lt;!--</PRE>
<PRE><B>10</B> Sub cmdValidate_OnClick()</PRE>
<PRE><B>11 </B>Dim br `Line Break variable'</PRE>
<PRE><B>12 </B>Dim strBuffer `String buffer to hold</PRE>
<PRE><B>13 </B>`alert message</PRE>
<PRE><B>14 </B>Dim i `Counter variable</PRE>
<PRE><B>15 </B>Dim j `Another counter variable</PRE>
<PRE><B>16</B></PRE>
<PRE><B>17 </B>`Set the line break var to the line break chars</PRE>
<PRE><B>18 </B>br = Chr(10) &amp; Chr(13)</PRE>
<PRE><B>19</B></PRE>
<PRE><B>20 </B>`Set the string buffer to report who is entering</PRE>
<PRE><B>21 </B>`by getting the value from the SELECT element.</PRE>
<PRE><B>22 </B>strBuffer = strBuffer + &quot;User: &quot; &amp; _</PRE>
<PRE>frmLogin.lstUser.Value + br + br</PRE>
<PRE><B>23 </B>`Cycle through all the forms in the document in the</PRE>
<PRE><B>24 </B>`browser window</PRE>
<PRE><B>25 </B>For i = 0 to document.forms.length - 1</PRE>
<PRE><B>26 </B>+ document.forms(i).name + br</PRE>
<PRE><B>27 </B>strBuffer = strBuffer + &quot;Form Name: &quot; _</PRE>
<PRE>For j = 0 to document.forms(i).elements.length - 1</PRE>
<PRE><B>28 </B>`Within each form, check all the child elements</PRE>
<PRE><B>29 </B>`to see if the type is a RADIO</PRE>
<PRE><B>30 </B>If document.forms(i).elements(j).type = &quot;radio&quot; Then</PRE>
<PRE><B>31 </B>`If you find a RADIO, see if it is checked</PRE>
<PRE><B>32 </B>If document.forms(i).elements(j).checked Then</PRE>
<PRE><B>33 </B>`Concatenate the string by adding an indication</PRE>
<PRE><B>34 </B>`of which RADIO has been checked.</PRE>
<PRE><B>35 </B>strBuffer = strBuffer + &quot;Selected Option: &quot;</PRE>
<PRE><B>36 </B>strBuffer = strBuffer _</PRE>
<PRE>+ document.forms(i).elements(j).value</PRE>
<PRE><B>37 </B>`Put in a line break</PRE>
<PRE><B>38 </B>strBuffer = strBuffer + br</PRE>
<PRE><B>39 </B>End If</PRE>
<PRE><B>40 </B>ElseIf _</PRE>
<PRE>`check to see if the element is a checkbox</PRE>
<PRE><B>41 </B>document.forms(i).elements(j).type = &quot;checkbox&quot; Then</PRE>
<PRE><B>42 </B>If document.forms(i).elements(j).Checked Then</PRE>
<PRE><B>43 </B>`If the checkbox is checked, concatenate the string</PRE>
<PRE><B>44 </B>`buffer to indicate the check means the show is</PRE>
<PRE><B>45 </B>`a cartoon.</PRE>
<PRE><B>46 </B>strBuffer = strBuffer + &quot;Show type is a cartoon.&quot; _</PRE>
<PRE>+ br</PRE>
<PRE><B>47 </B>End If</PRE>
<PRE><B>48 </B>End If</PRE>
<PRE><B>49 </B>Next</PRE>
<PRE><B>50 </B>Next</PRE>
<PRE><B>51 </B>`Concatenate the string buffer to line break and</PRE>
<PRE><B>52 </B>`report the comment that is entered.</PRE>
<PRE><B>53 </B>strBuffer = strBuffer + br + &quot;Comments: &quot; + br</PRE>
<PRE><B>54 </B>`in the TEXTAREA element of the FORM, frmLogin (read</PRE>
<PRE><B>55 </B>`the value property)</PRE>
<PRE><B>56 </B>strBuffer = strBuffer + frmLogin.txtComments.Value</PRE>
<PRE><B>57 </B>`Check to see if the user entered the proper password</PRE>
<PRE><B>58 </B>`(&quot;TV&quot;) in the PASSWORD element.</PRE>
<PRE><B>59 </B>If frmLogin.pswMain.Value = &quot;TV&quot; Then</PRE>
<PRE><B>60 </B>`If the entry is valid, display the string buffer</PRE>
<PRE><B>61 </B>Alert strBuffer</PRE>
<PRE><B>62 </B>Else</PRE>
<PRE><B>63 </B>`If not, report an error message</PRE>
<PRE><B>64 </B>Alert &quot;You did not login correctly&quot;</PRE>
<PRE><B>65 </B>End If</PRE>
<PRE><B>66 </B>End Sub</PRE>
<PRE><B>67 </B>--&gt;</PRE>
<PRE><B>68 </B>&lt;/script&gt;</PRE>
<PRE><B>69 </B>&lt;!--Create heading using the H1 tag and</PRE>
<PRE><B>70 </B>center the heading --&gt;</PRE>
<PRE><B>71</B></PRE>
<PRE><B>72 </B>&lt;H1 align=&quot;center&quot;&gt;HTML Elements&lt;/H1&gt;</PRE>
<PRE><B>73</B></PRE>
<PRE><B>74 </B>&lt;!--Make a table 1 row by 2 colswhich creates</PRE>
<PRE><B>75 </B>a layout structure for the FORM, frmLogin.</PRE>
<PRE><B>76 </B>Set the Border value to one so that the lines</PRE>
<PRE><B>77 </B>show up.--&gt;</PRE>
<PRE><B>78 </B>&lt;TABLE BORDER=&quot;1&quot;&gt;</PRE>
<PRE><B>79 </B>&lt;!-- Create a form using the &lt;FORM&gt; tag. --&gt;</PRE>
<PRE><B>80 </B>&lt;FORM NAME=&quot;frmLogin&quot;&gt;</PRE>
<PRE><B>81 </B>&lt;TR&gt;</PRE>
<PRE><B>82 </B>&lt;!--Put the user drop-down in the first cell of the</PRE>
<PRE><B>83 </B>first row. --&gt;</PRE>
<PRE><B>84 </B>&lt;TD&gt;</PRE>
<PRE><B>85 </B>&lt;SELECT NAME=&quot;lstUser&quot; SIZE=&quot;1&quot;&gt;</PRE>
<PRE><B>86 </B>&lt;OPTION VALUE=&quot;Admin&quot;&gt;Admin &lt;/OPTION&gt;</PRE>
<PRE><B>87 </B>&lt;OPTION VALUE=&quot;Employee&quot;&gt;Employee &lt;/OPTION&gt;</PRE>
<PRE><B>88 </B>&lt;OPTION VALUE =&quot;Guest&quot;&gt;Guest &lt;/OPTION&gt;</PRE>
<PRE><B>89 </B>&lt;/SELECT &gt;</PRE>
<PRE><B>90 </B>&lt;/TD&gt;</PRE>
<PRE><B>91 </B>&lt;!--Add the Password element and the TextArea</PRE>
<PRE><B>92 </B>Comment box to the second cell in the first row of</PRE>
<PRE><B>93 </B>the table. --&gt;</PRE>
<PRE><B>94 </B>&lt;TD&gt;</PRE>
<PRE><B>95 </B>Password:&lt;BR&gt;</PRE>
<PRE><B>96 </B>&lt;INPUT TYPE=&quot;PASSWORD&quot; SIZE=&quot;20&quot; NAME=&quot;pswMain&quot;&gt;&lt;BR&gt;</PRE>
<PRE>97 Any Comments?: &lt;BR&gt;</PRE>
<PRE><B>98 </B>&lt;TEXTAREA NAME =&quot;txtComments&quot; ROWS=&quot;5&quot; 102:COLS=&quot;30&quot;&gt;</PRE>
<PRE><B>99 </B>&lt;/TEXTAREA &gt;</PRE>
<PRE><B>100 </B>&lt;!--Put in the closing tags for the Table and the</PRE>
<PRE><B>101 </B>form. --&gt;</PRE>
<PRE><B>102 </B>&lt;/TD&gt;</PRE>
<PRE><B>103 </B>&lt;/TR&gt;</PRE>
<PRE><B>104 </B>&lt;/FORM&gt;</PRE>
<PRE><B>105</B> &lt;/TABLE&gt;</PRE>
<PRE><B>106</B></PRE>
<PRE><B>107 </B>&lt;P&gt;</PRE>
<PRE><B>108 </B>&lt;!-- Create another table, 1 row by 2 cols to</PRE>
<PRE><B>109 </B>hold all the TV radio elements and the checkbox</PRE>
<PRE><B>110 </B>elements. --&gt;</PRE>
<PRE><B>111 </B>&lt;TABLE BORDER=&quot;1&quot;&gt;</PRE>
<PRE><B>112 </B>&lt;TR&gt;</PRE>
<PRE><B>113 </B>&lt;TD&gt;</PRE>
<PRE><B>114 </B>&lt;!-- Put the form to hold the elements for the</PRE>
<PRE><B>115 </B>Flintstones in the first row, first column. --&gt;</PRE>
<PRE><B>116 </B>&lt;FORM Name=&quot;frmFlintstones&quot;&gt;</PRE>
<PRE><B>117 </B>&lt;!-- Make the font for the heading of these groups</PRE>
<PRE><B>118 </B>larger, bold and Arial. Put a line break at the end</PRE>
<PRE><B>119 </B>of the heading--&gt;</PRE>
<PRE><B>120 </B>&lt;FONT SIZE=&quot;4&quot; FACE=&quot;ARIAL&quot;&gt;Flintstone&lt;/FONT&gt;&lt;BR&gt;</PRE>
<PRE><B>121 </B>&lt;!-- Make the label bold and put a space after the</PRE>
<PRE><B>122 </B>end of the label and then a line break. --&gt;</PRE>
<PRE><B>123 </B>&lt;B&gt;Choose a Character:&amp;nbsp;&lt;/B&gt;&lt;BR&gt;</PRE>
<PRE><B>124 </B>&lt;!-- Create some radio buttons for the</PRE>
<PRE><B>125 </B>Flintstones. Put a page break between</PRE>
<PRE><B>126 </B>each radio button.--&gt;</PRE>


<BLOCKQUOTE>
	<P>
<HR>
<STRONG>Case sensitivity</STRONG></P>
	<P>Because VBScript and HTML aren't case-sensitive languages, &lt;INPUT TYPE=Text&gt;
	is the same as &lt;input type=text&gt;. However, JavaScript is case- sensitive. 
<HR>


</BLOCKQUOTE>

<PRE><B>127 </B>&lt;INPUT TYPE=&quot;radio&quot; NAME=&quot;opFlintstones&quot;</PRE>
<PRE><B>128 </B>VALUE=&quot;Fred&quot;&gt;Fred&lt;BR&gt;</PRE>
<PRE><B>129 </B>&lt;INPUT TYPE=&quot;radio&quot; NAME=&quot;opFlintstones&quot;</PRE>
<PRE><B>130 </B>VALUE=&quot;Wilma&quot;&gt;Wilma&lt;BR&gt;</PRE>
<PRE><B>131 </B>&lt;INPUT TYPE=&quot;radio&quot; NAME=&quot;opFlintstones&quot;</PRE>
<PRE><B>132 </B>VALUE=&quot;Betty&quot;&gt;Betty&lt;BR&gt;</PRE>
<PRE><B>133 </B>&lt;INPUT TYPE=&quot;radio&quot; NAME=&quot;opFlintstones&quot;</PRE>
<PRE><B>134 </B>VALUE=&quot;Barney&quot;&gt;Barney&lt;P&gt;</PRE>
<PRE><B>135 </B>&lt;!--Put in a checkbox to denote a cartoon. --&gt;</PRE>
<PRE><B>136 </B>&lt;INPUT TYPE=&quot;checkbox&quot; CHECKED NAME=&quot;chkCartoon&quot;</PRE>
<PRE><B>137 </B>VALUE =&quot;IsCartoon&quot;&gt;Cartoon?</PRE>
<PRE><B>138 </B>&lt;!-- Close off the Flintstone form --&gt;</PRE>
<PRE><B>139 </B>&lt;/FORM&gt;</PRE>
<PRE><B>140 </B>&lt;!-- Close off the first cell --&gt;</PRE>
<PRE><B>141 </B>&lt;/TD&gt;</PRE>
<PRE><B>142 </B>&lt;!-- Make the next cell in the first row hold</PRE>
<PRE><B>143 </B>the Star Trek stuff. --&gt;</PRE>
<PRE><B>144</B> &lt;TD&gt;</PRE>
<PRE><B>145</B> &lt;!-- Make the form name, frmStarTrek &gt;</PRE>
<PRE><B>146 </B>&lt;FORM NAME=&quot;frmStarTrek&quot;&gt;</PRE>
<PRE><B>147 </B>&lt;!-- Set the heading font as above --&gt;</PRE>
<PRE><B>148 </B>&lt;FONT SIZE=&quot;4&quot; FACE=&quot;ARIAL&quot;&gt;Star Trek&lt;/FONT&gt;&lt;BR&gt;</PRE>
<PRE><B>149 </B>&lt;!-- Bold and line break as before. --&gt;</PRE>
<PRE><B>150 </B>&lt;B&gt;Choose a Character:&amp;nbsp;&lt;/B&gt;&lt;BR&gt;</PRE>
<PRE><B>151 </B>&lt;INPUT TYPE=&quot;radio&quot; NAME=&quot;opStarTrek&quot;</PRE>
<PRE><B>152 </B>VALUE=&quot;Kirk&quot;&gt;Kirk&lt;BR&gt;</PRE>
<PRE><B>153 </B>&lt;INPUT TYPE=&quot;radio&quot; NAME=&quot;opStarTrek&quot;</PRE>
<PRE><B>154 </B>VALUE=&quot;Spock&quot;&gt;Spock&lt;BR&gt;</PRE>
<PRE><B>155 </B>&lt;INPUT TYPE=&quot;radio&quot; NAME=&quot;opStarTrek&quot;</PRE>
<PRE><B>156 </B>VALUE=&quot;McCoy&quot;&gt;McCoy&lt;BR&gt;</PRE>
<PRE><B>157 </B>&lt;INPUT TYPE=&quot;radio&quot; NAME=&quot;opStarTrek&quot;</PRE>
<PRE><B>158 </B>VALUE=&quot;Scotty&quot;&gt;Scotty&lt;P&gt;</PRE>
<PRE><B>159 </B>&lt;!--Put in a checkbox to denote a cartoon. --&gt;</PRE>
<PRE><B>160 </B>&lt;INPUT TYPE=&quot;checkbox&quot; NAME=&quot;chkCartoon&quot;</PRE>
<PRE><B>161 </B>VALUE=&quot;IsCartoon&quot;&gt;Cartoon?</PRE>
<PRE><B>162 </B>&lt;!-- Close off the Form and Table --&gt;</PRE>
<PRE><B>163 </B>&lt;/FORM&gt;</PRE>
<PRE><B>164 </B>&lt;/TD&gt;</PRE>
<PRE><B>165 </B>&lt;/TR&gt;</PRE>
<PRE><B>166 </B>&lt;/TABLE&gt;</PRE>
<PRE><B>167 </B>&lt;!--Make a button; put the word Validate in the button</PRE>
<PRE><B>168 </B>face. Make the name of the button cmdValidate. --&gt;</PRE>
<PRE><B>169 </B>&lt;P&gt;&lt;INPUT TYPE =&quot;button&quot; VALUE=&quot;Validate&quot;</PRE>
<PRE><B>170 </B>NAME=&quot;cmdValidate&quot;&gt;</PRE>
<PRE><B>171 </B>&lt;!-- Close off the Body of the page. --&gt;</PRE>
<PRE><B>172 </B>&lt;/BODY&gt;</PRE>
<PRE><B>173 </B>&lt;/HTML&gt;</PRE>
<P>This VBScript code shows you how to program the various standard HTML elements.
Notice on line 26 that the code uses the length property of the document.forms element
to determine how many forms are within the HTML document. In HTML, the length property
is similar to the Visual Basic count property for collections. The use of the length
property on line 26 and again on line 29 for the elements collection should give
you a sense that an HTML document is a series of collections within collections (or
arrays within arrays, to use non-language-centric terminology). As you program more
with HTML and DOM, you will find yourself traversing and manipulating the various
collections of elements in a document. Therefore, an understanding of the different
collections and parent-child hierarchies with the DOM is fundamental for developing
more complex Web pages with VBScript. The SideNote titled &quot;The Document Object
Model (DOM)&quot; earlier in this chapter shows you the URL for the Microsoft site
that provides documentation for the DOM.</P>


<BLOCKQUOTE>
	<P>
<HR>
<STRONG>Static versus dynamic Web pages</STRONG></P>
	<P>A static Web page is one in which the content is hard-coded in HTML and not subject
	to quick change. For instance, if you wanted to make a Web page that presents the
	works of Shakespeare, you could type up all the plays in a word processor, save the
	document as HTML, and put it on a Web site. You probably wouldn't expect the data
	to change at all after you posted it on the site. Dynamic data, on the other hand,
	changes all the time and is usually written using an HTML script. For instance, if
	you wanted to have a Web page that reports the current price of your favorite stock,
	you would do it by writing a small program in a scripting language such as VBScript.
	The program would go to a stock-reporting server, ask for the current price of your
	stocks, and then forward those prices to you. 
<HR>


</BLOCKQUOTE>

<P>As you can see, making the page in Figure 28.4 (refer to Listing 28.2) is a laborious
effort because of manipulating the HTML elements necessary to organize the page into
an acceptable presentation and writing the VBScript to handle the events and actions
within the page. DHTML is much more difficult and time-consuming in this respect.
Before Visual Basic 6, this sort of scripting was the only way that you could make
dynamic Web pages. Although powerful, scripting of this sort is tedious and exposed.
The code that you write is open for the world to see--not advantageous if you are
at all concerned with protecting your intellectual property. However, Visual Basic
6 lets you write VBScript with HTML in a way that's less burdensome and more protective
of your code--using dynamic HTML.</P>
<P>
<H3><A NAME="Heading7"></A>Handling Events with VBScript</H3>
<P>You write an event procedure for an HTML element or ActiveX control in VBScript
by using the standard Visual Basic syntax. The only difference is that, whereas the
Visual Basic IDE creates the event-procedure code block for you, in VBScript you
must create the code block yourself. Therefore, if you want to write a click event
procedure for the element &lt;INPUT TYPE=BUTTON NAME=MyButton&gt;, you write</P>
<P>
<PRE>&lt;SCRIPT Language=VBScript&gt;
Sub MyButton_OnClick()
`Enter code here.
...
End Sub
&lt;/SCRIPT&gt;
</PRE>
<P>Plenty more information on VBScript and ActiveX controls is available. The Internet
contains so much on subjects related to Internet programming that it would probably
take a normal person several thousand years to research only a small percentage of
it. I make this statement with the intention of motivating you to discover how huge
the resources are. Some of these resources can be found at Microsoft's Knowledge
Base (http://www.microsoft.com) and at Netscape (<A target="_new" HREF="javascript:if(confirm('http://www.netscape.com/  \n\nThis file was not retrieved by Teleport Pro, because it is addressed on a domain or path outside the boundaries set for its Starting Address.  \n\nDo you want to open it from the server?'))window.location='http://www.netscape.com/'" tppabs="http://www.netscape.com/">http://www.netscape.com</A>).
You also can refer to http://www.mcp.com, particularly for <I>Java 97 Unleashed</I>,
<I>FrontPage 97 Unleashed</I>, and other books on HTML.</P>
<P><A HREF="javascript:popUp('28fig05.gif')"><B>FIGURE 28.5</B></A> <I>You select
a DHTML application project from the New Project dialog.</I></P>
<P>
<H2><A NAME="Heading8"></A>Understanding a DHTML Application</H2>


<BLOCKQUOTE>
	<P>
<HR>
<STRONG>Working with designers</STRONG></P>
	<P>A <I>designer</I> is a helper application that you load into the Visual Basic
	IDE. Designers automate many programming functions that you need for a particular
	activity or type of program. VB6 has introduced numerous new designers, including
	designers for data projects and add-ins. The DHTML Page Designer provides a visual
	way to lay out, format, and code DHTML pages. As of this writing, designers are written
	in C++. 
<HR>


</BLOCKQUOTE>

<P>Visual Basic has a new project type, the DHTML application (see Figure 28.5).
A DHTML application is a program that you design within the DHTML Page Designer in
the Visual Basic IDE (see Figure 28.6) and program in Visual Basic (see Figure 28.7),
but it runs as HTML in Internet Explorer (see Figure 28.8).</P>
<P><A HREF="javascript:popUp('28fig06.gif')"><B>FIGURE 28.6</B></A> <I>The DHTML
Page Designer for a DHTML application is very similar to the standard Visual Basic
IDE.</I></P>
<P><A HREF="javascript:popUp('28fig07.gif')"><B>FIGURE 28.7</B></A> <I>You code DHTML
applications as you would a standard VB program.</I></P>
<P><A HREF="javascript:popUp('28fig08.gif')"><B>FIGURE 28.8</B></A> <I>DHTML applications
run within Internet Explorer as HTML.</I></P>
<P>There's a slight twist, however--the code that you write for your DHTML application
is compiled into a DLL that's embedded in a Web page that the Visual Basic IDE creates
as part of the DHTML project. All the code--event procedures, variables, functions,
subs, and so on--is contained in that DLL. The only thing exposed is the HTML that
defines and positions the HTML elements (see Figure 28.9).</P>
<P><A HREF="javascript:popUp('28fig09.gif')"><B>FIGURE _28.9</B></A> <I>The DHTML
application compiles into a DLL that the Visual Basic IDE embeds in a Web page and
references with a class ID.</I></P>
<P>
<H3><A NAME="Heading9"></A>Programming a Simple DHTML Application</H3>
<P>You create a DHTML program as you would a standard Visual Basic application. The
only difference is that the IDE for a DHTML application contains a Toolbox for HTML
elements. Rather than use intrinsic ActiveX controls on a form, you use HTML elements
within a Web page. For example, rather than call the Text property to find out the
contents of a TextBox control, you call value. This is because DHTML uses the &lt;INPUT
TYPE=Text&gt; element instead of a TextBox. You can use ActiveX controls within a
DHTML application, but you use only those ActiveX controls that ship as an OCX or
ActiveX DLL. You can't use the intrinsic controls in the VB6 runtime DLL.</P>


<BLOCKQUOTE>
	<P>
<HR>
<STRONG>Using multiple browsers</STRONG></P>
	<P>As of this writing, DHTML applications aren't supported by any browser other than
	Internet Explorer. Although Netscape supports a version of DHTML, it's not officially
	recognized by the W3C consortium and isn't compatible with Microsoft's Internet Explorer.
	
<HR>


</BLOCKQUOTE>

<P>Another noteworthy difference between standard VB and a DHTML application is the
use of the property id instead of Name. You use the id property for an element or
ActiveX control in DHTML as you would use the Name property for a control in VB.
This use is particular to Microsoft's enhancement of DHTML as it relates to use under
Internet Explorer. You can use the Name property when scripting standard HTML.</P>
<P>If you're unfamiliar with the DOM and the properties associated with DHTML elements,
you might have a little period of adjustment ahead of you. The Microsoft Web site
is an excellent learning resource. Also, you can use the Books Online reference that
comes on your Visual Basic CD-ROM.</P>
<P><B>Create a simple DHTML application</B>


<BLOCKQUOTE>
	<P>
<HR>
<STRONG>Download this project's code</STRONG></P>
	<P>The code for this project is in the file VB6CH28.zip, which you can download from
	<A target="_new" HREF="javascript:if(confirm('http:// www.mcp.com/info  \n\nThis file was not retrieved by Teleport Pro, because it is addressed on a domain or path outside the boundaries set for its Starting Address.  \n\nDo you want to open it from the server?'))window.location='http:// www.mcp.com/info'" tppabs="http:// www.mcp.com/info">http:// www.mcp.com/info</A>. The project file
	is DHTMLProject. vbp. 
<HR>


</BLOCKQUOTE>


<DL>
	<DT></DT>
	<DD><B>1. </B>Open a New DHTML application project.
	<P>
	<DT></DT>
	<DD><B>2. </B>Double-click the <B>DHTMLPage Designer</B> in the Project window to
	open the DHTML form (see Figure 28.10).
	<P>
</DL>

<P><A HREF="javascript:popUp('28fig10.gif')"><B>FIGURE 28.10</B></A> <I>The DHTML
Page Designer automates code generation.</I></P>

<DL>
	<DT><I></I></DT>
	<DD><B>3. </B>Double-click the <B>TextField</B> element to add it to the form.
	<P>
	<DT></DT>
	<DD><B>4. </B>Double-click the <B>Button</B> element to add it to the form (see Figure
	28.11).
</DL>

<P><A HREF="javascript:popUp('28fig11.gif')"><B>FIGURE 28.11</B></A> <I>You can drag
and drop HTML elements around a form just as you would in the standard Visual Basic
IDE.</I>

<DL>
	<P>
	<DD><B>5. </B>Position the TextField and Button elements one on top of the other.
	<P>
	<DT></DT>
	<DD><B>6. </B>Select Button1's value property in the Properties window. Change the
	value property from Button1 to Click Me.
	<P>
	<DT></DT>
	<DD><B>7. </B>In the page view pane, double-click the <B>Button1</B> element to open
	a code pane to the Button1_onclick() event procedure.
	<P>
	<DT></DT>
	<DD><B>8. </B>Enter the code shown in Figure 28.12 in the Button1_onclick() event
	procedure.
	<P>
	<DT></DT>
	<DD><B>9. </B>Save the project and press the F5 key to run the code.
	<P>
</DL>

<P><A HREF="javascript:popUp('28fig12.gif')"><B>FIGURE 28.12</B></A> <I>Notice that
the event procedure for a button click is OnClick.</I></P>
<P>When you run the code for this simple application, Visual Basic compiles the code
into a temporary DLL, generates the HTML around the DLL, and automatically embeds
the DLL on the page. Then the code is run in Internet Explorer. When you look at
the source HTML that loads into the browser, you see no VBScript of any kind--the
code is embedded in the DLL, and your intellectual property is safe.</P>
<P>
<H3><A NAME="Heading10"></A>Rapid Development with DHTML Applications</H3>
<P>The capability to quickly create powerful, interactive Web pages is a major benefit
of VB6's DHTML application feature. Figure 28.13 shows a simple login page with a
validation button.</P>
<P><A HREF="javascript:popUp('28fig13.gif')"><B>FIGURE 28.13</B></A> <I>DHTML applications
present the same appearance as HTML pages in a Web browser.</I></P>
<P>Listing 28.3 shows the HTML/VBScript code for the login page. Listing 28.4 shows
the same login page, only generated as part of the Visual Basic DHTML application
project. (I've altered the text layout of both listings for the code to be more readable;
the syntax of the code hasn't been altered in any way.)</P>


<BLOCKQUOTE>
	<P>
<HR>
<STRONG>Download this project's code</STRONG></P>
	<P>The code for this project can be found in the file VB6CH28.zip, which you can
	download from the Web site dedicated to this book. The project file is prjSimpleLogin.vbp.
	
<HR>


</BLOCKQUOTE>

<H4>LISTING 28.3&#160;&#160;28HTM03.HTM--A Login Screen That Uses VBScript with HTML</H4>
<PRE><B>01 </B>&lt;!--Copyright 1998 Macmillan Publishing</PRE>
<PRE><B>02 </B>by Bob Reselman --&gt;</PRE>
<PRE><B>03 </B>&lt;HTML&gt;</PRE>
<PRE><B>04 </B>&lt;TITLE&gt;Simple Login in Standard HTML&lt;/TITLE&gt;</PRE>
<PRE><B>05 </B>&lt;HEAD&gt;</PRE>
<PRE><B>06 </B>&lt;SCRIPT LANGUAGE=VBScript&gt;</PRE>
<PRE><B>07 </B>&lt;!--</PRE>
<PRE><B>08 </B>Sub cmdValidate_OnClick()</PRE>
<PRE><B>09 </B>`Declare variables to which to assign</PRE>
<PRE><B>10 </B>`the values of each element</PRE>
<PRE><B>11 </B>Dim strName</PRE>
<PRE><B>12 </B>Dim strPWD</PRE>
<PRE><B>13 </B>Dim strRole</PRE>
<PRE><B>14 </B>Dim strStatus</PRE>
<PRE><B>15 </B>Dim strMsg</PRE>
<PRE><B>16 </B>Dim br</PRE>
<PRE><B>17</B></PRE>
<PRE><B>18 </B>`Set the line break var to the line break chars</PRE>
<PRE><B>19 </B>br = Chr(10) &amp; Chr(13)</PRE>
<PRE><B>20</B></PRE>
<PRE><B>21 </B>`Assign the values</PRE>
<PRE><B>22 </B>strName = txtName.Value</PRE>
<PRE><B>23 </B>strPWD = pwdMain.Value</PRE>
<PRE><B>24 </B>strRole = selectMain.Value</PRE>
<PRE><B>25 </B>If Option1.Checked Then</PRE>
<PRE><B>26 </B>strStatus = Option1.Value</PRE>
<PRE><B>27 </B>Else</PRE>
<PRE><B>28 </B>strStatus = Option2.Value</PRE>
<PRE><B>29 </B>End If</PRE>
<PRE><B>30</B></PRE>
<PRE><B>31 </B>`Make a string that reports all</PRE>
<PRE><B>32 </B>`the values of the various elements</PRE>
<PRE><B>33 </B>strMsg = strMsg &amp; &quot;Your Name: &quot; &amp; strName &amp; vbCrLf</PRE>
<PRE><B>34 </B>strMsg = strMsg &amp; &quot;Password: &quot; &amp; strPWD &amp; vbCrLf</PRE>
<PRE><B>35 </B>strMsg = strMsg &amp; &quot;Role: &quot; &amp; strRole &amp; vbCrLf</PRE>
<PRE><B>36 </B>strMsg = strMsg &amp; &quot;Status: &quot; &amp; strStatus &amp; vbCrLf</PRE>
<PRE><B>37</B></PRE>
<PRE><B>38 </B>`Show the string</PRE>
<PRE><B>39 </B>window.alert(strMsg)</PRE>
<PRE><B>40 </B>End Sub</PRE>
<PRE><B>41 </B>--&gt;</PRE>
<PRE><B>42 </B>&lt;/SCRIPT&gt;</PRE>
<PRE><B>43 </B>&lt;/HEAD&gt;</PRE>
<PRE><B>44</B></PRE>
<PRE><B>45 </B>&lt;P&gt;Type your Login Name:&lt;/P&gt;</PRE>
<PRE><B>46 </B>&lt;P&gt;</PRE>
<PRE><B>47 </B>&lt;INPUT TYPE=TEXT NAME=txtName&gt;&lt;/P&gt;</PRE>
<PRE><B>48 </B>&lt;P&gt;Type your password:&lt;/P&gt;</PRE>
<PRE><B>49 </B>&lt;P&gt;</PRE>
<PRE><B>50 </B>&lt;INPUT TYPE=PASSWORD NAME=pwdMain&gt;&lt;/P&gt;</PRE>
<PRE><B>51 </B>&lt;P&gt;Select your role:&lt;/P&gt;</PRE>
<PRE><B>52 </B>&lt;P&gt;&lt;SELECT NAME=selectMain&gt;</PRE>
<PRE><B>53 </B>&lt;OPTION SELECTED VALUE=Guest&gt;Guest</PRE>
<PRE><B>54 </B>&lt;OPTION VALUE=Employee&gt;Employee</PRE>
<PRE><B>55 </B>&lt;OPTION VALUE=Contractor&gt;Contractor</PRE>
<PRE><B>56 </B>&lt;/SELECT&gt;</PRE>
<PRE><B>57</B></PRE>
<PRE><B>58 </B>&lt;/P&gt;</PRE>
<PRE><B>59 </B>&lt;P&gt;Click your status:&lt;/P&gt;</PRE>
<PRE><B>60 </B>&lt;P&gt;&lt;INPUT NAME=Option1</PRE>
<PRE><B>61 </B>TYPE=RADIO</PRE>
<PRE><B>62 </B>VALUE=Salary CHECKED&gt; Salary&lt;/P&gt;</PRE>
<PRE><B>63 </B>&lt;P&gt;&lt;INPUT NAME=Option2</PRE>
<PRE><B>64 </B>TYPE=RADIO</PRE>
<PRE><B>65 </B>VALUE=Hourly&gt;Hourly&lt;/P&gt;</PRE>
<PRE><B>66</B></PRE>
<PRE><B>67 </B>&lt;P&gt;&lt;INPUT NAME=cmdValidate</PRE>
<PRE><B>68 </B>TYPE=button</PRE>
<PRE><B>69 </B>VALUE=Validate&gt;&lt;/P&gt;</PRE>
<PRE><B>70 </B>&lt;/BODY&gt;</PRE>
<PRE><B>71 </B>&lt;/HTML&gt;</PRE>


<BLOCKQUOTE>
	<P>
<HR>
<STRONG>Class ID</STRONG></P>
	<P>DHTML references functionality that's created within a DHTML application DLL through
	a <I>class ID</I>. A DHTML project compiles into a DLL. When you compile the code,
	VB assigns a unique number--a class ID--to the DLL. When you deploy your DHTML application
	to Internet Explorer via the Internet, the browser automatically registers the class
	ID of the DLL in the Windows Registry. Then, when Internet Explorer encounters the
	class ID in the page, it automatically looks up the classid in the Registry to find
	the location of the DLL and other particulars. 
<HR>


</BLOCKQUOTE>

<P>Notice that lines 6-42 in Listing 28.3 show the script that captures the button
click event procedure, whereas Listing 28.4 shows no script whatsoever. This is because
the button click event procedure for Listing 28.4 is encapsulated within a DLL referenced
by the classid, as shown on line 3.</P>
<P>
<H4>LISTING 28.4&#160;&#160;SIMPLELOGIN.HTM--DHTML Code Generated by a VB DHTML <BR>
Application</H4>
<PRE><B>01 </B>&lt;!--METADATA TYPE=&quot;MsHtmlPageDesigner&quot; startspan--&gt;</PRE>
<PRE><B>02 </B>&lt;object id=&quot;DHTMLPage1&quot;</PRE>
<PRE><B>03 </B>classid=&quot;clsid:9318A4D8-12D7-11D2-A58E-B6A734C6C111&quot;</PRE>
<PRE><B>04 </B>width=0 height=0&gt;</PRE>
<PRE><B>05 </B>&lt;/object&gt;</PRE>
<PRE><B>06 </B>&lt;!--METADATA TYPE=&quot;MsHtmlPageDesigner&quot; endspan--&gt;</PRE>
<PRE><B>07 </B>&lt;BODY&gt;</PRE>
<PRE><B>08 </B>&lt;P&gt;Type your Login Name:&lt;/P&gt;</PRE>
<PRE><B>09 </B>&lt;P&gt;</PRE>
<PRE><B>10 </B>&lt;INPUT id=txtName name=txtName &gt;&lt;/P&gt;</PRE>
<PRE><B>11 </B>&lt;P&gt;Type your password:&lt;/P&gt;</PRE>
<PRE><B>12 </B>&lt;P&gt;</PRE>
<PRE><B>13 </B>&lt;INPUT id=pwdMain name=PasswordField1 type=password&gt;&lt;/P&gt;</PRE>
<PRE><B>14 </B>&lt;P&gt;Select your role:&lt;/P&gt;</PRE>
<PRE><B>15 </B>&lt;P&gt;&lt;SELECT id=selectMain</PRE>
<PRE><B>16 </B>name=selectMain</PRE>
<PRE><B>17 </B>style=&quot;HEIGHT: 22px; WIDTH: 161px&quot;</PRE>
<PRE><B>18 </B>value = Select1&gt;</PRE>
<PRE><B>19 </B>&lt;OPTION selected value=Guest&gt;Guest</PRE>
<PRE><B>20 </B>&lt;OPTION value=Employee&gt;Employee</PRE>
<PRE><B>21 </B>&lt;OPTION value=Contractor&gt;Contractor&lt;/SELECT&gt;</PRE>
<PRE><B>22 </B>&lt;/P&gt;</PRE>
<PRE><B>23 </B>&lt;P&gt;Click your status:&lt;/P&gt;</PRE>
<PRE><B>24 </B>&lt;P&gt;&lt;INPUT id=Option1</PRE>
<PRE><B>25 </B>name=Option1</PRE>
<PRE><B>26 </B>type=radio</PRE>
<PRE><B>27 </B>value=Salary CHECKED&gt; Salary&lt;/P&gt;</PRE>
<PRE><B>28</B></PRE>
<PRE><B>29 </B>&lt;P&gt;&lt;INPUT id=Option2</PRE>
<PRE><B>30 </B>name=Option2</PRE>
<PRE><B>31 </B>type=radio</PRE>
<PRE><B>32 </B>value=Hourly&gt;Hourly&lt;/P&gt;</PRE>
<PRE><B>33 </B>&lt;P&gt;&lt;INPUT id=cmdValidate</PRE>
<PRE><B>34 </B>name=cmdValidate</PRE>
<PRE><B>35 </B>type=button</PRE>
<PRE><B>36 </B>value=Validate&gt;&lt;/P&gt;</PRE>
<PRE><B>37 </B>&lt;/BODY&gt;&lt;/HTML&gt;</PRE>
<P>Making an interactive page like this login page by using HTML with VBScript requires
paying a lot of attention to the detail of HTML and how it interacts with VBScript.
The programming experience isn't at all visual. Everything is character based, thus
giving you ample opportunity to make time-consuming syntax errors. On the other hand,
making the same page as a DHTML application enables you to use your existing VB programming
skills and visually create pages. Also, because you're using the Visual Basic IDE,
you can take advantage of VB's debugging capabilities. You'll find that VB DHTML
applications enable you to make more robust dynamic pages for the Web in half the
time it takes using HTML, VBScript, and a text editor.</P>
<P>
<H3><A NAME="Heading11"></A>Using DHTML with ActiveX Components</H3>
<P><B>Add a Slider ActiveX control to a DHTML application</B>


<BLOCKQUOTE>
	<P>
<HR>
<STRONG>Download the code for this project</STRONG></P>
	<P>The code for this project can be found in the file VB6CH28.zip, which you can
	download from <A target="_new" HREF="javascript:if(confirm('http://www.mcp.com/info  \n\nThis file was not retrieved by Teleport Pro, because it is addressed on a domain or path outside the boundaries set for its Starting Address.  \n\nDo you want to open it from the server?'))window.location='http://www.mcp.com/info'" tppabs="http://www.mcp.com/info">http://www.mcp.com/info</A>. The
	project file is prjSlider.vbp. 
<HR>


</BLOCKQUOTE>


<DL>
	<DT></DT>
	<DD><B>1. </B>Open a new DHTML application project.
	<P>
	<DT></DT>
	<DD><B>2. </B>Open the Components dialog by choosing <B>Components</B> from the <B>Project</B>
	menu.
	<P>
	<DT></DT>
	<DD><B>3. </B>Select the Microsoft Windows Common Controls 6.0 ActiveX control to
	add Common Control icons to the Toolbox.
	<P>
	<DT></DT>
	<DD><B>4. </B>Select the <B>DHTMLPage Designer</B> in the <B>Project</B> window.
	<P>
	<DT></DT>
	<DD><B>5. </B>Click the icon to view the DHTML Designer Form (see Figure 28.14).
	<P>
</DL>

<P><A HREF="javascript:popUp('28fig14.gif')"><B>FIGURE 28.14</B></A> <I>The DHTML
Designer Form contains the page view pane on the right and the HTML element hierarchy
on the left.</I></P>
<P><B>6. </B>Click the page view pane of the DHTML Designer Form. Type This is a
slider control and then press Enter to create a new line.</P>

<DL>
	<DT></DT>
	<DD><B>7. </B>Select the <B>General</B> tab in the Toolbox and then drag the Slider
	control to the new line in the page view pane.
	<P>
	<DT></DT>
	<DD><B>8. </B>Press Enter to create a new line.
	<P>
	<DT></DT>
	<DD><B>9. </B>Type This is the value of the slider control: and then press Enter
	to create a new line.
	<P>
	<DT></DT>
	<DD><B>10. </B>Select the <B>HTML</B> tab in the Toolbox and then drag the TextField
	element to the new line in the page view pane.
	<P>
	<DT></DT>
	<DD><B>11. </B>In the Properties window, set the id of the TextField to txtMain.
	Also, set the name to txtMain and the value to blank (no text).
	<P>
	<DT></DT>
	<DD><B>12. </B>Double-click the Slider control to expose its code.
	<P>
	<DT></DT>
	<DD><B>13. </B>Select the <B>Scroll</B> event from the event procedure drop-down
	(see Figure 28.15).
	<P>
</DL>

<P><A HREF="javascript:popUp('28fig15.gif')"><B>FIGURE 28.15</B></A> <I>You code
event procedures in DHTML applications just as you do in standard VB programs.</I></P>


<BLOCKQUOTE>
	<P>
<HR>
<STRONG>Saving DHTML application projects</STRONG></P>
	<P>You name and save a number of files when you save a DHTML application. You save
	the designer, the default module, and the project file. Designers end with the extension
	.dsr, whereas modules have the familiar .bas extension and projects have the .vbp
	extension. 
<HR>


</BLOCKQUOTE>


<DL>
	<DT></DT>
	<DD><B>14. </B>Add the following line of code in the scroll event procedure:
	<P>
</DL>



<BLOCKQUOTE>
	<PRE>txtMain.Value = Slider1.Value</PRE>

</BLOCKQUOTE>

<PRE></PRE>

<DL>
	<DT></DT>
	<DD><B>15. </B>Save the project and run it by pressing F5 (see Figure 28.16).
	<P>
</DL>

<P><A HREF="javascript:popUp('28fig16.gif')"><B>FIGURE 28.16</B></A> <I>ActiveX controls
can interact with HTML elements in a DHTML application.</I></P>
<P>
<H3><A NAME="Heading12"></A>Compiling a DHTML Application</H3>


<BLOCKQUOTE>
	<P>
<HR>
<STRONG>Compiling your project</STRONG></P>
	<P>When you compile your project, it's a good idea to save the project files, the
	DLL, and the HTML page to the same folder. When it comes time to deploy your DTHML
	application, you can more easily find the files you need. Pay particular attention
	to this situation because when you want to deploy your application, you will know
	where all your project files are located. It's important to keep them all in the
	same directory. 
<HR>


</BLOCKQUOTE>

<P>You compile a DHTML application as you would for any other ActiveX DLL--you choose
<B>Make MyDLLName.DLL</B> from the <B>File</B> menu. However, behind the scenes a
little more work happens; in addition to making the DLL, Visual Basic generates the
Web page for the DHTML application. You will be prompted to name this HTM page. Remember
that DHTML is an integration of HTML with an ActiveX DLL that contains the interactive
code for the page. Therefore, the page needs the class ID of the DLL to find the
DLL and subsequently the interactive functionality of the page. The class ID is automatically
added to the HTML within the Web page as you compile your project.</P>
<P>After you complete your Web page, you can make it available to other users on
the Web in the following ways:</P>

<UL>
	<LI>Take advantage of your ISP's services. Most of these services provide you with
	a limited amount of disk space on which you can have one or more Web pages. Also,
	most ISPs provide information on how to upload your file to their servers, from which
	your application or Web page will be available to other users on the Internet.
	<P>
	<LI>You must have all your files in a specific directory on your hard drive. This
	is one of the most common problems when you are uploading these types of files to
	another server. Most servers also require Web directories to have an index file,
	such as index.html. If the requesting server doesn't find this file, you will normally
	have problems.
	<P>
	<LI>Check each Web search engine, such as Yahoo, to determine what you need to do
	in order to register your site so that other users can find your Web page. In most
	cases, this involves giving your URL or Web address and the name of your site. Some
	search engines require a little more information, but most don't. It usually takes
	several weeks for your Web page to appear on their search list. Some common Web search
	engine registration locations are as follows:
</UL>

<P>
<TABLE BORDER="1">
	<TR ALIGN="LEFT" VALIGN="TOP">
		<TD ALIGN="LEFT"><B>Search Engine</B></TD>
		<TD ALIGN="LEFT"><B>URL</B></TD>
	</TR>
	<TR ALIGN="LEFT" VALIGN="TOP">
		<TD ALIGN="LEFT">Yahoo</TD>
		<TD ALIGN="LEFT"><A target="_new" HREF="javascript:if(confirm('http://www.yahoo.com/  \n\nThis file was not retrieved by Teleport Pro, because it is addressed on a domain or path outside the boundaries set for its Starting Address.  \n\nDo you want to open it from the server?'))window.location='http://www.yahoo.com/'" tppabs="http://www.yahoo.com/">http://www.yahoo.com</A></TD>
	</TR>
	<TR ALIGN="LEFT" VALIGN="TOP">
		<TD ALIGN="LEFT">Infoseek</TD>
		<TD ALIGN="LEFT"><A target="_new" HREF="javascript:if(confirm('http://www.infoseek.com/  \n\nThis file was not retrieved by Teleport Pro, because it is addressed on a domain or path outside the boundaries set for its Starting Address.  \n\nDo you want to open it from the server?'))window.location='http://www.infoseek.com/'" tppabs="http://www.infoseek.com/">http://www.infoseek.com</A></TD>
	</TR>
	<TR ALIGN="LEFT" VALIGN="TOP">
		<TD ALIGN="LEFT">WebCrawler</TD>
		<TD ALIGN="LEFT"><A target="_new" HREF="javascript:if(confirm('http://www.webcrawler.com/  \n\nThis file was not retrieved by Teleport Pro, because it is addressed on a domain or path outside the boundaries set for its Starting Address.  \n\nDo you want to open it from the server?'))window.location='http://www.webcrawler.com/'" tppabs="http://www.webcrawler.com/">http://www.webcrawler.com</A></TD>
	</TR>
	<TR ALIGN="LEFT" VALIGN="TOP">
		<TD ALIGN="LEFT">Apollo</TD>
		<TD ALIGN="LEFT"><A target="_new" HREF="javascript:if(confirm('http://www.apollo.com/  \n\nThis file was not retrieved by Teleport Pro, because it is addressed on a domain or path outside the boundaries set for its Starting Address.  \n\nDo you want to open it from the server?'))window.location='http://www.apollo.com/'" tppabs="http://www.apollo.com/">http://www.apollo.com</A></TD>
	</TR>
	<TR ALIGN="LEFT" VALIGN="TOP">
		<TD ALIGN="LEFT">Lycos</TD>
		<TD ALIGN="LEFT"><A target="_new" HREF="javascript:if(confirm('http://www.lycos.com/  \n\nThis file was not retrieved by Teleport Pro, because it is addressed on a domain or path outside the boundaries set for its Starting Address.  \n\nDo you want to open it from the server?'))window.location='http://www.lycos.com/'" tppabs="http://www.lycos.com/">http://www.lycos.com</A></TD>
	</TR>
	<TR ALIGN="LEFT" VALIGN="TOP">
		<TD ALIGN="LEFT">World Wide Web Yellow Pages</TD>
		<TD ALIGN="LEFT"><A target="_new" HREF="javascript:if(confirm('http://www.yellow.com/  \n\nThis file was not retrieved by Teleport Pro, because it is addressed on a domain or path outside the boundaries set for its Starting Address.  \n\nDo you want to open it from the server?'))window.location='http://www.yellow.com/'" tppabs="http://www.yellow.com/">http://www.yellow.com</A></TD>
	</TR>
</TABLE>
</P>
<H1></H1>
<CENTER>
<P>
<HR>
<A HREF="ch27.htm" tppabs="http://pbs.mcp.com/ebooks/078971633X/ch27/ch27.htm"><IMG SRC="previous.gif" tppabs="http://pbs.mcp.com/ebooks/078971633X/button/previous.gif" WIDTH="128" HEIGHT="28"
ALIGN="BOTTOM" ALT="Previous chapter" BORDER="0"></A><A HREF="ch29.htm" tppabs="http://pbs.mcp.com/ebooks/078971633X/ch29/ch29.htm"><IMG
SRC="next.gif" tppabs="http://pbs.mcp.com/ebooks/078971633X/button/next.gif" WIDTH="128" HEIGHT="28" ALIGN="BOTTOM" ALT="Next chapter"
BORDER="0"></A><A HREF="index-38.htm" tppabs="http://pbs.mcp.com/ebooks/078971633X/index.htm"><IMG SRC="contents.gif" tppabs="http://pbs.mcp.com/ebooks/078971633X/button/contents.gif" WIDTH="128"
HEIGHT="28" ALIGN="BOTTOM" ALT="Contents" BORDER="0"></A></P>

<P>&#169; <A HREF="copy.htm" tppabs="http://pbs.mcp.com/ebooks/078971633X/copy.htm">Copyright</A>, Macmillan Computer Publishing. All
rights reserved.
</CENTER>


</BODY>

</HTML>
