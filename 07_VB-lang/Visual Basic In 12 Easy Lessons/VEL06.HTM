<HTML>

<HEAD>

<TITLE>Visual Basic in 12 Easy Lessons vel06.htm </TITLE>

<LINK REL="ToC" HREF="index.htm">

<LINK REL="Index" HREF="htindex.htm">

<LINK REL="Next" HREF="velp03.htm">

<LINK REL="Previous" HREF="vel05.htm"></HEAD>

<body bgcolor="#FFFFFF" 
vlink="#800080">

<A NAME="I0"></A>

<H2>Visual Basic in 12 Easy Lessons vel06.htm</H2>

<P ALIGN=LEFT>

<A HREF="vel05.htm" TARGET="_self"><IMG SRC="purprev.gif" WIDTH = 32 HEIGHT = 32 BORDER = 0 ALT="Previous Page"></A>

<A HREF="index.htm" 
TARGET="_self"><IMG SRC="purtoc.gif" WIDTH = 32 HEIGHT = 32 BORDER = 0 ALT="TOC"></A>

<A HREF="velp03.htm" TARGET="_self"><IMG SRC="purnext.gif" WIDTH = 32 HEIGHT = 32 BORDER = 0 ALT="Next Page"></A>


<HR ALIGN=CENTER>

<P>

<UL>

<UL>

<UL>

<LI>

<A HREF="#E68E47" >What You'll Learn</A>

<LI>

<A HREF="#E68E48" >Properties of the Form</A>

<LI>

<A HREF="#E68E49" >Advanced 
Labels</A>

<LI>

<A HREF="#E68E50" >Scrolling Text Boxes</A>

<LI>

<A HREF="#E68E51" >Using Focus to Control Text Boxes</A>

<LI>

<A HREF="#E68E52" >Introducing Control Events</A>

<LI>

<A HREF="#E68E53" >Homework</A>

<UL>

<LI>

<A HREF="#E69E42" 
>General Knowledge</A>

<LI>

<A HREF="#E69E43" >Write Code That...</A>

<LI>

<A HREF="#E69E44" >Find the Bug</A>

<LI>

<A HREF="#E69E45" >Extra Credit</A></UL></UL></UL></UL>

<HR ALIGN=CENTER>

<A NAME="E66E8"></A>

<H1 ALIGN=CENTER>

<CENTER>

<FONT 
SIZE=6 COLOR="#FF0000"><B>Lesson 3, Unit 6</B></FONT></CENTER></H1>

<BR>

<A NAME="E67E11"></A>

<H2 ALIGN=CENTER>

<CENTER>

<FONT SIZE=6 COLOR="#FF0000"><B>Polishing Forms and Controls</B></FONT></CENTER></H2>

<BR>

<BR>

<A NAME="E68E47"></A>

<H3 
ALIGN=CENTER>

<CENTER>

<FONT SIZE=5 COLOR="#FF0000"><B>What You'll Learn</B></FONT></CENTER></H3>

<BR>

<UL>

<LI> [lb] Properties of the form

<BR>

<BR>

<LI> [lb] Advanced labels

<BR>

<BR>

<LI> [lb] Scrolling text boxes

<BR>

<BR>

<LI> [lb] 
Using focus to control text boxes

<BR>

<BR>

<LI> [lb] Control events

<BR>

<BR>

</UL>

<P>This unit continues the work begun in <A HREF="vel05.htm">Unit 5</A>. It explains more about the form and its property settings. In addition, this unit delves 
further into label and text box controls by showing you some of the more advanced uses of 
those controls. Not only will you learn more about the property settings, but you will also learn what events are possible for these controls.

<BR>

<P>By the time 
you complete this unit, you will know virtually everything there is to know about forms, command buttons, labels, and text boxes. The project at the end of this lesson demonstrates these controls in action. It will give you a better sense of 
the ways in 
which you can implement them.

<BR>

<BR>

<A NAME="E68E48"></A>

<H3 ALIGN=CENTER>

<CENTER>

<FONT SIZE=5 COLOR="#FF0000"><B>Properties of the Form</B></FONT></CENTER></H3>

<BR>

<P><FONT COLOR="#FF8000"><B><I>Concept: </I></B></FONT>The form is yet 
another Visual Basic object. As such, it has property settings that you can set and change while you design the application and during the program's execution. This section explains all 
the form's property settings in detail.

<BR>

<P>Table 6.1 describes 
the property settings of the form that appear in the Properties window when you click the Form window and press F4. The form has more properties than the command button, label, and text box controls, whose properties you saw in the 
previous unit. As with 
all control property values, you never need to worry about all these properties at once. Most of the time, the default values are satisfactory for your applications.

<BR>

<BR>

<P ALIGN=CENTER>

<CENTER>

<FONT COLOR="#000080"><B>Table 6.1. Properties of 
the form.</B></FONT></CENTER>

<BR>



<TABLE  BORDERCOLOR=#000040 BORDER=1 CELLSPACING=2 WIDTH="100%" CELLPADDING=2 >

<TR>

<TD VALIGN=top  BGCOLOR=#80FFFF ><FONT COLOR=#000080>

<I>Property</I>

</FONT>

<TD VALIGN=top  BGCOLOR=#80FFFF ><FONT 
COLOR=#000080>

<I>Description</I></FONT>

<TR>

<TD VALIGN=top  BGCOLOR=#80FFFF ><FONT COLOR=#000080>

AutoRedraw

</FONT>

<TD VALIGN=top  BGCOLOR=#80FFFF ><FONT COLOR=#000080>

If True, Visual Basic automatically redraws graphic images that reside on 
the form when another window hides the image or when the user resizes the object. If False (the default), Visual Basic does not automatically redraw.</FONT>

<TR>

<TD VALIGN=top  BGCOLOR=#80FFFF ><FONT COLOR=#000080>

BackColor

</FONT>

<TD VALIGN=top  
BGCOLOR=#80FFFF ><FONT COLOR=#000080>

The background color of the form. You can enter a hexadecimal Windows color value or select from the color palette.</FONT>

<TR>

<TD VALIGN=top  BGCOLOR=#80FFFF ><FONT COLOR=#000080>

BorderStyle

</FONT>

<TD 
VALIGN=top  BGCOLOR=#80FFFF ><FONT COLOR=#000080>

Set to 0 for no border or border elements such as a control menu or minimize and maximize buttons, 1 for a fixed-size border, 2 (the default) for a sizable border, or 3 for a fixed-size border that 
includes a double-size edge.</FONT>

<TR>

<TD VALIGN=top  BGCOLOR=#80FFFF ><FONT COLOR=#000080>

Caption

</FONT>

<TD VALIGN=top  BGCOLOR=#80FFFF ><FONT COLOR=#000080>

The text that appears in the form's title bar. The default Caption is the Name of the 
form.</FONT>

<TR>

<TD VALIGN=top  BGCOLOR=#80FFFF ><FONT COLOR=#000080>

ClipControls

</FONT>

<TD VALIGN=top  BGCOLOR=#80FFFF ><FONT COLOR=#000080>

If True (the default), the Paint event&#151;a redrawing event triggered when graphic images are covered 
and then uncovered&#151;redraws the graphics. If False, only newly-exposed areas of the graphics are repainted.</FONT>

<TR>

<TD VALIGN=top  BGCOLOR=#80FFFF ><FONT COLOR=#000080>

ControlBox

</FONT>

<TD VALIGN=top  BGCOLOR=#80FFFF ><FONT COLOR=#000080>


If True (the default), the form contains a control button and control menu. If False, the form does not contain a control button and a control menu.</FONT>

<TR>

<TD VALIGN=top  BGCOLOR=#80FFFF ><FONT COLOR=#000080>

DrawMode

</FONT>

<TD VALIGN=top  
BGCOLOR=#80FFFF ><FONT COLOR=#000080>

Contains 16 advanced settings that interact with drawing properties to produce special drawing effects. (See Lesson 11 for more information on graphics.)</FONT>

<TR>

<TD VALIGN=top  BGCOLOR=#80FFFF ><FONT 
COLOR=#000080>

DrawStyle

</FONT>

<TD VALIGN=top  BGCOLOR=#80FFFF ><FONT COLOR=#000080>

Contains seven advanced settings that determine the appearance of lines that you draw.</FONT>

</TABLE><BLOCKQUOTE>

<BLOCKQUOTE>

<HR ALIGN=CENTER>

<BR>


<NOTE><I>Definition: </I>A <I>pixel</I> is the smallest screen width possible on your monitor.</NOTE>

<BR>

<HR ALIGN=CENTER>

</BLOCKQUOTE></BLOCKQUOTE>

<TABLE  BORDERCOLOR=#000040 BORDER=1 CELLSPACING=2 WIDTH="100%" CELLPADDING=2 >

<TR>

<TD 
VALIGN=top  BGCOLOR=#80FFFF ><FONT COLOR=#000080>

DrawWidth

</FONT>

<TD VALIGN=top  BGCOLOR=#80FFFF ><FONT COLOR=#000080>

The width, in pixels, of lines drawn on the form.</FONT>

</TABLE>



<TABLE  BORDERCOLOR=#000040 BORDER=1 CELLSPACING=2 
WIDTH="100%" CELLPADDING=2 >

<TR>

<TD VALIGN=top  BGCOLOR=#80FFFF ><FONT COLOR=#000080>

Enabled

</FONT>

<TD VALIGN=top  BGCOLOR=#80FFFF ><FONT COLOR=#000080>

If True (the default), the form can respond to events. Otherwise, Visual Basic halts event 
processing for the form.</FONT>

<TR>

<TD VALIGN=top  BGCOLOR=#80FFFF ><FONT COLOR=#000080>

FillColor

</FONT>

<TD VALIGN=top  BGCOLOR=#80FFFF ><FONT COLOR=#000080>

The color value used to fill shapes drawn on the form.</FONT>

<TR>

<TD VALIGN=top  
BGCOLOR=#80FFFF ><FONT COLOR=#000080>

FillStyle

</FONT>

<TD VALIGN=top  BGCOLOR=#80FFFF ><FONT COLOR=#000080>

Contains eight styles that determine the appearance of the interior patterns of shapes drawn on the form.</FONT>

<TR>

<TD VALIGN=top  
BGCOLOR=#80FFFF ><FONT COLOR=#000080>

FontBold

</FONT>

<TD VALIGN=top  BGCOLOR=#80FFFF ><FONT COLOR=#000080>

Has no effect on the form's Caption property, but does affect text that you eventually display on the form if you use the Print command.</FONT>


<TR>

<TD VALIGN=top  BGCOLOR=#80FFFF ><FONT COLOR=#000080>

FontItalic

</FONT>

<TD VALIGN=top  BGCOLOR=#80FFFF ><FONT COLOR=#000080>

Has no effect on the form's Caption property, but does affect text that you eventually display on the form if you use 
the Print command.</FONT>

<TR>

<TD VALIGN=top  BGCOLOR=#80FFFF ><FONT COLOR=#000080>

FontName

</FONT>

<TD VALIGN=top  BGCOLOR=#80FFFF ><FONT COLOR=#000080>

Has no effect on the form's Caption property, but does affect text that you eventually display 
on the form if you use the Print command.</FONT>

<TR>

<TD VALIGN=top  BGCOLOR=#80FFFF ><FONT COLOR=#000080>

FontSize

</FONT>

<TD VALIGN=top  BGCOLOR=#80FFFF ><FONT COLOR=#000080>

Has no effect on the form's Caption property, but does affect text that 
you eventually display on the form if you use the Print command.</FONT>

<TR>

<TD VALIGN=top  BGCOLOR=#80FFFF ><FONT COLOR=#000080>

FontStrikethru

</FONT>

<TD VALIGN=top  BGCOLOR=#80FFFF ><FONT COLOR=#000080>

Has no effect on the form's Caption 
property, but does affect text that you eventually display on the form if you use the Print command.</FONT>

<TR>

<TD VALIGN=top  BGCOLOR=#80FFFF ><FONT COLOR=#000080>

FontTransparent

</FONT>

<TD VALIGN=top  BGCOLOR=#80FFFF ><FONT COLOR=#000080>

Has 
no effect on the form's Caption property, but does affect text that you eventually display on the form if you use the Print command.</FONT>

<TR>

<TD VALIGN=top  BGCOLOR=#80FFFF ><FONT COLOR=#000080>

FontUnderline

</FONT>

<TD VALIGN=top  
BGCOLOR=#80FFFF ><FONT COLOR=#000080>

Has no effect on the form's Caption property, but does affect text that you eventually display on the form if you use the Print command.</FONT>

<TR>

<TD VALIGN=top  BGCOLOR=#80FFFF ><FONT COLOR=#000080>

ForeColor


</FONT>

<TD VALIGN=top  BGCOLOR=#80FFFF ><FONT COLOR=#000080>

The color of foreground text that you display on the form if you use the Print command.</FONT>

<TR>

<TD VALIGN=top  BGCOLOR=#80FFFF ><FONT COLOR=#000080>

Height

</FONT>

<TD VALIGN=top  
BGCOLOR=#80FFFF ><FONT COLOR=#000080>

The form&#146;s height in twips.</FONT>

<TR>

<TD VALIGN=top  BGCOLOR=#80FFFF ><FONT COLOR=#000080>

HelpContextID

</FONT>

<TD VALIGN=top  BGCOLOR=#80FFFF ><FONT COLOR=#000080>

Provides the identifying number for 
the help text if you add advanced context-sensitive help to your application.</FONT>

<TR>

<TD VALIGN=top  BGCOLOR=#80FFFF ><FONT COLOR=#000080>

Icon

</FONT>

<TD VALIGN=top  BGCOLOR=#80FFFF ><FONT COLOR=#000080>

The picture icon that the user sees 
after minimizing the form.</FONT>

<TR>

<TD VALIGN=top  BGCOLOR=#80FFFF ><FONT COLOR=#000080>

KeyPreview

</FONT>

<TD VALIGN=top  BGCOLOR=#80FFFF ><FONT COLOR=#000080>

If False (the default), the control with the focus receives these events: KeyDown, 
KeyUp, and KeyPress before the form does . If True, the form receives the events before the focused control.</FONT>

<TR>

<TD VALIGN=top  BGCOLOR=#80FFFF ><FONT COLOR=#000080>

Left

</FONT>

<TD VALIGN=top  BGCOLOR=#80FFFF ><FONT COLOR=#000080>

The 
number of twips from the left edge of the screen to the left edge of the form.</FONT>

<TR>

<TD VALIGN=top  BGCOLOR=#80FFFF ><FONT COLOR=#000080>

LinkMode

</FONT>

<TD VALIGN=top  BGCOLOR=#80FFFF ><FONT COLOR=#000080>

Set to 0 (the default) for no DDE 
allowance, 1 for automatic DDE allowance, 2 for a code-based DDE, or 3 for a code-based notify requirement.</FONT>

<TR>

<TD VALIGN=top  BGCOLOR=#80FFFF ><FONT COLOR=#000080>

LinkTopic

</FONT>

<TD VALIGN=top  BGCOLOR=#80FFFF ><FONT COLOR=#000080>


Specifies the source application and topic for a DDE application.</FONT>

<TR>

<TD VALIGN=top  BGCOLOR=#80FFFF ><FONT COLOR=#000080>

MaxButton

</FONT>

<TD VALIGN=top  BGCOLOR=#80FFFF ><FONT COLOR=#000080>

If True (the default), the maximize button 
appears on the form at runtime. If False, the user cannot maximize the form window.</FONT>

</TABLE><BLOCKQUOTE>

<BLOCKQUOTE>

<HR ALIGN=CENTER>

<BR>

<NOTE><I>Definition: MDI</I> stands for <I>M</I>ultiple <I>D</I>ocument <I>I</I>nterface.</NOTE>

<BR>


<HR ALIGN=CENTER>

</BLOCKQUOTE></BLOCKQUOTE>

<TABLE  BORDERCOLOR=#000040 BORDER=1 CELLSPACING=2 WIDTH="100%" CELLPADDING=2 >

<TR>

<TD VALIGN=top  BGCOLOR=#80FFFF ><FONT COLOR=#000080>

MDIChild

</FONT>

<TD VALIGN=top  BGCOLOR=#80FFFF ><FONT 
COLOR=#000080>

If True, the form is a MDI form&#151;that is, a child form within a parent form. If False (the default), the form is not a MDI form.</FONT>

</TABLE>



<TABLE  BORDERCOLOR=#000040 BORDER=1 CELLSPACING=2 WIDTH="100%" CELLPADDING=2 >

<TR>


<TD VALIGN=top  BGCOLOR=#80FFFF ><FONT COLOR=#000080>

MinButton

</FONT>

<TD VALIGN=top  BGCOLOR=#80FFFF ><FONT COLOR=#000080>

If True (the default), the minimize button appears on the form at runtime. If False, the user cannot minimize the form 
window.</FONT>

<TR>

<TD VALIGN=top  BGCOLOR=#80FFFF ><FONT COLOR=#000080>

MousePointer

</FONT>

<TD VALIGN=top  BGCOLOR=#80FFFF ><FONT COLOR=#000080>

The shape to which the mouse cursor changes if the user moves the mouse cursor over the form. The 
possible values range from 0 to 12 and represent the different shapes the mouse cursor can take on. (See Lesson 12.)</FONT>

<TR>

<TD VALIGN=top  BGCOLOR=#80FFFF ><FONT COLOR=#000080>

Name

</FONT>

<TD VALIGN=top  BGCOLOR=#80FFFF ><FONT COLOR=#000080>


The name of the form. By default, Visual Basic generates the name Form1.</FONT>

<TR>

<TD VALIGN=top  BGCOLOR=#80FFFF ><FONT COLOR=#000080>

Picture

</FONT>

<TD VALIGN=top  BGCOLOR=#80FFFF ><FONT COLOR=#000080>

A picture file that displays on the 
form's background.</FONT>

<TR>

<TD VALIGN=top  BGCOLOR=#80FFFF ><FONT COLOR=#000080>

ScaleHeight

</FONT>

<TD VALIGN=top  BGCOLOR=#80FFFF ><FONT COLOR=#000080>

The height of the form. ScaleMode determines the unit of measurement used.</FONT>

<TR>


<TD VALIGN=top  BGCOLOR=#80FFFF ><FONT COLOR=#000080>

ScaleLeft

</FONT>

<TD VALIGN=top  BGCOLOR=#80FFFF ><FONT COLOR=#000080>

The distance from the left of the screen to the left edge of the form. ScaleMode determines the unit of measurement 
used.</FONT>

<TR>

<TD VALIGN=top  BGCOLOR=#80FFFF ><FONT COLOR=#000080>

ScaleMode

</FONT>

<TD VALIGN=top  BGCOLOR=#80FFFF ><FONT COLOR=#000080>

Enables you to determine how to measure coordinates on the form. You can choose from eight values. The 
default unit of measurement is twips, indicated by 1. The other Scale... properties measure use twips. Table 6.2 describes the possible units of 
measurement.</FONT>

<TR>

<TD VALIGN=top  BGCOLOR=#80FFFF ><FONT COLOR=#000080>

ScaleTop

</FONT>

<TD 
VALIGN=top  BGCOLOR=#80FFFF ><FONT COLOR=#000080>

The distance from the top of the screen to the top edge of the form. ScaleMode determines the unit of measurement used.</FONT>

<TR>

<TD VALIGN=top  BGCOLOR=#80FFFF ><FONT COLOR=#000080>

ScaleWidth


</FONT>

<TD VALIGN=top  BGCOLOR=#80FFFF ><FONT COLOR=#000080>

The width of the form. ScaleMode determines the unit of measurement used.</FONT>

<TR>

<TD VALIGN=top  BGCOLOR=#80FFFF ><FONT COLOR=#000080>

Tag

</FONT>

<TD VALIGN=top  BGCOLOR=#80FFFF 
><FONT COLOR=#000080>

Not used by Visual Basic. The programmer can use it for identifying comments applied to the form.</FONT>

<TR>

<TD VALIGN=top  BGCOLOR=#80FFFF ><FONT COLOR=#000080>

Top

</FONT>

<TD VALIGN=top  BGCOLOR=#80FFFF ><FONT 
COLOR=#000080>

The number of twips from the top edge of the screen to the top of the form.</FONT>

<TR>

<TD VALIGN=top  BGCOLOR=#80FFFF ><FONT COLOR=#000080>

Visible

</FONT>

<TD VALIGN=top  BGCOLOR=#80FFFF ><FONT COLOR=#000080>

True or False, 
indicating whether the user can see and, therefore, use the form.</FONT>

<TR>

<TD VALIGN=top  BGCOLOR=#80FFFF ><FONT COLOR=#000080>

Width

</FONT>

<TD VALIGN=top  BGCOLOR=#80FFFF ><FONT COLOR=#000080>

The width of the form in twips.</FONT>

<TR>

<TD 
VALIGN=top  BGCOLOR=#80FFFF ><FONT COLOR=#000080>

WindowState

</FONT>

<TD VALIGN=top  BGCOLOR=#80FFFF ><FONT COLOR=#000080>

Describes the startup state of the form when the user runs the program. If set to 0 (the default), the form first appears the 
same size as you designed it. If set to 1, the form first appears minimized. If set to 2, the form first appears maximized.</FONT>


</TABLE><P>ScaleMode enables you to determine how to measure coordinates on the form. You can choose from eight values. The 
default unit of measurement is twips. Table 6.2 describes the possible units of measurement.

<BR>

<BR>

<P ALIGN=CENTER>

<CENTER>

<FONT COLOR="#000080"><B>Table 6.2. The </B><B>ScaleMode</B><B> property values.</B></FONT></CENTER>

<BR>



<TABLE  
BORDERCOLOR=#000040 BORDER=1 CELLSPACING=2 WIDTH="100%" CELLPADDING=2 >

<TR>

<TD VALIGN=top  BGCOLOR=#80FFFF ><FONT COLOR=#000080>

<I>Value</I>

</FONT>

<TD VALIGN=top  BGCOLOR=#80FFFF ><FONT COLOR=#000080>

<I>Description</I></FONT>

<TR>

<TD 
VALIGN=top  BGCOLOR=#80FFFF ><FONT COLOR=#000080>

0

</FONT>

<TD VALIGN=top  BGCOLOR=#80FFFF ><FONT COLOR=#000080>

Customized values</FONT>

<TR>

<TD VALIGN=top  BGCOLOR=#80FFFF ><FONT COLOR=#000080>

1

</FONT>

<TD VALIGN=top  BGCOLOR=#80FFFF ><FONT 
COLOR=#000080>

Twips (the default)</FONT>

<TR>

<TD VALIGN=top  BGCOLOR=#80FFFF ><FONT COLOR=#000080>

2

</FONT>

<TD VALIGN=top  BGCOLOR=#80FFFF ><FONT COLOR=#000080>

Points</FONT>

<TR>

<TD VALIGN=top  BGCOLOR=#80FFFF ><FONT COLOR=#000080>

3


</FONT>

<TD VALIGN=top  BGCOLOR=#80FFFF ><FONT COLOR=#000080>

Pixels</FONT>

<TR>

<TD VALIGN=top  BGCOLOR=#80FFFF ><FONT COLOR=#000080>

4

</FONT>

<TD VALIGN=top  BGCOLOR=#80FFFF ><FONT COLOR=#000080>

A standard character that is 120 twips wide and 
240 twips high</FONT>

<TR>

<TD VALIGN=top  BGCOLOR=#80FFFF ><FONT COLOR=#000080>

5

</FONT>

<TD VALIGN=top  BGCOLOR=#80FFFF ><FONT COLOR=#000080>

Inches</FONT>

<TR>

<TD VALIGN=top  BGCOLOR=#80FFFF ><FONT COLOR=#000080>

6

</FONT>

<TD VALIGN=top  
BGCOLOR=#80FFFF ><FONT COLOR=#000080>

Millimeters</FONT>

<TR>

<TD VALIGN=top  BGCOLOR=#80FFFF ><FONT COLOR=#000080>

7

</FONT>

<TD VALIGN=top  BGCOLOR=#80FFFF ><FONT COLOR=#000080>

Centimeters</FONT>

</TABLE><P><FONT COLOR="#FF8000"><B><I>Review: 
</I></B></FONT>You can customize your form in all kinds of ways. You can make it appear maximized or minimized. You can use colors and various styles. Most of the time, you want just a simple form with a 
caption that identifies the application; the only 
property values that you probably will have to modify are the Caption properties.

<BR>

<BR>

<A NAME="E68E49"></A>

<H3 ALIGN=CENTER>

<CENTER>

<FONT SIZE=5 COLOR="#FF0000"><B>Advanced Labels</B></FONT></CENTER></H3>

<BR>

<P><FONT 
COLOR="#FF8000"><B><I>Concept: </I></B></FONT>In the previous unit, you saw all the property values that you can set with labels. Some of the property values produce interesting effects, which are described in this section.

<BR>

<P>Suppose that you 
design a label that contains this long caption:

<BR>

<BR>

<PRE>

<FONT COLOR="#000080">If a label's caption is too lengthy, you will need to adjust the label some way.</FONT></PRE>

<P>A label is rarely wide enough or tall enough to hold this caption. 
If you attempt to type text into a label's Caption property that is longer than what fits the size of the label, one of the following things can take place depending on how you have set 
up the label:

<BR>

<BLOCKQUOTE>

<BLOCKQUOTE>

<HR ALIGN=CENTER>


<BR>

<NOTE><I>Definition: Truncate</I> means to chop off.</NOTE>

<BR>

<HR ALIGN=CENTER>

</BLOCKQUOTE></BLOCKQUOTE>

<OL>

<LI>The text might not fit inside the label, and Visual Basic truncates the text. Figure 6.1 shows the result.

<BR>Set the 
AutoSize property to False if you want the label to remain the same size. The application assigns the text, and the label might not hold the entire caption.

<BR>

<BR>



<P><B> <A HREF="06vel01.gif">Figure 6.1. The label is not large enough.</A></B>


<BR>

<LI>The label automatically expands downward to hold the entire caption in a multiline box. Figure 6.2 shows the result.

<BR>Set both the AutoSize and WordWrap properties to True if you want the label to expand vertically to hold the entire caption 
that you assign at design time and during execution.

<BR>

<BR>



<P><B> <A HREF="06vel02.gif">Figure 6.2. The label resizes vertically.</A></B>

<BR>

<BLOCKQUOTE>

<BLOCKQUOTE>

<HR ALIGN=CENTER>

<BR>

<NOTE><B>Tip: </B>Set WordWrap to True before you 
set the AutoSize property to True. If you set AutoSize first, the label expands horizontally before you have a chance to set the WordWrap property.</NOTE>

<BR>

<HR ALIGN=CENTER>

</BLOCKQUOTE></BLOCKQUOTE>

<BLOCKQUOTE>

<BLOCKQUOTE>

<HR ALIGN=CENTER>


<BR>

<NOTE><B>Warning: </B>Be careful about placing too many automatically-resizing labels. The labels might overwrite important information on the form if their captions are too long.</NOTE>

<BR>

<HR ALIGN=CENTER>

</BLOCKQUOTE></BLOCKQUOTE>

<LI>The 
label automatically expands across the screen to hold the entire caption in a long label control. Figure 6.3 shows the result.

<BR>A long label like this is not necessarily incorrect. Depending on the length of the text that you assign to the label during 
the program's execution, there might be plenty of screen space to display long labels. To automatically expand the label 
horizontally, set the AutoSize property to True and leave WordWrap set to False. This is the default setting.

<BR>

<BR>

</OL>


<P><B> <A HREF="06vel03.gif">Figure 6.3. The label is not tall enough.</A></B>

<BR>

<P><FONT COLOR="#FF8000"><B><I>Review: </I></B></FONT>Putting captions in labels seems easy until you think about the effects that can occur if the label is too large or 
too small to hold the text. By using the property combinations described here, you can 
add automatically-adjusting labels for whatever text the labels need to hold.

<BR>

<BR>

<A NAME="E68E50"></A>

<H3 ALIGN=CENTER>

<CENTER>

<FONT SIZE=5 
COLOR="#FF0000"><B>Scrolling Text Boxes</B></FONT></CENTER></H3>

<BR>

<P><FONT COLOR="#FF8000"><B><I>Concept: </I></B></FONT>By adding scroll bars to text boxes, you can give the user multiline text box capabilities. That way, the user can enter and edit 
long lengths of text without running out of room inside the text boxes.


<BR>

<P>The MultiLine property for text box controls determines whether or not the text box can contain one or more lines of text. The multiline text might be an initial default 
value that you store in the text box's Text property when you place the form on the 
control. The multiline text also might consist of the user's input when the program runs.

<BR>

<BLOCKQUOTE>

<BLOCKQUOTE>

<HR ALIGN=CENTER>

<BR>

<NOTE><B>Warning: 
</B>If you set the MultiLine property to True, you must also set the Scrollbars property to something other that 0-None. The user has to have a way to see the multiple lines of text inside the text box and the scroll bars give the user 
that 
ability.</NOTE>

<BR>

<HR ALIGN=CENTER>

</BLOCKQUOTE></BLOCKQUOTE>

<P>Figure 6.4 shows a text box that contains scroll bars and a True value for the MultiLine property. As the user enters text in a box like this, he can press Enter to move to the next 
line in the box. He does not, however, have to press Enter just because 
the text happens to scroll to the right; the horizontal scroll bars enables him to scroll left and right. When the user wants to end each line in the text box though, he presses Enter 
to move the carriage return character to the next line.

<BR>

<P><B> <A HREF="06vel04.gif">Figure 6.4. The label's scroll bars give the user </B><B>more data-entry freedom.</A></B>

<BR>

<BLOCKQUOTE>

<BLOCKQUOTE>

<HR ALIGN=CENTER>

<BR>

<NOTE><B>Note: 
</B>You cannot enter an initial default value for a multiline text box. You can only initialize a text box with text that spans more than one line in the text box at runtime.</NOTE>

<BR>

<HR ALIGN=CENTER>

</BLOCKQUOTE></BLOCKQUOTE>

<P><FONT 
COLOR="#FF8000"><B><I>Review: </I></B></FONT>By setting the MultiLine and the ScrollBars properties, you can use multiline text boxes in your applications. Multiline text boxes respond to user input by accepting more than one line of text.

<BR>

<BR>

<A 
NAME="E68E51"></A>

<H3 ALIGN=CENTER>

<CENTER>

<FONT SIZE=5 COLOR="#FF0000"><B>Using Focus to Control Text Boxes</B></FONT></CENTER></H3>

<BR>

<P><FONT COLOR="#FF8000"><B><I>Concept: </I></B></FONT>Although access keys are not available for text boxes, 
you can use a little-known trick to supply access keystroke shortcuts for text box data entry.

<BR>

<P>As you begin to build Visual Basic applications, you will use text box controls to capture user input. Don't just throw a text box on a form and expect 
the user to know what to enter in it. In Figure 6.5, for example, the user does not know what data he 
should enter in the text box controls.

<BR>

<P><B> <A HREF="06vel05.gif">Figure 6.5. Text boxes without labels confuse the </B><B>user.</A></B>

<BR>


<P>You must label the text box with a label control that tells the user what you want. The application shown in Figure 6.6 is identical to the application shown in Figure 6.5, but the labels in front of each text box tell the user what kind of data to 

enter.

<BR>

<P><B> <A HREF="06vel06.gif">Figure 6.6. The user now knows what data is </B><B>expected.</A></B>

<BR>

<BLOCKQUOTE>

<BLOCKQUOTE>

<HR ALIGN=CENTER>

<BR>

<NOTE><B>Tip: </B>Add access shortcut keystrokes to labels that describe data-entry 
text boxes.</NOTE>

<BR>

<HR ALIGN=CENTER>

</BLOCKQUOTE></BLOCKQUOTE>

<P>Suppose that the user fills in the six sales figures. He might want to go back and change an entry to fix a typing error. When you put text boxes in an application, think about 
giving your users a chance to correct their mistakes by providing them an 
access keystroke to each text box.

<BR>

<P>As you know, access shortcut keys are the Alt+Keystroke combinations that you can apply to controls such as command buttons. In Figure 
6.6, the user can press Tab to the Exit command button, click the Exit command button with the mouse, or press 
Alt+X&#151;the access shortcut key for the command button. The underline indicates which letter provides the access.

<BR>

<P>Text box controls 
do not have captions, so you cannot directly add access keystrokes to text boxes. Nevertheless, you can add underlined access keystrokes to label captions. For example, suppose that you changed the first label in Figure 6.6 from 
January to January. The 
access keystroke for that label is Alt+J.

<BR>

<P>But wait, there's a problem. Labels cannot receive the focus! If a label contains an access keystroke and the user presses that access keystroke combination, Visual Basic knows that the focus cannot go to 
the label. It sends the focus to the next 
control in the TabIndex sequence. All controls contain a TabIndex property. A different numeric value appears in each control's TabIndex property. As you learned in the previous unit, the TabIndex property 
determines the focus order. Suppose that you 
assigned a TabIndex value of 0 to the January label and a TabIndex value of 1 to the text box to the right of January. When the user presses Alt+J, the focus goes to the text box because the label cannot 
receive a focus.

<BR>

<P>Therefore, after you place all the controls on a form and set their properties, go back to each control and make sure that each label contains a TabIndex value that is one less than the text box control that the label describes. 
Make sure, as well, that 
the overall TabIndex sequence is organized so that it sends the focus from control to control in the order you want as the user presses Tab. Figure 6.7 shows the six-month sales data-entry application in which each label has an 
access shortcut keystroke. 
The figure indicates the TabIndex value for each control. Given the TabIndex values, the focus goes directly to the May text box when the user presses Alt+Y.

<BR>

<P><B> <A HREF="06vel07.gif">Figure 6.7. The 
</B><B>TabIndex</B><B> properties describe the </B><B>access keystroke order.</A></B>

<BR>

<P><FONT COLOR="#FF8000"><B><I>Review: </I></B></FONT>Although you cannot add access keys to text boxes, you can add access keys to the labels that describe text 
boxes. By doing so, you give your users shortcut access to any text box on the form.

<BR>

<BR>

<A NAME="E68E52"></A>

<H3 ALIGN=CENTER>

<CENTER>

<FONT SIZE=5 COLOR="#FF0000"><B>Introducing Control Events</B></FONT></CENTER></H3>

<BR>

<P><FONT 
COLOR="#FF8000"><B><I>Concept: </I></B></FONT>You know that when the user clicks command buttons and types text in text boxes, he triggers events that your program can capture. This section discusses the events available for the command button, 
label, and 
text box controls. Lesson 4 begins your study of the Visual Basic programming language, so you need to understand which events are possible as you write event procedures that respond to those events.

<BR>

<P>Here's another section full of tables! 
Nevertheless, they show you all the events available for the controls you have been learning. In the next lesson, you will begin to write code. The code that you write usually appears inside event procedures. You 
need to know which events are available, 
so that you can write the correct event procedures. 

<BR>

<BLOCKQUOTE>

<BLOCKQUOTE>

<HR ALIGN=CENTER>

<BR>

<NOTE><B>Note: </B>As you learn new controls in subsequent lessons, you will find more tables properties and events. Enjoy.</NOTE>

<BR>

<HR 
ALIGN=CENTER>

</BLOCKQUOTE></BLOCKQUOTE>

<P>Table 6.3 describes the events related to forms. Perhaps the most important form event is Load, which triggers whenever the user runs an application. Throughout this book, you will use the Load event to put 
startup code in applications so that the 
startup code executes immediately after the user runs the application and immediately before the form appears on the screen.

<BR>

<BLOCKQUOTE>

<BLOCKQUOTE>

<HR ALIGN=CENTER>

<BR>

<NOTE><B>Tip: </B>Remember 
that if you want to see what events are possible for a certain control, place the control on the Form window and double-click the control. Visual Basic opens a Code window. Open the Proc: dropdown combo box list to see a list of 
the events available for 
that control.</NOTE>

<BR>

<HR ALIGN=CENTER>

</BLOCKQUOTE></BLOCKQUOTE>

<BR>

<P ALIGN=CENTER>

<CENTER>

<FONT COLOR="#000080"><B>Table 6.3. Form events.</B></FONT></CENTER>

<BR>



<TABLE  BORDERCOLOR=#000040 BORDER=1 CELLSPACING=2 WIDTH="100%" 
CELLPADDING=2 >

<TR>

<TD VALIGN=top  BGCOLOR=#80FFFF ><FONT COLOR=#000080>

<I>Event</I>

</FONT>

<TD VALIGN=top  BGCOLOR=#80FFFF ><FONT COLOR=#000080>

<I>Description</I></FONT>

<TR>

<TD VALIGN=top  BGCOLOR=#80FFFF ><FONT COLOR=#000080>

Activate


</FONT>

<TD VALIGN=top  BGCOLOR=#80FFFF ><FONT COLOR=#000080>

Occurs when a form becomes the active window. In Visual Basic, the Activate event occurs after the Load event displays the form.</FONT>

<TR>

<TD VALIGN=top  BGCOLOR=#80FFFF ><FONT 
COLOR=#000080>

Click

</FONT>

<TD VALIGN=top  BGCOLOR=#80FFFF ><FONT COLOR=#000080>

Occurs when the user clicks the form with the mouse.</FONT>

<TR>

<TD VALIGN=top  BGCOLOR=#80FFFF ><FONT COLOR=#000080>

DblClick

</FONT>

<TD VALIGN=top  
BGCOLOR=#80FFFF ><FONT COLOR=#000080>

Occurs when the user double-clicks the form with the mouse.</FONT>

<TR>

<TD VALIGN=top  BGCOLOR=#80FFFF ><FONT COLOR=#000080>

Deactivate

</FONT>

<TD VALIGN=top  BGCOLOR=#80FFFF ><FONT COLOR=#000080>

Occurs when 
another form becomes the active window. Not available in the Visual Basic Primer Edition.</FONT>

<TR>

<TD VALIGN=top  BGCOLOR=#80FFFF ><FONT COLOR=#000080>

DragDrop

</FONT>

<TD VALIGN=top  BGCOLOR=#80FFFF ><FONT COLOR=#000080>

Occurs when a drag 
operation over the form completes.</FONT>

<TR>

<TD VALIGN=top  BGCOLOR=#80FFFF ><FONT COLOR=#000080>

DragOver

</FONT>

<TD VALIGN=top  BGCOLOR=#80FFFF ><FONT COLOR=#000080>

Occurs during a drag operation over the form.</FONT>

<TR>

<TD VALIGN=top  
BGCOLOR=#80FFFF ><FONT COLOR=#000080>

GotFocus

</FONT>

<TD VALIGN=top  BGCOLOR=#80FFFF ><FONT COLOR=#000080>

Occurs when the form receives the focus.</FONT>

<TR>

<TD VALIGN=top  BGCOLOR=#80FFFF ><FONT COLOR=#000080>

KeyDown

</FONT>

<TD VALIGN=top  
BGCOLOR=#80FFFF ><FONT COLOR=#000080>

Occurs when the user presses a key and the KeyPreview property for the controls on the form is set to True. Otherwise, the control gets the KeyDown event.</FONT>

<TR>

<TD VALIGN=top  BGCOLOR=#80FFFF ><FONT 
COLOR=#000080>

KeyPress

</FONT>

<TD VALIGN=top  BGCOLOR=#80FFFF ><FONT COLOR=#000080>

Occurs when the user presses a key over the form.</FONT>

<TR>

<TD VALIGN=top  BGCOLOR=#80FFFF ><FONT COLOR=#000080>

KeyUp

</FONT>

<TD VALIGN=top  BGCOLOR=#80FFFF 
><FONT COLOR=#000080>

Occurs when the user releases a key.</FONT>

<TR>

<TD VALIGN=top  BGCOLOR=#80FFFF ><FONT COLOR=#000080>

LinkClose

</FONT>

<TD VALIGN=top  BGCOLOR=#80FFFF ><FONT COLOR=#000080>

Occurs when a DDE operation terminates.</FONT>

<TR>


<TD VALIGN=top  BGCOLOR=#80FFFF ><FONT COLOR=#000080>

LinkError

</FONT>

<TD VALIGN=top  BGCOLOR=#80FFFF ><FONT COLOR=#000080>

Occurs when a DDE operation fails.</FONT>

<TR>

<TD VALIGN=top  BGCOLOR=#80FFFF ><FONT COLOR=#000080>

LinkExecute

</FONT>


<TD VALIGN=top  BGCOLOR=#80FFFF ><FONT COLOR=#000080>

Occurs when a DDE operation begins to execute.</FONT>

<TR>

<TD VALIGN=top  BGCOLOR=#80FFFF ><FONT COLOR=#000080>

LinkOpen

</FONT>

<TD VALIGN=top  BGCOLOR=#80FFFF ><FONT COLOR=#000080>

Occurs when 
a DDE operation begins.</FONT>

<TR>

<TD VALIGN=top  BGCOLOR=#80FFFF ><FONT COLOR=#000080>

Load

</FONT>

<TD VALIGN=top  BGCOLOR=#80FFFF ><FONT COLOR=#000080>

Occurs when the form loads and before it appears on the screen.</FONT>

<TR>

<TD VALIGN=top  
BGCOLOR=#80FFFF ><FONT COLOR=#000080>

LostFocus

</FONT>

<TD VALIGN=top  BGCOLOR=#80FFFF ><FONT COLOR=#000080>

Occurs when the form loses the focus.</FONT>

<TR>

<TD VALIGN=top  BGCOLOR=#80FFFF ><FONT COLOR=#000080>

MouseDown

</FONT>

<TD VALIGN=top  
BGCOLOR=#80FFFF ><FONT COLOR=#000080>

Occurs when the user presses the mouse button over the form.</FONT>

<TR>

<TD VALIGN=top  BGCOLOR=#80FFFF ><FONT COLOR=#000080>

MouseMove

</FONT>

<TD VALIGN=top  BGCOLOR=#80FFFF ><FONT COLOR=#000080>

Occurs when 
the user moves the mouse over the form.</FONT>

<TR>

<TD VALIGN=top  BGCOLOR=#80FFFF ><FONT COLOR=#000080>

MouseUp

</FONT>

<TD VALIGN=top  BGCOLOR=#80FFFF ><FONT COLOR=#000080>

Occurs when the user releases the mouse over the form.</FONT>

<TR>

<TD 
VALIGN=top  BGCOLOR=#80FFFF ><FONT COLOR=#000080>

Paint

</FONT>

<TD VALIGN=top  BGCOLOR=#80FFFF ><FONT COLOR=#000080>

Occurs when Visual Basic must redraw a form because another object overwrote part of the form and then the user moved the object and 
exposed the hidden part of the form.</FONT>

<TR>

<TD VALIGN=top  BGCOLOR=#80FFFF ><FONT COLOR=#000080>

QueryUnload

</FONT>

<TD VALIGN=top  BGCOLOR=#80FFFF ><FONT COLOR=#000080>

Occurs immediately before the application terminates.</FONT>

<TR>

<TD 
VALIGN=top  BGCOLOR=#80FFFF ><FONT COLOR=#000080>

Resize

</FONT>

<TD VALIGN=top  BGCOLOR=#80FFFF ><FONT COLOR=#000080>

Occurs when the user resizes the form.</FONT>

<TR>

<TD VALIGN=top  BGCOLOR=#80FFFF ><FONT COLOR=#000080>

Unload

</FONT>

<TD 
VALIGN=top  BGCOLOR=#80FFFF ><FONT COLOR=#000080>

Occurs when the form is unloaded using the Unload statement.</FONT>

</TABLE><BLOCKQUOTE>

<BLOCKQUOTE>

<HR ALIGN=CENTER>

<BR>

<NOTE><B>Warning: </B>Don't Table 6.3 scare you away from Visual Basic! You 
will use only a handful of these events in most of your programming work.</NOTE>

<BR>

<HR ALIGN=CENTER>

</BLOCKQUOTE></BLOCKQUOTE>

<P>Notice that all the descriptions in Table 6.3 begin with the word <I>occurs</I>. Each of these table entries are 
events that occur as the result of a user or Windows action. Therefore, if you want to do something when the user clicks the form, you write 
code that performs the task that you want accomplished and you put that code inside the form's Click event 
procedure. If the form is named MyForm, the Click event procedure is named MyForm_Click(), as you learned in the <A HREF="vel04.htm">Unit 4</A>. You 
will start writing the code for event procedures in the next lesson.

<BR>

<P>Table 6.4 describes the 
events available for the command button controls that you place on forms.

<BR>

<BR>

<P ALIGN=CENTER>

<CENTER>

<FONT COLOR="#000080"><B>Table 6.4. Command button events.</B></FONT></CENTER>

<BR>



<TABLE  BORDERCOLOR=#000040 BORDER=1 CELLSPACING=2 
WIDTH="100%" CELLPADDING=2 >

<TR>

<TD VALIGN=top  BGCOLOR=#80FFFF ><FONT COLOR=#000080>

<I>Event</I>

</FONT>

<TD VALIGN=top  BGCOLOR=#80FFFF ><FONT COLOR=#000080>

<I>Description</I></FONT>

<TR>

<TD VALIGN=top  BGCOLOR=#80FFFF ><FONT COLOR=#000080>


Click

</FONT>

<TD VALIGN=top  BGCOLOR=#80FFFF ><FONT COLOR=#000080>

Occurs when the user clicks the command button with the mouse.</FONT>

<TR>

<TD VALIGN=top  BGCOLOR=#80FFFF ><FONT COLOR=#000080>

DragDrop

</FONT>

<TD VALIGN=top  BGCOLOR=#80FFFF 
><FONT COLOR=#000080>

Occurs when a drag operation of the command button completes.</FONT>

<TR>

<TD VALIGN=top  BGCOLOR=#80FFFF ><FONT COLOR=#000080>

DragOver

</FONT>

<TD VALIGN=top  BGCOLOR=#80FFFF ><FONT COLOR=#000080>

Occurs during a drag 
operation of the command button.</FONT>

<TR>

<TD VALIGN=top  BGCOLOR=#80FFFF ><FONT COLOR=#000080>

GotFocus

</FONT>

<TD VALIGN=top  BGCOLOR=#80FFFF ><FONT COLOR=#000080>

Occurs when the command button receives the focus.</FONT>

<TR>

<TD VALIGN=top  
BGCOLOR=#80FFFF ><FONT COLOR=#000080>

KeyDown

</FONT>

<TD VALIGN=top  BGCOLOR=#80FFFF ><FONT COLOR=#000080>

Occurs when the user presses a key and the KeyPreview property for any control on the form is set to False. Otherwise, the form gets the KeyDown 
event.</FONT>

<TR>

<TD VALIGN=top  BGCOLOR=#80FFFF ><FONT COLOR=#000080>

KeyPress

</FONT>

<TD VALIGN=top  BGCOLOR=#80FFFF ><FONT COLOR=#000080>

Occurs when the user presses a key over the command button.</FONT>

<TR>

<TD VALIGN=top  BGCOLOR=#80FFFF 
><FONT COLOR=#000080>

KeyUp

</FONT>

<TD VALIGN=top  BGCOLOR=#80FFFF ><FONT COLOR=#000080>

Occurs when the user releases a key.</FONT>

<TR>

<TD VALIGN=top  BGCOLOR=#80FFFF ><FONT COLOR=#000080>

LostFocus

</FONT>

<TD VALIGN=top  BGCOLOR=#80FFFF 
><FONT COLOR=#000080>

Occurs when the command button loses the focus to another control or to the form.</FONT>

</TABLE><P>Table 6.5 describes the events available for the label controls that you place on forms.

<BR>

<BR>

<P ALIGN=CENTER>

<CENTER>


<FONT COLOR="#000080"><B>Table 6.5. Label control events.</B></FONT></CENTER>

<BR>



<TABLE  BORDERCOLOR=#000040 BORDER=1 CELLSPACING=2 WIDTH="100%" CELLPADDING=2 >

<TR>

<TD VALIGN=top  BGCOLOR=#80FFFF ><FONT COLOR=#000080>

<I>Event</I>

</FONT>

<TD 
VALIGN=top  BGCOLOR=#80FFFF ><FONT COLOR=#000080>

<I>Description</I></FONT>

<TR>

<TD VALIGN=top  BGCOLOR=#80FFFF ><FONT COLOR=#000080>

Change

</FONT>

<TD VALIGN=top  BGCOLOR=#80FFFF ><FONT COLOR=#000080>

Occurs when the label's Caption property 
changes.</FONT>

<TR>

<TD VALIGN=top  BGCOLOR=#80FFFF ><FONT COLOR=#000080>

Click

</FONT>

<TD VALIGN=top  BGCOLOR=#80FFFF ><FONT COLOR=#000080>

Occurs when the user clicks the label with the mouse.</FONT>

<TR>

<TD VALIGN=top  BGCOLOR=#80FFFF ><FONT 
COLOR=#000080>

DblClick

</FONT>

<TD VALIGN=top  BGCOLOR=#80FFFF ><FONT COLOR=#000080>

Occurs when the user double-clicks the label with the mouse.</FONT>

<TR>

<TD VALIGN=top  BGCOLOR=#80FFFF ><FONT COLOR=#000080>

DragDrop

</FONT>

<TD VALIGN=top  
BGCOLOR=#80FFFF ><FONT COLOR=#000080>

Occurs when a drag operation of the label completes.</FONT>

<TR>

<TD VALIGN=top  BGCOLOR=#80FFFF ><FONT COLOR=#000080>

DragOver

</FONT>

<TD VALIGN=top  BGCOLOR=#80FFFF ><FONT COLOR=#000080>

Occurs during a drag 
operation of the label.</FONT>

<TR>

<TD VALIGN=top  BGCOLOR=#80FFFF ><FONT COLOR=#000080>

LinkClose

</FONT>

<TD VALIGN=top  BGCOLOR=#80FFFF ><FONT COLOR=#000080>

Occurs when a DDE operation terminates.</FONT>

<TR>

<TD VALIGN=top  BGCOLOR=#80FFFF 
><FONT COLOR=#000080>

LinkError

</FONT>

<TD VALIGN=top  BGCOLOR=#80FFFF ><FONT COLOR=#000080>

Occurs when a DDE operation fails.</FONT>

<TR>

<TD VALIGN=top  BGCOLOR=#80FFFF ><FONT COLOR=#000080>

LinkNotify

</FONT>

<TD VALIGN=top  BGCOLOR=#80FFFF 
><FONT COLOR=#000080>

Occurs when a DDE operation notifies the label with a changed message.</FONT>

<TR>

<TD VALIGN=top  BGCOLOR=#80FFFF ><FONT COLOR=#000080>

LinkOpen

</FONT>

<TD VALIGN=top  BGCOLOR=#80FFFF ><FONT COLOR=#000080>

Occurs when a DDE 
operation begins.</FONT>

<TR>

<TD VALIGN=top  BGCOLOR=#80FFFF ><FONT COLOR=#000080>

MouseDown

</FONT>

<TD VALIGN=top  BGCOLOR=#80FFFF ><FONT COLOR=#000080>

Occurs when the user presses the mouse button over the label.</FONT>

<TR>

<TD VALIGN=top  
BGCOLOR=#80FFFF ><FONT COLOR=#000080>

MouseMove

</FONT>

<TD VALIGN=top  BGCOLOR=#80FFFF ><FONT COLOR=#000080>

Occurs when the user moves the mouse over the label.</FONT>

<TR>

<TD VALIGN=top  BGCOLOR=#80FFFF ><FONT COLOR=#000080>

MouseUp

</FONT>


<TD VALIGN=top  BGCOLOR=#80FFFF ><FONT COLOR=#000080>

Occurs when the user releases the mouse over the label.</FONT>

</TABLE><P>Note that no GotFocus event is associated with labels. This is because a label can never receive the focus.

<BR>

<P>Table 
6.6 describes the events available for the text box controls that you place on forms.

<BR>

<BR>

<P ALIGN=CENTER>

<CENTER>

<FONT COLOR="#000080"><B>Table 6.6. Text box control events.</B></FONT></CENTER>

<BR>



<TABLE  BORDERCOLOR=#000040 BORDER=1 
CELLSPACING=2 WIDTH="100%" CELLPADDING=2 >

<TR>

<TD VALIGN=top  BGCOLOR=#80FFFF ><FONT COLOR=#000080>

<I>Event</I>

</FONT>

<TD VALIGN=top  BGCOLOR=#80FFFF ><FONT COLOR=#000080>

<I>Description</I></FONT>

<TR>

<TD VALIGN=top  BGCOLOR=#80FFFF ><FONT 
COLOR=#000080>

Change

</FONT>

<TD VALIGN=top  BGCOLOR=#80FFFF ><FONT COLOR=#000080>

Occurs when the text box's Text property changes.</FONT>

<TR>

<TD VALIGN=top  BGCOLOR=#80FFFF ><FONT COLOR=#000080>

DragDrop

</FONT>

<TD VALIGN=top  
BGCOLOR=#80FFFF ><FONT COLOR=#000080>

Occurs when a drag operation of the text box completes.</FONT>

<TR>

<TD VALIGN=top  BGCOLOR=#80FFFF ><FONT COLOR=#000080>

DragOver

</FONT>

<TD VALIGN=top  BGCOLOR=#80FFFF ><FONT COLOR=#000080>

Occurs during a 
drag operation of the text box.</FONT>

<TR>

<TD VALIGN=top  BGCOLOR=#80FFFF ><FONT COLOR=#000080>

GotFocus

</FONT>

<TD VALIGN=top  BGCOLOR=#80FFFF ><FONT COLOR=#000080>

Occurs when the text box receives the focus.</FONT>

<TR>

<TD VALIGN=top  
BGCOLOR=#80FFFF ><FONT COLOR=#000080>

KeyDown

</FONT>

<TD VALIGN=top  BGCOLOR=#80FFFF ><FONT COLOR=#000080>

Occurs when the user presses a key and the KeyPreview property for the controls on the form is set to True. Otherwise, the form gets the KeyDown 
event.</FONT>

<TR>

<TD VALIGN=top  BGCOLOR=#80FFFF ><FONT COLOR=#000080>

KeyPress

</FONT>

<TD VALIGN=top  BGCOLOR=#80FFFF ><FONT COLOR=#000080>

Occurs when the user presses a key over the text box.</FONT>

<TR>

<TD VALIGN=top  BGCOLOR=#80FFFF ><FONT 
COLOR=#000080>

KeyUp

</FONT>

<TD VALIGN=top  BGCOLOR=#80FFFF ><FONT COLOR=#000080>

Occurs when the user releases a key over the text box.</FONT>

<TR>

<TD VALIGN=top  BGCOLOR=#80FFFF ><FONT COLOR=#000080>

LinkClose

</FONT>

<TD VALIGN=top  
BGCOLOR=#80FFFF ><FONT COLOR=#000080>

Occurs when a DDE operation terminates.</FONT>

<TR>

<TD VALIGN=top  BGCOLOR=#80FFFF ><FONT COLOR=#000080>

LinkError

</FONT>

<TD VALIGN=top  BGCOLOR=#80FFFF ><FONT COLOR=#000080>

Occurs when a DDE operation 
fails.</FONT>

<TR>

<TD VALIGN=top  BGCOLOR=#80FFFF ><FONT COLOR=#000080>

LinkNotify

</FONT>

<TD VALIGN=top  BGCOLOR=#80FFFF ><FONT COLOR=#000080>

Occurs when a DDE operation notifies the text box with a changed message.</FONT>

<TR>

<TD VALIGN=top  
BGCOLOR=#80FFFF ><FONT COLOR=#000080>

LinkOpen

</FONT>

<TD VALIGN=top  BGCOLOR=#80FFFF ><FONT COLOR=#000080>

Occurs when a DDE operation begins.</FONT>

<TR>

<TD VALIGN=top  BGCOLOR=#80FFFF ><FONT COLOR=#000080>

LostFocus

</FONT>

<TD VALIGN=top  
BGCOLOR=#80FFFF ><FONT COLOR=#000080>

Occurs when the text box loses the focus to another object.</FONT>

</TABLE><P><FONT COLOR="#FF8000"><B><I>Review: </I></B></FONT>Each control has its own set of properties and command buttons. The tables in this unit 
complete the discussion of forms, command buttons, labels, and text boxes. You now know enough to work 
with these four fundamental Visual Basic objects. The next lesson builds on your knowledge by teaching you how to add code to event procedures.

<BR>


<BR>

<A NAME="E68E53"></A>

<H3 ALIGN=CENTER>

<CENTER>

<FONT SIZE=5 COLOR="#FF0000"><B>Homework</B></FONT></CENTER></H3>

<BR>

<BR>

<A NAME="E69E42"></A>

<H4 ALIGN=CENTER>

<CENTER>

<FONT SIZE=4 COLOR="#FF0000"><B>General 
Knowledge</B></FONT></CENTER></H4>

<BR>

<OL>

<LI>Is the form an object?

<BR>

<BR>

<LI>True or false: Label controls can have more than one line of text as long as you set the MultiLine property.

<BR>

<BR>

<LI>What is a pixel?

<BR>

<BR>


<LI>Which form property determines how the form appears when the user first sees the form?

<BR>

<BR>

<LI>What does <I>truncate</I> mean?

<BR>

<BR>

<LI>True or false: Suppose that you want to store a lot of text in a label. You must make the label 
large enough to hold the entire text if the user is to see all of it.

<BR>

<BR>

<LI>True or false: You can add both horizontal and vertical scroll bars to a label.

<BR>

<BR>

<LI>How can you ensure that a label does not expand to display a long value?


<BR>

<BR>

<LI>True or false: You can enter an initial multiline text value by using the Properties window.

<BR>

<BR>

<LI>True or false: A label can get the focus as long as you supply an access shortcut key for the label.

<BR>

<BR>

<LI>Which 
property determines the focus order?

<BR>

<BR>

<LI>What is perhaps the most important form event?

<BR>

<BR>

<LI>Which form event occurs first: Load or Activate?

<BR>

<BR>

<LI>What window can you use to see all the events for objects?

<BR>

<BR>


<LI>Why is there no GotFocus event for labels?

<BR>

<BR>

</OL>

<BR>

<A NAME="E69E43"></A>

<H4 ALIGN=CENTER>

<CENTER>

<FONT SIZE=4 COLOR="#FF0000"><B>Write Code That...</B></FONT></CENTER></H4>

<BR>

<OL>

<LI>Suppose that you were writing a Change 
event procedure for a text box label called txtLastName. What you name the event procedure?

<BR>

<BR>

<LI>When the user presses a key, either the form gets the keystroke or a control gets the keystroke. What property determines which object gets the 
keystroke?

<BR>

<BR>

<LI>Suppose that you need to change a form's title in the form's title bar. Which property do you change&#151;the Caption property or the Name property?

<BR>

<BR>

<LI>Describe how you add access keystrokes to text boxes.

<BR>


<BR>

</OL>

<BR>

<A NAME="E69E44"></A>

<H4 ALIGN=CENTER>

<CENTER>

<FONT SIZE=4 COLOR="#FF0000"><B>Find the Bug</B></FONT></CENTER></H4>

<BR>

<OL>

<LI>Why should you avoid putting too many self-sizing labels on the form at one time?

<BR>

<BR>


<LI>What happens if you set the AutoSize property to True before you set the WordWrap property to True?

<BR>

<BR>

</OL>

<BR>

<A NAME="E69E45"></A>

<H4 ALIGN=CENTER>

<CENTER>

<FONT SIZE=4 COLOR="#FF0000"><B>Extra Credit</B></FONT></CENTER></H4>


<BR>

<P>What if you wanted to enter Property window settings in inches instead of twips, the default unit of measurement. How do you change the unit measurement to inches?

<BR>

<P ALIGN=LEFT>

<A HREF="vel05.htm" TARGET="_self"><IMG SRC="purprev.gif" 
WIDTH = 32 HEIGHT = 32 BORDER = 0 ALT="Previous Page"></A>

<A HREF="#I0" TARGET="_self"><IMG SRC="purtop.gif" WIDTH = 32 HEIGHT = 32 BORDER = 0 ALT="Page Top"></A>

<A HREF="index.htm" TARGET="_self"><IMG SRC="purtoc.gif" WIDTH = 32 HEIGHT = 32 BORDER = 0 
ALT="TOC"></A>

<A HREF="velp03.htm" TARGET="_self"><IMG SRC="purnext.gif" WIDTH = 32 HEIGHT = 32 BORDER = 0 ALT="Next Page"></A>


</BODY></HTML>







