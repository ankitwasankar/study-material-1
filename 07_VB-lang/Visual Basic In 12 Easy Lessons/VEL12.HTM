<HTML>

<HEAD>

<TITLE>Visual Basic in 12 Easy Lessons vel12.htm </TITLE>

<LINK REL="ToC" HREF="index.htm">

<LINK REL="Index" HREF="htindex.htm">

<LINK REL="Next" HREF="velp06.htm">

<LINK REL="Previous" HREF="vel11.htm"></HEAD>

<BODY BGCOLOR="#FFFFFF" 
TEXT="#000000" LINK="#0000FF" VLINK="#800080">

<A NAME="I0"></A>

<H2>Visual Basic in 12 Easy Lessons vel12.htm</H2>

<P ALIGN=LEFT>

<A HREF="vel11.htm" TARGET="_self"><IMG SRC="purprev.gif" WIDTH = 32 HEIGHT = 32 BORDER = 0 ALT="Previous Page"></A>

<A 
HREF="index.htm" TARGET="_self"><IMG SRC="purtoc.gif" WIDTH = 32 HEIGHT = 32 BORDER = 0 ALT="TOC"></A>

<A HREF="velp06.htm" TARGET="_self"><IMG SRC="purnext.gif" WIDTH = 32 HEIGHT = 32 BORDER = 0 ALT="Next Page"></A>


<HR ALIGN=CENTER>

<P>

<UL>

<UL>

<UL>

<LI>

<A HREF="#E68E91" >What You'll Learn</A>

<LI>

<A HREF="#E68E92" >Option Buttons Offer Choices</A>

<LI>

<A 
HREF="#E68E93" >Check Boxes Offer More Choices</A>

<LI>

<A HREF="#E68E94" >Multiple Sets of Option Buttons</A>

<LI>

<A HREF="#E68E95" >Control Arrays Simplify</A>

<LI>

<A HREF="#E68E96" >Homework</A>

<UL>

<LI>

<A HREF="#E69E81" >General 
Knowledge</A>

<LI>

<A HREF="#E69E82" >Write Code That...</A>

<LI>

<A HREF="#E69E83" >Extra Credit</A></UL></UL></UL></UL>

<HR ALIGN=CENTER>

<A NAME="E66E17"></A>

<H1 ALIGN=CENTER>

<CENTER>

<FONT SIZE=6 COLOR="#FF0000"><B>Lesson 6, Unit 
12</B></FONT></CENTER></H1>

<BR>

<A NAME="E67E20"></A>

<H2 ALIGN=CENTER>

<CENTER>

<FONT SIZE=6 COLOR="#FF0000"><B>Checks, Options, and Control Arrays</B></FONT></CENTER></H2>

<BR>

<BR>

<A NAME="E68E91"></A>

<H3 ALIGN=CENTER>

<CENTER>

<FONT 
SIZE=5 COLOR="#FF0000"><B>What You'll Learn</B></FONT></CENTER></H3>

<BR>

<UL>

<LI>Option buttons offer choices

<BR>

<BR>

<LI>Check boxes offer more choices

<BR>

<BR>

<LI>Option buttons come in multiple sets

<BR>

<BR>

<LI>Control arrays 
simplify programming

<BR>

<BR>

</UL>

<P>You'll find that this unit is easy because it introduces two new controls that you've seen in many Windows programs, and it also builds upon arrays that you mastered in the previous unit. The check box and option 
button controls described here provide 
the user with choices of data values and options that the user can select. Unlike list and combo box controls, the check box and option button controls (shown in Figure 12.1's Toolbox window) are perfect controls for 
offering the user a limited number of 
choices.

<BR>

<P><B> <A HREF="12vel01.gif">Figure 12.1. The check box and option button controls.</A></B>

<BR>

<BR>

<A NAME="E68E92"></A>

<H3 ALIGN=CENTER>

<CENTER>

<FONT SIZE=5 COLOR="#FF0000"><B>Option 
Buttons Offer Choices</B></FONT></CENTER></H3>

<BR>

<P><FONT COLOR="#FF8000"><B><I>Concept: </I></B></FONT>The option button control gives the user the ability to select one item from a list of several items that you display in a series of option button 
choices. Visual Basic keeps the user from selecting 
more than one option button at a time. The option button's events offer several ways for you to manage the option button selections.

<BR>

<P>List boxes and combo boxes are perfect controls for 
displaying scrolling lists of items from which the user can select and, in the case of combo boxes, add to. Unlike list and combo boxes, option buttons are good to use when you must offer the user a 
list of fixed choices that your program knows ahead of 
time.

<BR>

<BLOCKQUOTE>

<BLOCKQUOTE>

<HR ALIGN=CENTER>

<BR>

<NOTE><B>Tip: </B>Think of option buttons as a multiple-choice selection from which the user can choose one item.</NOTE>

<BR>

<HR ALIGN=CENTER>

</BLOCKQUOTE></BLOCKQUOTE>

<P>Option 
buttons are sometimes called <I>radio buttons</I>. Perhaps you're old enough to remember pre-digital car radios that had five or six buttons sticking out with preset statements assigned to each button. At any one time, you could depress one 
button because 
the radio could play only one station at a time. When you pressed a button, any other button pressed inward immediately clicked out. The buttons were designed so that only one button at a time could be chosen.

<BR>

<P>Take the time to load CONTROLS.MAK 
and press the Next control command button until you see the option buttons shown in Figure 12.2. Try to click more than one option button and you'll see that Visual Basic keeps you from doing so.

<BR>

<P><B> <A HREF="12vel02.gif">Figure 12.2. You may 
select only one option button at a time.</A></B>

<BR>

<P>Table 12.1 lists the property settings for the option button controls that you can set from within the Property window when you place option buttons on the form. There are several properties that 
you've seen before on other kinds of controls.

<BR>

<BR>

<P ALIGN=CENTER>

<CENTER>

<FONT COLOR="#000080"><B>Table 12.1. The option button properties.</B></FONT></CENTER>

<BR>



<TABLE  BORDERCOLOR=#000040 BORDER=1 CELLSPACING=2 WIDTH="100%" 
CELLPADDING=2 >

<TR>

<TD VALIGN=top  BGCOLOR=#80FFFF ><FONT COLOR=#000080>

<I>Property</I>

</FONT>

<TD VALIGN=top  BGCOLOR=#80FFFF ><FONT COLOR=#000080>

<I>Description</I></FONT>

<TR>

<TD VALIGN=top  BGCOLOR=#80FFFF ><FONT COLOR=#000080>

Alignment


</FONT>

<TD VALIGN=top  BGCOLOR=#80FFFF ><FONT COLOR=#000080>

Either 0 for left justification (the default) or 1 for right justification of the option button's caption. If you choose to left justify, the option button appears to the left of the caption. 
If you choose to right justify, the option button appears to the 
right of the caption.</FONT>

<TR>

<TD VALIGN=top  BGCOLOR=#80FFFF ><FONT COLOR=#000080>

BackColor

</FONT>

<TD VALIGN=top  BGCOLOR=#80FFFF ><FONT COLOR=#000080>

The background color of 
the option button. This is a hexadecimal number representing one of thousands of possible Windows color values. You'll be able to select from a palette of colors displayed by Visual Basic when you're ready to set the BackColor 
property. The default 
background color is the same as the form's default background color.</FONT>

<TR>

<TD VALIGN=top  BGCOLOR=#80FFFF ><FONT COLOR=#000080>

Caption

</FONT>

<TD VALIGN=top  BGCOLOR=#80FFFF ><FONT COLOR=#000080>

The text that appears in an option button. If 
you precede any character in the text with an ampersand, &amp;, that character then acts as the option button's access key.</FONT>

<TR>

<TD VALIGN=top  BGCOLOR=#80FFFF ><FONT COLOR=#000080>

DragIcon

</FONT>

<TD VALIGN=top  BGCOLOR=#80FFFF ><FONT 
COLOR=#000080>

The icon that appears when the user drags the option button around on the form. (You'll only rarely allow the user to move an option button, so the Drag... property settings aren't usually relevant.)</FONT>

<TR>

<TD VALIGN=top  
BGCOLOR=#80FFFF ><FONT COLOR=#000080>

DragMode

</FONT>

<TD VALIGN=top  BGCOLOR=#80FFFF ><FONT COLOR=#000080>

Either contains 1 for manual mouse dragging requirements (the user can press and hold the mouse button while dragging the control) or 0 (the 
default) for automatic mouse dragging, meaning that the user can't drag the option button but that you, through 
code, can initiate the dragging if needed.</FONT>

<TR>

<TD VALIGN=top  BGCOLOR=#80FFFF ><FONT COLOR=#000080>

Enabled

</FONT>

<TD 
VALIGN=top  BGCOLOR=#80FFFF ><FONT COLOR=#000080>

If set to True (the default), the option button can respond to events. Otherwise, Visual Basic halts event processing for that particular control.</FONT>

<TR>

<TD VALIGN=top  BGCOLOR=#80FFFF ><FONT 
COLOR=#000080>

FontBold

</FONT>

<TD VALIGN=top  BGCOLOR=#80FFFF ><FONT COLOR=#000080>

True (the default) if the Caption is to display in boldfaced characters; False otherwise.</FONT>

<TR>

<TD VALIGN=top  BGCOLOR=#80FFFF ><FONT COLOR=#000080>


FontItalic

</FONT>

<TD VALIGN=top  BGCOLOR=#80FFFF ><FONT COLOR=#000080>

True (the default) if the caption is to display in italicized characters; False otherwise.</FONT>

<TR>

<TD VALIGN=top  BGCOLOR=#80FFFF ><FONT COLOR=#000080>

FontName

</FONT>


<TD VALIGN=top  BGCOLOR=#80FFFF ><FONT COLOR=#000080>

The name of the option button caption's style. Typically, you'll use the name of a Windows TrueType font.</FONT>

<TR>

<TD VALIGN=top  BGCOLOR=#80FFFF ><FONT COLOR=#000080>

FontSize

</FONT>

<TD 
VALIGN=top  BGCOLOR=#80FFFF ><FONT COLOR=#000080>

The size, in points, of the font used for the command button's caption.</FONT>

<TR>

<TD VALIGN=top  BGCOLOR=#80FFFF ><FONT COLOR=#000080>

FontStrikethru

</FONT>

<TD VALIGN=top  BGCOLOR=#80FFFF ><FONT 
COLOR=#000080>

True (the default) if the caption is to display in strikethru letters (characters with a dash through each one); False otherwise.</FONT>

<TR>

<TD VALIGN=top  BGCOLOR=#80FFFF ><FONT COLOR=#000080>

FontUnderline

</FONT>

<TD VALIGN=top  
BGCOLOR=#80FFFF ><FONT COLOR=#000080>

True (the default) if the caption is to display in underlined letters; False otherwise.</FONT>

<TR>

<TD VALIGN=top  BGCOLOR=#80FFFF ><FONT COLOR=#000080>

ForeColor

</FONT>

<TD VALIGN=top  BGCOLOR=#80FFFF ><FONT 
COLOR=#000080>

The hexadecimal color code of the caption text's color.</FONT>

<TR>

<TD VALIGN=top  BGCOLOR=#80FFFF ><FONT COLOR=#000080>

Height

</FONT>

<TD VALIGN=top  BGCOLOR=#80FFFF ><FONT COLOR=#000080>

The height, in twips, of the option 
button.</FONT>

<TR>

<TD VALIGN=top  BGCOLOR=#80FFFF ><FONT COLOR=#000080>

HelpContextID

</FONT>

<TD VALIGN=top  BGCOLOR=#80FFFF ><FONT COLOR=#000080>

If you add advanced context-sensitive help to your application, the HelpContextID provides the 
identifying number for the help text.</FONT>

<TR>

<TD VALIGN=top  BGCOLOR=#80FFFF ><FONT COLOR=#000080>

Index

</FONT>

<TD VALIGN=top  BGCOLOR=#80FFFF ><FONT COLOR=#000080>

If the option button is part of a control array, the Index property provides 
the numeric subscript for each particular option button.</FONT>

<TR>

<TD VALIGN=top  BGCOLOR=#80FFFF ><FONT COLOR=#000080>

Left

</FONT>

<TD VALIGN=top  BGCOLOR=#80FFFF ><FONT COLOR=#000080>

The number of twips from the left edge of the Form window to 
the left edge of the option button.</FONT>

<TR>

<TD VALIGN=top  BGCOLOR=#80FFFF ><FONT COLOR=#000080>

MousePointer

</FONT>

<TD VALIGN=top  BGCOLOR=#80FFFF ><FONT COLOR=#000080>

The shape that the mouse cursor changes to if the user moves the mouse 
cursor over the option button. The possible values are from 0 to 12 and represent a range of different shapes that the mouse cursor can take. (See Lesson 12.)</FONT>

<TR>

<TD VALIGN=top  BGCOLOR=#80FFFF ><FONT COLOR=#000080>

Name

</FONT>

<TD 
VALIGN=top  BGCOLOR=#80FFFF ><FONT COLOR=#000080>

The name of the control. By default, Visual Basic generates the names Option1, Option2, and so on as you add subsequent option buttons to the form.</FONT>

<TR>

<TD VALIGN=top  BGCOLOR=#80FFFF ><FONT 
COLOR=#000080>

TabIndex

</FONT>

<TD VALIGN=top  BGCOLOR=#80FFFF ><FONT COLOR=#000080>

The focus tab order begins at 0 and increments every time that you add a new control. You can change the focus order by changing the controls' TabIndex to other 
values. No two controls on the same form can have the same TabIndex value.</FONT>

<TR>

<TD VALIGN=top  BGCOLOR=#80FFFF ><FONT COLOR=#000080>

TabStop

</FONT>

<TD VALIGN=top  BGCOLOR=#80FFFF ><FONT COLOR=#000080>

If True, the user can press Tab to move 
the focus to this option button. If False, the option button can't receive the focus.</FONT>

<TR>

<TD VALIGN=top  BGCOLOR=#80FFFF ><FONT COLOR=#000080>

Tag

</FONT>

<TD VALIGN=top  BGCOLOR=#80FFFF ><FONT COLOR=#000080>

Unused by Visual Basic. This is 
for the programmer's use for an identifying comment applied to the option button.</FONT>

<TR>

<TD VALIGN=top  BGCOLOR=#80FFFF ><FONT COLOR=#000080>

Top

</FONT>

<TD VALIGN=top  BGCOLOR=#80FFFF ><FONT COLOR=#000080>

The number of twips from the top 
edge of an option button to the top of the form.</FONT>

<TR>

<TD VALIGN=top  BGCOLOR=#80FFFF ><FONT COLOR=#000080>

Value

</FONT>

<TD VALIGN=top  BGCOLOR=#80FFFF ><FONT COLOR=#000080>

Either True or False (the default) indicating whether the option 
button is selected.</FONT>

<TR>

<TD VALIGN=top  BGCOLOR=#80FFFF ><FONT COLOR=#000080>

Visible

</FONT>

<TD VALIGN=top  BGCOLOR=#80FFFF ><FONT COLOR=#000080>

True or False, indicating whether the user can see (and, therefore, use) the option 
button.</FONT>

<TR>

<TD VALIGN=top  BGCOLOR=#80FFFF ><FONT COLOR=#000080>

Width

</FONT>

<TD VALIGN=top  BGCOLOR=#80FFFF ><FONT COLOR=#000080>

The number of twips wide that the option button consumes.</FONT>

</TABLE><P>Table 12.2 contains a list of 
the option button's events that trigger event procedures you can write. Generally, the Click event procedure is the most commonly used so that an application can perform a specific action when the user selects a 
particular option button.

<BR>

<BR>

<P 
ALIGN=CENTER>

<CENTER>

<FONT COLOR="#000080"><B>Table 12.2. The option button's events.</B></FONT></CENTER>

<BR>



<TABLE  BORDERCOLOR=#000040 BORDER=1 CELLSPACING=2 WIDTH="100%" CELLPADDING=2 >

<TR>

<TD VALIGN=top  BGCOLOR=#80FFFF ><FONT 
COLOR=#000080>

<I>Event</I>

</FONT>

<TD VALIGN=top  BGCOLOR=#80FFFF ><FONT COLOR=#000080>

<I>Description</I></FONT>

<TR>

<TD VALIGN=top  BGCOLOR=#80FFFF ><FONT COLOR=#000080>

Click

</FONT>

<TD VALIGN=top  BGCOLOR=#80FFFF ><FONT COLOR=#000080>


Occurs when the user clicks the option button with the mouse</FONT>

<TR>

<TD VALIGN=top  BGCOLOR=#80FFFF ><FONT COLOR=#000080>

DblClick

</FONT>

<TD VALIGN=top  BGCOLOR=#80FFFF ><FONT COLOR=#000080>

Occurs when the user double-clicks the mouse over 
the option button</FONT>

<TR>

<TD VALIGN=top  BGCOLOR=#80FFFF ><FONT COLOR=#000080>

DragDrop

</FONT>

<TD VALIGN=top  BGCOLOR=#80FFFF ><FONT COLOR=#000080>

Occurs when a dragging operation over the option button completes</FONT>

<TR>

<TD VALIGN=top  
BGCOLOR=#80FFFF ><FONT COLOR=#000080>

DragOver

</FONT>

<TD VALIGN=top  BGCOLOR=#80FFFF ><FONT COLOR=#000080>

Occurs during a drag operation</FONT>

<TR>

<TD VALIGN=top  BGCOLOR=#80FFFF ><FONT COLOR=#000080>

GotFocus

</FONT>

<TD VALIGN=top  
BGCOLOR=#80FFFF ><FONT COLOR=#000080>

Occurs when the option button receives the focus</FONT>

<TR>

<TD VALIGN=top  BGCOLOR=#80FFFF ><FONT COLOR=#000080>

KeyDown

</FONT>

<TD VALIGN=top  BGCOLOR=#80FFFF ><FONT COLOR=#000080>

Occurs when the user 
presses a key as long as the KeyPreview property is set to True for the controls on the option button; otherwise, the control gets the KeyDown event</FONT>

<TR>

<TD VALIGN=top  BGCOLOR=#80FFFF ><FONT COLOR=#000080>

KeyPress

</FONT>

<TD VALIGN=top  
BGCOLOR=#80FFFF ><FONT COLOR=#000080>

Occurs when the user presses a key over the option button</FONT>

<TR>

<TD VALIGN=top  BGCOLOR=#80FFFF ><FONT COLOR=#000080>

KeyUp

</FONT>

<TD VALIGN=top  BGCOLOR=#80FFFF ><FONT COLOR=#000080>

Occurs when the 
user releases a key</FONT>

<TR>

<TD VALIGN=top  BGCOLOR=#80FFFF ><FONT COLOR=#000080>

LostFocus

</FONT>

<TD VALIGN=top  BGCOLOR=#80FFFF ><FONT COLOR=#000080>

Occurs when the option button loses the focus</FONT>

</TABLE><P><FONT 
COLOR="#FF8000"><B><I>Stop and Type: </I></B></FONT>Load and run this book's project named TRANSL.MAK. Listing 12.1 contains the code for the project's event procedures. The program allows the user to choose the target language into which 
&quot;Good 
Morning&quot; is translated. There is room on the form for only one translation, so the option buttons ensure that the user can select one translation at most.

<BR>

<P><FONT COLOR="#FF8000"><B><I>Review: </I></B></FONT>The option button controls enable 
you to add choices to the form. The user will be allowed to select from at most one choice by clicking (or tabbing to change the focus and pressing Enter) the option 
button of the desired option. By adding code to the option buttons' Click event 
procedures, you can respond to the user's choice.

<BR>

<P>

<FONT COLOR="#000080"><B>Listing 12.1. The </B><B>Form_Load</B><B>()</B><B> and four option button </B><B>Click()</B><B> procedures.</B></FONT>

<BR>

<PRE>

<FONT COLOR="#000080">1: Sub 
Form_Load ()

2: ' Make sure that all option buttons are

3: ' False when first displaying the form

4: optFre.Value = 0

5: optIta.Value = 0

6: optSpa.Value = 0

7: optPig.Value = 0

8: End Sub

9:

10: Sub cmdExit_Click ()

11: End

12: End Sub

13:


14: Sub optFre_Click ()

15: ' Send the French message

16: lblTrans.Caption = &quot;Bonjour&quot;

17: End Sub

18:

19: Sub optIta_Click ()

20: ' Send the Italian message

21: lblTrans.Caption = &quot;Buon giorno&quot;

22: End Sub

23:

24: Sub 
optPig_Click ()

25: ' Send the Pig latin message

26: lblTrans.Caption = &quot;oodGa ayDa&quot;

27: End Sub

28:

29: Sub optSpa_Click ()

30: ' Send the Spanish message

31: lblTrans.Caption = &quot;Buenos d&igrave;as&quot;

32: End Sub</FONT></PRE>


<P><FONT COLOR="#FF8000"><B><I>Output: </I></B></FONT>Figure 12.3 shows the TRANSL.MAK screen just after the user selects the Italian option button. The Italian translation appears in the shaded label at the bottom of the screen.

<BR>

<P><B> <A 
HREF="12vel03.gif">Figure 12.3. The user wants to </B><FONT COLOR="#FF8000"><B><I>parla Italiano bene!</A></I></B></FONT>

<BR>

<P><FONT COLOR="#FF8000"><B><I>Analysis: </I></B></FONT>Listing 12.1 looks a little different from the other listings that 
you've seen so far in this book. The listing contains more than one event procedure. As you've gathered by now, a Visual Basic 
program consists of lots of event procedures and possibly a (general) procedure. In Lesson 8, you'll learn about other kinds of 
procedures that a Visual Basic program may contain.

<BR>

<P>Although the default Value property for all option buttons is 0, meaning unselected, Visual Basic automatically selects an option button (the one with the lowest TabIndex property value) when 
loading the application. Therefore, lines 4 through 7 in 
Listing 12.1 set all four option button Value properties to 0 upon loading the form so that there is no option button set until the user selects one. (The four option buttons are named optFre, 
optIta, optPig, and optSpa.)

<BR>

<P>Lines 10 through 12 provide the familiar Exit command button event procedure that terminates the program when the user presses the Exit button.

<BR>

<P>Lines 14 through 32 complete the code with the four option 
button Click event procedures. The user triggers one of the four procedures by selecting one of the four option buttons. The shaded translation label at the bottom of the screen that will hold 
the translation is named lblTrans. The four option button 
Click event procedures change the Caption property of the lblTrans object to the appropriate translation that matches the option button's caption.

<BR>

<BR>

<A NAME="E68E93"></A>

<H3 ALIGN=CENTER>

<CENTER>

<FONT SIZE=5 COLOR="#FF0000"><B>Check Boxes 
Offer More Choices</B></FONT></CENTER></H3>

<BR>

<P><FONT COLOR="#FF8000"><B><I>Concept: </I></B></FONT>The check box control works a lot like the option button. You'll place several check boxes on a form; each check box represents a user-selected 
choice. Unlike option buttons, the user can select more 
than one check box item at a time.

<BR>

<P>Figure 12.4 contains the check box controls found in this book's CONTROLS.MAK application. If you load and run the program, the check boxes are the fourth 
set of controls on which you'll click. As you can see from Figure 12.4, when the user selects a 
check box, the check box is marked with an X, indicating a true selection. Two of the three check boxes are selected in Figure 12.4.

<BR>

<P><B> <A 
HREF="12vel04.gif">Figure 12.4. The check box controls allow for multiple selections.</A></B>

<BR>

<BLOCKQUOTE>

<BLOCKQUOTE>

<HR ALIGN=CENTER>

<BR>

<NOTE><B>Note: </B>Although the check box controls in Figure 12.4 don't contain access keystrokes, you 
can add access keystroke selection to check boxes just as you can for option button controls.</NOTE>

<BR>

<HR ALIGN=CENTER>

</BLOCKQUOTE></BLOCKQUOTE>

<P>Table 12.3 contains the property values available for check box controls. Most of the properties 
are equivalent to the option button properties.

<BR>

<BR>

<P ALIGN=CENTER>

<CENTER>

<FONT COLOR="#000080"><B>Table 12.3. The check box properties.</B></FONT></CENTER>

<BR>



<TABLE  BORDERCOLOR=#000040 BORDER=1 CELLSPACING=2 WIDTH="100%" 
CELLPADDING=2 >

<TR>

<TD VALIGN=top  BGCOLOR=#80FFFF ><FONT COLOR=#000080>

<I>Property</I>

</FONT>

<TD VALIGN=top  BGCOLOR=#80FFFF ><FONT COLOR=#000080>

<I>Description</I></FONT>

<TR>

<TD VALIGN=top  BGCOLOR=#80FFFF ><FONT COLOR=#000080>

Alignment


</FONT>

<TD VALIGN=top  BGCOLOR=#80FFFF ><FONT COLOR=#000080>

Either 0 for left justification (the default) or 1 for right justification of the check box's caption. If you choose to left justify, the check box appears to the left of the caption. If you 
choose to right justify, the check box appears to the right of 
the caption.</FONT>

<TR>

<TD VALIGN=top  BGCOLOR=#80FFFF ><FONT COLOR=#000080>

BackColor

</FONT>

<TD VALIGN=top  BGCOLOR=#80FFFF ><FONT COLOR=#000080>

The background color of the check 
box. This is a hexadecimal number representing one of thousands of possible Windows color values. You'll be able to select from a palette of colors displayed by Visual Basic when you're ready to set the BackColor property. 
The default background color is 
the same as the form's default background color.</FONT>

<TR>

<TD VALIGN=top  BGCOLOR=#80FFFF ><FONT COLOR=#000080>

Caption

</FONT>

<TD VALIGN=top  BGCOLOR=#80FFFF ><FONT COLOR=#000080>

The text that appears in a check box. If you precede any 
character in the text with an ampersand, &amp;, that character then acts as the check box's access key.</FONT>

<TR>

<TD VALIGN=top  BGCOLOR=#80FFFF ><FONT COLOR=#000080>

DragIcon

</FONT>

<TD VALIGN=top  BGCOLOR=#80FFFF ><FONT COLOR=#000080>

The icon 
that appears when the user drags the check box around on the form. (You'll only rarely allow the user too move a check box, so the Drag... property settings aren't usually relevant.)</FONT>

<TR>

<TD VALIGN=top  BGCOLOR=#80FFFF ><FONT COLOR=#000080>


DragMode

</FONT>

<TD VALIGN=top  BGCOLOR=#80FFFF ><FONT COLOR=#000080>

Either contains 1 for manual mouse dragging requirements (the user can press and hold the mouse button while dragging the control) or 0 (the default) for automatic mouse dragging, 
meaning that the user can't drag the check box but that you, through code, 
can initiate the dragging if needed.</FONT>

<TR>

<TD VALIGN=top  BGCOLOR=#80FFFF ><FONT COLOR=#000080>

Enabled

</FONT>

<TD VALIGN=top  BGCOLOR=#80FFFF ><FONT COLOR=#000080>


If set to True (the default), the check box can respond to events. Otherwise, Visual Basic halts event processing for that particular control.</FONT>

<TR>

<TD VALIGN=top  BGCOLOR=#80FFFF ><FONT COLOR=#000080>

FontBold

</FONT>

<TD VALIGN=top  
BGCOLOR=#80FFFF ><FONT COLOR=#000080>

True (the default) if the Caption is to display in boldfaced characters; False otherwise.</FONT>

<TR>

<TD VALIGN=top  BGCOLOR=#80FFFF ><FONT COLOR=#000080>

FontItalic

</FONT>

<TD VALIGN=top  BGCOLOR=#80FFFF 
><FONT COLOR=#000080>

True (the default) if the caption is to display in italicized characters; False otherwise.</FONT>

<TR>

<TD VALIGN=top  BGCOLOR=#80FFFF ><FONT COLOR=#000080>

FontName

</FONT>

<TD VALIGN=top  BGCOLOR=#80FFFF ><FONT COLOR=#000080>


The name of the check box caption's style. Typically, you'll use the name of a Windows TrueType font.</FONT>

<TR>

<TD VALIGN=top  BGCOLOR=#80FFFF ><FONT COLOR=#000080>

FontSize

</FONT>

<TD VALIGN=top  BGCOLOR=#80FFFF ><FONT COLOR=#000080>

The size, 
in points, of the font used for the command button's caption.</FONT>

<TR>

<TD VALIGN=top  BGCOLOR=#80FFFF ><FONT COLOR=#000080>

FontStrikethru

</FONT>

<TD VALIGN=top  BGCOLOR=#80FFFF ><FONT COLOR=#000080>

True (the default) if the caption is to 
display in strikethru letters (characters with a dash through each one); False otherwise.</FONT>

<TR>

<TD VALIGN=top  BGCOLOR=#80FFFF ><FONT COLOR=#000080>

FontUnderline

</FONT>

<TD VALIGN=top  BGCOLOR=#80FFFF ><FONT COLOR=#000080>

True (the default) 
if the caption is to display in underlined letters; False otherwise.</FONT>

<TR>

<TD VALIGN=top  BGCOLOR=#80FFFF ><FONT COLOR=#000080>

ForeColor

</FONT>

<TD VALIGN=top  BGCOLOR=#80FFFF ><FONT COLOR=#000080>

The hexadecimal color code of the caption 
text's color.</FONT>

<TR>

<TD VALIGN=top  BGCOLOR=#80FFFF ><FONT COLOR=#000080>

Height

</FONT>

<TD VALIGN=top  BGCOLOR=#80FFFF ><FONT COLOR=#000080>

The height, in twips, of the check box.</FONT>

<TR>

<TD VALIGN=top  BGCOLOR=#80FFFF ><FONT 
COLOR=#000080>

HelpContextID

</FONT>

<TD VALIGN=top  BGCOLOR=#80FFFF ><FONT COLOR=#000080>

If you add advanced, context-sensitive help to your application, the HelpContextID provides the identifying number for the help text.</FONT>

<TR>

<TD 
VALIGN=top  BGCOLOR=#80FFFF ><FONT COLOR=#000080>

Index

</FONT>

<TD VALIGN=top  BGCOLOR=#80FFFF ><FONT COLOR=#000080>

If the check box is part of a control array, the Index property provides the numeric subscript for each particular check box.</FONT>


<TR>

<TD VALIGN=top  BGCOLOR=#80FFFF ><FONT COLOR=#000080>

Left

</FONT>

<TD VALIGN=top  BGCOLOR=#80FFFF ><FONT COLOR=#000080>

The number of twips from the left edge of the Form window to the left edge of the check box.</FONT>

<TR>

<TD VALIGN=top  
BGCOLOR=#80FFFF ><FONT COLOR=#000080>

MousePointer

</FONT>

<TD VALIGN=top  BGCOLOR=#80FFFF ><FONT COLOR=#000080>

The shape that the mouse cursor changes to if the user moves the mouse cursor over the check box. The possible values are from 0 to 12 and 
represent a range of different shapes that the mouse cursor can take. (See Lesson 12.)</FONT>

<TR>

<TD VALIGN=top  BGCOLOR=#80FFFF ><FONT COLOR=#000080>

Name

</FONT>

<TD VALIGN=top  BGCOLOR=#80FFFF ><FONT COLOR=#000080>

The name of the control. By 
default, Visual Basic generates the names Check1, Check2, and so on as you add subsequent check boxes to the form.</FONT>

<TR>

<TD VALIGN=top  BGCOLOR=#80FFFF ><FONT COLOR=#000080>

TabIndex

</FONT>

<TD VALIGN=top  BGCOLOR=#80FFFF ><FONT COLOR=#000080>


The focus tab order begins at 0 and increments every time that you add a new control. You can change the focus order by changing the controls' TabIndex to other values. No two controls on the same form can have the same TabIndex value.</FONT>

<TR>

<TD 
VALIGN=top  BGCOLOR=#80FFFF ><FONT COLOR=#000080>

TabStop

</FONT>

<TD VALIGN=top  BGCOLOR=#80FFFF ><FONT COLOR=#000080>

If True, the user can press Tab to move the focus to this check box. If False, the check box can't receive the focus.</FONT>

<TR>


<TD VALIGN=top  BGCOLOR=#80FFFF ><FONT COLOR=#000080>

Tag

</FONT>

<TD VALIGN=top  BGCOLOR=#80FFFF ><FONT COLOR=#000080>

Unused by Visual Basic. This is for the programmer's use for an identifying comment applied to the check box.</FONT>

<TR>

<TD 
VALIGN=top  BGCOLOR=#80FFFF ><FONT COLOR=#000080>

Top

</FONT>

<TD VALIGN=top  BGCOLOR=#80FFFF ><FONT COLOR=#000080>

The number of twips from the top edge of a check box to the top of the form.</FONT>

<TR>

<TD VALIGN=top  BGCOLOR=#80FFFF ><FONT 
COLOR=#000080>

Value

</FONT>

<TD VALIGN=top  BGCOLOR=#80FFFF ><FONT COLOR=#000080>

Either 0-Unchecked (the default), 1-Checked, or 2-Grayed, indicating whether the check box is selected.</FONT>

<TR>

<TD VALIGN=top  BGCOLOR=#80FFFF ><FONT 
COLOR=#000080>

Visible

</FONT>

<TD VALIGN=top  BGCOLOR=#80FFFF ><FONT COLOR=#000080>

True or False, indicating whether the user can see (and, therefore, use) the check box.</FONT>

<TR>

<TD VALIGN=top  BGCOLOR=#80FFFF ><FONT COLOR=#000080>

Width


</FONT>

<TD VALIGN=top  BGCOLOR=#80FFFF ><FONT COLOR=#000080>

The number of twips wide that the check box consumes.</FONT>

</TABLE><P>Table 12.4 contains the events available for check box controls. As with option buttons, the Click event is generally 
the most commonly coded event procedure.

<BR>

<BR>

<P ALIGN=CENTER>

<CENTER>

<FONT COLOR="#000080"><B>Table 12.4. The check box's events.</B></FONT></CENTER>

<BR>



<TABLE  BORDERCOLOR=#000040 BORDER=1 CELLSPACING=2 WIDTH="100%" CELLPADDING=2 >


<TR>

<TD VALIGN=top  BGCOLOR=#80FFFF ><FONT COLOR=#000080>

<I>Event</I>

</FONT>

<TD VALIGN=top  BGCOLOR=#80FFFF ><FONT COLOR=#000080>

<I>Description</I></FONT>

<TR>

<TD VALIGN=top  BGCOLOR=#80FFFF ><FONT COLOR=#000080>

Click

</FONT>

<TD 
VALIGN=top  BGCOLOR=#80FFFF ><FONT COLOR=#000080>

Occurs when the user clicks the check box with the mouse</FONT>

<TR>

<TD VALIGN=top  BGCOLOR=#80FFFF ><FONT COLOR=#000080>

DragDrop

</FONT>

<TD VALIGN=top  BGCOLOR=#80FFFF ><FONT COLOR=#000080>


Occurs when a dragging operation over the check box completes</FONT>

<TR>

<TD VALIGN=top  BGCOLOR=#80FFFF ><FONT COLOR=#000080>

DragOver

</FONT>

<TD VALIGN=top  BGCOLOR=#80FFFF ><FONT COLOR=#000080>

Occurs during a drag operation</FONT>

<TR>

<TD 
VALIGN=top  BGCOLOR=#80FFFF ><FONT COLOR=#000080>

GotFocus

</FONT>

<TD VALIGN=top  BGCOLOR=#80FFFF ><FONT COLOR=#000080>

Occurs when the check box receives the focus</FONT>

<TR>

<TD VALIGN=top  BGCOLOR=#80FFFF ><FONT COLOR=#000080>

KeyDown

</FONT>


<TD VALIGN=top  BGCOLOR=#80FFFF ><FONT COLOR=#000080>

Occurs when the user presses a key as long as the KeyPreview property is set to True for the controls on the check box; otherwise, the control gets the KeyDown event</FONT>

<TR>

<TD VALIGN=top  
BGCOLOR=#80FFFF ><FONT COLOR=#000080>

KeyPress

</FONT>

<TD VALIGN=top  BGCOLOR=#80FFFF ><FONT COLOR=#000080>

Occurs when the user presses a key over the check box</FONT>

<TR>

<TD VALIGN=top  BGCOLOR=#80FFFF ><FONT COLOR=#000080>

KeyUp

</FONT>

<TD 
VALIGN=top  BGCOLOR=#80FFFF ><FONT COLOR=#000080>

Occurs when the user releases a key</FONT>

<TR>

<TD VALIGN=top  BGCOLOR=#80FFFF ><FONT COLOR=#000080>

LostFocus

</FONT>

<TD VALIGN=top  BGCOLOR=#80FFFF ><FONT COLOR=#000080>

Occurs when the check box 
loses the focus</FONT>

</TABLE><P><FONT COLOR="#FF8000"><B><I>Stop and Type: </I></B></FONT>Load and run this book's project named CHECK.MAK. Listing 12.2 contains the code for the project's event procedures. The program allows the user to choose from one 
to four special 
formatting options for the poem inside the boxed label. The poem can accept any or all four formatting options, so the check box controls enable the user to select one or more of the formatting options.

<BR>

<P><FONT 
COLOR="#FF8000"><B><I>Review: </I></B></FONT>The check box controls allow more than one selection from the user at a time, unlike the option button controls, which allow only a single option to be selected at a time.

<BR>

<P>

<FONT 
COLOR="#000080"><B>Listing 12.2. The code for the CHECK.MAK project.</B></FONT>

<BR>

<PRE>

<FONT COLOR="#000080">1: Sub Form_Load ()

2: ' Fill the label with a poem.

3: ' The poem will display initially

4: ' using the default label properties.

5: 
Dim Newline As String

6: ' The newline sends a carriage return and

7: ' line feed sequence to the poem so that

8: ' the poem can appear as a multiple-line

9: ' poem.

10: Newline = Chr$(13) + Chr$(10)

11: ' Fill the label with the poem

12: ' and 
concatenate the newline characters

13: lblPoem = &quot;Visual Basic is the best.&quot;

14: lblPoem = lblPoem &amp; Newline

15: lblPoem = lblPoem &amp; &quot;It's much better than the rest.&quot;

16: lblPoem = lblPoem &amp; Newline

17: lblPoem = 
lblPoem &amp; &quot;If you ever hear differently,&quot;

18: lblPoem = lblPoem &amp; Newline

19: lblPoem = lblPoem &amp; &quot;Give them major misery!&quot;

20: End Sub

21:

22: Sub chkBack_Click ()

23: ' Set the poem label's background to Red or white


24: If (lblPoem.BackColor = RED) Then

25: lblPoem.BackColor = WHITE ' Default

26: Else

27: lblPoem.BackColor = RED

28: End If

29: End Sub

30:

31: Sub chkFore_Click ()

32: ' Set the poem label's foreground to Green or Black

33: If 
(lblPoem.ForeColor = GREEN) Then

34: lblPoem.ForeColor = BLACK ' Default

35: Else

36: lblPoem.ForeColor = GREEN

37: End If

38: End Sub

39:

40: Sub chkItal_Click ()

41: ' Set the poem label's caption to italicize or not

42: If (lblPoem.FontItalic = 
True) Then

43: lblPoem.FontItalic = False ' Default

44: Else

45: lblPoem.FontItalic = True

46: End If

47: End Sub

48:

49: Sub chkUnd_Click ()

50: ' Set the poem label's caption to underline or not

51: If (lblPoem.FontUnderline = True) Then

52: 
lblPoem.FontUnderline = False ' Default

53: Else

54: lblPoem.FontUnderline = True

55: End If

56: End Sub

57:

58: Sub cmdExit_Click ()

59: End

60: End Sub</FONT></PRE>

<P>[ic:output]Figure 12.5 contains a figure that shows the poem when the user 
selects two of the check box options.

<BR>

<P><B> <A HREF="12vel05.gif">Figure 12.5. Selecting two check boxes at the same time.</A></B>

<BR>

<P><FONT COLOR="#FF8000"><B><I>Analysis: </I></B></FONT>Lines 1 through 20 contain the longest Form_Load() 
event procedure that you've seen in this book. The purpose of the procedure is to initialize the label control with the multiline poem. There is no 
MultiLine property for labels, so you have to trick Visual Basic into displaying multiple lines inside the 
label.

<BR>

<BLOCKQUOTE>

<BLOCKQUOTE>

<HR ALIGN=CENTER>

<BR>

<NOTE><I>Definition: </I>A <I>control character</I> produces an action, not a text character.</NOTE>

<BR>

<HR ALIGN=CENTER>

</BLOCKQUOTE></BLOCKQUOTE>

<P>The Chr$() function (called the 
<I>character string function</I> or, sometimes, the <I>character function</I>) accepts a number inside its parentheses. The number must come from the ASCII table (<A HREF="velxa.htm">Appendix A</A>). Visual Basic converts 
that number to its ASCII 
character equivalent. ASCII number 13 is the <I>carriage return</I> character and is a special control character that sends the cursor to the beginning of the line, which, in the case of a label, is the beginning column in the 
label. ASCII number 10 is 
the <I>line feed </I>character that sends the cursor to the next line on the screen. The effect of the concatenated ASCII value of 13 and 10 (line 10) is that a special double control character is created that, when displayed in a 
label, sends the cursor 
to the beginning of the label's next line.

<BR>

<BLOCKQUOTE>

<BLOCKQUOTE>

<HR ALIGN=CENTER>

<BR>

<NOTE><B>Note: </B>The poem label's Alignment property is set to 2-Center, so the lines inside the label always display as centered within the label's 
border.</NOTE>

<BR>

<HR ALIGN=CENTER>

</BLOCKQUOTE></BLOCKQUOTE>

<P>Lines 13 through 19 then build the multiline poem by concatenating one line and the newline combination string variable to the label's Caption property.

<BR>

<BLOCKQUOTE>


<BLOCKQUOTE>

<HR ALIGN=CENTER>

<BR>

<NOTE><B>Note: </B>But wait! Lines 13 through 19 don't even mention the Caption property! It appears that the poem's text is being sent to the label itself and not to any property. It turns out that each control has a 
default property that, unless you 
specify a different property name, acts as the default property. Therefore, Visual Basic assigns all of the poem's lines to the Caption property in lines 13 through 19 because the Caption property is the default property 
for labels.</NOTE>

<BR>

<HR ALIGN=CENTER>

</BLOCKQUOTE></BLOCKQUOTE>

<P>Lines 22 through 56 contain the four check box Click event procedures that set or reset each of the four poem properties described by the check box. The If-Else checks first to see 
whether the poem's property is set to the checked value. If so, the true 
part of the If sets the property back to its default state. If the property already contains the default value, the Else sets the property to the new state.

<BR>

<P>As always, the 
application contains an Exit command button event procedure in lines 58 through 60 that terminate the program at the user's request.

<BR>

<BR>

<A NAME="E68E94"></A>

<H3 ALIGN=CENTER>

<CENTER>

<FONT SIZE=5 COLOR="#FF0000"><B>Multiple Sets of Option 
Buttons</B></FONT></CENTER></H3>

<BR>

<P><FONT COLOR="#FF8000"><B><I>Concept: </I></B></FONT>Although the user can select only one option button from all the option buttons on the form, there is a way to place multiple sets of option buttons on a form 
inside frames. The user can select only 
one option button within any frame at a time.

<BR>

<P>Figure 12.6 shows where the frame control resides on the Toolbox window. The frame control is a holder of other controls. By placing more than one frame on a 
form, you can group more than one set of option buttons on the form together.

<BR>

<P><B> <A HREF="12vel06.gif">Figure 12.6. The location of the frame control.</A></B>

<BR>

<P>When you want to place several sets of options buttons on a form, be sure to 
place more than one frame on the form first. The frames must be large enough to hold as many option buttons as each group requires.

<BR>

<P>Be careful about placing option buttons when you want to frame them within frame controls. You must draw the 
option buttons <I>inside the frame</I>. You can't create the option buttons elsewhere and move them into the frame. For most applications, you 
can double-click controls to place them in the middle of the form, and then drag the controls to their final 
location and resize them. When placing option buttons inside frames, you must click (not double-click) the option button control on the Toolbox 
window and then draw the option button by clicking the mouse inside the frame and dragging the mouse until 
you've approximated the option button's size. When you release the mouse button, Visual Basic will draw the option button in the size you drew it.

<BR>

<P><FONT COLOR="#FF8000"><B><I>Stop and Type: </I></B></FONT>Load and run this book's project named 
OPTIONS.MAK. Listing 12.3 contains the code for the project's event procedures. The program is similar to the CHECK.MAK application that you saw in the 
previous section. Framed groups of option buttons turn selected poem formatting properties on or off.


<BR>

<P><FONT COLOR="#FF8000"><B><I>Review: </I></B></FONT>The frame enables you to group option button controls together. Be sure to place the frame before drawing option button controls inside the frame.

<BR>

<P>

<FONT COLOR="#000080"><B>Listing 
12.3. The code for the framed option buttons.</B></FONT>

<BR>

<PRE>

<FONT COLOR="#000080">1: Sub Form_Load ()

2: ' Fill the label with a poem.

3: ' The poem will display initially

4: ' using the default label properties.

5: Dim Newline As String

6: 
' The newline sends a carriage return and

7: ' line feed sequence to the poem so that

8: ' the poem can appear as a multiple-line

9: ' poem.

10: Newline = Chr$(13) + Chr$(10)

11: ' Fill the label with the poem

12: ' and concatenate the newline 
characters

13: lblPoem = &quot;Visual Basic is the best.&quot;

14: lblPoem = lblPoem &amp; Newline

15: lblPoem = lblPoem &amp; &quot;It's much better than the rest.&quot;

16: lblPoem = lblPoem &amp; Newline

17: lblPoem = lblPoem &amp; &quot;If you 
ever hear differently,&quot;

18: lblPoem = lblPoem &amp; Newline

19: lblPoem = lblPoem &amp; &quot;Give them major misery!&quot;

20: End Sub

21:

22: Sub optGreen_Click ()

23: lblPoem.BackColor = GREEN

24: End Sub

25:

26: Sub optItal_Click ()

27: 
lblPoem.FontItalic = True

28: End Sub

29:

30: Sub optNoItal_Click ()

31: lblPoem.FontItalic = False

32: End Sub

33:

34: Sub optNoUnd_Click ()

35: lblPoem.FontUnderline = False

36: End Sub

37:

38: Sub optRed_Click ()

39: lblPoem.BackColor = RED


40: End Sub

41:

42: Sub optUnd_Click ()

43: lblPoem.FontUnderline = True

44: End Sub

45:

46: Sub optWhite_Click ()

47: lblPoem.BackColor = WHITE

48: End Sub

49:

50: Sub cmdExit_Click ()

51: End

52: End Sub</FONT></PRE>

<P><FONT 
COLOR="#FF8000"><B><I>Output: </I></B></FONT>Figure 12.7 contains the OPTIONS.MAK application after the user selects an option in each of the three frames.

<BR>

<P><B> <A HREF="12vel07.gif">Figure 12.7. The framed option buttons allow for multiple 
settings.</A></B>

<BR>

<P><FONT COLOR="#FF8000"><B><I>Analysis: </I></B></FONT>The difficult part of framed option controls is placing the option buttons inside the frames, and even that's not extremely difficult. After you draw the option buttons and 
the frames, the usual event 
procedures that you've been writing work for the controls.

<BR>

<P>Lines 22 through 48 contain the Click event procedures that set the poem's label formatting properties.

<BR>

<BR>

<A NAME="E68E95"></A>

<H3 ALIGN=CENTER>


<CENTER>

<FONT SIZE=5 COLOR="#FF0000"><B>Control Arrays Simplify</B></FONT></CENTER></H3>

<BR>

<P><FONT COLOR="#FF8000"><B><I>Concept: </I></B></FONT>By putting one or more similar controls inside a control array, you gain the advantage of writing a 
single event procedure that can handle more than one control on the form.

<BR>

<BLOCKQUOTE>

<BLOCKQUOTE>

<HR ALIGN=CENTER>

<BR>

<NOTE><I>Definition: </I>A <I>control array</I> is a list of controls with the same name.</NOTE>

<BR>

<HR ALIGN=CENTER>


</BLOCKQUOTE></BLOCKQUOTE>

<P>When you place more than one control of the same control type on a form and assign the same Name property to those controls, you're creating a control array. As with variable arrays, a subscript that begins at 0 
differentiates one control from another. 
The Index property of each control in the array contains that control's subscript location in the array. If you want to renumber the controls in the array to begin at 1, you can do so by changing the first 
zero-based control's Index value to 1.

<BR>

<BLOCKQUOTE>

<BLOCKQUOTE>

<HR ALIGN=CENTER>

<BR>

<NOTE><B>Note: </B>Each control in a control array must be the same data type.</NOTE>

<BR>

<HR ALIGN=CENTER>

</BLOCKQUOTE></BLOCKQUOTE>

<P>If there were 
five text boxes in a control array named txtBoxes, each individual control would be named txtBoxes(0), txtBoxes(1), txtBoxes(2), txtBoxes(3), and txtBoxes(4).

<BR>

<BLOCKQUOTE>

<BLOCKQUOTE>

<HR ALIGN=CENTER>

<BR>

<NOTE>[ic: Note]As soon as you place 
a control on the form that has the same name as an existing control, Visual Basic makes sure that you want to begin a control array by issuing the warning message box shown in Figure 12.8. The designers of Visual Basic 
knew that you may accidentally 
attempt to place two controls on the same form with the same name, and the message box makes sure of your intent to create a control array. If you select the No command button to the warning message box, Visual Basic returns 
the second control to a its 
default name.</NOTE>

<BR>

<HR ALIGN=CENTER>

</BLOCKQUOTE></BLOCKQUOTE>

<P><B> <A HREF="12vel08.gif">Figure 12.8. Visual Basic ensures that you want a control array.</A></B>

<BR>

<P><FONT COLOR="#FF8000"><B><I>Stop and Type: </I></B></FONT>Load and 
run this book's project named CHECK2.MAK. Listing 12.4 contains the code for the project's chkAll_Click() event procedure. The program is similar to the CHECK.MAK application that you 
saw in the previous section, except that, instead of four separate 
check box event procedures, CHECK2.MAK contains a single check box control array named chkAll.

<BR>

<P><FONT COLOR="#FF8000"><B><I>Review: </I></B></FONT>By placing several controls in a control array, you can reference each control by its subscript 
rather than by a different name for each control. Rather than write several event procedures, you need to 
write only a single event procedure.

<BR>

<P>

<FONT COLOR="#000080"><B>Listing 12.4. The code for control array's event procedure.</B></FONT>


<BR>

<PRE>

<FONT COLOR="#000080">1: Sub chkAll_Click (Index As Integer)

2: ' A single Select Case

3: ' handles all check box formats

4: Select Case Index

5: Case 0:

6: ' Set the poem label's background to Red or white

7: If (lblPoem.BackColor = 
RED) Then

8: lblPoem.BackColor = WHITE ' Default

9: Else

10: lblPoem.BackColor = RED

11: End If

12: Case 1:

13: ' Set the poem label's foreground to Green or Black

14: If (lblPoem.ForeColor = GREEN) Then

15: lblPoem.ForeColor = BLACK ' Default

16: 
Else

17: lblPoem.ForeColor = GREEN

18: End If

19: Case 2:

20: ' Set the poem label's caption to italicize or not

21: If (lblPoem.FontItalic = True) Then

22: lblPoem.FontItalic = False ' Default

23: Else

24: lblPoem.FontItalic = True

25: End If


26: Case 3:

27: ' Set the poem label's caption to underline or not

28: If (lblPoem.FontUnderline = True) Then

29: lblPoem.FontUnderline = False ' Default

30: Else

31: lblPoem.FontUnderline = True

32: End If

33: End Select

34: End Sub</FONT></PRE>


<P><FONT COLOR="#FF8000"><B><I>Analysis: </I></B></FONT>The single Select Case statement handles all four check boxes. There is only one single check box Click() procedure in the entire application even though there are four check boxes. Each check box is 

named chkAll, so they all a control array of check boxes and there will be only one event procedure for each event that the programmer wants to program.

<BR>

<P>Therefore, whenever the user clicks <I>any</I> of the check boxes, the chkAll_Click() event 
procedure executes. How does the procedure know <I>which</I> check box triggered the event? Line 1, the event procedure's first line, gives you a good clue. 
Visual Basic sends the Index value of the check box that the user clicked to the event procedure. 
The parentheses is a mechanism that Visual Basic uses to collect values such as the index to the control array that triggered the event. You'll understand 
such parenthetical values in Lesson 8, but until then, be assured that after the chkAll_Click() 
procedure executes, an Index variable will contain the subscript of the check box in the control array that the user selected.

<BR>

<P>The Select Case is a consolidation of Listing 12.2's multiple check box Click() event procedures. As you can see, the 
control array saves time and memory because a single event procedure can now handle all the events in the control array.

<BR>

<BR>

<A NAME="E68E96"></A>

<H3 ALIGN=CENTER>

<CENTER>

<FONT SIZE=5 COLOR="#FF0000"><B>Homework</B></FONT></CENTER></H3>


<BR>

<BR>

<A NAME="E69E81"></A>

<H4 ALIGN=CENTER>

<CENTER>

<FONT SIZE=4 COLOR="#FF0000"><B>General Knowledge</B></FONT></CENTER></H4>

<BR>

<OL>

<LI>Which control offers a single choice from a multiple set of choices?

<BR>

<BR>

<LI>Which control 
is best for allowing the user to select from one or more options?

<BR>

<BR>

<LI>Why are option buttons sometimes called <I>radio buttons</I>?

<BR>

<BR>

<LI>What happens if the user selects an option button that's different from the option button 
currently selected?

<BR>

<BR>

<LI>True or false: You can write code ensuring that no option button is selected when the program first executes.

<BR>

<BR>

<LI>What does the Alignment property do for option buttons and check boxes?

<BR>

<BR>


<LI>What property determines whether an option button is selected?

<BR>

<BR>

<LI>What property determines whether a check box is selected?

<BR>

<BR>

<LI>True or false: One or more Value properties can be set for option buttons on a form (assume that 
the option buttons aren't placed in frames).

<BR>

<BR>

<LI>True or false: One or more Value properties can be set for option buttons on a form (assume that the option buttons are placed in frames).

<BR>

<BR>

<LI>What is a frame?

<BR>

<BR>

<LI>True 
or false: You can place one frame at the most on a form at any one time.

<BR>

<BR>

<LI>What is a <I>control character?</I>

<BR>

<BR>

<LI>Describe how to initialize a label control with multiline text.

<BR>

<BR>

<LI>What does the Chr$() function 
do?

<BR>

<BR>

<LI>What is a <I>control array</I>?

<BR>

<BR>

<LI>If a control array contains seven controls, how many names do the controls have?

<BR>

<BR>

<LI>How do you distinguish between values in a control array?

<BR>

<BR>

<LI>What is the 
default starting subscript for control arrays?

<BR>

<BR>

<LI>How many event procedures do you have to write for a control array that contains eight controls?

<BR>

<BR>

<LI>What property holds a control array's subscript number?

<BR>

<BR>

<LI>How 
does Visual Basic make sure that you want to create a control array?

<BR>

<BR>

</OL>

<BR>

<A NAME="E69E82"></A>

<H4 ALIGN=CENTER>

<CENTER>

<FONT SIZE=4 COLOR="#FF0000"><B>Write Code That...</B></FONT></CENTER></H4>

<BR>

<OL>

<LI>Write the 
opening line of an DblClick event procedure for a command button control array named cmdAll.

<BR>

<BR>

</OL>

<P><B>Find the Bug</B>

<OL>

<LI>Opal is trying her hand at frames and option buttons. First, Opal places three frames on her form. Then, Opal 
double-clicks the option button control on the Toolbox window nine times and moves each control to its appropriate frame. Opal doesn't seem to 
be able to select more than one option button at a time on the entire form, even though the three sets of option 
buttons appear on different frames. What is Opal doing wrong?

<BR>

<BR>

</OL>

<BR>

<A NAME="E69E83"></A>

<H4 ALIGN=CENTER>

<CENTER>

<FONT SIZE=4 COLOR="#FF0000"><B>Extra Credit</B></FONT></CENTER></H4>

<BR>

<OL>

<LI>What character does the 
following assignment statement place in the string variable named MyGrade?

<BR>MyGrade = Chr$(65)

<BR>

<BR>

</OL>

<P>Create a form that contains ten option buttons, two sets of five in two frames. Put the ten option buttons inside two control arrays. 
Label each option button One, Two, Three, Four, and Five. Write two Click event procedures, one for each option button 
control array, that beep the PC's speaker once for whatever option buttons are selected at that time. In other words, if the user clicks 
the left frame's Three option button, and the right frame already has the value Two selected, you'll click the speaker 
five times.

<P ALIGN=LEFT>

<A HREF="vel11.htm" TARGET="_self"><IMG SRC="purprev.gif" WIDTH = 32 HEIGHT = 32 BORDER = 0 ALT="Previous 
Page"></A>

<A HREF="#I0" TARGET="_self"><IMG SRC="purtop.gif" WIDTH = 32 HEIGHT = 32 BORDER = 0 ALT="Page Top"></A>

<A HREF="index.htm" TARGET="_self"><IMG SRC="purtoc.gif" WIDTH = 32 HEIGHT = 32 BORDER = 0 ALT="TOC"></A>

<A HREF="velp06.htm" 
TARGET="_self"><IMG SRC="purnext.gif" WIDTH = 32 HEIGHT = 32 BORDER = 0 ALT="Next Page"></A>


</BODY></HTML>







