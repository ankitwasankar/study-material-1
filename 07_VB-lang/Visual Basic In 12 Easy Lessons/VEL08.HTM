<HTML>

<HEAD>

<TITLE>Visual Basic in 12 Easy Lessons vel08.htm </TITLE>

<LINK REL="ToC" HREF="index.htm">

<LINK REL="Index" HREF="htindex.htm">

<LINK REL="Next" HREF="velp04.htm">

<LINK REL="Previous" HREF="vel07.htm"></HEAD>

<BODY BGCOLOR="#FFFFFF" 
TEXT="#000000" LINK="#0000FF" VLINK="#800080">

<A NAME="I0"></A>

<H2>Visual Basic in 12 Easy Lessons vel08.htm</H2>

<P ALIGN=LEFT>

<A HREF="vel07.htm" TARGET="_self"><IMG SRC="purprev.gif" WIDTH = 32 HEIGHT = 32 BORDER = 0 ALT="Previous Page"></A>

<A 
HREF="index.htm" TARGET="_self"><IMG SRC="purtoc.gif" WIDTH = 32 HEIGHT = 32 BORDER = 0 ALT="TOC"></A>

<A HREF="velp04.htm" TARGET="_self"><IMG SRC="purnext.gif" WIDTH = 32 HEIGHT = 32 BORDER = 0 ALT="Next Page"></A>


<HR ALIGN=CENTER>

<P>

<UL>

<UL>

<UL>

<LI>

<A HREF="#E68E61" >What You'll Learn</A>

<LI>

<A HREF="#E68E62" >The Relational Operators</A>

<LI>

<A 
HREF="#E68E63" >The If Makes Decisions</A>

<LI>

<A HREF="#E68E64" >Handling False Conditions</A>

<LI>

<A HREF="#E68E65" >Logical Operators</A>

<LI>

<A HREF="#E68E66" >Multiple Choice with Select Case</A>

<LI>

<A HREF="#E68E67" >Two Additional 
Select Case Formats</A>

<LI>

<A HREF="#E68E68" >Homework</A>

<UL>

<LI>

<A HREF="#E69E55" >General Knowledge</A>

<LI>

<A HREF="#E69E56" >Write Code That...</A>

<LI>

<A HREF="#E69E57" >Find the Bug</A>

<LI>

<A HREF="#E69E58" >Extra 
Credit</A></UL></UL></UL></UL>

<HR ALIGN=CENTER>

<A NAME="E66E11"></A>

<H1 ALIGN=CENTER>

<CENTER>

<FONT SIZE=6 COLOR="#FF0000"><B>Lesson 4, Unit 8</B></FONT></CENTER></H1>

<BR>

<A NAME="E67E14"></A>

<H2 ALIGN=CENTER>

<CENTER>

<FONT SIZE=6 
COLOR="#FF0000"><B>Data Comparisons</B></FONT></CENTER></H2>

<BR>

<BR>

<A NAME="E68E61"></A>

<H3 ALIGN=CENTER>

<CENTER>

<FONT SIZE=5 COLOR="#FF0000"><B>What You'll Learn</B></FONT></CENTER></H3>

<BR>

<UL>

<LI> [lb] Relational operators

<BR>

<BR>


<LI> [lb] If statements

<BR>

<BR>

<LI> [lb] Handling false conditions

<BR>

<BR>

<LI> [lb] Logical operators

<BR>

<BR>

<LI> [lb] Multiple choice with Select Case

<BR>

<BR>

<LI> [lb] Two additional Select Case formats

<BR>

<BR>

</UL>


<P>Computers cannot think on their own, but with your help they can be taught to make decisions based on values contained in controls and variables. Visual Basic&#146;s decision-making capability enables it to calculate sales figures based on certain 

conditions, to print exception reports, and to check user responses by means of the form&#146;s controls.

<BR>

<P>You have learned only a few statements so far:

<BR>

<UL>

<LI> [lb] The End statement, which terminates programs

<BR>

<BR>

<LI> [lb] 
The Dim statement, which defines program variables

<BR>

<BR>

<LI> [lb] The assignment statement, which stores data values in controls and variables.

<BR>

<BR>

</UL>

<P>In addition, you know about the fundamental math operators. In this unit, you 
will learn some new programming statements and operators that you can use along with the ones you already know to write programs that make data-based decisions.

<BR>

<BR>

<A NAME="E68E62"></A>

<H3 ALIGN=CENTER>

<CENTER>

<FONT SIZE=5 
COLOR="#FF0000"><B>The Relational Operators</B></FONT></CENTER></H3>

<BR>

<P><FONT COLOR="#FF8000"><B><I>Concept: </I></B></FONT>Visual Basic supports the use of six operators that produce true or false results based on data values. Once you learn the 
relational operators, you can combine them operators with the If statement to 
add power to your programs.

<BR>

<BLOCKQUOTE>

<BLOCKQUOTE>

<HR ALIGN=CENTER>

<BR>

<NOTE><I>Definition: Relational operators</I> compare data values to one another.</NOTE>


<BR>

<HR ALIGN=CENTER>

</BLOCKQUOTE></BLOCKQUOTE>

<P>Table 8.1 describes the six relational operators that Visual Basic supports. You use the relational operators to compare data values. They are easy to use. If you take any two numbers, one number is 
always be greater than, equal to, or less than the 
other.

<BR>

<BLOCKQUOTE>

<BLOCKQUOTE>

<HR ALIGN=CENTER>

<BR>

<NOTE><B>Note: </B>The mathematical operators that you learned in the previous unit produced numeric answers. The relational operators 
produce only true and false answers. In other words, one data value is either more than another&#151;a true 
result&#151;or the data value is <I>not</I> more than the other&#151;a false result.</NOTE>

<BR>

<HR ALIGN=CENTER>

</BLOCKQUOTE></BLOCKQUOTE>


<BR>

<P ALIGN=CENTER>

<CENTER>

<FONT COLOR="#000080"><B>Table 8.1. The relational operators.</B></FONT></CENTER>

<BR>



<TABLE  BORDERCOLOR=#000040 BORDER=1 CELLSPACING=2 WIDTH="100%" CELLPADDING=2 >

<TR>

<TD VALIGN=top  BGCOLOR=#80FFFF ><FONT 
COLOR=#000080>

<I>Operator</I>

</FONT>

<TD VALIGN=top  BGCOLOR=#80FFFF ><FONT COLOR=#000080>

<I>Usage</I>

</FONT>

<TD VALIGN=top  BGCOLOR=#80FFFF ><FONT COLOR=#000080>

<I>Description</I></FONT>

<TR>

<TD VALIGN=top  BGCOLOR=#80FFFF ><FONT 
COLOR=#000080>

&gt;

</FONT>

<TD VALIGN=top  BGCOLOR=#80FFFF ><FONT COLOR=#000080>

Sales &gt; Goal

</FONT>

<TD VALIGN=top  BGCOLOR=#80FFFF ><FONT COLOR=#000080>

The <I>greater than</I> operator. Returns true if the value on the left side of &gt; is 
numerically or alphabetically greater than the value on the right. Otherwise, false.</FONT>

<TR>

<TD VALIGN=top  BGCOLOR=#80FFFF ><FONT COLOR=#000080>

&lt;

</FONT>

<TD VALIGN=top  BGCOLOR=#80FFFF ><FONT COLOR=#000080>

Pay &lt; 2000.00

</FONT>

<TD 
VALIGN=top  BGCOLOR=#80FFFF ><FONT COLOR=#000080>

The <I>less than</I> operator. Returns true if the value on the left side of &lt; is numerically or alphabetically less than the value on the right. Otherwise, false.</FONT>

<TR>

<TD VALIGN=top  
BGCOLOR=#80FFFF ><FONT COLOR=#000080>

=

</FONT>

<TD VALIGN=top  BGCOLOR=#80FFFF ><FONT COLOR=#000080>

Age = Limit

</FONT>

<TD VALIGN=top  BGCOLOR=#80FFFF ><FONT COLOR=#000080>

The <I>equal to</I> operator (sometimes called the <I>equal</I> 
operator). Returns true if the values on both sides of = are equal to each other. Otherwise, false.</FONT>

<TR>

<TD VALIGN=top  BGCOLOR=#80FFFF ><FONT COLOR=#000080>

&gt;=

</FONT>

<TD VALIGN=top  BGCOLOR=#80FFFF ><FONT COLOR=#000080>

FirstName &gt;= 
&quot;Mike&quot;

</FONT>

<TD VALIGN=top  BGCOLOR=#80FFFF ><FONT COLOR=#000080>

The <I>greater than or equal to</I> operator. Returns true if the value on the left side of &gt;= is numerically or alphabetically greater than or equal to the value on the 
right. Otherwise, false.</FONT>

<TR>

<TD VALIGN=top  BGCOLOR=#80FFFF ><FONT COLOR=#000080>

&lt;=

</FONT>

<TD VALIGN=top  BGCOLOR=#80FFFF ><FONT COLOR=#000080>

Num &lt;= lblAmt.Caption

</FONT>

<TD VALIGN=top  BGCOLOR=#80FFFF ><FONT COLOR=#000080>


The <I>less than or equal to</I> operator. Returns true if the value on the left side of &lt;= is numerically or alphabetically less than or equal to the value on the right. Otherwise, false.</FONT>

<TR>

<TD VALIGN=top  BGCOLOR=#80FFFF ><FONT 
COLOR=#000080>

&lt;&gt;

</FONT>

<TD VALIGN=top  BGCOLOR=#80FFFF ><FONT COLOR=#000080>

txtAns.Text &lt;&gt; &quot;Yes&quot;

</FONT>

<TD VALIGN=top  BGCOLOR=#80FFFF ><FONT COLOR=#000080>

The <I>not equal to</I> operator. Returns true if the value on 
the left side of &lt;&gt; is numerically or alphabetically unequal to the value on the right. Otherwise, false.</FONT>

</TABLE><BLOCKQUOTE>

<BLOCKQUOTE>

<HR ALIGN=CENTER>

<BR>

<NOTE><I>Definition: </I>The <I>ASCII table</I> is a list of characters 
with corresponding numeric representations.</NOTE>

<BR>

<HR ALIGN=CENTER>

</BLOCKQUOTE></BLOCKQUOTE>

<P>All the relational operators work on both numeric and alphabetic values. You can compare any kind of number against another number, or any kind of 
string against another string. When you compare strings, Visual Basic uses the ASCII table, included in <A 
HREF="velxa.htm">Appendix A</A>, to determine how to compare the characters. For example, the ASCII table says that the uppercase letter 
<I>A</I>&#151;whose ASCII numeric value is 65&#151;is less than the uppercase letter <I>B</I>&#151;whose ASCII numeric 
value is 66. Notice that all uppercase letters are less than lowercase letters. Therefore, the abbreviation <I>ST</I> is less than 
<I>St</I>.

<BR>

<BLOCKQUOTE>

<BLOCKQUOTE>

<HR ALIGN=CENTER>

<BR>

<NOTE><B>Tip: </B>Pronounce <I>ASCII</I> as <I>ask-ee</I>.</NOTE>

<BR>

<HR ALIGN=CENTER>

</BLOCKQUOTE></BLOCKQUOTE>

<P>To understand how relational operators work, you must 
understand how to use their true or false results. The If statement, introduced in the next section, explains how you can take use true and false results to make decisions in your program. Before you 
read the next section, make sure that you understand 
how these operators compare values. For a quick self-test, make sure that you understand the <I>Result</I> column of Table 8.2 before you go any further.

<BR>

<BR>

<P ALIGN=CENTER>

<CENTER>

<FONT COLOR="#000080"><B>Table 8.2. Relational 
results.</B></FONT></CENTER>

<BR>



<TABLE  BORDERCOLOR=#000040 BORDER=1 CELLSPACING=2 WIDTH="100%" CELLPADDING=2 >

<TR>

<TD VALIGN=top  BGCOLOR=#80FFFF ><FONT COLOR=#000080>

<I>Relation</I>

</FONT>

<TD VALIGN=top  BGCOLOR=#80FFFF ><FONT 
COLOR=#000080>

<I>Result</I></FONT>

<TR>

<TD VALIGN=top  BGCOLOR=#80FFFF ><FONT COLOR=#000080>

10 &gt; 5

</FONT>

<TD VALIGN=top  BGCOLOR=#80FFFF ><FONT COLOR=#000080>

True</FONT>

<TR>

<TD VALIGN=top  BGCOLOR=#80FFFF ><FONT COLOR=#000080>

5 &gt; 
10

</FONT>

<TD VALIGN=top  BGCOLOR=#80FFFF ><FONT COLOR=#000080>

False</FONT>

<TR>

<TD VALIGN=top  BGCOLOR=#80FFFF ><FONT COLOR=#000080>

5 &lt; 10

</FONT>

<TD VALIGN=top  BGCOLOR=#80FFFF ><FONT COLOR=#000080>

True</FONT>

<TR>

<TD VALIGN=top  
BGCOLOR=#80FFFF ><FONT COLOR=#000080>

&quot;Apple&quot; &lt;= &quot;Orange&quot;

</FONT>

<TD VALIGN=top  BGCOLOR=#80FFFF ><FONT COLOR=#000080>

True</FONT>

<TR>

<TD VALIGN=top  BGCOLOR=#80FFFF ><FONT COLOR=#000080>

&quot;Mac Donald&quot; &lt; 
&quot;Mc Donald&quot;

</FONT>

<TD VALIGN=top  BGCOLOR=#80FFFF ><FONT COLOR=#000080>

True</FONT>

<TR>

<TD VALIGN=top  BGCOLOR=#80FFFF ><FONT COLOR=#000080>

0 &gt;= 0

</FONT>

<TD VALIGN=top  BGCOLOR=#80FFFF ><FONT COLOR=#000080>

True</FONT>

<TR>


<TD VALIGN=top  BGCOLOR=#80FFFF ><FONT COLOR=#000080>

0 &lt;= 0

</FONT>

<TD VALIGN=top  BGCOLOR=#80FFFF ><FONT COLOR=#000080>

True</FONT>

<TR>

<TD VALIGN=top  BGCOLOR=#80FFFF ><FONT COLOR=#000080>

1 &lt;&gt; 2

</FONT>

<TD VALIGN=top  
BGCOLOR=#80FFFF ><FONT COLOR=#000080>

True</FONT>

<TR>

<TD VALIGN=top  BGCOLOR=#80FFFF ><FONT COLOR=#000080>

2 &gt;= 3

</FONT>

<TD VALIGN=top  BGCOLOR=#80FFFF ><FONT COLOR=#000080>

False</FONT>

</TABLE><BLOCKQUOTE>

<BLOCKQUOTE>

<HR ALIGN=CENTER>


<BR>

<NOTE>Keep Each Side a Consistent Data Type: The expressions on both sides of a relational operator must have the same data type or at least compatible data types. In other words, you cannot compare a string to a numeric data type. If you try, you 
will get 
a Type mismatch error because the data types don't match.

<BR>You can compare any numeric data type against any other numeric data type most of the time. In other words, you can test whether a single-precision value is less than or greater than 
an integer value. Be careful, however, when you compare non-integer 
numeric data for equality. Precision numbers are difficult to represent internally. For example, if you assigned 8.3221 to a single-precision variable and assigned 8.3221 to another 
single-precision variable, Visual Basic might return a false result if you 
compare the values for equality. Internally, one of the variables might actually hold 8.322100001 because of rounding errors that occur in normally insignificant decimal places. 
You can safely compare two currency values for equality, however, because 
Visual Basic maintains their accuracy to two decimal places.</NOTE>

<BR>

<HR ALIGN=CENTER>

</BLOCKQUOTE></BLOCKQUOTE>

<BLOCKQUOTE>

<BLOCKQUOTE>

<HR ALIGN=CENTER>

<BR>


<NOTE><B>Note: </B>The relational operators are sometimes called the <I>conditional operators</I> because they test conditions that are either true or false.</NOTE>

<BR>

<HR ALIGN=CENTER>

</BLOCKQUOTE></BLOCKQUOTE>

<P><FONT 
COLOR="#FF8000"><B><I>Review: </I></B></FONT>The relational operators compare values against one another. You can compare for equality, inequality, and size differences. The relational operators work for both string data and numeric data. By 
themselves, 
the relational operators would not be worth much. However, you can use them to compare data by using the If statement, which you learn about in the next section.

<BR>

<BR>

<A NAME="E68E63"></A>

<H3 ALIGN=CENTER>

<CENTER>

<FONT SIZE=5 
COLOR="#FF0000"><B>The </B><FONT COLOR="#FF8000"><B><I>If</I></B></FONT><B> Makes Decisions</B></FONT></CENTER></H3>

<BR>

<P><FONT COLOR="#FF8000"><B><I>Concept: </I></B></FONT>The If statement uses the relational operators to test data values. It 
perform one of two possible code actions, depending on the result of the test. In the previous unit, you saw how Visual Basic 
executes the Dim and assignment statements in the order in which you type them in the program. With If statements, Visual Basic 
tests whether to execute blocks of code. In other words, an If statement uses the relational operators to test data and 
<I>might</I> execute one or more lines of subsequent code, depending on the results of the test.

<BR>

<P>The If statement makes 
decisions. If a relational test is true, the body of the If statement executes. In fact, the previous sentence is almost identical to Visual Basic's If statement. Here is one format of If:

<BR>

<PRE>

<FONT COLOR="#000080">If relationalTest Then

 One or 
more Visual Basic statements

End If</FONT></PRE>

<P>The End If statement informs Visual Basic where the body of the If statement ends. Suppose that the user enters a sales figure into a text box control named txtSales. The following If statement computes 
a bonus amount based on the sales:

<BR>

<PRE>

<FONT COLOR="#000080">If (txtSales.Text &gt; 5000.00) Then

 Bonus = Val(txtSales.Text) * .12

End If</FONT></PRE>

<P>Remember that Visual Basic stores zero in all variables that you don't first initialize. 
Therefore, Bonus has a zero before the If statement executes. Once the If executes, the code changes the Bonus variable only if the value of the txtSales.Text 
property is more than 5000.00. The Val() function converts the text box's variant data to a 
numeric value for the computation. In a way, the If reads like this:

<BR>

<P><I>If the sales are more than $5,000.00, then compute a bonus based on that sales value.</I>

<BR>

<P>The body of an If can have more than one statement. The following If 
calculates a bonus, the cost of sales, and a reorder amount based on the value of the txtSales text box entry:

<BR>

<PRE>

<FONT COLOR="#000080">If (txtSales.Text &gt; 5000.00) Then

 Bonus = Val(txtSales.Text) * .12

 CostOfSales = Val(txtSales.Text) * 
.41

 ReorderCost = Val(txtSales.Text) * .24

End If</FONT></PRE>

<P>The three statements that make up the body of the If execute only if the condition txtSales.Text &gt; 5000.00 is true. Suppose that this code contains another assignment statement 
immediately after End If. That assignment statement is outside the body 
of the If,so the true or false result of the condition affects only the body of the If. Therefore, the tax computation in the following routine executes regardless of whether the 
sales are more than or less than $5,000.00:

<BR>

<PRE>

<FONT COLOR="#000080">If (txtSales.Text &gt; 5000.00) Then

 Bonus = Val(txtSales.Text) * .12

 CostOfSales = Val(txtSales.Text) * .41

 ReorderCost = Val(txtSales.Text) * .24

End If

Tax = .12 * 
Val(txtSales.Text)</FONT></PRE>

<BLOCKQUOTE>

<BLOCKQUOTE>

<HR ALIGN=CENTER>

<BR>

<NOTE><B>Tip: </B>The parentheses are not required around the relational test in an If statement, but they help separate the test from the rest of the code.</NOTE>

<BR>


<HR ALIGN=CENTER>

</BLOCKQUOTE></BLOCKQUOTE>

<P>Can you see how the program makes decisions using If? The body of the If executes only if the relational test is true. Otherwise, the rest of the program continues as usual.

<BR>

<P>There is a shortcut 
form of If that you might run across. The <I>single-line </I><I>If</I><I> statement </I>has a format that looks like this:

<BR>

<BR>

<PRE>

<FONT COLOR="#000080">If relationalTest Then VBStatement</FONT></PRE>

<P>The single-line If does not require an 
End If statement because relational test and the body of the If reside on the same line. Single-line If statements do not provide for easy program maintenance. If you decide that you want to add to the body of the 
If, you must convert the single-line If 
to a multiple-line If,and you might forget to then add End If. Therefore, even if the body of an If statement takes only one line, code the If as a multiple-line If-End If statement.

<BR>

<P><FONT COLOR="#FF8000"><B><I>Review: </I></B></FONT>The If 
statement determines whether code executes. The If checks the true or false condition of the relational test. If the data relationally tests true, Visual Basic executes the body of the If. If the 
data relationally tests false, Visual Basic skips over the 
body of the If statement. No matter what happens, the code that follows the End If statement executes as usual.

<BR>

<BR>

<A NAME="E68E64"></A>

<H3 ALIGN=CENTER>

<CENTER>

<FONT SIZE=5 COLOR="#FF0000"><B>Handling False 
Conditions</B></FONT></CENTER></H3>

<BR>

<P><FONT COLOR="#FF8000"><B><I>Concept: </I></B></FONT>Whereas If executes code based on the relational test's true condition, the Else statement executes code based on the relational test's false condition. Else 
is actually part of the If statement. This 
section explains the full If-Else statement. It shows you how you can execute one section of code or another, depending on the relational test.

<BR>

<P>The Else statement, part of an extended If statement, 
specifies the code that executes if the relational test is false. Here is the complete format of the If statement with Else:

<BR>

<PRE>

<FONT COLOR="#000080">If relationalTest Then

 One or more Visual Basic statements

Else

 One or more Visual Basic 
statements

End If</FONT></PRE>

<P>Typically, programmers call this full-blown If statement the If-Else statement. The If-Else statement is sometimes called a <I>mutually exclusive</I> statement. The term <I>mutually exclusive</I> simply means that one 
set or of code or the other 
executes, but not both. The If-Else statement contains two sets of code&#151;that is, two bodies of one or more Visual Basic statements&#151;and only one set executes, depending on the result of the If. An If statement is 
either true or false. Therefore, 
either the first or the second body of code in an If-Else executes.

<BR>

<P><FONT COLOR="#FF8000"><B><I>Stop &amp; Type:</I></B></FONT> Suppose that a salesman receives a bonus if sales are high (over $5,000.00) or 
suffers a pay cut if sales are low (below $5,000.00). The If-Else in Listing 8.1 contains the code necessary to 
reward or punish the salesman. The code body of the If computes the bonus as done in the previous section. The code body of the Else subtracts 
$25 from the saleman&#146;s pay, which is stored in the variable named PayAmt, if the sales quota is not met.

<BR>

<P>Listing 8.1 contains a <I>code fragment</I>&#151;sometimes called a <I>code snippet</I>&#151;because the listing does not show variable 
definitions or any previous code that initialized PayAmt with the salesman&#146;s pay. Listing 8.1 contains only the 
If-Else code needed to reward or punish the salesman&#146;s effort.

<BR>

<P><FONT COLOR="#FF8000"><B><I>Review: </I></B></FONT>The If 
handles the true result of a conditional test and the Else handles the false result. By using an If-Else, you can increase the power of Visual Basic&#146;s data-testing and decision-making 
capabilities.

<BR>

<P>

<FONT COLOR="#000080"><B>Listing 8.1. 
Determining a sales bonus or penalty.</B></FONT>

<BR>

<PRE>

<FONT COLOR="#000080">1: If (Val(txtSales.Text) &gt; 5000.00) Then

2: Bonus = .05 * Val(txtSales.Text)

3: Else

4: PayAmt = PayAmt - 25.00

5: End If

6: Taxes = PayAmt * .42</FONT></PRE>


<P><FONT COLOR="#FF8000"><B><I>Analysis: </I></B></FONT>Notice that line 6 computes a tax amount. No matter what the outcome of the If-Else&#146;s relational test is, line 6 always executes. Line 6 is not part of either the If body or the Else body of 

code.

<BR>

<P>Line 1 tests whether the salesman's sales value&#151;stored in the text box named txtSales&#151;is more than $5,000.00. If the relational test is true, line 2 computes a bonus. If the test is false, Else executes (line 4).

<BR>

<P>As 
Figure 8.1 illustrates, either the If's body of code executes or the Else's body of code executes, but never both. Visual Basic decides in line 1 which assignment to make.

<BR>

<P><B> <A HREF="08vel01.gif">Figure 8.1. Either the </B><B>If</B><B> body or 
the </B><B>Else</B><B> body executes, but not both.</A></B>

<BR>

<P>Line 4 introduces an assignment statement that might surprise you at first. Line 4 appears to make the statement that the pay is equal to the pay minus 25. You know that <I>nothing</I> 
can be equal to itself minus 25. In math, the equal sign acts as a 
balance for the two sides of the equation. In Visual Basic, however, when the equal sign is not used inside an If's relational test, it is an assignment it that takes everything to the 
right of the equal sign and stores that value in the variable to the 
left of the equal sign. Line 4 first subtracts the 25 from PayAmt and then assigns that result back to PayAmt. In effect, it lowers the value of PayAmt by 25.

<BR>

<BLOCKQUOTE>


<BLOCKQUOTE>

<HR ALIGN=CENTER>

<BR>

<NOTE><B>Note: </B>When a variable appears on both sides of an assignment's equal sign, the variable is being <I>updated</I> in some way.</NOTE>

<BR>

<HR ALIGN=CENTER>

</BLOCKQUOTE></BLOCKQUOTE>

<BR>

<A 
NAME="E68E65"></A>

<H3 ALIGN=CENTER>

<CENTER>

<FONT SIZE=5 COLOR="#FF0000"><B>Logical Operators</B></FONT></CENTER></H3>

<BR>

<P><FONT COLOR="#FF8000"><B><I>Concept: </I></B></FONT>Three additional operators, And, Or, and Not, look more like commands 
than operators. And, Or, and Not are called <I>logical operators</I>. Logical operators enable you to add to the power of 
relational operators by extending the tests that your If statements can make. They enable you to combine two or more relational 
tests.

<BR>

<P>Table 8.3 describes the logical operators, which work just like their spoken counterparts.

<BR>

<BR>

<P ALIGN=CENTER>

<CENTER>

<FONT COLOR="#000080"><B>Table 8.3. The logical operators.</B></FONT></CENTER>

<BR>



<TABLE  
BORDERCOLOR=#000040 BORDER=1 CELLSPACING=2 WIDTH="100%" CELLPADDING=2 >

<TR>

<TD VALIGN=top  BGCOLOR=#80FFFF ><FONT COLOR=#000080>

<I>Operator</I>

</FONT>

<TD VALIGN=top  BGCOLOR=#80FFFF ><FONT COLOR=#000080>

<I>Usage</I>

</FONT>

<TD VALIGN=top  
BGCOLOR=#80FFFF ><FONT COLOR=#000080>

<I>Description</I></FONT>

<TR>

<TD VALIGN=top  BGCOLOR=#80FFFF ><FONT COLOR=#000080>

And

</FONT>

<TD VALIGN=top  BGCOLOR=#80FFFF ><FONT COLOR=#000080>

If (A &gt; B) And (C &lt; D)

</FONT>

<TD VALIGN=top  
BGCOLOR=#80FFFF ><FONT COLOR=#000080>

Returns true if both sides of the And are true. Therefore, A must be greater than B <I>and</I> C must be less than D. Otherwise, the expression returns a false result.</FONT>

<TR>

<TD VALIGN=top  BGCOLOR=#80FFFF 
><FONT COLOR=#000080>

Or

</FONT>

<TD VALIGN=top  BGCOLOR=#80FFFF ><FONT COLOR=#000080>

If (A &gt; B) Or (C &lt; D)

</FONT>

<TD VALIGN=top  BGCOLOR=#80FFFF ><FONT COLOR=#000080>

Returns true if either side of the Or is true. Therefore, A must be 
greater than B <I>or</I> C must be less than D. If both sides of the Or are false, the entire expression returns a false result.</FONT>

<TR>

<TD VALIGN=top  BGCOLOR=#80FFFF ><FONT COLOR=#000080>

Not

</FONT>

<TD VALIGN=top  BGCOLOR=#80FFFF ><FONT 
COLOR=#000080>

If Not(Ans = &quot;Yes&quot;)

</FONT>

<TD VALIGN=top  BGCOLOR=#80FFFF ><FONT COLOR=#000080>

Produces the opposite true or false result. Therefore, if Ans holds &quot;Yes&quot;, the Not turns the true result to false.</FONT>


</TABLE><P>As you can see from Table 8.3, the And and Or logical operators enable you to combine more than one relational test in a single If statement. The Not negates a relational test. You can often turn a Not condition around. Not can produce difficult 

relational tests, and you should use it cautiously. The last If in Table 8.3, for instance, could easily be changed to If (Ans &lt;&gt; &quot;Yes&quot;) to eliminate the Not.

<BR>

<P>Your code often must perform an assignment, print a message, or display 
a label if two or more conditions are true. The logical operators make the combined condition easy to code. Suppose that you want to reward the salesman if sales total more than 
$5,000 and if the he sells more than 10,000 units of a particular product. 
Without And, you have to embed an If statement in the body of another If statement. For example,

<BR>

<PRE>

<FONT COLOR="#000080">If (Sales &gt; 5000.00) Then

 If (UnitsSold &gt; 10000) Then

 Bonus = 50.00

 End If

End If</FONT></PRE>

<P>Here is the 
same code rewritten as single If. It is easier to read and to change later if you need to update the program.

<BR>

<PRE>

<FONT COLOR="#000080">If (Sales &gt; 5000.00) And (UnitsSold &gt; 10000) Then

 Bonus = 50.00

End If</FONT></PRE>

<P>How can you 
rewrite this If to pay the bonus if the salesperson sells <I>either</I> more than $5,000 in sales <I>or</I> if he sells more than 10,000 units? Here is the code:

<BR>

<PRE>

<FONT COLOR="#000080">If (Sales &gt; 5000.00) Or (UnitsSold &gt; 10000) Then

 
Bonus = 50.00

End If</FONT></PRE>

<P><FONT COLOR="#FF8000"><B><I>Stop and Type:</I></B></FONT> Listing 8.2 contains an If-Else that tests data from two divisions of a company and calculates values from the data.

<BR>

<P><FONT 
COLOR="#FF8000"><B><I>Review: </I></B></FONT>The logical operators enable you to combine two or more conditional tests. Without logical operators, you must code a longer series of nested If statements.

<BR>

<P>

<FONT COLOR="#000080"><B>Listing 8.2. 
Calculating sales figures for a company&#146;s divisions.</B></FONT>

<BR>

<PRE>

<FONT COLOR="#000080">1: If (DivNum = 3) Or (DivNum = 4) Then

2: DivTotal = DivSales3 + DivSales4

3: GrandDivCosts = (DivCost3 * 1.2) + (DivCost4 * 1.4)

4: Else

5: 
DovTotal = DivSales1 + DivSales2

6: GrandDivCosts = (DivCost1 * 1.1) + (DivCost5 * 1.9)

7: End If</FONT></PRE>

<P><FONT COLOR="#FF8000"><B><I>Analysis: </I></B></FONT>Assume that the users of the code in Listing 8.2 own a company with four divisions. 
The east coast divisions are numbered 3 and 4, and the west coast divisions are numbered 1 and 2. Listing 8.2 
calculates aggregate sales and costs totals for one of the coasts, depending on the DivNum value. You must assume that all the variables have 
been defined and initialized with proper values.

<BR>

<P>If DivNum contains either a 3 or a 4, the user is requesting figures for the east coast, and the code in lines 2&#150;3 executes to produce an east coast pair of values. If DivNum does not contain 
a 3 or a 4, the program assumes that DivNum contains a 1 
or a 2,and the west coast pair of values is calculated in lines 5&#150;6.

<BR>

<BR>

<A NAME="E68E66"></A>

<H3 ALIGN=CENTER>

<CENTER>

<FONT SIZE=5 COLOR="#FF0000"><B>Multiple Choice with 
</B><FONT COLOR="#FF8000"><B><I>Select Case</I></B></FONT></FONT></CENTER></H3>

<BR>

<P><FONT COLOR="#FF8000"><B><I>Concept: </I></B></FONT>The If statement is great for data comparisons in cases where one or two relational tests must be made. When you 
must test against more than two conditions, however, the If becomes difficult to 
maintain. The logical operators help in only certain kinds of conditions. At other times, you must nest several If-Else statements inside one other.

<BR>

<P>Consider the If 
statement shown in Listing 8.3. Although the logic of the If statement is simple, the coding is extremely difficult to follow.

<BR>

<P>

<FONT COLOR="#000080"><B>Listing 8.3. Nested </B><B>If</B><B>-</B><B>Else</B><B> statements get complex 
quickly.</B></FONT>

<BR>

<PRE>

<FONT COLOR="#000080">If (Age = 5) Then

 lblTitle.Text = &quot;Kindergarten&quot;

Else

 If (Age = 6) Then

 lblTitle.Text = &quot;1st Grade&quot;

 Else

 If (Age 7) Then

 lblTitle.Text = &quot;2nd Grade&quot;

 Else

 
If (Age = 8) Then

 lblTitle.Text = &quot;3rd Grade&quot;

 Else

 If (Age = 9) Then

 lblTitle.Text = &quot;4th Grade&quot;

 Else

 If (Age = 10) Then

 lblTitle.Text = &quot;5th Grade&quot;

 Else

 If (Age = 11) Then

 lblTitle.Text = &quot;6th 
Grade&quot;

 Else

 lblTitle.Text = &quot;Advanced&quot;

 End If

 End If

 End If

 End If

 End If

 End If

End If</FONT></PRE>

<P>Visual Basic supports a statement, called Select Case, that handles such multiple-choice conditions better than 
If-Else. Here is the format of the Select Case statement:

<BR>

<PRE>

<FONT COLOR="#000080">Select Case <I>Expression</I>

Case <I>value</I>

<I> One or more Visual Basic statements</I>

Case <I>value</I>

<I> One or more Visual Basic statements</I>


[Case <I>value</I>

<I> One or more Visual Basic statements</I>]

[Case Else:

<I> One or more Visual Basic statements</I>]

End Select</FONT></PRE>

<P>The format of Select Case makes the statement look as difficult as a complex nested If-Else, but you 
will soon see that Select Case statements are actually easier to code and to maintain than their If-Else counterparts.

<BR>

<P><I>Expression</I> can be any Visual Basic expression&#151;such as a calculation, a string value, or a numeric 
value&#151;provided that it results in an integer or string value. <I>value</I>s must be integer or string values that match 
<I>Expression</I>&#146;s data type.

<BR>

<P>The Select Case statement is useful when you must make several choices based on data 
values. Select Case can have two or more Case <I>value</I> sections. The code that executes depends on which <I>value</I> matches <I>Expression</I>. If none of the 
<I>value</I>s match <I>Expression</I>, the Case Else body of code executes if you code the 
Case Else. Otherwise, nothing happens and control continues with the statement that follows End Select.

<BR>

<BLOCKQUOTE>

<BLOCKQUOTE>

<HR ALIGN=CENTER>

<BR>

<NOTE><B>Warning: </B>Don't use Select Case when a simply If or a simple If-Else will 
suffice. Test logic is often so straightforward that a Select Case would be overkill and even less clear than an If. Unless you need to compare against more than a couple 
of values, stick with the If and If-Else statements because of their 
simplicity.</NOTE>

<BR>

<HR ALIGN=CENTER>

</BLOCKQUOTE></BLOCKQUOTE>

<P><FONT COLOR="#FF8000"><B><I>Stop and Type:</I></B></FONT> The fastest way to learn Select Case is to see an example of it. Listing 8.4 contains a Select Case version of the child 
grade assignments shown in Listing 8.3. Select Case organizes the 
multiple-choice selections into a more manageable format.

<BR>

<P><FONT COLOR="#FF8000"><B><I>Review: </I></B></FONT>The Select Case statement is a good substitute for long, nested 
If-Else conditions when one of several choices are possible. You set up your Visual Basic program to execute one set of Visual Basic 
statements from a list of statements inside Select Case.

<BR>

<P>

<FONT COLOR="#000080"><B>Listing 8.4. Using 
</B><B>Select Case</B><B> to simplify complex nested </B><B>If</B><B>-</B><B>Else</B><B> statements.</B></FONT>

<BR>

<PRE>

<FONT COLOR="#000080">1: Select Case Age

2: Case 5: lblTitle.Text = &quot;Kindergarten&quot;

3: Case 6: lblTitle.Text = 
&quot;1st Grade&quot;

4: Case 7: lblTitle.Text = &quot;2nd Grade&quot;

5: Case 8: lblTitle.Text = &quot;3rd Grade&quot;

6: Case 9: lblTitle.Text = &quot;4th Grade&quot;

7: Case 10: lblTitle.Text = &quot;5th Grade&quot;

8: Case 11: lblTitle.Text = 
&quot;6th Grade&quot;

9: Case Else: lblTitle.Text = &quot;Advanced&quot;

10: End Select</FONT></PRE>

<P><FONT COLOR="#FF8000"><B><I>Analysis: </I></B></FONT>If the Age variable holds the value 5, the label is assigned &quot;Kindergarten&quot; in line 2. 
If the Age variable holds the value 6, the label is assigned &quot;1st Grade&quot; in line 3. The logic 
continues through line 9. If Age holds a value that does not fall within the range of 5 through 11, line 9 assigns &quot;Advanced&quot; to the label.


<BR>

<P>The body of each Case can consist of more than one statement, just as the body of an If or If-Else can consist of more than one statement. Visual Basic executes all the statements for any given Case match until the next Case is reached. Once 
Visual 
Basic executes a matching Case value, it skips the remaining Case statements and continues with the code that follows the End Select statement.

<BR>

<BLOCKQUOTE>

<BLOCKQUOTE>

<HR ALIGN=CENTER>

<BR>

<NOTE><B>Note: </B>Programmers often trigger 
the execution of complete procedures, such as event procedures, from within a Case statement. As you will learn in Lesson 8, instead of putting several statements in the body of an If-Else or a Case, you can 
execute a procedure that contains all the 
statements that execute when a given condition is true.</NOTE>

<BR>

<HR ALIGN=CENTER>

</BLOCKQUOTE></BLOCKQUOTE>

<BR>

<A NAME="E68E67"></A>

<H3 ALIGN=CENTER>

<CENTER>

<FONT SIZE=5 COLOR="#FF0000"><B>Two Additional </B><FONT 
COLOR="#FF8000"><B><I>Select Case</I></B></FONT><B> Formats</B></FONT></CENTER></H3>

<BR>

<P><FONT COLOR="#FF8000"><B><I>Concept: </I></B></FONT>Visual Basic&#146;s Select Case is one of the most powerful selection statements in any programming language. 
Pascal, C, and C++&#151;all popular programming languages&#151;each contain statements that 
act like Visual Basic&#146;s Select Case, but Select Case offers two additional powerful formats that enable you to modify the way Case matches are made.

<BR>


<P>The two additional formats differ only slightly from the standard Select Case that you learned in the previous lesson. They enable you to extend the power of Select Case so that Visual Basic can make Case matches on both relational tests and on ranges 

of values. Here is the first additional format:

<BR>

<PRE>

<FONT COLOR="#000080">Select Case <I>Expression</I>

Case Is <I>relation</I>:

<I> One or more Visual Basic statements</I>

Case Is <I>relation</I>:

<I> One or more Visual Basic statements</I>


[Case Is <I>relation</I>:

<I> One or more Visual Basic statements</I>]

[Case Else:

<I> One or more Visual Basic statements</I>]

End Select</FONT></PRE>

<P><I>relation</I> can be whatever relational test you want to perform against <I>Expression</I> at 
the top of the Select Case. The standard Select Case statement, discussed in the previous section, compared the <I>Expression</I> value against an exact 
Case match. When you use the relational Is Select Case option, each Case can be matched on a 
relational test.

<BR>

<P>Here is the format of the second additional Select Case format:

<BR>

<PRE>

<FONT COLOR="#000080">Select Case <I>Expression</I>

Case <I>expr1</I> To <I>expr2</I>:

<I> One or more Visual Basic statements</I>

Case <I>expr1</I> 
To <I>expr2</I>:

<I> One or more Visual Basic statements</I>

[Case <I>expr1</I> To <I>expr2</I>:

<I> One or more Visual Basic statements</I>]

[Case Else:

<I> One or more Visual Basic statements</I>]

End Select</FONT></PRE>

<P>The Case lines require 
a range, such as 4 To 6. The To Select Case option enables you to match against a range instead of a relation or an exact match.

<BR>

<BLOCKQUOTE>

<BLOCKQUOTE>

<HR ALIGN=CENTER>

<BR>

<NOTE><B>Tip: </B>You can combine the extended formats of Select 
Case with the standard Select Case so that two or more kinds of Case formats appear within the same Select Case statement.</NOTE>

<BR>

<HR ALIGN=CENTER>

</BLOCKQUOTE></BLOCKQUOTE>

<P>[ic:Stop&amp;Type]The code in Listing 8.4 contains a minor logic bug. 
The code handles all Age values over 11, but it does not handle Age values below 5. Therefore, if Age contains a value of 4, Listing 8.4 would assign &quot;Advanced&quot; to the 
label. However, if you add a relational test for the first Case, as shown in 
Listing 8.5, the code can handle any Age value.

<BR>

<P><FONT COLOR="#FF8000"><B><I>Review: </I></B></FONT>The additional Select Case options extend the power of Select Case beyond that of any selection statement in other languages. Using the two Case 
options that you learned in this section, you can code 
multiple-choice selections based on three kinds of matches:

<BR>

<UL>

<LI> [lb] An exact Case match to Select Case's <I>Expression</I>

<BR>

<BR>

<LI> [lb] A relational Case match to Select 
Case's <I>Expression</I>

<BR>

<BR>

<LI> [lb] A range of Case matches to Select Case's Expression

<BR>

<BR>

</UL>

<P>

<FONT COLOR="#000080"><B>Listing 8.5. Using </B><B>Select Case</B><B> to simplify complex nested 
</B><B>If</B><B>-</B><B>Else</B><B> statements.</B></FONT>

<BR>

<PRE>

<FONT COLOR="#000080">1: Select Case Age

2: Case Is &lt;5: lblTitle.Text = &quot;Too young&quot;

3: Case 5: lblTitle.Text = &quot;Kindergarten&quot;

4: Case 6: lblTitle.Text = 
&quot;1st Grade&quot;

5: Case 7: lblTitle.Text = &quot;2nd Grade&quot;

6: Case 8: lblTitle.Text = &quot;3rd Grade&quot;

7: Case 9: lblTitle.Text = &quot;4th Grade&quot;

8: Case 10: lblTitle.Text = &quot;5th Grade&quot;

9: Case 11: lblTitle.Text = 
&quot;6th Grade&quot;

10: Case Else: lblTitle.Text = &quot;Advanced&quot;

11: End Select</FONT></PRE>

<P><FONT COLOR="#FF8000"><B><I>Analysis: </I></B></FONT>By testing for a value less than 5 in line 1, Listing 8.5 ensures that both younger ages and 
older ages are covered by the Case selections.

<BR>

<BLOCKQUOTE>

<BLOCKQUOTE>

<HR ALIGN=CENTER>

<BR>

<NOTE><B>Tip: </B>Although the Case Else line is optional, be sure to code one unless you know the exact range of values that can match 
<I>Expression</I>.</NOTE>

<BR>

<HR ALIGN=CENTER>

</BLOCKQUOTE></BLOCKQUOTE>

<P>[ic:Stop&amp;Type]Listing 8.6 contains a similar Select Case problem that uses the To option for some of the Case values. Each Case tests against a range of possible values. 
The ages fall into categories, and the appropriate titles are updated depending 
on the category matches.

<BR>

<P>

<FONT COLOR="#000080"><B>Listing 8.6. Using </B><B>Select Case</B><B> ranges for categorizing multiple matches.</B></FONT>

<BR>

<PRE>


<FONT COLOR="#000080">1: Select Case Age

2: Case Is &lt;5: lblTitle.Text = &quot;Too young&quot;

3: Case 5: lblTitle.Text = &quot;Kindergarten&quot;

4: Case 6 To 11: lblTitle.Text = &quot;Elementary&quot;

5: lblSchool.Text = &quot;Lincoln&quot;

6: 
Case 12 To 15: lblTitle.Text = &quot;Intermediate&quot;

7: lblSchool.Text = &quot;Washington&quot;

8: Case 16 To 18: lblTitle.Text = &quot;High School&quot;

9: lblSchool.Text = &quot;Betsy Ross&quot;

10: Case Else: lblTitle.Text = &quot;College&quot;


11: lblSchool.Text = &quot;University&quot;

12: End Select</FONT></PRE>

<P><FONT COLOR="#FF8000"><B><I>Analysis: </I></B></FONT>Listing 8.6 contains every Select Case option that exists. In the Select Case in line 1, the Age value is compared to its many 
possibilities throughout the rest of the Select Case. If Age holds a 
value less than 5, the label is updated in line 2 to reflect the child&#146;s age. Nothing else executes. Visual Basic recognizes that the first Case in line 2 is a one-line Case, and 
the program continues with the line that follows End Select (line 12) as 
soon as line 2 finishes.

<BR>

<P>Line 3 compares the Age variable to the value of 5, and assigns &quot;Kindergarten&quot; to the label if Age is equal to 5.

<BR>

<P>Lines 
4&#150;9 compare whether Age falls within three different ranges of values and updates two label values accordingly. If all Case statements fail through line 9, the Case in line 10 takes over and assumes that Age holds a value greater than 18. (If 
Age 
holds any value less than 18, an earlier Case statement would have taken control.)

<BR>

<BR>

<A NAME="E68E68"></A>

<H3 ALIGN=CENTER>

<CENTER>

<FONT SIZE=5 COLOR="#FF0000"><B>Homework</B></FONT></CENTER></H3>

<BR>

<BR>

<A NAME="E69E55"></A>

<H4 
ALIGN=CENTER>

<CENTER>

<FONT SIZE=4 COLOR="#FF0000"><B>General Knowledge</B></FONT></CENTER></H4>

<BR>

<OL>

<LI>What is a condition?

<BR>

<BR>

<LI>True or false: Relational tests produce one of three results.

<BR>

<BR>

<LI>True or false: Visual 
Basic requires parentheses around a relational test.

<BR>

<BR>

<LI>What are the six relational operators?

<BR>

<BR>

<LI>Determine the true or false result of the following relational tests:

<BR>

<BR>

<OL TYPE=A>

<LI>&quot;zz&quot; &lt; 
&quot;ZZ&quot;

<BR>

<BR>

<LI>161 &lt;= 161

<BR>

<BR>

<LI>3.4 &lt; 4

<BR>

<BR>

<LI>(3 &lt;&gt; 4) And (5 = 5)

<BR>

<BR>

<LI>(3 &lt;&gt; 4) Or (5 = 5)

<BR>

<BR>

<LI>(3 = 3) And (10 &lt; 9)

<BR>

<BR>

</OL>

<LI>What is the name of the table 
that determines how string values are compared?

<BR>

<BR>

<LI>What Visual Basic statement makes decisions?

<BR>

<BR>

<LI>What Visual Basic statement prescribes a true <I>and</I> a false course of action?

<BR>

<BR>

<LI>True or false: The body of an 
If can contain more than one statement, but the body of the Else must contain one statement at most.

<BR>

<BR>

<LI>What is a <I>nested </I><I>If</I> statement?

<BR>

<BR>

<LI>What statement helps eliminate tedious and convoluted If-Else statements?


<BR>

<BR>

<LI>How many kinds of Case options are there?

<BR>

<BR>

<LI>What happens if every Case fails and there is no Case Else option for a particular Select Case statement?

<BR>

<BR>

<LI>What happens if every Case fails and there is a Case Else 
option on a particular Select Case statement?

<BR>

<BR>

<LI>Which Case option tests for ranges of values?

<BR>

<BR>

<LI>Which Case option tests for relational values?

<BR>

<BR>

</OL>

<BR>

<A NAME="E69E56"></A>

<H4 ALIGN=CENTER>

<CENTER>

<FONT 
SIZE=4 COLOR="#FF0000"><B>Write Code That...</B></FONT></CENTER></H4>

<BR>

<OL>

<LI>Rewrite the following nested If statement using a single If with a logical operator:

<BR>If (M = 3) Then

<BR> If (P = 4) Then

<BR> TestIt = &quot;Yes&quot;

<BR> End 
If

<BR>End If

<BR>

<BR>

<LI>Rewrite the following If to eliminate the Not to clarify the code:

<BR>If Not(d &lt; 3) Or Not(p &gt;= 9) Then

<BR>

<BR>

<LI>Rewrite Listing 8.6 so that the message &quot;Age Error&quot; appears in the lblTitle.Text 
property if Age holds a value less than zero.

<BR>

<BR>

</OL>

<BR>

<A NAME="E69E57"></A>

<H4 ALIGN=CENTER>

<CENTER>

<FONT SIZE=4 COLOR="#FF0000"><B>Find the Bug</B></FONT></CENTER></H4>

<BR>

<OL>

<LI>What is wrong with the following If 
statement?

<BR>If (A &lt; 1) And (C &gt;= 8) Then

<BR> lblName.Text = &quot;Overdrawn&quot;

<BR>Else

<BR> lblName.Text = &quot;Underdrawn&quot;

<BR>End Else

<BR>End If

<BR>

<BR>

</OL>

<BR>

<A NAME="E69E58"></A>

<H4 ALIGN=CENTER>

<CENTER>


<FONT SIZE=4 COLOR="#FF0000"><B>Extra Credit</B></FONT></CENTER></H4>

<BR>

<P>Given the following If and matching Select Case, which one is preferable and easier to maintain? Remember that you want to keep things simple and clear.

<BR>If (grade &gt;= 
70) Then

<BR> lblLetter.Text = &quot;Passing&quot;

<BR>Else

<BR> lblLetter.Text = &quot;Failing&quot;

<BR>End If

<BR>or

<BR>Select Case grade

<BR> Case Is &gt;= 70: lblLetter.Text = &quot;Pasing&quot;

<BR> Case Else: lblLetter.Text = 
&quot;Failing&quot;

<BR>End Select

<BR>

<P ALIGN=LEFT>

<A HREF="vel07.htm" TARGET="_self"><IMG SRC="purprev.gif" WIDTH = 32 HEIGHT = 32 BORDER = 0 ALT="Previous Page"></A>

<A HREF="#I0" TARGET="_self"><IMG SRC="purtop.gif" WIDTH = 32 HEIGHT = 32 
BORDER = 0 ALT="Page Top"></A>

<A HREF="index.htm" TARGET="_self"><IMG SRC="purtoc.gif" WIDTH = 32 HEIGHT = 32 BORDER = 0 ALT="TOC"></A>

<A HREF="velp04.htm" TARGET="_self"><IMG SRC="purnext.gif" WIDTH = 32 HEIGHT = 32 BORDER = 0 ALT="Next Page"></A>

<A 

</BODY></HTML>







