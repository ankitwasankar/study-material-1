<HTML>

<HEAD>

<TITLE>Visual Basic in 12 Easy Lessons vel10.htm </TITLE>

<LINK REL="ToC" HREF="index.htm">

<LINK REL="Index" HREF="htindex.htm">

<LINK REL="Next" HREF="velp05.htm">

<LINK REL="Previous" HREF="vel09.htm"></HEAD>

<BODY BGCOLOR="#FFFFFF" 
TEXT="#000000" LINK="#0000FF" VLINK="#800080">

<A NAME="I0"></A>

<H2>Visual Basic in 12 Easy Lessons vel10.htm</H2>

<P ALIGN=LEFT>

<A HREF="vel09.htm" TARGET="_self"><IMG SRC="purprev.gif" WIDTH = 32 HEIGHT = 32 BORDER = 0 ALT="Previous Page"></A>

<A 
HREF="index.htm" TARGET="_self"><IMG SRC="purtoc.gif" WIDTH = 32 HEIGHT = 32 BORDER = 0 ALT="TOC"></A>

<A HREF="velp05.htm" TARGET="_self"><IMG SRC="purnext.gif" WIDTH = 32 HEIGHT = 32 BORDER = 0 ALT="Next Page"></A>


<HR ALIGN=CENTER>

<P>

<UL>

<UL>

<UL>

<LI>

<A HREF="#E68E78" >What You'll Learn</A>

<LI>

<A HREF="#E68E79" >The Do While Loop</A>

<LI>

<A HREF="#E68E80" 
>The Do Until Loop</A>

<LI>

<A HREF="#E68E81" >The Other Do Loops</A>

<LI>

<A HREF="#E68E82" >The For Loop</A>

<LI>

<A HREF="#E68E83" >Homework</A>

<UL>

<LI>

<A HREF="#E69E67" >General Knowledge</A>

<LI>

<A HREF="#E69E68" >Write Code That...</A>


<LI>

<A HREF="#E69E69" >Find the Bug</A>

<LI>

<A HREF="#E69E70" >Extra Credit</A></UL></UL></UL></UL>

<HR ALIGN=CENTER>

<A NAME="E66E14"></A>

<H1 ALIGN=CENTER>

<CENTER>

<FONT SIZE=6 COLOR="#FF0000"><B>Lesson 5, Unit 10</B></FONT></CENTER></H1>


<BR>

<A NAME="E67E17"></A>

<H2 ALIGN=CENTER>

<CENTER>

<FONT SIZE=6 COLOR="#FF0000"><B>Looping</B></FONT></CENTER></H2>

<BR>

<BR>

<A NAME="E68E78"></A>

<H3 ALIGN=CENTER>

<CENTER>

<FONT SIZE=5 COLOR="#FF0000"><B>What You'll 
Learn</B></FONT></CENTER></H3>

<BR>

<UL>

<LI>The Do While Loop

<BR>

<BR>

<LI>The Do Until Loop

<BR>

<BR>

<LI>The Other Do Loops

<BR>

<BR>

<LI>The For Loop

<BR>

<BR>

</UL>

<P>Now you're <I>really</I> ready to write powerful programs! You've 
learned some controls, you've defined some variables, and you've written programs that make decisions. It's now time to learn how to write programs that perform repetitive data 
processing. When a computer does something over and over, the computer is said 
to be <I>looping</I>.

<BR>

<P>Computers don't get bored. The primary strength of computers is their capability to loop through a series of calculations over and over very quickly. Computers can process every customer balance, calculate sales averages 
among many divisions, and 
display data for each company employee.

<BR>

<P>This unit describes how you can add looping to Visual Basic programs so that the programs can process several data values using looping statements. Loops don't just help when you 
have large amounts of data to process. Loops also enable you to correct 
user errors and repeat certain program functions when the user requests a repeat.

<BR>

<BR>

<A NAME="E68E79"></A>

<H3 ALIGN=CENTER>

<CENTER>

<FONT SIZE=5 COLOR="#FF0000"><B>The 
</B><B>Do While</B><B> Loop</B></FONT></CENTER></H3>

<BR>

<P><FONT COLOR="#FF8000"><B><I>Concept: </I></B></FONT>The Do statement supports several different loop formats. The Do While loop is perhaps the most common looping statement that you'll put in 
Visual Basic programs.

<BR>

<BLOCKQUOTE>

<BLOCKQUOTE>

<HR ALIGN=CENTER>

<BR>

<NOTE><I>Definition: </I>A <I>block</I> consists of one or more program statements.</NOTE>

<BR>

<HR ALIGN=CENTER>

</BLOCKQUOTE></BLOCKQUOTE>

<P>The Do While statement 
works with relational expressions just as the If statement does. Therefore, the six relational operators that you learned about in the previous lesson work as expected here. Rather than control the one-time execution of a single 
block of code, however, 
the relational expression controls the looping statements.

<BR>

<P>The code that you've seen so far inside event procedures has been sequential code that executed one statement following another in the order that you typed the statements. Looping changes 
things a bit. Many lines of your programs will still execute 
sequentially, but a loop will cause blocks of code to repeat one or more times.

<BR>

<P>Like the If statement that ends with an End If statement, a loop will always be a multiline statement 
that includes an obvious beginning and ending of the loop. Here is the format of the Do While loop:

<BR>

<PRE>

<FONT COLOR="#000080">Do While (relational test)

 Block of one or more Visual Basic statements

Loop</FONT></PRE>

<BLOCKQUOTE>

<BLOCKQUOTE>


<HR ALIGN=CENTER>

<BR>

<NOTE><I>Definition: </I>An <I>infinite loop</I> repeats forever.</NOTE>

<BR>

<HR ALIGN=CENTER>

</BLOCKQUOTE></BLOCKQUOTE>

<P>The block of code continues looping as long as the <I>relational test</I> is true. Whether you insert 
one or several lines of code for the block doesn't matter. It's vital, however, that the block of code somehow change a variable used in the 
<I>relational test</I>. The block of code keeps repeating as long as the Do While loop's <I>relational 
</I><I>test</I> continues to stay true. Eventually, the <I>relational test</I> must become false or your program will enter an infinite loop and the user 
will have to break the program's execution through an inelegant means, such as pressing the 
Ctrl+Break key combination.

<BR>

<BLOCKQUOTE>

<BLOCKQUOTE>

<HR ALIGN=CENTER>

<BR>

<NOTE><B>Warning: </B>Even if you provide an Exit command button as you've seen used in this book's applications, the program will often ignore the user's Exit command 
button click if the program enters an infinite loop.</NOTE>

<BR>

<HR ALIGN=CENTER>

</BLOCKQUOTE></BLOCKQUOTE>

<P>Figure 10.1 illustrates how the Do While loop works. As long as the <I>relational test</I> is true, the block of code in the body of the 
loop continues executing. When the <I>relational test</I> becomes false, the loop terminates. After the loop 
terminates, Visual Basic begins program execution at the statement following the Loop statement because Loop signals the end of the loop.

<BR>


<P><B> <A HREF="10vel01.gif">Figure 10.1. The </B><B>Do While</B><B> loop's action continues while the </B><FONT COLOR="#FF8000"><B><I>relational test</I></B></FONT><B> is true.</A></B>

<BR>

<BLOCKQUOTE>

<BLOCKQUOTE>

<HR ALIGN=CENTER>

<BR>


<NOTE><B>Note: </B>As soon as the <I>relational test</I> becomes false, the loop terminates and doesn't execute even one more time. The Do While's <I>relational test</I> appears at the top of the loop. Therefore, if the <I>relational test</I> is false the 

first time that the loop begins, the body of the loop will never execute.</NOTE>

<BR>

<HR ALIGN=CENTER>

</BLOCKQUOTE></BLOCKQUOTE>

<P>Throughout this book, you'll see indention used for the body of the loop code. By indenting the body of the loop to 
the right of the loop's introduction and terminating statements, you'll make it easier to spot where the loop begins and ends.

<BR>

<P><FONT COLOR="#FF8000"><B><I>Stop and Type: </I></B></FONT>Listing 10.1 contains a section of an event procedure that 
contains a Do While loop that asks the user for an age. If the user enters an age less than 10 or more than 99, the program beeps at the 
error and displays another input box asking for the age. The program continues looping, asking for the age, as long as 
the user enters an age that's out of range.

<BR>

<P><FONT COLOR="#FF8000"><B><I>Review: </I></B></FONT>The Do While loop continues executing a block of Visual Basic statements as long as a <I>relational test</I> is true. As soon as the <I>relational 
test</I> becomes false, the loop terminates.

<BR>

<P>

<FONT COLOR="#000080"><B>Listing 10.1. The </B><B>Do While</B><B> loop executes as long as the </B><FONT COLOR="#FF8000"><B><I>relational test</I></B></FONT><B> is true.</B></FONT>

<BR>

<PRE>


<FONT COLOR="#000080">1: Dim StrAge As String

2: Dim Age As Integer

3: ' Get the age in a string variable

4: StrAge = InputBox$(&quot;How old are you?&quot;, &quot;Age Ask&quot;)

5: ' Check for the Cancel command button

6: If (StrAge = &quot;&quot;) 
Then

7: End

8: End If

9: ' Cancel was not pressed, so convert Age to integer

10: Age = Val(StrAge)

11: ' Loop if the age is not in the correct range

12: Do While ((Age &lt; 10) Or (Age &gt; 99))

13: ' The user's age is out of range

14: Beep

15: 
MsgBox &quot;Your age must be between 10 and 99&quot;, MB_ICONEXCLAMATION, &quot;Error!&quot;

16: StrAge = InputBox(&quot;How old are you?&quot;, &quot;Age Ask&quot;)

17: ' Check for the Cancel command button

18: If (StrAge = &quot;&quot;) Then

19: End


20: End If

21: Age = Val(StrAge)

22: Loop</FONT></PRE>

<P><FONT COLOR="#FF8000"><B><I>Output:</I></B></FONT> Figure 10.2 shows the message box error displayed in line 15 if the user enters an age value that's less than 10 or more than 99.

<BR>

<P><B> 
<A HREF="10vel02.gif">Figure 10.2. The user sees this message box as long as the age is out of range.</A></B>

<BR>

<P><FONT COLOR="#FF8000"><B><I>Analysis: </I></B></FONT>Lines 1 and 2 define two variables, a string and an integer. The code uses the 
string variable to capture the return value from the InputBox$() function. Use a string variable so that you can test for 
the Cancel button because, as you learned in the previous lesson, InputBox$() returns a null string if the user presses Cancel. If 
the user presses Cancel, the code terminates the entire program with an End statement (lines 7 and 19). If the user enters an 
age (and did not press Cancel), the code converts the string age to an integer and checks to make sure that the age is within the 
range of 10 to 99.

<BR>

<P>Line 12 begins a loop if the age is less than 10 or more than 99. The loop continues executing from line 13 to the end of the loop in line 22. If the age is out of range, the body of the loop executes. Line 14 beeps, thus 
sending an audible signal to 
the user that something is wrong. Line 15 displays an error message box (the one shown in Figure 10.2) and after the user presses OK at the message box, the user is once again asked for an age with an InputBox$() function 
shown on line 16. The loop then 
checks to make sure that the user didn't press Cancel (lines 17 through 20) and, if not, the code converts the string age to an integer and the loop begins once again. If the age entered in the previous pass of the loop 
falls within the valid age range, 
the program finishes (any code that exists past line 22 executes). Otherwise, the loop begins once again.

<BR>

<P>The code contains some redundancy. For example, lines 4 and 16 contain almost the same InputBox$() 
function, and the same check for a Cancel command button press appears twice in the program. There are other looping statements that you'll learn about 
later in this chapter; those statements can help simplify this code by removing some of the redundancy.


<BR>

<P>Perhaps the most important thing to note about the Do While loop in Listing 10.1 is that the body of the loop provides a way for the <I>relational test</I> to terminate. Line 12's <I>relational test</I> uses the Age variable that the body of the 
loop 
reassigns each time the loop's block of code executes. Therefore, assuming that the user enters a different value for the age, the loop will test against a different set of relational values in line 12 and, it is hoped, the relational test will fail 
(which 
would mean that the age is inside the range) and the program will stop looping. If the loop body did nothing with the <I>relational test</I> variable, the loop would continue forever.

<BR>

<BR>

<A NAME="E68E80"></A>

<H3 ALIGN=CENTER>

<CENTER>


<FONT SIZE=5 COLOR="#FF0000"><B>The </B><B>Do Until</B><B> Loop</B></FONT></CENTER></H3>

<BR>

<P><FONT COLOR="#FF8000"><B><I>Concept: </I></B></FONT>Whereas the Do While loop continues executing the body of the loop as long as the <I>relational test</I> 
is true, the Do Until loop executes the body of the loop as long as the <I>relational test</I> 
is false. The program's logic at the time of the loop determines which kind of loop works best in a given situation.

<BR>

<P>The Do Until loop works almost 
exactly like the Do While except that the Do Until loop continues executing the body of the loop <I>until</I> the <I>relational test</I> is true. Like the Do While, the Do Until is a multiline looping statement that can 
execute a block of code that's one 
or more lines long.

<BR>

<P>Here is the format of the Do Until:

<BR>

<PRE>

<FONT COLOR="#000080">Do Until (relational test)

 Block of one or more Visual Basic statements

Loop</FONT></PRE>

<P>Again, keep in mind that the <I>relational test</I> must 
be <I>false</I> for the loop to continue. Figure 10.3 illustrates how the Do Until works.

<BR>

<P><B> <A HREF="10vel03.gif">Figure 10.3. The </B><B>Do Until</B><B> loop's action continues while the </B><FONT COLOR="#FF8000"><B><I>relational 
test</I></B></FONT><B> is false.</A></B>

<BR>

<P><FONT COLOR="#FF8000"><B><I>Stop and Type: </I></B></FONT>You can use the Do While or the Do Until for almost any loop. Listing 10.2 contains the age-checking event procedure that contains a Do Until loop. 
The loop ensures that the age falls between two 
values. As you can see, the <I>relational test</I> for the Do Until is the opposite of that used in Listing 10.1's Do While loop.

<BR>

<BLOCKQUOTE>

<BLOCKQUOTE>

<HR ALIGN=CENTER>

<BR>

<NOTE><B>Note: 
</B>Use the loop that makes for the cleanest and clearest <I>relational test</I>. Sometimes, the logic makes the Do While clearer, whereas other loops seem to work better when you set them up with the Do Until loop.</NOTE>

<BR>

<HR ALIGN=CENTER>


</BLOCKQUOTE></BLOCKQUOTE>

<P><FONT COLOR="#FF8000"><B><I>Review: </I></B></FONT>The Do Until loop continues executing a block of Visual Basic statements as long as a <I>relational test</I> is false. As soon as the <I>relational test</I> becomes true (the 
loop is said to <I>Do a 
loop until the condition becomes </I><I>false</I>), the loop terminates and the program continues on the line that follows the closing Loop statement.

<BR>

<P>

<FONT COLOR="#000080"><B>Listing 10.2. The </B><B>Do Until</B><B> 
loops until the </B><FONT COLOR="#FF8000"><B><I>relational test</I></B></FONT><B> becomes true.</B></FONT>

<BR>

<PRE>

<FONT COLOR="#000080">1: Dim StrAge As String

2: Dim Age As Integer

3: ' Get the age in a string variable

4: StrAge = 
InputBox$(&quot;How old are you?&quot;, &quot;Age Ask&quot;)

5: ' Check for the Cancel command button

6: If (StrAge = &quot;&quot;) Then

7: End

8: End If

9: ' Cancel was not pressed, so convert Age to integer

10: Age = Val(StrAge)

11: ' Loop if the 
age is not in the correct range

12: Do Until ((Age &gt;= 10) And (Age &lt;= 99))

13: ' The user's age is out of range

14: Beep

15: MsgBox &quot;Your age must be between 10 and 99&quot;, MB_ICONEXCLAMATION, &quot;Error!&quot;

16: StrAge = 
InputBox(&quot;How old are you?&quot;, &quot;Age Ask&quot;)

17: ' Check for the Cancel command button

18: If (StrAge = &quot;&quot;) Then

19: End

20: End If

21: Age = Val(StrAge)

22: Loop</FONT></PRE>

<P><FONT COLOR="#FF8000"><B><I>Analysis: 
</I></B></FONT>Line 12 is the only line that marks the difference between Listing 10.1 and 10.2. The age must now fall within the valid range for the loop to terminate.

<BR>

<BLOCKQUOTE>

<BLOCKQUOTE>

<HR ALIGN=CENTER>

<BR>

<NOTE><B>Note: </B>There is 
really no advantage of using Do While or Do Until. Use whichever one seems to flow the best for any given application.</NOTE>

<BR>

<HR ALIGN=CENTER>

</BLOCKQUOTE></BLOCKQUOTE>

<BR>

<A NAME="E68E81"></A>

<H3 ALIGN=CENTER>

<CENTER>

<FONT SIZE=5 
COLOR="#FF0000"><B>The Other </B><B>Do</B><B> Loops</B></FONT></CENTER></H3>

<BR>

<P><FONT COLOR="#FF8000"><B><I>Concept: </I></B></FONT>There is another pair of Do loops that works almost exactly like the two previous sections' loops. Do-Loop While and 
the Do-Loop Until look very much like their counterparts that you learned earlier. 
Nevertheless, these new loop formats check their <I>relational test</I>s at the bottom of the loop rather than at the top.

<BR>

<P>If a loop begins with a single Do 
statement, the loop ends with either Loop While or Loop Until. Here is the format of the Do-Loop While:

<BR>

<PRE>

<FONT COLOR="#000080">Do

 <I>Block of one or more Visual Basic statements</I>

Loop Until (relational test)</FONT></PRE>

<BLOCKQUOTE>


<BLOCKQUOTE>

<HR ALIGN=CENTER>

<BR>

<NOTE><B>Tip: </B>The dash in Do-Loop While serves to remind you that the body of the loop comes before the Loop While statement. The dash in the Do-Loop Until performs the same purpose.</NOTE>

<BR>

<HR 
ALIGN=CENTER>

</BLOCKQUOTE></BLOCKQUOTE>

<P>That Do looks lonely by itself, doesn't it? Figure 10.4 illustrates the flow of the Do-Loop While loop's execution.

<BR>

<P><B> <A HREF="10vel04.gif">Figure 10.4. The </B><B>Do</B><FONT 
COLOR="#FF8000"><B><I>-</I></B></FONT><B>Loop While</B><B> loop doesn't check for the </B><FONT COLOR="#FF8000"><B><I>relational test</I></B></FONT><B> until the </B><B>bottom of the loop 
body.</A></B>

<BR>

<P>Notice that the Do-Loop While loop's 
<I>relational test</I> appears at the bottom of the loop instead of at the top of the loop. You'll use the Do-Loop While loop when you want the body of the loop to execute at <I>least one </I><I>time</I>. Often, by 
placing the <I>relational test</I> at 
the bottom of the loop, you can eliminate redundant code that otherwise might be required if you used Do While.

<BR>

<P>To complete the loop statements, Visual Basic also supports a Do-Loop Until statement. Like the Do-Loop While, the Do-Loop Until 
statement tests the <I>relational test</I> at the bottom of the loop. Therefore, the body of the loop executes at least once 
no matter what the <I>relational test</I> turns out to be. The loop continues as long as the <I>relational test</I> remains 
<I>false</I>. Figure 10.5 illustrates the action of the Do-Loop Until.

<BR>

<P><B> <A HREF="10vel05.gif">Figure 10.5. The </B><B>Do</B><FONT COLOR="#FF8000"><B><I>-</I></B></FONT><B>Loop Until</B><B> loop checks for a false </B><FONT 
COLOR="#FF8000"><B><I>relational test</I></B></FONT><B> at the bottom of </B><B>the loop 
body.</A></B>

<BR>

<P><FONT COLOR="#FF8000"><B><I>Stop and Type: </I></B></FONT>Listing 10.3 contains the age-checking event procedure that's much shorter than the 
previous versions. The <I>relational test</I> appears at the bottom of the loop, so the extra InputBox$() 
function call is not needed.

<BR>

<P><FONT COLOR="#FF8000"><B><I>Review: </I></B></FONT>The <I>relational test</I> appears at the bottom of the 
loop if you use the Do-Loop While loop statement. The body of the loop always executes at least once. The body of the loop executes more than once 
as long as the <I>relational test</I> stays true. There is a corresponding Do-Loop Until statement that 
checks for a false condition at the bottom of the loop's body.

<BR>

<P>

<FONT COLOR="#000080"><B>Listing 10.3. Use the </B><B>Do</B><B>-</B><B>Loop While</B><B> to check the relation at the bottom of the loop.</B></FONT>

<BR>

<PRE>

<FONT 
COLOR="#000080">1: Dim StrAge As String

2: Dim Age As Integer

3: Do

4: StrAge = InputBox(&quot;How old are you?&quot;, &quot;Age Ask&quot;)

5: ' Check for the Cancel command button

6: If (StrAge = &quot;&quot;) Then

7: End

8: End If

9: Age = 
Val(StrAge)

10: If ((Age &lt; 10) Or (Age &gt; 99)) Then

11: ' The user's age is out of range

12: Beep

13: MsgBox &quot;Your age must be between 10 and 99&quot;, MB_ICONEXCLAMATION, &quot;Error!&quot;

14: End If

15: Loop While ((Age &lt; 10) Or (Age 
&gt; 99))</FONT></PRE>

<P><FONT COLOR="#FF8000"><B><I>Analysis: </I></B></FONT>The loop begins almost immediately in line 3. The loop's body will <I>always</I> execute at least once, so the InputBox$() appears right inside the loop. By placing the 
InputBox$() function inside the 
loop, you eliminate the need to put this function in the code twice (once before the loop and once inside the loop, as was necessary using the previous looping statements in Listings 10.1 and 10.2).

<BR>

<P>Line 10 must 
check to make sure that the InputBox$() value is in or out of the age range so that the message box error can be displayed.

<BR>

<BLOCKQUOTE>

<BLOCKQUOTE>

<HR ALIGN=CENTER>

<BR>

<NOTE><B>Note: </B>In this simple application of the looping statements 
that you've seen here, the Do-While loop required less code than the Do While and Do Until loops. By changing line 15's <I>relational test</I>, a Do Until would also work. These last 
two loops will not, in every case, produce less code. The logic of the 
application determines which loop works best.</NOTE>

<BR>

<HR ALIGN=CENTER>

</BLOCKQUOTE></BLOCKQUOTE>

<BR>

<A NAME="E68E82"></A>

<H3 ALIGN=CENTER>

<CENTER>

<FONT SIZE=5 COLOR="#FF0000"><B>The </B><B>For</B><B> Loop</B></FONT></CENTER></H3>

<BR>


<P><FONT COLOR="#FF8000"><B><I>Concept: </I></B></FONT>The For loop (sometimes called the For-Next loop) also creates a loop. Unlike the Do loops, however, the For loop repeats for a specified number of times. The format of the For loop looks a little more 

daunting than the Do loops, but after you master the format, you'll have little trouble implementing For loops when your code needs to repeat a section of code for a specified number of times.

<BR>

<P>There isn't one correct loop to use in all 
situations. The For statement provides the mechanism for the fifth Visual Basic loop construction that you'll learn. A For loop always begins with the For statement and ends with the Next statement. Here is the 
format of the For loop:

<BR>

<PRE>

<FONT 
COLOR="#000080">For CounterVar = StartVal To EndVal [Step IncrementVal]

 Block of one or more

 Visual Basic statements

Next CounterVar</FONT></PRE>

<P>The loop in Listing 10.4 computes the total of the numbers from 1 to 10.

<BR>

<P>

<FONT 
COLOR="#000080"><B>Listing 10.4. Add the numbers from 1 to 10.</B></FONT>

<BR>

<PRE>

<FONT COLOR="#000080">1: Sum = 0

2: For Number = 1 To 10

3: Sum = Sum + Number

4: Next Number</FONT></PRE>

<P>Number is the <I>CounterVar</I> in the For's format 
(line 2). The <I>CounterVar</I> must be a variable. 1 is the <I>StartVal</I> (line 2). The <I>StartVal</I> can be either a Number, expression, or variable. 10 is the <I>EndVal</I> (still in line 2). 
The <I>EndVal</I> can be either a Number, expression, or 
variable. There is no Step specified here. In the For statement's format, the Step <I>IncrementVal</I> is optional. If you don't specify a Step value, Visual Basic assumes a Step value of 1. 
Therefore, both of the following For statements are exactly the 
same:

<BR>

<BR>

<PRE>

<FONT COLOR="#000080">For Number = 1 To 10</FONT></PRE>

<P>and

<BR>

<BR>

<PRE>

<FONT COLOR="#000080">For Number = 1 To 10 Step 1</FONT></PRE>

<P>Listing 10.4's summing For loop initially assigns to the <I>CounterVar</I> the 
<I>StartVal</I> in line 2. Therefore, Number is assigned 1 at the top of the loop. Visual Basic then executes the body of the loop using the value of 1 for Number. With 
Number being equal to 1, line 3 works as follows the first time through the loop:


<BR>

<BR>

<PRE>

<FONT COLOR="#000080">Sum = Sum + 1</FONT></PRE>

<P>When Visual Basic executes the Next Number statement, Visual Basic returns to the top of the loop (the For statement), adds the Step value of 1 to Number, and continues the loop again 
using 2 as Number in the loop's body. Therefore, the second time 
through the loop, line 3 works as follows:

<BR>

<BR>

<PRE>

<FONT COLOR="#000080">Sum = Sum + 2</FONT></PRE>

<P>The loop continues, adding the default Step value of 1 to Number each time 
that the loop executes. When Number becomes 10 (the <I>EndVal</I>), the loop finishes and the statement following the Next statement continues.

<BR>

<BLOCKQUOTE>

<BLOCKQUOTE>

<HR ALIGN=CENTER>

<BR>

<NOTE><B>Tip: </B>Remember, the For loop terminates 
when the <I>CounterVar</I> becomes larger than the <I>EndVal</I>. There's an exception to this: If you code a negative Step value, the loop terminates when the <I>CounterVar</I> becomes smaller than the 
<I>EndVal,</I> as you'll see a little later in this 
section.</NOTE>

<BR>

<HR ALIGN=CENTER>

</BLOCKQUOTE></BLOCKQUOTE>

<P>You don't need the For statement to sum the values of 1 through 10. You could code one long assignment statement like this:

<BR>

<BR>

<PRE>

<FONT COLOR="#000080">Sum = 1 + 2 + 3 + 
4 + 5 + 6 + 7 + 8 + 9 + 10</FONT></PRE>

<P>You could also code back-to-back assignment statements like this:

<BR>

<PRE>

<FONT COLOR="#000080">Sum = Sum + 1

Sum = Sum + 2

Sum = Sum + 3

Sum = Sum + 4

Sum = Sum + 5

Sum = Sum + 6

Sum = Sum + 7

Sum = 
Sum + 8

Sum = Sum + 9

Sum = Sum + 10</FONT></PRE>

<P>Neither of these approaches is extremely difficult, but what if you needed to add together the first one hundred integer Numbers? The previous assignments could become tedious indeed, but the For loop 
to add the first one hundred integers is just as 
easy to code as for the first 10 integers, as Listing 10.5 demonstrates.

<BR>

<P>

<FONT COLOR="#000080"><B>Listing 10.5. Add the Numbers from 1 to 100.</B></FONT>

<BR>

<PRE>

<FONT COLOR="#000080">1: 
Sum = 0

2: For Number = 1 To 100 ' Only this line changes

3: Sum = Sum + Number

4: Next Number</FONT></PRE>

<P>The following loop displays five message boxes:

<BR>

<PRE>

<FONT COLOR="#000080">For c = 1 To 20 Step 4

 MsgBox &quot;This is a message 
box&quot;

Next c</FONT></PRE>

<BLOCKQUOTE>

<BLOCKQUOTE>

<HR ALIGN=CENTER>

<BR>

<NOTE><I>Definition: </I>A loop <I>iteration</I> is one full loop cycle.</NOTE>

<BR>

<HR ALIGN=CENTER>

</BLOCKQUOTE></BLOCKQUOTE>

<P>The loop counts up from 1 to 20 by 
4s, putting each count into the variable named c and printing a message box each time. The Step value changes how Visual Basic updates the <I>CounterVar</I> each time that the loop iterates.

<BR>

<P>If you specify a negative Step value, Visual Basic 
counts <I>down</I>. The following loop rings the PC's speaker five times:

<BR>

<PRE>

<FONT COLOR="#000080">For i = 5 To 1 Step -1

 Beep

Next i</FONT></PRE>

<BLOCKQUOTE>

<BLOCKQUOTE>

<HR ALIGN=CENTER>

<BR>

<NOTE><B>Warning: </B>If you specify a 
negative Step value, the <I>EndVal</I> must be less than the <I>StartVal</I> or Visual Basic will execute the loop only once.</NOTE>

<BR>

<HR ALIGN=CENTER>

</BLOCKQUOTE></BLOCKQUOTE>

<BLOCKQUOTE>

<BLOCKQUOTE>

<HR ALIGN=CENTER>

<BR>

<NOTE>You Can 
Terminate Loops Early: Sometimes, you'll be processing user input or several data values using looping statements, and an exception occurs in the data that requires an immediate termination of the loop. For example, you may be collecting 
sales values for 
a company's ten divisions inside a For loop that iterates ten times. However, the user can enter zero for a division's sales value, indicating that there is no sales data for that division. Rather than complete the loop, your program might 
need to quit 
the loop at that point because the full divisional report information can't be gathered at the time.

<BR>The Exit Do and the Exit For statements automatically terminate loops. No matter what the Do loop's relational test results in, or no matter how many 
more iterations are left in a For loop, when Visual Basic encounters an Exit Do or Exit For statement, 
Visual Basic immediately quits the loop and sends execution down to the statement following the loop.

<BR>Typically, an If statement triggers one of 
the Exit statements like this:

<BR>For Divisions = 1 To 10

<BR> ' Code to get a sales value

<BR> If (sales = 0) Then

<BR> Exit For ' Quit the loop early

<BR> End If

<BR> ' Process the rest of the code

<BR>Next Divisions

<BR>The If ensures that the 
Exit For executes only under one specific condition (a missing sales value). Without that specific condition triggering the Exit For, the loop cycles normally.</NOTE>

<BR>

<HR ALIGN=CENTER>

</BLOCKQUOTE></BLOCKQUOTE>

<P><FONT COLOR="#FF8000"><B><I>Stop 
and Type: </I></B></FONT>Listing 10.6 contains a fairly comprehensive For loop that computes compound interest for an initial investment of $1,000.00. The code appears inside the Click event procedure for a command 
button named cmdInt. In case you're not 
familiar with compound interest, each year the amount of money invested, including interest earned so far, compounds to build more money. Each time period, normally a year, means that another year's interest must be 
added to the value of the investment. A 
For loop is perfect for calculating interest. Listing 10.6 uses five compound cycles.

<BR>

<P><FONT COLOR="#FF8000"><B><I>Review: </I></B></FONT>The For loop repeats a block of one or more statements of Visual Basic code. Unlike the Do loops, the For 
loop iterates for a specified Number of times as controlled by the For statement's control 
values and variables.

<BR>

<P>

<FONT COLOR="#000080"><B>Listing 10.6. Using a </B><B>For</B><B> loop to calculate compound interest.</B></FONT>

<BR>

<PRE>


<FONT COLOR="#000080">1: Sub cmdInt_Click ()

2: ' Use a For loop to calculate a final total

3: ' investment using compound interest.

4: ' Num is a loop control variable

5: ' IRate is the annual interest rate

6: ' Term is the Number of years in the 
investment

7: ' InitInv is the investor's initial investment

8: ' Interest is the total interest paid

9: Dim IRate, Interest As Single

10: Dim Term, Num As Integer

11: Dim InitInv As Currency

12:

13: IRate = .08

14: Term = 5

15: InitInv = 1000.00


16: Interest = 1 ' Begin at one for first compound

17: 

18: ' Use loop to calculate total compound amount

19: For Num = 1 To Term

20: Interest = Interest * (1 + IRate)

21: Next

22:

23: ' Now we have total interest,

24: ' calculate the total 
investment

25: ' at the end of N years

26: lblFinalInv.Caption = InitInv * Interest

27: End Sub</FONT></PRE>

<P><FONT COLOR="#FF8000"><B><I>Analysis: </I></B></FONT>This analysis focuses on the loop and not the interest calculation. The most important 
thing that you can do at this point is to master the For looping statement. Lines 1 through 8 contain fairly 
extensive remarks. The remarks contain variable descriptions so that anyone looking at the code or changing the code later will know what the 
variables are for.

<BR>

<P>After the program defines all the variables in lines 9 through 11, the variables are initialized with start-up values in lines 13 through 16. If you use this event procedure, be sure to add a label named lblFinalInv to a form 
and add a command button to 
the form named cmdInt. Line 15 will seem to give you trouble as you type it unless you remember Lesson 2's description of data suffix characters. Visual Basic uses the pound sign, #, to indicate double-precision values, and 
Visual Basic will assume that 
1000.00 is a double-precision value (I don't know why) and will convert the 1000.00 to 1000# right after you press Enter at the end of the line! Don't worry about Visual Basic's pickiness here.

<BR>

<P>The most important 
part of this program appears on lines 19 through 21. Line 19 begins a For loop that iterates through each interest rate period (five of them), compounding the interest on top of the investment to date on line 20. Again, don't let the 
finance worry you. 
The calculation is less important than understanding the looping process. After the loop finishes, line 26 completes the event procedure by placing the compounded investment in the label. By the way, if you do implement this event 
procedure in your own 
application, the investment will appear in the window as a double-precision Number with several decimal places showing. You'll learn how to format the data into dollars and cents in lesson 7.

<BR>

<BR>

<A NAME="E68E83"></A>

<H3 ALIGN=CENTER>

<CENTER>


<FONT SIZE=5 COLOR="#FF0000"><B>Homework</B></FONT></CENTER></H3>

<BR>

<BR>

<A NAME="E69E67"></A>

<H4 ALIGN=CENTER>

<CENTER>

<FONT SIZE=4 COLOR="#FF0000"><B>General Knowledge</B></FONT></CENTER></H4>

<BR>

<OL>

<LI>What is a loop?

<BR>

<BR>


<LI>How many different kinds of looping statements does Visual Basic support?

<BR>

<BR>

<LI>How many different Do statements does Visual Basic support?

<BR>

<BR>

<LI>True or false: A <I>block</I> can consist of a single statement.

<BR>

<BR>


<LI>What is an infinite loop?

<BR>

<BR>

<LI>How can you utilize a loop for correcting user errors?

<BR>

<BR>

<LI>How many times does the following loop execute?

<BR>I = 10

<BR>Do While I &gt; 1

<BR> I = I - 1

<BR>Loop

<BR>

<BR>

<LI>How many 
times does the following loop execute?

<BR>I = 10

<BR>Do While I &gt;= 1

<BR> I = I - 1

<BR>Loop

<BR>

<BR>

<LI>How many times does the following loop execute?

<BR>I = 10

<BR>Do Until I &gt; 1

<BR> I = I - 1

<BR>Loop

<BR>

<BR>

<LI>How many 
times does the following loop execute?

<BR>For I = 1 To 10

<BR> Beep

<BR>Loop

<BR>

<BR>

<LI>What Step value does Visual Basic assume if you don't specify any Step value?

<BR>

<BR>

<LI>Which statement, the Do or For statement, supports a loop that 
continues for a specified Number of times?

<BR>

<BR>

<LI>Which statement, the Do or For statement, supports a loop that continues according the a relational test?

<BR>

<BR>

<LI>What is the difference between a Do While and a Do Until loop?

<BR>


<BR>

<LI>What is the difference between a Do While and a Do-Loop While loop?

<BR>

<BR>

<LI>What is an <I>iteration</I>?

<BR>

<BR>

<LI>How can you force a For loop to count down rather than up?

<BR>

<BR>

<LI>If a For loop's initial starting value 
is greater than the ending value, what must be true for the increment value?

<BR>

<BR>

<LI>What statements terminate Do and For loops early?

<BR>

<BR>

</OL>

<BR>

<A NAME="E69E68"></A>

<H4 ALIGN=CENTER>

<CENTER>

<FONT SIZE=4 
COLOR="#FF0000"><B>Write Code That...</B></FONT></CENTER></H4>

<BR>

<OL>

<LI>Write a program that assigns the value of 34 to a variable and then asks the user to guess the Number using an input box. Use a Do loop to check the user's guess and keep 
asking for additional guesses until the user guesses the Number.

<BR>

<BR>

</OL>

<BR>

<A NAME="E69E69"></A>

<H4 ALIGN=CENTER>

<CENTER>

<FONT SIZE=4 COLOR="#FF0000"><B>Find the Bug</B></FONT></CENTER></H4>

<BR>

<OL>

<LI>Larry, a fledgling 
programmer, wrote the following For loop that seems to be in an infinite loop. Can you spot the problem?

<BR>For i = 1 To 25

<BR> Total = Total * I

<BR> i = i - 1

<BR>Next i

<BR>

<BR>

<LI>Kim wants her For loop to loop for 100 iterations but she's 
having trouble. Tell Kim what's wrong with the following attempt:

<BR>For I = 100 To 1 Step 1

<BR>

<BR>

</OL>

<BR>

<A NAME="E69E70"></A>

<H4 ALIGN=CENTER>

<CENTER>

<FONT SIZE=4 COLOR="#FF0000"><B>Extra Credit</B></FONT></CENTER></H4>

<BR>

<P>A 
<I>nested loop</I> is a loop within a loop. The outer loop determines how many times the inner loop executes. See whether you can determine how many times the following code beeps the user.

<BR>For i = 1 To 5 ' The outer loop

<BR> For j = 1 To 3 ' The 
inner loop

<BR> Beep

<BR> Next j ' Inner loop completes before

<BR>Next i ' outer loop iterates again

<BR>

<P ALIGN=LEFT>

<A HREF="vel09.htm" TARGET="_self"><IMG SRC="purprev.gif" WIDTH = 32 HEIGHT = 32 BORDER = 0 ALT="Previous Page"></A>

<A 
HREF="#I0" TARGET="_self"><IMG SRC="purtop.gif" WIDTH = 32 HEIGHT = 32 BORDER = 0 ALT="Page Top"></A>

<A HREF="index.htm" TARGET="_self"><IMG SRC="purtoc.gif" WIDTH = 32 HEIGHT = 32 BORDER = 0 ALT="TOC"></A>

<A HREF="velp05.htm" TARGET="_self"><IMG 
SRC="purnext.gif" WIDTH = 32 HEIGHT = 32 BORDER = 0 ALT="Next Page"></A>


</BODY></HTML>







