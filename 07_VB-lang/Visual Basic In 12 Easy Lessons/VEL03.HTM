<HTML>

<HEAD>

<TITLE>Visual Basic in 12 Easy Lessons vel03.htm </TITLE>

<LINK REL="ToC" HREF="index.htm">

<LINK REL="Index" HREF="htindex.htm">

<LINK REL="Next" HREF="vel04.htm">

<LINK REL="Previous" HREF="velp01.htm"></HEAD>

<BODY BGCOLOR="#FFFFFF" 
TEXT="#000000" LINK="#0000FF" VLINK="#800080">

<A NAME="I0"></A>

<H2>Visual Basic in 12 Easy Lessons vel03.htm</H2>

<P ALIGN=LEFT>

<A HREF="velp01.htm" TARGET="_self"><IMG SRC="purprev.gif" WIDTH = 32 HEIGHT = 32 BORDER = 0 ALT="Previous Page"></A>

<A 
HREF="index.htm" TARGET="_self"><IMG SRC="purtoc.gif" WIDTH = 32 HEIGHT = 32 BORDER = 0 ALT="TOC"></A>

<A HREF="vel04.htm" TARGET="_self"><IMG SRC="purnext.gif" WIDTH = 32 HEIGHT = 32 BORDER = 0 ALT="Next Page"></A>

</A>
<HR ALIGN=CENTER>

<P>

<UL>

<UL>

<UL>

<LI>

<A HREF="#E68E21" >What You'll Learn</A>

<LI>

<A HREF="#E68E22" >Loading and Running a Program</A>

<LI>

<A 
HREF="#E68E23" >The Label Control</A>

<LI>

<A HREF="#E68E24" >The Text Box Control</A>

<LI>

<A HREF="#E68E25" >Command Buttons are Fun!</A>

<LI>

<A HREF="#E68E26" >Check Box Controls</A>

<LI>

<A HREF="#E68E27" >Option Buttons Limit the Choices</A>


<LI>

<A HREF="#E68E28" >Dropdown Combo Lists</A>

<LI>

<A HREF="#E68E29" >Simple Combo Box</A>

<LI>

<A HREF="#E68E30" >The List Box for Selections</A>

<LI>

<A HREF="#E68E31" >Homework</A>

<UL>

<LI>

<A HREF="#E69E29" >General Knowledge</A>

<LI>


<A HREF="#E69E30" >Find the Bug</A>

<LI>

<A HREF="#E69E31" >Extra Credit</A></UL></UL></UL></UL>

<HR ALIGN=CENTER>

<A NAME="E66E4"></A>

<H1 ALIGN=CENTER>

<CENTER>

<FONT SIZE=6 COLOR="#FF0000"><B>Lesson 2, Unit 3</B></FONT></CENTER></H1>

<BR>

<A 
NAME="E67E7"></A>

<H2 ALIGN=CENTER>

<CENTER>

<FONT SIZE=6 COLOR="#FF0000"><B>Contents of Visual Basic Programs</B></FONT></CENTER></H2>

<BR>

<BR>

<A NAME="E68E21"></A>

<H3 ALIGN=CENTER>

<CENTER>

<FONT SIZE=5 COLOR="#FF0000"><B>What You'll 
Learn</B></FONT></CENTER></H3>

<BR>

<UL>

<LI> [lb] Loading and running a program

<BR>

<BR>

<LI> [lb] The label control

<BR>

<BR>

<LI> [lb] The text box control

<BR>

<BR>

<LI> [lb] Command buttons are fun!

<BR>

<BR>

<LI> [lb] Check box 
controls

<BR>

<BR>

<LI> [lb] Option buttons limit the choices

<BR>

<BR>

<LI> [lb] You've been framed

<BR>

<BR>

<LI> [lb] Drop-down combo lists

<BR>

<BR>

<LI> [lb] A simple combo box

<BR>

<BR>

<LI> [lb] The list box for selections

<BR>

<BR>


</UL>

<P>This unit explains all about the format of Visual Basic programs. Unlike most programming languages, the Visual Basic language contains text commands as well as graphical controls. The text commands interact with the controls to produce the 
output of 
the program and the interactions with the user.

<BR>

<P>This unit concentrates on the graphical controls that you put in Visual Basic programs. As you read further into this book, you will gain a deep understanding of how the commands work. 
Some of the Visual Basic commands are easy, and some are complex. 
This unit concentrates on explaining the contents of programs. It shows you how to load and run Visual Basic programs.

<BR>

<P><B>Note: </B>This is a hands-on unit. You will use Visual 
Basic as you progress through this unit to learn how each of Visual Basic's graphical tools work.

<BR>

<BR>

<A NAME="E68E22"></A>

<H3 ALIGN=CENTER>

<CENTER>

<FONT SIZE=5 COLOR="#FF0000"><B>Loading and Running a Program</B></FONT></CENTER></H3>

<BR>


<P><FONT COLOR="#FF8000"><B><I>Concept: </I></B></FONT>Once you start Visual Basic, you can create a program. Once you create a program, you can save that program and load and run it later. This unit gives you practice in loading and running a program that 

is stored on the disk that comes with this book.

<BR>

<BLOCKQUOTE>

<BLOCKQUOTE>

<HR ALIGN=CENTER>

<BR>

<NOTE><I>Definition: </I>Users perform I/O with <I>controls</I>.</NOTE>

<BR>

<HR ALIGN=CENTER>

</BLOCKQUOTE></BLOCKQUOTE>

<P>This book's disk 
comes with a program that demonstrates several of the most important controls in Visual Basic. A control handles much of the user's input and output, often called <I>I/O</I>. In other words, when someone (the user) runs the program that 
you (the 
programmer) creates, the user must interact with the program by providing answers to questions and selecting options displayed on the screen.

<BR>

<P>Remember that the Toolbox window is where you get the controls that you place on the Form window. The 
Form window is the background of the application that you are creating. Figure 3.1 shows where the controls appear on the Toolbox window.

<BR>

<P><B> <A HREF="03vel01.gif">Figure 3.1. The controls that your program needs </B><B>are available on the 
Toolbox window.</A></B>

<BR>

<BLOCKQUOTE>

<BLOCKQUOTE>

<HR ALIGN=CENTER>

<BR>

<NOTE>The Project File: A Visual Basic program rarely resides in a single file. Most of the time, it takes several files to describe a single Visual Basic application. It 
often helps to separate the pieces of a Windows program into multiple files.

<BR>For example, there is almost always a form file. The form file holds the contents of the Form window that you create as well as all the code that manipulates the objects on 
the Form window. You might also write additional code that you want to store in 
a separate file. If your the application requires special controls that do not regularly appear on the Visual Basic Toolbox window, you must add those control files to the 
application, too.</NOTE>

<BR>

<HR ALIGN=CENTER>

</BLOCKQUOTE></BLOCKQUOTE>

<BLOCKQUOTE>

<BLOCKQUOTE>

<HR ALIGN=CENTER>

<BR>

<NOTE>The Project window contains a list of every file in the application. By default, the Visual Basic Primer disk always 
adds three files to every application's Project window: A form file with the default name FORM1.FRM and two special Visual Basic 
controls called GRID.VBX (more commonly known as the <I>grid control</I>) and OLECLIEN.VBX (called the <I>OLE control</I>). 
For now, don&#146;t worry about the special controls.

<BR>The Project window's contents are described in yet another file, which is called the <I>project file</I>. Every application has a project file, which always ends with a .MAK extension. When you 
want to load and run an application, you load its project 
file; Visual Basic ensures that all files in the project are loaded as well.</NOTE>

<BR>

<HR ALIGN=CENTER>

</BLOCKQUOTE></BLOCKQUOTE>

<P>There is a program on this book's disk described in the 
project file called CONTROLS.MAK. Follow these steps to load CONTROLS.MAK:

<BR>

<OL>

<LI>Start Visual Basic if it is not running.

<BR>

<BR>

<LI>Select File Open Project from the menu bar. Visual Basic displays the standard Windows File Open dialog 
box.

<BR>

<BR>

<LI>Select the disk and path name of the Visual Basic Primer system if the disk and pathname are different from the location of your Visual Basic Primer system. Select or type the following filename at the File Name prompt: 
<B>CONTROLS.MAK</B>. You can 
type the name in either uppercase or lowercase letters.

<BR>

<BR>

<LI>  Visual Basic loads the project. When Visual Basic finds the CONTROLS.MAK project file, it reads the file and loads all the files related to that 
particular project. You can see from the Project window that Visual Basic has loaded three files.

<BR>

<BR>

<LI>CONTROLS.MAK does not use two of its three files. The GRID.VBX and OLECLIEN.VBX files are extremely advanced; you can ignore them for now. 
Visual Basic does not usually display the form when you open a project file. To see the form, press the View Form 
button on the Project window. Your screen will look like the one in Figure 3.2.

<BR>

<BR>

</OL>

<P><B> <A HREF="03vel02.gif">Figure 3.2. 
The Form window is often very </B><B>crowded.</A></B>

<BR>

<P>The Form window works like an artist's easel of paper. Actually, the Form window works more like an artist's easel of one or more transparencies with something differently drawn on each 
transparency. CONTROLS.MAK contains several controls placed on top 
of one other. The program looks like a mess.

<BR>

<P>When the user runs the program, he sees the Form window. What the user sees, however, does not always look like the Form window when 
the program is first loaded. In other words, you are now looking at all the pieces of the program piled on top of each 
other. When the user&#151; <I>you,</I> in this case&#151;runs the program, the program ensures that those pieces appear in a logical 
order and do not overlap.

<BR>

<P>Before you or anyone else can run a program from within the Visual Basic environment, you must load the program through the File Open command, just as you have done. Once you load a program, you have three ways to run 
it:

<BR>

<UL>

<LI> [lb] Select Run Start from the menu bar.

<BR>

<BR>

<LI> [lb] Press F5, the shortcut access key for the Run Start menu command.

<BR>

<BR>

<LI> [lb] Press the Start button on the toolbar. (As you saw in the previous unit, the 
Start button looks like the Play button on a cassette recorder.)

<BR>

<BR>

</UL>

<P>Use one of these three methods to run the program. You will see the more organized and less cluttered screen shown in Figure 3.3. The program's initializing 
instructions cleaned up the mess that you originally saw in the Form window. As you can see, the 
Form window of the Visual Basic environment becomes the application's background (minus the grid of dots in the background).

<BR>

<P><B> <A 
HREF="03vel03.gif">Figure 3.3. The running program is much </B><B>cleaner.</A></B>

<BR>

<P>This program demonstrates each of the primary Visual Basic controls so that you can familiarize yourself with using them before you place them in your own 
applications.

<BR>

<BLOCKQUOTE>

<BLOCKQUOTE>

<HR ALIGN=CENTER>

<BR>

<NOTE><B>Tip: </B>Notice that the program contains an Exit command button in the lower-right corner. All of this book's applications offer an Exit command button so that you can 
terminate the program whenever you want. When you create your own programs, 
always give your user a way to exit the program.</NOTE>

<BR>

<HR ALIGN=CENTER>

</BLOCKQUOTE></BLOCKQUOTE>

<P><FONT COLOR="#FF8000"><B><I>Review: </I></B></FONT>Before you can 
run a Visual Basic program, you must load it. Generally, you load the project file, which always ends with a .MAK extension. Loading the project causes Visual Basic to load all the files 
related to the application. Without a mechanism such as a project 
file, you would have to keep track of all the files related to every application and load each of them individually whenever you wanted to run a Visual Basic program. Once Visual Basic loads 
all the files related to the project, you can run the program 
and see what the program does.

<BR>

<BR>

<A NAME="E68E23"></A>

<H3 ALIGN=CENTER>

<CENTER>

<FONT SIZE=5 COLOR="#FF0000"><B>The Label Control</B></FONT></CENTER></H3>

<BR>

<P><FONT COLOR="#FF8000"><B><I>Concept: </I></B></FONT>The label control is 
one of the simplest controls to work with. With the label control, you can add descriptive text to the form in any location by using different styles and sizes of fonts.

<BR>

<P>The label control, appearing on the Toolbox window with a capital letter 
<I>A,</I> holds text. The user sees the text on the resulting application. The title of the CONTROLS.MAK application, Have fun with controls! is placed on the form with the label 
control.

<BR>

<P>As you will see as you progress through this book, you 
can set several property values as you place controls. You manage the size of the control and the way the control looks. You can specify a large font size or a small font size, a font style based on 
any available font style in your Windows system, whether 
you want the font boldfaced, italicized, or struck through with the strikethrough font style, where the text has a straight line drawn through it.

<BR>

<P>You can draw a box around the label and shade its background any color that you want. Look again at 
the running program. You can see a command button labeled Next Control. Click this command button with the mouse or press Alt+C. Two new labels will 
appear in the middle of the screen, as shown in Figure 3.4.

<BR>

<P><B> <A HREF="03vel04.gif">Figure 
3.4. Two additional label controls appear </B><B>in the center of the form.</A></B>

<BR>

<BLOCKQUOTE>

<BLOCKQUOTE>

<HR ALIGN=CENTER>

<BR>

<NOTE><B>Tip: </B>If a command button contains an underlined character&#151;for example, the Next Control 
command button at the right edge of the program window in Figure 3.4&#151;the underlined character represents the shortcut access keystroke. You can 
combine the Alt key with the shortcut access key to trigger a press of the command button.</NOTE>

<BR>


<HR ALIGN=CENTER>

</BLOCKQUOTE></BLOCKQUOTE>

<BLOCKQUOTE>

<BLOCKQUOTE>

<HR ALIGN=CENTER>

<BR>

<NOTE><B>Warning: </B>The user cannot change the text on a label directly. Through code, you can change the label's text in response to a user's action when 
the need arises. Generally, however, you will set the text within a label when you design the 
program.</NOTE>

<BR>

<HR ALIGN=CENTER>

</BLOCKQUOTE></BLOCKQUOTE>

<P><FONT COLOR="#FF8000"><B><I>Review: </I></B></FONT>The label control is one of the 
easiest controls to add to your applications. Whenever you need to display text within a title or a description for another control, the label control enables you to 
display the text with various font sizes and styles.

<BR>

<BR>

<A NAME="E68E24"></A>


<H3 ALIGN=CENTER>

<CENTER>

<FONT SIZE=5 COLOR="#FF0000"><B>The Text Box Control</B></FONT></CENTER></H3>

<BR>

<P><FONT COLOR="#FF8000"><B><I>Concept: </I></B></FONT>Unlike the label control, the user can change values within a text box control. You can 
get answers from the user by using text box controls.

<BR>

<P>When you click the Next Control command button on the running program, the labels that you displayed earlier disappear and a text box appears in their place, as shown in Figure 3.5.

<BR>


<P><B> <A HREF="03vel05.gif">Figure 3.5. The user can change the text within a </B><B>text box.</A></B>

<BR>

<BLOCKQUOTE>

<BLOCKQUOTE>

<HR ALIGN=CENTER>

<BR>

<NOTE><B>Tip: </B>If you display a text box that has no initial text within it, the user can 
type text in the text box control in response to a question that you ask. Sometimes, however, you will display initial text within the text box that the user can 
use as a default value, changing the text only if the default is not the needed value.</NOTE>


<BR>

<HR ALIGN=CENTER>

</BLOCKQUOTE></BLOCKQUOTE>

<P>Click the mouse cursor anywhere within the Change this! text box. Type new text in the box. Type lots of text in the text box. The text scrolls to the right to accommodate the new text. You can use 
the arrow keys to move the cursor back and forth within 
the text box. Also, the Ins and Del keys work just as they do in a word processor. With these two keys, you can insert and delete text from the text box.

<BR>

<P>The text box control&#151;the 
control with the lowercase ab enclosed in a box&#151;enables you to set an initial value and to control how the text's font style and size appear when the user sees or enters text in the text box. You can control whether 
the text box contains horizontal 
and vertical scroll bars so that the user can scroll through the text with scroll bars or with the regular arrow keys.

<BR>

<P><FONT COLOR="#FF8000"><B><I>Review: </I></B></FONT>When the user must enter new text or change existing text, use the text box 
control to place an area on the screen for the user's keystrokes. The text box control works just like a mini word processor.

<BR>

<BR>

<A NAME="E68E25"></A>

<H3 ALIGN=CENTER>

<CENTER>

<FONT SIZE=5 COLOR="#FF0000"><B>Command Buttons are 
Fun!</B></FONT></CENTER></H3>

<BR>

<P><FONT COLOR="#FF8000"><B><I>Concept: </I></B></FONT>You have seen command buttons in almost every Windows program, including Visual Basic and the currently-running CONTROLS.MAK application. Command buttons give users 
push-button access to events that 
you place within an application.

<BR>

<P>A command button appears on the screen just as push buttons appear on a VCR or on your keyboard. The CONTROLS.MAK program contains two command buttons that stay on the screen at 
all times: The Next Control command button and the Exit command button. As 
you already know, you can trigger a command button's press with a mouse click or with a shortcut access keystroke.

<BR>

<P>Press the Next Control command button now to see a 
third command button replace the text box control in the middle of the screen of the running CONTROLS.MAK application. Figure 3.6 shows the screen after the command button is displayed.

<BR>

<P><B> <A HREF="03vel06.gif">Figure 3.6. A command button 
controlled by the </B><B>program.</A></B>

<BR>

<P>Virtually anything can happen when the user clicks a command button. You, the programmer, control exactly what happens. Go ahead and press the CONTROLS.MAK command button. Look&#151;and listen 
to&#151;what happens. The computer beeps, and the command 
button&#146;s caption changes from Press Me to Once Again. Press the command button again to hear the beep once more and to restore the command button to its original Press Me state.

<BR>

<P>You 
set the command button's caption usually when that you design and write a program. As you can see, you can write the program so that the command button's caption changes when the user clicks the button.

<BR>

<P><FONT COLOR="#FF8000"><B><I>Review: 
</I></B></FONT>A Windows application without command buttons is like day without night. (Okay, that's exaggerating.) Command buttons supply push button access to events that you want the user to trigger.

<BR>

<BR>

<A NAME="E68E26"></A>

<H3 
ALIGN=CENTER>

<CENTER>

<FONT SIZE=5 COLOR="#FF0000"><B>Check Box Controls</B></FONT></CENTER></H3>

<BR>

<P><FONT COLOR="#FF8000"><B><I>Concept: </I></B></FONT>Check box controls offer multiple-choice values from which the user can select. Once the user 
selects one or more check boxes, your program can analyze the selected check boxes and make decisions based 
on those responses.

<BR>

<P>Click the Next Control command button to see the list of three check box values shown in Figure 3.7. The check boxes 
offer the user a way to select one or more values from a list of values that you display.

<BR>

<P><B> <A HREF="03vel07.gif">Figure 3.7. Two of the three check boxes are </B><B>selected.</A></B>

<BR>

<P>With the mouse, click the first and last check 
boxes on the running CONTROLS.MAK application, as shown in Figure 3.7. When you select a check box, the boxes to the left of the descriptions fills with an X.

<BR>

<P>Once you click these two controls, the two values are said to be <I>selected,</I> and 
the middle value is <I>unselected</I> or <I>not selected</I>. You can <I>deselect</I> a check box by clicking it a second time. Click the Pears check box to deselect 
that check box. The X leaves the check box when you deselect the box.

<BR>

<BLOCKQUOTE>


<BLOCKQUOTE>

<HR ALIGN=CENTER>

<BR>

<NOTE><B>Tip: </B>You can click not only on the box but anywhere within a text box's description. Therefore, to select or deselect the Pears check box, you can click the mouse cursor over the box next to Pears or 
click on the word Pears.</NOTE>

<BR>

<HR ALIGN=CENTER>

</BLOCKQUOTE></BLOCKQUOTE>

<P>There is also a way to select check boxes without the mouse. The user can press the Tab key until the check box description highlights. To select it, the user presses 
the Spacebar.

<BR>

<P><FONT COLOR="#FF8000"><B><I>Review: </I></B></FONT>Check boxes give your users multiple-choice access to choices that they need to make. Users select and deselect check boxes with the mouse or keyboard. Once the user selects all the 
check boxes needed, 
a command button keypress can signal to the running application that the user is finished. Your program then can check which values the user selected.

<BR>

<BR>

<A NAME="E68E27"></A>

<H3 ALIGN=CENTER>

<CENTER>

<FONT SIZE=5 
COLOR="#FF0000"><B>Option Buttons Limit the Choices</B></FONT></CENTER></H3>

<BR>

<P><FONT COLOR="#FF8000"><B><I>Concept: </I></B></FONT>Unlike check boxes, option buttons give your users a list from which to choose, but they can select exactly one 
option out of the list.

<BR>

<P>Often, the option button controls are known as <I>mutually-exclusive</I> controls. Unless you group sets of option buttons in <I>frames</I> (described later in this unit), the user can select one and only one option button 
at a time.

<BR>

<P>Click the Next Control command button to see the CONTROLS.MAK option buttons on your screen like the ones shown in Figure 3.8. Initially, no options are selected.

<BR>

<P><B> <A HREF="03vel08.gif">Figure 3.8. Option buttons work 
almost like </B><B>mutually-exclusive check boxes.</A></B>

<BR>

<P>With the mouse, click one of the option buttons. Click another option button. At once, Visual Basic deselects the first option button and selects the one you just clicked. Select another 
option button to change the selected option once again. As you can 
see, Visual Basic ensures that you can select only one option at a time. Instead of check boxes, which permit multiple selections, you would display option buttons for the user whenever he 
can make only one choice out of several.

<BR>

<BLOCKQUOTE>

<BLOCKQUOTE>

<HR ALIGN=CENTER>

<BR>

<NOTE><B>Tip: </B>Think ahead when you use option buttons. For example, you can select an initial option button for the user, through code or through the 
Properties window, when you write the program. By selecting an initial option button, you ensure that 
the user knows the best choice in a given situation, assuming there is a good default value that you can select.</NOTE>

<BR>

<HR ALIGN=CENTER>


</BLOCKQUOTE></BLOCKQUOTE>

<P><FONT COLOR="#FF8000"><B><I>Review: </I></B></FONT>The option buttons work like check box controls except that, whereas the check box controls permit multiple selections, the user can select at most one option button at a 
time.

<BR>

<P><B>You've Been Framed</B>

<P><FONT COLOR="#FF8000"><B><I>Concept: </I></B></FONT>The frame control enables you to group items together on a form. The group works almost like a miniform within the form.

<BR>

<P>Although the user can 
select only one option button at a time, you can set up groups of option buttons on the same form. The user can then select one option button at a time from <I>within each frame</I>.

<BR>

<BLOCKQUOTE>

<BLOCKQUOTE>

<HR ALIGN=CENTER>

<BR>


<NOTE><I>Definition: </I>A <I>frame</I> is a box in which you can place control groups.</NOTE>

<BR>

<HR ALIGN=CENTER>

</BLOCKQUOTE></BLOCKQUOTE>

<P>You must always enclose the group within a frame by using the frame control. If you press the Next 
Control button again, you will see a frame appear in the middle of the form, as shown in Figure 3.9. You can place any controls in a frame, not just 
option buttons as in the figure.

<BR>

<P><B> <A HREF="03vel09.gif">Figure 3.9. A frame with a command 
button and two </B><B>option button controls.</A></B>

<BR>

<P>If three frames of option button groups appeared on the form, you could select a maximum of three option buttons on the form&#151;one in each framed set.

<BR>

<BLOCKQUOTE>

<BLOCKQUOTE>

<HR 
ALIGN=CENTER>

<BR>

<NOTE><B>Note: </B>To keep things simple at this point, only one control is discussed at a time. Only one set of option buttons currently appears on your form. There is no special reason to group them together except to show what a 
frame is.</NOTE>

<BR>

<HR ALIGN=CENTER>

</BLOCKQUOTE></BLOCKQUOTE>

<P><FONT COLOR="#FF8000"><B><I>Review: </I></B></FONT>By framing objects together with the frame control, you can set up groups of controls that work together as if they were each on 
their own miniform within the larger Form window.

<BR>

<BR>

<A NAME="E68E28"></A>

<H3 ALIGN=CENTER>

<CENTER>

<FONT SIZE=5 COLOR="#FF0000"><B>Dropdown Combo Lists</B></FONT></CENTER></H3>

<BR>

<P><FONT COLOR="#FF8000"><B><I>Review: </I></B></FONT>A 
dropdown combo list is one of three kinds of lists that you can provide for your user. The dropdown list saves room on the screen by consuming only a single line on the form until the user opens the 
list to display the rest of the items in it.

<BR>


<P>The combo box control actually turns into two different kinds of controls on the form, depending on how you set up the combo box. The two kinds of combo boxes are

<BR>

<UL>

<LI> [lb] Dropdown combo boxes

<BR>

<BR>

<LI> [lb] Simple combo boxes


<BR>

<BR>

</UL>

<P>Press Next Control to see the combo dropdown box on the screen. As so often is the case, a command button appears next to the combo dropdown box. (See how you can resize every control, including command buttons, so that the controls 
consume exactly as 
much screen space as needed?)

<BR>

<P>A list of items is stored in this dropdown combo box. To see the list, click the down arrow at the right of the empty dropdown combo box. You will see the list of electronic gear shown in Figure 
3.10. Click the down arrow again. The list folds back up 
leaving the screen clear of the extra clutter.

<BR>

<P><B> <A HREF="03vel10.gif">Figure 3.10. After opening the dropdown combo box </B><B>control.</A></B>

<BR>

<BLOCKQUOTE>

<BLOCKQUOTE>

<HR 
ALIGN=CENTER>

<BR>

<NOTE><B>Tip: </B>When screen real estate space is precious, use a dropdown combo box control when you must offer a list of items to the user. The user can display the list when he needs to see what is in the list, and he can restore 
the list to its normal 
state when he is finished.</NOTE>

<BR>

<HR ALIGN=CENTER>

</BLOCKQUOTE></BLOCKQUOTE>

<P>The blank space at the top of the list is for the user to add additional items to the dropdown combo box. You will want to add a command 
button next to the combo box, as in CONTROLS.MAK, so that the user can add new items after typing them. Add two 
additional items by following these steps:

<BR>

<OL>

<LI>Type <B>Disc Player</B>.

<BR>

<BR>

<LI>Click the Add button. The data-entry box 
where you typed the new value goes blank, but Visual Basic has added Disc Player to the list.

<BR>

<BR>

<LI>Type <B>Amplifier</B> and click the Add button.

<BR>

<BR>

<LI>Display the dropdown list by clicking the down arrow. Notice that Visual Basic 
has added the two new items to the bottom of the list.

<BR>

<BR>

</OL>

<BLOCKQUOTE>

<BLOCKQUOTE>

<HR ALIGN=CENTER>

<BR>

<NOTE><B>Note: </B>Later, you will learn how Visual Basic can keep the items sorted alphabetically&#151;you do not have to write 
any code to sort the items.</NOTE>

<BR>

<HR ALIGN=CENTER>

</BLOCKQUOTE></BLOCKQUOTE>

<P>The items remain in the dropdown combo box list until you quit the program. Throughout this book, you will learn ways to save the items in the list and to 
initialize the lists with values using code.

<BR>

<P><FONT COLOR="#FF8000"><B><I>Review: </I></B></FONT>The dropdown combo box control offers a handy way for the user to view and add items to a list. The dropdown combo box gives you the advantage of 
listing items for the user without taking up screen 
space that is needed for other things. Your user can display the entire list by clicking the down arrow.

<BR>

<BR>

<A NAME="E68E29"></A>

<H3 ALIGN=CENTER>

<CENTER>

<FONT SIZE=5 
COLOR="#FF0000"><B>Simple Combo Box</B></FONT></CENTER></H3>

<BR>

<P><FONT COLOR="#FF8000"><B><I>Concept: </I></B></FONT>The simple combo box control does exactly the same thing as the dropdown combo box except that the simple combo box is always 
displayed in its <I>dropdown</I> form. In other words, if screen space is 
not a problem, you might want to use a simple combo box to display and collect values by using a list that does not require the user's extra keypress to open the list.

<BR>


<P>Press the Next Control command button to see what a simple combo box looks like. As you can see, there is no difference between a simple combo box and a dropdown combo box except that the simple combo box is always open.

<BR>

<P>If the simple combo 
box is not deep enough to display all the items in the list, Visual Basic adds a vertical scroll bar to the list so that the user can scroll through the list and view the items. As with the dropdown combo box, the user can add items 
to the simple combo 
box by typing the new value and clicking a command button that you set up.

<BR>

<P>Type the value <B>Rugby</B> and click the Add command button. Scroll to the bottom of the list&#151;you can use the Page Down key to scroll&#151;to see the new sport's 
name.

<BR>

<BLOCKQUOTE>

<BLOCKQUOTE>

<HR ALIGN=CENTER>

<BR>

<NOTE><B>Note: </B>There is a third kind of combo box, called a <I>dropdown list box</I> control, that I will not cover here. The dropdown list box offers nothing new that you cannot get by 
using the other combo boxes or list box controls. Discussing it 
would only add confusion at this point.</NOTE>

<BR>

<HR ALIGN=CENTER>

</BLOCKQUOTE></BLOCKQUOTE>

<P><FONT COLOR="#FF8000"><B><I>Review: </I></B></FONT>Simple combo box controls provide an 
easier way to display and collect list values. The user does not have to understand how to open a simple box control&#151;it is always open.

<BR>

<BR>

<A NAME="E68E30"></A>

<H3 ALIGN=CENTER>

<CENTER>

<FONT SIZE=5 COLOR="#FF0000"><B>The List Box for 
Selections</B></FONT></CENTER></H3>

<BR>

<P><FONT COLOR="#FF8000"><B><I>Concept: </I></B></FONT>List boxes are easy to understand compared to the two combo box controls. If you want users to select from a choice of options that you have supplied and you 
want to prevent them from adding additional 
items to the list, use list boxes.

<BR>

<P>Figure 3.11 shows how your screen looks after you click the Next Control command button again. Later you will learn how to capture the item or items that the user 
selects from a list box.

<BR>

<P><B> <A HREF="03vel11.gif">Figure 3.11. Selecting from a list box.</A></B>

<BR>

<BLOCKQUOTE>

<BLOCKQUOTE>

<HR ALIGN=CENTER>

<BR>

<NOTE><B>Warning: </B>Check boxes and option buttons give users a chance to select from 
options, but you should not use check boxes or option buttons when there are many options to choose from. The scrolling list box and combo box controls use screen space 
more efficiently.</NOTE>

<BR>

<HR ALIGN=CENTER>

</BLOCKQUOTE></BLOCKQUOTE>


<P>Click over one of the list box items with the mouse. Visual Basic highlights the item. Through programming, you will know when users selects an item, and you can analyze what they select. Click another item to select another choice.

<BR>

<P>If the 
application requires multiple selections, you can set up the list box for multiple selections. The list box control inside the CONTROL.MAK application permits multiple selections. Hold down the Ctrl, Alt, or Shift key and click one or two 
additional 
items. Notice that Visual Basic highlights all the items. You can control whether users can select only one or more than one item from a list box. As with combo box lists, you can request that Visual Basic sort the items in the list box 
alphabetically.


<BR>

<P>If you want, you can step through all the controls again by clicking the Next Control command button. You have now seen all the controls offered by the CONTROLS.MAK application. Although you will learn about more controls later in this book, this 
unit 
has described the primary controls that all Visual Basic programmers should master. Be sure that you know all the names of the controls. Study Figure 3.1 so that you know where each control is located on the Toolbox window.

<BR>

<BLOCKQUOTE>


<BLOCKQUOTE>

<HR ALIGN=CENTER>

<BR>

<NOTE><B>Warning: </B>Not every Windows program that you write will contain all these controls. As a matter of fact, <I>no</I> Windows program should contain all these controls. The program would be too busy and would 
require too many different kinds of 
responses from the user.</NOTE>

<BR>

<HR ALIGN=CENTER>

</BLOCKQUOTE></BLOCKQUOTE>

<P><FONT COLOR="#FF8000"><B><I>Review: </I></B></FONT>List boxes are controls that give the users choices from which they can select. 
Your application is responsible for initializing list boxes with values. The user cannot add items to a list box.

<BR>

<BR>

<A NAME="E68E31"></A>

<H3 ALIGN=CENTER>

<CENTER>

<FONT SIZE=5 COLOR="#FF0000"><B>Homework</B></FONT></CENTER></H3>

<BR>

<BR>


<A NAME="E69E29"></A>

<H4 ALIGN=CENTER>

<CENTER>

<FONT SIZE=4 COLOR="#FF0000"><B>General Knowledge</B></FONT></CENTER></H4>

<BR>

<OL>

<LI>Before you can run a program from within the Visual Basic environment, what must you do?

<BR>

<BR>

<LI>What 
kind of file holds the description for the entire application?

<BR>

<BR>

<LI>What is the filename extension for project files?

<BR>

<BR>

<LI>Where can you look to learn the contents of a project file?

<BR>

<BR>

<LI>What are controls for?

<BR>


<BR>

<LI>What window do you get controls from as you build applications?

<BR>

<BR>

<LI>Why is it a good reason to add an Exit command button to applications?

<BR>

<BR>

<LI>True or false: The user can change text in a label control.

<BR>

<BR>


<LI>Which control is good to use when you need text from the user?

<BR>

<BR>

<LI>What kinds of things can you do with text displayed in a label or text box control?

<BR>

<BR>

<LI>How do text controls act like mini word processors?

<BR>

<BR>


<LI>What is the control called that gives users access to push buttons?

<BR>

<BR>

<LI>True or false: The user can select at most one check box from a list of check box controls.

<BR>

<BR>

<LI>True or false: The user can select at most one option 
button from a list of option button controls.

<BR>

<BR>

<LI>What happens if the user selects a check box a second time?

<BR>

<BR>

<LI>What control enables you to add several groups of option buttons to a form?

<BR>

<BR>

<LI>True or false: Users 
can add items to lists displayed in dropdown combo box controls.

<BR>

<BR>

<LI>True or false: Users can add items to lists displayed in simple combo box controls.

<BR>

<BR>

<LI>True or false: Users can add items to lists displayed in list boxes.


<BR>

<BR>

<LI>True or false: Users can select more than one item in a list box.

<BR>

<BR>

<LI>What serves as the user's application background, holding all the controls for the user to work with?

<BR>

<BR>

<LI>True or false: Visual Basic gives you, 
the programmer, a chance to add list box and combo box controls that display lists alphabetically.

<BR>

<BR>

<LI>Name at least two ways in which the user can trigger a command button press.

<BR>

<BR>

<LI>Why is a command button often next to a combo 
box control?

<BR>

<BR>

</OL>

<BR>

<A NAME="E69E30"></A>

<H4 ALIGN=CENTER>

<CENTER>

<FONT SIZE=4 COLOR="#FF0000"><B>Find the Bug</B></FONT></CENTER></H4>

<BR>

<OL>

<LI>Pamela is writing a Visual Basic application that displays customer order 
information. Because of the large amount of information for each customer, Pamela finds that the screen is getting far too crowded. Pamela adds the list of goods that the 
customer bought to a simple combo box control. That way, the clerk can scroll 
through the list of items, and purchases are added to the list they are rung up. The simple combo box control takes up too much screen space. What recommendation would you give 
Pamela?

<BR>

<BR>

</OL>

<BR>

<A NAME="E69E31"></A>

<H4 ALIGN=CENTER>


<CENTER>

<FONT SIZE=4 COLOR="#FF0000"><B>Extra Credit</B></FONT></CENTER></H4>

<BR>

<P>Suppose that you are writing an application that offers users a list of three values from which they can select at most one of the values. Which control is the most 
appropriate?

<BR>

<P ALIGN=LEFT>

<A HREF="velp01.htm" TARGET="_self"><IMG SRC="purprev.gif" WIDTH = 32 HEIGHT = 32 BORDER = 0 ALT="Previous Page"></A>

<A HREF="#I0" TARGET="_self"><IMG SRC="purtop.gif" WIDTH = 32 HEIGHT = 32 BORDER = 0 ALT="Page 
Top"></A>

<A HREF="index.htm" TARGET="_self"><IMG SRC="purtoc.gif" WIDTH = 32 HEIGHT = 32 BORDER = 0 ALT="TOC"></A>

<A HREF="vel04.htm" TARGET="_self"><IMG SRC="purnext.gif" WIDTH = 32 HEIGHT = 32 BORDER = 0 ALT="Next Page"></A>

<A 

</BODY></HTML>







