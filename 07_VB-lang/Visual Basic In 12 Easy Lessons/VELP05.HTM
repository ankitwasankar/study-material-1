<HTML>

<HEAD>

<TITLE>Visual Basic in 12 Easy Lessons velp05.htm </TITLE>

<LINK REL="ToC" HREF="index.htm">

<LINK REL="Index" HREF="htindex.htm">

<LINK REL="Next" HREF="vel11.htm">

<LINK REL="Previous" HREF="vel10.htm"></HEAD>

<BODY BGCOLOR="#FFFFFF" 
TEXT="#000000" LINK="#0000FF" VLINK="#800080">

<A NAME="I0"></A>

<H2>Visual Basic in 12 Easy Lessons velp05.htm</H2>

<P ALIGN=LEFT>

<A HREF="vel10.htm" TARGET="_self"><IMG SRC="purprev.gif" WIDTH = 32 HEIGHT = 32 BORDER = 0 ALT="Previous Page"></A>

<A 
HREF="index.htm" TARGET="_self"><IMG SRC="purtoc.gif" WIDTH = 32 HEIGHT = 32 BORDER = 0 ALT="TOC"></A>

<A HREF="vel11.htm" TARGET="_self"><IMG SRC="purnext.gif" WIDTH = 32 HEIGHT = 32 BORDER = 0 ALT="Next Page"></A>


<HR ALIGN=CENTER>

<P>

<UL>

<UL>

<UL>

<LI>

<A HREF="#E68E84" >Stop &amp; Type</A>

<UL>

<LI>

<A HREF="#E69E71" >The Program's Description</A>

<LI>

<A 
HREF="#E69E72" >The Program's Action</A>

<LI>

<A HREF="#E69E73" >The Color Changing Routine</A>

<LI>

<A HREF="#E69E74" >Descriptions</A>

<LI>

<A HREF="#E69E75" >Getting Odd Values</A>

<LI>

<A HREF="#E69E76" >Descriptions</A>

<LI>

<A 
HREF="#E69E77" >Close the Application</A></UL></UL></UL></UL>

<HR ALIGN=CENTER>

<A NAME="E66E15"></A>

<H1 ALIGN=CENTER>

<CENTER>

<FONT SIZE=6 COLOR="#FF0000"><B>Project 5</B></FONT></CENTER></H1>

<BR>

<A NAME="E67E18"></A>

<H2 ALIGN=CENTER>


<CENTER>

<FONT SIZE=6 COLOR="#FF0000"><B>Gaining Control</B></FONT></CENTER></H2>

<BR>

<BR>

<A NAME="E68E84"></A>

<H3 ALIGN=CENTER>

<CENTER>

<FONT SIZE=5 COLOR="#FF0000"><B>Stop &amp; Type</B></FONT></CENTER></H3>

<BR>

<P>This lesson taught you 
how to document and control programs. As you increase the power of your Visual Basic applications, they become more complex. As programs get more complex, program maintenance becomes more difficult. Remarks help document summary 
information about the 
program and provide more specific help for tricky lines of code.

<BR>

<P>You can now add control to your programs by putting loops in the code, which repeat sections of the program. Computers are excellent tools for repeating calculations as many times 
as necessary to produce results. Loops also provide ways for you to check 
user input against good and bad values and to repeat the input prompting so that the user enters data in the required format and range.

<BR>

<P>In this lesson, you saw the 
following:

<BR>

<UL>

<LI>How remarks help document your code

<BR>

<BR>

<LI>When message boxes offer the user more help than label controls

<BR>

<BR>

<LI>How to get feedback from input boxes

<BR>

<BR>

<LI>What kind of power the loops add to your 
programs

<BR>

<BR>

</UL>

<BR>

<A NAME="E69E71"></A>

<H4 ALIGN=CENTER>

<CENTER>

<FONT SIZE=4 COLOR="#FF0000"><B>The Program's Description</B></FONT></CENTER></H4>

<BR>

<P>Figure P5.1 shows how the PROJECT5.MAK application looks as soon as you load 
and run the program. The project's form contains four command buttons. The command buttons perform different tasks that demonstrate the various topics of this lesson.

<BR>

<P><B> <A HREF="p5vel01.gif">Figure P5.1. The project's opening screen.</A></B>


<BR>

<P>The program's three center command buttons perform the following actions:

<BR>

<UL>

<LI>The Color Change command button quickly steps the form's background color through a series of color changes.

<BR>

<BR>

<LI>The Odd Entry command button 
keeps requesting an odd number until the user enters an odd number

<BR>

<BR>

<LI>The Even Entry command button keeps requesting an even number until the user enters an even number

<BR>

<BR>

</UL>

<BR>

<A NAME="E69E72"></A>

<H4 ALIGN=CENTER>


<CENTER>

<FONT SIZE=4 COLOR="#FF0000"><B>The Program's Action</B></FONT></CENTER></H4>

<BR>

<P>Click the Color Change command button. Watch closely. The form's background changes colors extremely quickly while beeping. Although the colors change so 
rapidly that you cannot see all the colors, the program changes the form's background color, by 
means of the form's BackColor property value, sixteen times.

<BR>

<P>The beeping is accomplished through four Beep statements that do nothing more than ring 
the PC's bell four times between each color change. The true purpose of the beeping is to slow down the color changes. On most computers, the colors would change so 
fast without the intermediate beeps, that you would not see anything except a blur. Even 
with the beeping, the colors change almost faster than the eye can see.

<BR>

<P>The Odd Entry command button asks the user for an odd number, using the input box shown in Figure P5.2. The command button's Click event procedure keeps looping until the 
user enters an odd number.

<BR>

<P><B> <A HREF="p5vel02.gif">Figure P5.2. The program requests an odd number.</A></B>

<BR>

<P>The third command button, Even Entry, requests an even number and keeps looping until the user enters an even number.

<BR>


<BR>

<A NAME="E69E73"></A>

<H4 ALIGN=CENTER>

<CENTER>

<FONT SIZE=4 COLOR="#FF0000"><B>The Color Changing Routine</B></FONT></CENTER></H4>

<BR>

<P>Listing P5.1 contains the event procedure for the Color Change command button's Click procedure.

<BR>


<P>

<FONT COLOR="#000080"><B>Listing P5.1. The color-changing event procedure.</B></FONT>

<BR>

<PRE>

<FONT COLOR="#000080">1: Sub cmdColor_Click ()

2: ' Wildly Change the color of the form

3: Dim ColorVal As Integer

4: For ColorVal = 0 To 15 ' Step 
through the color values

5: frmControl.BackColor = QBColor(ColorVal)

6: Beep ' These beeps simply add

7: Beep ' to the intensity of the

8: Beep ' color change and slow

9: Beep ' things down some

10: Next ColorVal

11: End Sub</FONT></PRE>

<BR>

<A 
NAME="E69E74"></A>

<H4 ALIGN=CENTER>

<CENTER>

<FONT SIZE=4 COLOR="#FF0000"><B>Descriptions</B></FONT></CENTER></H4>

<BR>

<P>1: The command button is named cmdColor, so the name of the Click event procedure is cmdColor_Click().

<BR>

<P>2: A remark 
helps explain the purpose of the event procedure.

<BR>

<P>3: An integer variable holds a For loop's color-changing value.

<BR>

<P>4: This line begins a For loop that iterates 16 times, assigning the numbers 0 through 15 to the variable named ColorVar.


<BR>

<BLOCKQUOTE>

<BLOCKQUOTE>

<HR ALIGN=CENTER>

<BR>

<NOTE>5: The built-in QBColor() function lets you easily change color values.</NOTE>

<BR>

<HR ALIGN=CENTER>

</BLOCKQUOTE></BLOCKQUOTE>

<P>5: The built-in function named QBColor() requires a 
number in its parentheses from 0 to 15. Each number represents a different color value. Using QBColor() is easier than specifying a hexadecimal value.

<BR>

<P>6: A Beep statement slows down the color change and adds a little spice to the program.

<BR>


<P>7: A Beep statement slows down the color change and adds a little spice to the program.

<BR>

<P>8: A Beep statement slows down the color change and adds a little spice to the program.

<BR>

<P>9: A Beep statement slows down the color change and adds 
a little spice to the program.

<BR>

<P>10: This line terminates the For loop.

<BR>

<P>11: This line terminates the event procedure.

<BR>

<BR>

<A NAME="E69E75"></A>

<H4 ALIGN=CENTER>

<CENTER>

<FONT SIZE=4 COLOR="#FF0000"><B>Getting Odd 
Values</B></FONT></CENTER></H4>

<BR>

<P>When the user clicks the Odd Entry button, the program asks for an odd number, using the InputBox$() function taught in this lesson. The InputBox$() function captures a string value. If the user clicks Cancel, the 
form window returns. Otherwise, the 
event procedure expects an odd number and keeps requesting that number using a Do loop until the user types an odd number.

<BR>

<P>

<FONT COLOR="#000080"><B>Listing P5.2. The event procedure that requests an odd 
number.</B></FONT>

<BR>

<PRE>

<FONT COLOR="#000080">1: Sub cmdOdd_Click ()

2: ' Request an odd number

3: Dim OddStr As String

4: Dim OddNum As Integer

5: Do

6: OddStr = InputBox$(&quot;Enter an odd number&quot;, &quot;Get Odd&quot;)

7: If (OddStr 
= &quot;&quot;) Then ' Quit if pressed Cancel

8: Exit Do ' Quits the Do loop early

9: End If

10: OddNum = Val(OddStr) / 2

11: ' The integer OddNum holds the exact value

12: ' of the Val(OddStr) / 2 if OddNum is even

13: Loop Until (OddNum &lt;&gt; 
(Val(OddStr) / 2))

14: End Sub</FONT></PRE>

<BR>

<A NAME="E69E76"></A>

<H4 ALIGN=CENTER>

<CENTER>

<FONT SIZE=4 COLOR="#FF0000"><B>Descriptions</B></FONT></CENTER></H4>

<BR>

<P>1: The command button's Name property contains cmdOdd, so the name of 
the Click event procedure is cmdOdd_Click().

<BR>

<P>2: A remark explains the purpose of the procedure.

<BR>

<P>3: This line defines a string variable that will hold the result of the InputBox$() function.

<BR>

<P>4: This line defines an integer 
variable that will hold the result of the InputBox$() function.

<BR>

<P>5: This line begins a loop.

<BR>

<P>6: Here the program collects the user's response to the request for an odd number, and it displays an appropriate input box title. Use 
InputBox$() to get strings from the user.

<BR>

<P>7: If the user pressed the Cancel command button, the program exits the loop.

<BR>

<P>8: This line terminates the Do loop.

<BR>

<P>9: This line is the end of the body of the If statement.

<BR>


<P>10: This line converts the input string to a number, divides the number by two, and stores the result in an integer variable.

<BR>

<P>11: A multiline remark describes the check for an odd number.

<BR>

<P>12: This line continues the remark.

<BR>


<P>13: OddNum holds an integer value calculated and stored in line 10. If integer OddNum variable equals the decimal calculation of the user's response divided by two, the user entered an even number, and the program needs to loop again and request the odd 

number once more.

<BR>

<P>14: This line terminates the event procedure.

<BR>

<BLOCKQUOTE>

<BLOCKQUOTE>

<HR ALIGN=CENTER>

<BR>

<NOTE><B>Note: </B>The cmdEven_Click() event procedure is identical to cmdOdd_Click() except that it checks for an even 
number instead of an odd number.</NOTE>

<BR>

<HR ALIGN=CENTER>

</BLOCKQUOTE></BLOCKQUOTE>

<BR>

<A NAME="E69E77"></A>

<H4 ALIGN=CENTER>

<CENTER>

<FONT SIZE=4 COLOR="#FF0000"><B>Close the Application</B></FONT></CENTER></H4>

<BR>

<P>You can now 
exit the application and exit Visual Basic. The next lesson explains more Visual Basic commands and describes how to add new controls to your form that process and display large amounts of data.

<P ALIGN=LEFT>

<A HREF="vel10.htm" TARGET="_self"><IMG 
SRC="purprev.gif" WIDTH = 32 HEIGHT = 32 BORDER = 0 ALT="Previous Page"></A>

<A HREF="#I0" TARGET="_self"><IMG SRC="purtop.gif" WIDTH = 32 HEIGHT = 32 BORDER = 0 ALT="Page Top"></A>

<A HREF="index.htm" TARGET="_self"><IMG SRC="purtoc.gif" WIDTH = 32 
HEIGHT = 32 BORDER = 0 ALT="TOC"></A>

<A HREF="vel11.htm" TARGET="_self"><IMG SRC="purnext.gif" WIDTH = 32 HEIGHT = 32 BORDER = 0 ALT="Next Page"></A>


</BODY></HTML>







