<HTML>

<HEAD>

<TITLE>Visual Basic in 12 Easy Lessons velp04.htm </TITLE>

<LINK REL="ToC" HREF="index.htm">

<LINK REL="Index" HREF="htindex.htm">

<LINK REL="Next" HREF="vel09.htm">

<LINK REL="Previous" HREF="vel08.htm"></HEAD>

<BODY BGCOLOR="#FFFFFF" 
TEXT="#000000" LINK="#0000FF" VLINK="#800080">

<A NAME="I0"></A>

<H2>Visual Basic in 12 Easy Lessons velp04.htm</H2>

<P ALIGN=LEFT>

<A HREF="vel08.htm" TARGET="_self"><IMG SRC="purprev.gif" WIDTH = 32 HEIGHT = 32 BORDER = 0 ALT="Previous Page"></A>

<A 
HREF="index.htm" TARGET="_self"><IMG SRC="purtoc.gif" WIDTH = 32 HEIGHT = 32 BORDER = 0 ALT="TOC"></A>

<A HREF="vel09.htm" TARGET="_self"><IMG SRC="purnext.gif" WIDTH = 32 HEIGHT = 32 BORDER = 0 ALT="Next Page"></A>


<HR ALIGN=CENTER>

<P>

<UL>

<UL>

<UL>

<LI>

<A HREF="#E68E69" >Stop &amp; Type</A>

<UL>

<LI>

<A HREF="#E69E59" >The Program's Description</A>

<LI>

<A 
HREF="#E69E60" >The Program's Action</A>

<LI>

<A HREF="#E69E61" >Checking the Discount Code</A>

<LI>

<A HREF="#E69E62" >Computing the Inventory</A>

<LI>

<A HREF="#E69E63" >Close the Application</A></UL></UL></UL></UL>

<HR ALIGN=CENTER>

<A 
NAME="E66E12"></A>

<H1 ALIGN=CENTER>

<CENTER>

<FONT SIZE=6 COLOR="#FF0000"><B>Project 4</B></FONT></CENTER></H1>

<BR>

<A NAME="E67E15"></A>

<H2 ALIGN=CENTER>

<CENTER>

<FONT SIZE=6 COLOR="#FF0000"><B>Data Basics</B></FONT></CENTER></H2>

<BR>

<BR>


<A NAME="E68E69"></A>

<H3 ALIGN=CENTER>

<CENTER>

<FONT SIZE=5 COLOR="#FF0000"><B>Stop &amp; Type</B></FONT></CENTER></H3>

<BR>

<P>This lesson taught you how Visual Basic stores data values in several different formats. The different data types enable 
you to categorize data. For example, when you are working with currency amounts, use the currency data type so that Visual Basic 
ensures accuracy to two decimal places.

<BR>

<P>The key to manipulating data in Visual Basic programs is the variable. A 
variable is a named storage location in memory that you define by using the Dim statement. The Dim statement requests that Visual Basic set aside the memory, attach one data type 
to the variable, and name the variable. Once you define variables, the 
assignment statement stores values in the variables. Until you store values in variables, the numeric variables hold zeros and the string variables hold null strings.

<BR>

<P>Once the variables receive values, the If and Select Case statements determine 
the appropriate program paths to take. The If and Select Case analyze the data in variables and make runtime decisions based on the values there.

<BR>

<P>In this lesson, you saw the following:

<BR>

<UL>

<LI>How to distinguish the data types

<BR>


<BR>

<LI>Why you must define and name variables

<BR>

<BR>

<LI>How to use Visual Basic's mathematical operators

<BR>

<BR>

<LI>When the operator precedence table becomes crucial

<BR>

<BR>

<LI>What to do when you want to override the operator 
precedence

<BR>

<BR>

<LI>How to code If-Else and Select Case statements to make decisions

<BR>

<BR>

<LI>Why the various Case options exist

<BR>

<BR>

</UL>

<BR>

<A NAME="E69E59"></A>

<H4 ALIGN=CENTER>

<CENTER>

<FONT SIZE=4 
COLOR="#FF0000"><B>The Program's Description</B></FONT></CENTER></H4>

<BR>

<P>Figure P4.1 shows how the PROJECT4.MAK application looks as soon as you load and run the program. The project's form contains several controls. Notice the following about the 
controls on the form:

<BR>

<UL>

<UL>

<P>The user must enter values in three text boxes that correspond to the number of inventory items sold, the price per item, and a special discount code. The user must type either a 1, 2, 3, or 4 to indicate which 
discount percentage is desired for the 
total price.

<BR>

</UL></UL>

<UL>

<UL>

<P>The Calculate Inventory command button computes the value of the inventory, given the user's entries in the text boxes, and displays the amount of the inventory in the 
lower label marked Extended Amount.

<BR>

</UL></UL>

<UL>

<UL>

<P>An Exit command button terminates the program.

<BR>

</UL></UL>

<P><B> <A HREF="p4vel01.gif">Figure P4.1. The project's opening screen.</A></B>

<BR>

<P>The program acts like a smart 
but simple cash register that extends the total inventory sold price and adds a discount based on a discount code. There are several ways to support such a discount list in Visual Basic, and this program demonstrates only 
one method. In future lessons, 
you will learn how to add option button controls and scrolling list boxes to support such discount percentage codes.

<BR>

<BLOCKQUOTE>

<BLOCKQUOTE>

<HR ALIGN=CENTER>

<BR>

<NOTE><B>Note: </B>Assume that the company supports only the four discount 
codes described. If the user leaves the discount code blank, the program does not compute a discount code. If the user had to type a discount code, it would be too easy for the user 
for forget the decimal point if you required the user to enter a decimal 
discount like .15. The user might also enter the percent sign, which could cause program confusion as well. Therefore, for percentage values, the table of discount codes works very 
well and eliminates much user&#151;and programmer&#151;frustration.</NOTE>


<BR>

<HR ALIGN=CENTER>

</BLOCKQUOTE></BLOCKQUOTE>

<BR>

<A NAME="E69E60"></A>

<H4 ALIGN=CENTER>

<CENTER>

<FONT SIZE=4 COLOR="#FF0000"><B>The Program's Action</B></FONT></CENTER></H4>

<BR>

<P>Enter the following values in the text box controls:


<BR>

<UL>

<UL>

<P>Units Sold: <B>20</B>

<BR>

</UL></UL>

<UL>

<UL>

<P>Price Per Unit: <B>2.75</B>

<BR>

</UL></UL>

<UL>

<UL>

<P>Discount Code: <B>3</B>

<BR>

</UL></UL>

<P>Press the Calculate Inventory command button (Alt+C). Visual Basic 
calculates the full inventory price and displays the answer 46.75 to the right of the Extended Amount label.

<BR>

<P>Even though this project works with currency data types, the displayed answer does not always appear with two decimal places. For 
example, entering a Price Per Unit amount of 2.00 produces the Extended Amount of 34 with no decimal places showing. Visual 
Basic never makes assumptions about how you want numeric data displayed. Even with currency values, Visual Basic will not display 
two decimal places unless you specifically request two decimal places. Lesson 7 shows you how to format numeric output to look 
exactly as you want it. Until then, be lenient with your own programs and the programs in this book, because the decimal places 
will not always work out the way you would prefer. It is more important, until Lesson 7, to concentrate on how the results are 
produced, not how the results are formatted to look.

<BR>

<BR>

<A NAME="E69E61"></A>

<H4 ALIGN=CENTER>

<CENTER>

<FONT 
SIZE=4 COLOR="#FF0000"><B>Checking the Discount Code</B></FONT></CENTER></H4>

<BR>

<P>One of the most powerful features of the PROJECT4.MAK application is its use of the If statement in the discount code's text box LostFocus event procedure. The 
LostFocus event occurs when the user moves the focus from the discount code text box to 
another control. Therefore, the txtDisc_LostFocus() event procedure, shown in Listing P4.1, executes immediately after the user enters a value for the discount code.


<BR>

<BLOCKQUOTE>

<BLOCKQUOTE>

<HR ALIGN=CENTER>

<BR>

<NOTE><B>Note: </B>Line 5 uses a Visual Basic element called a <I>method, </I>which you have not seen yet. A method works almost like a built-in function, such as Val(). However, instead of 
converting data, a method performs an action for a particular 
control. You must request a method by specifying a control, followed by a period and the name of the method.</NOTE>

<BR>

<HR ALIGN=CENTER>

</BLOCKQUOTE></BLOCKQUOTE>

<P>

<FONT 
COLOR="#000080"><B>Listing P4.1. Ensure that the user enters a proper discount code.</B></FONT>

<BR>

<PRE>

<FONT COLOR="#000080">1: Sub txtDisc_LostFocus ()

2: If (Val(txtDisc.Text) &lt; 0) Or (Val(txtDisc.Text) &gt; 4) Then

3: Beep

4: txtDisc.Text = 
&quot;&quot;

5: txtDisc.SetFocus

6: End If

7: End Sub</FONT></PRE>

<OL>

<LI>The discount text box's Name property contains txtDisc. The name of the LostFocus event procedure is txtDisc_LostFocus().

<BR>

<BR>

<LI>Use Val() to convert the text box 
value to a number while it tests to make sure that the user entered a number from 0 to 4.

<BR>

<BR>

<LI>The body of the If executes only if the user enters a bad discount code. The Beep statement beeps the computer's speaker to get the user's attention.


<BR>

<BR>

<LI>This line erases whatever value the user entered in the text box.

<BR>

<BR>

<LI>This line returns the focus to the text box so that the user is forced to enter a good value before doing anything else.

<BR>

<BR>

<LI>This line ends the 
body of the If statement.

<BR>

<BR>

<LI>This line terminates the event procedure.

<BR>

<BR>

</OL>

<BLOCKQUOTE>

<BLOCKQUOTE>

<HR ALIGN=CENTER>

<BR>

<NOTE>3: Audibly warns the user of an error.</NOTE>

<BR>

<HR ALIGN=CENTER>


</BLOCKQUOTE></BLOCKQUOTE>

<BR>

<A NAME="E69E62"></A>

<H4 ALIGN=CENTER>

<CENTER>

<FONT SIZE=4 COLOR="#FF0000"><B>Computing the Inventory</B></FONT></CENTER></H4>

<BR>

<P>When the user clicks the Calculate Inventory command button, the command 
button's Click event procedure, shown in Listing P4.2, executes. The event procedure uses a combination of variables and a Select Case statement to compute the proper inventory 
amount based on the user's text box values at the discount specified.

<BR>


<P>

<FONT COLOR="#000080"><B>Listing P4.2. Computing the inventory amount.</B></FONT>

<BR>

<PRE>

<FONT COLOR="#000080">1: Sub cmdInven_Click ()

2: Dim Discount As Single

3: Dim ExtAmount As Currency

4: ExtAmount = Val(txtUnits.Text) * 
Val(txtPrice.Text)

5: Select Case Val(txtDisc.Text)

6: Case 0: Discount = 0

7: Case 1: Discount = .05

8: Case 2: Discount = .1

9: Case 3: Discount = .15

10: Case 4: Discount = .2

11: End Select

12: lblExt.Caption = ExtAmount - (Discount * 
ExtAmount)

13: End Sub</FONT></PRE>

<OL>

<LI>The command button's Name property contains cmdInven, so the name of the Click event procedure is cmdInven_Click().

<BR>

<BR>

<LI>A single-precision variable named Discount is defined to hold an 
intermediate calculation.

<BR>

<BR>

<LI>A currency variable named ExtAmount is defined to hold an intermediate calculation.

<BR>

<BR>

<LI>The first part of the extended inventory amount is computed by multiplying the user's number of units sold by 
the price per unit.

<BR>

<BR>

<LI>Select Case makes a decision based on one of four values stored in the txtDisc text box.

<BR>

<BR>

<LI>If the discount code is 0, zero is used for the discount percentage.

<BR>

<BR>

<LI>If the discount code is 1, 
5% is used for the discount percentage.

<BR>

<BR>

<LI>If the discount code is 2, 10% is used for the discount percentage.

<BR>

<BR>

<LI>If the discount code is 3, 15% is used for the discount percentage.

<BR>

<BR>

<LI>If the discount code is 4, 
20% is used for the discount percentage.

<BR>

<BR>

<LI>The body of the Select Case comes to an end.

<BR>

<BR>

<LI>This line finishes computing the discount amount by applying the discount to the extended price, and it displays the final amount on the 
form.

<BR>

<BR>

</OL>

<BLOCKQUOTE>

<BLOCKQUOTE>

<HR ALIGN=CENTER>

<BR>

<NOTE>4: Always convert control values to numbers by using Val() before you calculate with the values.</NOTE>

<BR>

<HR ALIGN=CENTER>

</BLOCKQUOTE></BLOCKQUOTE>

<BLOCKQUOTE>


<BLOCKQUOTE>

<HR ALIGN=CENTER>

<BR>

<NOTE>11: No Case Else<I> </I>is required because the txtDisc LostFocus() procedure ensures that only valid values appear in txtDisc.</NOTE>

<BR>

<HR ALIGN=CENTER>

</BLOCKQUOTE></BLOCKQUOTE>

<BR>

<A 
NAME="E69E63"></A>

<H4 ALIGN=CENTER>

<CENTER>

<FONT SIZE=4 COLOR="#FF0000"><B>Close the Application</B></FONT></CENTER></H4>

<BR>

<P>This project helped solidify your understanding of how and when to use variables for data. You can now exit the 
application and exit Visual Basic. The next lesson adds additional programming skills to your repertoire and increases the power of the 
programs that you can write and control.

<P ALIGN=LEFT>

<A HREF="vel08.htm" TARGET="_self"><IMG SRC="purprev.gif" 
WIDTH = 32 HEIGHT = 32 BORDER = 0 ALT="Previous Page"></A>

<A HREF="#I0" TARGET="_self"><IMG SRC="purtop.gif" WIDTH = 32 HEIGHT = 32 BORDER = 0 ALT="Page Top"></A>

<A HREF="index.htm" TARGET="_self"><IMG SRC="purtoc.gif" WIDTH = 32 HEIGHT = 32 BORDER = 0 
ALT="TOC"></A>

<A HREF="vel09.htm" TARGET="_self"><IMG SRC="purnext.gif" WIDTH = 32 HEIGHT = 32 BORDER = 0 ALT="Next Page"></A>



</BODY></HTML>







