<HTML>

<HEAD>

<TITLE>Visual Basic in 12 Easy Lessons vel22.htm </TITLE>

<LINK REL="ToC" HREF="index.htm">

<LINK REL="Index" HREF="htindex.htm">

<LINK REL="Next" HREF="velp11.htm">

<LINK REL="Previous" HREF="vel21.htm"></HEAD>

<BODY BGCOLOR="#FFFFFF" 
TEXT="#000000" LINK="#0000FF" VLINK="#800080">

<A NAME="I0"></A>

<H2>Visual Basic in 12 Easy Lessons vel22.htm</H2>

<P ALIGN=LEFT>

<A HREF="vel21.htm" TARGET="_self"><IMG SRC="purprev.gif" WIDTH = 32 HEIGHT = 32 BORDER = 0 ALT="Previous Page"></A>

<A 
HREF="index.htm" TARGET="_self"><IMG SRC="purtoc.gif" WIDTH = 32 HEIGHT = 32 BORDER = 0 ALT="TOC"></A>

<A HREF="velp11.htm" TARGET="_self"><IMG SRC="purnext.gif" WIDTH = 32 HEIGHT = 32 BORDER = 0 ALT="Next Page"></A>


<HR ALIGN=CENTER>

<P>

<UL>

<UL>

<UL>

<LI>

<A HREF="#E68E165" >What You'll Learn</A>

<LI>

<A HREF="#E68E166" >The Line and Shape Controls</A>

<LI>

<A 
HREF="#E68E167" >Mastering the Line Control</A>

<LI>

<A HREF="#E68E168" >Mastering the Shape Control</A>

<LI>

<A HREF="#E68E169" >If You Have Graphics Files...</A>

<LI>

<A HREF="#E68E170" >Homework</A>

<UL>

<LI>

<A HREF="#E69E155" >General 
Knowledge</A>

<LI>

<A HREF="#E69E156" >Find the Bug</A>

<LI>

<A HREF="#E69E157" >What's the Output?</A>

<LI>

<A HREF="#E69E158" >Write Code That...</A>

<LI>

<A HREF="#E69E159" >Extra Credit</A></UL></UL></UL></UL>

<HR ALIGN=CENTER>

<A 
NAME="E66E32"></A>

<H1 ALIGN=CENTER>

<CENTER>

<FONT SIZE=6 COLOR="#FF0000"><B>Lesson 11, Unit 22</B></FONT></CENTER></H1>

<BR>

<A NAME="E67E35"></A>

<H2 ALIGN=CENTER>

<CENTER>

<FONT SIZE=6 COLOR="#FF0000"><B>Glitzy Graphics</B></FONT></CENTER></H2>


<BR>

<BR>

<A NAME="E68E165"></A>

<H3 ALIGN=CENTER>

<CENTER>

<FONT SIZE=5 COLOR="#FF0000"><B>What You'll Learn</B></FONT></CENTER></H3>

<BR>

<UL>

<LI>The line and shape controls

<BR>

<BR>

<LI>Mastering the line control

<BR>

<BR>

<LI>Mastering 
the shape control

<BR>

<BR>

<LI>If you have graphics files...

<BR>

<BR>

</UL>

<P>Most Visual Basic programmers enjoy learning and using the material presented in this lesson. This lesson searches for that artist deep within every programmer! This 
lesson explores the graphics controls available to you as a Visual Basic programmer.

<BR>

<P>Perhaps you won't be drawing pretty pictures on every application's form that you design, but knowing how to draw lines and circles often allows you to spruce up 
a form by separating controls and enclosing labels within colored ovals to highlight 
important information.

<BR>

<BR>

<A NAME="E68E166"></A>

<H3 ALIGN=CENTER>

<CENTER>

<FONT SIZE=5 COLOR="#FF0000"><B>The Line and Shape 
Controls</B></FONT></CENTER></H3>

<BR>

<P><FONT COLOR="#FF8000"><B><I>Concept: </I></B></FONT>The line and shape controls work together to draw lines, boxes, and all kinds of circular figures on the form. By placing the controls and setting appropriate 
properties, you'll be adding flair to 
applications.

<BR>

<P>Figure 22.1 shows the location of the line and shape controls on the Toolbox window. The properties of each control that you place on your form determine exactly what kind of image the control 
becomes.

<BR>

<P><B> <A HREF="22vel01.gif">Figure 22.1. The line and shape controls provide Visual Basic's artistic tools.</A></B>

<BR>

<P>Here are the primary graphic images that you can draw with the line and shape controls:

<BR>

<UL>

<LI>Lines


<BR>

<BR>

<LI>Rectangles

<BR>

<BR>

<LI>Squares

<BR>

<BR>

<LI>Ovals

<BR>

<BR>

<LI>Circles

<BR>

<BR>

<LI>Rounded rectangles

<BR>

<BR>

<LI>Rounded squares

<BR>

<BR>

</UL>

<P>Figure 22.2 shows each of these seven primary images. By 
combining these fundamental geometric images and setting appropriate color and size properties, you can draw virtually anything you need to draw on the form.

<BR>

<P><B> <A HREF="22vel02.gif">Figure 22.2. The seven fundamental images that you can 
draw.</A></B>

<BR>

<P>Use the line control for drawing lines of various widths, lengths, and patterns. The shape control handles the drawing for all the other fundamental shapes.

<BR>

<P><FONT COLOR="#FF8000"><B><I>Review: </I></B></FONT>The line and 
shape controls are the primary drawing controls. There are seven fundamental geometric shapes that you can draw. By specifying various properties, you can control how those shapes appear on 
the form.

<BR>

<BR>

<A NAME="E68E167"></A>

<H3 ALIGN=CENTER>


<CENTER>

<FONT SIZE=5 COLOR="#FF0000"><B>Mastering the Line Control</B></FONT></CENTER></H3>

<BR>

<P><FONT COLOR="#FF8000"><B><I>Concept: </I></B></FONT>The line control contains properties that specify the width and length of lines that you draw. In 
addition, you can change the pattern of each line that you draw.

<BR>

<P>Table 22.1 lists the property values for the line control. The BorderStyle property requires its own table for explanation. Table 22.2 contains the values that you can specify for 
the BorderStyle. The BorderStyle property determines the pattern that 
Visual Basic uses to draw the line. By specifying various BorderStyle values, you can vary the line pattern. If you assign a BorderStyle property at runtime, you either can specify a 
number that represents the BorderStyle, or use one of the constants 
defined in the CONSTANT.TXT file.

<BR>

<BR>

<P ALIGN=CENTER>

<CENTER>

<FONT COLOR="#000080"><B>Table 22.1. The line control properties.</B></FONT></CENTER>

<BR>



<TABLE  
BORDERCOLOR=#000040 BORDER=1 CELLSPACING=2 WIDTH="100%" CELLPADDING=2 >

<TR>

<TD VALIGN=top  BGCOLOR=#80FFFF ><FONT COLOR=#000080>

<I>Property</I>

</FONT>

<TD VALIGN=top  BGCOLOR=#80FFFF ><FONT COLOR=#000080>

<I>Description</I></FONT>

<TR>

<TD 
VALIGN=top  BGCOLOR=#80FFFF ><FONT COLOR=#000080>

BorderColor

</FONT>

<TD VALIGN=top  BGCOLOR=#80FFFF ><FONT COLOR=#000080>

Specifies a hexadecimal Windows color value that determines the color of the line.</FONT>

<TR>

<TD VALIGN=top  BGCOLOR=#80FFFF 
><FONT COLOR=#000080>

BorderStyle

</FONT>

<TD VALIGN=top  BGCOLOR=#80FFFF ><FONT COLOR=#000080>

Contains one of seven values that specifies the pattern of the drawn line. See Table 22.2 for available BorderStyle values. The default value is 1-Solid. 
The BorderStyle has no effect on lines with a BorderWidth greater than one twip.</FONT>

<TR>

<TD VALIGN=top  BGCOLOR=#80FFFF ><FONT COLOR=#000080>

BorderWidth

</FONT>

<TD VALIGN=top  BGCOLOR=#80FFFF ><FONT COLOR=#000080>

Specifies the size, in twips, 
that the line takes.</FONT>

<TR>

<TD VALIGN=top  BGCOLOR=#80FFFF ><FONT COLOR=#000080>

DrawMode

</FONT>

<TD VALIGN=top  BGCOLOR=#80FFFF ><FONT COLOR=#000080>

An advanced style that determines how the bit patterns of the line interact with the 
surrounding form's bit appearance. The default value, 13 - Copy Pen, works well for virtually all Visual Basic applications.</FONT>

<TR>

<TD VALIGN=top  BGCOLOR=#80FFFF ><FONT COLOR=#000080>

Index

</FONT>

<TD VALIGN=top  BGCOLOR=#80FFFF ><FONT 
COLOR=#000080>

Specifies the subscript of the line control if the line control is part of a control array.</FONT>

<TR>

<TD VALIGN=top  BGCOLOR=#80FFFF ><FONT COLOR=#000080>

Name

</FONT>

<TD VALIGN=top  BGCOLOR=#80FFFF ><FONT COLOR=#000080>

Contains 
the name of the line control. Visual Basic names the line controls Line1, Line2, and so on, unless you rename the line controls.</FONT>

<TR>

<TD VALIGN=top  BGCOLOR=#80FFFF ><FONT COLOR=#000080>

Tag

</FONT>

<TD VALIGN=top  BGCOLOR=#80FFFF ><FONT 
COLOR=#000080>

Unused by Visual Basic. This is for the programmer's use for an identifying comment applied to the line control.</FONT>

<TR>

<TD VALIGN=top  BGCOLOR=#80FFFF ><FONT COLOR=#000080>

Visible

</FONT>

<TD VALIGN=top  BGCOLOR=#80FFFF ><FONT 
COLOR=#000080>

Holds True or False, indicating whether the user can see the line control.</FONT>

<TR>

<TD VALIGN=top  BGCOLOR=#80FFFF ><FONT COLOR=#000080>

X1

</FONT>

<TD VALIGN=top  BGCOLOR=#80FFFF ><FONT COLOR=#000080>

Contains the number of twips 
from the left of the Form window to the start of the line.</FONT>

<TR>

<TD VALIGN=top  BGCOLOR=#80FFFF ><FONT COLOR=#000080>

X2

</FONT>

<TD VALIGN=top  BGCOLOR=#80FFFF ><FONT COLOR=#000080>

Contains the number of twips from the left of the Form 
window to the end of the line.</FONT>

<TR>

<TD VALIGN=top  BGCOLOR=#80FFFF ><FONT COLOR=#000080>

Y1

</FONT>

<TD VALIGN=top  BGCOLOR=#80FFFF ><FONT COLOR=#000080>

Contains the number of twips from the top of the Form window to the left starting point 
of the line.</FONT>

<TR>

<TD VALIGN=top  BGCOLOR=#80FFFF ><FONT COLOR=#000080>

Y2

</FONT>

<TD VALIGN=top  BGCOLOR=#80FFFF ><FONT COLOR=#000080>

Contains the number of twips from the top of the Form window to the lower ending point of the line.</FONT>


</TABLE><BR>

<P ALIGN=CENTER>

<CENTER>

<FONT COLOR="#000080"><B>Table 22.2. The line control's </B><B>BorderStyle</B><B> values.</B></FONT></CENTER>

<BR>



<TABLE  BORDERCOLOR=#000040 BORDER=1 CELLSPACING=2 WIDTH="100%" CELLPADDING=2 >

<TR>

<TD 
VALIGN=top  BGCOLOR=#80FFFF ><FONT COLOR=#000080>

<I>Value</I>

</FONT>

<TD VALIGN=top  BGCOLOR=#80FFFF ><FONT COLOR=#000080>

<I>CONSTANT.TXT Name</I>

</FONT>

<TD VALIGN=top  BGCOLOR=#80FFFF ><FONT COLOR=#000080>

<I>Description</I></FONT>

<TR>

<TD 
VALIGN=top  BGCOLOR=#80FFFF ><FONT COLOR=#000080>

0-Transparent

</FONT>

<TD VALIGN=top  BGCOLOR=#80FFFF ><FONT COLOR=#000080>

TRANSPARENT

</FONT>

<TD VALIGN=top  BGCOLOR=#80FFFF ><FONT COLOR=#000080>

Background comes through the line</FONT>

<TR>


<TD VALIGN=top  BGCOLOR=#80FFFF ><FONT COLOR=#000080>

1-Solid

</FONT>

<TD VALIGN=top  BGCOLOR=#80FFFF ><FONT COLOR=#000080>

SOLID

</FONT>

<TD VALIGN=top  BGCOLOR=#80FFFF ><FONT COLOR=#000080>

The line is a solid line</FONT>

<TR>

<TD VALIGN=top  
BGCOLOR=#80FFFF ><FONT COLOR=#000080>

2-Dash

</FONT>

<TD VALIGN=top  BGCOLOR=#80FFFF ><FONT COLOR=#000080>

DASH

</FONT>

<TD VALIGN=top  BGCOLOR=#80FFFF ><FONT COLOR=#000080>

The line is comprised of dashes</FONT>

<TR>

<TD VALIGN=top  
BGCOLOR=#80FFFF ><FONT COLOR=#000080>

3-Dot

</FONT>

<TD VALIGN=top  BGCOLOR=#80FFFF ><FONT COLOR=#000080>

DOT

</FONT>

<TD VALIGN=top  BGCOLOR=#80FFFF ><FONT COLOR=#000080>

The line is comprised of dots</FONT>

<TR>

<TD VALIGN=top  BGCOLOR=#80FFFF 
><FONT COLOR=#000080>

4-Dash-Dot

</FONT>

<TD VALIGN=top  BGCOLOR=#80FFFF ><FONT COLOR=#000080>

DASH_DOT

</FONT>

<TD VALIGN=top  BGCOLOR=#80FFFF ><FONT COLOR=#000080>

The line is comprised of a series of dashes followed by dots</FONT>

<TR>

<TD 
VALIGN=top  BGCOLOR=#80FFFF ><FONT COLOR=#000080>

5-Dash-Dot-Dot

</FONT>

<TD VALIGN=top  BGCOLOR=#80FFFF ><FONT COLOR=#000080>

DASH_DOT_DOT

</FONT>

<TD VALIGN=top  BGCOLOR=#80FFFF ><FONT COLOR=#000080>

The line is comprised of a series of one dash 
followed by two dots</FONT>

<TR>

<TD VALIGN=top  BGCOLOR=#80FFFF ><FONT COLOR=#000080>

6-Inside Solid

</FONT>

<TD VALIGN=top  BGCOLOR=#80FFFF ><FONT COLOR=#000080>

INSIDE_SOLID

</FONT>

<TD VALIGN=top  BGCOLOR=#80FFFF ><FONT COLOR=#000080>

Same as 
1-Solid for lines</FONT>

</TABLE><P>Figure 22.3 shows how various BorderStyle settings affect the lines that you draw. The BorderStyle determines how a series of dashes and dots comprise the line's pattern. (Is this Morse code we're speaking here?)

<BR>


<P><B> <A HREF="22vel03.gif">Figure 22.3. Affects of the </B><B>BorderStyle</B><B> properties.</A></B>

<BR>

<P>To draw a line, double-click the line control on the toolbox. A line appears in the center of the form with two handles on each end. To move 
the line to a different location, drag the center of the line with the mouse. To lengthen or shorten the line, 
drag either handle on the line. You can raise and lower either end of the line by dragging either end's handle with the mouse.

<BR>

<P><B>Tip: 
</B>After you position the line with the mouse in the approximate location you need the line to appear, you can fine-tune the line's size and location by setting the various property values. If you're a patient programmer, you can even animate 
the lines 
by changing the X1, X2, Y1, and Y2 property settings repeatedly through code.

<P><FONT COLOR="#FF8000"><B><I>Stop and Type: </I></B></FONT>Figure 22.4 contains the Form window that might be used by a local hardware store for its regular program screen. 
The entire house was drawn using a series of lines. You can find this form inside 
the MOMPOP.MAK application on this book's disk.

<BR>

<BLOCKQUOTE>

<BLOCKQUOTE>

<HR ALIGN=CENTER>

<BR>

<NOTE><B>Note: </B>The only function connected to this form is 
the End statement inside the cmdExit_Click() command button's event procedure.</NOTE>

<BR>

<HR ALIGN=CENTER>

</BLOCKQUOTE></BLOCKQUOTE>

<P><B> <A HREF="22vel04.gif">Figure 22.4. Lines add eye-catching glamour to a dull form.</A></B>

<BR>

<P><FONT 
COLOR="#FF8000"><B><I>Review: </I></B></FONT>By using the line control and specifying various property values, you can draw shapes on the form's background.

<BR>

<BR>

<A NAME="E68E168"></A>

<H3 ALIGN=CENTER>

<CENTER>

<FONT SIZE=5 
COLOR="#FF0000"><B>Mastering the Shape Control</B></FONT></CENTER></H3>

<BR>

<P><FONT COLOR="#FF8000"><B><I>Concept: </I></B></FONT>The shape control gives you the ability to draw six different kinds of figures on the form. The various shading and color 
properties help you distinguish one shape from another.

<BR>

<P>Table 22.3 contains the properties available for the shape control. The most important property is the Shape property. The Shape property gives a shape one of the six fundamental shapes.


<BR>

<BR>

<P ALIGN=CENTER>

<CENTER>

<FONT COLOR="#000080"><B>Table 22.3. The shape control properties.</B></FONT></CENTER>

<BR>



<TABLE  BORDERCOLOR=#000040 BORDER=1 CELLSPACING=2 WIDTH="100%" CELLPADDING=2 >

<TR>

<TD VALIGN=top  BGCOLOR=#80FFFF 
><FONT COLOR=#000080>

<I>Property</I>

</FONT>

<TD VALIGN=top  BGCOLOR=#80FFFF ><FONT COLOR=#000080>

<I>Description</I></FONT>

<TR>

<TD VALIGN=top  BGCOLOR=#80FFFF ><FONT COLOR=#000080>

BackColor

</FONT>

<TD VALIGN=top  BGCOLOR=#80FFFF ><FONT 
COLOR=#000080>

Specifies a hexadecimal Windows color value that determines the background color of the shape.</FONT>

<TR>

<TD VALIGN=top  BGCOLOR=#80FFFF ><FONT COLOR=#000080>

BackStyle

</FONT>

<TD VALIGN=top  BGCOLOR=#80FFFF ><FONT COLOR=#000080>


Contains either 0-Transparent (the default) or 1-Opaque that determines whether the background of the form appears through the shape or if the shape hides whatever it covers.</FONT>

<TR>

<TD VALIGN=top  BGCOLOR=#80FFFF ><FONT COLOR=#000080>

BorderColor


</FONT>

<TD VALIGN=top  BGCOLOR=#80FFFF ><FONT COLOR=#000080>

Specifies a hexadecimal Windows color value that determines the color of the shape's bordering edges.</FONT>

<TR>

<TD VALIGN=top  BGCOLOR=#80FFFF ><FONT COLOR=#000080>

BorderStyle

</FONT>


<TD VALIGN=top  BGCOLOR=#80FFFF ><FONT COLOR=#000080>

Contains one of seven values that specifies the pattern of the shape's border. Table 22.2's line control's BorderStyle values provide the shape's BorderStyle possible values as well. The default value 
is 1-Solid. The BorderStyle has no effect on shapes 
with a BorderWidth greater than one twip.</FONT>

<TR>

<TD VALIGN=top  BGCOLOR=#80FFFF ><FONT COLOR=#000080>

BorderWidth

</FONT>

<TD VALIGN=top  BGCOLOR=#80FFFF ><FONT COLOR=#000080>

Specifies the 
size, in twips, that the shape's outline takes.</FONT>

<TR>

<TD VALIGN=top  BGCOLOR=#80FFFF ><FONT COLOR=#000080>

DrawMode

</FONT>

<TD VALIGN=top  BGCOLOR=#80FFFF ><FONT COLOR=#000080>

An advanced style that determines how the bit patterns of the 
shape interact with the surrounding form's bit appearance. The default value, 13 - Copy Pen, works well for virtually all Visual Basic applications.</FONT>

<TR>

<TD VALIGN=top  BGCOLOR=#80FFFF ><FONT COLOR=#000080>

FillColor

</FONT>

<TD VALIGN=top  
BGCOLOR=#80FFFF ><FONT COLOR=#000080>

Specifies a hexadecimal Windows color value that determines the color of the shape's interior lines.</FONT>

<TR>

<TD VALIGN=top  BGCOLOR=#80FFFF ><FONT COLOR=#000080>

FillStyle

</FONT>

<TD VALIGN=top  
BGCOLOR=#80FFFF ><FONT COLOR=#000080>

Contains one of eight values that specifies the pattern of lines with which Visual Basic paints the interior of the shape. Table 22.4 contains the possible values for the shape's FillStyle. The default FillStyle value 
is 0-Solid.</FONT>

<TR>

<TD VALIGN=top  BGCOLOR=#80FFFF ><FONT COLOR=#000080>

Height

</FONT>

<TD VALIGN=top  BGCOLOR=#80FFFF ><FONT COLOR=#000080>

Specifies the number of twips high that the shape takes (from the highest point to the lowest point in 
the shape).</FONT>

<TR>

<TD VALIGN=top  BGCOLOR=#80FFFF ><FONT COLOR=#000080>

Index

</FONT>

<TD VALIGN=top  BGCOLOR=#80FFFF ><FONT COLOR=#000080>

Specifies the subscript of the shape control if the shape control is part of a control array.</FONT>


<TR>

<TD VALIGN=top  BGCOLOR=#80FFFF ><FONT COLOR=#000080>

Left

</FONT>

<TD VALIGN=top  BGCOLOR=#80FFFF ><FONT COLOR=#000080>

Specifies the number of twips from the form's left edge to the shape's leftmost edge.</FONT>

<TR>

<TD VALIGN=top  
BGCOLOR=#80FFFF ><FONT COLOR=#000080>

Name

</FONT>

<TD VALIGN=top  BGCOLOR=#80FFFF ><FONT COLOR=#000080>

Contains the name of the shape control. Visual Basic names the line controls Shape1, Shape2, and so on, unless you rename the shape 
controls.</FONT>

<TR>

<TD VALIGN=top  BGCOLOR=#80FFFF ><FONT COLOR=#000080>

Shape

</FONT>

<TD VALIGN=top  BGCOLOR=#80FFFF ><FONT COLOR=#000080>

Contains one of six values that specifies the type of shape that the shape control takes on. Table 22.5 
contains the possible values for the shape's Shape property. The default Shape property is 0-Rectangle.</FONT>

<TR>

<TD VALIGN=top  BGCOLOR=#80FFFF ><FONT COLOR=#000080>

Tag

</FONT>

<TD VALIGN=top  BGCOLOR=#80FFFF ><FONT COLOR=#000080>

Unused by 
Visual Basic This is for the programmer's use for an identifying comment applied to the shape control.</FONT>

<TR>

<TD VALIGN=top  BGCOLOR=#80FFFF ><FONT COLOR=#000080>

Top

</FONT>

<TD VALIGN=top  BGCOLOR=#80FFFF ><FONT COLOR=#000080>

Specifies the 
number of twips from the form's top edge to the shape's highest edge.</FONT>

<TR>

<TD VALIGN=top  BGCOLOR=#80FFFF ><FONT COLOR=#000080>

Visible

</FONT>

<TD VALIGN=top  BGCOLOR=#80FFFF ><FONT COLOR=#000080>

Holds True or False, indicating whether the 
user can see the shape control.</FONT>

<TR>

<TD VALIGN=top  BGCOLOR=#80FFFF ><FONT COLOR=#000080>

Width

</FONT>

<TD VALIGN=top  BGCOLOR=#80FFFF ><FONT COLOR=#000080>

Specifies the number of twips wide that the shape takes (at the widest axis).</FONT>


</TABLE><P>Table 22.4 contains the possible values for the shape control's FillStyle property. Figure 22.5 shows you the various fill patterns that a shape can contain.

<BR>

<P><B> <A HREF="22vel05.gif">Figure 22.5. The </B><B>FillStyle</B><B> determines 
how the shapes' interiors appear.</A></B>

<BR>

<BR>

<P ALIGN=CENTER>

<CENTER>

<FONT COLOR="#000080"><B>Table 22.4. The shape control's </B><B>FillStyle</B><B> values.</B></FONT></CENTER>

<BR>



<TABLE  BORDERCOLOR=#000040 BORDER=1 CELLSPACING=2 
WIDTH="100%" CELLPADDING=2 >

<TR>

<TD VALIGN=top  BGCOLOR=#80FFFF ><FONT COLOR=#000080>

<I>Value</I>

</FONT>

<TD VALIGN=top  BGCOLOR=#80FFFF ><FONT COLOR=#000080>

<I>CONSTANT.TXT Name</I>

</FONT>

<TD VALIGN=top  BGCOLOR=#80FFFF ><FONT 
COLOR=#000080>

<I>Description</I></FONT>

<TR>

<TD VALIGN=top  BGCOLOR=#80FFFF ><FONT COLOR=#000080>

0-Solid

</FONT>

<TD VALIGN=top  BGCOLOR=#80FFFF ><FONT COLOR=#000080>

SOLID

</FONT>

<TD VALIGN=top  BGCOLOR=#80FFFF ><FONT COLOR=#000080>

Solid 
color fill with no pattern</FONT>

<TR>

<TD VALIGN=top  BGCOLOR=#80FFFF ><FONT COLOR=#000080>

1-Transparent

</FONT>

<TD VALIGN=top  BGCOLOR=#80FFFF ><FONT COLOR=#000080>

TRANSPARENT

</FONT>

<TD VALIGN=top  BGCOLOR=#80FFFF ><FONT COLOR=#000080>

The 
shape appears as an outline only</FONT>

<TR>

<TD VALIGN=top  BGCOLOR=#80FFFF ><FONT COLOR=#000080>

2-Horizontal Line

</FONT>

<TD VALIGN=top  BGCOLOR=#80FFFF ><FONT COLOR=#000080>

HORIZONTAL_LINE

</FONT>

<TD VALIGN=top  BGCOLOR=#80FFFF ><FONT 
COLOR=#000080>

Horizontal lines fill the shape</FONT>

<TR>

<TD VALIGN=top  BGCOLOR=#80FFFF ><FONT COLOR=#000080>

3-Vertical Line

</FONT>

<TD VALIGN=top  BGCOLOR=#80FFFF ><FONT COLOR=#000080>

VERTICAL_LINE

</FONT>

<TD VALIGN=top  BGCOLOR=#80FFFF 
><FONT COLOR=#000080>

Vertical lines fill the shape</FONT>

<TR>

<TD VALIGN=top  BGCOLOR=#80FFFF ><FONT COLOR=#000080>

4-Upward Diagonal

</FONT>

<TD VALIGN=top  BGCOLOR=#80FFFF ><FONT COLOR=#000080>

UPWARD_DIAGONAL

</FONT>

<TD VALIGN=top  
BGCOLOR=#80FFFF ><FONT COLOR=#000080>

Upward diagonal lines fill the shape</FONT>

<TR>

<TD VALIGN=top  BGCOLOR=#80FFFF ><FONT COLOR=#000080>

5-Downward Diagonal

</FONT>

<TD VALIGN=top  BGCOLOR=#80FFFF ><FONT COLOR=#000080>

DOWNWARD_DIAGONAL

</FONT>


<TD VALIGN=top  BGCOLOR=#80FFFF ><FONT COLOR=#000080>

Downward diagonal lines fill the shape</FONT>

<TR>

<TD VALIGN=top  BGCOLOR=#80FFFF ><FONT COLOR=#000080>

6-Cross

</FONT>

<TD VALIGN=top  BGCOLOR=#80FFFF ><FONT COLOR=#000080>

CROSS

</FONT>

<TD 
VALIGN=top  BGCOLOR=#80FFFF ><FONT COLOR=#000080>

Crosshairs fill the shape</FONT>

<TR>

<TD VALIGN=top  BGCOLOR=#80FFFF ><FONT COLOR=#000080>

7-Diagonal Cross

</FONT>

<TD VALIGN=top  BGCOLOR=#80FFFF ><FONT COLOR=#000080>

DIAGONAL_CROSS

</FONT>

<TD 
VALIGN=top  BGCOLOR=#80FFFF ><FONT COLOR=#000080>

Diagonal crosshairs fill the shape</FONT>

</TABLE><P>Table 22.5 contains the possible values for the shape control's Shape property. Figure 22.2 showed you the various shapes that the shape controls can 
take on. Therefore, when you want to place a square on a form, you'll place the shape control 
on the form and set the Shape property to 1-Square.

<BR>

<BR>

<P ALIGN=CENTER>

<CENTER>

<FONT COLOR="#000080"><B>Table 22.5. The shape control's 
</B><B>Shape</B><B> properties.</B></FONT></CENTER>

<BR>



<TABLE  BORDERCOLOR=#000040 BORDER=1 CELLSPACING=2 WIDTH="100%" CELLPADDING=2 >

<TR>

<TD VALIGN=top  BGCOLOR=#80FFFF ><FONT COLOR=#000080>

<I>Value</I>

</FONT>

<TD VALIGN=top  
BGCOLOR=#80FFFF ><FONT COLOR=#000080>

<I>CONSTANT.TXT Name</I>

</FONT>

<TD VALIGN=top  BGCOLOR=#80FFFF ><FONT COLOR=#000080>

<I>Description</I></FONT>

<TR>

<TD VALIGN=top  BGCOLOR=#80FFFF ><FONT COLOR=#000080>

0-Rectangle

</FONT>

<TD VALIGN=top  
BGCOLOR=#80FFFF ><FONT COLOR=#000080>

SHAPE_RECTANGLE

</FONT>

<TD VALIGN=top  BGCOLOR=#80FFFF ><FONT COLOR=#000080>

A rectangle</FONT>

<TR>

<TD VALIGN=top  BGCOLOR=#80FFFF ><FONT COLOR=#000080>

1-Square

</FONT>

<TD VALIGN=top  BGCOLOR=#80FFFF 
><FONT COLOR=#000080>

SHAPE_SQUARE

</FONT>

<TD VALIGN=top  BGCOLOR=#80FFFF ><FONT COLOR=#000080>

A square</FONT>

<TR>

<TD VALIGN=top  BGCOLOR=#80FFFF ><FONT COLOR=#000080>

2-Oval

</FONT>

<TD VALIGN=top  BGCOLOR=#80FFFF ><FONT COLOR=#000080>


SHAPE_OVAL

</FONT>

<TD VALIGN=top  BGCOLOR=#80FFFF ><FONT COLOR=#000080>

An oval</FONT>

<TR>

<TD VALIGN=top  BGCOLOR=#80FFFF ><FONT COLOR=#000080>

3-Circle

</FONT>

<TD VALIGN=top  BGCOLOR=#80FFFF ><FONT COLOR=#000080>

SHAPE_CIRCLE

</FONT>

<TD 
VALIGN=top  BGCOLOR=#80FFFF ><FONT COLOR=#000080>

A circle</FONT>

<TR>

<TD VALIGN=top  BGCOLOR=#80FFFF ><FONT COLOR=#000080>

4-Rounded Rectangle

</FONT>

<TD VALIGN=top  BGCOLOR=#80FFFF ><FONT COLOR=#000080>

SHAPE_ROUNDED_RECTANGLE

</FONT>

<TD 
VALIGN=top  BGCOLOR=#80FFFF ><FONT COLOR=#000080>

A rectangle with rounded corners</FONT>

<TR>

<TD VALIGN=top  BGCOLOR=#80FFFF ><FONT COLOR=#000080>

5-Rounded Square

</FONT>

<TD VALIGN=top  BGCOLOR=#80FFFF ><FONT COLOR=#000080>

SHAPE_ROUNDED_SQUARE


</FONT>

<TD VALIGN=top  BGCOLOR=#80FFFF ><FONT COLOR=#000080>

A square with rounded corners</FONT>

</TABLE><P><FONT COLOR="#FF8000"><B><I>Stop and Type: </I></B></FONT>Figure 22.6 provides a simple shape application that changes the shape as the user 
presses the command button. You can load and run the SHAPECH.MAK application on this book's disk if you 
want to study the application.

<BR>

<P><B> <A HREF="22vel06.gif">Figure 22.6. Changing the shape with the click of a button.</A></B>

<BR>

<P><FONT 
COLOR="#FF8000"><B><I>Review: </I></B></FONT>The shape control provides six of the seven fundamental geometric shapes that you can place on a form. The Shape property determines the outline of the shape.

<BR>

<BR>

<A NAME="E68E169"></A>

<H3 
ALIGN=CENTER>

<CENTER>

<FONT SIZE=5 COLOR="#FF0000"><B>If You Have Graphics Files...</B></FONT></CENTER></H3>

<BR>

<P><FONT COLOR="#FF8000"><B><I>Concept: </I></B></FONT>Visual Basic supports two additional graphics controls that don't draw graphics 
but with which you can place icons and graphic bitmap images that you may have on the disk.

<BR>

<P>Figure 22.7 shows the location of two additional graphics-related controls called the picture box control and the image control. These two controls are 
virtually identical and enable you to load disk images onto your application's form.

<BR>

<BLOCKQUOTE>

<BLOCKQUOTE>

<HR ALIGN=CENTER>

<BR>

<NOTE><B>Note: </B>The picture box control provides a few advanced features that you can tap into if you ever 
write <I>MDI</I> (<I>multiple document interface</I>) applications. The image box control is more efficient and displays images faster than the 
picture box.</NOTE>

<BR>

<HR ALIGN=CENTER>

</BLOCKQUOTE></BLOCKQUOTE>

<P><B> <A HREF="22vel07.gif">Figure 
22.7. The picture box and image control on the toolbox.</A></B>

<BR>

<P>Here are the three kinds of graphics files that these controls can load from the disk and display on a form:

<BR>

<UL>

<LI><I>Bitmap files</I> that end with the .BMP or .DIB 
filename extensions

<BR>

<BR>

<LI><I>Icon files</I> that end with the .ICO filename extension

<BR>

<BR>

<LI><I>Metafiles</I> that end with the .WMF filename extension

<BR>

<BR>

</UL>

<P>Where do you get these graphic files? None come with the 
Visual Basic Primer system (graphic images consume lots of disk space). There are several sources available. If you use the Microsoft Paintbrush program supplied with Windows, you can create 
bitmap files. Icon files are compact graphics files that contain 
the picture icons that you see in a Windows Program Manager group. Several various Windows applications store graphic images in the metafile format.

<BR>

<P>Table 22.6 contains the vital and common properties available for both the picture box and image 
controls. The most important value is the Picture property that contains the complete filename and pathname to the picture displayed inside the control.

<BR>

<BR>

<P ALIGN=CENTER>

<CENTER>

<FONT COLOR="#000080"><B>Table 22.6. The picture box and image 
controls' properties.</B></FONT></CENTER>

<BR>



<TABLE  BORDERCOLOR=#000040 BORDER=1 CELLSPACING=2 WIDTH="100%" CELLPADDING=2 >

<TR>

<TD VALIGN=top  BGCOLOR=#80FFFF ><FONT COLOR=#000080>

<I>Property</I>

</FONT>

<TD VALIGN=top  BGCOLOR=#80FFFF 
><FONT COLOR=#000080>

<I>Description</I></FONT>

<TR>

<TD VALIGN=top  BGCOLOR=#80FFFF ><FONT COLOR=#000080>

BorderStyle

</FONT>

<TD VALIGN=top  BGCOLOR=#80FFFF ><FONT COLOR=#000080>

Describes the style of the border around the image. If set to 0-None 
(the default), no border appears around the image. If 1-Fixed Single, a dark border line appears around the image.</FONT>

<TR>

<TD VALIGN=top  BGCOLOR=#80FFFF ><FONT COLOR=#000080>

Height

</FONT>

<TD VALIGN=top  BGCOLOR=#80FFFF ><FONT COLOR=#000080>


Contains the height, in twips, of the image. (See Stretch.)</FONT>

<TR>

<TD VALIGN=top  BGCOLOR=#80FFFF ><FONT COLOR=#000080>

Left

</FONT>

<TD VALIGN=top  BGCOLOR=#80FFFF ><FONT COLOR=#000080>

Holds the number of twips from the left edge of the Form 
window to the left edge of the image.</FONT>

<TR>

<TD VALIGN=top  BGCOLOR=#80FFFF ><FONT COLOR=#000080>

Name

</FONT>

<TD VALIGN=top  BGCOLOR=#80FFFF ><FONT COLOR=#000080>

Contains the name of the picture box or image. Visual Basic names the picture 
box controls Picture1, Picture2, and so on, and Visual Basic names the image control Image1, Image2, and so on unless you rename the controls.</FONT>

<TR>

<TD VALIGN=top  BGCOLOR=#80FFFF ><FONT COLOR=#000080>

Picture

</FONT>

<TD VALIGN=top  
BGCOLOR=#80FFFF ><FONT COLOR=#000080>

Contains a complete path and filename to the image that Visual Basic will display in the control at runtime. No image appears inside the control until the user runs the program.</FONT>

<TR>

<TD VALIGN=top  
BGCOLOR=#80FFFF ><FONT COLOR=#000080>

Stretch

</FONT>

<TD VALIGN=top  BGCOLOR=#80FFFF ><FONT COLOR=#000080>

(For image controls only.) If set to False, (the default) the control resizes automatically to fit the size of the graphic image. No matter what 
size you specify for the image control, the control will resize to the exact size of the disk file's graphic 
image as if to <I>shrinkwrap</I> around the image. If set to True, the image resizes to fit the shape of the control.</FONT>

<TR>

<TD VALIGN=top  
BGCOLOR=#80FFFF ><FONT COLOR=#000080>

Width

</FONT>

<TD VALIGN=top  BGCOLOR=#80FFFF ><FONT COLOR=#000080>

The width, in twips, of the control. (See Stretch.)</FONT>

</TABLE><P>When you want to put a graphic image on your form, you only need to place 
an image (or picture box) control on the form and specify a filename for the image that you want the control to display. Open a new form and follow these steps to create 
an application with an image:

<BR>

<OL>

<LI>Double-click the image control to 
place the control in the middle of the form.

<BR>

<BR>

<LI>Press F4 to display the Property window.

<BR>

<BR>

<LI>Click the Picture property. You'll see an ellipsis appear where you normally enter property values.

<BR>

<BR>

<LI>If you click the 
ellipsis, Visual Basic opens a Load Picture dialog box like the one shown in Figure 22.8. In the dialog box, you specify any file, including the path, that holds the image you want to display on your form.

<BR>The Picture property continues to hold the 
pathname and filename of the image that you place on the form. At runtime, Visual Basic will display the image in the place of the control.

<BR>

<BR>

</OL>

<P><B><A HREF="22vel08.gif">Figure 22.8. The Load Picture dialog box for filling in the 
</B><B>Picture</B><B> property.</A></B>

<BR>

<P>You also can change a graphic file that appears in an image or picture box control using Visual Basic code. The LoadPicture function loads specific graphic files into graphic controls to display those 
graphics on the form. The following statement 
changes the picture file used for an image control named imgFace:

<BR>

<BR>

<PRE>

<FONT COLOR="#000080">imgFace.Picture = LoadPicture(&quot;D:\FIGS\FACE.BMP&quot;)</FONT></PRE>

<P>You can replace pictures 
during runtime by loading different files using the LoadPicture() function.

<BR>

<P><B>Tip: </B>By using a null string, &quot;&quot;, for the LoadPicture() argument, you can erase a picture from a picture box or image control.

<P><FONT 
COLOR="#FF8000"><B><I>Review: </I></B></FONT>This section wraps up the discussion on combining graphics with Visual Basic programs. Not only does Visual Basic provide the tools needed to draw your own pictures, but Visual Basic also enables you to 
load 
images from disk files onto your own forms.

<BR>

<BR>

<A NAME="E68E170"></A>

<H3 ALIGN=CENTER>

<CENTER>

<FONT SIZE=5 COLOR="#FF0000"><B>Homework</B></FONT></CENTER></H3>

<BR>

<BR>

<A NAME="E69E155"></A>

<H4 ALIGN=CENTER>

<CENTER>

<FONT SIZE=4 
COLOR="#FF0000"><B>General Knowledge</B></FONT></CENTER></H4>

<BR>

<OL>

<LI>What two controls enable you to draw geometric shapes on a form?

<BR>

<BR>

<LI>How many different shapes does the shape control produce?

<BR>

<BR>

<LI>Which property value 
determines the pattern of drawn lines?

<BR>

<BR>

<LI>Which property value determines the shape of objects drawn with the shape control?

<BR>

<BR>

<LI>What two controls enable you to load graphic file images onto a form?

<BR>

<BR>

<LI>Which graphic 
image control is the most efficient of the two controls?

<BR>

<BR>

<LI>What three kinds of graphics files can Visual Basic display on a form?

<BR>

<BR>

<LI>Which property forces a graphic image to shrinkwrap around the picture box or image control?


<BR>

<BR>

<LI>Which control property determines the path and filename of the graphic image to display?

<BR>

<BR>

<LI>What is the name of the Visual Basic function that loads graphic file images at runtime?

<BR>

<BR>

</OL>

<BR>

<A 
NAME="E69E156"></A>

<H4 ALIGN=CENTER>

<CENTER>

<FONT SIZE=4 COLOR="#FF0000"><B>Find the Bug</B></FONT></CENTER></H4>

<BR>

<OL>

<LI>Jean has drawn a thick line that measures 15 twips. Jean wants to use the line to separate a large form message from 
the rest of the controls on her form. The trouble that Jean can't seem to overcome is that she wants the thick line to appear as a 
series of dashes. Visual Basic refuses to honor her BorderStyle request and always displays a solid line. Explain to Jean 
what her problem is.

<BR>

<BR>

<LI>Can you think of a roundabout way to accomplish Jean's thick, dashed line?

<BR>

<BR>

</OL>

<BR>

<A NAME="E69E157"></A>

<H4 ALIGN=CENTER>

<CENTER>

<FONT SIZE=4 COLOR="#FF0000"><B>What's the 
Output?</B></FONT></CENTER></H4>

<BR>

<OL>

<LI>Gordon wrote a program that contains the following statement:

<BR>imgPainting.Picture = LoadPicture(&quot;&quot;)

<BR>What appears on the image control when Gordon's application calls the LoadPicture() 
function?

<BR>

<BR>

</OL>

<BR>

<A NAME="E69E158"></A>

<H4 ALIGN=CENTER>

<CENTER>

<FONT SIZE=4 COLOR="#FF0000"><B>Write Code That...</B></FONT></CENTER></H4>

<BR>

<OL>

<LI>Suppose that you want to draw a rectangle with a blue border, red diagonal 
lines, and a green interior. Describe the shape control's properties that you would have to set to a blue, red, and green color.

<BR>

<BR>

</OL>

<BR>

<A NAME="E69E159"></A>

<H4 ALIGN=CENTER>

<CENTER>

<FONT SIZE=4 COLOR="#FF0000"><B>Extra 
Credit</B></FONT></CENTER></H4>

<BR>

<P>Write a program that draws a large green happy face in the center of the form. Add a command button that the user can click to blink one of the happy face's eyes.

<BR>

<P ALIGN=LEFT>

<A HREF="vel21.htm" 
TARGET="_self"><IMG SRC="purprev.gif" WIDTH = 32 HEIGHT = 32 BORDER = 0 ALT="Previous Page"></A>

<A HREF="#I0" TARGET="_self"><IMG SRC="purtop.gif" WIDTH = 32 HEIGHT = 32 BORDER = 0 ALT="Page Top"></A>

<A HREF="index.htm" TARGET="_self"><IMG 
SRC="purtoc.gif" WIDTH = 32 HEIGHT = 32 BORDER = 0 ALT="TOC"></A>

<A HREF="velp11.htm" TARGET="_self"><IMG SRC="purnext.gif" WIDTH = 32 HEIGHT = 32 BORDER = 0 ALT="Next Page"></A>


</BODY></HTML>







