<HTML>

<HEAD>

<TITLE>Visual Basic in 12 Easy Lessons velp12.htm </TITLE>

<LINK REL="ToC" HREF="index.htm">

<LINK REL="Index" HREF="htindex.htm">

<LINK REL="Next" HREF="velxa.htm">

<LINK REL="Previous" HREF="vel24.htm"></HEAD>

<BODY BGCOLOR="#FFFFFF" 
TEXT="#000000" LINK="#0000FF" VLINK="#800080">

<A NAME="I0"></A>

<H2>Visual Basic in 12 Easy Lessons velp12.htm</H2>

<P ALIGN=LEFT>

<A HREF="vel24.htm" TARGET="_self"><IMG SRC="purprev.gif" WIDTH = 32 HEIGHT = 32 BORDER = 0 ALT="Previous Page"></A>

<A 
HREF="index.htm" TARGET="_self"><IMG SRC="purtoc.gif" WIDTH = 32 HEIGHT = 32 BORDER = 0 ALT="TOC"></A>

<A HREF="velxa.htm" TARGET="_self"><IMG SRC="purnext.gif" WIDTH = 32 HEIGHT = 32 BORDER = 0 ALT="Next Page"></A>


<HR ALIGN=CENTER>

<P>

<UL>

<UL>

<UL>

<LI>

<A HREF="#E68E185" >Stop &amp; Type</A>

<UL>

<LI>

<A HREF="#E69E169" >The Program's Description</A>

<LI>

<A 
HREF="#E69E170" >Studying the Grid</A>

<LI>

<A HREF="#E69E171" >Descriptions</A>

<LI>

<A HREF="#E69E172" >Using the Command Buttons and Scroll Bars</A>

<LI>

<A HREF="#E69E173" >Description</A>

<LI>

<A HREF="#E69E174" >Close the 
Application</A></UL></UL></UL></UL>

<HR ALIGN=CENTER>

<A NAME="E66E36"></A>

<H1 ALIGN=CENTER>

<CENTER>

<FONT SIZE=6 COLOR="#FF0000"><B>Project 12</B></FONT></CENTER></H1>

<BR>

<A NAME="E67E39"></A>

<H2 ALIGN=CENTER>

<CENTER>

<FONT SIZE=6 
COLOR="#FF0000"><B>Getting Exotic</B></FONT></CENTER></H2>

<BR>

<BR>

<A NAME="E68E185"></A>

<H3 ALIGN=CENTER>

<CENTER>

<FONT SIZE=5 COLOR="#FF0000"><B>Stop &amp; Type</B></FONT></CENTER></H3>

<BR>

<P>This lesson taught you how to use the scroll 
bars and the grid control, to manage the mouse, and to use Visual Basic's integrated debugger. The scroll bars give users a flexible control for entering and selecting from a range of data values. The grid 
enables the user to see tables of information in 
a spreadsheet-like format. When you need to monitor the user's mouse movements, in addition to the built-in monitoring that Visual Basic performs for all control clicking with the mouse, you can write code 
that responds to the user's mouse movements and 
clicks.

<BR>

<P>The debugger is an integrated development tool that helps you hunt down errors that appear in your code. The debugger allows you to single step through a program's code, monitor variables, and inquire into a program's data values at any 
point in the 
running of the program.

<BR>

<P>In this lesson, you saw the following:

<BR>

<UL>

<LI>How to place and monitor scroll bar controls

<BR>

<BR>

<LI>How to set up a grid for tables of data

<BR>

<BR>

<LI>How to determine selected cells 
within a grid

<BR>

<BR>

<LI>How to monitor the user's mouse movements

<BR>

<BR>

<LI>How to use Visual Basic's integrated debugger to remove obscure bugs in your programs

<BR>

<BR>

</UL>

<BR>

<A NAME="E69E169"></A>

<H4 ALIGN=CENTER>

<CENTER>


<FONT SIZE=4 COLOR="#FF0000"><B>The Program's Description</B></FONT></CENTER></H4>

<BR>

<P>Figure P12.1 shows the PROJEC12.MAK opening Form window. Much of this project comes from a description of a scroll bar application found in the first unit of this 
lesson. As Figure P12.1 shows, the user first sees a formatted table of values stored in a 
grid.

<BR>

<P><B> <A HREF="p12vel01.gif">Figure P12.1. Project 12's application begins with a simple form.</A></B>

<BR>

<BLOCKQUOTE>

<BLOCKQUOTE>

<HR 
ALIGN=CENTER>

<BR>

<NOTE><B>Warning</B><FONT COLOR="#FF8000"><B><I>: </I></B></FONT>You must make sure that the GRID.VBX customer control file for the grid control appears in your Visual Basic's directory. See <A HREF="vel23.htm">Unit 23</A> for details 
on adding this 
file.</NOTE>

<BR>

<HR ALIGN=CENTER>

</BLOCKQUOTE></BLOCKQUOTE>

<P>The application demonstrates how to use, change, and monitor the user's use of a grid control as well as how you can use scroll bars to change the behavior of other 
controls on the form.

<BR>

<BR>

<A NAME="E69E170"></A>

<H4 ALIGN=CENTER>

<CENTER>

<FONT SIZE=4 COLOR="#FF0000"><B>Studying the Grid</B></FONT></CENTER></H4>

<BR>

<P>The grid represents the lawn fertilizer's application price table for the 8 
customer's 5 lawn applications. As described in <A HREF="vel23.htm">Unit 23</A>, this lawn care company just began and needs to make 40 service calls that year. As the company 
adds more customers, the grid can easily be expanded by changing the grid's 
property values and adding the new values in the code. Once the number of customers grew by just a few more, the lawn service would want to incorporate the disk drive and store the 
current pricing table on the disk drive for easy maintenance and for use 
by other programs such as an invoicing program.

<BR>

<P>Try this: Click the grid's scroll bars to scroll around the pricing table looking at the 40 prices. Before worrying about the command buttons and horizontal scroll bars at the right of the screen, 
study listing P12.1 for a glimpse of the overall 
program's format.

<BR>

<P>

<FONT COLOR="#000080"><B>Listing P12.1. The </B><B>Form_Load()</B><B> procedure that controls the flow of the initial code.</B></FONT>

<BR>

<PRE>

<FONT COLOR="#000080">1: 
Sub Form_Load ()

2: ' Defines the justification of the cells

3: ' as well as assigns cell titles to the

4: ' fixed row and columns and assigns initial

5: ' price values to the 40 cells.

6: Call InitScrolls ' Initialize scroll bars

7: Call CenterCells 
' Center all cell alignments

8: Call SizeCells ' Specify width of cells

9: Call Titles ' Initialize column and row titles

10: Call FillCells ' Fill cells with values

11: End Sub</FONT></PRE>

<BLOCKQUOTE>

<BLOCKQUOTE>

<HR ALIGN=CENTER>

<BR>


<NOTE>6: Break long modules into shorter ones.</NOTE>

<BR>

<HR ALIGN=CENTER>

</BLOCKQUOTE></BLOCKQUOTE>

<BLOCKQUOTE>

<BLOCKQUOTE>

<HR ALIGN=CENTER>

<BR>

<NOTE><I>Definition: Structured programs</I> are programs broken into several small sections of 
code.</NOTE>

<BR>

<HR ALIGN=CENTER>

</BLOCKQUOTE></BLOCKQUOTE>

<P><FONT COLOR="#FF8000"><B><I>Analysis: </I></B></FONT>The code in Listing P12.1 demonstrates a programming approach called <I>structured programming</I> that you should incorporate into 
your own programs. Form_Load() isn't one huge event procedure 
because the Call statements in lines 6 through 10 help break up the code into smaller and more manageable code routines. All of the called code executes when the Form_Load() event procedure 
runs (right before the user sees the form on the screen), but the 
five subroutines provide a way for you to break the program into sections that let you zero in later on parts that you need to modify.

<BR>

<P>Suppose that you need to update the pricing 
information. If you study only the Form_Load() procedure, you can see that the FillCells subroutine fills the grid's cells with values. Therefore, you could go straight to that subroutine if you needed to 
change the prices.

<BR>

<P>Listing P12.2 
contains the code for the routines called by the Form_Load() procedure. Study the code to familiarize yourself with your own grid's initialization requirements.

<BR>

<P><B>Warning: </B>Not all of the code for the FillCells and Titles subroutines is 
listed in Listing P12.2 because the code is lengthy and repetitive. The long string of assignment statements helps to show how loading and saving the pricing information 
from and to the disk would be helpful once the company added many more customers. You 
don't want to look through and modify long strings of assignments every time that a price needs updating, you get a new customer, or you lose a customer. Using the disk 
for pricing, however, would probably require at least one additional program that 
enables you to update the disk price information directly.

<P>

<FONT COLOR="#000080"><B>Listing P12.2. The code that the </B><B>Form_Load()</B><B> procedure calls to initialize the grid and other controls.</B></FONT>

<BR>

<PRE>

<FONT 
COLOR="#000080">1: Sub InitScrolls ()

2: ' Set both scroll bars to their maximum values

3: hscIncrease.Value = 15

4: hscDecrease.Value = 15

5: End Sub

6:

7: Sub CenterCells ()

8: ' Sets the justification of the grid's

9: ' cells to center alignment


10: Dim Apps As Integer ' 5 applications yearly

11: ' Center all values in the grid

12: For Apps = 0 To 5 ' 5 applications

13: grdLawn.Col = Apps ' Locate next column

14: ' Center the fixed cells in this column

15: grdLawn.FixedAlignment(Apps) = 2


16: Next Apps

17: For Apps = 1 To 5 ' 5 applications

18: ' Center the non-fixed cells in this column

19: grdLawn.ColAlignment(Apps) = 2

20: Next Apps

21: End Sub

22:

23: Sub SizeCells ()

24: ' Specify the width of each cell

25: Dim Apps As Integer 
' 5 Application

26: For Apps = 0 To 5

27: grdLawn.ColWidth(Apps) = 1100 ' Twips

28: Next Apps

29: End Sub

30:

31: Sub Titles ()

32: ' Fill in the column titles

33: grdLawn.Row = 0 ' All titles are in row #0

34: grdLawn.Col = 1

35: grdLawn.Text = 
&quot;Pre-Emerge&quot;

36: grdLawn.Col = 2

37: grdLawn.Text = &quot;Deep&quot;

38: ' Rest of column titles are filled here

39: ' Fill in the row titles

40: grdLawn.Col = 0 ' Customer titles in first column

41: grdLawn.Row = 1

42: grdLawn.Text = 
&quot;Jones&quot;

43: grdLawn.Row = 2

44: grdLawn.Text = &quot;Smith&quot;

45: ' Rest of row titles are filled here

46: End Sub

47:

48: Sub FillCells ()

49: ' Fill in all 40 cells one at a time.

50: ' This is tedious!

51: '

52: ' Normally, you 
would fill these cells from

53: ' a disk file or through calculations.

54: grdLawn.Row = 1

55: grdLawn.Col = 1

56: grdLawn.Text = 43.16

57: grdLawn.Col = 2

58: grdLawn.Text = 41.56

59: grdLawn.Col = 3

60: grdLawn.Text = 34.57

61: grdLawn.Col = 4


62: grdLawn.Text = 27.49

63: grdLawn.Col = 5

64: grdLawn.Text = 41.34

65: grdLawn.Row = 2

66: grdLawn.Col = 1

67: grdLawn.Text = 43.56

68: ' Rest of cells filled here

69: End Sub</FONT></PRE>

<BR>

<A NAME="E69E171"></A>

<H4 ALIGN=CENTER>


<CENTER>

<FONT SIZE=4 COLOR="#FF0000"><B>Descriptions</B></FONT></CENTER></H4>

<BR>

<P>1: The code for the subroutine procedure that sets the scroll bars to their initial maximum values.

<BR>

<P>2: A remark that explains the procedure.

<BR>

<P>3: 
Set the Increase scroll bar to its maximum value of 15, which represents a 15 percent increase when the user clicks the Increase command button.

<BR>

<P>4: Set the Decrease scroll bar to its maximum value of 15, which represents a 15 percent decrease 
when the user clicks the Decrease command button.

<BR>

<P>5: Terminate the subroutine.

<BR>

<P>6: A blank line to separate the procedures.

<BR>

<P>7: The code for the subroutine procedure that sets the alignment in all the grid's cells to centered 
justification.

<BR>

<P>8: A remark explains the procedure.

<BR>

<P>9: The remark continues.

<BR>

<P>10: Define a variable used to loop through the number of applications.

<BR>

<P>11: A remark explains the code.

<BR>

<P>12: Step through all of the 
table's six columns (the first column, column 0, holds the row titles).

<BR>

<P>13: Set the column number to the For loop's value.

<BR>

<P>14: A remark explains the code.

<BR>

<P>15: Center (the value of 2 sets the property to 2-Center) the alignment 
property of all the fixed rows in the selected column. Only the top row is fixed in the last five columns.

<BR>

<BLOCKQUOTE>

<BLOCKQUOTE>

<HR ALIGN=CENTER>

<BR>

<NOTE>15: Visual Basic right-justifies cell values if you don't change the 
justification.</NOTE>

<BR>

<HR ALIGN=CENTER>

</BLOCKQUOTE></BLOCKQUOTE>

<P>16: Continue the loop.

<BR>

<P>17: Step through the table's last five columns (these contain the nonfixed columns) to prepare for centering.

<BR>

<P>18: A remark explains 
the code.

<BR>

<P>19: Center (the value of 2 sets the property to 2-Center) the alignment property of all the nonfixed rows in the selected column.

<BR>

<P>20: Continue the loop.

<BR>

<P>21: Terminate the subroutine.

<BR>

<P>22: A blank line to 
separate the procedures.

<BR>

<P>23: The code for the subroutine procedure that sets the width of the cells.

<BR>

<P>24: A remark explains the procedure.

<BR>

<P>25: Define a variable used to loop through the number of applications.

<BR>

<P>26: 
Step through each column, including the first fixed column 0.

<BR>

<P>27: Set every cell to 1,100 twips wide.

<BR>

<BLOCKQUOTE>

<BLOCKQUOTE>

<HR ALIGN=CENTER>

<BR>

<NOTE>27: Make sure that each cell is wide enough to hold all data and 
titles.</NOTE>

<BR>

<HR ALIGN=CENTER>

</BLOCKQUOTE></BLOCKQUOTE>

<P>28: Continue the loop.

<BR>

<P>29: Terminate the subroutine.

<BR>

<P>30: A blank line to separate the procedures.

<BR>

<P>31: The code for the subroutine procedure that 
initializes all the titles in the grid's fixed rows and columns.

<BR>

<P>32: A remark explains the procedure.

<BR>

<P>33: Set up for the first row (row number 0).

<BR>

<P>34: Set up for the second column (column number 1).

<BR>

<P>35: Assign a 
title.

<BR>

<P>36: Move to the next column in the same row.

<BR>

<P>37: Assign a title.

<BR>

<P>38: A remark to explain that not all the code is shown.

<BR>

<P>39: A remark explains the code.

<BR>

<P>40: Set up for the first column (column number 
0).

<BR>

<P>41: Set up for the second row (row number 1).

<BR>

<P>42: Assign a title.

<BR>

<P>43: Move to the next row in the same column.

<BR>

<P>44: Assign a title.

<BR>

<P>45: A remark to explain that not all the code is shown.

<BR>

<P>46: 
Terminates the subroutine.

<BR>

<P>47: A blank line to separate the procedures.

<BR>

<P>48: The code for the subroutine procedure that initializes all the values in the grid's nonfixed cells.

<BR>

<P>49: A remark explains the procedure.

<BR>

<P>50: 
The remark continues.

<BR>

<P>51: The remark continues.

<BR>

<P>52: The remark continues.

<BR>

<P>53: The remark continues.

<BR>

<P>54: Set up for the second row (the first nonfixed row).

<BR>

<BLOCKQUOTE>

<BLOCKQUOTE>

<HR ALIGN=CENTER>

<BR>


<NOTE>54: The Row and Col properties determine which cell gets the next value.</NOTE>

<BR>

<HR ALIGN=CENTER>

</BLOCKQUOTE></BLOCKQUOTE>

<P>55: Set up for the second column (the first nonfixed column).

<BR>

<P>56: Assign a price value.

<BR>

<P>57: 
Move to the next column.

<BR>

<P>58: Assign a price value.

<BR>

<P>59: Move to the next column.

<BR>

<P>60: Assign a price value.

<BR>

<P>61: Move to the next column.

<BR>

<P>62: Assign a price value.

<BR>

<P>63: Move to the next column.

<BR>


<P>64: Assign a price value.

<BR>

<P>65: Move to the next row.

<BR>

<P>66: Move to the next column.

<BR>

<P>67: Assign a price value.

<BR>

<P>68: A remark to explain that not all code is listed here.

<BR>

<P>69: Terminate the subroutine.

<BR>


<BR>

<A NAME="E69E172"></A>

<H4 ALIGN=CENTER>

<CENTER>

<FONT SIZE=4 COLOR="#FF0000"><B>Using the Command Buttons and Scroll Bars</B></FONT></CENTER></H4>

<BR>

<P>The application is set up to allow the user to select one or more cells with the mouse 
and then update the price values for only those selected cells. The user can thus try various pricing scenarios to see which pricing structure works best for specific 
applications. When the user clicks either command button, the selected cell or cells all 
increase or decrease by the amount shown on the command button at the time of the click. All unselected cells remain unaffected by the price change.

<BR>

<P>The scroll bars affect the price of the change as well as the captions on the command buttons 
themselves. For example, if the user lowers the value of the Decrease scroll bar, the Decrease by... command button's caption changes accordingly. The next 
time the user clicks the command button, the selected cells will decrease in price by the amount 
indicated on the scroll bar. The code in Listing P12.3 describes the interaction between the two scroll bars and their appropriate command buttons.

<BR>

<P>

<FONT COLOR="#000080"><B>Listing P12.3. Managing the price changes through scroll bars, command 
buttons, and selected cells.</B></FONT>

<BR>

<PRE>

<FONT COLOR="#000080">1: Sub hscDecrease_Change ()

2: ' Change the command button's caption

3: cmdDecrease.Caption = &quot;&amp;Decrease by&quot; &amp; Str$(hscDecrease.Value) &amp; &quot;%&quot;

4: 
End Sub

5:

6: Sub hscIncrease_Change ()

7: ' Change the command button's caption

8: cmdIncrease.Caption = &quot;&amp;Increase by&quot; &amp; Str$(hscIncrease.Value) &amp; &quot;%&quot;

9: End Sub

10:

11: Sub cmdDecrease_Click ()

12: ' Decrease 
selected cell values

13: ' by the decreasing scroll bar percentage

14: Dim SelRows, SelCols As Integer

15: If (grdLawn.HighLight) Then ' If true...

16: For SelRows = grdLawn.SelStartRow To grdLawn.SelEndRow

17: For SelCols = grdLawn.SelStartCol To 
grdLawn.SelEndCol

18: grdLawn.Row = SelRows

19: grdLawn.Col = SelCols

20: ' Decrease the cell by scroll bar amount

21: grdLawn.Text = grdLawn.Text - (hscDecrease.Value / 100 * grdLawn.Text)

22: grdLawn.Text = Format(grdLawn.Text, &quot;Fixed&quot;)


23: Next SelCols

24: Next SelRows

25: End If

26: End Sub

27:

28: Sub cmdIncrease_Click ()

29: ' Increase selected cell values

30: ' by the amount of the increase scroll bar's percentage

31: Dim SelRows, SelCols As Integer

32: If 
(grdLawn.HighLight) Then ' If true...

33: For SelRows = grdLawn.SelStartRow To grdLawn.SelEndRow

34: For SelCols = grdLawn.SelStartCol To grdLawn.SelEndCol

35: grdLawn.Row = SelRows

36: grdLawn.Col = SelCols

37: ' Increase the cell by scroll bar 
amount

38: grdLawn.Text = grdLawn.Text * (1 + hscIncrease.Value / 100)

39: grdLawn.Text = Format(grdLawn.Text, &quot;Fixed&quot;)

40: Next SelCols

41: Next SelRows

42: End If

43: End Sub

44:

45: Sub cmdExit_Click ()

46: End

47: End 
Sub</FONT></PRE>

<BR>

<A NAME="E69E173"></A>

<H4 ALIGN=CENTER>

<CENTER>

<FONT SIZE=4 COLOR="#FF0000"><B>Description</B></FONT></CENTER></H4>

<BR>

<P>1: The code for the event procedure that executes when the user changes the decreasing scroll bar.


<BR>

<P>2: A remark explains the procedure.

<BR>

<P>3: Change the command button's caption to reflect the new percentage decrease.

<BR>

<BLOCKQUOTE>

<BLOCKQUOTE>

<HR ALIGN=CENTER>

<BR>

<NOTE>3: One event procedure can change the property values of 
another.</NOTE>

<BR>

<HR ALIGN=CENTER>

</BLOCKQUOTE></BLOCKQUOTE>

<P>4: Terminate the procedure.

<BR>

<P>5: A blank line separates the procedures.

<BR>

<P>6: The code for the event procedure that executes when the user changes the increasing scroll 
bar.

<BR>

<P>7: A remark explains the procedure.

<BR>

<P>8: Change the command button's caption to reflect the new percentage increase.

<BR>

<P>9: Terminate the procedure.

<BR>

<P>10: A blank line separates the procedures.

<BR>

<P>11: The code 
for the event procedure that executes when the user clicks the Decrease command button.

<BR>

<P>12: A remark that explains the event procedure.

<BR>

<P>13: The remark continues.

<BR>

<P>14: Define two variables that control the selected cells.

<BR>


<P>15: If there are highlighted cells...

<BR>

<BLOCKQUOTE>

<BLOCKQUOTE>

<HR ALIGN=CENTER>

<BR>

<NOTE>15: There are no selected cells if no cells are highlighted.</NOTE>

<BR>

<HR ALIGN=CENTER>

</BLOCKQUOTE></BLOCKQUOTE>

<P>16: Step through the 
selected rows.

<BR>

<P>17: Step through the selected columns.

<BR>

<P>18: Set the row to be changed.

<BR>

<P>19: Set the column to be changed.

<BR>

<P>20: A remark explains the code.

<BR>

<P>21: Update the cell's value by the amount of the 
decrease.

<BR>

<P>22: Format the cell to two decimal places.

<BR>

<P>23: Continue stepping through the selected columns.

<BR>

<P>24: Continue stepping through the selected rows.

<BR>

<P>25: Terminate the If statement.

<BR>

<P>26: Terminate the 
procedure.

<BR>

<P>27: A blank line separates the procedures.

<BR>

<P>28: The code for the event procedure that executes when the user clicks the Increase command button.

<BR>

<P>29: A remark that explains the event procedure.

<BR>

<P>30: The 
remark continues.

<BR>

<P>31: Defines two variables that control the selected cells.

<BR>

<P>32: If there are highlighted cells...

<BR>

<P>33: Step through the selected rows.

<BR>

<P>34: Step through the selected columns.

<BR>

<P>35: Set the row 
to be changed.

<BR>

<P>36: Set the column to be changed.

<BR>

<P>37: A remark explains the code.

<BR>

<P>38: Update the cell's value by the amount of the increase.

<BR>

<BLOCKQUOTE>

<BLOCKQUOTE>

<HR ALIGN=CENTER>

<BR>

<NOTE>38: Does not affect 
any cells that are unselected.</NOTE>

<BR>

<HR ALIGN=CENTER>

</BLOCKQUOTE></BLOCKQUOTE>

<P>39: Format the cell to two decimal places.

<BR>

<P>40: Continue stepping through the selected columns.

<BR>

<P>41: Continue stepping through the selected 
rows.

<BR>

<P>42: Terminate the If statement.

<BR>

<P>43: Terminate the procedure.

<BR>

<P>44: A blank line separates the procedures.

<BR>

<P>45: The code for the event procedure that executes when the user clicks the Exit command button.

<BR>


<P>46: Terminate the program.

<BR>

<P>47: Terminate the procedure.

<BR>

<BR>

<A NAME="E69E174"></A>

<H4 ALIGN=CENTER>

<CENTER>

<FONT SIZE=4 COLOR="#FF0000"><B>Close the Application</B></FONT></CENTER></H4>

<BR>

<P>You can now exit the application 
and exit Visual Basic. Congratulations! You are now a Visual Basic programmer!

<P ALIGN=LEFT>

<A HREF="vel24.htm" TARGET="_self"><IMG SRC="purprev.gif" WIDTH = 32 HEIGHT = 32 BORDER = 0 ALT="Previous Page"></A>

<A HREF="#I0" TARGET="_self"><IMG 
SRC="purtop.gif" WIDTH = 32 HEIGHT = 32 BORDER = 0 ALT="Page Top"></A>

<A HREF="index.htm" TARGET="_self"><IMG SRC="purtoc.gif" WIDTH = 32 HEIGHT = 32 BORDER = 0 ALT="TOC"></A>

<A HREF="velxa.htm" TARGET="_self"><IMG SRC="purnext.gif" WIDTH = 32 HEIGHT = 
32 BORDER = 0 ALT="Next Page"></A>


</BODY></HTML>







