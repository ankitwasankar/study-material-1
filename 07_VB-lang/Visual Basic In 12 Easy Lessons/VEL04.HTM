<HTML>

<HEAD>

<TITLE>Visual Basic in 12 Easy Lessons vel04.htm </TITLE>

<LINK REL="ToC" HREF="index.htm">

<LINK REL="Index" HREF="htindex.htm">

<LINK REL="Next" HREF="velp02.htm">

<LINK REL="Previous" HREF="vel03.htm"></HEAD>

<BODY BGCOLOR="#FFFFFF" 
TEXT="#000000" LINK="#0000FF" VLINK="#800080">

<A NAME="I0"></A>

<H2>Visual Basic in 12 Easy Lessons vel04.htm</H2>

<P ALIGN=LEFT>

<A HREF="vel03.htm" TARGET="_self"><IMG SRC="purprev.gif" WIDTH = 32 HEIGHT = 32 BORDER = 0 ALT="Previous Page"></A>

<A 
HREF="index.htm" TARGET="_self"><IMG SRC="purtoc.gif" WIDTH = 32 HEIGHT = 32 BORDER = 0 ALT="TOC"></A>

<A HREF="velp02.htm" TARGET="_self"><IMG SRC="purnext.gif" WIDTH = 32 HEIGHT = 32 BORDER = 0 ALT="Next Page"></A>


<HR ALIGN=CENTER>

<P>

<UL>

<UL>

<UL>

<LI>

<A HREF="#E68E32" >What You'll Learn</A>

<LI>

<A HREF="#E68E33" >Event-Driven Environments</A>

<LI>

<A 
HREF="#E68E34" >Control Properties</A>

<LI>

<A HREF="#E68E35" >Naming Conventions</A>

<LI>

<A HREF="#E68E36" >More Consistency: AUTOLOAD.MAK and CONSTANT.TXT</A>

<LI>

<A HREF="#E68E37" >Quick to the Draw!</A>

<LI>

<A HREF="#E68E38" >Homework</A>


<UL>

<LI>

<A HREF="#E69E32" >General Knowledge</A>

<LI>

<A HREF="#E69E33" >Find the Bug</A>

<LI>

<A HREF="#E69E34" >Extra Credit</A></UL></UL></UL></UL>

<HR ALIGN=CENTER>

<A NAME="E66E5"></A>

<H1 ALIGN=CENTER>

<CENTER>

<FONT SIZE=6 
COLOR="#FF0000"><B>Lesson 2, Unit 4</B></FONT></CENTER></H1>

<BR>

<A NAME="E67E8"></A>

<H2 ALIGN=CENTER>

<CENTER>

<FONT SIZE=6 COLOR="#FF0000"><B>Bare-Bones Programs</B></FONT></CENTER></H2>

<BR>

<BR>

<A NAME="E68E32"></A>

<H3 ALIGN=CENTER>


<CENTER>

<FONT SIZE=5 COLOR="#FF0000"><B>What You'll Learn</B></FONT></CENTER></H3>

<BR>

<UL>

<LI> [lb] Event-driven environments

<BR>

<BR>

<LI> [lb] Control properties

<BR>

<BR>

<LI> [lb] Naming conventions

<BR>

<BR>

<LI> [lb] AUTOLOAD.MAK 
and CONSTANT.TXT

<BR>

<BR>

</UL>

<P>In this unit, you will create your own program with Visual Basic from scratch You will write a fully-working Windows program that displays a resizable window, a command button, and a control button with a control 
button menu.

<BR>

<P>Before you create your first application, however, you must understand how Visual Basic programs interact with the Windows environment.

<BR>

<BR>

<A NAME="E68E33"></A>

<H3 ALIGN=CENTER>

<CENTER>

<FONT SIZE=5 
COLOR="#FF0000"><B>Event-Driven Environments</B></FONT></CENTER></H3>

<BR>

<P><FONT COLOR="#FF8000"><B><I>Concept: </I></B></FONT>A Windows program behaves differently from a DOS-based program. Instead of the program controlling the user, the user 
controls the program. When the user responds to a menu or control, Windows 
generates an event that describes the particular action.

<BR>

<P>Picture yourself driving down the road. All kinds of controls are at your fingertips&#151;steering wheel, 
blinkers, headlights, breaks, gas pedal, gear shift, radio knobs, rearview mirror, and air conditioning and heater controls. At any time, you might 
press the brake, turn left, turn on the radio, adjust the mirror, or speed up. The driving conditions, not 
the physical order of the controls, determine what you do next.

<BR>

<P>When you press the gas pedal, does your foot alone make the car go faster? The answer is no. You would have to have a very powerful foot to be able to speed up a car already going 50 
miles per hour. The foot pedal causes an event to happen. That event 
is that more gas is fed to the car for fuel to burn and the car goes faster. Your car performs its job and makes adjustments based on the events that you trigger.

<BR>

<BLOCKQUOTE>


<BLOCKQUOTE>

<HR ALIGN=CENTER>

<BR>

<NOTE><I>Definition: </I>An <I>event</I> can be a mouse move, a mouse click, a keystroke, or a control response.</NOTE>

<BR>

<HR ALIGN=CENTER>

</BLOCKQUOTE></BLOCKQUOTE>

<P>Using a Windows program is like driving 
a car in the following respect: You do not always perform the same actions, and the actions that you perform cause certain events to occur. In Windows terminology, an <I>event</I> is the action that the user 
takes. Whenever the user clicks the mouse, 
presses a key, responds to a control, or selects from a menu, an event happens. Windows constantly monitors the running Visual Basic program, looking for events.

<BR>

<BLOCKQUOTE>

<BLOCKQUOTE>

<HR ALIGN=CENTER>

<BR>

<NOTE><B>Note: </B>Too many things 
can happen in a GUI-based program for it to follow a straight, sequential pattern. If you were to run a DOS-based accounting program, the program more than likely would present you with a menu of limited choices. Only 
after you select from the menu, does 
the program take you through the next step. In a Windows program, you are offered a selection of controls, and you can respond to any control in any order. The program must be able to sense when an event takes place and 
to handle it accordingly.</NOTE>


<BR>

<HR ALIGN=CENTER>

</BLOCKQUOTE></BLOCKQUOTE>

<P>Windows and Visual Basic constantly monitor running programs. When the user clicks a command button or performs any other kind of event, Windows intercepts the event and sends it to Visual Basic.


<BR>

<P>Visual Basic does not respond to some special system events, such as when the user presses Alt+Tab to switch to another application running in memory. That is why Windows must interpret all events and pass the ones handled by Visual Basic to 
Visual 
Basic. Figure 4.1 shows the relationship between events and event procedures. Notice that Windows always intercepts the events and passes the appropriate events to the Visual Basic program, where Visual Basic then does something in response to them 
if 
event procedures are available.

<BR>

<P><B> <A HREF="04vel01.gif">Figure 4.1. Windows intercepts events before it </B><B>passes them to Visual Basic.</A></B>

<BR>

<BLOCKQUOTE>

<BLOCKQUOTE>

<HR ALIGN=CENTER>

<BR>

<NOTE><I>Definition: </I>An 
<I>event procedure</I> responds to an event.</NOTE>

<BR>

<HR ALIGN=CENTER>

</BLOCKQUOTE></BLOCKQUOTE>

<P>When Visual Basic gets an event from Windows, it checks whether the programmer wrote an <I>event procedure</I> for the event. If an event procedure 
exists, Visual Basic executes the event. In the CONTROLS.MAK program that you ran in the previous unit, 
clicking the Next Control command button caused the next control in the program's repertoire of controls to appear. The only way that the program could 
respond to the Next Control command button was for an event procedure to be written for that particular 
event&#151;namely, the command button keypress.

<BR>

<P>A program can contain controls and still not respond to all events. In CONTROLS.MAK, for 
example, when you select the check boxes, nothing happens except that the boxes are selected or deselected. The check box controls handle the checking and 
unchecking of the boxes so that no event procedure is needed to do that. Once you select check 
boxes, though, the program does absolutely nothing with the selected check boxes because there is no event procedure inside CONTROLS.MAK that does any work when 
the user selects a check box. The check boxes exist in that program only to illustrate how 
they operate.

<BR>

<BLOCKQUOTE>

<BLOCKQUOTE>

<HR ALIGN=CENTER>

<BR>

<NOTE><B>Warning: </B>Most, but not all events, are user-triggered. Some internal Windows events can take place that trigger actions. Likewise, you can direct a program to respond to 
timed intervals, such as ticking a clock forward every second. The 
interval of time would be an event in that case.</NOTE>

<BR>

<HR ALIGN=CENTER>

</BLOCKQUOTE></BLOCKQUOTE>

<P>Is all this talk about events and event procedures getting technical? 
Actually, you will see that the implementation of event capturing and event procedures is extremely easy. The Visual Basic environment is set up to create event procedures for you 
when you request them. The bottom line is this: When you want your Windows 
program to respond to an event, make sure that you write an event procedure for it. If you want to ignore certain events, don't write event procedures for them.

<BR>

<BLOCKQUOTE>

<BLOCKQUOTE>

<HR ALIGN=CENTER>

<BR>

<NOTE><B>Tip: </B>Most of the 
events that you want to handle are obvious. For example, if you add a command button control to a form, you want to do something when the user clicks the command button. However, if the user tries to drag the command button 
with the mouse, you probably 
want to ignore that event because the user should rarely be allowed to move controls during the execution of the program.</NOTE>

<BR>

<HR ALIGN=CENTER>

</BLOCKQUOTE></BLOCKQUOTE>

<P><FONT COLOR="#FF8000"><B><I>Review: </I></B></FONT>Almost anything 
that can happen during the execution of a Windows program can be an event. Once you design a Windows program form and place controls on it, you must write code that responds to events. 
That code is made up of event procedures. In a way, each event 
procedure is like a miniature program that you write for each control whose event should cause an action to take place.

<BR>

<BR>

<A NAME="E68E34"></A>

<H3 ALIGN=CENTER>

<CENTER>

<FONT SIZE=5 COLOR="#FF0000"><B>Control 
Properties</B></FONT></CENTER></H3>

<BR>

<P><FONT COLOR="#FF8000"><B><I>Concept: </I></B></FONT>All controls are different and work differently. You use different controls for different things. Even among controls of the same type, however, differences 
exist. Those differences reside in the 
control properties.

<BR>

<BLOCKQUOTE>

<BLOCKQUOTE>

<HR ALIGN=CENTER>

<BR>

<NOTE><I>Definition: </I>A <I>property</I> determines how a control differs from other controls.</NOTE>

<BR>

<HR ALIGN=CENTER>


</BLOCKQUOTE></BLOCKQUOTE>

<P>Consider the three controls shown in Figure 4.2. All three controls are command buttons even though they all look different. The user can click any of them, but each has a different set of properties.

<BR>

<P><B> <A 
HREF="04vel02.gif">Figure 4.2. Three command buttons with different </B><B>properties.</A></B>

<BR>

<P>The top command button has the size seen most often in Windows programs. Visual Basic automatically assigns this size when you add command buttons to 
your applications unless you specify something different. The second command button is much wider than 
the top one, and no access keystroke is available. Its caption is not displayed in boldfaced letters, and the font is not standard. The third command 
button is very small, and its caption is italicized. Because small italics on command buttons are not 
always easy to read, be careful about using them with small controls.

<BR>

<BLOCKQUOTE>

<BLOCKQUOTE>

<HR ALIGN=CENTER>

<BR>

<NOTE><B>Tip: </B>Less 
is usually better.</NOTE>

<BR>

<HR ALIGN=CENTER>

</BLOCKQUOTE></BLOCKQUOTE>

<P>Adding too much of anything is usually worse than better. The application often requires that command buttons differ from their default size, but try to stay as consistent 
as possible. It is rarely a good idea to put more than one font on more than one 
command button that appears on the same form.

<BR>

<P>One of the most important steps you take when you write Visual Basic programs is setting control properties. When this 
book teaches you how to add a new control to an application, you will learn about virtually all of its properties. The next unit, for 
instance, shows you how to place command buttons. Before you learn about placement, though, you will read about the 
command button's 25 properties.

<BR>

<BLOCKQUOTE>

<BLOCKQUOTE>

<HR ALIGN=CENTER>

<BR>

<NOTE><B>Note: </B>Rarely will you have to change all the properties of a control when you place the control on the form. Nevertheless, if you see every property 
that is available when you learn a new control, you will know what you can&#151;and 
cannot&#151;do it.</NOTE>

<BR>

<HR ALIGN=CENTER>

</BLOCKQUOTE></BLOCKQUOTE>

<BLOCKQUOTE>

<BLOCKQUOTE>

<HR ALIGN=CENTER>

<BR>

<NOTE>Even Forms Have Properties: 
Visual Basic programmers use the generic term <I>object</I> for controls that they place on the form. Actually, even the form is an occurrence of an object. The word <I>object</I> means different things in different 
computer languages. Although faintly 
related, a Visual Basic object has little to do with the objects that you find in object-oriented programming languages such as C++.

<BR>Every object in a Visual Basic program has properties. Even the forms have properties. As you can see from Figure 4.2, 
you can add descriptive titles to forms. The title of a form is one of its property settings. The background color is another 
property that you can set. Although you should stick to forms with white backgrounds for the sake of consistency&#151;it is used 
for most Windows programs&#151;you, the programmer, can change it.</NOTE>

<BR>

<HR ALIGN=CENTER>

</BLOCKQUOTE></BLOCKQUOTE>

<BLOCKQUOTE>

<BLOCKQUOTE>

<HR ALIGN=CENTER>

<BR>

<NOTE><B>Tip: </B>Where do you add properties for controls?

<BR>In the 
Properties window. (Good name, huh?)</NOTE>

<BR>

<HR ALIGN=CENTER>

</BLOCKQUOTE></BLOCKQUOTE>

<P><FONT COLOR="#FF8000"><B><I>Review: </I></B></FONT>Each control has a different set of property values. You often set initial property values when you 
place controls on the form. During the execution of the program, your code also often changes property 
values. The CONTROLS.MAK application, for example, changes a command button's caption property from Press Me to Once Again and back to Press Me. I added 
the original Press Me caption when I added the command button to the form. Then I used code to change 
the caption during the program's execution. What enables Visual Basic to know when to change the caption? When the user presses the command button, a 
command button click event occurs. Then the event procedure written for that particular event changes the 
caption. Read on, true Visual Basic believer, and you will see that event procedures are neither as difficult, nor as complicated, as they might 
first sound.

<BR>

<BR>

<A NAME="E68E35"></A>

<H3 ALIGN=CENTER>

<CENTER>

<FONT SIZE=5 COLOR="#FF0000"><B>Naming Conventions</B></FONT></CENTER></H3>

<BR>

<P><FONT COLOR="#FF8000"><B><I>Concept: </I></B></FONT>Although you will learn all about 
control properties throughout this book, one control property is worth learning about early on&#151;the Name property. All controls have a Name property. The Name 
property labels each particular control. Without a unique name, you could not distinguish 
one control from another inside the Visual Basic code. Although Visual Basic assigns default names to all controls, get in the habit of changing those names to 
something more descriptive so that you can remember them more easily as you add to the program.


<BR>

<BLOCKQUOTE>

<BLOCKQUOTE>

<HR ALIGN=CENTER>

<BR>

<NOTE><I>Definition: </I>A <I>naming convention</I> is a set of naming rules.</NOTE>

<BR>

<HR ALIGN=CENTER>

</BLOCKQUOTE></BLOCKQUOTE>

<P>The first property that you should always set is the 
Name property. This unit does not tell you <I>how</I> to set the Name property; that is covered in the next lesson. You must know in advance, however, that Visual Basic programmers do not arbitrarily 
assign names to controls. Programmers who want to make 
their programming lives less stressful follow prescribed naming conventions when they choose names for their controls.

<BR>

<P>A convention is not just a group of people gathered for the weekend. A convention is a standard set of rules that you follow. 
You are already familiar with naming conventions&#151;for example, the file-naming conventions used in Windows and DOS-based 
computers (up to eight characters for the name and up to three characters for the extension). In Visual Basic, the naming 
convention for controls is simple. When you decide on a name for your control, be sure to stay within these boundaries:

<BR>

<UL>

<LI> [lb] Names can be as short as one character or as long as 40 characters.

<BR>

<BR>

<LI> [lb] Names must begin with 
a letter of the alphabet and can be in either uppercase or lowercase letters.

<BR>

<BR>

<LI> [lb] After the initial letter, names can contain letters, numbers, or underscores in names.

<BR>

<BR>

</UL>

<BLOCKQUOTE>

<BLOCKQUOTE>

<HR ALIGN=CENTER>


<BR>

<NOTE><I>Definition: </I>A <I>reserved word</I> is a Visual Basic command.</NOTE>

<BR>

<HR ALIGN=CENTER>

</BLOCKQUOTE></BLOCKQUOTE>

<OL>

<LI> [lb] Names cannot be the same as a reserved word. <A HREF="velxb.htm">Appendix B</A> lists all the 
reserved words in Visual Basic.

<BR>

<BR>

</OL>

<UL>

<LI> [lb] Names should make sense. For instance, although you could name an exiting command button Rose, cmdExit is better; it is self-documenting and easier to remember.

<BR>

<BR>

</UL>

<P>The 
following are valid names:

<BR>

<UL>

<UL>

<P>cmdExit

</UL></UL>

<UL>

<UL>

<P>ListBoxJan

</UL></UL>

<UL>

<UL>

<P>Nov95Combo

</UL></UL>

<UL>

<UL>

<P>TitleScreen

<BR>

</UL></UL>

<P>and these are not:

<BR>

<UL>

<UL>

<P>Select

</UL></UL>


<UL>

<UL>

<P>723

</UL></UL>

<UL>

<UL>

<P>cmdExit&amp;Leave

<BR>

</UL></UL>

<P>Select is a Visual Basic command. 723 does not begin with a letter of the alphabet. cmdExit&amp;Leave contains an invalid character, the ampersand (&amp;).

<BR>


<BLOCKQUOTE>

<BLOCKQUOTE>

<HR ALIGN=CENTER>

<BR>

<NOTE><B>Warning: </B>Even though the underscore is a valid character, many programmers prefer not to use the underscore because it sometimes can look like a minus sign.

<BR>Many programmers use <I>hump 
</I>notation&#151;mixing uppercase and lowercase letters in names that contain several words. The term <I>hump</I> comes from a camel's back, which the uppercase letters in the name sort of resemble. For example, 
cmd_Add_Sales is a valid name, but 
cmdAddSales is just as readable and it does not contain the underscore characters that sometimes lead to confusion.</NOTE>

<BR>

<HR ALIGN=CENTER>

</BLOCKQUOTE></BLOCKQUOTE>

<P>Learn these naming conventions well. The naming conventions apply not only 
to Name properties but also to other aspects of Visual Basic, such as <I>variables</I> and <I>procedures</I>.

<BR>

<BLOCKQUOTE>

<BLOCKQUOTE>

<HR ALIGN=CENTER>

<BR>

<NOTE>Write Once, Maintain Often: Rarely are you finished with a program after you 
write it. You usually have to update the program to reflect changes in the environment in which you use it. When you update a program already written, you are doing what is 
called <I>program maintenance</I>.

<BR>For example, if you wrote an accounting 
program for a small company that merged with a second firm, the accounting department might have to keep both companies separate until the current fiscal year ends. You must modify the program so that the program 
distinguishes between the two companies 
and keeps two sets of data. The more time you spend giving meaningful names to controls, the less time you will spend later trying to figure out what each control is for. It is obvious that a control named 
cmdComputeProfit triggers the computation of a 
profit calculation.</NOTE>

<BR>

<HR ALIGN=CENTER>

</BLOCKQUOTE></BLOCKQUOTE>

<P>I strongly suggest that you adopt is the standards for naming control prefixes listed in Table 4.1. Table 4.1 shows the three-letter prefix that you should add to the front 
of a name when you name a control. The prefix describes what the control is. 
Therefore, from the name itself, you know what kind of control you are working with. Of course, if you placed the control on the form and named the control to begin with, you 
would know what kind of control you are adding. When you add code to event 
procedures later, however, the three-letter prefix helps you keep the kinds of controls straight and it prevents you from trying to write an incorrect event procedure for a control 
that does not produce that particular event.

<BR>

<BLOCKQUOTE>

<BLOCKQUOTE>

<HR ALIGN=CENTER>

<BR>

<NOTE><B>Note: </B>Table 4.1 lists all the naming conventions for controls and forms, including those controls that you do not know yet.</NOTE>

<BR>


<HR ALIGN=CENTER>

</BLOCKQUOTE></BLOCKQUOTE>

<BR>

<P ALIGN=CENTER>

<CENTER>

<FONT COLOR="#000080"><B>Table 4.1. Standards for naming control prefixes.</B></FONT></CENTER>

<BR>



<TABLE  BORDERCOLOR=#000040 BORDER=1 CELLSPACING=2 WIDTH="100%" 
CELLPADDING=2 >

<TR>

<TD VALIGN=top  BGCOLOR=#80FFFF ><FONT COLOR=#000080>

<I>Prefix</I>

</FONT>

<TD VALIGN=top  BGCOLOR=#80FFFF ><FONT COLOR=#000080>

<I>Control</I></FONT>

<TR>

<TD VALIGN=top  BGCOLOR=#80FFFF ><FONT COLOR=#000080>

cbo

</FONT>


<TD VALIGN=top  BGCOLOR=#80FFFF ><FONT COLOR=#000080>

Combo box</FONT>

<TR>

<TD VALIGN=top  BGCOLOR=#80FFFF ><FONT COLOR=#000080>

chk

</FONT>

<TD VALIGN=top  BGCOLOR=#80FFFF ><FONT COLOR=#000080>

Check box</FONT>

<TR>

<TD VALIGN=top  
BGCOLOR=#80FFFF ><FONT COLOR=#000080>

cmd

</FONT>

<TD VALIGN=top  BGCOLOR=#80FFFF ><FONT COLOR=#000080>

Command button</FONT>

<TR>

<TD VALIGN=top  BGCOLOR=#80FFFF ><FONT COLOR=#000080>

dir

</FONT>

<TD VALIGN=top  BGCOLOR=#80FFFF ><FONT 
COLOR=#000080>

Directory list box</FONT>

<TR>

<TD VALIGN=top  BGCOLOR=#80FFFF ><FONT COLOR=#000080>

drv

</FONT>

<TD VALIGN=top  BGCOLOR=#80FFFF ><FONT COLOR=#000080>

Drive list box</FONT>

<TR>

<TD VALIGN=top  BGCOLOR=#80FFFF ><FONT COLOR=#000080>


fil

</FONT>

<TD VALIGN=top  BGCOLOR=#80FFFF ><FONT COLOR=#000080>

File list box</FONT>

<TR>

<TD VALIGN=top  BGCOLOR=#80FFFF ><FONT COLOR=#000080>

fra

</FONT>

<TD VALIGN=top  BGCOLOR=#80FFFF ><FONT COLOR=#000080>

Frame</FONT>

<TR>

<TD VALIGN=top  
BGCOLOR=#80FFFF ><FONT COLOR=#000080>

frm

</FONT>

<TD VALIGN=top  BGCOLOR=#80FFFF ><FONT COLOR=#000080>

Form</FONT>

<TR>

<TD VALIGN=top  BGCOLOR=#80FFFF ><FONT COLOR=#000080>

grd

</FONT>

<TD VALIGN=top  BGCOLOR=#80FFFF ><FONT COLOR=#000080>


Grid</FONT>

<TR>

<TD VALIGN=top  BGCOLOR=#80FFFF ><FONT COLOR=#000080>

hsb

</FONT>

<TD VALIGN=top  BGCOLOR=#80FFFF ><FONT COLOR=#000080>

Horizontal scroll bar</FONT>

<TR>

<TD VALIGN=top  BGCOLOR=#80FFFF ><FONT COLOR=#000080>

img

</FONT>

<TD 
VALIGN=top  BGCOLOR=#80FFFF ><FONT COLOR=#000080>

Image</FONT>

<TR>

<TD VALIGN=top  BGCOLOR=#80FFFF ><FONT COLOR=#000080>

lbl

</FONT>

<TD VALIGN=top  BGCOLOR=#80FFFF ><FONT COLOR=#000080>

Label</FONT>

<TR>

<TD VALIGN=top  BGCOLOR=#80FFFF ><FONT 
COLOR=#000080>

lin

</FONT>

<TD VALIGN=top  BGCOLOR=#80FFFF ><FONT COLOR=#000080>

Line</FONT>

<TR>

<TD VALIGN=top  BGCOLOR=#80FFFF ><FONT COLOR=#000080>

lst

</FONT>

<TD VALIGN=top  BGCOLOR=#80FFFF ><FONT COLOR=#000080>

List box</FONT>

<TR>

<TD 
VALIGN=top  BGCOLOR=#80FFFF ><FONT COLOR=#000080>

mnu

</FONT>

<TD VALIGN=top  BGCOLOR=#80FFFF ><FONT COLOR=#000080>

Menu</FONT>

<TR>

<TD VALIGN=top  BGCOLOR=#80FFFF ><FONT COLOR=#000080>

ole

</FONT>

<TD VALIGN=top  BGCOLOR=#80FFFF ><FONT 
COLOR=#000080>

OLE client</FONT>

<TR>

<TD VALIGN=top  BGCOLOR=#80FFFF ><FONT COLOR=#000080>

opt

</FONT>

<TD VALIGN=top  BGCOLOR=#80FFFF ><FONT COLOR=#000080>

Option button</FONT>

<TR>

<TD VALIGN=top  BGCOLOR=#80FFFF ><FONT COLOR=#000080>

pic


</FONT>

<TD VALIGN=top  BGCOLOR=#80FFFF ><FONT COLOR=#000080>

Picture box</FONT>

<TR>

<TD VALIGN=top  BGCOLOR=#80FFFF ><FONT COLOR=#000080>

shp

</FONT>

<TD VALIGN=top  BGCOLOR=#80FFFF ><FONT COLOR=#000080>

Shape</FONT>

<TR>

<TD VALIGN=top  
BGCOLOR=#80FFFF ><FONT COLOR=#000080>

tmr

</FONT>

<TD VALIGN=top  BGCOLOR=#80FFFF ><FONT COLOR=#000080>

Timer</FONT>

<TR>

<TD VALIGN=top  BGCOLOR=#80FFFF ><FONT COLOR=#000080>

txt

</FONT>

<TD VALIGN=top  BGCOLOR=#80FFFF ><FONT COLOR=#000080>

Text 
box</FONT>

<TR>

<TD VALIGN=top  BGCOLOR=#80FFFF ><FONT COLOR=#000080>

vsb

</FONT>

<TD VALIGN=top  BGCOLOR=#80FFFF ><FONT COLOR=#000080>

Vertical scroll bar</FONT>

</TABLE><P>Here are some control names that use the three-letter prefixes from Table 
4.1:

<BR>

<UL>

<UL>

<P>frmOpening

</UL></UL>

<UL>

<UL>

<P>lstSelections

</UL></UL>

<UL>

<UL>

<P>chkBooksInPrint

<BR>

</UL></UL>

<P>There is a wider blanket of conventions that cover the look and behavior of all Windows programs. The book 
<I>The Windows Interface: An Application </I><I>Design Guide, </I>by Microsoft,<I> </I>discusses all the standards. It suggests how you can design 
your Windows programs so that they behave like other Windows programs.

<BR>

<P>When users move from DOS to 
Windows, they often complain that Windows is different and hard to learn and use. They are correct that Windows is different, but there is there is much disagreement on how difficult and hard-to-use Windows is.

<BR>

<P>Even if you accept that Windows is 
hard to learn and use, you have to learn the Windows interface only once. That means that after you master a Windows program, such as the Visual Basic programming environment or Microsoft Excel, every other Windows 
program behaves in almost exactly the 
same manner. Almost every Windows program contains an Exit command on a File pull-down menu. Almost every Windows program displays the same File Open dialog box. Almost every Windows program displays a white 
background. Software developers do not have to 
follow these standards, but users are more likely to learn the programs if they do. The application design guide helps them stay consistent with the standards.

<BR>

<P><FONT COLOR="#FF8000"><B><I>Review: </I></B></FONT>When you name controls, don't 
assign arbitrary names or even stick to the name that Visual Basic assigns&#151;you won't like Visual Basic's suggestions. Select a name that indicates the purpose of the 
control, and use one of the three-letter prefixes described in Table 4.1. By 
following such standards, you will ensure that your program is easier to maintain down the road.

<BR>

<BR>

<A NAME="E68E36"></A>

<H3 ALIGN=CENTER>

<CENTER>

<FONT SIZE=5 COLOR="#FF0000"><B>More Consistency: AUTOLOAD.MAK and 
CONSTANT.TXT</B></FONT></CENTER></H3>

<BR>

<P><FONT COLOR="#FF8000"><B><I>Concept: </I></B></FONT>With the AUTOLOAD.MAK and CONSTANT.TXT files, you can add even more consistency to your Visual Basic programs.

<BR>

<P>Over time, you incorporate many 
common elements in your Visual Basic programs. Perhaps you have written a set of routines in the Visual Basic language that you want to make available to several Visual Basic programs. As you already know, by adding files 
to the project window, you, in 
effect, add those files to the resulting application.

<BR>

<P>AUTOLOAD.MAK is a special project file that you can load and look at. If you load the file, you won&#146;t see anything that looks very special. The Form window is empty, and the Project 
window contains the same two files, GRID.VBX and OLECLIEN.VBX, 
that you saw earlier when you started Visual Basic and loaded and ran an application.

<BR>

<P>The purpose of AUTOLOAD.MAK is to create a base application that you add new features to and 
build on to create another application. In other words, whenever you start creating a new application using the File New Project command, Visual Basic looks at 
the contents of AUTOLOAD.MAK and creates a new base application that looks just like 
AUTOLOAD.MAK. Therefore, if you want to change the default behavior of your new applications, load and change AUTOLOAD.MAK. After you change AUTOLOAD.MAK, all future 
projects that you create will hold those changes.

<BR>

<BLOCKQUOTE>

<BLOCKQUOTE>

<HR 
ALIGN=CENTER>

<BR>

<NOTE><B>Tip: </B>Think of AUTOLOAD.MAK as working as how the DOS AUTOEXEC.BAT file works. Whenever you start your computer, DOS looks at the AUTOEXEC.BAT file and starts the computer according to those instructions. Every time you 
start a new application, 
Visual Basic looks at AUTOLOAD.MAK and creates a new application with the same features as AUTOLOAD.MAK.</NOTE>

<BR>

<HR ALIGN=CENTER>

</BLOCKQUOTE></BLOCKQUOTE>

<P>Now take a look at how changing AUTOLOAD.MAK changes all your 
new projects. Load AUTOLOAD.MAK if it is not loaded, and look at the Project window. Because you won&#146;t need the GRID.VBX or OLECLIEN.VBX files for a while, there is no reason to load 
them along with all the others every time you create a new 
application. Once you load AUTOLOAD.MAK, follow these steps to remove the files:

<BR>

<OL>

<LI>Display the Project window if you cannot see the Project window.

<BR>

<BR>

<LI>Highlight the GRID.VBX file.

<BR>

<BR>

<LI>Select the File Remove File 
command. As soon as you do, Visual Basic removes GRID.VBX from the Project window. The last file in the project, OLECLIEN.VBX, is still highlighted.

<BR>

<BR>

<LI>Select File Remove File again. Visual Basic removes OLECLIENsx.VBX from the project 
window.

<BR>

<BR>

</OL>

<BLOCKQUOTE>

<BLOCKQUOTE>

<HR ALIGN=CENTER>

<BR>

<NOTE><B>Note: </B>By the way, your toolbox now contains two fewer controls because the two .VBX files that you just removed contained special controlling tools called 
<I>custom </I><I>controls</I>.</NOTE>

<BR>

<HR ALIGN=CENTER>

</BLOCKQUOTE></BLOCKQUOTE>

<P>If you now saved AUTOLOAD.MAK to the disk, all future projects that you create would look just like the AUTOLOAD.MAK that you now see. Before you save 
AUTOLOAD.MAK, however, read a little further to learn about another file that you should add to the 
Project window.

<BR>

<BLOCKQUOTE>

<BLOCKQUOTE>

<HR ALIGN=CENTER>

<BR>

<NOTE><B>Tip: </B>Add the CONSTANT.TXT file to lighten the rest of your 
programming burden.</NOTE>

<BR>

<HR ALIGN=CENTER>

</BLOCKQUOTE></BLOCKQUOTE>

<BLOCKQUOTE>

<BLOCKQUOTE>

<HR ALIGN=CENTER>

<BR>

<NOTE><I>Definition: </I>A <I>named constant</I> is a constant value with a name that is easy to remember.</NOTE>

<BR>


<HR ALIGN=CENTER>

</BLOCKQUOTE></BLOCKQUOTE>

<P>There will be several times when you have to set various controls to specific values from a list of possibilities. For example, a label control can have a boxed border around it if you set the value of a 
certain property to 1&#151;a <I>fixed single-line 
border</I>&#151;and no border if you set it to 0. Instead of setting properties with those hard-coded values, you can use descriptive named constants such as NONE and FIXED_SINGLE.

<BR>

<P>The designers 
of Visual Basic took every possible control property value and assigned names to them so that you can use either the names, which are usually easier to remember than actual numbers, or the values themselves. Once you get used to using 
named constants, you 
will rarely use the actual values.

<BR>

<BLOCKQUOTE>

<BLOCKQUOTE>

<HR ALIGN=CENTER>

<BR>

<NOTE><B>Warning: </B>Don't fret. The use of named constants will make a lot more sense when you begin building your own applications.</NOTE>

<BR>

<HR 
ALIGN=CENTER>

</BLOCKQUOTE></BLOCKQUOTE>

<P>All the named constants are stored in a file named CONSTANT.TXT. You can add CONSTANT.TXT to your AUTOLOAD.MAK's Project file so that all the applications you eventually create automatically contain that file 
as well. Follow these steps to add 
CONSTANT.TXT to the Project window of AUTOLOAD.MAK:

<BR>

<OL>

<LI>Select File Add File from the menu bar. Visual Basic displays a File Open dialog box.

<BR>Visual Basic assumes that you want to add either a form 
(.FRM) file, a Visual Basic language (.BAS) file, or a custom control description (.VBK) file. Therefore, Visual Basic displays only those kinds of files. Instead of adding one of those files, you 
want to add a text file, which typically has a .TXT 
filename extension, as in CONSTANT.TXT. Therefore, you must override the suggested filenames in the File Name prompt.

<BR>

<BR>

<LI>Type CONSTANT.TXT for the filename, and press Enter or click the OK command button. Immediately, Visual Basic adds 
CONSTANT.TXT to the project window, as shown in Figure 4.3.

<BR>

<BR>

<LI>Save the AUTOLOAD.MAK file so that the changes you have made using File Save Project are reflected in all future projects that you create.

<BR>

<BR>

</OL>

<P>

<a href="04vel03.gif"><B>Figure 4.3. The CONSTANT.TXT file is part of the Project window.</B></a>

<BR>

<P><FONT COLOR="#FF8000"><B><I>Review: </I></B></FONT>The AUTOLOAD.MAK file determines what all subsequent projects that you create will initially 
look like. If you remove the custom control files that you find in AUTOLOAD.MAK's Project window and add the 
CONSTANT.TXT file, all new projects that you create will initially contain CONSTANT.TXT.

<BR>

<BR>

<A NAME="E68E37"></A>

<H3 ALIGN=CENTER>


<CENTER>

<FONT SIZE=5 COLOR="#FF0000"><B>Quick to the Draw!</B></FONT></CENTER></H3>

<BR>

<P><FONT COLOR="#FF8000"><B><I>Concept: </I></B></FONT>Finally! You will now use Visual Basic to create your very own fully working Windows program. If you don't 
think that you know enough about Visual Basic to write programs, hang on because you will see 
how easy creating a program can be. Follow these steps to create your first Visual Basic application:

<BR>

<OL>

<LI>Select File New Project to open a new 
application with a Project window that looks like AUTOLOAD.MAK's that you just saved. Visual Basic opens a new project and a blank Form window on which you will place controls.

<BR>

<BR>

<LI>Double-click the label control. Remember that the label 
control is the uppercase <I>A</I> on the Toolbox window. A blank label control (with the <I>terrible</I> default Name property of Label1) appears in the center of the Form window.

<BR>

<BR>

<LI>Press F4 to bring the Properties window into view.

<BR>


<BR>

<LI>Scroll the Properties window to the Caption property. The Caption property, by default, contains the name of the label. Because the Caption property holds the label's text, you should change the text. If you highlighted the Caption property, type 
<B>My 
First!</B> and press Enter. As Figure 4.4 shows, the label immediately displays the new caption.

<BR>

<BR>



<P><B> <A HREF="04vel04.gif">Figure 4.4. After changing the label's </B><B>caption.</A></B>

<BR>

<LI>Click and hold the mouse cursor 
over the label that you just added, and drag the label towards the top of the Form window. Leave about an inch between the top edge of the label and the top edge of the window. Center the label under the title of the 
form. By default, the title is the 
name of the form, Form1. (You will change control names from their default names in the next unit.)

<BR>

<BR>

<LI>Double-click the command button control on the Toolbox window. A command button appears in the center of the Form window.

<BR>

<BR>


<LI>Type the following exactly as you see it: <B>E&amp;xit</B>. The ampersand (&amp;) causes the x to be underlined, as you can see when you look at the resulting command button's caption. The Caption property is the first property that changes because the 

<I>last</I> property that you changed when you worked with the label control was its Caption property.

<BR>

<BR>

<LI>Center the command button by dragging the command button a little to the left. Once you center the command button, double-click it. 
Immediately, Visual Basic opens a Code window as shown in Figure 4.5.

<BR>

<BR>



<P><B> <A HREF="04vel05.gif">Figure 4.5. The Code window opens when you </B><B>double-click a control.</A></B>

<BR>

<LI>Visual Basic knows that you want to write an 
event procedure that executes whenever the user clicks the command button. You can tell that Visual Basic opened an event procedure for a command button keypress because the name of the procedure is 
Command1_Click (). (Don't worry about the parentheses 
right now.) An event procedure always takes the following format:

<BR>ControlName_EventName ()

<BR>The default name for a new command button (until you change the Name property) is Command1, and the event that triggers when the user clicks a command 
button is Click. Therefore, the code that handles this command button's click is Command1_Click ().

<BR>

<BR>

<LI>The two lines that Visual Basic adds to the event procedure are called <I>wrapper lines</I> or <I>wrapper code</I> because they wrap around 
the code you add to the event procedure. For this event, simply press Tab and add <B>End</B>. The full event 
procedure should look like this:

<BR>Sub Command1_Click ()

<BR> End

<BR>End Sub

<BR>

<BR>

<LI>That's it. To see your handiwork, close the 
Code window and press F5 to run the application you just created. The application's form appears on the screen with its two controls, as shown in Figure 4.6.

<BR>To terminate your application and return to Visual Basic, click the Exit command button. As 
soon as you click the command button, the event procedure that you added executes. The End statement that you added to the event procedure also executes. The 
sole purpose of End is to terminate the application.

<BR>

<BR>

</OL>

<P>

<a href="04vel06.gif"><B>Figure 4.6. Your first application works like a charm!</B></a>

<BR>

<BLOCKQUOTE>

<BLOCKQUOTE>

<HR ALIGN=CENTER>

<BR>

<NOTE>Other command button events: Other events are possible with command buttons. Open the Code window and 
look at the other event names. Click the down arrow at the right of the Code window's Proc: dropdown list. Scroll through the list. You will see 
that there is a DragDrop event for when the user drags the command button with the mouse and a KeyDown button 
for when the user presses the command button's shortcut access key, among others.

<BR>Other kinds of controls, such as the list box or label control, might have events that are identical to those of the command button control, but the other controls also 
have different events. The Code window's Object: dropdown list always contains a 
list of the application's current objects&#151;such as the form and any controls you have added&#151;and the Proc: dropdown combo list contains a list of events for each of 
the controls that you highlight in the Object: list.</NOTE>

<BR>

<HR ALIGN=CENTER>

</BLOCKQUOTE></BLOCKQUOTE>

<P>If you want, you can save this application. However, the disk that comes with this book contains the full application; it is called 
MYFIRST.MAK. Therefore, if you save your work, save it under a different filename.

<BR>

<P>When you save your applications, Visual Basic wants you to name both the form and the entire project. Usually, especially for the one-form applications that you 
will write in this book, you name the form the same name as the project, but both have 
different filename extensions. Suppose that you want to save the project under the name FIRST. To save the project, follow these steps:

<BR>

<OL>

<LI>Select File 
Save Project. Visual Basic opens the Save As dialog box for the form. Type <B>FIRST</B> and press Enter. Visual Basic adds the .FRM extension.

<BR>

<BR>

<LI>Visual Basic now displays the Save Project As dialog box. Type <B>FIRST</B> and press Enter to 
save the project. Visual Basic adds the .MAK extension.

<BR>

<BR>

<LI>You can now exit Visual Basic and take a deserved rest.

<BR>

<BR>

</OL>

<P><FONT COLOR="#FF8000"><B><I>Review: </I></B></FONT>With a few keystrokes and mouse clicks, you can 
create a fully working Visual Basic application. If you rerun the MYFIRST.MAK application, you will see that you can maximize, minimize, and resize the 
application's window. Visual Basic automatically adds a control button in the upper-left hand corner of 
the window with which you can control the application from the Windows system level.

<BR>

<BR>

<A NAME="E68E38"></A>

<H3 ALIGN=CENTER>

<CENTER>

<FONT SIZE=5 COLOR="#FF0000"><B>Homework</B></FONT></CENTER></H3>

<BR>

<BR>

<A NAME="E69E32"></A>

<H4 
ALIGN=CENTER>

<CENTER>

<FONT SIZE=4 COLOR="#FF0000"><B>General Knowledge</B></FONT></CENTER></H4>

<BR>

<OL>

<LI>What is an event?

<BR>

<BR>

<LI>Why are GUI-based programming environments such as Windows event-driven?

<BR>

<BR>

<LI>True or false: 
Windows passes all events that happen in your program to Visual Basic.

<BR>

<BR>

<LI>What are properties?

<BR>

<BR>

<LI>What must you write to handle events?

<BR>

<BR>

<LI>Name two properties for any control that you can think of after reading 
this unit.

<BR>

<BR>

<LI>True or false: Forms have properties.

<BR>

<BR>

<LI>True or false: Forms are objects.

<BR>

<BR>

<LI>Which window do you use for changing property values?

<BR>

<BR>

<LI>What is program maintenance?

<BR>

<BR>

<LI>What 
advantage does using a three-letter prefix offer?

<BR>

<BR>

<LI>Why should you write Windows programs that look and work in a manner that is consistent with other Windows programs?

<BR>

<BR>

<LI>What is the name of the file that describes all new 
projects?

<BR>

<BR>

<LI>What is the name of the file that holds named constants?

<BR>

<BR>

<LI>What are named constants?

<BR>

<BR>

<LI>True or false: Visual Basic assigns well-named control names by default.

<BR>

<BR>

<LI>How can you open a 
Code window for a control's primary event property?

<BR>

<BR>

<LI>How are event procedures named?

<BR>

<BR>

<LI>What are the first and last statements in an event procedure called?

<BR>

<BR>

<LI>What Visual Basic command terminates a running 
program?

<BR>

<BR>

<LI>What does the Code window's Object: dropdown combo list contain?

<BR>

<BR>

<LI>How does the filename of the form differ from the name of the project?

<BR>

<BR>

<LI>What object does frmStartUp describe?

<BR>

<BR>

<LI>What 
object does cboNameChoice96 describe?

<BR>

<BR>

<LI>What object does cmdPrintIt describe?

<BR>

<BR>

</OL>

<BR>

<A NAME="E69E33"></A>

<H4 ALIGN=CENTER>

<CENTER>

<FONT SIZE=4 COLOR="#FF0000"><B>Find the Bug</B></FONT></CENTER></H4>

<BR>

<OL>


<LI>Victor the Visual Basic programmer just got a new CD-ROM with tons of great fonts. Victor decides to use a different font for every word on his form. Can you help show Victor the light?

<BR>

<BR>

<LI>Describe what is wrong with each of these Name 
properties:

<BR>

<BR>

<OL TYPE=A>

<LI>End

<BR>

<BR>

<LI>96JanSalesList

<BR>

<BR>

<LI>cmdStar$

<BR>

<BR>

<LI>July-List

<BR>

<BR>

</OL>

</OL>

<BR>

<A NAME="E69E34"></A>

<H4 ALIGN=CENTER>

<CENTER>

<FONT SIZE=4 COLOR="#FF0000"><B>Extra 
Credit</B></FONT></CENTER></H4>

<BR>

<P>Create a new project that contains two control buttons. Add a Beep statement to the wrapper of the first button&#146;s Click event procedure, and change the Caption property to Ring a Bell. (Beep is a command that 
rings the PC's bell.) Change the second 
command button's Caption property to Exit, and type End for the Click event procedure. Run the program and test your results.

<BR>

<P ALIGN=LEFT>

<A HREF="vel03.htm" TARGET="_self"><IMG SRC="purprev.gif" WIDTH = 
32 HEIGHT = 32 BORDER = 0 ALT="Previous Page"></A>

<A HREF="#I0" TARGET="_self"><IMG SRC="purtop.gif" WIDTH = 32 HEIGHT = 32 BORDER = 0 ALT="Page Top"></A>

<A HREF="index.htm" TARGET="_self"><IMG SRC="purtoc.gif" WIDTH = 32 HEIGHT = 32 BORDER = 0 
ALT="TOC"></A>

<A HREF="velp02.htm" TARGET="_self"><IMG SRC="purnext.gif" WIDTH = 32 HEIGHT = 32 BORDER = 0 ALT="Next Page"></A>



</BODY></HTML>







