<HTML>

<HEAD>

<TITLE>Visual Basic in 12 Easy Lessons vel21.htm </TITLE>

<LINK REL="ToC" HREF="index.htm">

<LINK REL="Index" HREF="htindex.htm">

<LINK REL="Next" HREF="vel22.htm">

<LINK REL="Previous" HREF="velp10.htm"></HEAD>

<BODY BGCOLOR="#FFFFFF" 
TEXT="#000000" LINK="#0000FF" VLINK="#800080">

<A NAME="I0"></A>

<H2>Visual Basic in 12 Easy Lessons vel21.htm</H2>

<P ALIGN=LEFT>

<A HREF="velp10.htm" TARGET="_self"><IMG SRC="purprev.gif" WIDTH = 32 HEIGHT = 32 BORDER = 0 ALT="Previous Page"></A>

<A 
HREF="index.htm" TARGET="_self"><IMG SRC="purtoc.gif" WIDTH = 32 HEIGHT = 32 BORDER = 0 ALT="TOC"></A>

<A HREF="vel22.htm" TARGET="_self"><IMG SRC="purnext.gif" WIDTH = 32 HEIGHT = 32 BORDER = 0 ALT="Next Page"></A>


<HR ALIGN=CENTER>

<P>

<UL>

<UL>

<UL>

<LI>

<A HREF="#E68E156" >What You'll Learn</A>

<LI>

<A HREF="#E68E157" >A Word of Warning</A>

<LI>

<A 
HREF="#E68E158" >Printing With Windows</A>

<LI>

<A HREF="#E68E159" >Tell the User You Will Print</A>

<LI>

<A HREF="#E68E160" >Introducing the Printer Object</A>

<LI>

<A HREF="#E68E161" >The Print Method</A>

<UL>

<LI>

<A HREF="#E69E144" >Printing 
Constants</A>

<LI>

<A HREF="#E69E145" >Printing Variables and Controls</A>

<LI>

<A HREF="#E69E146" >Printing Expressions</A>

<LI>

<A HREF="#E69E147" >Printing Multiple Values</A>

<LI>

<A HREF="#E69E148" >Utilize the Fonts</A>

<LI>

<A 
HREF="#E69E149" >Better Spacing with Spc() and Tab()</A></UL>

<LI>

<A HREF="#E68E162" >Initiating the Print</A>

<LI>

<A HREF="#E68E163" >Page Breaks</A>

<LI>

<A HREF="#E68E164" >Homework</A>

<UL>

<LI>

<A HREF="#E69E150" >General Knowledge</A>


<LI>

<A HREF="#E69E151" >Find the Bug</A>

<LI>

<A HREF="#E69E152" >What's the Output?</A>

<LI>

<A HREF="#E69E153" >Write Code That...</A>

<LI>

<A HREF="#E69E154" >Extra Credit</A></UL></UL></UL></UL>

<HR ALIGN=CENTER>

<A NAME="E66E31"></A>

<H1 
ALIGN=CENTER>

<CENTER>

<FONT SIZE=6 COLOR="#FF0000"><B>Lesson 11, Unit 21</B></FONT></CENTER></H1>

<BR>

<A NAME="E67E34"></A>

<H2 ALIGN=CENTER>

<CENTER>

<FONT SIZE=6 COLOR="#FF0000"><B>Using the Printer</B></FONT></CENTER></H2>

<BR>

<BR>

<A 
NAME="E68E156"></A>

<H3 ALIGN=CENTER>

<CENTER>

<FONT SIZE=5 COLOR="#FF0000"><B>What You'll Learn</B></FONT></CENTER></H3>

<BR>

<UL>

<LI>A word of warning

<BR>

<BR>

<LI>Printing with Windows

<BR>

<BR>

<LI>Telling the user you will print

<BR>


<BR>

<LI>Introducing the Printer object

<BR>

<BR>

<LI>The Print method

<BR>

<BR>

<LI>Initiating the print

<BR>

<BR>

<LI>Page breaks

<BR>

<BR>

</UL>

<P>This lesson describes how you can integrate the printer into Visual Basic applications that 
you write. Visual Basic communicates with the Windows printer driver so that you can send text and even graphics to the printer.

<BR>

<P>Unlike most of Visual Basic's features, however, sending output to the printer can be a tedious process. 
Surprisingly, one of Visual Basic's weaknesses is also its strength: Printing requires that you send a fairly long list of instructions to your 
printer that describes exactly the way the output is to look. As easily as Visual Basic allows you to add and 
manage controls, one would have thought that the printing could be made easier. Nevertheless, despite the tedium sometimes associated with the 
printer, you'll see that you can control every aspect of printing, including the font of individual characters 
that your application sends to the printer. Therefore, the tedious control needed for the printer provides pinpoint accuracy that allows you to 
control all printing details.

<BR>

<BR>

<A NAME="E68E157"></A>

<H3 ALIGN=CENTER>

<CENTER>

<FONT SIZE=5 
COLOR="#FF0000"><B>A Word of Warning</B></FONT></CENTER></H3>

<BR>

<P><FONT COLOR="#FF8000"><B><I>Concept: </I></B></FONT>The Visual Basic Primer system that comes with this book doesn't support the use of the Print command on the File menu. You'll still 
be able to print reports from your applications, however.

<BR>

<P>If you attempt to select Print from the File menu, the Visual Basic Primer system displays the error message box shown in Figure 21.1. This book's version of Visual Basic doesn't support 
the print commands that you would normally find on Visual Basic's 
File menu.

<BR>

<P><B> <A HREF="21vel01.gif">Figure 21.1. The File Print command is unavailable.</A></B>

<BR>

<P>In case you upgrade to a different version of Visual Basic, you should 
know that the File menu's Print command usually allows you to produce printed copies of the code within an application. In addition, you would normally be able to print an 
application's forms graphically as well as produce printed descriptions of forms. 
Such output could provide documentation that you could file away and use as a starting point if you modify the application at a later date.

<BR>

<P><FONT COLOR="#FF8000"><B><I>Review: </I></B></FONT>If you attempt to select the Print command from the 
File menu, the Visual Basic Primer system produces a message box explaining that the feature is unavailable. Although you can't print form and code 
documentation, you will be able to produce text and graphic reports from the Visual Basic applications that 
you write by applying the properties and methods discussed in the rest of this unit.

<BR>

<BR>

<A NAME="E68E158"></A>

<H3 ALIGN=CENTER>

<CENTER>

<FONT SIZE=5 COLOR="#FF0000"><B>Printing With Windows</B></FONT></CENTER></H3>

<BR>

<P><FONT 
COLOR="#FF8000"><B><I>Concept: </I></B></FONT>When your application sends output to the printer, Windows intercepts those printer commands. Rather than send output directly to the printer attached to your computer, Visual Basic actually sends 
printed 
output to the Windows Print Manager.

<BR>

<BLOCKQUOTE>

<BLOCKQUOTE>

<HR ALIGN=CENTER>

<BR>

<NOTE><I>Definition: </I>The <I>Windows Print Manager</I> controls all printed output in Windows.</NOTE>

<BR>

<HR ALIGN=CENTER>

</BLOCKQUOTE></BLOCKQUOTE>


<P>The Windows Print Manager determines how all printed output from all Windows programs eventually appears. Therefore, when your Visual Basic application attempts to send printed output directly to the printer, the Windows Print Manager intercepts those 

commands, and might change the output before the printer ever sees the output.

<BR>

<P>The Windows Print Manager knows how to communicate with any printer supported by Windows. There are hundreds of different kinds of printers now recognized by Windows, 
and most of these printers require specialized commands. If every program that you 
bought had to provide support for every kind of printer that you or your users might own, programs would require even more disk space than they already do. In addition, 
programs would cost more because each software developer would have to spend the time 
writing the program to produce output on every kind of printer available.

<BR>

<P>Rather than require that every software developer support all printers, the Windows 
Print Manager requires that every software developer support only <I>one</I> kind of printed output: the kind required by the Windows Print Manager. If the applications 
that you write need to produce printed output, Visual Basic produces that output in a 
form required by the Windows Print Manager. Figure 21.2 shows that Visual Basic applications send output directly to the Windows Print Manager. The Windows Print Manager 
<I>then</I> converts that output into the individual commands needed by whatever 
printer is attached to the system.

<BR>

<P><B> <A HREF="21vel02.gif">Figure 21.2. The Windows Print Manager collects all program output and manages </B><B>individual printers.</A></B>

<BR>

<P>Suppose that you had both a laser printer and a dot matrix 
printer attached to your computer. Without the Windows Print Manager, you would need to provide two sets of printer commands for every Visual Basic application you write. With the Windows Print 
Manager, you'll need to provide only one generic set of 
printed output commands. Before running the application, you can use commands available in the Windows Print Manager to select one of your two printers. When you run the program, Windows will convert 
the Visual Basic output into commands needed by 
whatever printer is selected.

<BR>

<P><FONT COLOR="#FF8000"><B><I>Review: </I></B></FONT>The Windows Print Manager simplifies communication with all the various printers. Your Visual Basic application needs only to send output to the Windows Print 
Manager no matter what kind of printer that 
output will eventually be directed to. The Windows Print Manager knows how to communicate with all Windows-supported printers, and converts your Visual Basic application's output to the chosen printer's required 
format.

<BR>

<BR>

<A NAME="E68E159"></A>

<H3 ALIGN=CENTER>

<CENTER>

<FONT SIZE=5 COLOR="#FF0000"><B>Tell the User You Will Print</B></FONT></CENTER></H3>

<BR>

<P><FONT COLOR="#FF8000"><B><I>Concept: </I></B></FONT>Users could be caught unaware if 
your application begins printing without first warning the user that the printer must be ready.

<BR>

<BLOCKQUOTE>

<BLOCKQUOTE>

<HR ALIGN=CENTER>

<BR>

<NOTE><I>Definition: Online</I> means the printer is ready for printing.</NOTE>

<BR>

<HR 
ALIGN=CENTER>

</BLOCKQUOTE></BLOCKQUOTE>

<P>Always remind the user to turn on the printer, make sure that the printer has paper, and ensure that the printer is online. If the user's printer is not first turned on and ready with an ample paper supply, the 
user will receive a Windows Print Manager 
error message similar to the one shown in Figure 21.3.

<BR>

<P><B> <A HREF="21vel03.gif">Figure 21.3. The Windows Print Manager senses that something isn't right.</A></B>

<BR>

<P><FONT 
COLOR="#FF8000"><B><I>Stop and Type: </I></B></FONT>The function procedure in Listing 21.1 provides you with a useful MsgBox() call that you might want to incorporate into your own programs before printing.

<BR>

<P><FONT COLOR="#FF8000"><B><I>Review: 
</I></B></FONT>Warn the user that printing is about to take place to make sure that the user puts paper in the printer and turns the printer online.

<BR>

<P>

<FONT COLOR="#000080"><B>Listing 21.1. Warns the user before printing.</B></FONT>

<BR>

<PRE>


<FONT COLOR="#000080">1: Function PrReady()

2: ' Make sure the user is ready to print

3: Dim IsReady As Integer

4: IsReady = MsgBox(&quot;Make sure the printer is ready&quot;, 1, &quot;Printer Check&quot;)

5: If (IsReady = 2) Then

6: PrReady = 0 ' A 
Cancel press returns a False value

7: End If

8: PrReady = 1 ' User pressed OK so return True

9: End Function</FONT></PRE>

<P><FONT COLOR="#FF8000"><B><I>Output: </I></B></FONT>Figure 21.4 shows the message box presented by Listing 21.1.

<BR>

<P><B> 
<A HREF="21vel04.gif">Figure 21.4. The user now knows to prepare the printer for printing.</A></B>

<BR>

<P><FONT COLOR="#FF8000"><B><I>Analysis: </I></B></FONT>After the user reads the message and responds to the message box in line 4, the procedure's 
return value determines whether the user wants to see the output (assume that the user has properly prepared 
the printer for printing) or cancel the printing. The return value of zero (meaning false) or one (meaning true) can be checked as follows from 
another procedure that prints based on the user's response:

<BR>

<PRE>

<FONT COLOR="#000080">If PrReady() Then ' If function is true

 Call PrintRoutine

End If</FONT></PRE>

<BR>

<A NAME="E68E160"></A>

<H3 ALIGN=CENTER>

<CENTER>

<FONT SIZE=5 
COLOR="#FF0000"><B>Introducing the </B><FONT COLOR="#FF8000"><B><I>Printer</I></B></FONT><B> Object</B></FONT></CENTER></H3>

<BR>

<P><FONT COLOR="#FF8000"><B><I>Concept: </I></B></FONT>Visual Basic applications send all printed output to a special Visual 
Basic object called the Printer object. The Printer object supports several property values and methods with which you determine 
the look of the printed output.

<BR>

<P>The keyword Printer specifies the printer object to which your applications will 
direct all output. There is no Printer control on the Toolbox window. All access to Printer must take place using Visual Basic code.

<BR>

<BLOCKQUOTE>

<BLOCKQUOTE>

<HR ALIGN=CENTER>

<BR>

<NOTE><B>Note: </B>The commands that your application sends to 
the Printer object are generic Windows printer commands. The Windows Print Manager converts those generic commands to a specific printer's commands. You, therefore, worry about what you want 
printed and let the Windows Print Manager worry about <I>how</I> 
the output gets produced.</NOTE>

<BR>

<HR ALIGN=CENTER>

</BLOCKQUOTE></BLOCKQUOTE>

<P>Throughout this book, when you learned a new object, such as the command button control, you learned about the properties that relate to that object. Before using the 
Printer object, you should see the properties available for the Printer object so that 
you'll know what kinds of things you can do with printed output from within Visual Basic. All of the Printer object's properties are listed in Table 21.1.

<BR>


<BLOCKQUOTE>

<BLOCKQUOTE>

<HR ALIGN=CENTER>

<BR>

<NOTE><I>Definition: </I>A <I>pixel</I> is the smallest addressable point on the screen or printer.</NOTE>

<BR>

<HR ALIGN=CENTER>

</BLOCKQUOTE></BLOCKQUOTE>

<BR>

<P ALIGN=CENTER>

<CENTER>

<FONT 
COLOR="#000080"><B>Table 21.1. The </B><B>Printer</B><B> object's properties.</B></FONT></CENTER>

<BR>



<TABLE  BORDERCOLOR=#000040 BORDER=1 CELLSPACING=2 WIDTH="100%" CELLPADDING=2 >

<TR>

<TD VALIGN=top  BGCOLOR=#80FFFF ><FONT COLOR=#000080>


<I>Property</I>

</FONT>

<TD VALIGN=top  BGCOLOR=#80FFFF ><FONT COLOR=#000080>

<I>Description</I></FONT>

<TR>

<TD VALIGN=top  BGCOLOR=#80FFFF ><FONT COLOR=#000080>

CurrentX

</FONT>

<TD VALIGN=top  BGCOLOR=#80FFFF ><FONT COLOR=#000080>

Holds the 
horizontal print column, from the upper-left corner of the page, measured either in twips or the scale defined by the Scale properties.</FONT>

<TR>

<TD VALIGN=top  BGCOLOR=#80FFFF ><FONT COLOR=#000080>

CurrentY

</FONT>

<TD VALIGN=top  BGCOLOR=#80FFFF 
><FONT COLOR=#000080>

Holds the vertical print row, from the upper-left corner of the page, measured either in twips or the scale defined by Scale properties.</FONT>

<TR>

<TD VALIGN=top  BGCOLOR=#80FFFF ><FONT COLOR=#000080>

DrawMode

</FONT>

<TD 
VALIGN=top  BGCOLOR=#80FFFF ><FONT COLOR=#000080>

Determines the appearance of graphics that you draw on the printer.</FONT>

<TR>

<TD VALIGN=top  BGCOLOR=#80FFFF ><FONT COLOR=#000080>

DrawStyle

</FONT>

<TD VALIGN=top  BGCOLOR=#80FFFF ><FONT 
COLOR=#000080>

Specifies the style of any graphical lines that your application draws.</FONT>

<TR>

<TD VALIGN=top  BGCOLOR=#80FFFF ><FONT COLOR=#000080>

DrawWidth

</FONT>

<TD VALIGN=top  BGCOLOR=#80FFFF ><FONT COLOR=#000080>

Specifies the width of 
lines drawn, from 1 (the default) to 32767 pixels.</FONT>

<TR>

<TD VALIGN=top  BGCOLOR=#80FFFF ><FONT COLOR=#000080>

FillColor

</FONT>

<TD VALIGN=top  BGCOLOR=#80FFFF ><FONT COLOR=#000080>

Specifies the color of printed shapes. Determines the shading 
density for noncolor printed output.</FONT>

<TR>

<TD VALIGN=top  BGCOLOR=#80FFFF ><FONT COLOR=#000080>

FillStyle

</FONT>

<TD VALIGN=top  BGCOLOR=#80FFFF ><FONT COLOR=#000080>

Contains the style pattern of printed shapes.</FONT>

<TR>

<TD VALIGN=top  
BGCOLOR=#80FFFF ><FONT COLOR=#000080>

FontBold

</FONT>

<TD VALIGN=top  BGCOLOR=#80FFFF ><FONT COLOR=#000080>

Contains either True or False to determine whether subsequent printed output will be boldfaced.</FONT>

<TR>

<TD VALIGN=top  BGCOLOR=#80FFFF 
><FONT COLOR=#000080>

FontCount

</FONT>

<TD VALIGN=top  BGCOLOR=#80FFFF ><FONT COLOR=#000080>

Specifies the current printer's number of installed fonts.</FONT>

<TR>

<TD VALIGN=top  BGCOLOR=#80FFFF ><FONT COLOR=#000080>

FontItalic

</FONT>

<TD 
VALIGN=top  BGCOLOR=#80FFFF ><FONT COLOR=#000080>

Holds either True or False to determine whether subsequent output will be italicized.</FONT>

<TR>

<TD VALIGN=top  BGCOLOR=#80FFFF ><FONT COLOR=#000080>

FontName

</FONT>

<TD VALIGN=top  BGCOLOR=#80FFFF 
><FONT COLOR=#000080>

Holds the name of the current font being used for output.</FONT>

<TR>

<TD VALIGN=top  BGCOLOR=#80FFFF ><FONT COLOR=#000080>

Fonts

</FONT>

<TD VALIGN=top  BGCOLOR=#80FFFF ><FONT COLOR=#000080>

Contains a table of values that act 
as if they were stored in a control array. Fonts(0) to Fonts(FontCount - 1) holds the names of all installed fonts on the target computer.</FONT>

<TR>

<TD VALIGN=top  BGCOLOR=#80FFFF ><FONT COLOR=#000080>

FontSize

</FONT>

<TD VALIGN=top  
BGCOLOR=#80FFFF ><FONT COLOR=#000080>

Holds the size, in points, of the current font.</FONT>

<TR>

<TD VALIGN=top  BGCOLOR=#80FFFF ><FONT COLOR=#000080>

FontStrikeThru

</FONT>

<TD VALIGN=top  BGCOLOR=#80FFFF ><FONT COLOR=#000080>

Holds either True or 
False to determine whether subsequent output will be printed with a strikethru line.</FONT>

<TR>

<TD VALIGN=top  BGCOLOR=#80FFFF ><FONT COLOR=#000080>

FontTransparent

</FONT>

<TD VALIGN=top  BGCOLOR=#80FFFF ><FONT COLOR=#000080>

Holds either True or 
False to determine whether subsequent output will be transparent.</FONT>

<TR>

<TD VALIGN=top  BGCOLOR=#80FFFF ><FONT COLOR=#000080>

FontUnderline

</FONT>

<TD VALIGN=top  BGCOLOR=#80FFFF ><FONT COLOR=#000080>

Holds either True or False to determine 
whether subsequent output will be underlined.</FONT>

<TR>

<TD VALIGN=top  BGCOLOR=#80FFFF ><FONT COLOR=#000080>

ForeColor

</FONT>

<TD VALIGN=top  BGCOLOR=#80FFFF ><FONT COLOR=#000080>

Specifies the foreground color of printed text and graphics. (The 
paper determines the background color.)</FONT>

<TR>

<TD VALIGN=top  BGCOLOR=#80FFFF ><FONT COLOR=#000080>

hDC

</FONT>

<TD VALIGN=top  BGCOLOR=#80FFFF ><FONT COLOR=#000080>

A Windows device context handle for advanced Windows procedure calls.</FONT>


<TR>

<TD VALIGN=top  BGCOLOR=#80FFFF ><FONT COLOR=#000080>

Height

</FONT>

<TD VALIGN=top  BGCOLOR=#80FFFF ><FONT COLOR=#000080>

Holds the height, in twips, of the current printed page.</FONT>

<TR>

<TD VALIGN=top  BGCOLOR=#80FFFF ><FONT 
COLOR=#000080>

Page

</FONT>

<TD VALIGN=top  BGCOLOR=#80FFFF ><FONT COLOR=#000080>

Contains the page number currently being printed and updated automatically by Visual Basic.</FONT>

<TR>

<TD VALIGN=top  BGCOLOR=#80FFFF ><FONT COLOR=#000080>


ScaleHeight

</FONT>

<TD VALIGN=top  BGCOLOR=#80FFFF ><FONT COLOR=#000080>

Specifies how many ScaleMode units high that each graphic will be upon output.</FONT>

<TR>

<TD VALIGN=top  BGCOLOR=#80FFFF ><FONT COLOR=#000080>

ScaleLeft

</FONT>

<TD 
VALIGN=top  BGCOLOR=#80FFFF ><FONT COLOR=#000080>

Specifies how many ScaleMode units from the left of the page where subsequent printed output appears.</FONT>

<TR>

<TD VALIGN=top  BGCOLOR=#80FFFF ><FONT COLOR=#000080>

ScaleMode

</FONT>

<TD VALIGN=top  
BGCOLOR=#80FFFF ><FONT COLOR=#000080>

Sets the unit of measurement for all subsequent printed output that appears.</FONT>

<TR>

<TD VALIGN=top  BGCOLOR=#80FFFF ><FONT COLOR=#000080>

ScaleTop

</FONT>

<TD VALIGN=top  BGCOLOR=#80FFFF ><FONT 
COLOR=#000080>

Specifies how many ScaleMode units from the top of the page where all subsequent printed output appears.</FONT>

<TR>

<TD VALIGN=top  BGCOLOR=#80FFFF ><FONT COLOR=#000080>

ScaleWidth

</FONT>

<TD VALIGN=top  BGCOLOR=#80FFFF ><FONT 
COLOR=#000080>

Specifies how many ScaleMode units wide that each graphic will consist of upon printed output.</FONT>

<TR>

<TD VALIGN=top  BGCOLOR=#80FFFF ><FONT COLOR=#000080>

TwipsPerPixelX

</FONT>

<TD VALIGN=top  BGCOLOR=#80FFFF ><FONT 
COLOR=#000080>

Specifies the number of screen twips that each printer's dot (called a pixel) height consumes.</FONT>

<TR>

<TD VALIGN=top  BGCOLOR=#80FFFF ><FONT COLOR=#000080>

TwipsPerPixelY

</FONT>

<TD VALIGN=top  BGCOLOR=#80FFFF ><FONT 
COLOR=#000080>

Specifies the number of screen twips that each printer's dot, or pixel, width consumes.</FONT>

<TR>

<TD VALIGN=top  BGCOLOR=#80FFFF ><FONT COLOR=#000080>

Width

</FONT>

<TD VALIGN=top  BGCOLOR=#80FFFF ><FONT COLOR=#000080>

Holds the 
size of the page width (measured in twips).</FONT>

</TABLE><P>There are lots of Printer properties, as shown in Table 21.1. Luckily, you'll use only a few of the properties for most of your printing needs. The font-related Printer properties take care of 
just about almost all of your printing jobs that are 
textual in nature.

<BR>

<BLOCKQUOTE>

<BLOCKQUOTE>

<HR ALIGN=CENTER>

<BR>

<NOTE><B>Note: </B>The graphics-related Printer properties and methods aren't covered in this unit. Once you master 
graphics in the next unit, you'll be more prepared to understand the graphics-related Printer properties. Most of the Printer's properties 
are reserved for controlling extremely advanced graphics output. For typical applications, you'll rarely bother to 
specify any properties because the default values work well for normal reporting requirements.</NOTE>

<BR>

<HR ALIGN=CENTER>

</BLOCKQUOTE></BLOCKQUOTE>

<P>Unlike most of Visual Basic's control objects, the Printer object's methods are much more 
important than the property values. Table 21.2 contains a complete list of the methods supported by Visual Basic's Printer object.

<BR>

<BR>

<P ALIGN=CENTER>

<CENTER>

<FONT COLOR="#000080"><B>Table 21.2. The </B><B>Printer</B><B> object's 
methods.</B></FONT></CENTER>

<BR>



<TABLE  BORDERCOLOR=#000040 BORDER=1 CELLSPACING=2 WIDTH="100%" CELLPADDING=2 >

<TR>

<TD VALIGN=top  BGCOLOR=#80FFFF ><FONT COLOR=#000080>

<I>Method</I>

</FONT>

<TD VALIGN=top  BGCOLOR=#80FFFF ><FONT 
COLOR=#000080>

<I>Description</I></FONT>

<TR>

<TD VALIGN=top  BGCOLOR=#80FFFF ><FONT COLOR=#000080>

Circle

</FONT>

<TD VALIGN=top  BGCOLOR=#80FFFF ><FONT COLOR=#000080>

Draws a circle, ellipse, or arc on the printer</FONT>

<TR>

<TD VALIGN=top  
BGCOLOR=#80FFFF ><FONT COLOR=#000080>

EndDoc

</FONT>

<TD VALIGN=top  BGCOLOR=#80FFFF ><FONT COLOR=#000080>

Releases the current document, in full, to the Print Manager for output</FONT>

<TR>

<TD VALIGN=top  BGCOLOR=#80FFFF ><FONT COLOR=#000080>

Line


</FONT>

<TD VALIGN=top  BGCOLOR=#80FFFF ><FONT COLOR=#000080>

Draws lines and boxes on the page</FONT>

<TR>

<TD VALIGN=top  BGCOLOR=#80FFFF ><FONT COLOR=#000080>

NewPage

</FONT>

<TD VALIGN=top  BGCOLOR=#80FFFF ><FONT COLOR=#000080>

Sends a page 
break to the printed output so that subsequent output appears on the next page</FONT>

<TR>

<TD VALIGN=top  BGCOLOR=#80FFFF ><FONT COLOR=#000080>

Print

</FONT>

<TD VALIGN=top  BGCOLOR=#80FFFF ><FONT COLOR=#000080>

Prints numeric and text data on the 
printer</FONT>

<TR>

<TD VALIGN=top  BGCOLOR=#80FFFF ><FONT COLOR=#000080>

PSet

</FONT>

<TD VALIGN=top  BGCOLOR=#80FFFF ><FONT COLOR=#000080>

Draws a graphical point on the printed output</FONT>

<TR>

<TD VALIGN=top  BGCOLOR=#80FFFF ><FONT 
COLOR=#000080>

Scale

</FONT>

<TD VALIGN=top  BGCOLOR=#80FFFF ><FONT COLOR=#000080>

Determines the scale used for measuring output</FONT>

<TR>

<TD VALIGN=top  BGCOLOR=#80FFFF ><FONT COLOR=#000080>

TextHeight

</FONT>

<TD VALIGN=top  BGCOLOR=#80FFFF 
><FONT COLOR=#000080>

Determines the full height of text given in the scale set with Scale</FONT>

<TR>

<TD VALIGN=top  BGCOLOR=#80FFFF ><FONT COLOR=#000080>

TextWidth

</FONT>

<TD VALIGN=top  BGCOLOR=#80FFFF ><FONT COLOR=#000080>

Determines the full 
width of text given in the scale set with Scale</FONT>

</TABLE><BLOCKQUOTE>

<BLOCKQUOTE>

<HR ALIGN=CENTER>

<BR>

<NOTE><B>Tip: </B>By far the most widely used Printer methods are the Print, EndDoc, and NewPage methods. Once you master these three 
methods, you'll rarely need to use any other methods.</NOTE>

<BR>

<HR ALIGN=CENTER>

</BLOCKQUOTE></BLOCKQUOTE>

<P><FONT COLOR="#FF8000"><B><I>Review: </I></B></FONT>There are several properties and methods available for the Printer object. Unless you 
need to send graphics to the printer using advanced graphics capabilities, you'll need only two or three of the 
properties and methods to fulfill all your printing needs.

<BR>

<BR>

<A NAME="E68E161"></A>

<H3 ALIGN=CENTER>

<CENTER>

<FONT SIZE=5 
COLOR="#FF0000"><B>The </B><FONT COLOR="#FF8000"><B><I>Print </I></B></FONT><B>Method</B></FONT></CENTER></H3>

<BR>

<P><FONT COLOR="#FF8000"><B><I>Concept: </I></B></FONT>The Printer object's Print method handles almost all printed output. Print supports 
several different formats. With Print, you can print messages, variables, constants, and expressions on the printer.

<BR>

<P>The Print method is, by far, the most commonly used printing method in Visual Basic. By mastering the Print method, you will have 
mastered the single most important printing method that you can master.

<BR>

<BLOCKQUOTE>

<BLOCKQUOTE>

<HR ALIGN=CENTER>

<BR>

<NOTE><B>Note: </B>Remember that a method is nothing more than a command that you apply to a particular object. For example, 
the AddItem method is a method that you've seen used throughout this book to add items to list and combo box controls.</NOTE>

<BR>

<HR ALIGN=CENTER>

</BLOCKQUOTE></BLOCKQUOTE>

<P>Here is the format of the Print method:

<BR>

<BR>

<PRE>

<FONT 
COLOR="#000080">[Printer.]Print [Spc(<I>n</I>) | Tab(<I>n</I>)] <I>Expression</I> [; | ,]</FONT></PRE>

<P>The format makes Print look a lot more confusing that it really is, but the portion of the Print method that appears to the right of Print takes some 
explanation. The next several sections explain the various options available for the Print method.

<BR>

<BR>

<A NAME="E69E144"></A>

<H4 ALIGN=CENTER>

<CENTER>

<FONT SIZE=4 COLOR="#FF0000"><B>Printing Constants</B></FONT></CENTER></H4>

<BR>

<P>The 
Print method easily prints string and numeric constants. To print a string or numeric constant, place the constant to the right of the Print method. The following methods send the numbers 1, 2, and 3 to the printed output:

<BR>

<PRE>

<FONT 
COLOR="#000080">printer.Print 1

Printer.Print 2

Printer.Print 3</FONT></PRE>

<P>When execution hits these three lines of code, Visual Basic sends 1, 2, and 3 to the Printer object with each number appearing on subsequent lines. Every Print method sends 
a carriage return and line feed sequence to the printer. A lone Print method on 
a line by itself such as this one:

<BR>

<BR>

<PRE>

<FONT COLOR="#000080">printer.Print</FONT></PRE>

<P>sends a blank line to the printer.

<BR>

<BLOCKQUOTE>


<BLOCKQUOTE>

<HR ALIGN=CENTER>

<BR>

<NOTE><B>Note: </B>Visual Basic always adds a space before all positive numeric values printed on the page. The space is where an invisible plus sign appears.</NOTE>

<BR>

<HR ALIGN=CENTER>


</BLOCKQUOTE></BLOCKQUOTE>

<P>The following Print method sends two lines of text to the Printer object:

<BR>

<PRE>

<FONT COLOR="#000080">printer.Print &quot;Visual Basic makes writing programs&quot;

Printer.Print &quot;for Windows 
easy.&quot;</FONT></PRE>

<P>When the Windows Print Manager gets these two lines of output, the following appears on the printer's paper:

<BR>

<PRE>

<FONT COLOR="#000080">Visual Basic makes writing programs

for Windows easy.</FONT></PRE>

<BR>

<A 
NAME="E69E145"></A>

<H4 ALIGN=CENTER>

<CENTER>

<FONT SIZE=4 COLOR="#FF0000"><B>Printing Variables and Controls</B></FONT></CENTER></H4>

<BR>

<P>In addition to constants, the Print method prints the contents of variables and controls. The following 
initializes a string and integer variable and then prints the contents of the variables on the printer:

<BR>

<PRE>

<FONT COLOR="#000080">FirstName = &quot;Charley&quot;

Age = 24

Printer.Print FirstName

Printer.Print Age</FONT></PRE>

<P>Here is the 
output produced by these Print methods:

<BR>

<PRE>

<FONT COLOR="#000080">Charley

 24</FONT></PRE>

<BLOCKQUOTE>

<BLOCKQUOTE>

<HR ALIGN=CENTER>

<BR>

<NOTE><B>Note: </B>Remember that Visual Basic won't send anything to the Printer object until the 
code that contains Print executes. You would insert Print methods at appropriate places in the code's procedures where printed output is required. For 
example, if there is a command button labeled Print Report, that command button's Click procedure would 
contain Print methods.</NOTE>

<BR>

<HR ALIGN=CENTER>

</BLOCKQUOTE></BLOCKQUOTE>

<BR>

<A NAME="E69E146"></A>

<H4 ALIGN=CENTER>

<CENTER>

<FONT SIZE=4 COLOR="#FF0000"><B>Printing Expressions</B></FONT></CENTER></H4>

<BR>

<P>If you could print only 
individual strings, numeric constants, and variables, Print would be extremely limiting. Of course, Print is not that limited. You can combine constants, variables, and expressions to the right of Print methods to produce more 
complex printed output. The 
following Print method prints 31:

<BR>

<BR>

<PRE>

<FONT COLOR="#000080">printer.Print 25 + (3 * 2)</FONT></PRE>

<P>The expression can contain both variables, controls, and constants, like this:

<BR>

<BR>

<PRE>

<FONT COLOR="#000080">printer.Print 
Factor * lblWeight.Caption + 10</FONT></PRE>

<P>If you want to send special characters to the printer, you can do that by using the Chr$() function. The following expression produces a message that includes embedded quotation marks inside the printed 
string:

<BR>

<BR>

<PRE>

<FONT COLOR="#000080">printer.Print &quot;She said, &quot; &amp; Chr$(34) &amp; &quot;I do.&quot; &amp; Chr$(34)</FONT></PRE>

<P>When execution reaches the former Print method, this is what the Print Manager sends to the 
printer:

<BR>

<BR>

<PRE>

<FONT COLOR="#000080">She said, &quot;I do.&quot;</FONT></PRE>

<BLOCKQUOTE>

<BLOCKQUOTE>

<HR ALIGN=CENTER>

<BR>

<NOTE><B>Note: </B>You wouldn't be able to print the quotation marks without the Chr$() function. Usually, 
Visual Basic suppresses quotation marks when printing string constants.</NOTE>

<BR>

<HR ALIGN=CENTER>

</BLOCKQUOTE></BLOCKQUOTE>

<BR>

<A NAME="E69E147"></A>

<H4 ALIGN=CENTER>

<CENTER>

<FONT SIZE=4 COLOR="#FF0000"><B>Printing Multiple 
Values</B></FONT></CENTER></H4>

<BR>

<BLOCKQUOTE>

<BLOCKQUOTE>

<HR ALIGN=CENTER>

<BR>

<NOTE><I>Definition: </I>A <I>print zone</I> occurs every 14 columns on the page.</NOTE>

<BR>

<HR ALIGN=CENTER>

</BLOCKQUOTE></BLOCKQUOTE>

<P>When you need to 
print several values on one line, you can do so by separating those values with semicolons and commas. The semicolon forces subsequent values to appear right next to each other in the output. The comma forces values to appear in the 
next print zone.

<BR>


<P>The following two messages print on different lines:

<BR>

<PRE>

<FONT COLOR="#000080">printer.Print &quot;The sales were &quot;

Printer.Print 4345.67</FONT></PRE>

<P>By using the semicolon, you can force these values to print next to each other:


<BR>

<BR>

<PRE>

<FONT COLOR="#000080">printer.Print &quot;The sales were &quot;; 4345.67</FONT></PRE>

<P>The semicolon also acts to keep automatic carriage return and line feeds from taking place. The following Print method ends with a trailing 
semicolon:

<BR>

<BR>

<PRE>

<FONT COLOR="#000080">printer.Print &quot;The company name is &quot;;</FONT></PRE>

<P>The trailing semicolon keeps the printer's print head at the end of the message for subsequent output. Therefore, the subsequent Print 
statement shown next, no matter how much later in the code the Print appears, would print its output right next to the 
previous Print's output:

<BR>

<BR>

<PRE>

<FONT COLOR="#000080">printer.Print lblComName.Caption ' Complete the line</FONT></PRE>


<P>The semicolon is nice for printing multiple values of different data types of the same line. The following Print prints all of its data on the same line of output:

<BR>

<BR>

<PRE>

<FONT COLOR="#000080">printer.Print &quot;Sales:&quot;; totSales; 
&quot;Region:&quot;; RegNum</FONT></PRE>

<P>The comma is still sometimes used to force subsequent values to print in the next print zone. The following Print prints names every 14 spaces on the printed line:

<BR>

<BR>

<PRE>

<FONT 
COLOR="#000080">printer.Print DivName1, DivName2, DivName3, DivName4</FONT></PRE>

<P>No matter how long or short each division name is, the next division name will print in the next print zone. The previous Print might produce output similar to the 
following:

<BR>

<BR>

<PRE>

<FONT COLOR="#000080">North NorthWest South SouthWest</FONT></PRE>

<BLOCKQUOTE>

<BLOCKQUOTE>

<HR ALIGN=CENTER>

<BR>

<NOTE><B>Tip: </B>When you print lists of numbers or short strings, the comma allows you to easily align 
each column.</NOTE>

<BR>

<HR ALIGN=CENTER>

</BLOCKQUOTE></BLOCKQUOTE>

<BR>

<A NAME="E69E148"></A>

<H4 ALIGN=CENTER>

<CENTER>

<FONT SIZE=4 COLOR="#FF0000"><B>Utilize the Fonts</B></FONT></CENTER></H4>

<BR>

<P>Most Windows-compatible printers 
support a variety of fonts. The font-related properties are often useful for printing titles and other special output messages in special font sizes and styles.

<BR>

<P>You can add special effects to your printed text by setting the font modifying 
properties from Table 21.1. For example, the following code first puts the printer in a boldfaced, italicized, 72-point font (a print size of one full inch), and then prints 
a message:

<BR>

<PRE>

<FONT COLOR="#000080">printer.FontBold = True


Printer.FontItalic = True

Printer.FontSize = 72

Printer.Print &quot;I'm learning Visual Basic!&quot;</FONT></PRE>

<BLOCKQUOTE>

<BLOCKQUOTE>

<HR ALIGN=CENTER>

<BR>

<NOTE><B>Note: </B>The font properties affect <I>subsequent</I> output. Therefore, if 
you print several lines of text and then change the font size, the text that you've already printed remains unaffected. Visual Basic prints only the subsequent output 
with the new font.</NOTE>

<BR>

<HR ALIGN=CENTER>

</BLOCKQUOTE></BLOCKQUOTE>

<BR>

<A 
NAME="E69E149"></A>

<H4 ALIGN=CENTER>

<CENTER>

<FONT SIZE=4 COLOR="#FF0000"><B>Better Spacing with </B><FONT COLOR="#FF8000"><B><I>Spc()</I></B></FONT><B> and </B><FONT COLOR="#FF8000"><B><I>Tab()</I></B></FONT></FONT></CENTER></H4>

<BR>

<P>The Print 
method supports the use of the embedded Spc() and Tab() functions to give you additional control over your program's output. Spc() produces a variable number of spaces in the output as determined by the argument to Spc(). The following Print 
prints a 
total of ten spaces between the first name and the last:

<BR>

<BR>

<PRE>

<FONT COLOR="#000080">printer.Print FirstName; Spc(10); LastName</FONT></PRE>

<P>The argument that you send to the embedded Tab() function determines in which column the next 
printed character appears. In the following Print, the date appears in the 50th column on the page:

<BR>

<BR>

<PRE>

<FONT COLOR="#000080">printer.Print Spc(50); DateGenerated</FONT></PRE>

<P>As these examples show, if you print values before or after 
the Spc() and Tab() functions, you separate the functions from the surrounding printed values using the semicolon.

<BR>

<BLOCKQUOTE>

<BLOCKQUOTE>

<HR ALIGN=CENTER>

<BR>

<NOTE><B>Tip: </B>Spc() and Tab() give you more control over spacing than the 
comma and semicolon allow.</NOTE>

<BR>

<HR ALIGN=CENTER>

</BLOCKQUOTE></BLOCKQUOTE>

<P><FONT COLOR="#FF8000"><B><I>Stop and Type: </I></B></FONT>Listing 21.2 contains some code that computes and prints two housing pricing and taxation values.

<BR>


<P><FONT COLOR="#FF8000"><B><I>Review: </I></B></FONT>Use Spc() and Tab() to control the printer's output spacing.

<BR>

<P>

<FONT COLOR="#000080"><B>Listing 21.2. Using </B><B>Spc()</B><B> and </B><B>Tab()</B><B>.</B></FONT>

<BR>

<PRE>

<FONT 
COLOR="#000080">1: Tax1 = TaxRate * HouseVal1

2: Tax2 = TaxRate * HouseVal2

3:

4: TotalVal = HouseVal1 + HouseVal2

5: TotTaxes = TaxRate * TotalVal

6:

7: Printer.Print &quot;House Value&quot;; Tab(20); &quot;Tax&quot;

8: Printer.Print 
Format$(HouseVal1, &quot;Currency&quot;);

9: Printer.Print Tab(20); Format$(Tax1, &quot;Currency&quot;)

10: Printer.Print Format$(HouseVal2, &quot;Currency&quot;);

11: Printer.Print Tab(20); Format$(Tax2, &quot;Currency&quot;)

12:

13: Printer.Print ' 
Prints a blank line

14:

15: Printer.Print &quot;Total tax:&quot;; Spc(5); Format$(TotTaxes, &quot;Currency&quot;)</FONT></PRE>

<P><FONT COLOR="#FF8000"><B><I>Output: </I></B></FONT>Here is a sample of what you may see on the paper after Listing 21.2 
executes:

<BR>

<PRE>

<FONT COLOR="#000080">House Value Tax

$76,578.23 $9,189.39

$102,123.67 $12,254.81

Total tax: $21,444.20</FONT></PRE>

<P><FONT COLOR="#FF8000"><B><I>Analysis: </I></B></FONT>The Tab(20) function calls in lines 7, 9, and 11 ensure 
that the second column that contains the tax information is aligned. Also, notice that the trailing semicolons on lines 8 and 10 allow you to 
continue the Print methods on subsequent lines without squeezing long Print method values onto the same line.


<BR>

<P>Line 13 prints a blank line. Line 15 uses the Spc() function to insert five spaces between the title and the total amount of tax.

<BR>

<BR>

<A NAME="E68E162"></A>

<H3 ALIGN=CENTER>

<CENTER>

<FONT SIZE=5 COLOR="#FF0000"><B>Initiating the 
Print</B></FONT></CENTER></H3>

<BR>

<P><FONT COLOR="#FF8000"><B><I>Concept: </I></B></FONT>The physical printing doesn't begin until all output is released to the Print Manager, or until your application issues an EndDoc method.

<BR>

<P>As you send 
Print methods to the Print Manager via the Printer object, the Print Manager builds the page or pages of output but doesn't release that output until you issue an EndDoc method. EndDoc tells the Print Manager, &quot;I'm done sending output 
to you, you can 
print now.&quot;

<BR>

<P>Without EndDoc, Windows would collect all of an application's output and not print any of the output until the application terminates. If you were to write an application that the user runs throughout the day and that prints 
invoices as customers make 
purchases, you would need to issue an EndDoc method at the end of each invoice-printing procedure if you wanted each invoice to print at that time.

<BR>

<P><FONT COLOR="#FF8000"><B><I>Stop and Type: </I></B></FONT>Listing 21.3 
prints a message on the printer and then signals to the Print Manager that the output is ready to go to paper. Without the EndDoc, the Print Manager would hold the output until the 
application containing the code terminates.

<BR>

<P><FONT 
COLOR="#FF8000"><B><I>Review: </I></B></FONT>The EndDoc method tells the Print Manager to release all printed output.

<BR>

<P>

<FONT COLOR="#000080"><B>Listing 21.3. The </B><B>EndDoc</B><B> tells the Print Manager to release the output.</B></FONT>


<BR>

<PRE>

<FONT COLOR="#000080">1: Printer.Print &quot;Invoice #&quot;; invNum

2: Printer.Print &quot;Customer:&quot;; cust(CCnt); Tab(20); &quot;Final Sales&quot;

3: Printer.Print &quot;Amount of sale:&quot;; Tab(20); Format$(SaleAmt, 
&quot;Currency&quot;)

4: Printer.Print &quot;Tax:&quot;; Tab(20); Format$(tax, &quot;Currency&quot;)

5: Printer.Print

6: Printer.Print &quot;Total:&quot;; Tab(20); Format$(TotalSale, &quot;Currency&quot;)

7:

8: ' Release the job for actual printing


9: Printer.EndDoc</FONT></PRE>

<P><FONT COLOR="#FF8000"><B><I>Analysis: </I></B></FONT>The program containing Listing 21.3's code might continue to run and process other sets of data. The EndDoc method triggered by line 9 ensures that the output built in 
the preceding Print methods all 
gets sent to the physical printer immediately. If other Print methods appear later in the program, the Print Manager will begin building the output all over again, releasing that subsequent output only for an EndDoc 
procedure or when the application ends.

<BR>

<BR>

<A NAME="E68E163"></A>

<H3 ALIGN=CENTER>

<CENTER>

<FONT SIZE=5 COLOR="#FF0000"><B>Page Breaks</B></FONT></CENTER></H3>

<BR>

<P><FONT COLOR="#FF8000"><B><I>Concept: </I></B></FONT>When printing to 
the printer, you must be careful to print at the top of a new page when you want the output to advance one page. The NewPage method forces the printer to eject the current page and 
begin subsequent output on the next new page.

<BR>

<P>The Windows Print 
Manager ensures that each printed page properly breaks at the end of a physical page. Therefore, if the printer's page length is 66 lines and you print 67 lines, the 67th line will appear at the top of the second page of output.

<BR>

<P>There are times, 
however, when you need to print less than a full page on the printer. You can release that incomplete page for printing using the NewPage method (from Table 21.1). To use NewPage, simple apply the NewPage method to the Printer object 
like this:

<BR>


<BR>

<PRE>

<FONT COLOR="#000080">printer.NewPage</FONT></PRE>

<BLOCKQUOTE>

<BLOCKQUOTE>

<HR ALIGN=CENTER>

<BR>

<NOTE><B>Note: </B>Remember that you actually print to the Windows Print Manager and that your application's output methods don't directly 
control a physical printer. Therefore, NewPage tells the Print Manager to go the a new page when the Print Manager 
gets to that location in the output.</NOTE>

<BR>

<HR ALIGN=CENTER>

</BLOCKQUOTE></BLOCKQUOTE>

<P>You've got to remember that you're 
working with printers that support many fonts and font sizes. You can always determine, in advance, how many lines of output will fit on a single page as long as you first check the value of the following formula:

<BR>

<BR>

<PRE>

<FONT 
COLOR="#000080">numLinesPerPage = Printer.Height / Printer.TextHeight(&quot;X&quot;)</FONT></PRE>

<P>As explained in Table 21.1, the Height property determines the height, in twips, of the page. The TextHeight property determines the full height of a 
printed character (including <I>leading</I>, which is the area directly above and below characters). 
TextHeight measures the height in twips if you haven't changed the scale using the ScaleMode property.

<BR>

<P>For printed reports, you'll rarely use 
the ScaleMode method. If you have the need to change the scale of measurement, however, you'll have to change the scale back to twips before calculating the number of output lines per page, like this:

<BR>

<BR>

<PRE>

<FONT 
COLOR="#000080">printer.ScaleMode = TWIPS</FONT></PRE>

<P>The ScaleMode accepts values defined in Table 21.3. As long as you add the CONSTANT.TXT file to your application's Property window, you can use the named constants in place of the numeric values if 
you want to change the scale measurement.

<BR>

<BR>

<P ALIGN=CENTER>

<CENTER>

<FONT COLOR="#000080"><B>Table 21.3. The </B><B>ScaleMode</B><B> values.</B></FONT></CENTER>

<BR>



<TABLE  BORDERCOLOR=#000040 BORDER=1 CELLSPACING=2 WIDTH="100%" 
CELLPADDING=2 >

<TR>

<TD VALIGN=top  BGCOLOR=#80FFFF ><FONT COLOR=#000080>

<I>Value</I>

</FONT>

<TD VALIGN=top  BGCOLOR=#80FFFF ><FONT COLOR=#000080>

<I>Named Constant</I>

</FONT>

<TD VALIGN=top  BGCOLOR=#80FFFF ><FONT COLOR=#000080>


<I>Description</I></FONT>

<TR>

<TD VALIGN=top  BGCOLOR=#80FFFF ><FONT COLOR=#000080>

0

</FONT>

<TD VALIGN=top  BGCOLOR=#80FFFF ><FONT COLOR=#000080>

USER

</FONT>

<TD VALIGN=top  BGCOLOR=#80FFFF ><FONT COLOR=#000080>

A user-defined value</FONT>


<TR>

<TD VALIGN=top  BGCOLOR=#80FFFF ><FONT COLOR=#000080>

1

</FONT>

<TD VALIGN=top  BGCOLOR=#80FFFF ><FONT COLOR=#000080>

TWIPS

</FONT>

<TD VALIGN=top  BGCOLOR=#80FFFF ><FONT COLOR=#000080>

Measured in twips (the default)</FONT>

<TR>

<TD 
VALIGN=top  BGCOLOR=#80FFFF ><FONT COLOR=#000080>

2

</FONT>

<TD VALIGN=top  BGCOLOR=#80FFFF ><FONT COLOR=#000080>

POINTS

</FONT>

<TD VALIGN=top  BGCOLOR=#80FFFF ><FONT COLOR=#000080>

Measured in points</FONT>

<TR>

<TD VALIGN=top  BGCOLOR=#80FFFF 
><FONT COLOR=#000080>

3

</FONT>

<TD VALIGN=top  BGCOLOR=#80FFFF ><FONT COLOR=#000080>

PIXELS

</FONT>

<TD VALIGN=top  BGCOLOR=#80FFFF ><FONT COLOR=#000080>

Measured in pixels (the smallest unit addressable by your printer)</FONT>

<TR>

<TD 
VALIGN=top  BGCOLOR=#80FFFF ><FONT COLOR=#000080>

4

</FONT>

<TD VALIGN=top  BGCOLOR=#80FFFF ><FONT COLOR=#000080>

CHARACTERS

</FONT>

<TD VALIGN=top  BGCOLOR=#80FFFF ><FONT COLOR=#000080>

Measured in characters (120 by 240 twips)</FONT>

<TR>

<TD 
VALIGN=top  BGCOLOR=#80FFFF ><FONT COLOR=#000080>

5

</FONT>

<TD VALIGN=top  BGCOLOR=#80FFFF ><FONT COLOR=#000080>

INCHES

</FONT>

<TD VALIGN=top  BGCOLOR=#80FFFF ><FONT COLOR=#000080>

Measured in inches</FONT>

<TR>

<TD VALIGN=top  BGCOLOR=#80FFFF 
><FONT COLOR=#000080>

6

</FONT>

<TD VALIGN=top  BGCOLOR=#80FFFF ><FONT COLOR=#000080>

MILLIMETERS

</FONT>

<TD VALIGN=top  BGCOLOR=#80FFFF ><FONT COLOR=#000080>

Measured in millimeters</FONT>

<TR>

<TD VALIGN=top  BGCOLOR=#80FFFF ><FONT 
COLOR=#000080>

7

</FONT>

<TD VALIGN=top  BGCOLOR=#80FFFF ><FONT COLOR=#000080>

CENTIMETERS

</FONT>

<TD VALIGN=top  BGCOLOR=#80FFFF ><FONT COLOR=#000080>

Measured in centimeters</FONT>

</TABLE><P><FONT COLOR="#FF8000"><B><I>Stop and Type: 
</I></B></FONT>Listing 21.4 contains code that prints two messages, one per page of printed output.

<BR>

<P><FONT COLOR="#FF8000"><B><I>Review: </I></B></FONT>At any point during your application's printing, you can issue an NewPage method to force the 
printer to eject the current page and begin printing at the top of the next page.

<BR>

<P>

<FONT COLOR="#000080"><B>Listing 21.4. The </B><B>NewPage</B><B> forces the printer to eject the current page.</B></FONT>

<BR>

<PRE>

<FONT COLOR="#000080">1: 
Printer.Print &quot;The Report begins on the next page...&quot;

2: Printer.NewPage ' Go to top of new page

3: Printer.Print &quot;The Campaign Platform&quot;</FONT></PRE>

<P><FONT COLOR="#FF8000"><B><I>Analysis: </I></B></FONT>Line 2 ejects the printer 
even if the printer has not yet printed a full page.

<BR>

<BR>

<A NAME="E68E164"></A>

<H3 ALIGN=CENTER>

<CENTER>

<FONT SIZE=5 COLOR="#FF0000"><B>Homework</B></FONT></CENTER></H3>

<BR>

<BR>

<A NAME="E69E150"></A>

<H4 ALIGN=CENTER>

<CENTER>

<FONT 
SIZE=4 COLOR="#FF0000"><B>General Knowledge</B></FONT></CENTER></H4>

<BR>

<OL>

<LI>What File command does the Visual Basic Primer system not support?

<BR>

<BR>

<LI>What job does the Windows Print Manager play in printing your application's output?


<BR>

<BR>

<LI>Why doesn't your program need to understand every printer's individual command?

<BR>

<BR>

<LI>What does <I>online</I> mean?

<BR>

<BR>

<LI>How can you ensure that the user prepares the printer before you print reports from a Visual 
Basic application?

<BR>

<BR>

<LI>What is the Printer object?

<BR>

<BR>

<LI>True or false: The Printer object supports properties and methods just as many of the controls do.

<BR>

<BR>

<LI>What is a <I>pixel</I>?

<BR>

<BR>

<LI>What is the most 
commonly used Printer method?

<BR>

<BR>

<LI>True or false: You can print variables and constants but not expressions with Print.

<BR>

<BR>

<LI>True or false: There is no difference between using several embedded Tab(14) functions and using commas to 
separate columns of output in a Print method.

<BR>

<BR>

<LI>Printing three strings separated by commas causes the strings to appear in columns 1, 15, and 29. Why do you think that printing three positive numbers, separated by commas, causes the numbers 
to print in columns 2, 16, and 30?

<BR>

<BR>

<LI>What is a <I>print zone</I>?

<BR>

<BR>

<LI>True or false: A Print that isn't terminated with a trailing semicolon always prints a carriage return and line feed on the printer.

<BR>

<BR>

<LI>How can 
you print quotation marks onto paper?

<BR>

<BR>

<LI>True or false: If the last thing an application does before terminating is print a report, there is no need to specify the EndDoc method at the end of the printing.

<BR>

<BR>

<LI>What is meant by 
<I>leading</I>?

<BR>

<BR>

</OL>

<BR>

<A NAME="E69E151"></A>

<H4 ALIGN=CENTER>

<CENTER>

<FONT SIZE=4 COLOR="#FF0000"><B>Find the Bug</B></FONT></CENTER></H4>

<BR>

<OL>

<LI>Poor Caroline isn't having luck getting a report to print properly. 
Caroline learned in her early days of computing that a printed page has 66 lines of text. Now that Caroline has upgraded to Windows and is practicing to become a top-notch Visual Basic 
programmer, Caroline's 66-line per printed page doesn't seem to be 
true all of the time. Explain to Caroline what she must do to fix her problem.

<BR>

<BR>

<LI>Mike is working on two programs. For some reason, Mike can't figure out why these two different output lines don't produce exactly the same output. Help Mike 
solve this dilemma.

<BR>Printer.Print Tab(10); &quot;Visual Basic&quot;

<BR>Printer.Print Spc(10); &quot;Visual Basic&quot;

<BR>

<BR>

</OL>

<BR>

<A NAME="E69E152"></A>

<H4 ALIGN=CENTER>

<CENTER>

<FONT SIZE=4 COLOR="#FF0000"><B>What's the 
Output?</B></FONT></CENTER></H4>

<BR>

<OL>

<LI>What's the output from the following two Print methods?

<BR>Printer.Print &quot;Line 1&quot;;

<BR>Printer.Print &quot;Line 2&quot;

<BR>

<BR>

<LI>What does the following Print method produce on the 
printer when the Print Manager releases the line to be printed?

<BR>Printer.Print &quot;The Spanish N is &quot;; Chr$(164)

<BR>

<BR>

</OL>

<BR>

<A NAME="E69E153"></A>

<H4 ALIGN=CENTER>

<CENTER>

<FONT SIZE=4 COLOR="#FF0000"><B>Write Code 
That...</B></FONT></CENTER></H4>

<BR>

<OL>

<LI>Write a line of Visual Basic code that prints the word America in column 57.

<BR>

<BR>

</OL>

<BR>

<A NAME="E69E154"></A>

<H4 ALIGN=CENTER>

<CENTER>

<FONT SIZE=4 COLOR="#FF0000"><B>Extra 
Credit</B></FONT></CENTER></H4>

<BR>

<P>Write a program that prints the ASCII characters (print only the values from ASCII 32 to 255) on a piece of paper when the user presses a command button.

<BR>

<P ALIGN=LEFT>

<A HREF="velp10.htm" 
TARGET="_self"><IMG SRC="purprev.gif" WIDTH = 32 HEIGHT = 32 BORDER = 0 ALT="Previous Page"></A>

<A HREF="#I0" TARGET="_self"><IMG SRC="purtop.gif" WIDTH = 32 HEIGHT = 32 BORDER = 0 ALT="Page Top"></A>

<A HREF="index.htm" TARGET="_self"><IMG 
SRC="purtoc.gif" WIDTH = 32 HEIGHT = 32 BORDER = 0 ALT="TOC"></A>

<A HREF="vel22.htm" TARGET="_self"><IMG SRC="purnext.gif" WIDTH = 32 HEIGHT = 32 BORDER = 0 ALT="Next Page"></A>


</BODY></HTML>







