<HTML>

<HEAD>

<TITLE>Visual Basic in 12 Easy Lessons vel14.htm </TITLE>

<LINK REL="ToC" HREF="index.htm">

<LINK REL="Index" HREF="htindex.htm">

<LINK REL="Next" HREF="velp07.htm">

<LINK REL="Previous" HREF="vel13.htm"></HEAD>

<BODY BGCOLOR="#FFFFFF" 
TEXT="#000000" LINK="#0000FF" VLINK="#800080">

<A NAME="I0"></A>

<H2>Visual Basic in 12 Easy Lessons vel14.htm</H2>

<P ALIGN=LEFT>

<A HREF="vel13.htm" TARGET="_self"><IMG SRC="purprev.gif" WIDTH = 32 HEIGHT = 32 BORDER = 0 ALT="Previous Page"></A>

<A 
HREF="index.htm" TARGET="_self"><IMG SRC="purtoc.gif" WIDTH = 32 HEIGHT = 32 BORDER = 0 ALT="TOC"></A>

<A HREF="velp07.htm" TARGET="_self"><IMG SRC="purnext.gif" WIDTH = 32 HEIGHT = 32 BORDER = 0 ALT="Next Page"></A>


<HR ALIGN=CENTER>

<P>

<UL>

<UL>

<UL>

<LI>

<A HREF="#E68E104" >What You'll Learn</A>

<LI>

<A HREF="#E68E105" >Getting the Date and Time</A>

<LI>

<A 
HREF="#E68E106" >Set the Date and Time From Visual Basic</A>

<LI>

<A HREF="#E68E107" >How Much Time Has Passed?</A>

<LI>

<A HREF="#E68E108" >Serial Dates and Times</A>

<LI>

<A HREF="#E68E109" >Formatting with Format()</A>

<LI>

<A HREF="#E68E110" 
>Homework</A>

<UL>

<LI>

<A HREF="#E69E94" >General Knowledge</A>

<LI>

<A HREF="#E69E95" >Find the Bug</A>

<LI>

<A HREF="#E69E96" >Extra Credit</A></UL></UL></UL></UL>

<HR ALIGN=CENTER>

<A NAME="E66E20"></A>

<H1 ALIGN=CENTER>

<CENTER>

<FONT 
SIZE=6 COLOR="#FF0000"><B>Lesson 7, Unit 14</B></FONT></CENTER></H1>

<BR>

<A NAME="E67E23"></A>

<H2 ALIGN=CENTER>

<CENTER>

<FONT SIZE=6 COLOR="#FF0000"><B>Working with Dates, Times, and Formats</B></FONT></CENTER></H2>

<BR>

<BR>

<A 
NAME="E68E104"></A>

<H3 ALIGN=CENTER>

<CENTER>

<FONT SIZE=5 COLOR="#FF0000"><B>What You'll Learn</B></FONT></CENTER></H3>

<BR>

<UL>

<LI>Getting the date and time

<BR>

<BR>

<LI>Setting the date and time from Visual Basic

<BR>

<BR>


<LI>Determining how much time has passed

<BR>

<BR>

<LI>Using date arithmetic

<BR>

<BR>

<LI>Getting serial dates and times

<BR>

<BR>

</UL>

<P>This unit completes your learning of Visual Basic's built-in functions by exploring the built-in date, 
time, and formatting functions. This is the first unit of the book in which you'll work directly with the variant data type even though you've seen 
references to Variant throughout the book.

<BR>

<P>In addition to the functions, this unit discusses the 
several date and time statements that augment the work you'll do with date and time function values. Date and time values are critical for time keeping, transaction recording, and reporting, so you 
must be able to write programs that track and work with 
such values. Visual Basic supports one of the most comprehensive library of date and time functions, as you'll see in this unit.

<BR>

<BLOCKQUOTE>

<BLOCKQUOTE>

<HR ALIGN=CENTER>

<BR>

<NOTE><B>Note: </B>The most important part of learning many of the 
date and time values is learning how Visual Basic stores date and time values in memory.</NOTE>

<BR>

<HR ALIGN=CENTER>

</BLOCKQUOTE></BLOCKQUOTE>

<P>The formatting power of Visual Basic is superb as well. You'll see the formatting tables that convert 
your program output to any format needed. Visual Basic supports date, time, string, and number formatting capabilities.

<BR>

<BR>

<A NAME="E68E105"></A>

<H3 ALIGN=CENTER>

<CENTER>

<FONT SIZE=5 COLOR="#FF0000"><B>Getting the Date and 
Time</B></FONT></CENTER></H3>

<BR>

<P><FONT COLOR="#FF8000"><B><I>Concept: </I></B></FONT>The Now(), Date$() and Time$() functions (and their cousins, the Date() and Time() functions) look inside your computer's clock and calendar to retrieve the current 
date and time for your program's 
use.

<BR>

<P>In ancient times (a little over eight years ago), computers couldn't remember the date and time if you turned them off. They've come a long way! Somebody thought of the brilliant idea of putting a battery 
inside the computer so that the computer would 
remember the date and time every time you powered on the machine. Of course, batteries had been in wrist watches for years before then, but computer makers were so busy trying to squeeze 360K of storage onto 
one of those little 5 1/4-inch floppy disks that 
they didn't get around to the battery for a while.

<BR>

<P>Visual Basic gives your Windows programs access to the date and time values stored internally in your computer. Assuming that the date and time 
are set properly, you can assign the date and time function return values to variables or display those 
values in controls.

<BR>

<BLOCKQUOTE>

<BLOCKQUOTE>

<HR ALIGN=CENTER>

<BR>

<NOTE><I>Definition: 24-hour time</I> measures time from 0 to 24 
hours.</NOTE>

<BR>

<HR ALIGN=CENTER>

</BLOCKQUOTE></BLOCKQUOTE>

<P>Some of the time values returned from these functions return a 24-hour time. If you're used to expressing time values using a 12-hour a.m. or p.m. time, you'll have to get accustomed to 
the 24-hour time in which Visual Basic adds 12 to all time values 
after 12:59 PM. Therefore, 3:45 in the morning is 3:45, but 3:45 in the afternoon is 15:45.

<BR>

<BLOCKQUOTE>

<BLOCKQUOTE>

<HR ALIGN=CENTER>

<BR>

<NOTE><B>Note: </B>You can use the 
Format() function to change any 24-hour time to a 12-hour clock using the AM and PM indicators if you want to.</NOTE>

<BR>

<HR ALIGN=CENTER>

</BLOCKQUOTE></BLOCKQUOTE>

<P>The Now(), Date$(), Date(), Time$(), and Time() functions are functions that 
don't accept arguments. As such, Visual Basic removes the parentheses if you type them after these functions. Nevertheless, this book does use the parentheses after the 
functions to remind you that they are built-in functions.

<BR>

<P>The Now() function 
returns both the date and time. Now() returns a Variant data type in the following format:

<BR>

<BR>

<PRE>

<FONT COLOR="#000080"><I>mm</I>/<I>dd</I>/<I>yy</I> <I>hh</I>:<I>mm</I>:<I>ss</I> [AM][PM]</FONT></PRE>

<P>where <I>mm</I> is a 2-digit month, 
<I>dd</I> is a 2-digit day, and <I>yy</I> is a 2-digit year value. The time appears to the right of the date. The time section of Now()'s return value uses a 12-hour clock rather than the 24-hour clock used by Time$() 
and Time(). <I>hh</I> is a 2-digit 
hour, <I>mm</I> is a 2-digit minute value, and <I>ss</I> is a 2-digit second value. Just for your information, Visual Basic stores this complete value internally as a double-precision value because only the 
double-precision value is large enough to hold 
that much information. Even though Visual Basic stores the date and time internally in a double-precision value, Now() returns the value formatted as shown inside the variant data type.

<BR>

<P>If you've set your computer's version of Windows to an 
international setting that requires a different date and time format, these functions return date and time values that match your country's setting.

<BR>

<P>Date$() returns the system date string in the following format:

<BR>

<BR>

<PRE>

<FONT 
COLOR="#000080">mm-dd-yyyy</FONT></PRE>

<P>Date() returns the value in the variant data type. The difference between Date() and Date$() is that Date() doesn't return leading zeros in day or month numbers less than 10, Date() doesn't append 19 to the year, 
and Date() inserts forward slashes 
instead of hyphens between the date values.

<BR>

<BLOCKQUOTE>

<BLOCKQUOTE>

<HR ALIGN=CENTER>

<BR>

<NOTE><B>Tip: </B>Given the closeness to the year 2000, use Date$() exclusively so that the full year is returned in 
case you still use your program when the century turns.</NOTE>

<BR>

<HR ALIGN=CENTER>

</BLOCKQUOTE></BLOCKQUOTE>

<P>Time$() returns the system time in a string data type in the following 24-hour format:

<BR>

<BR>

<PRE>

<FONT 
COLOR="#000080">hh:mm:ss</FONT></PRE>

<P>where <I>hh</I> is the hour (from 00 to 23), <I>mm</I> is the minute (from 00 to 59), and <I>ss</I> is the second (from 00 to 59). Time() returns the system time in a variant data type in the following 12-hour 
format:

<BR>

<BR>

<PRE>

<FONT COLOR="#000080"><I>hh</I>:<I>mm</I>:<I>ss</I> [AM] [PM]</FONT></PRE>

<P>where Time$() always returns either AM or PM after the time to indicate the time of day.

<BR>

<P><FONT COLOR="#FF8000"><B><I>Stop and Type: 
</I></B></FONT>Listing 14.1 contains several assignment statements whose remarks describe the date or time value returned from the functions.

<BR>

<P><FONT COLOR="#FF8000"><B><I>Review: </I></B></FONT>The date and time functions return values set inside 
your computer so that you can use and display those values in your program. The function that you use, Now(), Date(), or Time() (or the Date$() and 
Time$() counterparts) return various date and time formats.

<BR>

<P>

<FONT COLOR="#000080"><B>Listing 
14.1. Accessing time and date values.</B></FONT>

<BR>

<PRE>

<FONT COLOR="#000080">1: lblNow.Caption = Now() ' 7/9/97 07:48 PM

2: lblDate1.Caption = Date() ' 7/9/97

3: lblDate2.Caption = Date$() ' 07/09/1997

4: lblTime1.Caption = Time() ' 07:48:24 PM


5: lblTime2.Caption = Time$() ' 19:48:24</FONT></PRE>

<P><FONT COLOR="#FF8000"><B><I>Analysis: </I></B></FONT>The assignment statements assume that the current date and time is July 9, 1997 at 7:48:24 in the evening. The different formats offer you the 
choice of how you want the date and time values displayed 
in the target labels.

<BR>

<BR>

<A NAME="E68E106"></A>

<H3 ALIGN=CENTER>

<CENTER>

<FONT SIZE=5 COLOR="#FF0000"><B>Set the Date and Time From Visual Basic</B></FONT></CENTER></H3>

<BR>


<P><FONT COLOR="#FF8000"><B><I>Concept: </I></B></FONT>The Date and Time statements (not the functions) enable you to change the computer's date and time values from within a Visual Basic application. The date and time values remain set until you change 

them again, either through subsequent Date and Time statements or through DOS or Windows commands.

<BR>

<P>The DOS DATE and TIME commands enable you to check and set your computer's date and time settings. The Windows Control Panel program inside the 
Main program group also enables you to set these values from within Windows. Be sure to check your computer's 
date and time every month or so to make sure they're accurate.

<BR>

<P>Visual Basic includes the Date and Time statements that set the date and 
time values of your computer's clock and calendar. Be sure to keep the parentheses off the Date and Time statements, or Visual Basic will think that you're improperly using the 
corresponding functions.

<BR>

<P>Here are the formats of the Date and Time 
statements:

<BR>

<BR>

<PRE>

<FONT COLOR="#000080">Date[$] = dateExpression</FONT></PRE>

<P>and

<BR>

<BR>

<PRE>

<FONT COLOR="#000080">Time[$] = timeExpression</FONT></PRE>

<P>As with the corresponding functions, there are two versions of each 
statement, and the dollar sign distinguishes between the versions. If you don't specify the trailing dollar sign, you must enter the <I>dateExpression</I> as an unambiguous date value, 
and the <I>dateExpression</I> must be a string or date data type. All 
of the following set the computer's current date to July 9, 1998:

<BR>

<PRE>

<FONT COLOR="#000080">Date = 7/9/1997

Date = 07/9/97

Date = July 9, 1997

Date = Jul 9, 1997

Date = 9-Jul-1997

Date = 9 July 1997

Date = 9 July 97</FONT></PRE>

<P>The 
<I>dateExpression</I> must contain a valid date between January 1, 1980 and December 31, 2099, or Visual Basic generates an error.

<BR>

<P>If you do specify the trailing dollar sign (as in Date$), you can enter the <I>dateExpression</I> only in the 
following formats:

<BR>

<PRE>

<FONT COLOR="#000080">Date$ = 07-9-97

Date$ = 7-9-1998

Date$ = 7/9/97

Date$ = 7/9/1997</FONT></PRE>

<P>Owing to the many date formats, Visual Basic recognizes just about any way that you're used to specifying the date.


<BR>

<P>If you don't specify the trailing dollar sign, you can enter the <I>timeExpression</I> as either a 12-hour clock or a 24-hour clock with quotation marks, as follows:

<BR>

<BR>

<PRE>

<FONT COLOR="#000080">Time = &quot;7:48 PM&quot;</FONT></PRE>


<P>or

<BR>

<BR>

<PRE>

<FONT COLOR="#000080">Time = &quot;19:48&quot;</FONT></PRE>

<P>If you do specify the trailing dollar sign (as in Time$), you can enter the <I>timeExpression</I> in any of these formats:

<BR>

<PRE>

<FONT COLOR="#000080">hh


hh:mm

hh:mm:ss</FONT></PRE>

<P>You must use a 24-hour clock value when using <I>Time$</I>.

<BR>

<BLOCKQUOTE>

<BLOCKQUOTE>

<HR ALIGN=CENTER>

<BR>

<NOTE><B>Tip: </B>Using these Time$ formats, you change only what you want to change. If your time zone 
has just turned to daylight savings time, for example, you can change just the hour.</NOTE>

<BR>

<HR ALIGN=CENTER>

</BLOCKQUOTE></BLOCKQUOTE>

<P><FONT COLOR="#FF8000"><B><I>Stop and Type: </I></B></FONT>Listing 14.2 contains a section of code that 
enables the user to change both the date and time.

<BR>

<P><FONT COLOR="#FF8000"><B><I>Review: </I></B></FONT>The Date, Date$, Time, and Time$ statements enable you to change the computer's internal date and time settings. Those settings remain in effect 
until you or the user changes them again.

<BR>

<P>

<FONT COLOR="#000080"><B>Listing 14.2. Letting the user change the date and time.</B></FONT>

<BR>

<PRE>

<FONT COLOR="#000080">1: Dim newDate As Variant

2: Dim newTime As Variant

3: MsgBox &quot;The 
current date is &quot; &amp; Date$ ' Calls function

4: newDate = InputBox(&quot;What do you want to set the date to?&quot;)

5: If IsDate(newDate) Then

6: Date$ = newDate

7: End If ' Don't do anything if a good date isn't entered

8: MsgBox &quot;The 
date is now &quot; &amp; Date$

9: MsgBox &quot;The current time is &quot; &amp; Time$ ' Calls function

10: newTime = InputBox(&quot;What do you want to set the time to?&quot;)

11: If IsDate(newTime) Then

12: Time$ = newTime

13: End If ' Don't do 
anything if a good time isn't entered

14: MsgBox &quot;The time is now &quot; &amp; Time$</FONT></PRE>

<P><FONT COLOR="#FF8000"><B><I>Analysis: </I></B></FONT>After defining two variant variables in lines 1 and 2 to hold the date and time values entered 
by the user, the program displays the date in line 3 and asks the user to change the date in line 4. Line 
5 uses the IsDate() function, which you learned about in the previous unit, to check that the user entered a proper date value. If the user didn't 
enter a valid date, the program skips line 6 and displays the current set date without change in line 8.

<BR>

<BLOCKQUOTE>

<BLOCKQUOTE>

<HR ALIGN=CENTER>

<BR>

<NOTE><B>Note: </B>Visual Basic won't allow <I>any</I> invalid date to slip through. If the 
user were to enter 2-30-96, the IsDate() function in line 5 would know that February doesn't have 30 days and would not consider the date to be valid.</NOTE>

<BR>

<HR ALIGN=CENTER>

</BLOCKQUOTE></BLOCKQUOTE>

<P>Lines 9 through 14 perform the same 
routine for the time.

<BR>

<BR>

<A NAME="E68E107"></A>

<H3 ALIGN=CENTER>

<CENTER>

<FONT SIZE=5 COLOR="#FF0000"><B>How Much Time Has Passed?</B></FONT></CENTER></H3>

<BR>

<P><FONT COLOR="#FF8000"><B><I>Concept: </I></B></FONT>Visual Basic includes a 
Timer() function that enables you to compute the elapsed time between two time periods. Using Timer(), you can find out how many seconds have elapsed since midnight.

<BR>

<P>The Timer() function returns the number of seconds that have elapsed since your 
computer's clock was last midnight. Timer() requires no arguments; hence, Visual Basic removes Timer()'s parentheses if you type them, but this book uses the parentheses, as 
is the standard, to remind you that Timer() is a function and not a command.


<BR>

<P>Assuming that it's 11:40 p.m., the following statement stores 85206.9 in the variable named TMid:

<BR>

<BR>

<PRE>

<FONT COLOR="#000080">TMid = Timer()</FONT></PRE>

<P>Timer() returns a single-precision value. If you divide 85206.9 by 60, 
you'll get the number of minutes since midnight, and if you divide by another 60, you'll get the number of hours (a few less than 24) since midnight.

<BR>

<BLOCKQUOTE>

<BLOCKQUOTE>

<HR ALIGN=CENTER>

<BR>

<NOTE><B>Warning: </B>The Timer() function 
differs greatly from the timer control on the toolbox that you'll learn about in Lesson 10, &quot;Making Programs Real World.&quot;</NOTE>

<BR>

<HR ALIGN=CENTER>

</BLOCKQUOTE></BLOCKQUOTE>

<P>How can determining the number of seconds since midnight 
help you as a Visual Basic programmer? Timer() is perfect for timing an event. Suppose that you want to ask the user a question and determine how long it takes the user to answer. First, save the 
value of Timer() before you ask the user; then, subtract 
that value from the value of Timer <I>after</I> he or she answers. The difference of the two Timer() values is the number of seconds that the user took to answer.

<BR>

<P><FONT COLOR="#FF8000"><B><I>Stop and Type: </I></B></FONT>Listing 14.3 contains 
code that asks the user for a math answer and times how long the user takes to respond.

<BR>

<P><FONT COLOR="#FF8000"><B><I>Review: </I></B></FONT>The moment that your program executes the Timer() function, Visual Basic checks the computer's internal 
clock and returns the number of seconds since midnight.

<BR>

<P>

<FONT COLOR="#000080"><B>Listing 14.3. Test the user's math speed.</B></FONT>

<BR>

<PRE>

<FONT COLOR="#000080">1: Dim Before, After, timeDiff As Variant

2: Dim mathAns As String

3: 
Before = Timer ' Save the time before asking

4: Do

5: mathAns = InputBox(&quot;What is 150 + 235?&quot;, &quot;Hurry!&quot;)

6: Loop Until Val(mathAns) = 285

7: After = Timer ' Save the time after answering

8: ' The difference between the time values


9: ' is how many seconds the user took to answer

10: timeDiff = After - Before

11: MsgBox &quot;That took you only&quot; + Str$(timeDiff) &amp; &quot; seconds!&quot;</FONT></PRE>

<P><FONT COLOR="#FF8000"><B><I>Output: </I></B></FONT>Figure 14.1 shows 
the input box that asks the user for the answer.

<BR>

<P><B> <A HREF="14vel01.gif">Figure 14.1. Test the user's math ability!</A></B>

<BR>

<P><FONT COLOR="#FF8000"><B><I>Analysis: </I></B></FONT>Line 3 saves the Timer() setting right before the input 
box that requests the user's answer appears. The Do loop in lines 4 through 6 then keeps asking the user for the answer until the user enters 
the appropriate response of 285. As soon as the user enters the correct response, line 7 stores the Timer() value 
at that point. Line 10 then computes the difference of the two values to determine the number of seconds that the response took.

<BR>

<BR>

<A NAME="E68E108"></A>

<H3 ALIGN=CENTER>

<CENTER>

<FONT SIZE=5 COLOR="#FF0000"><B>Serial Dates and 
Times</B></FONT></CENTER></H3>

<BR>

<P><FONT COLOR="#FF8000"><B><I>Concept: </I></B></FONT>Visual Basic supports the storage of serial date and time values. A serial value is a number stored as a VarType 7 (the Date data type, as you learned in the 
previous unit). The serial number allows 
you to break up dates into their day, month, and year values and allows you to break up times into their hour, minute, and second values.

<BR>

<BLOCKQUOTE>

<BLOCKQUOTE>

<HR ALIGN=CENTER>

<BR>


<NOTE><I>Definition: </I>A <I>byte</I> is one character of memory.</NOTE>

<BR>

<HR ALIGN=CENTER>

</BLOCKQUOTE></BLOCKQUOTE>

<P>All the date and time functions that you've seen in this unit have been working with serial values. A serial value is the 
internal representation of a date or time, stored in a VarType 7 or a Variant data type. Visual Basic actually stores these values 
as double-precision values to ensure the full storage of time and date so that accurate date arithmetic can be performed. 
Visual Basic uses eight bytes memory of storage for double-precision values, which is enough room to hold the combined time and date 
value.

<BR>

<P>The following functions are explained in this section:

<BR>

<UL>

<LI>DateSerial()

<BR>

<BR>


<LI>DateValue()

<BR>

<BR>

<LI>TimeSerial()

<BR>

<BR>

<LI>TimeValue()

<BR>

<BR>

<LI>Day()

<BR>

<BR>

<LI>Month()

<BR>

<BR>

<LI>Year()

<BR>

<BR>

</UL>

<P>All of these functions convert their arguments to serial date values. You then can use 
those serial date values to manage and modify specific parts of date and time values. Here is the format of the DateSerial() function:

<BR>

<BR>

<PRE>

<FONT COLOR="#000080">DateSerial(<I>Year</I>, <I>Month</I>, <I>Day</I>)</FONT></PRE>

<P>where 
<I>Year</I> is an integer year number (either 00 to 99 for 1900 to 1999, or a four-digit year number) or expression, <I>Month</I> is an integer month number (1 to 12) or expression, and <I>Day</I> is an integer day number (1 to 31) or expression. 
If you 
include an expression for any of the integer arguments, you specify the number of years, months, or days from or since a value.

<BR>

<P>These two DateSerial() function calls return the same value:

<BR>

<BR>

<PRE>

<FONT COLOR="#000080">d = 
DateSerial(1990, 10, 6)</FONT></PRE>

<P>and

<BR>

<BR>

<PRE>

<FONT COLOR="#000080">d = DateSerial(1980+10, 12-2, 1+5)</FONT></PRE>

<P>The DateSerial() function ensures that your date arguments don't go out of bounds. For example, 1992 was a leap year, 
so February of 1992 had 29 days. However, the following DateSerial() function call appears to produce an invalid date because February, 
even in leap years, can't have 30 days:

<BR>

<BR>

<PRE>

<FONT COLOR="#000080">d = DateSerial(1992, 2, 
29+1)</FONT></PRE>

<P>Nothing is wrong with this function call because DateSerial() adjusts the date evaluated so that d holds March 1, 1992, one day following the last day of February.

<BR>

<P>The DateValue() function is similar to DateSerial() except 
that the DateValue() function accepts a string argument, as the following format shows:

<BR>

<BR>

<PRE>

<FONT COLOR="#000080">DateValue(stringDateExpression)</FONT></PRE>

<P>The <I>stringDateExpression</I> must be a string that Visual Basic recognizes 
as a date (such as those for the Date$ statement described earlier in this chapter and valid dates entered by the user). If you ask the user to enter a date one date part 
value at a time (asking for the year, then the month, and then the day separately), 
you can use DateSerial() to convert those values to an internal serial date. If you ask the user to enter a full date (that you capture into a string variable) such as 
<B>July 16, 1996</B>, DateSerial() converts that string to the internal serial format 
needed for dates.

<BR>

<P>The TimeSerial() and TimeValue() functions work the same as their DateSerial() and DateValue() counterparts. If you have three individual values for a time of day, TimeSerial() converts those values to an internal time format 
(the Variant or VarType 7). 
Here is the format of TimeSerial():

<BR>

<BR>

<PRE>

<FONT COLOR="#000080">TimeSerial(<I>Hour</I>, <I>Minute</I>, <I>Second</I>)</FONT></PRE>

<P>The TimeSerial() function accepts expressions for any of its arguments and 
adjusts those expressions as needed, just as the DateSerial() function does.

<BR>

<P>If you have a string with a time value (maybe the user entered the time), the TimeValue() function converts that string to a time value with this format:

<BR>

<BR>


<PRE>

<FONT COLOR="#000080">TimeValue(stringTimeExpression)</FONT></PRE>

<P>The Day(), Month(), and Year() functions convert their date arguments (of Variant or the VarType 7 data type) to a day number, month number, or year number. These three functions 
are simple. Here are their formats:

<BR>

<PRE>

<FONT COLOR="#000080">Day(DateArgument)

Month(DateArgument)

Year(DateArgument)</FONT></PRE>

<P>You often pass today's date (found with Now()) to the Day(), Month(), and Year() functions as shown here:


<BR>

<PRE>

<FONT COLOR="#000080">d = Day(Now())

m = Month(Now())

y = Year(Now())</FONT></PRE>

<P>The current date's day of week number, month number, and year are stored in the three variables d, m, and y, respectively.

<BR>

<P><FONT 
COLOR="#FF8000"><B><I>Stop and Type: </I></B></FONT>Listing 14.4 contains a short section of code that asks the user for a date, uses the IsDate() function to ensure that the date is proper, and then uses the Month(), Day(), and Year() functions 
described 
here to break the date into its individual parts.

<BR>

<P><FONT COLOR="#FF8000"><B><I>Review: </I></B></FONT>The serial date value that Visual Basic uses for all date and time values enable you to use various functions to break apart and piece back 
together various date and time combinations.

<BR>

<P>

<FONT COLOR="#000080"><B>Listing 14.4. Working with serial date values.</B></FONT>

<BR>

<PRE>

<FONT COLOR="#000080">1: Dim UserDate As Variant

2: Dim DStr As String

3:

4: ' Ask the user for a 
date

5: Do

6: UserDate = InputBox(&quot;What's the date?&quot;)

7: Loop While Not IsDate(UserDate)

8:

9: DStr = &quot;Month: &quot; &amp; Month(UserDate)

10: DStr = DStr + &quot;, Day: &quot; &amp; Day(UserDate)

11: DStr = DStr + &quot;, Year: 
&quot; &amp; Year(UserDate)

12:

13: ' Display the date broken down

14: MsgBox DStr</FONT></PRE>

<P><FONT COLOR="#FF8000"><B><I>Output: </I></B></FONT>Assuming that the user types <B>1/2/98</B> for the date in response to this code's InputBox() function 
call, Figure 14.2 contains the message box that shows the various parts of the dates.

<BR>

<P><B> <A HREF="14vel02.gif">Figure 14.2. Through functions, you can break up a date.</A></B>

<BR>

<P><FONT COLOR="#FF8000"><B><I>Review: </I></B></FONT>Lines 1 
and 2 define two variables needed by the rest of the program. The variant UserDate variable will hold a date value entered by the user, and the DStr variable will hold a message box string.

<BR>

<P>Lines 5 though 7 loop until the user enters an 
appropriate date value. The loop continues as long as IsDate() reveals that the user's date value is invalid. The loop quits asking the user for a date when line 7 determines that the date is valid.

<BR>

<P>Lines 9 through 11 build a fairly complicated 
string displayed by line 14's message box function. The lines concatenate several strings together, building upon the DStr variable. The Month(), Day(), and Year() functions all pick off the month, day, and 
year values from the date entered by the user to 
display the different values inside the message box, as shown in Figure 14.2.

<BR>

<BR>

<A NAME="E68E109"></A>

<H3 ALIGN=CENTER>

<CENTER>

<FONT SIZE=5 COLOR="#FF0000"><B>Formatting with </B><B>Format()</B></FONT></CENTER></H3>

<BR>

<BLOCKQUOTE>


<BLOCKQUOTE>

<HR ALIGN=CENTER>

<BR>

<NOTE><I>Definition: </I>A <I>logical</I> value is the result of a relation or a True or False control value.</NOTE>

<BR>

<HR ALIGN=CENTER>

</BLOCKQUOTE></BLOCKQUOTE>

<P><FONT COLOR="#FF8000"><B><I>Concept: 
</I></B></FONT>The Format() function formats numeric and logical values so that you can display that data in the exact format that you require. Until this section, you couldn't ensure that currency values displayed 
to two decimal places, but Format() 
enables you to format currency and all other numbers the way you need.

<BR>

<P>Visual Basic can't read your mind, so it doesn't know how you want numbers displayed in your applications. Although Visual Basic sometimes displays none, one, or two decimal 
places for currency values, you'll almost always want those currency values 
displayed to two decimal places.

<BR>

<BLOCKQUOTE>

<BLOCKQUOTE>

<HR ALIGN=CENTER>

<BR>

<NOTE><B>Note: </B>As with the date and time functions, if you've set your computer's 
international settings to a country other than the U.S.'s (as done for this book), your formatted currency values may differ from those shown here. Some countries swap 
the use of commas and decimal places from those used in the U.S.</NOTE>

<BR>

<HR 
ALIGN=CENTER>

</BLOCKQUOTE></BLOCKQUOTE>

<P>The two Format() functions are Format$() and Format() and they differ only in their return data types. Format$() returns a string and Format() returns a variant data type. Here is the format of Format():

<BR>


<BR>

<PRE>

<FONT COLOR="#000080">Format$(Expression, FormatStr)</FONT></PRE>

<P>Often, you'll assign the result of the Format$() function to other variables and controls. Generally, you'll perform all needed calculations on numeric values before 
formatting those values. After you've performed the final calculations, you'll then 
format the values to string (or variant) data types and display the resulting answers as needed.

<BR>

<P>The <I>Expression</I> can be a variable, expression, or 
constant. The <I>FormatStr</I> must be a value from Table 14.1.

<BR>

<BLOCKQUOTE>

<BLOCKQUOTE>

<HR ALIGN=CENTER>

<BR>

<NOTE><B>Note: </B>Visual Basic contains many format strings in addition to the ones shown in Table 14.1. You can even develop your 
own <I>programmer-defined format strings</I>, although this book doesn't go into those.</NOTE>

<BR>

<HR ALIGN=CENTER>

</BLOCKQUOTE></BLOCKQUOTE>

<BLOCKQUOTE>

<BLOCKQUOTE>

<HR ALIGN=CENTER>

<BR>

<NOTE><I>Definition: </I>A <I>thousands separator</I> 
is a decimal point or comma inside numbers over 999.</NOTE>

<BR>

<HR ALIGN=CENTER>

</BLOCKQUOTE></BLOCKQUOTE>

<BR>

<P ALIGN=CENTER>

<CENTER>

<FONT COLOR="#000080"><B>Table 14.1. The fixed </B><FONT COLOR="#FF8000"><B><I>FormatStr</I></B></FONT><B> 
values.</B></FONT></CENTER>

<BR>



<TABLE  BORDERCOLOR=#000040 BORDER=1 CELLSPACING=2 WIDTH="100%" CELLPADDING=2 >

<TR>

<TD VALIGN=top  BGCOLOR=#80FFFF ><FONT COLOR=#000080>

<I>FormatStr</I>

</FONT>

<TD VALIGN=top  BGCOLOR=#80FFFF ><FONT 
COLOR=#000080>

<I>Description</I></FONT>

<TR>

<TD VALIGN=top  BGCOLOR=#80FFFF ><FONT COLOR=#000080>

&quot;Currency&quot;

</FONT>

<TD VALIGN=top  BGCOLOR=#80FFFF ><FONT COLOR=#000080>

Ensures that a dollar sign, $, appears before the formatted value 
followed by a thousands separator (the country setting determines whether the thousands separator is a comma or a decimal), and that two decimal places show. Visual Basic displays negative 
values in parentheses.</FONT>

<TR>

<TD VALIGN=top  
BGCOLOR=#80FFFF ><FONT COLOR=#000080>

&quot;Fixed&quot;

</FONT>

<TD VALIGN=top  BGCOLOR=#80FFFF ><FONT COLOR=#000080>

Displays at least one digit before and two digits following the decimal point with no thousands separator.</FONT>

<TR>

<TD 
VALIGN=top  BGCOLOR=#80FFFF ><FONT COLOR=#000080>

&quot;General Number&quot;

</FONT>

<TD VALIGN=top  BGCOLOR=#80FFFF ><FONT COLOR=#000080>

Displays the number with no thousands separator.</FONT>

<TR>

<TD VALIGN=top  BGCOLOR=#80FFFF ><FONT 
COLOR=#000080>

&quot;Medium Time&quot;

</FONT>

<TD VALIGN=top  BGCOLOR=#80FFFF ><FONT COLOR=#000080>

Displays the time in 12-hour format and the AM or PM indicator.</FONT>

<TR>

<TD VALIGN=top  BGCOLOR=#80FFFF ><FONT COLOR=#000080>

&quot;On/Off&quot;


</FONT>

<TD VALIGN=top  BGCOLOR=#80FFFF ><FONT COLOR=#000080>

Displays On if the value contains a nonzero or True value and displays Off if the value contains zero or a False value. These values correspond to a special internal representation of computer 
values called <I>binary numbers</I>.</FONT>

<TR>

<TD VALIGN=top  BGCOLOR=#80FFFF ><FONT COLOR=#000080>

&quot;Percent&quot;

</FONT>

<TD VALIGN=top  BGCOLOR=#80FFFF ><FONT COLOR=#000080>

Displays the number, multiplied by 100, and adds the percent sign 
to the right of the number.</FONT>

<TR>

<TD VALIGN=top  BGCOLOR=#80FFFF ><FONT COLOR=#000080>

&quot;Scientific&quot;

</FONT>

<TD VALIGN=top  BGCOLOR=#80FFFF ><FONT COLOR=#000080>

Displays numbers in scientific notation.</FONT>

<TR>

<TD VALIGN=top  
BGCOLOR=#80FFFF ><FONT COLOR=#000080>

&quot;Short Time&quot;

</FONT>

<TD VALIGN=top  BGCOLOR=#80FFFF ><FONT COLOR=#000080>

Displays the time in 24-hour format.</FONT>

<TR>

<TD VALIGN=top  BGCOLOR=#80FFFF ><FONT COLOR=#000080>

&quot;True/False&quot;


</FONT>

<TD VALIGN=top  BGCOLOR=#80FFFF ><FONT COLOR=#000080>

Displays True if the value contains a nonzero or True value, and displays False if the value contains zero or a False value.</FONT>

<TR>

<TD VALIGN=top  BGCOLOR=#80FFFF ><FONT COLOR=#000080>


&quot;Yes/No&quot;

</FONT>

<TD VALIGN=top  BGCOLOR=#80FFFF ><FONT COLOR=#000080>

Displays Yes if the value contains a nonzero or True value, and displays No if the value contains zero or a False value.</FONT>

</TABLE><BLOCKQUOTE>

<BLOCKQUOTE>

<HR 
ALIGN=CENTER>

<BR>

<NOTE>You'll Rarely Need Format Codes: If the predefined formats from Table 14.1 don't match the format you need, you can define your own using special formatting codes. This unit would be at least twice as long as it is if all the 
programmer-defined 
formats were shown here. The good news is that, when you do define your own formats, you'll almost always use just a combination of the pound sign and zeros to format the values you need.

<BR>Each pound sign in the format indicates 
where a digit goes, and the zero indicates that you want either leading or trailing zeros. The following assignment displays the value of Weight to three decimal places:

<BR>lblMeas.Caption = Format$(Weight, &quot;######.000&quot;)

<BR>You could also 
request that <I>no</I> decimal point should appear by formatting a fractional value such as Weight, and Visual Basic will round the number as needed to fit the target format. The following assignment displays Weight with no decimal 
places shown on the 
screen:

<BR>lblMeas.Caption = Format$(Weight, &quot;######&quot;)</NOTE>

<BR>

<HR ALIGN=CENTER>

</BLOCKQUOTE></BLOCKQUOTE>

<P><FONT COLOR="#FF8000"><B><I>Stop and Type: </I></B></FONT>Listing 14.5 contains a series of formatting function calls that 
convert numeric and logical values to formatted variant data types that you can display.

<BR>

<P><FONT COLOR="#FF8000"><B><I>Review: </I></B></FONT>There are two formatting functions. Format$() returns a string and Format() returns a variant value. The 
Format$() function formats values so that the values look the way you want them to look. The 
predefined format strings make it easy to display numbers and logical values in the format that you require.

<BR>

<P>

<FONT COLOR="#000080"><B>Listing 14.5. 
Formatting numeric and logical values.</B></FONT>

<BR>

<PRE>

<FONT COLOR="#000080">1: Dim FormValue As String

2:

3: ' Change 12345.678 to $12,345.68

4: FormValue1 = Format$(12345.678, &quot;Currency&quot;)

5:

6: ' Change 12345678 to 12345.68

7: 
FormValue2 = Format$(12345.678, &quot;Fixes&quot;)

8:

9: ' Change .52 to 52.00%

10: FormValue3 = Format$(.52, &quot;Percent&quot;)

11:

12: ' Change 1 to Yes

13: FormValue4 = Format$(1, &quot;Yes/No&quot;)

14:

15: ' Change 0 to No

16: FormValue5 = 
Format$(0, &quot;Yes/No&quot;)

17:

18: ' Change 1 to True

19: FormValue6 = Format$(1, &quot;True/False&quot;)

20:

21: ' Change 0 to False

22: FormValue7 = Format$(0, &quot;True/False&quot;)</FONT></PRE>

<P><FONT COLOR="#FF8000"><B><I>Analysis: 
</I></B></FONT>Line 4 converts the decimal single-precision number to a formatted currency string. If you were to display FormValue1 in a label's caption, the caption would show $12,345.68. Line 7 formats the same 
number for a noncurrency value with two 
decimal places. Line 10 changes a fractional number to its corresponding decimal percentage value and adds the percent sign after the formatted percent to show the percentage format. Line 13 changes the nonzero value 
of 1 to Yes. You can format any 
nonzero or relational result to a Yes, No, True, or False value, as shown in the program's remaining lines, so the values appear exactly the way you want them to look.

<BR>

<BR>

<A NAME="E68E110"></A>

<H3 ALIGN=CENTER>

<CENTER>

<FONT SIZE=5 
COLOR="#FF0000"><B>Homework</B></FONT></CENTER></H3>

<BR>

<BR>

<A NAME="E69E94"></A>

<H4 ALIGN=CENTER>

<CENTER>

<FONT SIZE=4 COLOR="#FF0000"><B>General Knowledge</B></FONT></CENTER></H4>

<BR>

<OL>

<LI>True or false: Now() returns information for 
<I>both</I> the current date and time.

<BR>

<BR>

<LI>Where do the time and date functions get their values?

<BR>

<BR>

<LI>What is the difference between 12-hour time and 24-hour time?

<BR>

<BR>

<LI>True or false: 9:23 can be either 12-hour or 
24-hour time.

<BR>

<BR>

<LI>True or false: 9:23 a.m. can be either 12-hour or 24-hour time.

<BR>

<BR>

<LI>What is the 24-hour time value for 7:54 a.m.?

<BR>

<BR>

<LI>What is the difference between the Date$() and Date() functions?

<BR>

<BR>


<LI>True or false: Visual Basic supports both a Now() and a Now$() function.

<BR>

<BR>

<LI>Does Now() return its time value using a 12-hour or 24-hour clock?

<BR>

<BR>

<LI>True or false: The time and date functions ignore your international time and 
date settings.

<BR>

<BR>

<LI>True or false: Date() and Time() set your computer's date and time.

<BR>

<BR>

<LI>Which function, Date() or Date$(), should you use if you think that your computer program will still be in use in the year 2000?

<BR>


<BR>

<LI>Describe the purpose of the Timer() function.

<BR>

<BR>

<LI>What is a <I>byte</I>?

<BR>

<BR>

<LI>What data type does a serial date value require?

<BR>

<BR>

<LI>How does the TimeValue() function relate to the Hour(), Minute(), and 
Second() functions?

<BR>

<BR>

<LI>What is a <I>logical value</I>?

<BR>

<BR>

<LI>What functions format numeric output for you?

<BR>

<BR>

<LI>What is the difference between Format() and Format$()?

<BR>

<BR>

<LI>What is a <I>thousands 
separator</I>?

<BR>

<BR>

<LI>What is the difference between the &quot;Fixed&quot; and &quot;Currency&quot; fixed-format strings?

<BR>

<BR>

</OL>

<BR>

<A NAME="E69E95"></A>

<H4 ALIGN=CENTER>

<CENTER>

<FONT SIZE=4 COLOR="#FF0000"><B>Find the 
Bug</B></FONT></CENTER></H4>

<BR>

<OL>

<LI>Consider the user's input shown in Figure 14.3. The program is setting a time with this input box request:

<BR>

<BR>

<LI>  Time$ = InputBox(&quot;What do you want to set the time to?&quot;)

<BR>

<BR>

<LI>  
Why do you suppose that Visual Basic indicates (as soon as the user presses OK in the input box) that an error occurred?

<BR>

<BR>

</OL>

<P><B> <A HREF="14vel03.gif">Figure 14.3. Something's going to be wrong here.</A></B>

<BR>

<BR>

<A 
NAME="E69E96"></A>

<H4 ALIGN=CENTER>

<CENTER>

<FONT SIZE=4 COLOR="#FF0000"><B>Extra Credit</B></FONT></CENTER></H4>

<BR>

<P>Write code that asks the user for the time that she or he clocked into work and then asks for the time that she or he clocked 
out. Display in three labels the total amount of seconds worked, the total number of minutes worked, and the total number of 
hours worked.

<BR>

<P ALIGN=LEFT>

<A HREF="vel13.htm" TARGET="_self"><IMG SRC="purprev.gif" WIDTH = 32 HEIGHT = 32 BORDER = 0 
ALT="Previous Page"></A>

<A HREF="#I0" TARGET="_self"><IMG SRC="purtop.gif" WIDTH = 32 HEIGHT = 32 BORDER = 0 ALT="Page Top"></A>

<A HREF="index.htm" TARGET="_self"><IMG SRC="purtoc.gif" WIDTH = 32 HEIGHT = 32 BORDER = 0 ALT="TOC"></A>

<A 
HREF="velp07.htm" TARGET="_self"><IMG SRC="purnext.gif" WIDTH = 32 HEIGHT = 32 BORDER = 0 ALT="Next Page"></A>


</BODY></HTML>








