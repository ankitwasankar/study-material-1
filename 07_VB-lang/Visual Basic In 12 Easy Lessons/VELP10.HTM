<HTML>

<HEAD>

<TITLE>Visual Basic in 12 Easy Lessons velp10.htm </TITLE>

<LINK REL="ToC" HREF="index.htm">

<LINK REL="Index" HREF="htindex.htm">

<LINK REL="Next" HREF="vel21.htm">

<LINK REL="Previous" HREF="vel20.htm"></HEAD>

<BODY BGCOLOR="#FFFFFF" 
TEXT="#000000" LINK="#0000FF" VLINK="#800080">

<A NAME="I0"></A>

<H2>Visual Basic in 12 Easy Lessons velp10.htm</H2>

<P ALIGN=LEFT>

<A HREF="vel20.htm" TARGET="_self"><IMG SRC="purprev.gif" WIDTH = 32 HEIGHT = 32 BORDER = 0 ALT="Previous Page"></A>

<A 
HREF="index.htm" TARGET="_self"><IMG SRC="purtoc.gif" WIDTH = 32 HEIGHT = 32 BORDER = 0 ALT="TOC"></A>

<A HREF="vel21.htm" TARGET="_self"><IMG SRC="purnext.gif" WIDTH = 32 HEIGHT = 32 BORDER = 0 ALT="Next Page"></A>


<HR ALIGN=CENTER>

<P>

<UL>

<UL>

<UL>

<LI>

<A HREF="#E68E154" >Stop &amp; Type</A>

<UL>

<LI>

<A HREF="#E69E138" >The Program's Description</A>

<LI>

<A 
HREF="#E69E139" >Needed: Program Randomness</A></UL>

<LI>

<A HREF="#E68E155" >The Help Menu</A>

<UL>

<LI>

<A HREF="#E69E140" >Descriptions</A>

<LI>

<A HREF="#E69E141" >Studying the Rest of the Code</A>

<LI>

<A HREF="#E69E142" >Descriptions</A>


<LI>

<A HREF="#E69E143" >Close the Application</A></UL></UL></UL></UL>

<HR ALIGN=CENTER>

<A NAME="E66E30"></A>

<H1 ALIGN=CENTER>

<CENTER>

<FONT SIZE=6 COLOR="#FF0000"><B>Project 10</B></FONT></CENTER></H1>

<BR>

<A NAME="E67E33"></A>

<H2 
ALIGN=CENTER>

<CENTER>

<FONT SIZE=6 COLOR="#FF0000"><B>Making Programs &quot;Real World&quot;</B></FONT></CENTER></H2>

<BR>

<BR>

<A NAME="E68E154"></A>

<H3 ALIGN=CENTER>

<CENTER>

<FONT SIZE=5 COLOR="#FF0000"><B>Stop &amp; 
Type</B></FONT></CENTER></H3>

<BR>

<P>This lesson taught you how to design and add menus to your Visual Basic applications. The Menu Design window enables you to specify the property values for menu bar commands and pull-down menu items. By using the 
Menu Design window, you can add shortcut 
access keystrokes and menu separator bars, and specify special menu features such as checkmarked menu items. Generating program code that responds to menu events is no more difficult than writing event procedures 
that respond to command button clicks.

<BR>

<P>In addition to creating menus, you also learned how to work with the timer control. As you saw in the previous unit, the timer control is a control that triggers its own events. Depending on the value of the 
timer control's Interval property, the timer 
control generates an event every few milliseconds. The code that you add to the timer's event procedure determines how to handle the event. You can set alarms and perform certain screen and control update 
actions every time that the timer generates an 
event, if you want.

<BR>

<P>In this lesson, you saw the following:

<BR>

<UL>

<LI>How to create menus for your Visual Basic applications

<BR>

<BR>

<LI>Why the Menu Design window is so much more 
appropriate for specifying menu property values than the Property window

<BR>

<BR>

<LI>How to right justify menu items if you want to change the menu bar a bit

<BR>

<BR>

<LI>What the timer control does to generate events

<BR>

<BR>

<LI>When to 
respond to a timer's event and when to ignore the event

<BR>

<BR>

</UL>

<BR>

<A NAME="E69E138"></A>

<H4 ALIGN=CENTER>

<CENTER>

<FONT SIZE=4 COLOR="#FF0000"><B>The Program's Description</B></FONT></CENTER></H4>

<BR>

<P>Figure P10.1 shows the 
PROJEC10.MAK opening Form window. This project presents a simple number- and letter-guessing that contains a menu bar with three items. The program contains three event procedures that are tied to the menu's commands.

<BR>

<P><B> <A 
HREF="p10vel01.gif">Figure P10.1. Project 10's application begins with a simple form.</A></B>

<BR>

<P>The Menu Design window is nothing more than an advanced Property window for the menu. The menu events to which your code will respond are click events. 
Therefore, there is nothing really new with the code used in this program. The program generates a 
random number or letter when the user selects File New Game. If the Option Use Alphabetic Letters menu option is checked, the program will generate a random 
letter from A through Z. If the Option Use Alphabetic Letters menu option isn't checked, the 
program will generate a random number from 1 to 100. A small label at the bottom of the guess screen reminds the user to guess a number or letter when the 
guessing begins.

<BR>

<BR>

<A NAME="E69E139"></A>

<H4 ALIGN=CENTER>

<CENTER>

<FONT SIZE=4 COLOR="#FF0000"><B>Needed: Program Randomness</B></FONT></CENTER></H4>

<BR>

<P>Because there is nothing new required for code that responds to menu events, 
this lesson's project introduces a new command and function to generate the random value and make the project more interesting. The random number generator is the only part of 
Visual Basic's powerful language that does <I>not</I> do the same thing every 
time you execute the same code.

<BR>

<P>The Rnd() function, when used without an argument, generates a random number between 0 and 1. If the user wants to guess a number, however, the program needs a random number from 1 to 100, and if the user wants to 
guess a letter, the program needs a 
random number from 65 to 90 to represent Chr$() arguments for the letters A through Z. The program uses the following formula to generate a random number from a low value to a high value:

<BR>

<BR>

<PRE>

<FONT 
COLOR="#000080">Int((LowValue + HighValue + 1) * Rnd + LowValue</FONT></PRE>

<P>Therefore, here is the assignment statement that generates a random number from 65 to 90, and stores the character value of that generated ASCII number in a variable named 
Letter:

<BR>

<BR>

<PRE>

<FONT COLOR="#000080">Letter = Chr$(Int(26) * Rnd + 65) ' A through Z</FONT></PRE>

<P>There is only one problem with the Rnd function. The function generates the same set of random values every time you run a program that uses 
Rnd, unless you first execute the following statement:

<BR>

<BR>

<PRE>

<FONT COLOR="#000080">Randomize Timer</FONT></PRE>

<P>The Randomize command requires a single value. That value <I>seeds</I> the random number generator by providing a value for 
the first generated random number. If you were to use the same seed value, Rnd wouldn't change from program run to program run. A 
guessing game that always produced the same set of values to guess wouldn't remain interesting. By using Timer to seed the 
internal random number generator, you can ensure that Randomize rarely works with the same value twice, because the randomizing seed 
value is the internal clock setting at the time that the Randomize statement executes.

<BR>

<BR>

<A NAME="E68E155"></A>


<H3 ALIGN=CENTER>

<CENTER>

<FONT SIZE=5 COLOR="#FF0000"><B>The Help Menu</B></FONT></CENTER></H3>

<BR>

<P>You'll notice that the Help menu is right justified. The Form_Load() event procedure concatenates a Chr$(8) backspace character to the menu bar's 
Help command. As you learned in <A HREF="vel19.htm">Unit 19</A>, the backspace character right justifies 
menu bar commands.

<BR>

<P>Figure P10.1 shows the help message and command button that appear when the user selects the Help command. The Help 
command's event procedure, shown in Listing P10.1, sets the Visible property of the command button and help label to True so that the 
user can see the help message. When the user clicks the command button, the cmdHelp_Click() event procedure (also shown 
in Listing P10.1) executes to hide the help label and command button.

<BR>

<P><B> <A HREF="p10vel02.gif">Figure P10.2. The Help menu command produces a program overview for the </B><B>user.</A></B>

<BR>

<P>

<FONT COLOR="#000080"><B>Listing P10.1. 
Respond to the Help command and turn off help when requested.</B></FONT>

<BR>

<PRE>

<FONT COLOR="#000080">1: Sub mnuHelp_Click ()

2: ' Show the help message and the help command button

3: lblHelp.Visible = True

4: cmdHelp.Visible = True

5: End Sub


6:

7: Sub cmdHelp_Click ()

8: ' Hide the help message and the help command button

9: lblHelp.Visible = False

10: cmdHelp.Visible = False

12: End Sub</FONT></PRE>

<BR>

<A NAME="E69E140"></A>

<H4 ALIGN=CENTER>

<CENTER>

<FONT SIZE=4 
COLOR="#FF0000"><B>Descriptions</B></FONT></CENTER></H4>

<BR>

<P>1: The code for the event procedure that responds to the Help menu bar command must be a click procedure.

<BR>

<P>2: A remark that explains the procedure.

<BR>

<P>3: Turn on the large 
label that appears in the center of the screen.

<BR>

<BLOCKQUOTE>

<BLOCKQUOTE>

<HR ALIGN=CENTER>

<BR>

<NOTE>3: The help is a label that normally remains invisible.</NOTE>

<BR>

<HR ALIGN=CENTER>

</BLOCKQUOTE></BLOCKQUOTE>

<P>4: Turn on the command 
button that the user can use to hide the help information.

<BR>

<P>5: Terminate the procedure.

<BR>

<P>6: A blank line separates the procedures.

<BR>

<P>7: The code for the event procedure that responds to the command button that turns off Help's 
information.

<BR>

<P>8: A remark that explains the procedure.

<BR>

<P>9: Turn off the large label that appears in the center of the screen.

<BR>

<P>10: Turn off the command button that the user can use to hide the help information.

<BR>

<P>11: 
Terminate the procedure.

<BR>

<BR>

<A NAME="E69E141"></A>

<H4 ALIGN=CENTER>

<CENTER>

<FONT SIZE=4 COLOR="#FF0000"><B>Studying the Rest of the Code</B></FONT></CENTER></H4>

<BR>

<P>Listing P10.2 contains the rest of the program, including the 
Form_Load() event procedure that right justifies the Help command and seeds the random number generator so that subsequent calls to Rnd will produce a different set of values between program 
runs. Figure P10.3 shows the running program during the user's 
guessing of a letter. Notice that a label appears at the bottom of the screen during the progress of the game that tells the user whether letters or numbers are to be guessed.

<BR>

<P><B> <A HREF="p10vel03.gif">Figure P10.3. The user must guess a letter 
from A to Z.</A></B>

<BR>

<P>

<FONT COLOR="#000080"><B>Listing P10.2. The code for the guessing-game project listing.</B></FONT>

<BR>

<PRE>

<FONT COLOR="#000080">1: Sub Form_Load ()

2: ' Begin with a number-guessing game

3: ' Turn off the checkmark 
from the

4: ' Options Use Alphabetic Characters menu

5: mnuOptionUseAlpha.Checked = False

6: ' Right-justify the Help menu command

7: mnuHelp.Caption = Chr$(8) + mnuHelp.Caption

8: ' Spin the internal randomizing wheel

9: Randomize Timer

10: End Sub


11:

12: Sub mnuFileExit_Click ()

13: End

14: End Sub

15:

16: Sub mnuFileNewGame_Click ()

17: ' Call appropriate subroutine procedure depending

18: ' on value of Option Use Alphabetic Characters

19:

20: ' Turn off opening label if it's still 
visible

21: If (lblOpening.Visible = True) Then

22: lblOpening.Visible = False

23: End If

24:

25: If (mnuOptionUseAlpha.Checked) Then

26: Call GuessLetter

27: Else

28: Call GuessNumber

29: End If

30: ' Turn back on opening label

31: 
lblOpening.Visible = True

32: End Sub

33:

34: Sub mnuOptionUseAlpha_Click ()

35: ' Reverse the state of the checkmark

36: mnuOptionUseAlpha.Checked = Not (mnuOptionUseAlpha.Checked)

37: End Sub

38:

39: Sub GuessNumber ()

40: ' User guesses a 
number

41: Dim Guess As Variant

42: Dim Number, GuessNum As Integer

43:

44: ' Update the instruction label

45: lblInstruct.Caption = &quot;Guess a number from 1 to 100&quot;

46: lblInstruct.Visible = True

47: ' Find value from 1 to 100

48: Number = 
Int(100 * Rnd + 1)

49:

50: Do

51: Guess = InputBox(&quot;What's your guess?&quot;, &quot;Guess&quot;)

52: If (Guess = &quot;&quot;) Then ' Check for Cancel

53: ' Turn off instruction label

54: lblInstruct.Visible = False

55: Exit Sub ' User pressed 
Cancel

56: End If

57: GuessNum = Guess ' Convert to number

58: If (GuessNum &gt; Number) Then

59: MsgBox &quot;Your number is too high...&quot;, , &quot;Wrong&quot;

60: Else

61: If (GuessNum &lt; Number) Then

62: MsgBox &quot;Your number is too 
low...&quot;, , &quot;Wrong&quot;

63: End If

64: End If

65: Loop Until (GuessNum = Number)

66: Beep

67: MsgBox &quot;You guessed &quot; &amp; Guess &amp; &quot;! Correct!!!&quot;, , &quot;Lucky&quot;

68: ' Turn off instruction label

69: 
lblInstruct.Visible = False

70: End Sub

71:

72: Sub GuessLetter ()

73: ' User guesses a letter

74: Dim Letter, GuessLet As String

75:

76: ' Update the instruction label

77: lblInstruct.Caption = &quot;Guess a letter from A to Z&quot;

78: 
lblInstruct.Visible = True

79: ' Find value from ASCII 65 - 90 ('A' to 'Z')

80: Letter = Chr$(Int(26) * Rnd + 65) ' A through Z

81: Do

82: GuessLet = InputBox(&quot;What's your guess?&quot;, &quot;Guess&quot;)

83: If (GuessLet = &quot;&quot;) Then ' 
Check for Cancel

84: ' Turn off instruction label

85: lblInstruct.Visible = False

86: Exit Sub ' User pressed Cancel

87: End If

88: ' Convert user's letter to uppercase

89: GuessLet = UCase(GuessLet)

90: If (GuessLet &gt; Letter) Then

91: MsgBox 
&quot;Your letter is too high...&quot;, , &quot;Wrong&quot;

92: Else

93: If (GuessLet &lt; Letter) Then

94: MsgBox &quot;Your letter is too low...&quot;, , &quot;Wrong&quot;

95: End If

96: End If

97: Loop Until (GuessLet = Letter)

98:

99: ' Here is 
user guessed number

100: Beep

101: MsgBox &quot;You guessed &quot; &amp; GuessLet &amp; &quot;! Correct!!!&quot;, , &quot;Lucky&quot;

102:

103: ' Turn off instruction label

104: lblInstruct.Visible = False

105: End Sub</FONT></PRE>

<BR>

<A 
NAME="E69E142"></A>

<H4 ALIGN=CENTER>

<CENTER>

<FONT SIZE=4 COLOR="#FF0000"><B>Descriptions</B></FONT></CENTER></H4>

<BR>

<P>1: The code for the opening event procedure that executes right before the user sees the form.

<BR>

<P>2: A remark explains 
the procedure.

<BR>

<P>3: The remark continues.

<BR>

<P>4: The remark continues.

<BR>

<P>5: Set the guess to letters.

<BR>

<P>6: A remark explains the code.

<BR>

<P>7: Right justify the Help menu option.

<BR>

<P>8: A remark explains the code.


<BR>

<P>9: Use the internal clock to seed the random number generator.

<BR>

<BLOCKQUOTE>

<BLOCKQUOTE>

<HR ALIGN=CENTER>

<BR>

<NOTE>9: Be sure to seed the random number generator so that truly random values appear.</NOTE>

<BR>

<HR ALIGN=CENTER>


</BLOCKQUOTE></BLOCKQUOTE>

<P>10: Terminate the procedure.

<BR>

<P>11: A blank line separates the procedures.

<BR>

<P>12: The code for the File Exit menu command.

<BR>

<P>13: Terminate the program's execution.

<BR>

<P>14: Terminate the procedure.


<BR>

<P>15: A blank line separates the procedure.

<BR>

<P>16: The code for the File New Game menu command.

<BR>

<P>17: A remark explains the procedure.

<BR>

<P>18: The remark continues.

<BR>

<P>19: A blank line helps separate parts of the program.


<BR>

<P>20: A remark that explains the procedure.

<BR>

<P>21: Turn off the display of the Press File New Game label if it's on.

<BR>

<P>22: Hide the label.

<BR>

<P>23: Terminate the If.

<BR>

<P>24: A blank line helps separate parts of the program.


<BR>

<P>25: See whether the user wants to guess a letter.

<BR>

<P>26: Execute the subroutine procedure that enables the user to guess a letter.

<BR>

<P>27: If the user wants to guess a number...

<BR>

<P>28: Execute the subroutine procedure that 
enables the user to guess a number.

<BR>

<P>29: Terminate the If.

<BR>

<P>30: A remark explains the code.

<BR>

<P>31: Now that the user has finished the game, turn the Select File New Game label.

<BR>

<P>32: Terminate the procedure.

<BR>

<P>33: A 
blank line helps separate parts of the program.

<BR>

<P>34: The code for the Option use Alphabetic Letters menu command.

<BR>

<P>35: A remark helps explain the procedure.

<BR>

<BLOCKQUOTE>

<BLOCKQUOTE>

<HR ALIGN=CENTER>

<BR>

<NOTE>35: Check or 
uncheck the menu command when clicked.</NOTE>

<BR>

<HR ALIGN=CENTER>

</BLOCKQUOTE></BLOCKQUOTE>

<P>36: Turn the menu command's check mark either on or off.

<BR>

<P>37: Terminate the procedure.

<BR>

<P>38: A blank line helps separate the procedures.


<BR>

<P>39: The subroutine procedure called when the user wants to guess a number.

<BR>

<P>40: A remark explains the procedure.

<BR>

<P>41: Define a variable to hold the InputBox() function's return value.

<BR>

<P>42: Define variables to hold the 
user's guess and the random number generated for the guessing game.

<BR>

<P>43: A blank line helps separate parts of the procedure.

<BR>

<P>44: A remark explains the code.

<BR>

<P>45: Change the label that appears at the bottom of the screen during 
the user's guessing.

<BR>

<P>46: Displays the guessing label.

<BR>

<P>47: A remark explains the code.

<BR>

<P>48: Generate a random number from 1 to 100.

<BR>

<BLOCKQUOTE>

<BLOCKQUOTE>

<HR ALIGN=CENTER>

<BR>

<NOTE>48: Unless you convert the 
value fall within a different range, Visual Basic generates a number from 0 to 1.</NOTE>

<BR>

<HR ALIGN=CENTER>

</BLOCKQUOTE></BLOCKQUOTE>

<P>49: A blank line helps separate parts of the code.

<BR>

<P>50: Begin the guessing loop.

<BR>

<P>51: Get 
the user's guess.

<BR>

<P>52: Check to see whether the user pressed the Cancel command button at the display of the input box.

<BR>

<P>53: A remark explains the code.

<BR>

<P>54: Turn off the guessing label.

<BR>

<P>55: Terminate the guessing 
subroutine early.

<BR>

<P>56: Terminate the If.

<BR>

<P>57: Convert the user's Variant answer to an Integer.

<BR>

<P>58: Check whether the user's guess was too high.

<BR>

<P>59: If the user's guess was too high, tells the user.

<BR>

<P>60: The 
user's guess was not too high.

<BR>

<P>61: Check whether the user's guess was too low.

<BR>

<P>62: If the user's guess was too low, tells the user.

<BR>

<P>63: Terminate the If.

<BR>

<P>64: Terminate the If.

<BR>

<P>65: Keep asking the user for a 
guess until the user guesses the correct answer.

<BR>

<P>66: Audibly tells the user that the guess was correct.

<BR>

<P>67: Show the user that the guess was correct.

<BR>

<P>68: A remark helps explain the code.

<BR>

<P>69: Hide the guessing 
instructional label.

<BR>

<P>70: Terminate the procedure.

<BR>

<P>71: A blank line helps separate procedures.

<BR>

<P>72: The subroutine procedure called when the user wants to guess a letter.

<BR>

<P>73: A remark explains the procedure.

<BR>


<P>74: Define a variable to hold the user's guess and the random letter.

<BR>

<P>75: A blank line helps separate parts of the procedure.

<BR>

<P>76: A remark explains the code.

<BR>

<P>77: Change the label that appears at the bottom of the screen 
during the user's guessing.

<BR>

<P>78: Display the guessing label.

<BR>

<P>79: A remark explains the code.

<BR>

<P>80: Generate a random letter from A to Z.

<BR>

<P>81: Begin the guessing loop.

<BR>

<P>82: Get the user's guess.

<BR>

<P>83: 
Check to see whether the user pressed the Cancel command button at the display of the input box.

<BR>

<P>84: A remark explains the code.

<BR>

<P>85: Turn off the guessing label.

<BR>

<P>86: Terminate the guessing subroutine early.

<BR>

<P>87: 
Terminate the If.

<BR>

<P>88: A remark explains the code.

<BR>

<P>89: Convert the user's guess to uppercase if the letter is not already uppercase.

<BR>

<BLOCKQUOTE>

<BLOCKQUOTE>

<HR ALIGN=CENTER>

<BR>

<NOTE>89: The UCase$() function keeps the 
user's guessing range within the uppercase letters.</NOTE>

<BR>

<HR ALIGN=CENTER>

</BLOCKQUOTE></BLOCKQUOTE>

<P>90: Check whether the user's guess was too high.

<BR>

<P>91: If the user's guess was too high, tells the user.

<BR>

<P>92: The user's 
guess was not too high.

<BR>

<P>93: Check whether the user's guess was too low.

<BR>

<P>94: If the user's guess was too low, tells the user.

<BR>

<P>95: Terminate the If.

<BR>

<P>96: Terminate the If.

<BR>

<P>97: Keep asking the user for a guess 
until the user guesses the correct answer.

<BR>

<P>98: A blank line helps separate parts of the code.

<BR>

<P>99: A remark helps explain the code.

<BR>

<P>100: Audibly tells the user that the guess was correct.

<BR>

<P>101: Show the user that the 
guess was correct.

<BR>

<P>102: A blank line helps separate parts of the code.

<BR>

<P>103: A remark helps explain the code.

<BR>

<P>104: Hide the guessing instructional label.

<BR>

<P>105: Terminate the procedure.

<BR>

<BR>

<A 
NAME="E69E143"></A>

<H4 ALIGN=CENTER>

<CENTER>

<FONT SIZE=4 COLOR="#FF0000"><B>Close the Application</B></FONT></CENTER></H4>

<BR>

<P>You can now exit the application and exit Visual Basic. The next lesson teaches you how to send text to the printer 
and really have fun by drawing graphics on the user's form.<A NAME="I2"></A>

<P ALIGN=LEFT>

<A HREF="vel20.htm" TARGET="_self"><IMG SRC="purprev.gif" WIDTH = 32 HEIGHT = 32 BORDER = 0 ALT="Previous Page"></A>

<A HREF="#I0" TARGET="_self"><IMG 
SRC="purtop.gif" WIDTH = 32 HEIGHT = 32 BORDER = 0 ALT="Page Top"></A>

<A HREF="index.htm" TARGET="_self"><IMG SRC="purtoc.gif" WIDTH = 32 HEIGHT = 32 BORDER = 0 ALT="TOC"></A>

<A HREF="vel21.htm" TARGET="_self"><IMG SRC="purnext.gif" WIDTH = 32 HEIGHT = 
32 BORDER = 0 ALT="Next Page"></A>


</BODY></HTML>







