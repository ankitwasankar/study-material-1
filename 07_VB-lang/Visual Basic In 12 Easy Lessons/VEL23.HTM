<HTML>

<HEAD>

<TITLE>Visual Basic in 12 Easy Lessons vel23.htm </TITLE>

<LINK REL="ToC" HREF="index.htm">

<LINK REL="Index" HREF="htindex.htm">

<LINK REL="Next" HREF="vel24.htm">

<LINK REL="Previous" HREF="velp11.htm"></HEAD>

<BODY BGCOLOR="#FFFFFF" 
TEXT="#000000" LINK="#0000FF" VLINK="#800080">

<A NAME="I0"></A>

<H2>Visual Basic in 12 Easy Lessons vel23.htm</H2>

<P ALIGN=LEFT>

<A HREF="velp11.htm" TARGET="_self"><IMG SRC="purprev.gif" WIDTH = 32 HEIGHT = 32 BORDER = 0 ALT="Previous Page"></A>

<A 
HREF="index.htm" TARGET="_self"><IMG SRC="purtoc.gif" WIDTH = 32 HEIGHT = 32 BORDER = 0 ALT="TOC"></A>

<A HREF="vel24.htm" TARGET="_self"><IMG SRC="purnext.gif" WIDTH = 32 HEIGHT = 32 BORDER = 0 ALT="Next Page"></A>


<HR ALIGN=CENTER>

<P>

<UL>

<UL>

<UL>

<LI>

<A HREF="#E68E172" >What You'll Learn</A>

<LI>

<A HREF="#E68E173" >Scrolling the Scroll Bars</A>

<LI>

<A 
HREF="#E68E174" >Prepare for the Grid Control</A>

<LI>

<A HREF="#E68E175" >Using the Grid Control</A>

<LI>

<A HREF="#E68E176" >Monitoring the Mouse Cursor</A>

<LI>

<A HREF="#E68E177" >Capturing Mouse Clicks and Movements</A>

<LI>

<A HREF="#E68E178" 
>Homework</A>

<UL>

<LI>

<A HREF="#E69E163" >General Knowledge</A>

<LI>

<A HREF="#E69E164" >Find the Bug</A>

<LI>

<A HREF="#E69E165" >Write Code That...</A>

<LI>

<A HREF="#E69E166" >Extra Credit</A></UL></UL></UL></UL>

<HR ALIGN=CENTER>

<A 
NAME="E66E34"></A>

<H1 ALIGN=CENTER>

<CENTER>

<FONT SIZE=6 COLOR="#FF0000"><B>Lesson 12, Unit 23</B></FONT></CENTER></H1>

<BR>

<A NAME="E67E37"></A>

<H2 ALIGN=CENTER>

<CENTER>

<FONT SIZE=6 COLOR="#FF0000"><B>The Scroll Bars, Grid, and 
Mouse</B></FONT></CENTER></H2>

<BR>

<BR>

<A NAME="E68E172"></A>

<H3 ALIGN=CENTER>

<CENTER>

<FONT SIZE=5 COLOR="#FF0000"><B>What You'll Learn</B></FONT></CENTER></H3>

<BR>

<UL>

<LI>Scrolling the scroll bars

<BR>

<BR>

<LI>Preparing for the grid 
control

<BR>

<BR>

<LI>Using the grid control

<BR>

<BR>

<LI>Monitoring the mouse cursor

<BR>

<BR>

<LI>Capturing mouse clicks and movements

<BR>

<BR>

</UL>

<P>This unit wraps up the remaining controls that come with the Visual Basic Primer 
system by showing you ways to access and control special scroll bars and grid controls, as well as how to interpret the user's mouse movements and clicks. As with all the 
controls, understanding how to work with scroll bars and the grid requires that you 
master the properties related to those controls.

<BR>

<BLOCKQUOTE>

<BLOCKQUOTE>

<HR ALIGN=CENTER>

<BR>

<NOTE><B>Note: </B>The grid control requires a little preparation. In Lesson 2, you removed the grid control from the AUTOLOAD.MAK default project. 
Therefore, the grid control won't appear on your toolbox until you add the control once again.</NOTE>

<BR>

<HR ALIGN=CENTER>

</BLOCKQUOTE></BLOCKQUOTE>

<BR>

<A NAME="E68E173"></A>

<H3 ALIGN=CENTER>

<CENTER>

<FONT SIZE=5 COLOR="#FF0000"><B>Scrolling 
the Scroll Bars</B></FONT></CENTER></H3>

<BR>

<P><FONT COLOR="#FF8000"><B><I>Concept: </I></B></FONT>The scroll bars give the user the ability to control changing values. Rather than type specific values, the user can move the scroll bars with the mouse 
to specify relative positions within a range of 
values.

<BR>

<P>Figure 23.1 shows you the location of the two scroll bar controls on the Toolbox window. There is a horizontal scroll bar and a vertical scroll bar control. In addition, you'll see two 
shapes whose width and height properties are being adjusted by the 
user's clicking in the scroll bar.

<BR>

<P><B><A HREF="23vel01a.gif">Figure 23.1a. The scroll bars and their descriptions.</A></B>

<BR>

<P><B> <A HREF="23vel01b.gif">Figure 23.1b. The 
scroll bars and their descriptions.</A></B>

<BR>

<P>Table 23.1 contains a list of the scroll bar properties. The most unique and important property values for a scroll bar are the LargeChange, Max, Min, and SmallChange.

<BR>

<BR>

<P ALIGN=CENTER>


<CENTER>

<FONT COLOR="#000080"><B>Table 23.1. The scroll bar properties.</B></FONT></CENTER>

<BR>



<TABLE  BORDERCOLOR=#000040 BORDER=1 CELLSPACING=2 WIDTH="100%" CELLPADDING=2 >

<TR>

<TD VALIGN=top  BGCOLOR=#80FFFF ><FONT COLOR=#000080>


<I>Property</I>

</FONT>

<TD VALIGN=top  BGCOLOR=#80FFFF ><FONT COLOR=#000080>

<I>Description</I></FONT>

<TR>

<TD VALIGN=top  BGCOLOR=#80FFFF ><FONT COLOR=#000080>

DragIcon

</FONT>

<TD VALIGN=top  BGCOLOR=#80FFFF ><FONT COLOR=#000080>

Specifies the 
icon that appears when the user drags the scroll bar around on the form. (You'll only rarely allow the user to move a scroll bar, so the Drag... property settings aren't usually relevant.)</FONT>

<TR>

<TD VALIGN=top  BGCOLOR=#80FFFF ><FONT COLOR=#000080>


DragMode

</FONT>

<TD VALIGN=top  BGCOLOR=#80FFFF ><FONT COLOR=#000080>

Contains either 1 for manual mouse dragging requirements (the user can press and hold the mouse button while dragging the control) or 0 (the default) for automatic mouse dragging, 
meaning that the user can't drag the scroll bar but that you, through code, 
can initiate the dragging if needed.</FONT>

<TR>

<TD VALIGN=top  BGCOLOR=#80FFFF ><FONT COLOR=#000080>

Enabled

</FONT>

<TD VALIGN=top  BGCOLOR=#80FFFF ><FONT COLOR=#000080>


If set to True (the default), the scroll bar can respond to events. Otherwise, Visual Basic halts event processing for that particular control.</FONT>

<TR>

<TD VALIGN=top  BGCOLOR=#80FFFF ><FONT COLOR=#000080>

Height

</FONT>

<TD VALIGN=top  
BGCOLOR=#80FFFF ><FONT COLOR=#000080>

Contains the height, in twips, of the scroll bar.</FONT>

<TR>

<TD VALIGN=top  BGCOLOR=#80FFFF ><FONT COLOR=#000080>

HelpContextID

</FONT>

<TD VALIGN=top  BGCOLOR=#80FFFF ><FONT COLOR=#000080>

If you add 
advanced, context-sensitive help to your application, the HelpContextID provides the identifying number for the help text.</FONT>

<TR>

<TD VALIGN=top  BGCOLOR=#80FFFF ><FONT COLOR=#000080>

Index

</FONT>

<TD VALIGN=top  BGCOLOR=#80FFFF ><FONT 
COLOR=#000080>

If the scroll bar is part of a control array, the Index property provides the numeric subscript for each particular scroll bar.</FONT>

<TR>

<TD VALIGN=top  BGCOLOR=#80FFFF ><FONT COLOR=#000080>

LargeChange

</FONT>

<TD VALIGN=top  
BGCOLOR=#80FFFF ><FONT COLOR=#000080>

Specifies the amount that the scroll bar changes when the user clicks within the scroll bar's shaft area.</FONT>

<TR>

<TD VALIGN=top  BGCOLOR=#80FFFF ><FONT COLOR=#000080>

Left

</FONT>

<TD VALIGN=top  
BGCOLOR=#80FFFF ><FONT COLOR=#000080>

Holds the number of twips from the left edge of the Form window to the left edge of the scroll bar.</FONT>

<TR>

<TD VALIGN=top  BGCOLOR=#80FFFF ><FONT COLOR=#000080>

Max

</FONT>

<TD VALIGN=top  BGCOLOR=#80FFFF 
><FONT COLOR=#000080>

Indicates the maximum number of units that the scroll bar value represents at its highest setting. The range is from 1 to 32767 (the default).</FONT>

<TR>

<TD VALIGN=top  BGCOLOR=#80FFFF ><FONT COLOR=#000080>

Min

</FONT>

<TD 
VALIGN=top  BGCOLOR=#80FFFF ><FONT COLOR=#000080>

Indicates the minimum number of units the scroll bar value represents at its lowest setting. The range is from 1 (the default) to 32767.</FONT>

<TR>

<TD VALIGN=top  BGCOLOR=#80FFFF ><FONT COLOR=#000080>


MousePointer

</FONT>

<TD VALIGN=top  BGCOLOR=#80FFFF ><FONT COLOR=#000080>

Contains the shape that the mouse cursor changes to if the user moves the mouse cursor over the scroll bar. The possible values are from 0 to 12, and represent a range of 
different shapes that the mouse cursor can take on.</FONT>

<TR>

<TD VALIGN=top  BGCOLOR=#80FFFF ><FONT COLOR=#000080>

Name

</FONT>

<TD VALIGN=top  BGCOLOR=#80FFFF ><FONT COLOR=#000080>

Contains the name of the control. By default, Visual Basic 
generates the names VScroll1, VScroll2, and so on (for vertical scroll bars), and HScroll1, HScroll2, and so on (for horizontal scroll bars) as you add subsequent scroll bars to the form.</FONT>

<TR>

<TD VALIGN=top  BGCOLOR=#80FFFF ><FONT COLOR=#000080>


SmallChange

</FONT>

<TD VALIGN=top  BGCOLOR=#80FFFF ><FONT COLOR=#000080>

Specifies the amount that the scroll bar changes when the user clicks an arrow at either end of the scroll bar.</FONT>

<TR>

<TD VALIGN=top  BGCOLOR=#80FFFF ><FONT COLOR=#000080>


TabIndex

</FONT>

<TD VALIGN=top  BGCOLOR=#80FFFF ><FONT COLOR=#000080>

Determines that the focus tab order begins at 0 and increments every time you add a new control. You can change the focus order by changing the controls' TabIndex to other values. No 
two controls on the same form can have the same TabIndex value.</FONT>

<TR>

<TD VALIGN=top  BGCOLOR=#80FFFF ><FONT COLOR=#000080>

TabStop

</FONT>

<TD VALIGN=top  BGCOLOR=#80FFFF ><FONT COLOR=#000080>

If True, the user can press Tab to move the focus 
to this scroll bar. If False, the scroll bar can't receive the focus.</FONT>

<TR>

<TD VALIGN=top  BGCOLOR=#80FFFF ><FONT COLOR=#000080>

Tag

</FONT>

<TD VALIGN=top  BGCOLOR=#80FFFF ><FONT COLOR=#000080>

Unused by Visual Basic. This is for the 
programmer's use for an identifying comment applied to the scroll bar.</FONT>

<TR>

<TD VALIGN=top  BGCOLOR=#80FFFF ><FONT COLOR=#000080>

Top

</FONT>

<TD VALIGN=top  BGCOLOR=#80FFFF ><FONT COLOR=#000080>

Holds the number of twips from the top edge of 
a scrollbar to the top of the form.</FONT>

<TR>

<TD VALIGN=top  BGCOLOR=#80FFFF ><FONT COLOR=#000080>

Value

</FONT>

<TD VALIGN=top  BGCOLOR=#80FFFF ><FONT COLOR=#000080>

Contains the unit of measurement currently represented by the position of the 
scroll bar.</FONT>

<TR>

<TD VALIGN=top  BGCOLOR=#80FFFF ><FONT COLOR=#000080>

Visible

</FONT>

<TD VALIGN=top  BGCOLOR=#80FFFF ><FONT COLOR=#000080>

Contains either True or False, indicating whether the user can see (and, therefore, use) the scroll 
bar.</FONT>

<TR>

<TD VALIGN=top  BGCOLOR=#80FFFF ><FONT COLOR=#000080>

Width

</FONT>

<TD VALIGN=top  BGCOLOR=#80FFFF ><FONT COLOR=#000080>

Holds the number of twips wide that the scroll bar consumes.</FONT>

</TABLE><P><B>Tip: </B>Prefix the names of 
your horizontal scroll bars with the hsb prefix and your vertical scroll bars with the vsb prefix so that you can easily distinguish them from each other.

<P>When you place a scroll bar on a form, you must decide at that time what range of values the 
scroll bar is to represent. The scroll bar's full range can extend from 1 to 32767. Set the Min property to the lowest value represented by the scroll bar. Set 
the Max property to the highest value represented by the scroll bar.

<BR>

<P>When the user 
eventually uses the scroll bar, the scroll bar arrows control small movements in the scroll bar's value determined by the SmallChange property. Clicking the empty shaft on either side of the scroll box produces a positive or negative 
change in the value 
represented by the LargeChange property. The user can drag the scroll bar itself to any position within the scroll bar shaft to jump to a specific location instead of changing the value gradually.

<BR>

<P>Suppose, for example, that a horizontal scroll 
bar was to represent a range of whole dollar amounts from $5 to $100. When the user clicks the scroll arrows, the scroll bar's value is to change by one dollar. When the user clicks the empty shaft on 
either side of the scroll box, the scroll bar's value 
is to change by five dollars. Here are the property values that you would set that determine how Visual Basic interprets each click of the scroll bar:

<BR>

<UL>

<UL>

<P>Min: 5

</UL></UL>

<UL>

<UL>

<P>Max: 100

</UL></UL>

<UL>

<UL>


<P>SmallChange: 1

</UL></UL>

<UL>

<UL>

<P>LargeChange: 5

<BR>

</UL></UL>

<P>The physical size of the scroll bar has no bearing on the scroll bar's returned values when the user selects from the scroll bar. Adjust the scroll bars on your form so that 
the scroll bars are wide enough or tall enough to look appropriate sizes for 
the items that they represent.

<BR>

<P><FONT COLOR="#FF8000"><B><I>Stop and Type: </I></B></FONT>Listing 23.1 contains the SCROLL.MAK code that you can load and run to adjust 
the circle and bar sizes that you saw in Figure 23.1.

<BR>

<P><FONT COLOR="#FF8000"><B><I>Review: </I></B></FONT>There are two scroll bars, a horizontal scroll bar and a vertical scroll bar, that give the user the ability to select from a range of 
possible values without having to enter individual values.

<BR>

<P>

<FONT COLOR="#000080"><B>Listing 23.1. The code for the SCROLL.MAK application.</B></FONT>

<BR>

<PRE>

<FONT COLOR="#000080">1: Option Explicit

2:

3: Sub Form_Load ()

4: ' Set 
initial scroll bar values

5: hsbBar.Value = 1800 ' Circle's default width

6: vsbBar.Value = 1800 ' Bar's default height

7: End Sub

8:

9: Sub hsbBar_Change ()

10: ' As user clicks the scroll bar,

11: ' the width of the circle adjusts

12: 
shpCircle.Width = hsbBar.Value

13: End Sub

14:

15: Sub vsbBar_Change ()

16: ' As user clicks the scroll bar,

17: ' the height of the bar adjusts

18: shpBar.Height = vsbBar.Value

19: End Sub</FONT></PRE>

<P><FONT COLOR="#FF8000"><B><I>Analysis: 
</I></B></FONT>Here are the vital horizontal scroll bar properties that were set during the design of the form:

<BR>

<UL>

<UL>

<P>Min: 50

</UL></UL>

<UL>

<UL>

<P>Max: 2100

</UL></UL>

<UL>

<UL>

<P>SmallChange: 50

</UL></UL>

<UL>

<UL>


<P>LargeChange: 100

<BR>

</UL></UL>

<P>The shape control that contains the circle (named shpCircle) has its Width property set to 2100, so the largest that the circle could appear within the control was 2100 twips. Hence the use of 2100 for the Max 
property.

<BR>

<P>Here are the vital vertical scroll bar properties that were set during the design of the form:

<BR>

<UL>

<UL>

<P>Min: 50

</UL></UL>

<UL>

<UL>

<P>Max: 2300

</UL></UL>

<UL>

<UL>

<P>SmallChange: 50

</UL></UL>

<UL>

<UL>


<P>LargeChange: 100

<BR>

</UL></UL>

<P>The shape control that contains the bar (named shpBar) has its Height property set to 2300, so the tallest that the bar could appear within the control was 2300 twips. Hence the use of 2300 for the Max property.


<BR>

<P>The two Min properties of 50 keep both the circle and bar from shrinking entirely when the user minimizes either control.

<BR>

<P>Lines 5 and 6 set the initial values for the circle's width and the bar's height to 1800, so both shapes are fairly 
large to begin with. Actually, the lines set the initial runtime values for both the scroll bars, which, in turn, generates the Change() 
event procedures that follow in the code.

<BR>

<P>Line 12 ensures that the circle's width increases or decreases, 
depending on the value of the horizontal scroll bar's Value property. Line 18 ensures that the bar's height increases or decreases, depending on the value of the vertical scroll bar's Value 
property.

<BR>

<BR>

<A NAME="E68E174"></A>

<H3 ALIGN=CENTER>


<CENTER>

<FONT SIZE=5 COLOR="#FF0000"><B>Prepare for the Grid Control</B></FONT></CENTER></H3>

<BR>

<P><FONT COLOR="#FF8000"><B><I>Concept: </I></B></FONT>Before you can use the grid control, you must add the grid control to your AUTOLOAD.MAK's Toolbox 
window.

<BR>

<P>Lesson 2 removed the grid control from the Toolbox window. The grid control is a special custom control that wasn't part of Visual Basic's original toolbox. All custom controls reside in files on your disk with the filename extension of 
VBX. All 
applications that use the grid control must list the GRID.VBX file in the Project window.

<BR>

<P>When you don't need the grid control, your applications will load more quickly and consume less disk space if you remove the GRID.VBX file from 
the application's Project window. Until now, the lessons in this book didn't need the grid control; 
therefore, Lesson 2 walked you through the steps to remove the grid control's customer GRID.VBX file from the AUTOLOAD.MAK's Project window.

<BR>

<P>If 
you want to work with the grid control, you must add the GRID.VBX file to any application that requires the grid control. You can decide now whether you want to add GRID.VBX to AUTOLOAD.MAK so that all subsequent projects will contain the grid 
control or 
just add the GRID.VBX file to individual projects that use the grid control.

<BR>

<P>The following steps explain how to add the grid control to AUTOLOAD.MAK. (If you want to remove the control after you complete this unit, you can do so by removing the 
control as explained in the second unit of Lesson 2.) To add the grid control to 
AUTOLOAD.MAK:

<BR>

<OL>

<LI>Load the AUTOLOAD.MAK project.

<BR>

<BR>

<LI>Select File Add File. Visual Basic displays the Add File dialog box.

<BR>

<BR>

<LI>Select 
the file named GRID.VBX. The file should reside in your VBPRIMER directory.

<BR>

<BR>

<LI>Press Enter or click the OK command button to close the dialog box. Visual Basic updates the Toolbox window so that the window contains the custom grid control as 
shown in Figure 23.3.

<BR>

<BR>

<LI>Save the AUTOLOAD.MAK project.

<BR>

<BR>

</OL>

<P><B> <A HREF="23vel02.gif">Figure 23.2. The location of the grid control on the toolbox.</A></B>

<BR>

<BLOCKQUOTE>

<BLOCKQUOTE>

<HR ALIGN=CENTER>

<BR>


<NOTE><B>Note: </B>All new projects that you now create will contain the grid control in the Toolbox window and the GRID.VBX listing in the Project window.</NOTE>

<BR>

<HR ALIGN=CENTER>

</BLOCKQUOTE></BLOCKQUOTE>

<P><FONT COLOR="#FF8000"><B><I>Review: 
</I></B></FONT>Before learning how to use the grid control, you must load the GRID.VBX custom control file into your project's Project window. By loading the file into AUTOLOAD.MAK's project, all subsequent projects 
will contain the grid control until you 
remove the custom control file.

<BR>

<BR>

<A NAME="E68E175"></A>

<H3 ALIGN=CENTER>

<CENTER>

<FONT SIZE=5 COLOR="#FF0000"><B>Using the Grid Control</B></FONT></CENTER></H3>

<BR>

<P><FONT COLOR="#FF8000"><B><I>Concept: </I></B></FONT>The grid control 
produces a table of rows and columns in which you can display text, numeric values, and even graphics.

<BR>

<P>When you must display several values at once, the grid control is one of the handiest controls to use. Although labels are great for messages 
and individual data items, and scrolling list boxes are fine for lists of values from which the user can 
select, the grid gives your application a two-dimensional table display of data.

<BR>

<P>Suppose that you just started a lawn fertilization company, 
and you begin with an initial route of eight customers. Each customer requires five annual fertilizations. That's a total of 40 applications that you need to track for the upcoming year. Each 
yard size differs and each application requires different 
amounts and kinds of fertilization mixtures.

<BR>

<P>Thinking about the eight customer's five applications, you realize that a table with eight rows and five columns would be the perfect place for placing pricing data in a computer application. After you 
build a Visual Basic application that contains the 
values, you could easily modify the table or store the values in a disk file. As you add additional customers, you could easily expand the size of the grid through the program's code.

<BR>

<BLOCKQUOTE>


<BLOCKQUOTE>

<HR ALIGN=CENTER>

<BR>

<NOTE><I>Definition: </I>A <I>cell</I> is one row and column intersection of a grid.</NOTE>

<BR>

<HR ALIGN=CENTER>

</BLOCKQUOTE></BLOCKQUOTE>

<P>Before looking at an actual demonstration of a grid that tracks this 
lawn care business, take a few moments to study Figure 23.3. The figure shows the layout of cells on a grid that might appear on a form. The grid's size is determined by the grid's 
properties, which you can set or adjust using the mouse when you place the 
grid control on the form.

<BR>

<P><B> <A HREF="23vel03.gif">Figure 23.3. The grid control produces a table of rows and columns.</A></B>

<BR>

<P><B>Tip: </B>The grid doesn't have be large enough to display all of its data. If the grid's size isn't large 
enough to hold all the grid's cells, Visual Basic adds scroll bars so that the user can scroll through the grid.

<P>The figure's shaded row and column is known as a <I>fixed row</I> and <I>fixed column</I>. The grid's property value settings determine 
whether you want to set aside a fixed row or column. When you request one or more fixed rows or one or more fixed 
columns (or a combination of both), Visual Basic keeps those rows and columns from scrolling when the user scrolls through the grid's values.


<BR>

<P>As the user views values inside the grid, the user can scroll through the grid, selecting (with the mouse or keyboard) one or more cells in the grid. Through programming, you can update or copy selected cell values to other grid controls, to 
variables, 
or to data files.

<BR>

<P>Table 23.2 contains the property values available for a grid control. Although you've seen several of the properties for other controls, the grid does contain properties unique to the grid control that determine the 
dimensions of the grid as well as the 
number of fixed rows and columns.

<BR>

<BR>

<P ALIGN=CENTER>

<CENTER>

<FONT COLOR="#000080"><B>Table 23.2. The grid control's properties.</B></FONT></CENTER>

<BR>



<TABLE  BORDERCOLOR=#000040 BORDER=1 
CELLSPACING=2 WIDTH="100%" CELLPADDING=2 >

<TR>

<TD VALIGN=top  BGCOLOR=#80FFFF ><FONT COLOR=#000080>

<I>Property</I>

</FONT>

<TD VALIGN=top  BGCOLOR=#80FFFF ><FONT COLOR=#000080>

<I>Description</I></FONT>

<TR>

<TD VALIGN=top  BGCOLOR=#80FFFF 
><FONT COLOR=#000080>

About...

</FONT>

<TD VALIGN=top  BGCOLOR=#80FFFF ><FONT COLOR=#000080>

Clicking this About property opens a description dialog box that displays information about the grid control. Most custom controls come with these About dialog 
boxes that detail copyright information about the custom control. The About property is 
available only during program design time and does nothing at runtime.</FONT>

<TR>

<TD VALIGN=top  BGCOLOR=#80FFFF ><FONT COLOR=#000080>

BackColor

</FONT>

<TD 
VALIGN=top  BGCOLOR=#80FFFF ><FONT COLOR=#000080>

Specifies the grid control's background color, chosen as a hexadecimal color code or from the color palette. The BackColor describes the nonfixed row and column cell colors. All fixed row and column cells 
are gray.</FONT>

<TR>

<TD VALIGN=top  BGCOLOR=#80FFFF ><FONT COLOR=#000080>

BorderStyle

</FONT>

<TD VALIGN=top  BGCOLOR=#80FFFF ><FONT COLOR=#000080>

Specifies that a border appears around the grid if set to 1-Fixed Single (the default). No border 
appears if set to 0-None.</FONT>

<TR>

<TD VALIGN=top  BGCOLOR=#80FFFF ><FONT COLOR=#000080>

Cols

</FONT>

<TD VALIGN=top  BGCOLOR=#80FFFF ><FONT COLOR=#000080>

Holds the number of columns in the grid.</FONT>

<TR>

<TD VALIGN=top  BGCOLOR=#80FFFF 
><FONT COLOR=#000080>

DragIcon

</FONT>

<TD VALIGN=top  BGCOLOR=#80FFFF ><FONT COLOR=#000080>

Contains the icon that appears when the user drags the grid around on the form. (You'll only rarely allow the user to move a grid, so the Drag... property 
settings aren't usually relevant.)</FONT>

<TR>

<TD VALIGN=top  BGCOLOR=#80FFFF ><FONT COLOR=#000080>

DragMode

</FONT>

<TD VALIGN=top  BGCOLOR=#80FFFF ><FONT COLOR=#000080>

Holds either 1 for manual mouse dragging requirements (the user can press and 
hold the mouse button while dragging the control) or 0 (the default) for automatic mouse dragging, meaning that the user can't drag the grid but that you, through code, can 
initiate the dragging if needed.</FONT>

<TR>

<TD VALIGN=top  BGCOLOR=#80FFFF 
><FONT COLOR=#000080>

Enabled

</FONT>

<TD VALIGN=top  BGCOLOR=#80FFFF ><FONT COLOR=#000080>

Determines whether the grid can respond to events. If set to True (the default), the grid can respond to events. Otherwise, Visual Basic halts event processing 
for that particular control.</FONT>

<TR>

<TD VALIGN=top  BGCOLOR=#80FFFF ><FONT COLOR=#000080>

FillStyle

</FONT>

<TD VALIGN=top  BGCOLOR=#80FFFF ><FONT COLOR=#000080>

If set to 0-Single (the default), a value is to be assigned only to a single 
selected cell, and if 1-Repeat, a value is to be assigned to a range of selected cells.</FONT>

<TR>

<TD VALIGN=top  BGCOLOR=#80FFFF ><FONT COLOR=#000080>

FixedCols

</FONT>

<TD VALIGN=top  BGCOLOR=#80FFFF ><FONT COLOR=#000080>

Holds the number of 
fixed columns. The FixedCols value must be at least two fewer than the Cols value.</FONT>

<TR>

<TD VALIGN=top  BGCOLOR=#80FFFF ><FONT COLOR=#000080>

FixedRows

</FONT>

<TD VALIGN=top  BGCOLOR=#80FFFF ><FONT COLOR=#000080>

Holds the number of fixed 
rows. The FixedRows value must be at least two fewer than the Rows value.</FONT>

<TR>

<TD VALIGN=top  BGCOLOR=#80FFFF ><FONT COLOR=#000080>

FontBold

</FONT>

<TD VALIGN=top  BGCOLOR=#80FFFF ><FONT COLOR=#000080>

Holds True (the default) if the grid 
values are to display in boldfaced characters; False otherwise.</FONT>

<TR>

<TD VALIGN=top  BGCOLOR=#80FFFF ><FONT COLOR=#000080>

FontItalic

</FONT>

<TD VALIGN=top  BGCOLOR=#80FFFF ><FONT COLOR=#000080>

Holds True (the default) if the grid values are 
to display in italicized characters; False otherwise.</FONT>

<TR>

<TD VALIGN=top  BGCOLOR=#80FFFF ><FONT COLOR=#000080>

FontName

</FONT>

<TD VALIGN=top  BGCOLOR=#80FFFF ><FONT COLOR=#000080>

Contains the name of the grid values' font styles. 
Typically, you'll use the name of a Windows TrueType font.</FONT>

<TR>

<TD VALIGN=top  BGCOLOR=#80FFFF ><FONT COLOR=#000080>

FontSize

</FONT>

<TD VALIGN=top  BGCOLOR=#80FFFF ><FONT COLOR=#000080>

Holds the size, in points, of the font used for the 
grid values.</FONT>

<TR>

<TD VALIGN=top  BGCOLOR=#80FFFF ><FONT COLOR=#000080>

FontStrikethru

</FONT>

<TD VALIGN=top  BGCOLOR=#80FFFF ><FONT COLOR=#000080>

Holds True (the default) if the grid values are to display in strikethru letters (characters 
with dashes through them); False otherwise.</FONT>

<TR>

<TD VALIGN=top  BGCOLOR=#80FFFF ><FONT COLOR=#000080>

FontUnderline

</FONT>

<TD VALIGN=top  BGCOLOR=#80FFFF ><FONT COLOR=#000080>

Holds True (the default) if the grid values are to display in 
underlined letters; False otherwise.</FONT>

<TR>

<TD VALIGN=top  BGCOLOR=#80FFFF ><FONT COLOR=#000080>

ForeColor

</FONT>

<TD VALIGN=top  BGCOLOR=#80FFFF ><FONT COLOR=#000080>

Specifies the color of the characters in the grid values.</FONT>

<TR>

<TD 
VALIGN=top  BGCOLOR=#80FFFF ><FONT COLOR=#000080>

GridLines

</FONT>

<TD VALIGN=top  BGCOLOR=#80FFFF ><FONT COLOR=#000080>

Holds True (the default) if the grid is to control separating row and column lines; False otherwise.</FONT>

<TR>

<TD VALIGN=top  
BGCOLOR=#80FFFF ><FONT COLOR=#000080>

Height

</FONT>

<TD VALIGN=top  BGCOLOR=#80FFFF ><FONT COLOR=#000080>

Holds the height, in twips, of the grid.</FONT>

<TR>

<TD VALIGN=top  BGCOLOR=#80FFFF ><FONT COLOR=#000080>

HelpContextID

</FONT>

<TD 
VALIGN=top  BGCOLOR=#80FFFF ><FONT COLOR=#000080>

If you add advanced, context-sensitive help to your application, the HelpContextID provides the identifying number for the help text.</FONT>

<TR>

<TD VALIGN=top  BGCOLOR=#80FFFF ><FONT COLOR=#000080>


Highlight

</FONT>

<TD VALIGN=top  BGCOLOR=#80FFFF ><FONT COLOR=#000080>

Holds True (the default) or False to determine whether selected cell or cells are to appear highlighted.</FONT>

<TR>

<TD VALIGN=top  BGCOLOR=#80FFFF ><FONT COLOR=#000080>

Index


</FONT>

<TD VALIGN=top  BGCOLOR=#80FFFF ><FONT COLOR=#000080>

If the grid is part of a control array, the Index property provides the numeric subscript for each particular grid control.</FONT>

<TR>

<TD VALIGN=top  BGCOLOR=#80FFFF ><FONT COLOR=#000080>


Left

</FONT>

<TD VALIGN=top  BGCOLOR=#80FFFF ><FONT COLOR=#000080>

Contains the number of twips from the left edge of the Form window to the left edge of the grid.</FONT>

<TR>

<TD VALIGN=top  BGCOLOR=#80FFFF ><FONT COLOR=#000080>

Name

</FONT>

<TD 
VALIGN=top  BGCOLOR=#80FFFF ><FONT COLOR=#000080>

Contains the name of the control. By default, Visual Basic generates the names Grid1, Grid2, and so on as you add subsequent grids to the form.</FONT>

<TR>

<TD VALIGN=top  BGCOLOR=#80FFFF ><FONT 
COLOR=#000080>

Rows

</FONT>

<TD VALIGN=top  BGCOLOR=#80FFFF ><FONT COLOR=#000080>

Holds the number of rows in the grid.</FONT>

<TR>

<TD VALIGN=top  BGCOLOR=#80FFFF ><FONT COLOR=#000080>

ScrollBars

</FONT>

<TD VALIGN=top  BGCOLOR=#80FFFF ><FONT 
COLOR=#000080>

Holds 0-None, 1-Horizontal, 2-Vertical, or 3-Both (the default) to describe the scroll bars that appear in the grid if the grid requires more row and column space than the grid size allows.</FONT>

<TR>

<TD VALIGN=top  BGCOLOR=#80FFFF 
><FONT COLOR=#000080>

TabIndex

</FONT>

<TD VALIGN=top  BGCOLOR=#80FFFF ><FONT COLOR=#000080>

Determines that the focus tab order begins at 0 and increments every time you add a new control. You can change the focus order by changing the controls' 
TabIndex to other values. No two controls on the same form can have the same TabIndex value.</FONT>

<TR>

<TD VALIGN=top  BGCOLOR=#80FFFF ><FONT COLOR=#000080>

TabStop

</FONT>

<TD VALIGN=top  BGCOLOR=#80FFFF ><FONT COLOR=#000080>

If True, determines 
whether the user can press Tab to move the focus to this grid. If False, the grid can't receive the focus.</FONT>

<TR>

<TD VALIGN=top  BGCOLOR=#80FFFF ><FONT COLOR=#000080>

Tag

</FONT>

<TD VALIGN=top  BGCOLOR=#80FFFF ><FONT COLOR=#000080>

Unused by 
Visual Basic. This is for the programmer's use for an identifying comment applied to the grid.</FONT>

<TR>

<TD VALIGN=top  BGCOLOR=#80FFFF ><FONT COLOR=#000080>

Top

</FONT>

<TD VALIGN=top  BGCOLOR=#80FFFF ><FONT COLOR=#000080>

Holds the number of 
twips from the top edge of a grid to the top of the form.</FONT>

<TR>

<TD VALIGN=top  BGCOLOR=#80FFFF ><FONT COLOR=#000080>

Visible

</FONT>

<TD VALIGN=top  BGCOLOR=#80FFFF ><FONT COLOR=#000080>

Holds True or False, indicating whether the user can see 
(and, therefore, use) the grid.</FONT>

<TR>

<TD VALIGN=top  BGCOLOR=#80FFFF ><FONT COLOR=#000080>

Width

</FONT>

<TD VALIGN=top  BGCOLOR=#80FFFF ><FONT COLOR=#000080>

Holds the number of twips wide that the grid consumes.</FONT>

</TABLE><BLOCKQUOTE>


<BLOCKQUOTE>

<HR ALIGN=CENTER>

<BR>

<NOTE><FONT COLOR="#FF8000"><B><I>Warning: </I></B></FONT>The grid control enables your user to view and scroll through values but doesn't allow the user to enter new values into the grid. Your program can update the 
grid, but the user can't.</NOTE>

<BR>

<HR ALIGN=CENTER>

</BLOCKQUOTE></BLOCKQUOTE>

<P>In addition to the property values that you can set at program design time (those listed in Table 23.2), there are additional property values that your program can 
add and modify at runtime. Table 23.3 lists the runtime properties available to your 
code.

<BR>

<BR>

<P ALIGN=CENTER>

<CENTER>

<FONT COLOR="#000080"><B>Table 23.3. The grid control's runtime properties.</B></FONT></CENTER>

<BR>



<TABLE  
BORDERCOLOR=#000040 BORDER=1 CELLSPACING=2 WIDTH="100%" CELLPADDING=2 >

<TR>

<TD VALIGN=top  BGCOLOR=#80FFFF ><FONT COLOR=#000080>

<I>Property</I>

</FONT>

<TD VALIGN=top  BGCOLOR=#80FFFF ><FONT COLOR=#000080>

<I>Description</I></FONT>

<TR>

<TD 
VALIGN=top  BGCOLOR=#80FFFF ><FONT COLOR=#000080>

Col

</FONT>

<TD VALIGN=top  BGCOLOR=#80FFFF ><FONT COLOR=#000080>

Contains the column number, counting from 0, of the currently selected cell.</FONT>

<TR>

<TD VALIGN=top  BGCOLOR=#80FFFF ><FONT 
COLOR=#000080>

ColAlignment 

</FONT>

<TD VALIGN=top  BGCOLOR=#80FFFF ><FONT COLOR=#000080>

Contains 0 (the default) for left justification of the cell values, 1 for right justification, and 2 for center alignment of the cell values. This property 
applies only to the cells in nonfixed columns.</FONT>

<TR>

<TD VALIGN=top  BGCOLOR=#80FFFF ><FONT COLOR=#000080>

ColWidth

</FONT>

<TD VALIGN=top  BGCOLOR=#80FFFF ><FONT COLOR=#000080>

Holds the width, in twips, of an individual column.</FONT>

<TR>


<TD VALIGN=top  BGCOLOR=#80FFFF ><FONT COLOR=#000080>

FixedAlignment

</FONT>

<TD VALIGN=top  BGCOLOR=#80FFFF ><FONT COLOR=#000080>

Contains 0 (the default) for leftjustification of the cell values, 1 for right justification, and 2 for center alignment 
of the cell values. This property applies only to the cells in fixed columns.</FONT>

<TR>

<TD VALIGN=top  BGCOLOR=#80FFFF ><FONT COLOR=#000080>

HighLight

</FONT>

<TD VALIGN=top  BGCOLOR=#80FFFF ><FONT COLOR=#000080>

Holds True or False to indicate 
whether or not the user selected a cell or a range of cells.</FONT>

<TR>

<TD VALIGN=top  BGCOLOR=#80FFFF ><FONT COLOR=#000080>

Picture

</FONT>

<TD VALIGN=top  BGCOLOR=#80FFFF ><FONT COLOR=#000080>

At runtime, you can assign the LoadPicture() 
procedure (see the previous unit) to display a graphic image in a selected cell.</FONT>

<TR>

<TD VALIGN=top  BGCOLOR=#80FFFF ><FONT COLOR=#000080>

Row

</FONT>

<TD VALIGN=top  BGCOLOR=#80FFFF ><FONT COLOR=#000080>

Contains the row number, counting 
from 0, of the currently selected cell.</FONT>

<TR>

<TD VALIGN=top  BGCOLOR=#80FFFF ><FONT COLOR=#000080>

RowHeight

</FONT>

<TD VALIGN=top  BGCOLOR=#80FFFF ><FONT COLOR=#000080>

Holds the height, in twips, of an individual row.</FONT>

<TR>

<TD 
VALIGN=top  BGCOLOR=#80FFFF ><FONT COLOR=#000080>

SelEndCol

</FONT>

<TD VALIGN=top  BGCOLOR=#80FFFF ><FONT COLOR=#000080>

Holds the rightmost column of a selected range.</FONT>

<TR>

<TD VALIGN=top  BGCOLOR=#80FFFF ><FONT COLOR=#000080>

SelEndRow


</FONT>

<TD VALIGN=top  BGCOLOR=#80FFFF ><FONT COLOR=#000080>

Holds the bottom row of a selected range.</FONT>

<TR>

<TD VALIGN=top  BGCOLOR=#80FFFF ><FONT COLOR=#000080>

SelStartCol

</FONT>

<TD VALIGN=top  BGCOLOR=#80FFFF ><FONT COLOR=#000080>


Holds the leftmost column of a selected range.</FONT>

<TR>

<TD VALIGN=top  BGCOLOR=#80FFFF ><FONT COLOR=#000080>

SelEndCol

</FONT>

<TD VALIGN=top  BGCOLOR=#80FFFF ><FONT COLOR=#000080>

Holds the top row of a selected range.</FONT>

<TR>

<TD 
VALIGN=top  BGCOLOR=#80FFFF ><FONT COLOR=#000080>

Text

</FONT>

<TD VALIGN=top  BGCOLOR=#80FFFF ><FONT COLOR=#000080>

Holds the value of any given cell.</FONT>

</TABLE><P>The two most frequently used runtime property values are the Row and Col 
properties. These two properties determine which cell you're currently formatting and which cell you want to assign text to. Before assigning a grid's cell a value, you 
must set the Row and Col values to the row and column that intersect the cell to 
assign to.

<BR>

<BLOCKQUOTE>

<BLOCKQUOTE>

<HR ALIGN=CENTER>

<BR>

<NOTE><B>Note: </B>Many of the property values in Table 23.3 make sense only when the user runs the program because, until then, no cells are selected. The project application at the 
end of this lesson demonstrates how to use these properties to initialize 
a grid and respond to the user's selected range of cells.</NOTE>

<BR>

<HR ALIGN=CENTER>

</BLOCKQUOTE></BLOCKQUOTE>

<P><FONT COLOR="#FF8000"><B><I>Review: </I></B></FONT>The grid 
control is useful for displaying tables of data values for the user. The grid control is a custom control located inside the GRID.VBX file that you must add to any application that uses the 
grid control.

<BR>

<BR>

<A NAME="E68E176"></A>

<H3 
ALIGN=CENTER>

<CENTER>

<FONT SIZE=5 COLOR="#FF0000"><B>Monitoring the Mouse Cursor</B></FONT></CENTER></H3>

<BR>

<P><FONT COLOR="#FF8000"><B><I>Concept: </I></B></FONT>Your program can respond to mouse movements and the user's mouse clicks through 
event procedures. The mouse object supports property values and methods that you can use to monitor the mouse. One 
important property that you may want to control during the user's mouse movement is the MousePointer property, which determines how the 
mouse looks when the user moves the mouse over a control.

<BR>

<P>If you need to, you can monitor the user's mouse movements and clicks. As you've seen throughout this book, Visual Basic takes care of monitoring most of the important mouse functions. For 
example, you already know that if the user clicks a mouse over a 
command button, Visual Basic ensures that the command button's Click event procedure automatically executes without your having to worry about looking for the mouse click.

<BR>

<P>One of 
the most common ways that a program works with the mouse is to change the appearance of the mouse cursor. In Windows, the term <I>cursor</I> is technically used solely for the mouse cursor, whereas the term <I>caret</I> is used for the text 
cursor. 
Despite Microsoft's original design and the technical manuals that promote these &quot;accurate&quot; names, most users and programmers refer to the mouse cursor simply as the <I>mouse cursor</I> and the text cursor as the <I>text cursor</I>. This 
chapter 
will continue to use the vernacular.

<BR>

<P>Table 23.4 contains a list of every mouse cursor shape that you can display. Most controls contain the MousePointer property. For example, command buttons contain a MousePointer property. The value of each 
control's MousePointer property, described in 
Table 23.4, determines what shape the mouse cursor takes on when the user moves the mouse over that control.

<BR>

<BR>

<P ALIGN=CENTER>

<CENTER>

<FONT COLOR="#000080"><B>Table 23.4. The thirteen mouse 
cursor values.</B></FONT></CENTER>

<BR>



<TABLE  BORDERCOLOR=#000040 BORDER=1 CELLSPACING=2 WIDTH="100%" CELLPADDING=2 >

<TR>

<TD VALIGN=top  BGCOLOR=#80FFFF ><FONT COLOR=#000080>

<I>Value</I>

</FONT>

<TD VALIGN=top  BGCOLOR=#80FFFF ><FONT 
COLOR=#000080>

<I>Description</I></FONT>

<TR>

<TD VALIGN=top  BGCOLOR=#80FFFF ><FONT COLOR=#000080>

0-Default

</FONT>

<TD VALIGN=top  BGCOLOR=#80FFFF ><FONT COLOR=#000080>

The cursor assumes the control's default mouse cursor shape. Each control has 
its own default mouse cursor shape. Most controls use the common mouse cursor arrow for the default shape.</FONT>

<TR>

<TD VALIGN=top  BGCOLOR=#80FFFF ><FONT COLOR=#000080>

1-Arrow

</FONT>

<TD VALIGN=top  BGCOLOR=#80FFFF ><FONT COLOR=#000080>

The 
typical arrow mouse pointer. (Generally, this is the same shape as most controls' default mouse cursor shape.)</FONT>

<TR>

<TD VALIGN=top  BGCOLOR=#80FFFF ><FONT COLOR=#000080>

2-Cross

</FONT>

<TD VALIGN=top  BGCOLOR=#80FFFF ><FONT COLOR=#000080>

A 
crosshair pointer.</FONT>

<TR>

<TD VALIGN=top  BGCOLOR=#80FFFF ><FONT COLOR=#000080>

3-I-Beam

</FONT>

<TD VALIGN=top  BGCOLOR=#80FFFF ><FONT COLOR=#000080>

The vertical mouse cursor most often used as a text cursor.</FONT>

<TR>

<TD VALIGN=top  
BGCOLOR=#80FFFF ><FONT COLOR=#000080>

4-Icon

</FONT>

<TD VALIGN=top  BGCOLOR=#80FFFF ><FONT COLOR=#000080>

A small black square within another square.</FONT>

<TR>

<TD VALIGN=top  BGCOLOR=#80FFFF ><FONT COLOR=#000080>

5-Size

</FONT>

<TD VALIGN=top  
BGCOLOR=#80FFFF ><FONT COLOR=#000080>

The sizing cursor that looks like a plus sign with arrows pointing in the four directions.</FONT>

<TR>

<TD VALIGN=top  BGCOLOR=#80FFFF ><FONT COLOR=#000080>

6-Size NE SW

</FONT>

<TD VALIGN=top  BGCOLOR=#80FFFF 
><FONT COLOR=#000080>

A diagonal arrow pointing northeast and southwest.</FONT>

<TR>

<TD VALIGN=top  BGCOLOR=#80FFFF ><FONT COLOR=#000080>

7-Size N S

</FONT>

<TD VALIGN=top  BGCOLOR=#80FFFF ><FONT COLOR=#000080>

A vertical arrow pointing north and 
south.</FONT>

<TR>

<TD VALIGN=top  BGCOLOR=#80FFFF ><FONT COLOR=#000080>

8-NW SE

</FONT>

<TD VALIGN=top  BGCOLOR=#80FFFF ><FONT COLOR=#000080>

A diagonal arrow pointing northwest and southeast.</FONT>

<TR>

<TD VALIGN=top  BGCOLOR=#80FFFF ><FONT 
COLOR=#000080>

9-W E

</FONT>

<TD VALIGN=top  BGCOLOR=#80FFFF ><FONT COLOR=#000080>

A vertical arrow pointing west and east.</FONT>

<TR>

<TD VALIGN=top  BGCOLOR=#80FFFF ><FONT COLOR=#000080>

10-Up Arrow

</FONT>

<TD VALIGN=top  BGCOLOR=#80FFFF 
><FONT COLOR=#000080>

An arrow pointing straight up.</FONT>

<TR>

<TD VALIGN=top  BGCOLOR=#80FFFF ><FONT COLOR=#000080>

11-Hourglass

</FONT>

<TD VALIGN=top  BGCOLOR=#80FFFF ><FONT COLOR=#000080>

The hourglass shape.</FONT>

<TR>

<TD VALIGN=top  
BGCOLOR=#80FFFF ><FONT COLOR=#000080>

12-No Drop

</FONT>

<TD VALIGN=top  BGCOLOR=#80FFFF ><FONT COLOR=#000080>

The familiar roadsign &quot;No&quot; circle with a slash through it.</FONT>

</TABLE><P>Depending on the application, you may need to keep 
the user from clicking on a control. For example, you may want to ignore all clicks of a command button that prints a report of daily activities until after a 5:00 p.m. closing time. Your 
application could respond to the command button's click after 5:00 
p.m. and return without responding if the time is before 5:00 p.m.

<BR>

<P>During the time that the command button is to be ignored, you could set the command button's MousePointer shape to the 12-No Drop mouse cursor. Therefore, the user's mouse cursor 
changes to the no drop shape whenever the user moves the mouse cursor over 
that particular command button. The mouse cursor could remain the standard arrow pointer for the other controls. After 5:00 p.m., inside the click procedure, you could respond to 
the command button click by printing the report and also set the MousePointer 
property to 1-Default (or 1-Arrow, which is the same shape for command buttons because the default mouse cursor is the arrow for command button controls).

<BR>

<P>Table 23.5 
lists the CONSTANT.TXT file's named constants that you can use to set the MousePointer property values.

<BR>

<BR>

<P ALIGN=CENTER>

<CENTER>

<FONT COLOR="#000080"><B>Table 23.5. The CONSTANT.TXT's named </B><B>MousePointer</B><B> property 
values.</B></FONT></CENTER>

<BR>



<TABLE  BORDERCOLOR=#000040 BORDER=1 CELLSPACING=2 WIDTH="100%" CELLPADDING=2 >

<TR>

<TD VALIGN=top  BGCOLOR=#80FFFF ><FONT COLOR=#000080>

<I>Property</I>

</FONT>

<TD VALIGN=top  BGCOLOR=#80FFFF ><FONT 
COLOR=#000080>

<I>Description</I></FONT>

<TR>

<TD VALIGN=top  BGCOLOR=#80FFFF ><FONT COLOR=#000080>

DEFAULT

</FONT>

<TD VALIGN=top  BGCOLOR=#80FFFF ><FONT COLOR=#000080>

The control's default mouse cursor shape.</FONT>

<TR>

<TD VALIGN=top  
BGCOLOR=#80FFFF ><FONT COLOR=#000080>

ARROW

</FONT>

<TD VALIGN=top  BGCOLOR=#80FFFF ><FONT COLOR=#000080>

The typical mouse cursor arrow.</FONT>

<TR>

<TD VALIGN=top  BGCOLOR=#80FFFF ><FONT COLOR=#000080>

CROSSHAIR

</FONT>

<TD VALIGN=top  
BGCOLOR=#80FFFF ><FONT COLOR=#000080>

A crosshair.</FONT>

<TR>

<TD VALIGN=top  BGCOLOR=#80FFFF ><FONT COLOR=#000080>

IBEAM

</FONT>

<TD VALIGN=top  BGCOLOR=#80FFFF ><FONT COLOR=#000080>

An I-Beam (the typical text cursor)</FONT>

<TR>

<TD VALIGN=top  
BGCOLOR=#80FFFF ><FONT COLOR=#000080>

ICON_POINTER

</FONT>

<TD VALIGN=top  BGCOLOR=#80FFFF ><FONT COLOR=#000080>

An icon square within a square</FONT>

<TR>

<TD VALIGN=top  BGCOLOR=#80FFFF ><FONT COLOR=#000080>

SIZE_POINTER

</FONT>

<TD VALIGN=top  
BGCOLOR=#80FFFF ><FONT COLOR=#000080>

The sizing cursor that looks like a plus sign with arrows pointing in the four directions.</FONT>

<TR>

<TD VALIGN=top  BGCOLOR=#80FFFF ><FONT COLOR=#000080>

SIZE_NE_SW

</FONT>

<TD VALIGN=top  BGCOLOR=#80FFFF 
><FONT COLOR=#000080>

A diagonal arrow pointing northeast and southwest.</FONT>

<TR>

<TD VALIGN=top  BGCOLOR=#80FFFF ><FONT COLOR=#000080>

SIZE_N_S

</FONT>

<TD VALIGN=top  BGCOLOR=#80FFFF ><FONT COLOR=#000080>

A vertical arrow pointing north and 
south.</FONT>

<TR>

<TD VALIGN=top  BGCOLOR=#80FFFF ><FONT COLOR=#000080>

SIZE_NW_SE

</FONT>

<TD VALIGN=top  BGCOLOR=#80FFFF ><FONT COLOR=#000080>

A diagonal arrow pointing northwest and southeast.</FONT>

<TR>

<TD VALIGN=top  BGCOLOR=#80FFFF ><FONT 
COLOR=#000080>

SIZE_W_E

</FONT>

<TD VALIGN=top  BGCOLOR=#80FFFF ><FONT COLOR=#000080>

A vertical arrow pointing west and east.</FONT>

<TR>

<TD VALIGN=top  BGCOLOR=#80FFFF ><FONT COLOR=#000080>

UP_ARROW

</FONT>

<TD VALIGN=top  BGCOLOR=#80FFFF 
><FONT COLOR=#000080>

The straight up arrow.</FONT>

<TR>

<TD VALIGN=top  BGCOLOR=#80FFFF ><FONT COLOR=#000080>

HOURGLASS

</FONT>

<TD VALIGN=top  BGCOLOR=#80FFFF ><FONT COLOR=#000080>

The hourglass waiting shape.</FONT>

<TR>

<TD VALIGN=top  
BGCOLOR=#80FFFF ><FONT COLOR=#000080>

NO_DROP

</FONT>

<TD VALIGN=top  BGCOLOR=#80FFFF ><FONT COLOR=#000080>

The &quot;No&quot; circle with a line through it.</FONT>

</TABLE><P><FONT COLOR="#FF8000"><B><I>Stop and Type: </I></B></FONT>Listing 23.2 
contains the code found in this book's MOUSECH.MAK application. The program demonstrates how the mouse cursor can change depending on the value of an option button. The 
program produces the before 5:00 p.m. and after 5:00 p.m. results described earlier in 
this section.

<BR>

<P><FONT COLOR="#FF8000"><B><I>Review: </I></B></FONT>Most controls support the MousePointer property that determines the shape that the mouse takes on when the user moves the mouse over another control.

<BR>

<P>

<FONT 
COLOR="#000080"><B>Listing 23.2. Code that changes the shape of the mouse depending on the value of option buttons.</B></FONT>

<BR>

<PRE>

<FONT COLOR="#000080">1: Sub optAfter_Click ()

2: ' After 5:00 pm so fix mouse over command

3: 
cmdReport.MousePointer = ARROW

4: End Sub

5:

6: Sub optBefore_Click ()

7: ' Before 5:00 pm so negate mouse over command

8: cmdReport.MousePointer = NO_DROP

9: lblReport.Visible = False

10: End Sub

11:

12: Sub cmdExit_Click ()

13: End

14: End Sub


15:

16: Sub cmdReport_Click ()

17: ' Beep if it's before 5:00

18: If optBefore.Value = True Then

19: Beep

20: lblReport.Visible = False

21: Else

22: lblReport.Visible = True

23: End If

24: End Sub</FONT></PRE>

<P><FONT 
COLOR="#FF8000"><B><I>Output: </I></B></FONT>Figure 23.4 shows what happens to the shape of the mouse cursor when the user moves the mouse cursor over the command button before 5:00 p.m.

<BR>

<P><B> <A HREF="23vel04.gif">Figure 23.4. The mouse cursor 
tells the user that the command button won't </B><B>respond.</A></B>

<BR>

<P><FONT COLOR="#FF8000"><B><I>Analysis: </I></B></FONT>When the program begins, the first option button named optBefore is set to True. Therefore, the application assumes that the 
time is before 5:00 p.m. and the command button's MousePointer value is set 
to NO_DROP as, shown in Figure 23.4.

<BR>

<BLOCKQUOTE>

<BLOCKQUOTE>

<HR ALIGN=CENTER>

<BR>

<NOTE><B>Note: </B>The program could use the Time$() function to check the actual 
time to see whether the command button can be active or not. However, the option buttons offer you an easier method for practicing with the two mouse cursors; you don't have 
to wait until 5:00 p.m. to see the difference.</NOTE>

<BR>

<HR ALIGN=CENTER>


</BLOCKQUOTE></BLOCKQUOTE>

<P>As soon as the user clicks the After 5:00 p.m. option button named optAfter, the optAfter_Click() event procedure changes the command button's MousePointer property to ARROW in line 3.

<BR>

<P>When the user clicks the 
Report command button, the command button's cmdReport_Click() event procedure executes (line 16). If the Before 5:00 pm option button is set, line 19 beeps. If the After 5:00 pm option button is set, a small label appears 
beneath the command button to 
inform you that the report can now be printed. (The label, named lblReport, is set to False when the program first begins.)

<BR>

<BR>

<A NAME="E68E177"></A>

<H3 ALIGN=CENTER>

<CENTER>

<FONT SIZE=5 COLOR="#FF0000"><B>Capturing Mouse Clicks and 
Movements</B></FONT></CENTER></H3>

<BR>

<P><FONT COLOR="#FF8000"><B><I>Concept: </I></B></FONT>The mouse supports three events that return movement and clicking information to the user through the form of event procedures. Unlike most event procedures, 
the mouse event procedures use arguments 
that return information such as the location of the mouse and the button that was clicked.

<BR>

<P>Table 23.6 lists the events most often supported by applications that deal with the mouse. These events return 
events for which you can write event procedures to respond to the user's mouse commands.

<BR>

<BR>

<P ALIGN=CENTER>

<CENTER>

<FONT COLOR="#000080"><B>Table 23.6. The events most often associated with the mouse.</B></FONT></CENTER>

<BR>



<TABLE  
BORDERCOLOR=#000040 BORDER=1 CELLSPACING=2 WIDTH="100%" CELLPADDING=2 >

<TR>

<TD VALIGN=top  BGCOLOR=#80FFFF ><FONT COLOR=#000080>

<I>Event</I>

</FONT>

<TD VALIGN=top  BGCOLOR=#80FFFF ><FONT COLOR=#000080>

<I>Description</I></FONT>

<TR>

<TD 
VALIGN=top  BGCOLOR=#80FFFF ><FONT COLOR=#000080>

DblClick

</FONT>

<TD VALIGN=top  BGCOLOR=#80FFFF ><FONT COLOR=#000080>

Generated when the user double-clicks a mouse button</FONT>

<TR>

<TD VALIGN=top  BGCOLOR=#80FFFF ><FONT COLOR=#000080>

MouseDown


</FONT>

<TD VALIGN=top  BGCOLOR=#80FFFF ><FONT COLOR=#000080>

Generated when the user presses a mouse button</FONT>

<TR>

<TD VALIGN=top  BGCOLOR=#80FFFF ><FONT COLOR=#000080>

MouseMove

</FONT>

<TD VALIGN=top  BGCOLOR=#80FFFF ><FONT COLOR=#000080>


Generated when the user moves the mouse</FONT>

<TR>

<TD VALIGN=top  BGCOLOR=#80FFFF ><FONT COLOR=#000080>

MouseUp

</FONT>

<TD VALIGN=top  BGCOLOR=#80FFFF ><FONT COLOR=#000080>

Generated when the user lets up on a mouse button</FONT>

</TABLE><P>The 
MouseDown, MouseMove, and MouseUp event procedures open with argument lists when you select them inside the Code window. Suppose that you wanted to respond to user clicks of the mouse when the user clicked the mouse over a form named frmApp. 
Here is the 
three event procedures' wrapper code that Visual Basic would open for you when you selected MouseDown, MouseMove, or MouseUp from the Code window's dropdown Proc listbox:

<BR>

<PRE>

<FONT COLOR="#000080">Sub frmApp_MouseDown (Button As Integer, Shift As 
Integer, X As Single, Y As Single)

End Sub

Sub frmApp_MouseMove (Button As Integer, Shift As Integer, X As Single, Y As Single)

End Sub

Sub frmApp_MouseUp (Button As Integer, Shift As Integer, X As Single, Y As Single)

End Sub</FONT></PRE>

<P>The 
argument lists for these procedures are so long that you may have to horizontally scroll the Code window to see the entire argument list.

<BR>

<P>Table 23.7 lists the descriptions for these four argument values. The values returned in the arguments 
describe something about the user's mouse press or mouse release. Your code can check the argument values to determine what needs to be known. For 
example, if you want to know the location of the mouse when the user clicked the mouse on the form, the X 
and Y arguments describe the number of twips from the left and top edge of the form that the user clicked.

<BR>

<BR>

<P ALIGN=CENTER>

<CENTER>

<FONT COLOR="#000080"><B>Table 23.7. The </B><B>MouseDown()</B><B> and </B><B>MouseUp()</B><B> 
arguments.</B></FONT></CENTER>

<BR>



<TABLE  BORDERCOLOR=#000040 BORDER=1 CELLSPACING=2 WIDTH="100%" CELLPADDING=2 >

<TR>

<TD VALIGN=top  BGCOLOR=#80FFFF ><FONT COLOR=#000080>

<I>Argument</I>

</FONT>

<TD VALIGN=top  BGCOLOR=#80FFFF ><FONT 
COLOR=#000080>

<I>Description</I></FONT>

<TR>

<TD VALIGN=top  BGCOLOR=#80FFFF ><FONT COLOR=#000080>

Button

</FONT>

<TD VALIGN=top  BGCOLOR=#80FFFF ><FONT COLOR=#000080>

Holds a number that represents the mouse button pressed. The value is 1 for the 
left button press, 2 for the right button press, and 4 for both or for the center button on a three-button mouse.</FONT>

<TR>

<TD VALIGN=top  BGCOLOR=#80FFFF ><FONT COLOR=#000080>

Shift

</FONT>

<TD VALIGN=top  BGCOLOR=#80FFFF ><FONT COLOR=#000080>


Describes the shifting key (if any) pressed at the same time that the user clicked or moved the mouse button. Shift holds 1 if the user pressed Shift during the mouse click, 2 for the Ctrl key, and 4 for the Alt key. If Shift contains a number other than 

1, 2, or 4, that number is the sum of two or more key presses just described. For example, if the user presses the Alt keys at the same time that the user pressed the mouse button, the value of Shift will be 5.</FONT>

<TR>

<TD VALIGN=top  BGCOLOR=#80FFFF 
><FONT COLOR=#000080>

X

</FONT>

<TD VALIGN=top  BGCOLOR=#80FFFF ><FONT COLOR=#000080>

Contains the horizontal twip form measurement where the user clicked or moved the mouse button.</FONT>

<TR>

<TD VALIGN=top  BGCOLOR=#80FFFF ><FONT COLOR=#000080>

Y


</FONT>

<TD VALIGN=top  BGCOLOR=#80FFFF ><FONT COLOR=#000080>

Contains the vertical twip form measurement where the user clicked or moved the mouse button.</FONT>

</TABLE><P>If the user double-clicks the mouse, Visual Basic generates both a MouseUp 
<I>and</I> a DblClick event. The MouseUp event procedure returns location and button information about the double-click (see Table 23.6), and the DblClick event should 
contain the code that you want executed upon the double-clicking of the mouse.

<BR>


<P>The MouseUp event occurs every time that the user lets up on a mouse button, whether the user lets up from a single click or from a double-click. Therefore, if you want to respond to a single click's MouseUp event but not to a double-click's MouseUp 

event, you'll have to set a module variable inside the DblClick event procedure that you can test to see which kind of release, a click or double-click, generated the MouseUp event.

<BR>

<BLOCKQUOTE>

<BLOCKQUOTE>

<HR ALIGN=CENTER>

<BR>

<NOTE><B>Note: 
</B>Depending on your computer, Visual Basic might generate a mouse movement event procedure every time that the user moves the mouse 10 to 15 twips across the form. Visual Basic doesn't generate a mouse movement event for <I>every</I> twip 
movement; most 
computers couldn't keep up with the events that would execute that fast.</NOTE>

<BR>

<HR ALIGN=CENTER>

</BLOCKQUOTE></BLOCKQUOTE>

<P><FONT COLOR="#FF8000"><B><I>Stop and Type: </I></B></FONT>Listing 23.3 contains a sample MouseUp() event procedure that 
demonstrates how the code can use the arguments to the procedure to learn more about the mouse movement. The code prints mouse 
information. You could write a similar set of mouse event procedures for the other mouse events and get a printed log of the 
mouse actions as you moved, clicked, and double-clicked the mouse.

<BR>

<P><FONT COLOR="#FF8000"><B><I>Review: </I></B></FONT>The mouse movement and clicking event procedures need additional information when a mouse event occurs. Through the argument 
list to the mouse event procedures, you can determine which button the user 
pressed, which key the user was pressing at the time of the click or mouse movement, and exactly where on the form the mouse was when the user generated the event.

<BR>

<P>


<FONT COLOR="#000080"><B>Listing 23.3. Code that checks the mouse after a button release.</B></FONT>

<BR>

<PRE>

<FONT COLOR="#000080">1: Sub frmApp_MouseUp (Button As Integer, Shift As Integer, X As Single, Y As Single)

2: ' Display text on the printer 
that describes the

3: ' mouse button press. The semicolon at the end of

4: ' the Printer.Print statements forces Visual

5: ' to keep the printer cursor on the same Print

6: ' line.

7:

8: ' Tell the user about the button pressed

9: Printer.Print 
&quot;Up: The button you released was the &quot;;

10: Select Case Button

11: Case 1: Printer.Print &quot;Left &quot;;

12: Case 2: Printer.Print &quot;Right &quot;;

13: Case 4: Printer.Print &quot;Middle &quot;;

14: End Select

15: Printer.Print 
&quot;button&quot;

16:

17: Printer.Print &quot;The mouse was at X position: &quot;;

18: Printer.Print X;

19: Printer.Print &quot;and Y position: &quot;;

20: Printer.Print Y

21: ' Print a blank line to separate for subsequent output

22: Printer.Print


23:

24: End Sub</FONT></PRE>

<P><FONT COLOR="#FF8000"><B><I>Analysis: </I></B></FONT>Line 1 collects the mouse button's release arguments. The argument tell the event procedure which button the user just released, which key, if any, was pressed at the 
time, and the exact twip 
coordinates of the mouse when the user released the mouse.

<BR>

<P>The rest of the event procedure proceeds to print the mouse information gathered from the arguments. Keep in mind that this event procedure will execute every 
time the user releases either mouse button, so the printer's output will continue as the user 
continues clicking the mouse.

<BR>

<BR>

<A NAME="E68E178"></A>

<H3 ALIGN=CENTER>

<CENTER>

<FONT SIZE=5 COLOR="#FF0000"><B>Homework</B></FONT></CENTER></H3>


<BR>

<BR>

<A NAME="E69E163"></A>

<H4 ALIGN=CENTER>

<CENTER>

<FONT SIZE=4 COLOR="#FF0000"><B>General Knowledge</B></FONT></CENTER></H4>

<BR>

<OL>

<LI>How many different scroll bar controls are there?

<BR>

<BR>

<LI>How do the scroll bars eliminate 
the typing of specific entries?

<BR>

<BR>

<LI>What do the LargeChange and SmallChange properties indicate?

<BR>

<BR>

<LI>How does a user trigger a LargeChange change of a scroll bar's value?

<BR>

<BR>

<LI>What do the Min and Max properties 
indicate?

<BR>

<BR>

<LI>What are the preferred naming prefixes for scroll bar controls?

<BR>

<BR>

<LI>True or false: You can initialize a scroll bar using a variable defined as an Integer data type.

<BR>

<BR>

<LI>What must you do to add the grid 
control to the Toolbox window?

<BR>

<BR>

<LI>What is the name of the custom control file that holds the grid control?

<BR>

<BR>

<LI>True or false: The user can read, change, and enter new values into the grid.

<BR>

<BR>

<LI>What is a <I>cell</I>?


<BR>

<BR>

<LI>True or false: When you adjust the grid's physical size on the form, the grid's size must be large enough to display all of the grid's rows and columns.

<BR>

<BR>

<LI>When can scroll bars appear on a grid?

<BR>

<BR>

<LI>What two 
property values, available only at runtime, specify an individual cell that you want to change or initialize with code?

<BR>

<BR>

<LI>What are the four property values that define selected cells?

<BR>

<BR>

<LI>How many different shapes can the mouse 
appear as over a control?

<BR>

<BR>

<LI>Which property describes the mouse cursor's appearance?

<BR>

<BR>

<LI>Technically, what is the text cursor called?

<BR>

<BR>

<LI>Technically, what is the mouse cursor called?

<BR>

<BR>

<LI>When would the 
0-Default and 1-Arrow MousePointer property values differ?

<BR>

<BR>

<LI>Which mouse cursor might be useful for reminding the user to wait a few seconds until a calculation completes?

<BR>

<BR>

<LI>How do the mouse movement events generate extra 
information that describe the buttons and location of the mouse?

<BR>

<BR>

<LI>True or false: When the user double-clicks a mouse button, two events actually take place.

<BR>

<BR>

</OL>

<BR>

<A NAME="E69E164"></A>

<H4 ALIGN=CENTER>

<CENTER>


<FONT SIZE=4 COLOR="#FF0000"><B>Find the Bug</B></FONT></CENTER></H4>

<BR>

<OL>

<LI>Kelly wants to use a grid control to hold a 5-by-5 table of weight readings that he needs for a chemistry experiment. After Kelly initializes the table, through code, 
and then presses a command button, he wants the code to fix the rows and columns for 
the entire table so that the user can't select additional cells. Sadly, Visual Basic imposes a limit that doesn't allow Kelly the freedom to fix all rows and columns. 
What is the maximum number of rows and columns that can be fixed in a table?

<BR>

<BR>

</OL>

<BR>

<A NAME="E69E165"></A>

<H4 ALIGN=CENTER>

<CENTER>

<FONT SIZE=4 COLOR="#FF0000"><B>Write Code That...</B></FONT></CENTER></H4>

<BR>

<OL>

<LI>Suppose 
that you were writing a program that needed the user to enter a temperature value from a range of 32 to 212 degrees. You want the user to enter the temperature reading using the relative position on a scroll bar. When the user clicks one of the 
scroll bar 
arrows, the scroll bar should adjust by 3 degrees. When the user clicks in the shaft on either side of the scroll bar, the scroll bar should adjust by 8 degrees. What would be appropriate Min, Max, SmallChange, and LargeChange properties?

<BR>

<BR>


</OL>

<BR>

<A NAME="E69E166"></A>

<H4 ALIGN=CENTER>

<CENTER>

<FONT SIZE=4 COLOR="#FF0000"><B>Extra Credit</B></FONT></CENTER></H4>

<BR>

<P>Write a program that contains one command button labeled Change Mouse that displays a different mouse cursor 
every time the user clicks the button. Use a module variable to keep track of the current mouse pointer's value.

<BR>

<P ALIGN=LEFT>

<A HREF="velp11.htm" TARGET="_self"><IMG SRC="purprev.gif" WIDTH = 32 HEIGHT = 32 BORDER = 0 ALT="Previous Page"></A>


<A HREF="#I0" TARGET="_self"><IMG SRC="purtop.gif" WIDTH = 32 HEIGHT = 32 BORDER = 0 ALT="Page Top"></A>

<A HREF="index.htm" TARGET="_self"><IMG SRC="purtoc.gif" WIDTH = 32 HEIGHT = 32 BORDER = 0 ALT="TOC"></A>

<A HREF="vel24.htm" TARGET="_self"><IMG 
SRC="purnext.gif" WIDTH = 32 HEIGHT = 32 BORDER = 0 ALT="Next Page"></A>


</BODY></HTML>







