<HTML>

<HEAD>

<TITLE>Visual Basic in 12 Easy Lessons velans.htm </TITLE>

<LINK REL="ToC" HREF="index.htm">

<LINK REL="Index" HREF="htindex.htm">

<LINK REL="Previous" HREF="velxb.htm"></HEAD>

<BODY BGCOLOR="#FFFFFF" TEXT="#000000" LINK="#0000FF" 
VLINK="#800080">

<A NAME="I0"></A>

<H2>Visual Basic in 12 Easy Lessons velans.htm</H2>

<P ALIGN=LEFT>

<A HREF="velxb.htm" TARGET="_self"><IMG SRC="purprev.gif" WIDTH = 32 HEIGHT = 32 BORDER = 0 ALT="Previous Page"></A>

<A HREF="index.htm" 
TARGET="_self"><IMG SRC="purtoc.gif" WIDTH = 32 HEIGHT = 32 BORDER = 0 ALT="TOC"></A>


<HR ALIGN=CENTER>

<P>

<UL>

<UL>

<UL>


<LI>

<A HREF="#E68E186" >Lesson 1, <A HREF="vel01.htm">Unit 1</A></A>

<LI>

<A HREF="#E68E187" >Lesson 1, <A HREF="vel02.htm">Unit 2</A></A>

<LI>

<A HREF="#E68E188" >Lesson 2, <A HREF="vel03.htm">Unit 3</A></A>

<LI>

<A HREF="#E68E189" >Lesson 2, <A 
HREF="vel04.htm">Unit 4</A></A>

<LI>

<A HREF="#E68E190" >Lesson 3, <A HREF="vel05.htm">Unit 5</A></A>

<LI>

<A HREF="#E68E191" >Lesson 3, <A HREF="vel06.htm">Unit 6</A></A>

<LI>

<A HREF="#E68E192" >Lesson 4, <A HREF="vel07.htm">Unit 7</A></A>

<LI>


<A HREF="#E68E193" >Lesson 4, <A HREF="vel08.htm">Unit 8</A></A>

<LI>

<A HREF="#E68E194" >Lesson 5, <A HREF="vel09.htm">Unit 9</A></A>

<LI>

<A HREF="#E68E195" >Lesson 5, <A HREF="vel10.htm">Unit 10</A></A>

<LI>

<A HREF="#E68E196" >Lesson 6, <A 
HREF="vel11.htm">Unit 11</A></A>

<LI>

<A HREF="#E68E197" >Lesson 6, <A HREF="vel12.htm">Unit 12</A></A>

<LI>

<A HREF="#E68E198" >Lesson 7, <A HREF="vel13.htm">Unit 13</A></A>

<LI>

<A HREF="#E68E199" >Lesson 7, <A HREF="vel14.htm">Unit 14</A></A>


<LI>

<A HREF="#E68E200" >Lesson 8, <A HREF="vel15.htm">Unit 15</A></A>

<LI>

<A HREF="#E68E201" >Lesson 8, <A HREF="vel16.htm">Unit 16</A></A>

<LI>

<A HREF="#E68E202" >Lesson 9, <A HREF="vel17.htm">Unit 17</A></A>

<LI>

<A HREF="#E68E203" >Lesson 9, 
<A HREF="vel18.htm">Unit 18</A></A>

<LI>

<A HREF="#E68E204" >Lesson 10, <A HREF="vel19.htm">Unit 19</A></A>

<LI>

<A HREF="#E68E205" >Lesson 10, <A HREF="vel20.htm">Unit 20</A></A>

<LI>

<A HREF="#E68E206" >Lesson 10, <A HREF="vel21.htm">Unit 
21</A></A>

<LI>

<A HREF="#E68E207" >Lesson 11, <A HREF="vel22.htm">Unit 22</A></A>

<LI>

<A HREF="#E68E208" >Lesson 12, Unit 23</A>

<LI>

<A HREF="#E68E209" >Lesson 12, Unit 24</A></UL></UL></UL>

<HR ALIGN=CENTER>

<A NAME="E66E39"></A>

<H1 
ALIGN=CENTER>

<CENTER>

<FONT SIZE=6 COLOR="#FF0000"><B>Answers</B></FONT></CENTER></H1>

<BR>

<BR>

<A NAME="E68E186"></A>

<H3 ALIGN=CENTER>

<CENTER>

<FONT SIZE=5 COLOR="#FF0000"><B>Lesson 1, <A HREF="vel01.htm">Unit 1</A></B></FONT></CENTER></H3>


<BR>

<OL>

<LI>A program is a list of instructions that tells the computer exactly what to do.

<BR>

<LI>Absolutely nothing. A computer is a dumb machine that cannot function without the detailed instructions of a program.

<BR>

<LI>You can buy a 
program or write one yourself.

<BR>

<LI>The programs that you write do exactly what you want them to do once you get any bugs out of them.

<BR>

<LI>Writing your own programs takes lots of time and effort.

<BR>

<LI>True

<BR>

<LI>Code is a program.


<BR>

<LI>An error that you accidentally place in the programs that you write.

<BR>

<LI>There are syntax errors and logic errors.

<BR>

<LI>You've just put a syntax error in the program.

<BR>

<LI>Visual Basic finds syntax errors for you.

<BR>


<LI>Logic errors are much harder to find than syntax errors.

<BR>

<LI>With hardwired control panels.

<BR>

<LI>Non-electrical people could program computers.

<BR>

<LI>On and off states of electricity.

<BR>

<LI>The addition of the computer keyboard 
introduced programming to the masses.

<BR>

<LI>Code is the program that you and other programmers create.

<BR>

<LI>Machine language

<BR>

<LI>FORTRAN

<BR>

<LI>BASIC

<BR>

<LI>Beginner's All-purpose Symbolic Instruction Code

<BR>

<LI>Procedural 
programming languages lend themselves well to text-based DOS environments.

<BR>

<LI>Event-driven programs lend themselves well to Windows-like environments.

<BR>

<LI>Graphical User Interface

<BR>

<LI>Two events might be a keypress or a mouse click.


<BR>

<LI>The user might trigger any event in any order.

<BR>

<LI>False. Visual Basic does require some procedural-like programming for certain functions.

<BR>

<LI>True

<BR>

</OL>

<BR>

<A NAME="E68E187"></A>

<H3 ALIGN=CENTER>

<CENTER>

<FONT 
SIZE=5 COLOR="#FF0000"><B>Lesson 1, <A HREF="vel02.htm">Unit 2</A></B></FONT></CENTER></H3>

<BR>

<OL>

<LI>True

<BR>

<LI>True

<BR>

<LI>Add a shortcut Ctrl + Shift + V keystroke using the File Properties menu after highlighting the Visual Basic icon 
in the program group.

<BR>

<LI>False

<BR>

<LI>Select File Run, then type A:\SETUP (You can type the command in uppercase or lowercase letters).

<BR>

<LI>The value used if you don't type a different value.

<BR>

<LI>VBPRIMER

<BR>

<LI>Select File 
Exit to exit Visual Basic and return to Windows.

<BR>

<LI>You may lose some or all of the program you're writing.

<BR>

<LI>The Code window, Form window, Project window, Properties window, and the Toolbox window. 

<BR>

<LI>Visual Basic uses the Form 
window for the application's background.

<BR>

<LI>False

<BR>

<LI>True. Click on the dialog control box's upper-left corner.

<BR>

<LI>Use the access keys to more quickly execute menu commands.

<BR>

<LI>The toolbar provides push button access to 
common menu commands.

<BR>

<LI>The Visual Basic menu bar follows the same naming standard for most of its menu commands as other major Windows programs use.

<BR>

<LI>Eleven

<BR>

<LI>Not all menu or toolbar commands are available at all times.

<BR>


<LI>The measurement indicators describe the size and location of elements on the Form window.

<BR>

<LI>A twip is 1/1440th of an inch.

<BR>

<LI>The grid provides snap-to locations that keep controls in alignment with the grid's dots when you set the 
appropriate Options Environment command.

<BR>

</OL>

<BR>

<A NAME="E68E188"></A>

<H3 ALIGN=CENTER>

<CENTER>

<FONT SIZE=5 COLOR="#FF0000"><B>Lesson 2, <A HREF="vel03.htm">Unit 3</A></B></FONT></CENTER></H3>

<BR>

<OL>

<LI>You must first load the 
application using File Open.

<BR>

<LI>The project file holds the application's description.

<BR>

<LI>.MAK

<BR>

<LI>Load the project and look in the Project window.

<BR>

<LI>To let the user interact with and direct the program. Users click, scroll, 
and manage the controls as a way to respond to a program's activities.

<BR>

<LI>The Toolbox window holds the controls that you can add to your form. (Don't you think &quot;Control window&quot; would be a better name?)

<BR>

<LI>The user needs an easy 
way to exit a program.

<BR>

<LI>False. The user cannot directly change text displayed in a label control.

<BR>

<LI>The text box control.

<BR>

<LI>You can control the font size and style of the text.

<BR>

<LI>The user can move the text cursor 
forward and backward in a text box as well as use the Ins and Del keys to insert and delete text.

<BR>

<LI>The command button control

<BR>

<LI>False

<BR>

<LI>True

<BR>

<LI>The user deselects a check box by selecting the box a second time.

<BR>


<LI>The frame control

<BR>

<LI>True

<BR>

<LI>True

<BR>

<LI>False

<BR>

<LI>True

<BR>

<LI>The form works as the application's background and holds the controls that you place there.

<BR>

<LI>True

<BR>

<LI>The user can click the command button 
with the mouse or press the Alt+ shortcut access keystroke if the command button's label contains an underlined character. There is a third way as well (not documented in this unit): The user can press Tab until 
the command button is highlighted and press 
Enter.

<BR>

<LI>The command button next to the combo box informs Visual Basic that there is data to be added to the list.

<BR>

<LI>Pamela should replace the simple combo box with a dropdown combo box control.

<BR>

</OL>

<BR>

<A NAME="E68E189"></A>


<H3 ALIGN=CENTER>

<CENTER>

<FONT SIZE=5 COLOR="#FF0000"><B>Lesson 2, <A HREF="vel04.htm">Unit 4</A></B></FONT></CENTER></H3>

<BR>

<OL>

<LI>An event might be a user keypress, mouse movement, mouse click, menu selection, or virtually anything else that 
a user can do to respond to a program.

<BR>

<LI>There are too many ways for the user to interact with the visual controls on the screen. A text-based program dictates the order of the user's involvement.

<BR>

<LI>False. Sometimes Windows captures 
events for its own system use.

<BR>

<LI>Properties are attributes that differentiate the actions and behaviors of controls.

<BR>

<LI>Event procedures

<BR>

<LI>Here are four properties (from a huge list of many others): font size, font style, the 
control size, and the control color

<BR>

<LI>True

<BR>

<LI>True

<BR>

<LI>The Properties window

<BR>

<LI>The process of updating the program later.

<BR>

<LI>The three-letter prefix describes what kind of control you're working with.

<BR>


<LI>Users will more speedily adapt to your programs when they follow Windows standards.

<BR>

<LI>AUTOLOAD.MAK

<BR>

<LI>CONSTANT.TXT

<BR>

<LI>Names given to data values that make them easier to remember.

<BR>

<LI>False

<BR>

<LI>Double-click the 
control on the Form window.

<BR>

<LI>The first part of the event procedure is the control name, followed by an underscore, followed by the name of the event (and parentheses come after that to let you know you're working with a procedure name and not a 
control name).

<BR>

<LI>Wrapper code

<BR>

<LI>End

<BR>

<LI>The controls and form names inside the project.

<BR>

<LI>Usually the project and form names are the same with a .MAK and a .FRM extension respectively.

<BR>

<LI>A form

<BR>

<LI>A combo 
box

<BR>

<LI>A command button

<BR>

<LI>Victor, less is better! Use fewer fonts or you'll confuse the user looking at your screen.

<BR>

<LI>A. End is a reserved word.

<BR>B. Names cannot begin with a number.

<BR>C. Names cannot contain special 
characters such as a dollar sign.

<BR>D. Names cannot contain hyphens.

<BR>

</OL>

<BR>

<A NAME="E68E190"></A>

<H3 ALIGN=CENTER>

<CENTER>

<FONT SIZE=5 COLOR="#FF0000"><B>Lesson 3, <A HREF="vel05.htm">Unit 5</A></B></FONT></CENTER></H3>

<BR>

<OL>


<LI>The control that has Window&#146;s current attention. You can tell which one it is by the highlighting.

<BR>

<LI>The order in which the controls receive the focus as the user presses the Tab key.

<BR>

<LI>TabIndex

<BR>

<LI>The Name property.


<BR>

<LI>False

<BR>

<LI>True

<BR>

<LI>CONSTANT.TXT

<BR>

<LI>An icon is a picture.

<BR>

<LI>A point is 1/72nd of an inch.

<BR>

<LI>A selection of colors from which you can choose.

<BR>

<LI>D. All of the above.

<BR>

<LI>Enabled.

<BR>

<LI>0, 
1, or 2 representing left-justified, centered, or right-justified.

<BR>

<LI>False; rarely will you have to set or change more than a few properties because the default values are so common for many of the properties.

<BR>

<LI>A carriage return 
character sends the text cursor to the next line on the screen.

<BR>

<LI>Dynamic Data Exchange.

<BR>

<LI>True due to the Visible property.

<BR>

<LI>Left, Right, Top, Width.

<BR>

<LI>The label control.

<BR>

<LI>The PasswordChar property.

<BR>


<LI>The Cancel property.

<BR>

<LI>Use the control dropdown selection box.

<BR>

</OL>

<BR>

<A NAME="E68E191"></A>

<H3 ALIGN=CENTER>

<CENTER>

<FONT SIZE=5 COLOR="#FF0000"><B>Lesson 3, <A HREF="vel06.htm">Unit 6</A></B></FONT></CENTER></H3>

<BR>


<OL>

<LI>Yes, the form is an object as is the other controls.

<BR>

<LI>False, label controls have no <U>MultiLine</U> property.

<BR>

<LI>A pixel is the smallest screen element available.

<BR>

<LI>The <U>WindowState</U> property.

<BR>

<LI>Chopping 
off part of text.

<BR>

<LI>False

<BR>

<LI>False, text box controls can have scroll bars.

<BR>

<LI>Set the AutoSize property to False.

<BR>

<LI>False.

<BR>

<LI>False.

<BR>

<LI>The TabIndex property controls the focus order.

<BR>

<LI>The Load 
event.

<BR>

<LI>The Load event occurs before the Activate event occurs.

<BR>

<LI>The Code window contains a Proc dropdown list box that contains all the events for any given object.

<BR>

<LI>Labels can never receive the focus.

<BR>

<LI>The name of 
the event procedure must be txtLastName_Change().

<BR>

<LI>The KeyPreview property determines whether the form or control gets the keystrokes.

<BR>

<LI>The Caption property.

<BR>

<LI>Add the access key to a label that describes the text box contents. 
Make sure that the TabIndex of the label is sequentially one less than the TabIndex of the text box.

<BR>

<LI>The labels could hide too many other form objects.

<BR>

<LI>The label would automatically expand horizontally before you have a chance to set 
the WordWrap property.

<BR>

</OL>

<BR>

<A NAME="E68E192"></A>

<H3 ALIGN=CENTER>

<CENTER>

<FONT SIZE=5 COLOR="#FF0000"><B>Lesson 4, <A HREF="vel07.htm">Unit 7</A></B></FONT></CENTER></H3>

<BR>

<OL>

<LI>A named storage location in memory.

<BR>


<LI>The Dim statement.

<BR>

<LI>A data type is a category of data that all Visual Basic values fall into.

<BR>

<LI>Integer, Long, Single, Double, Currency, Variant, String

<BR>

<LI>Integer

<BR>

<LI>Double

<BR>

<LI>Single, Double, and Currency


<BR>

<LI>E means Exponent.

<BR>

<LI>Scientific notation provides a shortcut notation for a wide range of numeric values.

<BR>

<LI>False

<BR>

<LI>True; variables can change but they do not have to.

<BR>

<LI>You'll help eliminate bugs that can occur 
when you misspell a variable name.

<BR>

<LI>A fixed-length string can only accept a preset number of characters while variable-length strings can accept strings of changing-length as a program runs.

<BR>

<LI>True

<BR>

<LI>True

<BR>

<LI>A. 7

<BR>B. 
9

<BR>C. 16

<BR>D. (parentheses would be required around the addition to  compute a true average)

<BR>E. 6

<BR>F. 40

<BR>

<LI>Merge the strings together

<BR>

<LI>+ is used for either addition or string concatenation (depending on the context of its 
use) and &amp; is used strictly for concatenation.

<BR>

<LI>Dim SqFoot As Single

<BR>

<LI>SalesPrice = Price / Discount

<BR>Tax = TaxRate * SalesPrice

<BR>

<LI>Name is a reserved word and cannot be a variable name.

<BR>

<LI>Judy cannot define more 
than one variable with the same name. There is an advanced exception to this rule that you'll learn in Lesson 7.

<BR>

<LI>Larry cannot use a dollar sign or commas in constant values.

<BR>

</OL>

<BR>

<A NAME="E68E193"></A>

<H3 ALIGN=CENTER>

<CENTER>


<FONT SIZE=5 COLOR="#FF0000"><B>Lesson 4, <A HREF="vel08.htm">Unit 8</A></B></FONT></CENTER></H3>

<BR>

<OL>

<LI>A condition is a relation that you can check for in your program.

<BR>

<LI>False, conditional tests produce one of two results, true and 
false

<BR>

<LI>False but the parentheses help clarify the code

<BR>

<LI>&lt;, &gt;, &lt;=, &gt;=, =, &lt;&gt;

<BR>

<LI>A. False

<BR>B. True

<BR>C. True

<BR>D. True

<BR>E. True

<BR>F. False

<BR>

<LI>The ASCII table

<BR>

<LI>The If statement 
makes decisions (as well as the Select Case)

<BR>

<LI>The If-Else statement

<BR>

<LI>False

<BR>

<LI>A nested If is an If statement within another If statement

<BR>

<LI>The Select Case

<BR>

<LI>Four: Case value, Case Is, Case To, and Case Else


<BR>

<LI>Nothing happens and control falls to the statement following the End Select statement

<BR>

<LI>The code in the Case Else executes before control returns to the statement following the End Select statement

<BR>

<LI>Case To

<BR>

<LI>Case Is


<BR>

<LI>If (M = 3) AND (P = 4) Then

<BR> TestIt = &quot;Yes&quot;

<BR>End If

<BR>

<LI>If (d &gt;= 3) Or (p &lt; 9) Then

<BR>

<LI>Select Case Age

<BR> Case Is &lt;0: lblTitle.Text = &quot;Age Error&quot;

<BR> Case Is &lt;5: lblTitle.Text = 
&quot;Too young&quot;

<BR> Case 5: lblTitle.Text = &quot;Kindergarten&quot;

<BR> Case 6 To 11: lblTitle.Text = &quot;Elementary&quot;

<BR> lblSchool.Text = &quot;Lincoln&quot;

<BR> Case 12 To 15: lblTitle.Text = &quot;Intermediate&quot;

<BR> 
lblSchool.Text = &quot;Washington&quot;

<BR> Case 16 To 18: lblTitle.Text = &quot;High School&quot;

<BR> lblSchool.Text = &quot;Betsy Ross&quot;

<BR> Case Else: lblTitle.Text = &quot;College&quot;

<BR> lblSchool.Text = &quot;University&quot;

<BR>End 
Select

<BR>

<LI>There is no End Else statement.

<BR>

</OL>

<BR>

<A NAME="E68E194"></A>

<H3 ALIGN=CENTER>

<CENTER>

<FONT SIZE=5 COLOR="#FF0000"><B>Lesson 5, <A HREF="vel09.htm">Unit 9</A></B></FONT></CENTER></H3>

<BR>

<OL>

<LI>A comment that 
helps explain a program's logic.

<BR>

<LI>To help aid programmers with program maintenance.

<BR>

<LI>False

<BR>

<LI>True

<BR>

<LI>Two: The Rem statement and the apostrophe remark

<BR>

<LI>To state the programmer's name and the date the program 
was written

<BR>To describe in the <U>(general)</U> procedure the overall goal of the program

<BR>To describe at the top of all procedures the overall goal of that procedure

<BR>To explain tricky or difficult statements so that others who modify the 
program later can understand the lines of code without having to decipher cryptic code

<BR>

<LI>Programmers

<BR>

<LI>False; add remarks when you write your program so you'll be able to understand the program more easily when you modify it later.

<BR>


<LI>False

<BR>

<LI>Specify a type value that signifies which group of command buttons you need.

<BR>

<LI>By specifying a msg value.

<BR>

<LI>Modal indicates whether or not the user must respond to a message box before switching to another 
application.

<BR>

<LI>True

<BR>

<LI>False

<BR>

<LI>To get answers

<BR>

<LI>Strings and variants

<BR>

<LI>Check for a null string, &quot;&quot;, to see if the user pressed Cancel or OK.

<BR>

<LI>Press the OK command button (or press Enter which 
clicks the OK command button)

<BR>

<LI>Four

<BR>

<LI>None

<BR>

<LI>Use a proper type value

<BR>

<LI>Seven

<BR>

<LI>Seven

<BR>

<LI>Make sure that the type argument includes the value of 4096 or the MB_SYSTEMMODAL named constant.

<BR>

<LI>Bob 
can use the only the apostrophe if he wants to include a remark at the end of a line. Bob must change the code to this:

<BR>

<LI>  do until (endOfFile) ' Continue until the end 

<BR>

</OL>

<BR>

<A NAME="E68E195"></A>

<H3 ALIGN=CENTER>

<CENTER>


<FONT SIZE=5 COLOR="#FF0000"><B>Lesson 5, <A HREF="vel10.htm">Unit 10</A></B></FONT></CENTER></H3>

<BR>

<OL>

<LI>A loop is the repetition of a block of Visual Basic statements.

<BR>

<LI>Five

<BR>

<LI>Four

<BR>

<LI>True

<BR>

<LI>A loop that 
repeats forever (at least until the user intervenes to stop the loop)

<BR>

<LI>Keep asking the user for the answer, using a loop, until the user enters a correct response.

<BR>

<LI>9

<BR>

<LI>10

<BR>

<LI>0

<BR>

<LI>10

<BR>

<LI>1

<BR>

<LI>The 
For statement

<BR>

<LI>The Do statement

<BR>

<LI>The Do While loop continues executing while a relational test is true, whereas the Do Until loop continues executing while a relational test is false.

<BR>

<LI>Visual Basic checks the relational test 
at the top of the loop using a Do While statement, whereas, Visual Basic checks the relational test at the bottom of the loop using a Do-Loop While statement.

<BR>

<LI>An iteration is one complete loop cycle.

<BR>

<LI>Use a negative Step value.

<BR>


<LI>The increment's Step value must be negative.

<BR>

<LI>The Exit Do and the Exit For statements end loops before their natural termination.

<BR>

<LI>Dim Guess, Ans As Integer

<BR>Guess = 34 ' The user must guess this

<BR>Do

<BR> Ans = 
InputBox(&quot;Make a guess...&quot;, &quot;Guessing Game&quot;)

<BR> ' Tell the user about the wrong guess

<BR> If (Ans &lt;&gt; Guess) Then

<BR> MsgBox &quot;You guessed incorrectly. Try again.&quot;

<BR> End If

<BR>Loop While Ans &lt;&gt; Guess


<BR>

<LI>Larry changes the variable named i inside the loop, keeping the For loop's controlling variable from ever triggering the end of the loop.

<BR>

<LI>Kim must switch the starting and ending values like this:

<BR>For I = 1 To 100 Step 1

<BR>


</OL>

<BR>

<A NAME="E68E196"></A>

<H3 ALIGN=CENTER>

<CENTER>

<FONT SIZE=5 COLOR="#FF0000"><B>Lesson 6, <A HREF="vel11.htm">Unit 11</A></B></FONT></CENTER></H3>

<BR>

<OL>

<LI>Arrays let you step through large amounts of data without the need to 
reference multiple variable names.

<BR>

<LI>A single item from the array's list of values

<BR>

<LI>The array subscript is the number that references different array elements.

<BR>

<LI>One

<BR>

<LI>20

<BR>

<LI>True

<BR>

<LI>Use the subscript


<BR>

<LI>The Static statement defines arrays

<BR>

<LI>1

<BR>

<LI>The For loop works best for array processing.

<BR>

<LI>List and combo boxes

<BR>

<LI>False

<BR>

<LI>True as long as the MultiSelect property is set to True.

<BR>

<LI>True

<BR>


<LI>The methods initialize, count, and remove items from list and combo box controls.

<BR>

<LI>The AddItem method

<BR>

<LI>True

<BR>

<LI>False

<BR>

<LI>True

<BR>

<LI>True

<BR>

<LI>The Selected method

<BR>

<LI>False

<BR>

<LI>The Sorted 
property

<BR>

<LI>Static StdAges(3) As Integer

<BR>

<LI>The MultiSelect property

<BR>

<LI>Sub cmdGoAway_Click()

<BR> lstVals.Clear

<BR>End Sub

<BR>

<LI>The command button can trigger an event procedure that uses the AddItem method to add the new 
item to the combo box.

<BR>

<LI>Carla cannot define a list box as if the list box were a variable array. Carla must use the list box control on the Toolbox window to place a list box on the form.

<BR>

</OL>

<BR>

<A NAME="E68E197"></A>

<H3 
ALIGN=CENTER>

<CENTER>

<FONT SIZE=5 COLOR="#FF0000"><B>Lesson 6, <A HREF="vel12.htm">Unit 12</A></B></FONT></CENTER></H3>

<BR>

<OL>

<LI>The option button

<BR>

<LI>The check box

<BR>

<LI>Option buttons imitate older radios with push button station 
selectors.

<BR>

<LI>The first option button will no longer be selected.

<BR>

<LI>True

<BR>

<LI>The Alignment property determines if the option or check box description appears to the right or left of the button or check box.

<BR>

<LI>The Value 
property

<BR>

<LI>The Value property

<BR>

<LI>False

<BR>

<LI>True

<BR>

<LI>A holder of other controls such as option buttons.

<BR>

<LI>False

<BR>

<LI>A special character that performs an action on the screen.

<BR>

<LI>Concatenate a 
combination of carriage-return/line feed character strings within text to break the lines onto separate label lines.

<BR>

<LI>Changes a number to its ASCII character equivalent.

<BR>

<LI>An array of controls that are the same control type.

<BR>


<LI>All arrays, including control arrays, have only one name.

<BR>

<LI>By a subscript

<BR>

<LI>Zero

<BR>

<LI>One

<BR>

<LI>Index

<BR>

<LI>By displaying a message box that makes sure you want to create a control array.

<BR>

<LI>cmdAll_DblClick 
(Index As Integer)

<BR>

<LI>Opal needs to draw her application's option buttons <I>within</I> their frames, not move them into the frames.

<BR>

</OL>

<BR>

<A NAME="E68E198"></A>

<H3 ALIGN=CENTER>

<CENTER>

<FONT SIZE=5 COLOR="#FF0000"><B>Lesson 7, 
<A HREF="vel13.htm">Unit 13</A></B></FONT></CENTER></H3>

<BR>

<OL>

<LI>An argument is a value that you pass to a function inside the function's parentheses.

<BR>

<LI>False

<BR>

<LI>True

<BR>

<LI>False

<BR>

<LI>There are three different integer 
functions because there are different ways to round numbers.

<BR>

<LI>A. 61

<BR>B. -62

<BR>C. -61

<BR>D. 422

<BR>

<LI>False; <U>CInt()</U> is a true rounding function whereas Int() and Fix() always round positive arguments down to the integer equal 
to or lower than the argument.

<BR>

<LI>The Asc() function is the mirror-image function to Chr$().

<BR>

<LI>A. &quot;ABCDEFG&quot;

<BR>B. &quot;abcdefg&quot;

<BR>

<LI>Anything would hold the string &quot;78.1&quot;

<BR>

<LI>A. S

<BR>B. Sam


<BR>C. 

<BR>D. ams

<BR>E. ams

<BR>

<LI>True, see question #18 and #19.

<BR>

<LI>True

<BR>

<LI>Str$() (or Str())

<BR>

<LI>Pass the numeric value to <U>Str$()</U> before concatenating the value to the prompting string.

<BR>

<LI>Send to 
<U>Len()</U> a double-precision variable and multiply the result by 250.

<BR>

<LI>Dim ANum, ANumSq As Single

<BR>ANum = Val(InputBox$(&quot;Enter a number to square&quot;))

<BR>MsgBox &quot;The square of your number is&quot; &amp; Str$(Sqr(ANum))

<BR>


<LI>First = InputBox$(&quot;What is your first name?&quot;)

<BR>Last = InputBox$(&quot;What is your last name?&quot;)

<BR>MsgBox &quot;Your name has&quot; &amp; Str$(Len(First) + Len(Last)) &amp; &quot;letters&quot;

<BR>

<LI>ValAsc = Asc(&quot;P&quot;)


<BR>

<LI>Rudy needs to convert the weight value to a long integer because he is computing a value too large for an integer result.

<BR>

</OL>

<BR>

<A NAME="E68E199"></A>

<H3 ALIGN=CENTER>

<CENTER>

<FONT SIZE=5 COLOR="#FF0000"><B>Lesson 7, <A 
HREF="vel14.htm">Unit 14</A></B></FONT></CENTER></H3>

<BR>

<OL>

<LI>True

<BR>

<LI>The time and date functions get their values from your computer's internal clock and calendar.

<BR>

<LI>24-hour times do not use the AM or PM designators. Add 12 to 
all times after 12:59 PM to get the 24-hour time.

<BR>

<LI>True

<BR>

<LI>False

<BR>

<LI>19:54

<BR>

<LI>Date$() returns a string and Date() returns a variant data type.

<BR>

<LI>False; Visual Basic supports only a Now() function.

<BR>

<LI>Now() 
returns a value based on the 12-hour clock.

<BR>

<LI>False

<BR>

<LI>False; Date and Time (statements not functions) set your computer's date and time.

<BR>

<LI>Date$()

<BR>

<LI>Timer() returns the number of seconds since midnight as a 
double-precision value.

<BR>

<LI>A byte is a character of memory.

<BR>

<LI>The VarType 7 data type

<BR>

<LI>TimeValue() accepts three argument values, the hour, minute, and second, and forms a time whereas Hour(), Minute(), and Second() all accept a 
full time value and return individual pieces of the time.

<BR>

<LI>A logical value is the result of a relational comparison.

<BR>

<LI>Format() and Format$()

<BR>

<LI>Format() returns a variant data type and Format$() returns a string.

<BR>

<LI>A 
thousands separator is a comma (or period for some international settings) that separates every three digits to the left of the decimal point in values more than 999.

<BR>

<LI>The &quot;Fixed&quot; fixed-format string does not enclose negative values in 
parentheses and does not display a thousands separator in large numbers.

<BR>

<LI>Time$ will not accept 12-hour values that contain the AM or PM designator. You can use the Right$() function to see if the user happened to enter AM or PM.

<BR>

</OL>


<BR>

<A NAME="E68E200"></A>

<H3 ALIGN=CENTER>

<CENTER>

<FONT SIZE=5 COLOR="#FF0000"><B>Lesson 8, <A HREF="vel15.htm">Unit 15</A></B></FONT></CENTER></H3>

<BR>

<OL>

<LI>Technically, the answer is false. We're splitting hairs, however. An event 
procedure is a specialized form of a subroutine procedure.

<BR>

<LI>Use the Call statement to call subroutine procedures.

<BR>

<LI>Use the function procedure's name inside an expression or statement.

<BR>

<LI>You can select from the View menu bar 
command or type Sub or Function below another procedure in the Code window.

<BR>

<LI>If a dollar sign appears after the function name, the function returns a string.

<BR>

<LI>A function procedure returns a value back to the calling procedure.

<BR>


<LI>Assign the function's return value to the function name as if the function name were a variable.

<BR>

<LI>F2

<BR>

<LI>The programmer must supply the code for function procedures.

<BR>

<LI>Module

<BR>

<LI>.BAS

<BR>

<LI>You do not yet know how 
to pass data between procedures.

<BR>

<LI>Option Base and Option Explicit

<BR>

<LI>True

<BR>

<LI>True

<BR>

<LI>Sub PrReport()

<BR>

<BR>End

<BR>

<LI>Function GetValue()

<BR>

<BR>End Function

<BR>

<LI>GetPi = 3.14159

<BR>

<LI>There are no 
parentheses around the argument list so you cannot use the <U>Call</U> keyword.

<BR>

</OL>

<BR>

<A NAME="E68E201"></A>

<H3 ALIGN=CENTER>

<CENTER>

<FONT SIZE=5 COLOR="#FF0000"><B>Lesson 8, <A HREF="vel16.htm">Unit 16</A></B></FONT></CENTER></H3>


<BR>

<OL>

<LI>Local

<BR>

<LI>Module

<BR>

<LI>Global

<BR>

<LI>False

<BR>

<LI>True

<BR>

<LI>True

<BR>

<LI>Global

<BR>

<LI>Module

<BR>

<LI>As global constants

<BR>

<LI>Defined global named constants

<BR>

<LI>Nowhere else in the program 
are you allowed to assign values to constants.

<BR>

<LI>In the (general) procedure of a non-form module.

<BR>

<LI>True; one can be local to one procedure and one local to another. You can also have a local variable that has the same name as a global 
variable. The local variable will be the active variable inside its procedure.

<BR>

<LI>The values in local variables go away when the procedure ends.

<BR>

<LI>The sending procedure

<BR>

<LI>The receiving procedure

<BR>

<LI>False

<BR>

<LI>The 
variables that you pass are local to the calling function so the receiving function needs to know the data types of the arguments received.

<BR>

<LI>False

<BR>

<LI>False; you can pass several arguments to a function procedure but return only one value.


<BR>

<LI>Two

<BR>

<LI>Passed data may be changed by the receiving procedure and those changes remain in effect when the sending procedure regains control.

<BR>

<LI>Passed data cannot be changed by the receiving procedure except within the boundaries 
of the receiving procedure.

<BR>

<LI>Use the ByVal keyword or enclose passed arguments in parentheses.

<BR>

<LI>The UBound() function

<BR>

<LI>Global LastName As String

<BR>Global Age As Integer

<BR>

<LI>Global Const NDAYS = 7

<BR>Global Const 
NMONTHS = 12

<BR>

<LI>A. You must initialize a constant and constants cannot have  data type declarations.

<BR>B. Constants cannot have data type declarations.

<BR>C. Always define constants using the Const keyword.

<BR>D. You cannot initialize a 
global variable at the time that  you define the variable.

<BR>

<LI>Merle should never code the subscript value inside a receiving array's parentheses. Leave the parentheses blank and use the UBoumd() function inside the procedure to find the highest 
subscript in the array.

<BR>

</OL>

<BR>

<A NAME="E68E202"></A>

<H3 ALIGN=CENTER>

<CENTER>

<FONT SIZE=5 COLOR="#FF0000"><B>Lesson 9, <A HREF="vel17.htm">Unit 17</A></B></FONT></CENTER></H3>

<BR>

<OL>

<LI>File data

<BR>

<LI>The user can select 
from drives, paths, and filenames when you use a dialog box. The user can too easily make mistakes when entering a filename in response to an input box.

<BR>

<LI>A set of controls that get user information.

<BR>

<LI>Add a frame to the form that holds 
the file controls. The frame lets you group the file controls together without interfering with other controls such as other list boxes.

<BR>

<LI>Set the frame's Visible property to True or False.

<BR>

<LI>Three

<BR>

<LI>At runtime

<BR>

<LI>A 
pattern, using the * and ? filename wildcard characters, that determine which files are to be displayed in the file list box.

<BR>

<LI>When one file control changes, that change usually affects other file controls.

<BR>

<LI>Manage the drive list box 
first because more is affected by the drive list box change than by changes made to the other file controls.

<BR>

<LI>The directory and the filename list box controls.

<BR>

<LI>The filename list box control is the only control that needs to be updated 
when the user changes the directory list box.

<BR>

<LI>The DidCancel variable contains either True or False.

<BR>

<LI>The Change event.

<BR>

<LI>True

<BR>

<LI>Both ACCT* and ACCT*.* work.

<BR>

<LI>Both *.ex? and *.ex* work.

<BR>


<LI>drvDisk.Drive = &quot;d:&quot;

<BR>dirList.Path = &quot;d:\vbprimer\direng&quot; ' Root directory

<BR>

</OL>

<BR>

<A NAME="E68E203"></A>

<H3 ALIGN=CENTER>

<CENTER>

<FONT SIZE=5 COLOR="#FF0000"><B>Lesson 9, <A HREF="vel18.htm">Unit 
18</A></B></FONT></CENTER></H3>

<BR>

<OL>

<LI>A collection of related data, programs, or a document.

<BR>

<LI>To hold long-term data.

<BR>

<LI>True as long as the files reside in separate directories or disks.

<BR>

<LI>Open

<BR>

<LI>Input, 
Output, and Append

<BR>

<LI>the file number associates a file with a number.

<BR>

<LI>Visual Basic creates the file.

<BR>

<LI>Visual Basic overwrites the file.

<BR>

<LI>Visual Basic creates the file.

<BR>

<LI>Visual Basic adds to the end of the 
file.

<BR>

<LI>Visual Basic displays an error.

<BR>

<LI>1 to 255

<BR>

<LI>False

<BR>

<LI>FILES=

<BR>

<LI>FreeFile()

<BR>

<LI>Close

<BR>

<LI>Close ensures that the file is safely stored away in case a power failure occurs.

<BR>

<LI>The 
statement closes all open files.

<BR>

<LI>Write#

<BR>

<LI>A comma

<BR>

<LI>A pound sign

<BR>

<LI>A quotation mark

<BR>

<LI>Input#

<BR>

<LI>A line from a file

<BR>

<LI>The Eof() function tests for the end of file.

<BR>

<LI>Line Input#

<BR>


<LI>&quot;Peach&quot;, 34.54, 1, &quot;98&quot;

<BR>

<LI>Rusty must use the following Line Input# command:

<BR>Line Input #1, MyRecord

<BR>

<LI>Close 3, 19

<BR>

<LI>Open &quot;names.dat&quot; for Append As #7

<BR>

<LI>Sub ReadData ()

<BR>' Reads 
array data from a file and reports the data

<BR>' Assume that 200 values were read

<BR> Static CNames(200) As String, CBalc(200) As Currency

<BR> Static CDate(200) As Variant, CRegion(200) As Integer

<BR> Dim NumVals As Integer ' Count of records

<BR> 
Dim ctr As Integer ' For loop control

<BR> 

<BR> NumVals = 1 ' Start the count

<BR> ' Reads the file records assuming

<BR> ' four values on each line

<BR> Open &quot;c:\mktg.dat&quot; For Input As #1

<BR> Input #1, CNames(NumVals), CBalc(NumVals), 
CDate(NumVals), CRegion(NumVals)

<BR> Do Until (Eof(1) = True)

<BR> NumVals = NumVals + 1 ' Increment counter

<BR> If (NumVals = 201) Then

<BR> MsgBox &quot;First 200 values are now read&quot;, MB_ICONEXCLAMATION

<BR> Exit Do

<BR> End If

<BR> Input 
#1, CNames(NumVals), CBalc(NumVals), CDate(NumVals), CRegion(NumVals)

<BR> Loop

<BR>

<BR> ' When loop ends, NumVals holds one too many

<BR> NumVals = NumVals - 1

<BR> 

<BR> ' The following loop is for reporting the data

<BR> For ctr = 1 To NumVals


<BR> ' Code goes here that outputs the array

<BR> ' data to the printer

<BR> '

<BR> Next ctr

<BR> Close #1

<BR>

<BR>End Sub

<BR>

</OL>

<BR>

<A NAME="E68E204"></A>

<H3 ALIGN=CENTER>

<CENTER>

<FONT SIZE=5 COLOR="#FF0000"><B>Lesson 10, <A 
HREF="vel19.htm">Unit 19</A></B></FONT></CENTER></H3>

<BR>

<OL>

<LI>The Menu Design window designs menus.

<BR>

<LI>True

<BR>

<LI>False

<BR>

<LI>True

<BR>

<LI>mnu

<BR>

<LI>A pull-down menu that appears when you click a menu bar item.

<BR>


<LI>The up and down arrow command buttons let you rearrange menu options.

<BR>

<LI>The left and right arrow command buttons let you indent or remove indentions that indicate submenu items.

<BR>

<LI>Checked

<BR>

<LI>Visible

<BR>

<LI>True

<BR>


<LI>A single hyphen

<BR>

<LI>Click

<BR>

<LI>Chr$(8) (the backspace character) right-justifies menu bar items.

<BR>

<LI>True

<BR>

<LI>Frank needs to concatenate the Chr$(8) at runtime in the Form_Load() procedure.

<BR>

<LI>mnuWindowSplit

<BR>


<LI>mnuViewBar1 and mnuViewBar2

<BR>

<LI>Select the Enabled property to gray out certain menu items.

<BR>

</OL>

<BR>

<A NAME="E68E205"></A>

<H3 ALIGN=CENTER>

<CENTER>

<FONT SIZE=5 COLOR="#FF0000"><B>Lesson 10, <A HREF="vel20.htm">Unit 
20</A></B></FONT></CENTER></H3>

<BR>

<OL>

<LI>The Timer control

<BR>

<LI>The Interval property

<BR>

<LI>The user does not see the timer control on the running program's form.

<BR>

<LI>Nothing.

<BR>

<LI>False; the timer control triggers its own 
events.

<BR>

<LI>Milliseconds

<BR>

<LI>False

<BR>

<LI>One thousandth of a second

<BR>

<LI>Ten seconds

<BR>

<LI>One minute

<BR>

<LI>tmr

<BR>

<LI>The Interval property can hold values larger than integers can hold.

<BR>

<LI>Timer()

<BR>


<LI>False; you can only trigger a timer event to occur repeatedly

<BR>

<LI>The Windows environment can sometimes cause a Visual Basic application to skip a time interval

<BR>

<LI>Add a timer control to the project with an Interval property value of 
1000 so the timer event occurs every second. Update the time display inside the timer control's Timer() event procedure.

<BR>

</OL>

<BR>

<A NAME="E68E206"></A>

<H3 ALIGN=CENTER>

<CENTER>

<FONT SIZE=5 COLOR="#FF0000"><B>Lesson 10, <A 
HREF="vel21.htm">Unit 21</A></B></FONT></CENTER></H3>

<BR>

<OL>

<LI>Print

<BR>

<LI>The Windows Print Manager collects all printing and routes the output to the appropriate printer.

<BR>

<LI>The Windows Print Manager recognizes all installed printers 
so that individual programs do not have to.

<BR>

<LI>Online means that the printer is ready and has paper.

<BR>

<LI>Issue a message box that warns the user of subsequent output.

<BR>

<LI>The Printer object is a generic Visual Basic object that 
collects all printed output and sends that output to the Windows Print Manager.

<BR>

<LI>True

<BR>

<LI>The smallest point on a printer or screen.

<BR>

<LI>The Print method

<BR>

<LI>False

<BR>

<LI>False

<BR>

<LI>The positive numbers each contain 
a hidden plus sign that does not print.

<BR>

<LI>A zone is a kind of built-in tab stop that occurs every 14 columns of printed output.

<BR>

<LI>True

<BR>

<LI>Use Chr$(34)

<BR>

<LI>True

<BR>

<LI>The distance between the bottoms of the characters 
on one line to the bottoms of the characters on the line above.

<BR>

<LI>Caroline is not taking into account the fact that Windows printers support different fonts and font sizes that may require calculation to find appropriate page lengths.

<BR>


<LI>The second Print slips 10 spaces before printing, whereas the first Print begins printing in column 10.

<BR>

<LI>Line1Line2

<BR>

<LI>The Spanish N is &ntilde;.

<BR>

<LI>Printer.Print Tab(57); &quot;America&quot;

<BR>

</OL>

<BR>

<A 
NAME="E68E207"></A>

<H3 ALIGN=CENTER>

<CENTER>

<FONT SIZE=5 COLOR="#FF0000"><B>Lesson 11, <A HREF="vel22.htm">Unit 22</A></B></FONT></CENTER></H3>

<BR>

<OL>

<LI>The line and shape controls let you draw geometric shapes on a form.

<BR>

<LI>Six

<BR>


<LI>BorderStyle

<BR>

<LI>The Shape property

<BR>

<LI>The picture box control and the image control

<BR>

<LI>The image control is more efficient than the picture box control.

<BR>

<LI>Bitmaps, metafiles, and icons.

<BR>

<LI>The Shrink property


<BR>

<LI>The Picture property

<BR>

<LI>LoadPicture()

<BR>

<LI>Jean cannot change the line appearance for any line thicker than one twip.

<BR>

<LI>Jean would have to draw several smaller thick lines to create the appearance of a single dashed line.


<BR>

<LI>Nothing appears when the LoadPicture() function executes because of the null argument.

<BR>

<LI>Indicate the blue border using the BorderColor property, the red diagonal line using the FillColor property, and the green interior with the 
BackColor property.

<BR>

</OL>

<BR>

<A NAME="E68E208"></A>

<H3 ALIGN=CENTER>

<CENTER>

<FONT SIZE=5 COLOR="#FF0000"><B>Lesson 12, Unit 23</B></FONT></CENTER></H3>

<BR>

<OL>

<LI>2

<BR>

<LI>The user can select from the scroll bar's relative 
position instead of typing specific values.

<BR>

<LI>The amount that the scroll bar values change when the user adjusts a scroll bar's value.

<BR>

<LI>By clicking within the shaft on either side of the scroll bar.

<BR>

<LI>The smallest and largest 
values that a scroll bar can represent.

<BR>

<LI>hsb and vsb are the preferred naming prefixes.

<BR>

<LI>True

<BR>

<LI>Make sure that the grid's custom control file is added to the project.

<BR>

<LI>GRID.VBX

<BR>

<LI>False

<BR>

<LI>One of the 
individual row and column intersection locations inside a grid.

<BR>

<LI>False

<BR>

<LI>When the grid's size is not large enough to display the full grid.

<BR>

<LI>Row and Col

<BR>

<LI>SelEndCol, SelEndRow, SelStartCol, and SelEndCol

<BR>

<LI>12


<BR>

<LI>MousePointer

<BR>

<LI>The caret

<BR>

<LI>The cursor

<BR>

<LI>When a control's default MousePointer property is not the arrow. This typically occurs only for custom controls.

<BR>

<LI>The hourglass

<BR>

<LI>Through event procedure 
arguments

<BR>

<LI>True

<BR>

<LI>The number of fixed rows and fixed columns must be no more than two fewer than the total number of rows and columns. You will have to change the grid's Enabled property to False if you don't want the user to have any 
additional control over a grid.

<BR>

<LI>Min: 32, Max: 212, SmallChange: 3, LargeChange: 8

<BR>

</OL>

<BR>

<A NAME="E68E209"></A>

<H3 ALIGN=CENTER>

<CENTER>

<FONT SIZE=5 COLOR="#FF0000"><B>Lesson 12, Unit 24</B></FONT></CENTER></H3>

<BR>

<OL>


<LI>Logic and syntax errors

<BR>

<LI>Syntax error

<BR>

<LI>A debugger is an online tool that lets you hunt down errors (bugs) in a program.

<BR>

<LI>Use the Options Environment command to request interactive syntax checking.

<BR>

<LI>True

<BR>


<LI>False

<BR>

<LI>Syntax errors are easier than logic errors to find.

<BR>

<LI>Design mode, run mode, and break mode

<BR>

<LI>Design mode

<BR>

<LI>Look at Visual Basic's title bar to see the name of the current mode.

<BR>

<LI>Break mode

<BR>


<LI>Press Ctrl+Break, Select from the Run menu, click the break button on the toolbar, or set a breakpoint

<BR>

<LI>A specific line that Visual Basic halts execution at during a program's run.

<BR>

<LI>By highlighting the line of code and pressing F9, 
clicking on the toolbar, or by selecting from the Debug menu

<BR>

<LI>Visual Basic highlights the breakpoint line

<BR>

<LI>When Visual Basic reaches a breakpoint, Visual Basic halts the program's run before the breakpoint line executes.

<BR>


<LI>Executing a program one line at a time, controllable by yourself instead of by Visual Basic.

<BR>

<LI>The single footprint requests that Visual Basic single step through every line of code and the double footprint requests that Visual Basic single 
step through the breakpoint's current procedure but not single step through procedures called by the 
current procedure.

<BR>

<LI>From the Instant Watch dialog box, you can look at variables and control values. From the Add Watch dialog box, you can 
request that Visual Basic enter a break mode when a certain expression becomes true or when a certain value is changed.

<BR>

<LI>The Instant Watch is most handy for looking at variables during a breakpoint.

<BR>

<LI>The Debug window

<BR>

<LI>The 
Print method

<BR>

<LI>The assignment statement

<BR>

<LI>Jennifer must precede her Print methods with the Debug object.

<BR>

</OL><P ALIGN=LEFT>

<A HREF="velxb.htm" TARGET="_self"><IMG SRC="purprev.gif" WIDTH = 32 HEIGHT = 32 BORDER = 0 ALT="Previous 
Page"></A>

<A HREF="#I0" TARGET="_self"><IMG SRC="purtop.gif" WIDTH = 32 HEIGHT = 32 BORDER = 0 ALT="Page Top"></A>

<A HREF="index.htm" TARGET="_self"><IMG SRC="purtoc.gif" WIDTH = 32 HEIGHT = 32 BORDER = 0 ALT="TOC"></A>

<A 

</BODY></HTML>







