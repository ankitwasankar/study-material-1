<HTML>

<HEAD>

<TITLE>Visual Basic in 12 Easy Lessons velp08.htm </TITLE>

<LINK REL="ToC" HREF="index.htm">

<LINK REL="Index" HREF="htindex.htm">

<LINK REL="Next" HREF="vel17.htm">

<LINK REL="Previous" HREF="vel16.htm"></HEAD>

<BODY BGCOLOR="#FFFFFF" 
TEXT="#000000" LINK="#0000FF" VLINK="#800080">

<A NAME="I0"></A>

<H2>Visual Basic in 12 Easy Lessons velp08.htm</H2>

<P ALIGN=LEFT>

<A HREF="vel16.htm" TARGET="_self"><IMG SRC="purprev.gif" WIDTH = 32 HEIGHT = 32 BORDER = 0 ALT="Previous Page"></A>

<A 
HREF="index.htm" TARGET="_self"><IMG SRC="purtoc.gif" WIDTH = 32 HEIGHT = 32 BORDER = 0 ALT="TOC"></A>

<A HREF="vel17.htm" TARGET="_self"><IMG SRC="purnext.gif" WIDTH = 32 HEIGHT = 32 BORDER = 0 ALT="Next Page"></A>


<HR ALIGN=CENTER>

<P>

<UL>

<UL>

<UL>

<LI>

<A HREF="#E68E126" >Stop &amp; Type</A>

<UL>

<LI>

<A HREF="#E69E112" >The Program's Description</A>

<LI>

<A 
HREF="#E69E113" >The Program's Action</A>

<LI>

<A HREF="#E69E114" >The External Module's Code</A>

<LI>

<A HREF="#E69E115" >Descriptions</A>

<LI>

<A HREF="#E69E116" >The Form Module's Code</A>

<LI>

<A HREF="#E69E117" >Descriptions</A>

<LI>

<A 
HREF="#E69E118" >Close the Application</A></UL></UL></UL></UL>

<HR ALIGN=CENTER>

<A NAME="E66E24"></A>

<H1 ALIGN=CENTER>

<CENTER>

<FONT SIZE=6 COLOR="#FF0000"><B>Project 8</B></FONT></CENTER></H1>

<BR>

<A NAME="E67E27"></A>

<H2 ALIGN=CENTER>


<CENTER>

<FONT SIZE=6 COLOR="#FF0000"><B>Modular Programming</B></FONT></CENTER></H2>

<BR>

<BR>

<A NAME="E68E126"></A>

<H3 ALIGN=CENTER>

<CENTER>

<FONT SIZE=5 COLOR="#FF0000"><B>Stop &amp; Type</B></FONT></CENTER></H3>

<BR>

<P>This lesson taught 
you how to break your programs into separate code components consisting of a form, subroutine procedures, function procedures, and external module files. The various pieces of the application work together to comprise the final 
program that the user sees 
when he or she runs the program.

<BR>

<P>By breaking your program into components, you can build upon past work. You can use subroutine procedures and function procedures that you've written before. You can define files of global constants just as 
Microsoft did by providing you with 
CONSTANT.TXT. When you reuse general-purpose code that you've written before, you save program development time and make debugging much simpler.

<BR>

<P>In this lesson, you saw the following:

<BR>

<UL>

<LI>What 
subprograms are all about

<BR>

<BR>

<LI>How subroutine procedures differ from function procedures

<BR>

<BR>

<LI>When to use an external module file

<BR>

<BR>

<LI>Why Visual Basic supports three kinds of variable scope

<BR>

<BR>

<LI>How you can 
pass local values from one procedure to another

<BR>

<BR>

</UL>

<BR>

<A NAME="E69E112"></A>

<H4 ALIGN=CENTER>

<CENTER>

<FONT SIZE=4 COLOR="#FF0000"><B>The Program's Description</B></FONT></CENTER></H4>

<BR>

<P>Figure P8.1 shows the PROJECT8.MAK 
Project window. As you can see, the project consists of a form file containing the form, controls, and code pertaining to the form such as all the controls' event procedures. The project also contains the CONSTANT.TXT 
named constant file as well as a file 
named PROJECT8.BAS, an external module file designed with this application in mind.

<BR>

<P><B> <A HREF="p8vel01.gif">Figure P8.1. Project 8's Project window contains three files.</A></B>

<BR>

<P>The purpose of this project's application is to use 
general-purpose procedures, named constants, an external module, and the controls with which you've worked before to tie together this lesson's material.

<BR>

<BR>

<A NAME="E69E113"></A>

<H4 ALIGN=CENTER>

<CENTER>

<FONT SIZE=4 COLOR="#FF0000"><B>The 
Program's Action</B></FONT></CENTER></H4>

<BR>

<P>When you load and run PROJECT8.MAK, you'll first see an input box asking for a number from 1 to 100. A default value of 50 is used in case the user wants to press Enter to accept the default. The input 
box keeps displaying until the user enters a number 
between 1 and 100, or clicks Cancel or OK to get rid of the input box and accept the default value of 50.

<BR>

<P>After the user enters a valid number, Figure P8.2 shows the PROJECT8.MAK application's 
form that appears after the user enters a valid number. (The number entered by the user before Figure P8.2's form appeared was 47.)

<BR>

<P><B> <A HREF="p8vel02.gif">Figure P8.2. Project 8's form window.</A></B>

<BR>

<P>The program assumes that the 
user's number is a decimal base 10 number and that the number represents a Fahrenheit temperature reading. If you click the Base 16 option button, you'll see the hexadecimal equivalent to the user's number next to the 
Converted number: description. Click 
the Base 8 option button and the octal (base 8) representation of the user's number appears in the Bases frame.

<BR>

<P>The Temperatures frame changes the user's Fahrenheit temperature to Celsius and back again, depending on the chosen option button.


<BR>

<P>If the user clicks the Change Number command button, the user will be asked to enter a new number.

<BR>

<BR>

<A NAME="E69E114"></A>

<H4 ALIGN=CENTER>

<CENTER>

<FONT SIZE=4 COLOR="#FF0000"><B>The External Module's 
Code</B></FONT></CENTER></H4>

<BR>

<P>Listing P8.1 contains the complete code listing for the PROJECT8.BAS external module. As you can see, the module contains global named constants as well as a general-purpose function that accepts a Fahrenheit 
single-precision value and returns the 
Celsius equivalent. You can add this external module file to any application you write that needs to convert Fahrenheit temperatures to Celsius.

<BR>

<P>

<FONT COLOR="#000080"><B>Listing P8.1. The external module 
file contains the application's named constants.</B></FONT>

<BR>

<PRE>

<FONT COLOR="#000080">1: Option Explicit

2:

3: ' Define global constants for the application

4:

5: ' Number base constants that match Index values

6: Global Const BASE10 = 10


7: Global Const BASE8 = 8

8: Global Const BASE16 = 16

9:

10: ' Temperature constants that match Index values

11: Global Const CELSIUS = 0

12: Global Const FAHRENHEIT = 1

13:

14: Function GetCel (ByVal Faren As Integer)

15: ' Assumes that a 
Fahrenheit temperature

16: ' is passed. Returns that temp as Celsius

17: GetCel = (Faren + 40) * (5 / 9) - 40

18: End Function</FONT></PRE>

<BR>

<A NAME="E69E115"></A>

<H4 ALIGN=CENTER>

<CENTER>

<FONT SIZE=4 
COLOR="#FF0000"><B>Descriptions</B></FONT></CENTER></H4>

<BR>

<P>1: Requires that all variables in the module be defined (or be arguments passed from elsewhere).

<BR>

<P>2: Blank lines help separate parts of code.

<BR>

<P>3: A remark helps explain 
the purpose of the (general) procedure.

<BR>

<P>4: Blank lines help separate parts of code.

<BR>

<P>5: A remark that explains how the subsequent named constants relate to Index subscripting properties of the two option button control arrays.

<BR>


<P>6: Define a name for the base option button control array item with 10 for an Index. Through the Property window, these three option buttons have Index property values of 10, 0, and 16.

<BR>

<BLOCKQUOTE>

<BLOCKQUOTE>

<HR ALIGN=CENTER>

<BR>


<NOTE>6: Instead of coding subscripts, the rest of the program uses named constants.</NOTE>

<BR>

<HR ALIGN=CENTER>

</BLOCKQUOTE></BLOCKQUOTE>

<P>7: Define a name for the option button control array item with 8 for an Index.

<BR>

<P>8: Define a name 
for the option button control array item with 16 for an Index.

<BR>

<P>9: Blank lines help separate parts of code.

<BR>

<P>10: A remark helps explain the purpose of the subsequent code.

<BR>

<P>11: Define a name for the temperature option button 
control array item with 0 for an Index. Through the Property window, these two option buttons have Index property values of 0 and 1.

<BR>

<P>12: Define a name for the option button control array item with 1 for an Index.

<BR>

<P>13: A blank line 
separates the (general) procedure from the function procedure.

<BR>

<P>14: The general-purpose function procedure begins, receiving a single argument by value.

<BR>

<P>15: A remark helps explain the purpose of the function.

<BR>

<P>16: The remark 
continues on the next line.

<BR>

<P>17: Calculate the return value by assigning the converted Fahrenheit temperature to the function name.

<BR>

<BLOCKQUOTE>

<BLOCKQUOTE>

<HR ALIGN=CENTER>

<BR>

<NOTE>17: Always return a value when writing function 
procedures.</NOTE>

<BR>

<HR ALIGN=CENTER>

</BLOCKQUOTE></BLOCKQUOTE>

<P>18: Terminate the function.

<BR>

<BR>

<A NAME="E69E116"></A>

<H4 ALIGN=CENTER>

<CENTER>

<FONT SIZE=4 COLOR="#FF0000"><B>The Form Module's Code</B></FONT></CENTER></H4>

<BR>


<P>Listing P8.2 contains the complete code listing for the PROJECT8.MAK file that uses the PROJECT8.BAS external module.

<BR>

<P>

<FONT COLOR="#000080"><B>Listing P8.2. The form module's code controls the program flow.</B></FONT>

<BR>

<PRE>

<FONT 
COLOR="#000080">1: Sub Form_Load ()

2: Call GetUserNum ' Stored in module file

3: optbase(BASE10).Value = True

4: optTemp(FAHRENHEIT).Value = True

5:

6: ' Trigger the event procedures

7: ' for option button frames

8: Call optBase_Click(BASE10)

9: 
Call optTemp_Click(FAHRENHEIT)

10: End Sub

11:

12: Sub GetUserNum ()

13: ' A subroutine procedure that gets a

14: ' number from 1 to 100 from the user

15: ' and displays the number on the form

16: Dim UserNum As Variant

17: Do

18: UserNum = 
InputBox(&quot;Enter a number from 1 to 100&quot;, &quot;Ask&quot;, &quot;50&quot;)

19: If (UserNum = &quot;&quot;) Then ' Check for Cancel

20: ' Restore previous value

21: UserNum = lblUserNum.Caption

22: Exit Sub

23: End If

24: Loop While (UserNum 
&lt; 1) Or (UserNum &gt; 100)

25: lblUserNum.Caption = UserNum

26: End Sub

27:

28: Sub optBase_Click (Index As Integer)

29: ' Determines what base the converted

30: ' number displays in the base frame

31: Select Case Index

32: Case BASE10:

33: ' 
No change

34: lblBaseOut.Caption = lblUserNum.Caption

35: Case BASE16:

36: lblBaseOut.Caption = Hex$(lblUserNum.Caption)

37: Case BASE8:

38: lblBaseOut.Caption = Oct$(lblUserNum.Caption)

39: End Select

40: End Sub

41:

42: Sub optTemp_Click (Index 
As Integer)

43: ' Determines what temperature appears

44: Select Case Index

45: Case CELSIUS:

46: lblTempOut.Caption = GetCel(Val(lblUserNum.Caption))

47: Case FAHRENHEIT:

48: lblTempOut.Caption = lblUserNum.Caption

49: End Select

50: End Sub

51:


52: Sub cmdChange_Click ()

53: ' Asks the user once again for the number

54: ' and calls appropriate click event

55: ' procedures to update two frames

56: Call GetUserNum

57: optbase(BASE10).Value = True

58: optTemp(FAHRENHEIT).Value = True

59: Call 
optBase_Click(BASE10)

60: Call optTemp_Click(FAHRENHEIT)

61: End Sub

62:

63: Sub cmdExit_Click ()

64: End

65: End Sub</FONT></PRE>

<BR>

<A NAME="E69E117"></A>

<H4 ALIGN=CENTER>

<CENTER>

<FONT SIZE=4 
COLOR="#FF0000"><B>Descriptions</B></FONT></CENTER></H4>

<BR>

<P>1: Define the procedure that executes right before the user sees the form.

<BR>

<P>2: Call the subroutine procedure that asks the user for a number between 1 and 100.

<BR>

<P>3: 
Activate the Base 10 option button. When the form finally appears, the Base 10 option button will be selected.

<BR>

<P>4: Activate the Fahrenheit option button. When the form finally appears, the Fahrenheit option button will be selected.

<BR>

<P>5: A 
blank line helps separate parts of a program.

<BR>

<P>6: A remark explains subsequent code.

<BR>

<P>7: The remark continues.

<BR>

<P>8: Trigger a click event procedure for the option buttons with the Bases frame. This event initializes the frame.


<BR>

<BLOCKQUOTE>

<BLOCKQUOTE>

<HR ALIGN=CENTER>

<BR>

<NOTE>8: Code can trigger event procedures.</NOTE>

<BR>

<HR ALIGN=CENTER>

</BLOCKQUOTE></BLOCKQUOTE>

<P>9: Trigger a click event procedure for the option buttons with the Fahrenheit frame. This 
event initializes the frame.

<BR>

<P>10: Terminate the subroutine event procedure.

<BR>

<P>11: A blank line separates the Form_Load() procedure from the subroutine procedure that follows.

<BR>

<P>12: Define the subroutine procedure that requests a 
number from the user.

<BR>

<P>13: A remark explains subsequent code.

<BR>

<P>14: The remark continues.

<BR>

<P>15: The remark continues.

<BR>

<P>16: Define a variant variable that will capture the result of the input box.

<BR>

<P>17: Begin a loop 
that will ask the user for a number.

<BR>

<P>18: Display an input box and wait for the user's response.

<BR>

<P>19: Don't change the user's previously selected number (or the property defaults if this is the first time the user has been asked for a 
number) if the user clicks the Cancel command button.

<BR>

<BLOCKQUOTE>

<BLOCKQUOTE>

<HR ALIGN=CENTER>

<BR>

<NOTE>19: Always check for the user's Cancel command button selection.</NOTE>

<BR>

<HR ALIGN=CENTER>

</BLOCKQUOTE></BLOCKQUOTE>

<P>20: A 
remark explains subsequent code.

<BR>

<P>21: Put the number back to its current value.

<BR>

<P>22: Terminate the subroutine procedure early.

<BR>

<P>23: Terminate the If that checked for the Cancel command button press.

<BR>

<P>24: Keep asking 
until the user enters a valid number within the range required.

<BR>

<P>25: The user has entered a valid number in the input box, so display the result.

<BR>

<P>26: Terminate the subroutine procedure.

<BR>

<P>27: A blank line separates the 
GetUserNum() procedure from the event procedure that follows.

<BR>

<P>28: Define the event procedure for the Bases option button control array.

<BR>

<P>29: A remark explains the purpose of the event procedure.

<BR>

<P>30: The remark continues on the 
next line.

<BR>

<P>31: The Index argument can be one of three values: 10, 16, or 8, as set in the Properties window for the three Index values. Test the value in the index to determine which option button to respond to.

<BR>

<P>32: If the user clicked 
the Base 10 option button...

<BR>

<P>33: A remark describes the code that follows.

<BR>

<P>34: The label inside the Bases frame matches the user's entered number because both are base 10.

<BR>

<P>35: If the user clicked the Base 16 option button...


<BR>

<P>36: Display the user's entered number as an hexadecimal string.

<BR>

<P>37: If the user clicked the Base 8 option button...

<BR>

<P>38: Display the user's entered number as an octal string.

<BR>

<P>39: Terminate the Select Case.

<BR>


<P>40: Terminate the event procedure.

<BR>

<P>41: A blank line separates the two event procedures.

<BR>

<P>42: Define the event procedure for the Temperatures option button control array.

<BR>

<P>43: A remark explains the purpose of the event 
procedure.

<BR>

<P>44: The Index argument can be one of two values: 0 or 1, as set in the Properties window for the two Index values. Test the value in the index to determine which option button to respond to.

<BR>

<P>45: If the user clicked the 
Celsius option button...

<BR>

<P>46: Display the user's entered number as a Celsius temperature.

<BR>

<P>47: If the user clicked the Fahrenheit option button...

<BR>

<P>48: The label inside the Temperature's frame matches the user's entered number 
because both are considered to be in Fahrenheit.

<BR>

<P>49: Terminate the Select Case statement.

<BR>

<P>50: Terminate the end procedure.

<BR>

<P>51: A blank line separates the event procedures.

<BR>

<P>52: Define the event procedure that executes 
when the user clicks Change Number.

<BR>

<P>53: A remark explains the purpose of the event procedure.

<BR>

<P>54: The remark continues on the next line.

<BR>

<P>55: The remark continues on the next line.

<BR>

<P>56: Call the subroutine procedure 
that gets a number from the user. <I>No</I> arguments are required.

<BR>

<BLOCKQUOTE>

<BLOCKQUOTE>

<HR ALIGN=CENTER>

<BR>

<NOTE>56: If the subroutine procedure requires no arguments, do not use parentheses.</NOTE>

<BR>

<HR ALIGN=CENTER>


</BLOCKQUOTE></BLOCKQUOTE>

<P>57: Make the Base 10 Bases option button the default.

<BR>

<P>58: Make the Fahrenheit 10 Bases option button the default.

<BR>

<P>59: Trigger the event procedure that clicks the default Base 10 option button so that the 
Bases frame displays the user's number just entered.

<BR>

<P>60: Trigger the event procedure that clicks the default Fahrenheit option button so that the Temperatures frame displays the user's number just entered.

<BR>

<P>61: Terminate the event 
procedure.

<BR>

<P>62: A blank line separates the event procedures.

<BR>

<P>63: Define the event procedure for the Exit command button.

<BR>

<P>64: End the program when this event triggers.

<BR>

<P>65: Terminate the event procedure.

<BR>

<BR>

<A 
NAME="E69E118"></A>

<H4 ALIGN=CENTER>

<CENTER>

<FONT SIZE=4 COLOR="#FF0000"><B>Close the Application</B></FONT></CENTER></H4>

<BR>

<P>You can now exit the application and exit Visual Basic. The next lesson explains how to add disk file access to your 
applications so that you can store and retrieve long-term data in disk files.

<BR>

<P ALIGN=LEFT>

<A HREF="vel16.htm" TARGET="_self"><IMG SRC="purprev.gif" WIDTH = 32 HEIGHT = 32 BORDER = 0 ALT="Previous Page"></A>

<A HREF="#I0" TARGET="_self"><IMG 
SRC="purtop.gif" WIDTH = 32 HEIGHT = 32 BORDER = 0 ALT="Page Top"></A>

<A HREF="index.htm" TARGET="_self"><IMG SRC="purtoc.gif" WIDTH = 32 HEIGHT = 32 BORDER = 0 ALT="TOC"></A>

<A HREF="vel17.htm" TARGET="_self"><IMG SRC="purnext.gif" WIDTH = 32 HEIGHT = 
32 BORDER = 0 ALT="Next Page"></A>


</BODY></HTML>







