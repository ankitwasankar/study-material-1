<HTML>

<HEAD>

<TITLE>Visual Basic in 12 Easy Lessons vel13.htm </TITLE>

<LINK REL="ToC" HREF="index.htm">

<LINK REL="Index" HREF="htindex.htm">

<LINK REL="Next" HREF="vel14.htm">

<LINK REL="Previous" HREF="velp06.htm"></HEAD>

<BODY BGCOLOR="#FFFFFF" 
TEXT="#000000" LINK="#0000FF" VLINK="#800080">

<A NAME="I0"></A>

<H2>Visual Basic in 12 Easy Lessons vel13.htm</H2>

<P ALIGN=LEFT>

<A HREF="velp06.htm" TARGET="_self"><IMG SRC="purprev.gif" WIDTH = 32 HEIGHT = 32 BORDER = 0 ALT="Previous Page"></A>

<A 
HREF="index.htm" TARGET="_self"><IMG SRC="purtoc.gif" WIDTH = 32 HEIGHT = 32 BORDER = 0 ALT="TOC"></A>

<A HREF="vel14.htm" TARGET="_self"><IMG SRC="purnext.gif" WIDTH = 32 HEIGHT = 32 BORDER = 0 ALT="Next Page"></A>


<HR ALIGN=CENTER>

<P>

<UL>

<UL>

<UL>

<LI>

<A HREF="#E68E98" >What You'll Learn</A>

<LI>

<A HREF="#E68E99" >A Function Review</A>

<LI>

<A HREF="#E68E100" 
>The Numeric Functions</A>

<UL>

<LI>

<A HREF="#E69E89" >Converting Numbers</A></UL>

<LI>

<A HREF="#E68E101" >The String Functions</A>

<LI>

<A HREF="#E68E102" >General Functions</A>

<LI>

<A HREF="#E68E103" >Homework</A>

<UL>

<LI>

<A 
HREF="#E69E90" >General Knowledge</A>

<LI>

<A HREF="#E69E91" >Write Code That...</A>

<LI>

<A HREF="#E69E92" >Find the Bug</A>

<LI>

<A HREF="#E69E93" >Extra Credit</A></UL></UL></UL></UL>

<HR ALIGN=CENTER>

<A NAME="E66E19"></A>

<H1 ALIGN=CENTER>


<CENTER>

<FONT SIZE=6 COLOR="#FF0000"><B>Lesson 7, Unit 13</B></FONT></CENTER></H1>

<BR>

<A NAME="E67E22"></A>

<H2 ALIGN=CENTER>

<CENTER>

<FONT SIZE=6 COLOR="#FF0000"><B>The Built-In Functions</B></FONT></CENTER></H2>

<BR>

<BR>

<A 
NAME="E68E98"></A>

<H3 ALIGN=CENTER>

<CENTER>

<FONT SIZE=5 COLOR="#FF0000"><B>What You'll Learn</B></FONT></CENTER></H3>

<BR>

<UL>

<LI>A function review

<BR>

<BR>

<LI>The numeric functions

<BR>

<BR>

<LI>The string functions

<BR>

<BR>


<LI>General functions

<BR>

<BR>

</UL>

<P>If you want to build a house, you'll probably buy prefabricated windows and pre-hung doors instead of framing and hanging them yourself. Unless you want to spend extra time doing the work that you don't have to 
do, using the prefabricated windows and 
pre-hung doors makes quick work of those housing elements and allows you to concentrate your energies on the more esthetic items (such as talking your spouse into allowing you to partition two-thirds of the master 
bedroom for a great computer work 
area...).

<BR>

<P>Visual Basic's built-in functions save you all kinds of programming time just as the pre-built housing parts do when home building. The built-in functions work like miniature programs that perform 
common tasks so that you can concentrate your efforts 
elsewhere. If, for instance, you need to round a single-precision value to an integer, Visual Basic supplies not one but <I>three</I> built-in functions that round numbers to integer values.

<BR>


<BLOCKQUOTE>

<BLOCKQUOTE>

<HR ALIGN=CENTER>

<BR>

<NOTE><B>Tip: </B>You've already seen several built-in functions in this book, such as Val() and Chr$(). Usually, though not always, a function that contains a dollar sign after its name is a <I>string 
function</I>, and a function without a dollar sign in 
its name is a <I>numeric function</I>. This unit teaches you about both numeric and string functions.</NOTE>

<BR>

<HR ALIGN=CENTER>

</BLOCKQUOTE></BLOCKQUOTE>

<BR>

<A NAME="E68E99"></A>

<H3 
ALIGN=CENTER>

<CENTER>

<FONT SIZE=5 COLOR="#FF0000"><B>A Function Review</B></FONT></CENTER></H3>

<BR>

<P><FONT COLOR="#FF8000"><B><I>Concept: </I></B></FONT>Functions accept one or more <I>arguments</I> and do work with those arguments. The function 
then returns a single value.

<BR>

<P>When you use a function inside a Visual Basic statement, it is said that you're <I>calling</I> a function. For example, the following statement <I>calls</I> the Val() function:

<BR>

<BR>

<PRE>

<FONT 
COLOR="#000080">Num = Val(txtAmt.Text) ' Convert entry to number</FONT></PRE>

<BLOCKQUOTE>

<BLOCKQUOTE>

<HR ALIGN=CENTER>

<BR>

<NOTE><I>Definition: </I>An <I>argument</I> is a value that you pass to a function.</NOTE>

<BR>

<HR ALIGN=CENTER>


</BLOCKQUOTE></BLOCKQUOTE>

<P>The parentheses after a function name hold one or more arguments. In the preceding statement, txtAmt.Text is the argument. Some functions, such as Val(), accept only one argument. Some functions accept more than one argument. 
Some functions don't 
require any arguments, and for those functions, the parentheses are optional. The arguments inside the parentheses are often called the <I>argument list</I>. A function can require none, one, or several arguments.

<BR>

<P>When you 
specify function arguments, you are <I>passing</I> the arguments to the function. The function works on the argument values that you pass to the function and produces some sort of value from the arguments. As Figure 13.1 illustrates, you send a 
function 
one or more arguments and the function, after using the arguments in the argument list, is said to return a value. That value is the answer to the function, more commonly called the <I>return value</I>. Functions are said to <I>receive arguments 
</I>and 
<I>return a value</I>.

<BR>

<P><B> <A HREF="13vel01.gif">Figure 13.1. A function works on its arguments and returns one value.</A></B>

<BR>

<BLOCKQUOTE>

<BLOCKQUOTE>

<HR ALIGN=CENTER>

<BR>

<NOTE><B>Note: </B>It's worth making this very clear: A 
function always returns a single value and <I>never more</I>. Although a function's argument list can sometimes contain five or more arguments, a function never returns more than one value.</NOTE>

<BR>

<HR ALIGN=CENTER>

</BLOCKQUOTE></BLOCKQUOTE>

<P>If 
a function requires more than one argument, you'll separate those arguments by one or more commas. For example, here is a function named Right$() that requires two arguments, MyName and 10, in its argument list:

<BR>

<BR>

<PRE>

<FONT 
COLOR="#000080">Last = Right$(MyName, 10) ' Strip off last name</FONT></PRE>

<P>You'll always have to do something with a function's return value. Here are some things that you might do with a return value:

<BR>

<UL>

<LI>Display the return value in a 
control on the form by assigning the function's return value to a control

<BR>

<BR>

<LI>Assign the return value to a variable

<BR>

<BR>

<LI>Use the return value inside a calculation

<BR>

<BR>

<LI>Use the return value as an argument to another 
function by nesting one function inside the argument list of another function

<BR>

<BR>

</UL>

<P>Basically, anything that you might do with a variable or a constant, you'll do with a function's return value. For example, you learned in <A 
HREF="vel07.htm">Unit 7</A> how Val() works. Val() converts its string (or variant) argument to a number. The 
converted number is Val()'s return value. Val() will convert its argument to a single, return value; therefore, you can't place Val() on a line 
by itself like this:

<BR>

<BR>

<PRE>

<FONT COLOR="#000080">Val(UserAddress) ' Invalid!</FONT></PRE>

<P>Val() will accept the string named UserAddress and convert that string to a number. You must make sure that the program does something with that 
number! The function is just a predefined, built-in routine, supplied for you by Visual Basic, which 
operates on the argument list and returns a value that you've got to do something with. Here are four uses of Val() that use the return value in different 
ways:

<BR>

<BR>

<PRE>

<FONT COLOR="#000080">lblHouseNum.Caption = Val(UserAddress) ' To a label

<BR>

MyHouseNum = Val(UserAddress) ' To a variable

<BR>

OldAge = 65 + Val(txtAge.Text) ' A calculation

<BR>

Last = Right$(UserName, Val(Ans)) ' 
Another function</FONT></PRE>

<P>An argument might even be an expression. The following Val() function first concatenates the string expression used as the argument, and then returns the numerically converted value of that string argument:

<BR>

<BR>


<PRE>

<FONT COLOR="#000080">Number = Val(aStr1 &amp; aStr2)</FONT></PRE>

<BLOCKQUOTE>

<BLOCKQUOTE>

<HR ALIGN=CENTER>

<BR>

<NOTE><B>Note: </B>The argument list's data type doesn't always match the function's return value data type. For example, a 
function might take a string argument and return a number. A function might require both a string and a numeric argument, and return 
a string.</NOTE>

<BR>

<HR ALIGN=CENTER>

</BLOCKQUOTE></BLOCKQUOTE>

<P>The built-in functions never change their 
arguments. The built-in functions use their arguments to create a new value: the return value.

<BR>

<P><FONT COLOR="#FF8000"><B><I>Review: </I></B></FONT>There are several built-in functions in Visual Basic that your programs can call. Programs that call 
functions must do something with the return values from those functions. A function might require one 
argument or more. If you send an argument list to a function, that function operates on those arguments and returns a single value based on the argument 
list.

<BR>

<BR>

<A NAME="E68E100"></A>

<H3 ALIGN=CENTER>

<CENTER>

<FONT SIZE=5 COLOR="#FF0000"><B>The Numeric Functions</B></FONT></CENTER></H3>

<BR>

<P><FONT COLOR="#FF8000"><B><I>Concept: </I></B></FONT>Several numeric functions work to save you 
programming time when you're working with numbers. There are conversion functions, scientific functions, and trigonometric functions.

<BR>

<P>As you read through the following pages, don't worry about memorizing every function. Try to get a general idea 
of the kinds of functions supplied by Visual Basic. The functions work to save you time. If you need to convert a number or compute a 
standard formula, the chances are great that Visual Basic includes a function that does the work for you. For example, 
there is no reason to write an advanced trigonometric sine function, because Microsoft already wrote one for you.

<BR>

<BLOCKQUOTE>

<BLOCKQUOTE>

<HR ALIGN=CENTER>

<BR>

<NOTE><B>Note: </B>You don't have to be a math lover to use and appreciate the 
Visual Basic numeric functions. Actually, the less you like math, the <I>more</I> you'll appreciate the fact that Visual Basic supplies all these functions for you so that you 
never have to write the code to accomplish the same thing.</NOTE>

<BR>

<HR 
ALIGN=CENTER>

</BLOCKQUOTE></BLOCKQUOTE>

<BR>

<A NAME="E69E89"></A>

<H4 ALIGN=CENTER>

<CENTER>

<FONT SIZE=4 COLOR="#FF0000"><B>Converting Numbers</B></FONT></CENTER></H4>

<BR>

<P>Visual Basic supplies three functions that convert single-precision 
and double-precision numbers to integer values. When writing applications, you might need to round numbers down or up to their nearest integers. Table 13.1 contains the three integer 
conversion functions.

<BR>

<BR>

<P ALIGN=CENTER>

<CENTER>

<FONT 
COLOR="#000080"><B>Table 13.1. The integer conversion functions.</B></FONT></CENTER>

<BR>



<TABLE  BORDERCOLOR=#000040 BORDER=1 CELLSPACING=2 WIDTH="100%" CELLPADDING=2 >

<TR>

<TD VALIGN=top  BGCOLOR=#80FFFF ><FONT COLOR=#000080>

<I>Function</I>


</FONT>

<TD VALIGN=top  BGCOLOR=#80FFFF ><FONT COLOR=#000080>

<I>Description</I></FONT>

<TR>

<TD VALIGN=top  BGCOLOR=#80FFFF ><FONT COLOR=#000080>

CInt()

</FONT>

<TD VALIGN=top  BGCOLOR=#80FFFF ><FONT COLOR=#000080>

Rounds fractional values of .5 
and more to the next highest integer</FONT>

<TR>

<TD VALIGN=top  BGCOLOR=#80FFFF ><FONT COLOR=#000080>

Fix()

</FONT>

<TD VALIGN=top  BGCOLOR=#80FFFF ><FONT COLOR=#000080>

Truncates the fractional portion</FONT>

<TR>

<TD VALIGN=top  BGCOLOR=#80FFFF 
><FONT COLOR=#000080>

Int()

</FONT>

<TD VALIGN=top  BGCOLOR=#80FFFF ><FONT COLOR=#000080>

Rounds the number down to the integer less than or equal to its arguments</FONT>

</TABLE><P>Both Fix() and Int() treat positive integers the same way. Both of 
the following statements return and store 14:

<BR>

<PRE>

<FONT COLOR="#000080">ans1 = Int(14.6)

ans2 = Fix(14.6)</FONT></PRE>

<P>The Fix() and Int() functions behave differently for negative numbers. The remarks to the right of the following 
statements indicate the functions' return values:

<BR>

<PRE>

<FONT COLOR="#000080">ans3 = Int(-14.6) ' Stores -15

ans4 = Fix(-14.6) ' Stores -14</FONT></PRE>

<P>The negative number less than or equal to -14.6 is -15; hence, the return values for Int() 
shown in the first statement's remark.

<BR>

<P>The CInt() function returns truly rounded numbers, as shown here:

<BR>

<PRE>

<FONT COLOR="#000080">ans5 = CInt(14.1) ' Stores 14

ans6 = CInt(14.6) ' Stores 15

ans7 = CInt(-14.1) ' Stores -14

ans8 = 
CInt(-14.8) ' Stores -15</FONT></PRE>

<P>There are functions similar to CInt() that convert arguments of any data type to any other data type. Table 13.2 contains the rest of the data conversion functions.

<BR>

<BR>

<P ALIGN=CENTER>

<CENTER>

<FONT 
COLOR="#000080"><B>Table 13.2. The data type conversion functions.</B></FONT></CENTER>

<BR>



<TABLE  BORDERCOLOR=#000040 BORDER=1 CELLSPACING=2 WIDTH="100%" CELLPADDING=2 >

<TR>

<TD VALIGN=top  BGCOLOR=#80FFFF ><FONT COLOR=#000080>

<I>Function</I>


</FONT>

<TD VALIGN=top  BGCOLOR=#80FFFF ><FONT COLOR=#000080>

<I>Description</I></FONT>

<TR>

<TD VALIGN=top  BGCOLOR=#80FFFF ><FONT COLOR=#000080>

CCur()

</FONT>

<TD VALIGN=top  BGCOLOR=#80FFFF ><FONT COLOR=#000080>

Converts the argument to an 
equivalent currency data type</FONT>

<TR>

<TD VALIGN=top  BGCOLOR=#80FFFF ><FONT COLOR=#000080>

CDbl()

</FONT>

<TD VALIGN=top  BGCOLOR=#80FFFF ><FONT COLOR=#000080>

Converts the argument to an equivalent double-precision data type.</FONT>

<TR>

<TD 
VALIGN=top  BGCOLOR=#80FFFF ><FONT COLOR=#000080>

CLng()

</FONT>

<TD VALIGN=top  BGCOLOR=#80FFFF ><FONT COLOR=#000080>

Converts the argument to an equivalent long integer data type</FONT>

<TR>

<TD VALIGN=top  BGCOLOR=#80FFFF ><FONT COLOR=#000080>


CSng()

</FONT>

<TD VALIGN=top  BGCOLOR=#80FFFF ><FONT COLOR=#000080>

Converts the argument to an equivalent single-precision data type</FONT>

<TR>

<TD VALIGN=top  BGCOLOR=#80FFFF ><FONT COLOR=#000080>

CStr()

</FONT>

<TD VALIGN=top  BGCOLOR=#80FFFF 
><FONT COLOR=#000080>

Converts the argument to an equivalent string data type</FONT>

<TR>

<TD VALIGN=top  BGCOLOR=#80FFFF ><FONT COLOR=#000080>

CVar()

</FONT>

<TD VALIGN=top  BGCOLOR=#80FFFF ><FONT COLOR=#000080>

Converts the argument to an 
equivalent variant data type</FONT>

</TABLE><BLOCKQUOTE>

<BLOCKQUOTE>

<HR ALIGN=CENTER>

<BR>

<NOTE><B>Caution: </B>If the converted argument won't fit in the target data type, Visual Basic issues the Overflow error message shown in Figure 13.2. You've 
got to make sure, perhaps through an initial If statement, that the argument fits within the 
range of the converted data type.</NOTE>

<BR>

<HR ALIGN=CENTER>

</BLOCKQUOTE></BLOCKQUOTE>

<P>Normally, the following assignment stores .1428571 in the label 
named lblValue:

<BR>

<BR>

<PRE>

<FONT COLOR="#000080">lblValue.Caption = (1 / 7) ' Assigns .1428571</FONT></PRE>

<P>The following, however, adds precision to the answer for a more accurate calculation:

<BR>

<BR>

<PRE>

<FONT 
COLOR="#000080">lblValue.Caption = CDbl(1 / 7) ' Assigns .142857142857143</FONT></PRE>

<P>

<a href="13vel02.gif"><B>Figure 13.2. Don't overflow the target data type.</B></a>

<BR>

<BLOCKQUOTE>

<BLOCKQUOTE>

<HR ALIGN=CENTER>

<BR>

<NOTE>Don't even <I>mention</I> other bases!: If you <I>really</I> want to get fancy with numeric conversions, 
Visual Basic supports four functions that convert their decimal base-10 arguments to octal (base-8) and hexadecimal (base-16) return values. 
You'll want to use these functions if you write advanced applications that deal with other number bases.

<BR>The 
two hexadecimal functions, Hex() and Hex$(), convert their numeric arguments to a variant and string hexadecimal value, respectively. The two octal functions, Oct() and Oct$(), convert their numeric arguments to a variant and string octal value, 

respectively.

<BR>If you think that you won't use these functions, forget them! These functions, especially the hexadecimal functions, come in handy for programmers who write system-level applications such as memory- and disk-maintenance programs.</NOTE>


<BR>

<HR ALIGN=CENTER>

</BLOCKQUOTE></BLOCKQUOTE>

<P>The Asc() function converts its string argument to a corresponding ASCII table value. Generally, you'll pass a one-character string (or a variant that can equate to a string) value to Asc(). If the 
argument contains more than one character, Asc() 
ignores all characters following the first one.

<BR>

<P>The following statement stores the number 65 in the numeric variable named Initial because 65 is the uppercase letter <I>A</I> in the ASCII table:


<BR>

<BR>

<PRE>

<FONT COLOR="#000080">Initial = Asc(&quot;A&quot;)</FONT></PRE>

<P>Table 13.3 lists the remaining math functions that Visual Basic provides. Many of the functions are scientific and mathematical. You may not need any or all of the 
functions unless you write heavy, math-intensive applications.

<BR>

<BR>

<P ALIGN=CENTER>

<CENTER>

<FONT COLOR="#000080"><B>Table 13.3. The scientific and mathematical functions.</B></FONT></CENTER>

<BR>



<TABLE  BORDERCOLOR=#000040 BORDER=1 
CELLSPACING=2 WIDTH="100%" CELLPADDING=2 >

<TR>

<TD VALIGN=top  BGCOLOR=#80FFFF ><FONT COLOR=#000080>

<I>Function</I>

</FONT>

<TD VALIGN=top  BGCOLOR=#80FFFF ><FONT COLOR=#000080>

<I>Description</I></FONT>

<TR>

<TD VALIGN=top  BGCOLOR=#80FFFF 
><FONT COLOR=#000080>

Abs()

</FONT>

<TD VALIGN=top  BGCOLOR=#80FFFF ><FONT COLOR=#000080>

Returns the absolute value of the argument</FONT>

<TR>

<TD VALIGN=top  BGCOLOR=#80FFFF ><FONT COLOR=#000080>

Atn()

</FONT>

<TD VALIGN=top  BGCOLOR=#80FFFF 
><FONT COLOR=#000080>

Returns the computed arc tangent of the argument expressed in radians</FONT>

<TR>

<TD VALIGN=top  BGCOLOR=#80FFFF ><FONT COLOR=#000080>

Cos()

</FONT>

<TD VALIGN=top  BGCOLOR=#80FFFF ><FONT COLOR=#000080>

Returns the computed 
cosine of the argument expressed in radians</FONT>

<TR>

<TD VALIGN=top  BGCOLOR=#80FFFF ><FONT COLOR=#000080>

Exp()

</FONT>

<TD VALIGN=top  BGCOLOR=#80FFFF ><FONT COLOR=#000080>

Returns the base of the natural logarithm argument</FONT>

<TR>

<TD 
VALIGN=top  BGCOLOR=#80FFFF ><FONT COLOR=#000080>

Log()

</FONT>

<TD VALIGN=top  BGCOLOR=#80FFFF ><FONT COLOR=#000080>

Returns the natural logarithm of the argument.</FONT>

<TR>

<TD VALIGN=top  BGCOLOR=#80FFFF ><FONT COLOR=#000080>

Sin()

</FONT>


<TD VALIGN=top  BGCOLOR=#80FFFF ><FONT COLOR=#000080>

Returns the computed sine of the argument expressed in radians</FONT>

<TR>

<TD VALIGN=top  BGCOLOR=#80FFFF ><FONT COLOR=#000080>

Sqr()

</FONT>

<TD VALIGN=top  BGCOLOR=#80FFFF ><FONT COLOR=#000080>


Returns the square root of the argument</FONT>

<TR>

<TD VALIGN=top  BGCOLOR=#80FFFF ><FONT COLOR=#000080>

Tan()

</FONT>

<TD VALIGN=top  BGCOLOR=#80FFFF ><FONT COLOR=#000080>

Returns the computed tangent of the argument expressed in radians</FONT>


</TABLE><BLOCKQUOTE>

<BLOCKQUOTE>

<HR ALIGN=CENTER>

<BR>

<NOTE><B>Tip: </B>If you compute trigonometric values on arguments expressed as degrees instead of radians, multiply the argument by <I>pi</I> and divide by 180. The following expression assigns 
the sine of 38 degrees to a variable named sVal:</NOTE>

<BR>

<HR ALIGN=CENTER>

</BLOCKQUOTE></BLOCKQUOTE>

<BLOCKQUOTE>

<BLOCKQUOTE>

<HR ALIGN=CENTER>

<BR>

<NOTE>sVal = Sin(38 * 3.14159 / 180)</NOTE>

<BR>

<HR ALIGN=CENTER>


</BLOCKQUOTE></BLOCKQUOTE>

<P><FONT COLOR="#FF8000"><B><I>Review: </I></B></FONT>The numeric functions will help you write programs when you need to include mathematical calculations in the code. Many business, graphics, and research applications 
sometimes utilize complex routines, 
and Visual Basic's math functions will help shorten your programming time and improve the accuracy of your code.

<BR>

<BR>

<A NAME="E68E101"></A>

<H3 ALIGN=CENTER>

<CENTER>

<FONT SIZE=5 COLOR="#FF0000"><B>The 
String Functions</B></FONT></CENTER></H3>

<BR>

<P><FONT COLOR="#FF8000"><B><I>Concept: </I></B></FONT>There are several Visual Basic string functions that manipulate string data better than most other programming languages allow. The string functions 
allow you to strip away characters from string data 
and change strings in various ways.

<BR>

<P>The Visual Basic programming language supports strings using the variable-length and fixed-length strings that you've seen defined throughout the first half 
of this book. The string manipulation provided by Visual Basic is perhaps more powerful than any 
other non-BASIC programming language in widespread use today.

<BR>

<P>You've already seen the Chr$() function that converts an ASCII number to its character 
equivalent. (There is a related Chr() function that returns a character in the variant data type also.) The Str$() (and the related variant-returning Str() function) 
converts a number to a string.

<BR>

<BLOCKQUOTE>

<BLOCKQUOTE>

<HR ALIGN=CENTER>

<BR>


<NOTE><B>Tip: </B>Convert numbers to strings when you want to display numeric quantities inside a message box.</NOTE>

<BR>

<HR ALIGN=CENTER>

</BLOCKQUOTE></BLOCKQUOTE>

<P>Suppose that the user's age were stored in a numeric variable named Age. If you 
wanted to display the user's age in a message box, you couldn't do so without first converting the age to a string value as follows:

<BR>

<BR>

<PRE>

<FONT COLOR="#000080">MsgBox &quot;Your age is now&quot; &amp; Str$(Age)</FONT></PRE>

<P>The string 
case-conversion functions convert their string arguments to uppercase or lowercase character strings. Table 13.4 lists these functions.

<BR>

<BR>

<P ALIGN=CENTER>

<CENTER>

<FONT COLOR="#000080"><B>Table 13.4. The case-conversion 
functions.</B></FONT></CENTER>

<BR>



<TABLE  BORDERCOLOR=#000040 BORDER=1 CELLSPACING=2 WIDTH="100%" CELLPADDING=2 >

<TR>

<TD VALIGN=top  BGCOLOR=#80FFFF ><FONT COLOR=#000080>

<I>Function</I>

</FONT>

<TD VALIGN=top  BGCOLOR=#80FFFF ><FONT 
COLOR=#000080>

<I>Description</I></FONT>

<TR>

<TD VALIGN=top  BGCOLOR=#80FFFF ><FONT COLOR=#000080>

LCase()

</FONT>

<TD VALIGN=top  BGCOLOR=#80FFFF ><FONT COLOR=#000080>

Returns the string argument as a variant data type that's all lowercase 
letters</FONT>

<TR>

<TD VALIGN=top  BGCOLOR=#80FFFF ><FONT COLOR=#000080>

LCase$()

</FONT>

<TD VALIGN=top  BGCOLOR=#80FFFF ><FONT COLOR=#000080>

Returns the string argument as a string data type that's all lowercase letters</FONT>

<TR>

<TD 
VALIGN=top  BGCOLOR=#80FFFF ><FONT COLOR=#000080>

UCase()

</FONT>

<TD VALIGN=top  BGCOLOR=#80FFFF ><FONT COLOR=#000080>

Returns the string argument as a variant data type that's all uppercase letters</FONT>

<TR>

<TD VALIGN=top  BGCOLOR=#80FFFF ><FONT 
COLOR=#000080>

UCase$()

</FONT>

<TD VALIGN=top  BGCOLOR=#80FFFF ><FONT COLOR=#000080>

Returns the string argument as a string data type that's all uppercase letters</FONT>

</TABLE><P>If the argument already contains one or more characters in the 
target case, the functions leave those characters alone. The remarks following these statements indicate the function return values:

<BR>

<PRE>

<FONT COLOR="#000080">lowerName = LCase(&quot;Larry&quot;) ' Returns larry

upperName = 
UCase(&quot;Smythe&quot;) ' Returns SMYTHE</FONT></PRE>

<BLOCKQUOTE>

<BLOCKQUOTE>

<HR ALIGN=CENTER>

<BR>

<NOTE><I>Definition: </I>A <I>substring</I> is a portion of a string.</NOTE>

<BR>

<HR ALIGN=CENTER>

</BLOCKQUOTE></BLOCKQUOTE>

<P>Visual Basic 
contains three string functions that return left, center, or right portions of a string. These are the Left$(), Mid$(), and Right$() functions. All three functions are said to return a substring value. Here are the formats of these 
functions:

<BR>

<PRE>


<FONT COLOR="#000080">Left$(StringVal, length)

Right$(StringVal, length)

Mid$(StringVal, startVal, length)</FONT></PRE>

<BLOCKQUOTE>

<BLOCKQUOTE>

<HR ALIGN=CENTER>

<BR>

<NOTE><B>Note: </B>The Mid$() function is called the <I>midstring</I> 
function.</NOTE>

<BR>

<HR ALIGN=CENTER>

</BLOCKQUOTE></BLOCKQUOTE>

<P>The Left$() function returns <I>length</I> characters from the <I>StringVal</I>. The <I>StringVal</I> might be a string constant or variable. Likewise, Right$() returns <I>length</I> 
characters from the <I>StringVal</I>. Mid$() returns <I>length</I> 
characters from the <I>StringVal</I> beginning at the <I>startVal</I> character.

<BR>

<P>The remarks following these statements indicate the function return values:

<BR>

<PRE>

<FONT 
COLOR="#000080">Title = &quot;Something Good!&quot;

lTitle = Left$(Title, 4) ' Some

rTitle = Right$(Title, 5) ' Good!

mTitle = Mid$(Title, 5, 8) ' thing Go</FONT></PRE>

<P>Figure 13.3 shows how Visual Basic strips these substrings from the longer 
string values.

<BR>

<P><B> <A HREF="13vel03.gif">Figure 13.3. Substring functions pull substrings from strings.</A></B>

<BR>

<P>The Len() function returns the number of characters stored in strings. Often, you'll have to adjust control sizes to hold 
long strings. You can use the Len() function as a guide to calculate how wide a control must be. The following statement stores 14 
in the variable named Length:

<BR>

<P>length = Len(&quot;Blue and Green&quot;)

<BR>

<BLOCKQUOTE>

<BLOCKQUOTE>

<HR 
ALIGN=CENTER>

<BR>

<NOTE><B>Note: </B>The Len() function works for numeric values as well. If you pass a numeric variable, constant, or expression to Len(), Len() returns the amount of memory needed to hold that numeric value.</NOTE>

<BR>

<HR 
ALIGN=CENTER>

</BLOCKQUOTE></BLOCKQUOTE>

<P>The LTrim$() and RTrim$() functions trim extra spaces from the beginning or end of a string. If extra spaces don't exist, the LTrim$() and RTrim$() functions do nothing. LTrim$() returns the argument's string 
without any leading spaces. RTrim$() returns 
the argument's string without any trailing spaces. The Trim$() function handles both jobs by trimming both leading and trailing spaces from a string.

<BR>

<P>Here are the formats of the string-trimming 
functions:

<BR>

<PRE>

<FONT COLOR="#000080">LTrim[$](StringExpression)

RTrim[$](StringExpression)

Trim[$](StringExpression)</FONT></PRE>

<BLOCKQUOTE>

<BLOCKQUOTE>

<HR ALIGN=CENTER>

<BR>

<NOTE>There are also equivalent variant functions called 
LTrim(), RTrim(), and Trim().</NOTE>

<BR>

<HR ALIGN=CENTER>

</BLOCKQUOTE></BLOCKQUOTE>

<P>The following statements trim spaces from the beginning, end, or both sides of strings:

<BR>

<PRE>

<FONT COLOR="#000080">LStr1 = LTrim$(&quot; Jonah&quot;) ' 
Stores Jonah

RStr2 = RTrim$(&quot;Jonah &quot;) ' Stores Jonah

AnySt3 = Trim$(&quot; Jonah &quot;) ' Stores Jonah</FONT></PRE>

<P>Without the trimming functions, the spaces are copied into the target variables along with the name Jonah.

<BR>


<P>Earlier, you learned how to use Str$() to convert a number to a string. Because Str$() always converts positive numbers to strings with a leading blank (where the imaginary plus sign appears), you can combine LTrim$() with Str$() to eliminate the 

leading blank. The first of the following two statements stores the leading blank in st1. The second uses LTrim$() to get rid of the blank before storing the string into st2.

<BR>

<PRE>

<FONT COLOR="#000080">st1 = Str$(234) ' Stores &quot; 234&quot;


st2 = LTrim$(Str$(234)) ' Stores &quot;234&quot;</FONT></PRE>

<P><FONT COLOR="#FF8000"><B><I>Review: </I></B></FONT>The string functions manipulate strings and return values based on string arguments. As you write more powerful programs, you'll need to 
extract substrings and convert the case of strings in various 
ways to display string values on the form and in controls.

<BR>

<BR>

<A NAME="E68E102"></A>

<H3 ALIGN=CENTER>

<CENTER>

<FONT SIZE=5 COLOR="#FF0000"><B>General 
Functions</B></FONT></CENTER></H3>

<BR>

<P><FONT COLOR="#FF8000"><B><I>Concept: </I></B></FONT>There are a handful of general functions that don't fall into a strict numeric or string category. These general-purpose functions add power to your 
programming skills. This section explains how to 
detect data types using the Is...() and <I>VarType</I>() functions. You may not see a use for these functions quite yet, but familiarize yourself with them. In Lesson 8, you'll learn how to pass data back 
and forth between Visual Basic routines, and there 
are times when you'll need to know which data type was passed to you using one of the functions taught here.

<BR>

<P>Table 13.5 contains <I>data inspection</I> functions, often called the <I>Is...()</I> 
functions. When you store a data value in a variant variable (which can accept any data type), Table 13.5's functions returns a true or false result that indicates 
whether the argument can be converted to a specific data type.

<BR>

<BR>

<P 
ALIGN=CENTER>

<CENTER>

<FONT COLOR="#000080"><B>Table 13.5. The </B><B>Is...()</B><B> data inspection functions.</B></FONT></CENTER>

<BR>



<TABLE  BORDERCOLOR=#000040 BORDER=1 CELLSPACING=2 WIDTH="100%" CELLPADDING=2 >

<TR>

<TD VALIGN=top  
BGCOLOR=#80FFFF ><FONT COLOR=#000080>

<I>Function Name</I>

</FONT>

<TD VALIGN=top  BGCOLOR=#80FFFF ><FONT COLOR=#000080>

<I>Description</I></FONT>

<TR>

<TD VALIGN=top  BGCOLOR=#80FFFF ><FONT COLOR=#000080>

IsDate()

</FONT>

<TD VALIGN=top  
BGCOLOR=#80FFFF ><FONT COLOR=#000080>

Determines whether its argument can be converted to a valid date</FONT>

<TR>

<TD VALIGN=top  BGCOLOR=#80FFFF ><FONT COLOR=#000080>

IsEmpty()

</FONT>

<TD VALIGN=top  BGCOLOR=#80FFFF ><FONT COLOR=#000080>


Determines whether its argument has been initialized with any value since the argument's original definition</FONT>

<TR>

<TD VALIGN=top  BGCOLOR=#80FFFF ><FONT COLOR=#000080>

IsNull()

</FONT>

<TD VALIGN=top  BGCOLOR=#80FFFF ><FONT COLOR=#000080>


Determines whether its argument holds a Null value (such as an empty string)</FONT>

<TR>

<TD VALIGN=top  BGCOLOR=#80FFFF ><FONT COLOR=#000080>

IsNumeric()

</FONT>

<TD VALIGN=top  BGCOLOR=#80FFFF ><FONT COLOR=#000080>

Determines whether its argument 
holds a value that can be converted to a valid number</FONT>

</TABLE><P>The following code ensures sure that a valid string appears in the variable named ans before applying a UCase$() function:

<BR>

<PRE>

<FONT COLOR="#000080">If IsString(ans) Then

 
NewAns = UCase$(ans)

Else

 MsgBox &quot;You didn't type a letter!&quot;

End If</FONT></PRE>

<P>Empty variables differ from Null values and zero values. Empty variables indicate that nothing has been entered into variables. The IsNull() function checks 
to see whether its control argument contains a Null value.

<BR>

<BLOCKQUOTE>

<BLOCKQUOTE>

<HR ALIGN=CENTER>

<BR>

<NOTE><B>Tip: </B>Use IsNull() to see whether a control or field on a form contains data. Use IsEmpty() just for variables.</NOTE>

<BR>


<HR ALIGN=CENTER>

</BLOCKQUOTE></BLOCKQUOTE>

<P>The VarType() function determines the data type of its argument. Table 13.6 lists the return values from the VarType() function. VarType() returns no values other than the nine listed in the table.

<BR>


<BR>

<P ALIGN=CENTER>

<CENTER>

<FONT COLOR="#000080"><B>Table 13.6. The </B><B>VarType()</B><B> function's return values.</B></FONT></CENTER>

<BR>



<TABLE  BORDERCOLOR=#000040 BORDER=1 CELLSPACING=2 WIDTH="100%" CELLPADDING=2 >

<TR>

<TD VALIGN=top  
BGCOLOR=#80FFFF ><FONT COLOR=#000080>

<I>Return</I>

</FONT>

<TD VALIGN=top  BGCOLOR=#80FFFF ><FONT COLOR=#000080>

<I>Description</I></FONT>

<TR>

<TD VALIGN=top  BGCOLOR=#80FFFF ><FONT COLOR=#000080>

0

</FONT>

<TD VALIGN=top  BGCOLOR=#80FFFF ><FONT 
COLOR=#000080>

Indicates that the argument is Empty</FONT>

<TR>

<TD VALIGN=top  BGCOLOR=#80FFFF ><FONT COLOR=#000080>

1

</FONT>

<TD VALIGN=top  BGCOLOR=#80FFFF ><FONT COLOR=#000080>

Indicates that the argument is Null</FONT>

<TR>

<TD VALIGN=top  
BGCOLOR=#80FFFF ><FONT COLOR=#000080>

2

</FONT>

<TD VALIGN=top  BGCOLOR=#80FFFF ><FONT COLOR=#000080>

Indicates that the argument is Integer</FONT>

<TR>

<TD VALIGN=top  BGCOLOR=#80FFFF ><FONT COLOR=#000080>

3

</FONT>

<TD VALIGN=top  
BGCOLOR=#80FFFF ><FONT COLOR=#000080>

Indicates that the argument is Long</FONT>

<TR>

<TD VALIGN=top  BGCOLOR=#80FFFF ><FONT COLOR=#000080>

4

</FONT>

<TD VALIGN=top  BGCOLOR=#80FFFF ><FONT COLOR=#000080>

Indicates that the argument is Single</FONT>


<TR>

<TD VALIGN=top  BGCOLOR=#80FFFF ><FONT COLOR=#000080>

5

</FONT>

<TD VALIGN=top  BGCOLOR=#80FFFF ><FONT COLOR=#000080>

Indicates that the argument is Double</FONT>

<TR>

<TD VALIGN=top  BGCOLOR=#80FFFF ><FONT COLOR=#000080>

6

</FONT>

<TD 
VALIGN=top  BGCOLOR=#80FFFF ><FONT COLOR=#000080>

Indicates that the argument is Currency</FONT>

<TR>

<TD VALIGN=top  BGCOLOR=#80FFFF ><FONT COLOR=#000080>

7

</FONT>

<TD VALIGN=top  BGCOLOR=#80FFFF ><FONT COLOR=#000080>

Indicates that the argument 
is Date</FONT>

<TR>

<TD VALIGN=top  BGCOLOR=#80FFFF ><FONT COLOR=#000080>

8

</FONT>

<TD VALIGN=top  BGCOLOR=#80FFFF ><FONT COLOR=#000080>

Indicates that the argument is String</FONT>

</TABLE><P><FONT COLOR="#FF8000"><B><I>Stop and Type: 
</I></B></FONT>Listing 13.1 makes sure that the user entered a value into the txtAge text box control.

<BR>

<P><FONT COLOR="#FF8000"><B><I>Review: </I></B></FONT>The general-purpose functions return values that indicate data contents and data types. You 
can use these functions to see whether variables and controls have been initialized before calculating with 
those values.

<BR>

<P>

<FONT COLOR="#000080"><B>Listing 13.1. Checks to make sure that the user entered a value.</B></FONT>

<BR>

<PRE>

<FONT 
COLOR="#000080">1: If IsNull(txtAge.Text) Then

2: MsgBox &quot;You didn't type anything!&quot;

3: Else

4: MsgBox &quot;Thanks for entering a value.&quot;

5: End If</FONT></PRE>

<P><FONT COLOR="#FF8000"><B><I>Analysis: </I></B></FONT>Line 1 ensures 
that the user has typed <I>something</I> in the control named txtAge. Subsequent code could then use the VarType() function to make sure that the user entered a value of the correct 
data type required by the user.

<BR>

<BR>

<A NAME="E68E103"></A>

<H3 
ALIGN=CENTER>

<CENTER>

<FONT SIZE=5 COLOR="#FF0000"><B>Homework</B></FONT></CENTER></H3>

<BR>

<BR>

<A NAME="E69E90"></A>

<H4 ALIGN=CENTER>

<CENTER>

<FONT SIZE=4 COLOR="#FF0000"><B>General Knowledge</B></FONT></CENTER></H4>

<BR>

<OL>

<LI>What is 
a function <I>argument</I>?

<BR>

<BR>

<LI>True or false: A function's return value must match the argument list's data type.

<BR>

<BR>

<LI>True or false: Some functions require no arguments, some one, and some several.

<BR>

<BR>

<LI>True or false: 
The function's arguments must all match in data type.

<BR>

<BR>

<LI>Why are there three integer functions?

<BR>

<BR>

<LI>What value does Visual Basic store in Ans given the following assignment statements?

<BR>Ans = Int(61.32)

<BR>Ans = Int(-61.32)


<BR>Ans = Fix(-61.32)

<BR>Ans = Cint(421.51)

<BR>

<BR>

<LI>True or false: Int(), CInt(), and Fix() all return the same value for positive arguments.

<BR>

<BR>

<LI>What function performs the opposite of Chr$()?

<BR>

<BR>

<LI>What value appears in 
the string variable named AList after these assignments?

<BR>AList = UCase$(&quot;AbCdEfG&quot;)

<BR>AList = LCase$(&quot;AbCdEfG&quot;)

<BR>

<BR>

<LI>What would the following assignment statement store in the variant variable named Anything?


<BR>Anything = Str$(Val(&quot;78.1&quot;))

<BR>

<BR>

<LI>Write the values stored in each of the following assignment statements:

<BR>AStr = Left$(&quot;Sams&quot;, 1)

<BR>AStr = Left$(&quot;Sams&quot;, 3)

<BR>AStr = Right$(&quot;Sams&quot;, 1)


<BR>AStr = Right$(&quot;Sams&quot;, 3)

<BR>AStr = Mid$(&quot;Sams&quot;, 2, 3)

<BR>

<BR>

<LI>True or false: Depending on the arguments, Mid$() could return the same values as Left$() and Right$().

<BR>

<BR>

<LI>True or false: Both of the following 
produce the same value when used inside an expression:

<BR>Chr$(67)

<BR>Asc(&quot;C&quot;)

<BR>

<BR>

<LI>What is the name of the function that converts a number to a string?

<BR>

<BR>

</OL>

<BR>

<A NAME="E69E91"></A>

<H4 ALIGN=CENTER>

<CENTER>


<FONT SIZE=4 COLOR="#FF0000"><B>Write Code That...</B></FONT></CENTER></H4>

<BR>

<OL>

<LI>Suppose that you needed to display a numeric variable's value inside the prompt string of an input box. Describe how you would you concatenate such a variable to 
the prompt string?

<BR>

<BR>

<LI>How could you find out the amount of memory consumed by 250 double-precision variables?

<BR>

<BR>

<LI>Write the code that uses an input box to get a number from the user and then uses a message box to display the 
square root of that number.

<BR>

<BR>

<LI>Write the code that uses two separate input boxes to ask the user for a first and last name, and then display in a message box the total number of letters in both names.

<BR>

<BR>

<LI>Write an assignment 
statement that stores the ASCII value of &quot;P&quot; in a variable named ValAsc.

<BR>

<BR>

</OL>

<BR>

<A NAME="E69E92"></A>

<H4 ALIGN=CENTER>

<CENTER>

<FONT SIZE=4 COLOR="#FF0000"><B>Find the Bug</B></FONT></CENTER></H4>

<BR>

<OL>

<LI>Rudy 
gets an overflow message when attempting the following assignment into the integer variable named Weight:

<BR>Weight = CInt(32768 * Num)

<BR>Describe the problem for Rudy.

<BR>

<BR>

</OL>

<BR>

<A NAME="E69E93"></A>

<H4 ALIGN=CENTER>

<CENTER>


<FONT SIZE=4 COLOR="#FF0000"><B>Extra Credit</B></FONT></CENTER></H4>

<BR>

<OL>

<LI>Add to Listing 13.1 to make sure that the user entered an integer in the txtAge.Text control.

<BR>

<BR>

</OL>

<P>Write a program that stores the 256 ASCII characters 
(from ASCII 0 to ASCII 255) in a string array that's defined to hold 256 elements.

<BR>

<P ALIGN=LEFT>

<A HREF="velp06.htm" TARGET="_self"><IMG SRC="purprev.gif" WIDTH = 32 HEIGHT = 32 BORDER = 0 ALT="Previous Page"></A>

<A HREF="#I0" 
TARGET="_self"><IMG SRC="purtop.gif" WIDTH = 32 HEIGHT = 32 BORDER = 0 ALT="Page Top"></A>

<A HREF="index.htm" TARGET="_self"><IMG SRC="purtoc.gif" WIDTH = 32 HEIGHT = 32 BORDER = 0 ALT="TOC"></A>

<A HREF="vel14.htm" TARGET="_self"><IMG SRC="purnext.gif" 
WIDTH = 32 HEIGHT = 32 BORDER = 0 ALT="Next Page"></A>


</BODY></HTML>







