<HTML>
<HEAD>
<TITLE>lax17.htm </TITLE>
<LINK REL="ToC" HREF="httoc.htm">
<LINK REL="Index" HREF="htindex.htm">
<LINK REL="Next" HREF="lax18.htm">
<LINK REL="Previous" HREF="lax16.htm"></HEAD>
<BODY BGCOLOR="#FFFFFF" TEXT="#000000" LINK="#0000FF" VLINK="#800080">
<A NAME="I0"></A><P ALIGN=CENTER>
<A HREF="lax16.htm" TARGET="_self"><IMG SRC="blanprev.gif" WIDTH = 37 HEIGHT = 37 BORDER = 0 ALT="Previous Page"></A>
<A HREF="httoc.htm" TARGET="_self"><IMG SRC="blantoc.gif" WIDTH = 37 HEIGHT = 37 BORDER = 0 ALT="TOC"></A>
<A HREF="lax18.htm" TARGET="_self"><IMG SRC="blannext.gif" WIDTH = 37 HEIGHT = 37 BORDER = 0 ALT="Next Page"></A>
<A HREF="http://www.mcp.com/sams/" TARGET="_self"><IMG SRC="blanhome.gif" WIDTH = 37 HEIGHT = 37 BORDER = 0 ALT="See Page"></A>
<HR ALIGN=CENTER>
<P>
<UL>
<UL>
<UL>
<LI>
<A HREF="#E68E87" ><IMG SRC="task.gif">Creating a Clickable Image</A>
<LI>
<A HREF="#E68E88" ><IMG SRC="task.gif">Determining Areas Within an Image Map</A>
<LI>
<A HREF="#E68E89" ><IMG SRC="task.gif">Adding MouseMove and MouseDown Code to the Image Map</A>
<UL>
<LI>
<A HREF="#E69E120" >Workshop Wrap-Up</A>
<LI>
<A HREF="#E69E121" >Next Steps</A>
<LI>
<A HREF="#E69E122" >Q&amp;A</A></UL></UL></UL></UL>
<HR ALIGN=CENTER>
<A NAME="E66E34"></A>
<H1 ALIGN=CENTER>
<CENTER>
<FONT SIZE=6 COLOR="#FF0000"><B>- 17 -</B>
<BR><B>Using Client-Side Image Maps&#151;the Easy Way</B></FONT></CENTER></H1>
<BR>
<P>In this chapter, you
<BR>
<UL>
<LI>Learn how to create a clickable image map
<BR>
<BR>
<LI>See how to use MouseMove and MouseDown events
<BR>
<BR>
</UL>
<P>Tasks in this chapter:
<BR>
<UL>
<LI>Creating a clickable image
<BR>
<BR>
<LI>Determining areas within an image map
<BR>
<BR>
<LI>Adding MouseMove and MouseDown code to the image map
<BR>
<BR>
</UL>
<P>Image maps are popular, despite the bandwidth they waste and the time they take to load. Users like using them and Web page designers like designing them&#151;perhaps because image maps are one of the few elements of a Web page that truly distinguish the Web from other media.
<BR>
<P>Why use client-side image maps? Using client-side image maps means you don't have to create a server-side script and program in CGI. All the processing work is done at the browser; to the server, a page with client-side image maps is just another HTML page. Server-side image maps can only operate by sending a special message to the server that is then interpreted by the image map script file. Only then is the correct page dispatched from the server. As a result, tasks such as displaying varying text when a mouse passes over each area of a map are not possible without client-side scripting.
<BR>
<P>The client-side image map example I use in this chapter would not usually see the light of day on my computer because the graphic I use is 27KB&#151;huge in comparison to my usual mean, sub-10KB images. Regardless, client-side image maps are fun to work with, and the one I use in this chapter is also an example of two-dimensional HTML using the HTML layout control. The text box that displays a message as the mouse passes over the image actually sits on top of the image itself. More astute designers can take this concept further and make the message appear to be part of the image.
<BR>
<BR>
<A NAME="E68E87"></A>
<H3 ALIGN=CENTER>
<CENTER>
<FONT SIZE=5 COLOR="#FF0000"><B><IMG SRC="task.gif">Creating a Clickable Image</B></FONT></CENTER></H3>
<BR>
<P>The following example uses an HTML layout to hold the image and handle the mouse events that give the image map its functionality:
<BR>
<OL>
<LI>First, open the ActiveX Control Pad and select New HTML Layout from the File menu.
<BR>
<BR>
<LI>When the new layout appears, resize it to almost fill the client area of the layout control.
<BR>
<BR>
<LI>You use an ISImage control to hold the image, so click the ISImage icon on the tool box and then click anywhere on the canvas of the layout to add the image control.
<BR>
<BR>
<LI>To add the actual graphic image to the control, you simply set the PicturePath property, as shown in Figure 17.1. You can find the graphic for this example, truck.gif, on the CD-ROM.
<BR>
<BR>
</OL>
<BLOCKQUOTE>
<BLOCKQUOTE>
<HR ALIGN=CENTER>
<BR>
<NOTE>When you develop layouts that include graphics such as truck.gif, you need to specify an absolute path for the graphic. However when you are ready to put the page, the .ALX HTML Layout file, and the graphic online, you can edit the PicturePath property from the source of the .ALX file to make it a relative path on the server.
<BR>
<BR><B><A HREF="17lax01.gif">Figure 17.1. The .GIF placed in the image control via the PicturePath property.</A></B>
<BR></NOTE>
<BR>
<HR ALIGN=CENTER>
</BLOCKQUOTE></BLOCKQUOTE>
<OL>
<LI>Now you can add the text box control that displays a short description of the linked file to the user. Using the Properties window, which you access from the Control Menu (by right-clicking the control), set the following properties (see Figure 17.2):
<BR>
<BR>
<CENTER><TABLE  BORDERCOLOR=#000040 BORDER=1 CELLSPACING=2 CELLPADDING=3 >
<TR>
<TD VALIGN=top  BGCOLOR=#80FFFF ><FONT COLOR=#000080>
Multi-Line
</FONT>
<TD VALIGN=top  BGCOLOR=#80FFFF ><FONT COLOR=#000080>
True
</FONT>
<TR>
<TD VALIGN=top  BGCOLOR=#80FFFF ><FONT COLOR=#000080>
Font
</FONT>
<TD VALIGN=top  BGCOLOR=#80FFFF ><FONT COLOR=#000080>
12 pt. Bold
</FONT>
<TR>
<TD VALIGN=top  BGCOLOR=#80FFFF ><FONT COLOR=#000080>
ForeColor
</FONT>
<TD VALIGN=top  BGCOLOR=#80FFFF ><FONT COLOR=#000080>
A shade of orange</FONT>
</TABLE></CENTER>
<P><B><A HREF="17lax02.gif">Figure 17.2. Setting the properties for the Layout.</A></B>
<BR>
<LI>Save the layout as truck.alx.
<BR>
<BR>
</OL>
<P>The next stage is to work out which parts of the image are clickable and act as hyperlinks to other pages in the Web site. 
<BR>
<BR>
<A NAME="E68E88"></A>
<H3 ALIGN=CENTER>
<CENTER>
<FONT SIZE=5 COLOR="#FF0000"><B><IMG SRC="task.gif">Determining Areas Within an Image Map</B></FONT></CENTER></H3>
<BR>
<P>When dealing with image maps in VBScript, you use rectangles to determine the clickable areas.  You specify the virtual rectangles with two coordinates, representing the top, left corner and bottom, right corner.
<BR>
<P>The two coordinates are known as X1,Y1 and X2,Y2. X is the horizontal axis and Y is the vertical axis; both axes have their origins in the top, left corner of the screen.
<BR>
<P>Therefore, you need to specify four values for each clickable area: X1, Y1, X2, and Y2. X1 is the number of pixels from the left side of the layout to the left edge of the clickable area. X2 is the number of pixels from the left side of the layout to the right edge of the clickable area. Y1 is the number of pixels from the top edge of the layout to the top edge of the clickable area. And finally, Y2 is the number of pixels from the top edge of the layout to the bottom edge of the clickable area.
<BR>
<P>To be sure that I specified values that are understood by the layout control, I found it easiest to use the layout control itself to view the values of X and Y. You can do this by adding a very simple line of code to the MouseMove event of the image as follows: 
<BR>
<OL>
<LI>With truck.alx open in the layout control, launch the Script Wizard.
<BR>
<BR>
<LI>Select Image1's MouseMove event.
<BR>
<BR>
<LI>Enter the following line of code in the event handler (see Figure 17.3):
<BR>
<BR>
<UL>
<UL>
<BR>
<PRE>
<FONT COLOR="#000080">rem TextBox1.Text = &quot;X=&quot; &amp; X &amp; &quot; Y=&quot; &amp; Y</FONT></PRE></UL></UL>
<P><B><A HREF="17lax03.gif">Figure 17.3. The temporary event handler to display the X and Y mouse values.</A></B>
<BR>
<BR>
This displays the values of both X and Y as you move the mouse pointer around the screen.
<BR>
<BR>
<LI><A NAME="I2"></A>Save the layout.
<BR>
<BR>
<LI>Open a new HTML document in the ActiveX Control Pad.
<BR>
<BR>
<LI>Amend the body tag so that the background color is white.
<BR>
<BR>
<LI>Add &lt;CENTER&gt; tags to the page.
<BR>
<BR>
<LI>With the cursor between the open and close &lt;CENTER&gt; tags, select Add HTML Layout from the Edit menu. 
<BR>
<BR>
<LI>Choose truck.alx from the file dialog and click OK. The object definition for the layout control is automatically placed in your HTML document, as shown in Figure 17.4.
<BR>
<BR><B><A HREF="17lax04.gif">Figure 17.4. The new HTML document complete with layout object definition.</A></B>
<BR>
<BR>
<LI>Save the file as truck.htm, and run it with the browser. It should look like what you see in Figure 17.5.
<BR>
<BR><B><A HREF="17lax05.gif">Figure 17.5. Determining the clickable areas on the image.</A></B>
<BR>
<BR>
<LI>With the cursor at the top of a clickable area, make a note of the Y value; this is Y1.
<BR>
<BR>
<LI>With the cursor at the bottom of a clickable area, make a note of the Y value; this is Y2.
<BR>
<BR>
<LI>With the cursor at the left of a clickable area, make a note of the X value; this is X1.
<BR>
<BR>
<LI>With the cursor at the right of a clickable area, make a note of the X value; this is X2.
<BR>
<BR>
</OL>
<P>You then create a table of values like the one shown in Table 17.1, which is your map. 
<BR>
<BR>
<P ALIGN=CENTER>
<CENTER>
<FONT COLOR="#000080"><B>Table 17.1. The X and Y coordinate values.</B></FONT></CENTER>
<BR>

<CENTER><TABLE  BORDERCOLOR=#000040 BORDER=1 CELLSPACING=2 CELLPADDING=3 >
<TR>
<TD VALIGN=top  BGCOLOR=#80FFFF ><FONT COLOR=#000080><BR></FONT>

<TD VALIGN=top  BGCOLOR=#80FFFF ><FONT COLOR=#000080>
<I>X1</I>
</FONT>
<TD VALIGN=top  BGCOLOR=#80FFFF ><FONT COLOR=#000080>
<I>Y1</I>
</FONT>
<TD VALIGN=top  BGCOLOR=#80FFFF ><FONT COLOR=#000080>
<I>X2</I>
</FONT>
<TD VALIGN=top  BGCOLOR=#80FFFF ><FONT COLOR=#000080>
<I>Y2</I>
</FONT>
<TR>
<TD VALIGN=top  BGCOLOR=#80FFFF ><FONT COLOR=#000080>
Area 1
</FONT>
<TD VALIGN=top  BGCOLOR=#80FFFF ><FONT COLOR=#000080>
50
</FONT>
<TD VALIGN=top  BGCOLOR=#80FFFF ><FONT COLOR=#000080>
29
</FONT>
<TD VALIGN=top  BGCOLOR=#80FFFF ><FONT COLOR=#000080>
154
</FONT>
<TD VALIGN=top  BGCOLOR=#80FFFF ><FONT COLOR=#000080>
92
</FONT>
<TR>
<TD VALIGN=top  BGCOLOR=#80FFFF ><FONT COLOR=#000080>
Area 2
</FONT>
<TD VALIGN=top  BGCOLOR=#80FFFF ><FONT COLOR=#000080>
124
</FONT>
<TD VALIGN=top  BGCOLOR=#80FFFF ><FONT COLOR=#000080>
92
</FONT>
<TD VALIGN=top  BGCOLOR=#80FFFF ><FONT COLOR=#000080>
190
</FONT>
<TD VALIGN=top  BGCOLOR=#80FFFF ><FONT COLOR=#000080>
168
</FONT>
<TR>
<TD VALIGN=top  BGCOLOR=#80FFFF ><FONT COLOR=#000080>
Area 3
</FONT>
<TD VALIGN=top  BGCOLOR=#80FFFF ><FONT COLOR=#000080>
375
</FONT>
<TD VALIGN=top  BGCOLOR=#80FFFF ><FONT COLOR=#000080>
10
</FONT>
<TD VALIGN=top  BGCOLOR=#80FFFF ><FONT COLOR=#000080>
434
</FONT>
<TD VALIGN=top  BGCOLOR=#80FFFF ><FONT COLOR=#000080>
96
</FONT>
<TR>
<TD VALIGN=top  BGCOLOR=#80FFFF ><FONT COLOR=#000080>
Area 4
</FONT>
<TD VALIGN=top  BGCOLOR=#80FFFF ><FONT COLOR=#000080>
344
</FONT>
<TD VALIGN=top  BGCOLOR=#80FFFF ><FONT COLOR=#000080>
97
</FONT>
<TD VALIGN=top  BGCOLOR=#80FFFF ><FONT COLOR=#000080>
403
</FONT>
<TD VALIGN=top  BGCOLOR=#80FFFF ><FONT COLOR=#000080>
184</FONT>
</TABLE></CENTER><P>You are now ready to add the code that turns your image into an image map. 
<BR>
<BR>
<A NAME="E68E89"></A>
<H3 ALIGN=CENTER>
<CENTER>
<FONT SIZE=5 COLOR="#FF0000"><B><IMG SRC="task.gif">Adding MouseMove and MouseDown Code to the Image Map</B></FONT></CENTER></H3>
<BR>
<P>The main functionality of any image map is the capability to click an area of the graphic and have that mouse click translated into an instruction to navigate to a different URL. However, the ActiveX Image control does not include a Click event. It does have a MouseDown event,  and in reality, a Click event is the joining together of two other events&#151;MouseDown and MouseUp. The MouseDown event is fired when the mouse button is pressed, which works just as well as a click for your purposes.
<BR>
<P>One thing that server-side images maps cannot do is track the mouse as it passes over the image. For this, you need a MouseMove event, which you will program to display relevant messages about the area of the image that the mouse is currently over. 
<BR>
<OL>
<LI>If it's not already there, load truck.alx into the layout control.
<BR>
<BR>
<LI>Launch the Script Wizard.
<BR>
<BR>
<LI>Go to the Image1 MouseMove event that you created earlier.
<BR>
<BR>
<LI>Add the word rem to the start of the line you entered earlier. This means &quot;remark&quot; and instructs the VBScript compiler to ignore the line as executable code. You can obviously delete it if you want, but you might want to make further amendments later on.
<BR>
<BR>
<LI>Add the following code to the event handler:
<BR>
<BR>
<UL>
<UL>
<PRE>
<FONT COLOR="#000080">If (InArea(x, y,  50, 29, 154, 92)=true) Then 
    TextBox1.Text = &quot;Our routes, pick-ups, and drop-offs&quot;
ElseIf (InArea(x, y, 124, 92, 190, 168)=true) Then 
    TextBox1.Text = &quot;Meet the management team&quot;
ElseIf (InArea(x, y,  375, 10, 434, 96)=true) Then 
    TextBox1.Text = &quot;Our Rates.. the best in the business&quot;
ElseIf (InArea(x, y,  344, 97, 403, 184)=true) Then 
    TextBox1.Text = &quot;Job vacancies with Web Trucking&quot;
Else 
    TextBox1.Text = &quot;Welcome to the Web Trucking Web Site&quot;
End If</FONT></PRE></UL></UL>
What's this little lot doing? Notice that each pair of lines is basically the same; only the numbers and the explicit text are changing.
<BR>
<BR>You are going to call a custom function, InArea, which you create shortly. InArea takes the actual values of X and Y that were passed from the MouseMove event. X and Y pinpoint the whereabouts of the mouse cursor. InArea is also passed the four coordinates that describe the clickable area. If InArea finds that X and Y are within the clickable area, the Text property of TextBox1 is changed to a particular description. 
<BR>
<BR>Figure 17.6 shows what your finished MouseMove event handler should look like. 
<BR>
<BR><B><A HREF="17lax06.gif">Figure 17.6. The MouseMove event handler.</A></B>
<BR>
<BR>
<LI>Now select the MouseDown event for Image1. Note that an image does not have an explicit OnClick or click event, which is no problem in this case because MouseDown passes the X and Y coordinates that you need to determine whether the mouse is within a clickable area. As the name suggests, MouseDown fires when the mouse button is pressed.
<BR>
<BR>Add the following code to the MouseDown event handler:
<BR>
<BR>
<UL>
<UL>
<PRE>
<FONT COLOR="#000080">If (InArea(x, y,  50, 29, 154, 92)=true) Then 
    Window.location.href = &quot;truck2.html&quot;
ElseIf (InArea(x, y, 124, 92, 190, 168)=true) Then 
    Window.location.href = &quot;truck3.html&quot;
ElseIf (InArea(x, y,  375, 10, 434, 96)=true) Then 
    Window.location.href = &quot;truck1.html&quot;
ElseIf (InArea(x, y,  344, 97, 403, 184)=true) Then 
    Window.location.href = &quot;truck4.html&quot;
End If</FONT></PRE></UL></UL>
Notice that the conditional statements are identical to those of the MouseMove event handler. This time, if the mouse is found to be within a clickable area, you change the href property of the Location object, thereby launching a new page, replicating the functionality of a hyperlink. Your MouseDown event handler should now resemble the one in Figure 17.7. 
<BR>
<BR><B><A HREF="17lax07.gif">Figure 17.7. The completed MouseDown event handler.</A></B>
<BR>
<BR>
<LI>Now you need to create the custom function that determines whether the mouse cursor is within a clickable area. With your mouse in the right Actions pane, right-click and select New Procedure from the pop-up menu.
<BR>
<BR>
<LI>Change the word Sub to Function and replace the default name of Procedure1 with InArea.
<BR>
<BR>
<LI>After the word InArea,  add the following argument list, which is the list of variables that you want passed into the function: 
<BR>
<BR>
<UL>
<UL>
<BR>
<PRE>
<FONT COLOR="#000080">(x, y, ax1, ay1, ax2, ay2)</FONT></PRE></UL></UL>
<LI>In the script window, enter the code for the custom function (shown in Figure 17.8), which is a straightforward one liner:
<BR>
<BR>
<UL>
<UL>
<BR>
<PRE>
<FONT COLOR="#000080">InArea =  x&gt;=ax1 AND x&lt;=ax2 AND y&gt;=ay1 AND y&lt;=ay2</FONT></PRE></UL></UL>
<P><B><A HREF="17lax08.gif">Figure 17.8. The InArea custom function.</A></B>
<BR>
<LI>Click OK, and the Script Wizard generates the required code in the truck.alx source file.
<BR>
<BR>
<LI>Save the layout and try it with the browser.
<BR>
<BR>
<LI>Run truck.htm with the browser. Remember that no amendments are necessary to the HTML file because all the functionality of the page is held within the .ALX file.
<BR>
<BR>
</OL>
<P>Let's look at the image map in action within the browser. Figure 17.9 shows that, as the mouse is moved around the image, the MouseMove event is fired, causing text to be displayed in the text box.
<BR>
<P><B><A HREF="17lax09.gif">Figure 17.9. As you pass the cursor over an area, the text changes.</A></B>
<BR>
<P>As you move the cursor to another area of the image map, the text in the text box changes, as shown in Figure 17.10.
<BR>
<P><B><A HREF="17lax10.gif">Figure 17.10. Move to another area of the image map, and the text changes.</A></B>
<BR>
<P>Clicking on an area of the image map causes another page of the Web site to be loaded, as shown in Figure 17.11. 
<BR>
<P><B><A HREF="17lax11.gif">Figure 17.11. What happens when you click an area? You access other pages in the Web site.</A></B>
<BR>
<P>Listing 17.1 contains the complete source code for the Image map example, truck.alx. 
<BR>
<P>
<FONT COLOR="#000080"><B>Listing 17.1. The truck.alx code.</B></FONT>
<BR>
<PRE>
<FONT COLOR="#000080">&lt;SCRIPT LANGUAGE=&quot;VBScript&quot;&gt;
&lt;!--
Sub Image1_MouseMove(Button, Shift, X, Y)
rem TextBox1.Text = &quot;X=&quot; &amp; X &amp; &quot; Y=&quot; &amp; Y
  If (InArea(x, y,  50, 29, 154, 92)=true) Then 
      TextBox1.Text = &quot;Our routes, pick-ups, and drop-offs&quot;
  ElseIf (InArea(x, y, 124, 92, 190, 168)=true) Then 
      TextBox1.Text = &quot;Meet the management team&quot;
  ElseIf (InArea(x, y,  375, 10, 434, 96)=true) Then 
      TextBox1.Text = &quot;Our Rates.. the best in the business&quot;
  ElseIf (InArea(x, y,  344, 97, 403, 184)=true) Then 
      TextBox1.Text = &quot;Job vacancies with Web Trucking&quot;
  Else 
      TextBox1.Text = &quot;Welcome to the Web Trucking Web Site&quot;
  End If
end sub
Sub Image1_MouseDown(Button, Shift, X, Y)
  If (InArea(x, y,  50, 29, 154, 92)=true) Then 
      Window.location.href = &quot;truck2.html&quot;
  ElseIf (InArea(x, y, 124, 92, 190, 168)=true) Then 
      Window.location.href = &quot;truck3.html&quot;
  ElseIf (InArea(x, y,  375, 10, 434, 96)=true) Then 
      Window.location.href = &quot;truck1.html&quot;
  ElseIf (InArea(x, y,  344, 97, 403, 184)=true) Then 
      Window.location.href = &quot;truck4.html&quot;
  End If
end sub
Function InArea(x, y, ax1, ay1, ax2, ay2)
     InArea =  x&gt;=ax1 AND x&lt;=ax2 AND y&gt;=ay1 AND y&lt;=ay2
end function
--&gt;
&lt;/SCRIPT&gt;
&lt;DIV ID=&quot;Layout1&quot; STYLE=&quot;LAYOUT:FIXED;WIDTH:450pt;HEIGHT:254pt;&quot;&gt;
    &lt;OBJECT ID=&quot;Image1&quot;
     CLASSID=&quot;CLSID:D4A97620-8E8F-11CF-93CD-00AA00C08FDF&quot; STYLE=&quot;TOP:0pt;LEFT:0pt;WIDTH:450pt;HEIGHT:253pt;ZINDEX:0;&quot;&gt;
        &lt;PARAM NAME=&quot;PicturePath&quot; VALUE=&quot;f:\llww\chapter17\truck.gif&quot;&gt;
        &lt;PARAM NAME=&quot;BorderStyle&quot; VALUE=&quot;0&quot;&gt;
        &lt;PARAM NAME=&quot;SizeMode&quot; VALUE=&quot;3&quot;&gt;
        &lt;PARAM NAME=&quot;Size&quot; VALUE=&quot;15875;8925&quot;&gt;
        &lt;PARAM NAME=&quot;PictureAlignment&quot; VALUE=&quot;0&quot;&gt;
        &lt;PARAM NAME=&quot;VariousPropertyBits&quot; VALUE=&quot;19&quot;&gt;
    &lt;/OBJECT&gt;
    &lt;OBJECT ID=&quot;TextBox1&quot;
     CLASSID=&quot;CLSID:8BD21D10-EC42-11CE-9E0D-00AA006002F3&quot; STYLE=&quot;TOP:64pt;LEFT:195pt;WIDTH:146pt;HEIGHT:74pt;TABINDEX:0;ZINDEX:1;&quot;&gt;
        &lt;PARAM NAME=&quot;VariousPropertyBits&quot; VALUE=&quot;2894088219&quot;&gt;
        &lt;PARAM NAME=&quot;ForeColor&quot; VALUE=&quot;4227327&quot;&gt;
        &lt;PARAM NAME=&quot;Size&quot; VALUE=&quot;5151;2611&quot;&gt;
        &lt;PARAM NAME=&quot;Value&quot; VALUE=&quot;Welcome to the Web Trucking Inc. Web Site&quot;&gt;
        &lt;PARAM NAME=&quot;FontEffects&quot; VALUE=&quot;1073741825&quot;&gt;
        &lt;PARAM NAME=&quot;FontHeight&quot; VALUE=&quot;240&quot;&gt;
        &lt;PARAM NAME=&quot;FontCharSet&quot; VALUE=&quot;0&quot;&gt;
        &lt;PARAM NAME=&quot;FontPitchAndFamily&quot; VALUE=&quot;2&quot;&gt;
        &lt;PARAM NAME=&quot;ParagraphAlign&quot; VALUE=&quot;3&quot;&gt;
        &lt;PARAM NAME=&quot;FontWeight&quot; VALUE=&quot;700&quot;&gt;
    &lt;/OBJECT&gt;
&lt;/DIV&gt;</FONT></PRE>
<BR>
<A NAME="E69E120"></A>
<H4 ALIGN=CENTER>
<CENTER>
<FONT SIZE=4 COLOR="#FF0000"><B>Workshop Wrap-Up</B></FONT></CENTER></H4>
<BR>
<P>Creating image maps with VBScript and the HTML layout control is very straightforward and allows you to use techniques that are not available elsewhere. The key is to accurately specify the boundaries of each clickable area, ensuring that they do not overlap.
<BR>
<BR>
<A NAME="E69E121"></A>
<H4 ALIGN=CENTER>
<CENTER>
<FONT SIZE=4 COLOR="#FF0000"><B>Next Steps</B></FONT></CENTER></H4>
<BR>
<P>Now have a look at these other chapters about the HTML Layout Control and interacting with the browser itself:
<BR>
<UL>
<LI>To learn more about the HTML layout control, see Chapter 14, &quot;Using the HTML Layout Control.&quot;
<BR>
<BR>
<LI>To see another graphic example of VBScript and the layout control, consult Chapter 16, &quot;Real Life Examples II.&quot;
<BR>
<BR>
<LI>Chapter 18, &quot;Interacting with the Browser,&quot; shows how you can use VBScript in other ways to interact with the browser.
<BR>
<BR>
</UL>
<BR>
<A NAME="E69E122"></A>
<H4 ALIGN=CENTER>
<CENTER>
<FONT SIZE=4 COLOR="#FF0000"><B>Q&amp;A</B></FONT></CENTER></H4>
<BR>
<P><B>Q: Can any graphic be used as an image map?</B>
<BR>
<P><B>A:</B> Yes. The format and type of graphic is unimportant. If you can display it through the image control, you can use it as an image map.
<BR>
<P><B>Q: I tried using my exisiting coordinate table with my image map in VBScript with the Layout control as described in this chapter, and it didn't work properly. Why is that?</B>
<BR>
<P><B>A:</B> The measurement system of the Layout control is different from the normal HTML page that your current coordinates relate to. Therefore, you must re-measure your X and Y coordinates.
<BR>
<P ALIGN=CENTER>
<A HREF="lax16.htm" TARGET="_self"><IMG SRC="blanprev.gif" WIDTH = 37 HEIGHT = 37 BORDER = 0 ALT="Previous Page"></A>
<A HREF="#I0" TARGET="_self"><IMG SRC="blantop.gif" WIDTH = 37 HEIGHT = 37 BORDER = 0 ALT="Page Top"></A>
<A HREF="httoc.htm" TARGET="_self"><IMG SRC="blantoc.gif" WIDTH = 37 HEIGHT = 37 BORDER = 0 ALT="TOC"></A>
<A HREF="lax18.htm" TARGET="_self"><IMG SRC="blannext.gif" WIDTH = 37 HEIGHT = 37 BORDER = 0 ALT="Next Page"></A>
<A HREF="http://www.mcp.com/sams/" TARGET="_self"><IMG SRC="blanhome.gif" WIDTH = 37 HEIGHT = 37 BORDER = 0 ALT="See Page"></A>
</BODY></HTML>
