<HTML>
<HEAD>
<TITLE>lax10.htm </TITLE>
<LINK REL="ToC" HREF="httoc.htm">
<LINK REL="Index" HREF="htindex.htm">
<LINK REL="Next" HREF="lax11.htm">
<LINK REL="Previous" HREF="lax09.htm"></HEAD>
<BODY BGCOLOR="#FFFFFF" TEXT="#000000" LINK="#0000FF" VLINK="#800080">
<A NAME="I0"></A><P ALIGN=CENTER>
<A HREF="lax09.htm" TARGET="_self"><IMG SRC="blanprev.gif" WIDTH = 37 HEIGHT = 37 BORDER = 0 ALT="Previous Page"></A>
<A HREF="httoc.htm" TARGET="_self"><IMG SRC="blantoc.gif" WIDTH = 37 HEIGHT = 37 BORDER = 0 ALT="TOC"></A>
<A HREF="lax11.htm" TARGET="_self"><IMG SRC="blannext.gif" WIDTH = 37 HEIGHT = 37 BORDER = 0 ALT="Next Page"></A>
<A HREF="http://www.mcp.com/sams/" TARGET="_self"><IMG SRC="blanhome.gif" WIDTH = 37 HEIGHT = 37 BORDER = 0 ALT="See Page"></A>
<HR ALIGN=CENTER>
<P>
<UL>
<UL>
<UL>
<UL>
<LI>
<A HREF="#E69E79" >Defining a Static Array</A></UL>
<LI>
<A HREF="#E68E58" ><IMG SRC="task.gif">Displaying the Day</A>
<UL>
<LI>
<A HREF="#E69E80" >Defining a Dynamic Array</A></UL>
<LI>
<A HREF="#E68E59" ><IMG SRC="task.gif">Adding a Dynamic Array to a Web Page</A>
<UL>
<LI>
<A HREF="#E69E81" >Multidimension Arrays</A></UL>
<LI>
<A HREF="#E68E60" ><IMG SRC="task.gif">Adding a Multidimension Array to a Web page</A>
<UL>
<LI>
<A HREF="#E69E82" >Data Types with Arrays in VBScript</A>
<LI>
<A HREF="#E69E83" >Workshop Wrap-Up</A>
<LI>
<A HREF="#E69E84" >Next Steps</A>
<LI>
<A HREF="#E69E85" >Q&amp;A</A></UL></UL></UL></UL>
<HR ALIGN=CENTER>
<A NAME="E66E20"></A>
<H1 ALIGN=CENTER>
<CENTER>
<FONT SIZE=6 COLOR="#FF0000"><B>- 10 -</B>
<BR><B>Using the Power of Arrays</B></FONT></CENTER></H1>
<BR>
<P>In this chapter, you
<BR>
<UL>
<LI>Use arrays in your scripts
<BR>
<BR>
<LI>Learn about static and dynamic arrays
<BR>
<BR>
<LI>Learn about multidimension arrays
<BR>
<BR>
<LI>Build a sample Web that uses a static array
<BR>
<BR>
<LI>Build a sample Web that uses a dynamic array
<BR>
<BR>
<LI>Check the data subtype of an array
<BR>
<BR>
<LI>Build a sample Web that uses a multidimension array
<BR>
<BR>
</UL>
<P>Tasks in this chapter:
<BR>
<UL>
<LI>Displaying the day
<BR>
<BR>
<LI>Adding a dynamic array to a Web page
<BR>
<BR>
<LI>Adding a multidimensional array to a Web page
<BR>
<BR>
</UL>
<P>What is an array? An array is a series of memory locations that holds data sequentially in elements. You can access the data by referencing an element within the array.
<BR>
<P>In this chapter, you'll see three types of arrays:
<BR>
<UL>
<LI>A static array has a predefined size; the number of elements in a static array cannot vary.
<BR>
<BR>
<LI>A dynamic array can have its size (number of elements) increased and decreased while the program is running.
<BR>
<BR>
<LI>A multidimension array stores data in two, three, or even more dimensions. The best way to imagine a multidimension array is to think of the first dimension elements each having their own arrays attached to them.
<BR>
<BR>
</UL>
<BR>
<A NAME="E69E79"></A>
<H4 ALIGN=CENTER>
<CENTER>
<FONT SIZE=4 COLOR="#FF0000"><B>Defining a Static Array</B></FONT></CENTER></H4>
<BR>
<P>To include an array in your script, you must first instruct VBScript to create an array and also tell it how many elements you want the array to have by providing the highest element index:
<BR>
<BR>
<PRE>
<FONT COLOR="#000080">Dim myArray(9)</FONT></PRE>
<P>This code creates an array called myArray with 10 elements. Remember that VBScript arrays always start with position 0, so when you reference this array, the maximum element or index number you can use is 9.
<BR>
<P>To access data from or assign data to the array, you simply refer to the array name and the element number:
<BR>
<BR>
<PRE>
<FONT COLOR="#000080">myArray(3) = &quot;Tuesday&quot;</FONT></PRE>
<P>This code places the word &quot;Tuesday&quot; in the fourth element of the array (fourth not third). You can use a loop to access the data in an array like this:
<BR>
<PRE>
<FONT COLOR="#000080">For I = 0 to 9
 Alert myArray(i)
Next </FONT></PRE>
<BR>
<A NAME="E68E58"></A>
<H3 ALIGN=CENTER>
<CENTER>
<FONT SIZE=5 COLOR="#FF0000"><B><IMG SRC="task.gif">Displaying the Day</B></FONT></CENTER></H3>
<BR>
<P>Here's a quick example that lets you display the day of the week on your page. First, you must build an array of days, and then you use the built-in Weekday() function to access the correct day:
<BR>
<PRE>
<FONT COLOR="#000080">&lt;HTML&gt;
&lt;HEAD&gt;
&lt;TITLE&gt;My Weekday Page&lt;/TITLE&gt;
&lt;SCRIPT LANGUAGE=&quot;vbscript&quot;&gt;
Dim myDays(6)
myDays(0) = &quot;Saturday&quot;
myDays(1) = &quot;Sunday&quot;
myDays(2) = &quot;Monday&quot;
myDays(3) = &quot;Tuesday&quot;
myDays(4) = &quot;Wednesday&quot;
myDays(5) = &quot;Thursday&quot;
myDays(6) = &quot;Friday&quot;
&lt;/SCRIPT&gt;
&lt;/HEAD&gt;
&lt;BODY BGCOLOR=&quot;white&quot;&gt;
&lt;FONT FACE=&quot;arial&quot;&gt;
&lt;CENTER&gt;
&lt;H2&gt;Guess What!!... Today is 
&lt;SCRIPT LANGUAGE=&quot;vbscript&quot;&gt;
 myNow = Now()
 myWeekDay = WeekDay(myNow)
 strDay = myDays(myWeekDay)
 Document.Write strDay
&lt;/SCRIPT&gt;
&lt;/H2&gt;
&lt;/CENTER&gt;
&lt;/BODY&gt;</FONT></PRE>
<P>The first script block sets up the array with seven elements. Then, the script assigns strings to each element. Note that the VBScript Weekday() function is programmed to return 0 when it's Saturday:
<BR>
<PRE>
<FONT COLOR="#000080">Dim myDays(6)
myDays(0) = &quot;Saturday&quot;
myDays(1) = &quot;Sunday&quot;
myDays(2) = &quot;Monday&quot;
myDays(3) = &quot;Tuesday&quot;
myDays(4) = &quot;Wednesday&quot;
myDays(5) = &quot;Thursday&quot;
myDays(6) = &quot;Friday&quot;</FONT></PRE>
<P>Because this first script is outside any subroutine, it executes immediately upon loading and also creates the array with global scope, which means that any other script on the page can access it. The next script block, which appears in the headline tag, is also outside of any subroutine, so it also executes upon loading:
<BR>
<PRE>
<FONT COLOR="#000080"> myNow = Now()
 myWeekDay = WeekDay(myNow)
 strDay = myDays(myWeekDay)
 Document.Write strDay</FONT></PRE>
<P>I split the procedure into four lines so that you can see how it works. First, the date is retrieved using Now() and assigned to the myNow variable. Next, the number of the day of the week (from 0 to 6, starting at Saturday) is returned using WeekDay(), and the value is assigned to the myWeekDay variable. The next line dips into the array at the element number corresponding to the day of the week. The value retrieved from the array is assigned to strDay, which is then printed on the Web page using the Write method. I showed this in four lines of code, but in reality, you need only one line:
<BR>
<BR>
<PRE>
<FONT COLOR="#000080">Document.Write myDays(WeekDay(Now()))</FONT></PRE>
<P>Now that you've typed all that code and tried it with the browser, as shown in Figure 10.1, you might be interested to know that the file days.htm is on the CD-ROM.
<BR>
<P><B><A HREF="10lax01.gif">Figure 10.1. Ideal for people like me!</A></B>
<BR>
<BR>
<A NAME="E69E80"></A>
<H4 ALIGN=CENTER>
<CENTER>
<FONT SIZE=4 COLOR="#FF0000"><B>Defining a Dynamic Array</B></FONT></CENTER></H4>
<BR>
<P>Dynamic arrays are ideal when you aren't sure at the outset how many elements you need for the array and you want to define or redefine the array during the program's execution. Defining a dynamic array is similar to defining a static array, except you simply leave out the number of elements:
<BR>
<BR>
<PRE>
<FONT COLOR="#000080">Dim myDynamicArray()</FONT></PRE>
<P>This instructs VBScript to create a dynamic array that you will dimension at a later stage in the program. To dimension the dynamic array, you use the Redim keyword and specify a number of elements:
<BR>
<BR>
<PRE>
<FONT COLOR="#000080">ReDim myDynamicArray(9)</FONT></PRE>
<P>You can dimension an array at any time within the script. However, when it comes to resizing (or redimensioning) a dynamic array, you must be careful. Resizing a dynamic array creates a brand new array with the newly requested number of elements. Any data you had stored in the old array is lost. Help comes in the form of the Preserve keyword. When you use Preserve after the Redim, the contents of the old array are copied into the new array automatically. However, if you specify a lower number of elements, the data in the upper elements is lost. The following examples illustrate the use of dynamic arrays:
<BR>
<UL>
<LI>Dim myDynamicArray() defines a dynamic array.
<BR>
<BR>
<LI>ReDim myDynamicArray(9) specifies 10 (0 though 9) elements.
<BR>
<BR>
<LI>ReDim Preserve myDynamicArray(19) increases the number to 20 elements and preserves any data already stored in the array.
<BR>
<BR>
<LI>ReDim Preserve myDynamicArray(14) reduces the number to 15 elements. Only the data in elements 0 to 14 is preserved; the data in elements 15 to 19 is lost forever.
<BR>
<BR>
</UL>
<P>You can add new data to the dynamic array whenever you need to, increasing the size of the array as you go, but what happens when you want to access that data again? You are obviously storing it for a purpose! How do you find out how many elements you now have in your ever-expanding dynamic array? The answer is a function called UBound().
<BR>
<P>UBound() returns the largest element number. In an array of 20 elements, UBound returns the number 19. You use the UBound function like this:
<BR>
<BR>
<PRE>
<FONT COLOR="#000080">i = UBound(myDynamicArray)</FONT></PRE>
<P>To show how a dynamic array works in practice, construct a sample Web page in the next section.
<BR>
<BR>
<A NAME="E68E59"></A>
<H3 ALIGN=CENTER>
<CENTER>
<FONT SIZE=5 COLOR="#FF0000"><B><IMG SRC="task.gif">Adding a Dynamic Array to a Web Page</B></FONT></CENTER></H3>
<BR>
<P><A NAME="I2"></A>This example uses a very simple array to store the information given by the user. The Web page is a basic travel survey in which the user enters the names of cities visited in the past year. Of course, you don't know how many cities a user might have visited, so this is an ideal job for a dynamic array. Perform the following steps to build this example:
<BR>
<OL>
<LI>First, here's the HTML part of things, which you need to build, save, and test:
<BR>
<BR>
<UL>
<UL>
<PRE>
<FONT COLOR="#000080">&lt;HTML&gt;
&lt;HEAD&gt;
&lt;TITLE&gt;Travel Survey&lt;/TITLE&gt;
&lt;SCRIPT LANGUAGE=&quot;vbscript&quot;&gt;
&lt;/SCRIPT&gt;
&lt;/HEAD&gt;
&lt;BODY BGCOLOR=&quot;white&quot;&gt;
&lt;FONT FACE=&quot;arial&quot; SIZE=3&gt;
&lt;CENTER&gt;
&lt;H2&gt;Travel Survey&lt;/H2&gt;
&lt;P&gt;
&lt;BLOCKQUOTE&gt;
Enter all the cities you have traveled to in the 
past year, enter as many or as few as you like.
&lt;/BLOCKQUOTE&gt;
&lt;P&gt;
 &lt;FORM NAME=&quot;Form1&quot;&gt;
    &lt;INPUT TYPE=&quot;Text&quot; NAME=&quot;Input&quot;&gt;
    &lt;INPUT TYPE=&quot;Button&quot; NAME=&quot;cmdAddOne&quot; VALUE=&quot;Add to List&quot;&gt;
    &lt;INPUT TYPE=&quot;Button&quot; NAME=&quot;cmdFinish&quot; VALUE=&quot;Finish&quot;&gt;
 &lt;/FORM&gt;
&lt;/CENTER&gt;
&lt;/BODY&gt;
&lt;/HTML&gt;</FONT></PRE></UL></UL>
<BR>
<LI>After  you build the HTML page, you can add the scripted sections within the &lt;SCRIPT&gt; tags. First, add the global variable declarations, constants, and assignments:
<BR>
<BR>
<UL>
<UL>
<PRE>
<FONT COLOR="#000080">Dim strCities()
Dim CRLF
ReDim strCities(0)
CRLF = Chr(10) &amp; Chr(13)</FONT></PRE></UL></UL>
The first line defines a  dynamic array called strCities. The next line defines a global constant called CRLF. The dynamic array has to have a starting point, so it is immediately redimensioned to one element (index 0). Finally, this section includes the carriage return and line feed variable for use later in a message box.
<BR>
<BR>
<LI>Now, enter the event handler for the Add to List button:
<BR>
<BR>
<UL>
<UL>
<PRE>
<FONT COLOR="#000080">Sub cmdAddOne_OnClick
  If Len(Document.Form1.Input.Value) &gt; 0 Then
      ReDim Preserve strCities(UBound(strCities)+1)
      strCities(UBound(strCities)) = Document.Form1.Input.Value
      Document.Form1.Input.Value = &quot;&quot;
  End If
End Sub</FONT></PRE></UL></UL>
<P><A NAME="I3"></A>
The first line of the event handler is a verification to check whether the user actually entered some data prior to clicking the button. If he didn't, the program simply jumps to End Sub, and nothing is done.
<BR>
<BR>Next comes the important code to increase the size of the array by one element. You'll recall that I said all arrays in VBScript start with element 0. Because of the way this script is constructed, element 0 is never used; this is a result of simplifying the code so that it is the same for each click of the button. The element number is obtained by finding the current highest element number using UBound (a mnemonic for upper boundary) and then adding one to it. Therefore, the first time this button is clicked, UBound returns 0; the first element is 1. If you desperately want to use element 0, you have to check to see whether this is the first time around and not add one.
<BR>
<BR>The next line assigns whatever the user entered in the input text box to the highest element, which you find by using UBound. On the first button click, the highest element is number 1. The next line empties the text box ready for the user to enter the next city, and after the final tidying up, it is the user's turn.
<BR>
<BR>
<LI>Now you need to add the event handler for the Finish button, which retrieves the data from the array and displays it to the user:
<BR>
<BR>
</OL>
<UL>
<UL>
<PRE>
<FONT COLOR="#000080">Sub cmdFinish_OnClick
  Dim i
  Dim strMsg
  strMsg = &quot;You have visited &quot; &amp;  UBound(strCities) 
  strMsg = strMsg &amp; &quot; cities in the past year&quot; &amp; CRLF
  For i = 1 to UBound(strCities)
      strMsg = strMsg &amp; strCities(i) &amp; CRLF
  Next
 
  MsgBox strMsg,0,&quot;Cities&quot; 
End Sub</FONT></PRE></UL></UL>
<P>The first two lines of the event handler create two local variables, one for the loop counter and the other to hold the message.
<BR>
<P>The first part of the message includes the number of cities visited by the user. You quickly obtain this by returning the highest index number in the array.
<BR>
<P>Now, you have to return the values held in each element of the array (apart from the first element 0, which in this case is not used). The loop assigns the values of 1 through the maximum number of cities entered to the loop counter i, which can then access the array element. The value of each element is then concatenated to the message string followed by the carriage-return character.
<BR>
<P>When all the elements have been accessed, the message is displayed to the user in a message box, and that is that, as they say. Just for fun, Listing 10.1 shows the complete HTML and script.
<BR>
<P>
<FONT COLOR="#000080"><B>Listing 10.1. The travel.htm code.</B></FONT>
<BR>
<PRE>
<FONT COLOR="#000080">&lt;HTML&gt;
&lt;HEAD&gt;
&lt;TITLE&gt;Travel Survey&lt;/TITLE&gt;
&lt;SCRIPT LANGUAGE=&quot;vbscript&quot;&gt;
Dim strCities()
Dim CRLF
ReDim strCities(0)
CRLF = Chr(10) &amp; Chr(13)
Sub cmdAddOne_OnClick
  If Len(Document.Form1.Input.Value) &gt; 0 Then
      ReDim Preserve strCities(UBound(strCities)+1)
      strCities(UBound(strCities)) = Document.Form1.Input.Value
      Document.Form1.Input.Value = &quot;&quot;
  End If
End Sub
Sub cmdFinish_OnClick
  Dim i
  Dim strMsg
  strMsg = &quot;You have visited &quot; &amp;  UBound(strCities) 
  strMsg = strMsg &amp; &quot; cities in the past year&quot; &amp; CRLF
  For i = 1 to UBound(strCities)
      strMsg = strMsg &amp; strCities(i) &amp; CRLF
  Next
 
  MsgBox strMsg,0,&quot;Cities&quot; 
End Sub
&lt;/SCRIPT&gt;
&lt;/HEAD&gt;
&lt;BODY BGCOLOR=&quot;white&quot;&gt;
&lt;FONT FACE=&quot;arial&quot; SIZE=3&gt;
&lt;CENTER&gt;
&lt;H2&gt;Travel Survey&lt;/H2&gt;
&lt;P&gt;
&lt;BLOCKQUOTE&gt;
Enter all the cities you have traveled to in the 
past year, enter as many or as few as you like.
&lt;/BLOCKQUOTE&gt;
&lt;P&gt;
 &lt;FORM NAME=&quot;Form1&quot;&gt;
    &lt;INPUT TYPE=&quot;Text&quot; NAME=&quot;Input&quot;&gt;
    &lt;INPUT TYPE=&quot;Button&quot; NAME=&quot;cmdAddOne&quot; VALUE=&quot;Add to List&quot;&gt;
    &lt;INPUT TYPE=&quot;Button&quot; NAME=&quot;cmdFinish&quot; VALUE=&quot;Finish&quot;&gt;
 &lt;/FORM&gt;
&lt;/CENTER&gt;
&lt;/BODY&gt;
&lt;/HTML&gt;</FONT></PRE>
<P>Figure 10.2 shows what happens when you run Listing 10.1 with the browser.
<BR>
<P><B><A HREF="10lax02.gif">Figure 10.2. The contents of the dynamic array.</A></B>
<BR>
<BR>
<A NAME="E69E81"></A>
<H4 ALIGN=CENTER>
<CENTER>
<FONT SIZE=4 COLOR="#FF0000"><B>Multidimension Arrays</B></FONT></CENTER></H4>
<BR>
<P>A multidimension array allows you to build a temporary mini-database in memory. Consider a single-dimension array as simply a row of elements (as shown in Figure 10.3), starting at 0 and containing a given number of elements, each holding a self-contained piece of information or data.
<BR>
<P><B><A HREF="10lax03.gif">Figure 10.3. A single-dimension array.</A></B>
<BR>
<P>If you add a second dimension, the array takes on the appearance of a spreadsheet with rows and columns. You declare a two-dimension array by specifying the number of rows and number of columns:
<BR>
<BR>
<PRE>
<FONT COLOR="#000080">Dim MyMultiArray(6,3)</FONT></PRE>
<P>This code creates a multidimension array in memory consisting of seven rows and four columns. You can access each element within this two-dimensional array by referencing its coordinates, arrayname(row,column), as shown in Figure 10.4. It is as though each element of the single-dimension array had its own unique array.
<BR>
<P><B><A HREF="10lax04.gif">Figure 10.4. A two-dimension array.</A></B>
<BR>
<P>Now, you add a third dimension to the array. Think of each element of the two-dimension array having its own unique array, as shown in Figure 10.5. A three-dimension array is declared like this:
<BR>
<BR>
<PRE>
<FONT COLOR="#000080">Dim MyMultiArray(6,3,2)</FONT></PRE>
<P><B><A HREF="10lax05.gif">Figure 10.5. A three-dimension array.</A></B>
<BR>
<BLOCKQUOTE>
<BLOCKQUOTE>
<HR ALIGN=CENTER>
<BR>
<NOTE>You can create a multidimension array with up to 64 dimensions, although more than three or four dimensions makes it difficult to visualize the array.</NOTE>
<BR>
<BR>
<NOTE>Multidimension arrays can eat memory very quickly. Consider the following:</NOTE>
<BR>
<PRE>
<FONT COLOR="#000080">Dim myArray(9,9,9)
myArray(0,0,0) = &quot;This is a string thankyou&quot;</FONT></PRE>
<BR>
<NOTE>These two lines of code actually zap 25KB of memory in the blink of an eye because memory is reserved for all elements of the array, whether they contain data or not. The string added to the array is 25 bytes long, so every element of the array is set to hold 25 bytes. Therefore, <I>10 elements x 10 elements x 10 elements x 25 bytes = 25,000 bytes</I>.
<BR>
<BR>Add another similar dimension and you eat up a quarter of a megabyte of memory!</NOTE>
<BR>
<HR ALIGN=CENTER>
</BLOCKQUOTE></BLOCKQUOTE>
<BR>
<A NAME="E68E60"></A>
<H3 ALIGN=CENTER>
<CENTER>
<FONT SIZE=5 COLOR="#FF0000"><B><IMG SRC="task.gif">Adding a Multidimension Array to a Web page</B></FONT></CENTER></H3>
<BR>
<P>A multidimension array can act very much like a database. To demonstrate this, continue with the travel theme from earlier in the chapter. This time, you add an ActiveX control to help display the data dynamically, too.
<BR>
<OL>
<LI>Open the ActiveX Control Pad.  Using the text editor and the default template provided, create the following HTML page:
<BR>
<BR>
<UL>
<UL>
<PRE>
<FONT COLOR="#000080">&lt;HTML&gt;
&lt;HEAD&gt;
    &lt;SCRIPT LANGUAGE=&quot;vbscript&quot;&gt;
&lt;!-- SCRIPT TO GO HERE  --&gt;
    &lt;/SCRIPT&gt;
&lt;/HEAD&gt;
&lt;BODY BGCOLOR=&quot;white&quot;&gt;
&lt;CENTER&gt;
&lt;H2&gt;Improved Travel Survey&lt;/H2&gt;
    &lt;FORM NAME=&quot;Form1&quot;&gt;
Enter City &amp;nbsp; &lt;INPUT TYPE=text NAME=&quot;City&quot;&gt;&lt;BR&gt;
Enter Airline Used &amp;nbsp; &lt;INPUT TYPE=text NAME=&quot;Airline&quot;&gt;&lt;BR&gt;
Enter Duration of Stay &amp;nbsp; &lt;INPUT TYPE=text NAME=&quot;Duration&quot;&gt;&lt;BR&gt;
Enter Purpose of Visit &amp;nbsp; &lt;INPUT TYPE=text NAME=&quot;Purpose&quot;&gt;&lt;BR&gt;
Enter Comments &amp;nbsp; &lt;INPUT TYPE=text NAME=&quot;Comments&quot;&gt; &lt;BR&gt;
        &lt;INPUT TYPE=button VALUE=&quot;Add To Survey&quot; NAME=&quot;cmdAddOne&quot;&gt;
&lt;HR&gt;
&lt;!-- ACTIVEX COMBO TO GO HERE --&gt;
&amp;nbsp;
&lt;SELECT NAME=&quot;DataField&quot;&gt;
&lt;OPTION&gt; Choose a Data Field
&lt;OPTION&gt;Airline
&lt;OPTION&gt;Duration
&lt;OPTION&gt;Purpose
&lt;OPTION&gt;Comment
&lt;/SELECT&gt;
&lt;BR&gt;
&lt;INPUT TYPE=button VALUE=&quot;Show Data&quot; NAME=&quot;cmdShowData&quot;&gt;
&lt;BR&gt;
&lt;/FORM&gt;
&lt;/CENTER&gt;
&lt;/BODY&gt;
&lt;/HTML&gt;</FONT></PRE></UL></UL>
<LI>After you create the page, save it as multi.htm and test it with the browser. The interface should look like the one in Figure 10.6.
<BR>
<BR><B><A HREF="10lax06.gif">Figure 10.6. The multi.htm file&#151;with only HTML code.</A></B>
<BR>
<BR>
<LI>Now you need to add an ActiveX Combo box. Place your cursor below the line marked &lt;!-- ACTIVEX COMBO TO GO HERE --&gt;.
<BR>
<BR>
<LI>Select Insert ActiveX Control from the Edit menu.
<BR>
<BR>
<LI>Select Microsoft Forms 2.0 Combo.
<BR>
<BR>
<BLOCKQUOTE>
<BLOCKQUOTE>
<HR ALIGN=CENTER>
<BR>
<NOTE>A combo control is a combination of a text box and a drop-down list.</NOTE>
<BR>
<HR ALIGN=CENTER>
</BLOCKQUOTE></BLOCKQUOTE>
<BR>
<LI>Change the ID property of the control to Cities.
<BR>
<BR>
<LI>Change the Text property of the control to Select A City. This appears in the text box section of the control but is not an item of the list.
<BR>
<BR>
<LI>Close the Object Editor and the code to create the control is added to your HTML at the cursor position.
<BR>
<BR>
<LI>Save the page and check it with the browser.
<BR>
<BR>
<LI>Now add the script code. First, code the following global variables, constants, and array definition:
<BR>
<BR>
<UL>
<UL>
<PRE>
<FONT COLOR="#000080">Dim myMultiArray(4,4)
Dim CITY
Dim AIRLINE
Dim DURATION
Dim PURPOSE
Dim COMMENTS
Dim CurrentElement
CurrentElement = 0
CITY = 0
AIRLINE = 1
DURATION = 2
PURPOSE = 3
COMMENTS = 4</FONT></PRE></UL></UL>
The first direction creates the two-dimensional array with five elements in each dimension, providing a total of 25 elements. All of the first dimension, elements (0,0) to (4,0) (which is also the first element of the second dimension), holds the city names. You can imagine these as column headers. The second element of the second dimension, (0,1) to (4,1), stores the airline name; this is analogous to a row in a spreadsheet or matrix. The third element of the second dimension, (0,2) to (4,2), stores the duration of the visit. The fourth element of the second dimension, (0,3) to (4,3), stores the purpose of the visit, and the fifth element of the second dimension, (0,4) to (4,4), stores the comments of the user.
<BR>
<BR>Because this is a fixed array, there is a maximum number of entries you can accept (five). You also need to know which element to add the data to by using the CurrentElement global variable, which is initialized at 0.
<BR>
<BR>
<LI>Now you can add the code for the cmdAddOne event handler, which adds data to the array: 
<BR>
<BR>
<UL>
<UL>
<PRE>
<FONT COLOR="#000080">Sub cmdAddOne_OnClick
  If CurrentElement = 4 Then
   Alert &quot;Sorry, no more&quot;
   Exit Sub
  End If</FONT></PRE></UL></UL>
This first section checks to make sure you haven't reached the limit of the array. If you have, it displays a warning and terminates the event. Add the next section:
<BR>
<BR>
<UL>
<UL>
<PRE>
<FONT COLOR="#000080">myMultiArray(CurrentElement,CITY) = Document.Form1.City.Value
myMultiArray(CurrentElement,AIRLINE) = Document.Form1.Airline.Value
myMultiArray(CurrentElement,DURATION) = Document.Form1.Duration.Value
myMultiArray(CurrentElement,PURPOSE) = Document.Form1.Purpose.Value
myMultiArray(CurrentElement,COMMENTS) = Document.Form1.Comments.Value</FONT></PRE></UL></UL>
This section copies the values entered by the user into the relevant array elements. Notice how the use of constants makes the code much easier to read and understand.
<BR>
<BR>
<UL>
<UL>
<BR>
<PRE>
<FONT COLOR="#000080">CurrentElement = CurrentElement + 1</FONT></PRE></UL></UL>
Increment the CurrentElement counter by one.
<BR>
<BR>
<UL>
<UL>
<BR>
<PRE>
<FONT COLOR="#000080">call Document.Form1.Cities.AddItem(Document.Form1.City.Value)</FONT></PRE></UL></UL>
This line adds the city name entered by the user to the list of cities in the Cities ActiveX combo box using the control's AddItem method.
<BR>
<BR>
<UL>
<UL>
<PRE>
<FONT COLOR="#000080">Document.Form1.City.Value = &quot;&quot;
Document.Form1.Airline.Value = &quot;&quot;
Document.Form1.Duration.Value = &quot;&quot;
Document.Form1.Purpose.Value = &quot;&quot;
Document.Form1.Comments.Value = &quot;&quot;
End Sub</FONT></PRE></UL></UL>
Finally, clear the text boxes to be ready for the next entry and end the event handler.
<BR>
<BR>
<LI>All that remains now is handling the click event for the show data button. Clicking the button displays a selected field for a selected city. Here's the code:
<BR>
<BR>
<UL>
<UL>
<PRE>
<FONT COLOR="#000080">Sub cmdShowData_OnClick
 If CurrentElement = 0 Then
  Exit Sub
 End If</FONT></PRE></UL></UL>
This first section ensures that the button wasn't clicked before any data was present in the array.
<BR>
<BR>
<UL>
<UL>
<PRE>
<FONT COLOR="#000080">intDataField = Document.Form1.DataField.SelectedIndex
intCity = Document.Form1.Cities.ListIndex</FONT></PRE></UL></UL>
Using the DataField's SelectedIndex property, determine which field the user selected. The ListIndex property is the equivalent property for an ActiveX control.
<BR>
<BR>
<UL>
<UL>
<PRE>
<FONT COLOR="#000080">If intCity &lt; 0 Or intDataField = 0 Then
 Exit Sub
End If</FONT></PRE></UL></UL>
If no selection was made from the Cities combo, the ListIndex property returns -1. The HTML Select has no such functionality, but you might have noticed when you created this HTML Select that the first &lt;OPTION&gt; was &quot;Select a Field&quot;. This is in effect the header and occupies position 0 in the select box. If SelectedIndex returns 0, you know again that no selection was made.
<BR>
<BR>
<UL>
<UL>
<PRE>
<FONT COLOR="#000080">strMsg = &quot;City:  &quot; &amp; myMultiArray(intCity,CITY) &amp; &quot;  &quot;
strMsg = strMsg &amp;  Document.Form1.DataField.Options(intDataField).Text&amp;  &quot;: &quot;
strMsg = strMsg &amp;  myMultiArray(intCity,intDataField) 
Alert strMsg
End Sub</FONT></PRE></UL></UL>
Finally, construct the message that consists of the city name, the field name, and the field value.
<BR>
<BR>
</OL>
<P>Listing 10.2 shows the complete source code.
<BR>
<P>
<FONT COLOR="#000080"><B>Listing 10.2. The completed multi.htm.</B></FONT>
<BR>
<PRE>
<FONT COLOR="#000080">&lt;HTML&gt;
&lt;HEAD&gt;
    &lt;SCRIPT LANGUAGE=&quot;vbscript&quot;&gt;
Dim myMultiArray(4,4)
Dim CITY
Dim AIRLINE
Dim DURATION
Dim PURPOSE
Dim COMMENTS
Dim CurrentElement
CurrentElement = 0
CITY = 0
AIRLINE = 1
DURATION = 2
PURPOSE = 3
COMMENTS = 4
Sub cmdAddOne_OnClick
  If CurrentElement = 4 Then
   Alert &quot;Sorry, no more&quot;
   Exit Sub
  End If
  myMultiArray(CurrentElement,CITY) = Document.Form1.City.Value
  myMultiArray(CurrentElement,AIRLINE) = Document.Form1.Airline.Value
  myMultiArray(CurrentElement,DURATION) = Document.Form1.Duration.Value
  myMultiArray(CurrentElement,PURPOSE) = Document.Form1.Purpose.Value
  myMultiArray(CurrentElement,COMMENTS) = Document.Form1.Comments.Value
  
  CurrentElement = CurrentElement + 1
  
  call Document.Form1.Cities.AddItem(Document.Form1.City.Value)
Document.Form1.City.Value = &quot;&quot;
Document.Form1.Airline.Value = &quot;&quot;
Document.Form1.Duration.Value = &quot;&quot;
Document.Form1.Purpose.Value = &quot;&quot;
Document.Form1.Comments.Value = &quot;&quot;
End Sub
Sub cmdShowData_OnClick
 If CurrentElement = 0 Then
  Exit Sub
 End If
 intDataField = Document.Form1.DataField.SelectedIndex
 intCity = Document.Form1.Cities.ListIndex
 If intCity &lt; 0 Or intDataField = 0 Then
  Exit Sub
 End If
strMsg = &quot;City:  &quot; &amp; myMultiArray(intCity,CITY) &amp; &quot;  &quot;
strMsg = strMsg &amp;  Document.Form1.DataField.Options(intDataField).Text  &amp;  &quot;: &quot;
strMsg = strMsg &amp;  myMultiArray(intCity,intDataField) 
Alert strMsg
End Sub
    &lt;/SCRIPT&gt;
&lt;/HEAD&gt;
&lt;BODY BGCOLOR=&quot;white&quot;&gt;
&lt;CENTER&gt;
&lt;H2&gt;Improved Travel Survey&lt;/H2&gt;
    &lt;FORM NAME=&quot;Form1&quot;&gt;
Enter City &amp;nbsp; &lt;INPUT TYPE=text NAME=&quot;City&quot;&gt;&lt;BR&gt;
Enter Airline Used &amp;nbsp; &lt;INPUT TYPE=text NAME=&quot;Airline&quot;&gt;&lt;BR&gt;
Enter Duration of Stay &amp;nbsp; &lt;INPUT TYPE=text NAME=&quot;Duration&quot;&gt;&lt;BR&gt;
Enter Purpose of Visit &amp;nbsp; &lt;INPUT TYPE=text NAME=&quot;Purpose&quot;&gt;&lt;BR&gt;
Enter Comments &amp;nbsp; &lt;INPUT TYPE=text NAME=&quot;Comments&quot;&gt; &lt;BR&gt;
        &lt;INPUT TYPE=button VALUE=&quot;Add To Survey&quot; NAME=&quot;cmdAddOne&quot;&gt;
&lt;HR&gt;
        &lt;OBJECT ID=&quot;Cities&quot; WIDTH=139 HEIGHT=24
 CLASSID=&quot;CLSID:8BD21D30-EC42-11CE-9E0D-00AA006002F3&quot;&gt;
    &lt;PARAM NAME=&quot;VariousPropertyBits&quot; VALUE=&quot;746604571&quot;&gt;
    &lt;PARAM NAME=&quot;DisplayStyle&quot; VALUE=&quot;3&quot;&gt;
    &lt;PARAM NAME=&quot;Size&quot; VALUE=&quot;3669;635&quot;&gt;
    &lt;PARAM NAME=&quot;MatchEntry&quot; VALUE=&quot;1&quot;&gt;
    &lt;PARAM NAME=&quot;ShowDropButtonWhen&quot; VALUE=&quot;2&quot;&gt;
    &lt;PARAM NAME=&quot;Value&quot; VALUE=&quot;Select A City&quot;&gt;
    &lt;PARAM NAME=&quot;FontCharSet&quot; VALUE=&quot;0&quot;&gt;
    &lt;PARAM NAME=&quot;FontPitchAndFamily&quot; VALUE=&quot;2&quot;&gt;
    &lt;PARAM NAME=&quot;FontWeight&quot; VALUE=&quot;0&quot;&gt;
&lt;/OBJECT&gt;
&amp;nbsp;
&lt;SELECT NAME=&quot;DataField&quot;&gt;
&lt;OPTION&gt; Choose a Data Field
&lt;OPTION&gt;Airline
&lt;OPTION&gt;Duration
&lt;OPTION&gt;Purpose
&lt;OPTION&gt;Comment
&lt;/SELECT&gt;
&lt;BR&gt;
        &lt;INPUT TYPE=button VALUE=&quot;Show Data&quot; NAME=&quot;cmdShowData&quot;&gt;
&lt;BR&gt;
    &lt;/FORM&gt;
&lt;/CENTER&gt;
&lt;/BODY&gt;
&lt;/HTML&gt;</FONT></PRE>
<P>Save the page and try it out in the browser, as shown in Figures 10.7 and 10.8.
<BR>
<P><B><A HREF="10lax07.gif">Figure 10.7. The completed travel survey version 2.</A></B>
<BR>
<P><B><A HREF="10lax08.gif">Figure 10.8. Travel survey version 2, completed with result.</A></B>
<BR>
<BLOCKQUOTE>
<BLOCKQUOTE>
<HR ALIGN=CENTER>
<BR>
<NOTE>You can add further functionality to this page. Because you created constants to represent the field names, you can use them to access all the data of the same field, such as airlines, like this:</NOTE>
<BR>
<HR ALIGN=CENTER>
</BLOCKQUOTE></BLOCKQUOTE>
<UL>
<UL>
<PRE>
<FONT COLOR="#000080">for i = 0 to 4
 strMsg = strMsg &amp;  myMultiArray(i,AIRLINE)
next i</FONT></PRE></UL></UL>
<BLOCKQUOTE>
<BLOCKQUOTE>
<HR ALIGN=CENTER>
<BR>
<NOTE>To access all the fields for a particular city, you use something like this:</NOTE>
<BR>
<PRE>
<FONT COLOR="#000080">cityNumber = 3
For i = CITY to COMMENTS
   strMsg = strMsg &amp;  myMultiArray(cityNumber,i)
Next i</FONT></PRE>
<HR ALIGN=CENTER>
</BLOCKQUOTE></BLOCKQUOTE>
<BR>
<A NAME="E69E82"></A>
<H4 ALIGN=CENTER>
<CENTER>
<FONT SIZE=4 COLOR="#FF0000"><B>Data Types with Arrays in VBScript</B></FONT></CENTER></H4>
<BR>
<P>As you know, VBScript uses only one data type, the variant. Variant holds whatever data subtype is necessary for the data it is currently storing. In Chapter 4, &quot;Using the VBScript Language,&quot; you learned how to use VarType() to determine what data subtype is held within a variant.
<BR>
<P>If a variant is holding an array, VarType() returns 8192 plus the normal VarType return value for the data within the array.
<BR>
<P>For example, if you have an array that consists of integer data, which has a normal VarType return value of 2, VarType returns 8194, as this short example shows:
<BR>
<PRE>
<FONT COLOR="#000080">intMyArray(10)
intMyArray(0) = CInt(Document.Form1.Input.Value)
x = VarType(intMyArray)</FONT></PRE>
<P>Remember that in normal circumstances, if you transfer any data from the HTML form directly into an array or any other variable, the variable is cast automatically as a data subtype of string. Other data subtypes must be invoked explicitly as shown in the previous example.
<BR>
<BLOCKQUOTE>
<BLOCKQUOTE>
<HR ALIGN=CENTER>
<BR>
<NOTE>For more details on data subtypes, see Chapter 4, &quot;Using the VBScript Language.&quot;</NOTE>
<BR>
<HR ALIGN=CENTER>
</BLOCKQUOTE></BLOCKQUOTE>
<BR>
<A NAME="E69E83"></A>
<H4 ALIGN=CENTER>
<CENTER>
<FONT SIZE=4 COLOR="#FF0000"><B>Workshop Wrap-Up</B></FONT></CENTER></H4>
<BR>
<P>In this chapter, you saw how to use arrays to add much more programmatic functionality to your Web pages. Here are some main points to remember about arrays:
<BR>
<UL>
<LI>Declare a static array using Dim myArray(8).
<BR>
<BR>
<LI>The number of elements you define in an array is always one more than the highest element number because the first element is always 0.
<BR>
<BR>
<LI>To declare a dynamic array, use Dim myDynamicArray().
<BR>
<BR>
<LI>Dimension and redimension a dynamic array using ReDim.
<BR>
<BR>
<LI>To prevent losing data when you redimension a dynamic array, use the Preserve keyword.
<BR>
<BR>
</UL>
<BR>
<A NAME="E69E84"></A>
<H4 ALIGN=CENTER>
<CENTER>
<FONT SIZE=4 COLOR="#FF0000"><B>Next Steps</B></FONT></CENTER></H4>
<BR>
<P>Now you've seen how to use arrays in your scripts to create database-like functionality in your Web pages, giving your applications power and purpose. But you can't neglect the user interface. To improve the look and feel of your applications, look at these chapters:
<BR>
<UL>
<LI>To learn more about using the ActiveX Control Pad with forms, see Chapter 13, &quot;Getting to Know the ActiveX Control Pad.&quot;
<BR>
<BR>
<LI>Chapter 14, &quot;Using the HTML Layout Control,&quot; shows you how to build Windows-like forms.
<BR>
<BR>
</UL>
<BR>
<A NAME="E69E85"></A>
<H4 ALIGN=CENTER>
<CENTER>
<FONT SIZE=4 COLOR="#FF0000"><B>Q&amp;A</B></FONT></CENTER></H4>
<BR>
<P><B>Q: How do I vary the contents of an array? All you've shown here is a hard coded list of values.</B>
<BR>
<P><B>A:</B> At the moment, the only way you can change the values list for a client-side array is to use a CGI server-side script to build the Web page as the client requests the page. You basically replace the value lists with a server-side script, but a lot depends upon the database system and Web server platform you are using, and that really goes well beyond the scope of this book. Whichever system you use, the page downloaded to the client will look identical to the ones used in this chapter, and the way you handle arrays at the client is the same.
<P ALIGN=CENTER>
<A HREF="lax09.htm" TARGET="_self"><IMG SRC="blanprev.gif" WIDTH = 37 HEIGHT = 37 BORDER = 0 ALT="Previous Page"></A>
<A HREF="#I0" TARGET="_self"><IMG SRC="blantop.gif" WIDTH = 37 HEIGHT = 37 BORDER = 0 ALT="Page Top"></A>
<A HREF="httoc.htm" TARGET="_self"><IMG SRC="blantoc.gif" WIDTH = 37 HEIGHT = 37 BORDER = 0 ALT="TOC"></A>
<A HREF="lax11.htm" TARGET="_self"><IMG SRC="blannext.gif" WIDTH = 37 HEIGHT = 37 BORDER = 0 ALT="Next Page"></A>
<A HREF="http://www.mcp.com/sams/" TARGET="_self"><IMG SRC="blanhome.gif" WIDTH = 37 HEIGHT = 37 BORDER = 0 ALT="See Page"></A>
</BODY></HTML>
