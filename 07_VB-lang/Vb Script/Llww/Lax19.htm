<HTML>
<HEAD>
<TITLE>lax19.htm </TITLE>
<LINK REL="ToC" HREF="httoc.htm">
<LINK REL="Index" HREF="htindex.htm">
<LINK REL="Next" HREF="lax20.htm">
<LINK REL="Previous" HREF="lax18.htm"></HEAD>
<BODY BGCOLOR="#FFFFFF" TEXT="#000000" LINK="#0000FF" VLINK="#800080">
<A NAME="I0"></A><P ALIGN=CENTER>
<A HREF="lax18.htm" TARGET="_self"><IMG SRC="blanprev.gif" WIDTH = 37 HEIGHT = 37 BORDER = 0 ALT="Previous Page"></A>
<A HREF="httoc.htm" TARGET="_self"><IMG SRC="blantoc.gif" WIDTH = 37 HEIGHT = 37 BORDER = 0 ALT="TOC"></A>
<A HREF="lax20.htm" TARGET="_self"><IMG SRC="blannext.gif" WIDTH = 37 HEIGHT = 37 BORDER = 0 ALT="Next Page"></A>
<A HREF="http://www.mcp.com/sams/" TARGET="_self"><IMG SRC="blanhome.gif" WIDTH = 37 HEIGHT = 37 BORDER = 0 ALT="See Page"></A>
<HR ALIGN=CENTER>
<P>
<UL>
<UL>
<UL>
<UL>
<LI>
<A HREF="#E69E125" >Security Issues</A>
<LI>
<A HREF="#E69E126" >What Can You Use Cookies For?</A></UL>
<LI>
<A HREF="#E68E96" >Cookie Variables</A>
<UL>
<LI>
<A HREF="#E69E127" >domain</A>
<LI>
<A HREF="#E69E128" >path</A>
<LI>
<A HREF="#E69E129" >secure</A></UL>
<LI>
<A HREF="#E68E97" >Expiration Date</A>
<LI>
<A HREF="#E68E98" ><IMG SRC="task.gif">Baking a Temporary Cookie</A>
<LI>
<A HREF="#E68E99" ><IMG SRC="task.gif">Baking a Semi-Permanent Cookie</A>
<LI>
<A HREF="#E68E100" ><IMG SRC="task.gif">Baking a Cookie with Multiple Values</A>
<LI>
<A HREF="#E68E101" ><IMG SRC="task.gif">Reading Individual Cookie Values</A>
<UL>
<LI>
<A HREF="#E69E130" >Workshop Wrap-Up</A>
<LI>
<A HREF="#E69E131" >Next Steps</A>
<LI>
<A HREF="#E69E132" >Q&amp;A</A></UL></UL></UL></UL>
<HR ALIGN=CENTER>
<A NAME="E66E38"></A>
<H1 ALIGN=CENTER>
<CENTER>
<FONT SIZE=6 COLOR="#FF0000"><B>- 19 -</B>
<BR><B>Baking Cookies with VBScript</B></FONT></CENTER></H1>
<BR>
<P>In this chapter, you
<BR>
<UL>
<LI>Learn what a cookie is
<BR>
<BR>
<LI>Learn about the limitations placed on cookies
<BR>
<BR>
<LI>Learn how to bake VBScript cookies
<BR>
<BR>
<LI>Learn how to retrieve and use VBScript cookies 
<BR>
<BR>
</UL>
<P>Tasks in this chapter:
<BR>
<UL>
<LI>Baking a temporary cookie
<BR>
<BR>
<LI>Baking a semi-permanent cookie
<BR>
<BR>
<LI>Baking a cookie with multiple values
<BR>
<BR>
<LI>Reading individual cookie values
<BR>
<BR>
</UL>
<P>Put away your mixing bowl and flour. The cookies you'll learn about here have nothing to do with the edible variety. So what is a cookie? A cookie is a simple text file that is linked to a particular Web document and is stored on the client machine. &quot;Ah,&quot; I can hear you say, &quot;but VBScript doesn't allow you to read and write files on the client machine.&quot; In the general sense this is true, but cookies are not ordinary files.
<BR>
<P>A cookie file is a very limited ASCII text; therefore, it cannot contain any potentially harmful binary code. Furthermore, the only way that it can be written to or read from the Web is by the page that originally created it. To see the cookie files you've already collected on your travels around the Web, open your Windows Explorer and open the Cookies subdirectory within the Windows directory.
<BR>
<BR>
<A NAME="E69E125"></A>
<H4 ALIGN=CENTER>
<CENTER>
<FONT SIZE=4 COLOR="#FF0000"><B>Security Issues</B></FONT></CENTER></H4>
<BR>
<P>When cookies were first introduced, some people thought&#151;and some still do&#151;that the humble cookie would be a security risk. So first of all, let me put your mind at ease. Cookies cannot read information from your hard drive, nor can they publicize your personal information to the world. Here's a list of the limitations placed on cookies:
<BR>
<UL>
<LI>A client machine cannot store more than 300 cookies.
<BR>
<BR>
<LI>A client machine cannot store more than 20 cookies from a single domain.
<BR>
<BR>
<LI>Only cookies that have an expiration date associated with them are stored on the client machine. Most cookies are simply lost when the browser is exited.
<BR>
<BR>
<LI>A cookie is not a program. It is simply an ASCII text file.
<BR>
<BR>
<LI>Cookies cannot obtain personal information, unless you have given that information to the domain associated with the cookie (for example, in a questionnaire).
<BR>
<BR>
<LI>A cookie can be read only by the domain that created it. 
<BR>
<BR>
</UL>
<BR>
<A NAME="E69E126"></A>
<H4 ALIGN=CENTER>
<CENTER>
<FONT SIZE=4 COLOR="#FF0000"><B>What Can You Use Cookies For?</B></FONT></CENTER></H4>
<BR>
<P>Cookies have allowed the creation of a range of new applications, including shopping carts. This is because cookies store variables that can be used from page to page, or written and read every time a user enters a Web site. Here are just a few examples of how you could use cookies:
<BR>
<UL>
<LI>Maintain a list of selected items, quantities, and colors in a shopping application.
<BR>
<BR>
<LI>Maintain a record of the number of times a user has visited your site.
<BR>
<BR>
<LI>Store the date that a user last visited your Web site, and highlight items that have changed since his last visit.
<BR>
<BR>
<LI>Maintain a user-customized color scheme for your Web site.
<BR>
<BR>
<LI>Maintain a basic information file for a user&#151;that is, first name, preferences, and so on&#151;to enable you to personalize the site for the user. 
<BR>
<BR>
</UL>
<BR>
<A NAME="E68E96"></A>
<H3 ALIGN=CENTER>
<CENTER>
<FONT SIZE=5 COLOR="#FF0000"><B>Cookie Variables</B></FONT></CENTER></H3>
<BR>
<P>Cookie values are stored as name=value pairs, delimited with a semicolon (;). You can create your own variable names and assign values to them, and you can set several standard cookie variables. 
<BR>
<BR>
<A NAME="E69E127"></A>
<H4 ALIGN=CENTER>
<CENTER>
<FONT SIZE=4 COLOR="#FF0000"><B>domain</B></FONT></CENTER></H4>
<BR>
<P>syntax: domain=<I>domain_name</I>;
<BR>
<P>When the client searches the list of cookie files, a comparison of the domain name attributes of the cookie file is made with the domain name of the host from which the Web page has been fetched. If the domain name minus the machine name (such as mcp.com) matches the stored domain name&#151;which is known as tail matching&#151;the cookie then performs path matching. 
<BR>
<BLOCKQUOTE>
<BLOCKQUOTE>
<HR ALIGN=CENTER>
<BR>
<NOTE>A machine name is the first part of the URL: for example, www. or search. as in search.yahoo.com, or home. as in home.netscape.com.</NOTE>
<BR>
<HR ALIGN=CENTER>
</BLOCKQUOTE></BLOCKQUOTE>
<P>Only hosts within the specified domain can set a cookie for that domain, and domains must have at least two or three periods in them to prevent generic domains such as .com or .net. The default value of domain is the host name of the server that initially generated the cookie file. 
<BR>
<BR>
<A NAME="E69E128"></A>
<H4 ALIGN=CENTER>
<CENTER>
<FONT SIZE=4 COLOR="#FF0000"><B>path</B></FONT></CENTER></H4>
<BR>
<P>syntax: path=<I>path</I>;
<BR>
<P>The path attribute is used to specify the URLs within a domain for which the particular cookie is valid. When the domain matching has been successfully completed, the pathname component of the URL is compared with the path attribute. The path /laura would match /lauralemay and /laura/lemay.html. If a path attribute is not specified, the path is assumed to be that of the document calling the cookie.
<BR>
<BR>
<A NAME="E69E129"></A>
<H4 ALIGN=CENTER>
<CENTER>
<FONT SIZE=4 COLOR="#FF0000"><B>secure</B></FONT></CENTER></H4>
<BR>
<P>syntax: secure;
<BR>
<P>The secure attribute specifies that the cookie can only be transmitted if the communications channel with the host is a secure one. If secure is not specified, a cookie is considered safe to be sent openly, or &quot;in the clear,&quot; over unsecured channels. However, you are dealing with client-side scripting, so the secure attribute is somewhat redundant because your VBScript cookies are never &quot;transmitted&quot; and remain within the client environment.
<BR>
<BR>
<A NAME="E68E97"></A>
<H3 ALIGN=CENTER>
<CENTER>
<FONT SIZE=5 COLOR="#FF0000"><B>Expiration Date</B></FONT></CENTER></H3>
<BR>
<P>syntax: expires=<I>date</I>;
<BR>
<P>The expiration date attribute must be written in a particular format to be recognized.
<BR>
<BR>
<PRE>
<FONT COLOR="#000080"><I>day, dd-mmm-yy hh:mm:ss</I> GMT</FONT></PRE>
<P>Here is an example:
<BR>
<BR>
<PRE>
<FONT COLOR="#000080">Thursday, 09-Oct-97 15:01:00 GMT</FONT></PRE>
<P>This poses something of a problem in VBScript, because you don't have access to a GMT date format, like you would in JavaScript. A work-around to this is to hard code an expiration date that is far into the future, say 1999. Otherwise, you will have to resort to mixing JavaScript in your document to calculate the current time offset to GMT at the client. 
<BR>
<BR>
<A NAME="E68E98"></A>
<H3 ALIGN=CENTER>
<CENTER>
<FONT SIZE=5 COLOR="#FF0000"><B><IMG SRC="task.gif">Baking a Temporary Cookie</B></FONT></CENTER></H3>
<BR>
<P>A temporary cookie is one that exists only while the browser is open; when the browser is closed, the cookie is gone. This first example demonstrates how to set the value within a temporary cookie and then read back the name/value pair.
<BR>
<OL>
<LI>Start by entering the following HTML into Notepad or your usual HTML editor.
<BR>
<BR>
<UL>
<UL>
<PRE>
<FONT COLOR="#000080">&lt;HTML&gt;
&lt;HEAD&gt;
&lt;TITLE&gt;Setting a cookie [1]&lt;/TITLE&gt;
&lt;SCRIPT LANGUAGE=&quot;vbscript&quot;&gt;
&lt;/SCRIPT&gt;
&lt;BODY BGCOLOR=&quot;white&quot;&gt;
&lt;CENTER&gt;
&lt;INPUT TYPE=&quot;button&quot; NAME=&quot;cmdButton1&quot; VALUE=&quot;Show Cookie Value&quot;&gt;
&lt;/CENTER&gt;
&lt;/BODY&gt;
&lt;/HTML&gt;</FONT></PRE></UL></UL>
<BR>
<LI>Now you need to add the VBScript code that writes the cookie value when the page is loaded.  The following code goes between the &lt;SCRIPT&gt; tags. Note that it is not within a custom procedure, function, or event handler; therefore, it will execute as the page downloads to the browser.
<BR>
<BR>
<UL>
<UL>
<PRE>
<FONT COLOR="#000080">1: Dim VarName
2: Dim VarVal
3:
4: VarName = &quot;mycookie&quot;
5: VarVal = Date()
6:
7: Document.Cookie = VarName &amp; &quot;=&quot; &amp; VarVal &amp; &quot;;&quot;</FONT></PRE></UL></UL>
<BR>
First, in lines 1 and 2, you have declared two variables&#151;one for the name of the cookie variable and the second for the cookie value. Lines 4 and 5 assign values to these variables. The cookie variable has been given the name mycookie. The value is taken from the client machine's date. Finally, in line 7, the Document's Cookie property is set by building a string made up of the Cookie variable's name, an equal sign, the cookie value, and a semicolon.
<BR>
<BR>
<LI>To finish, you need to add an event handler for cmdButton1, which will be used to display the name/value pair from the cookie.
<BR>
<BR>
</OL>
<UL>
<UL>
<PRE>
<FONT COLOR="#000080">Sub cmdButton1_OnClick
  Alert Document.Cookie
End Sub</FONT></PRE></UL></UL>
<P>As you can see, it's frighteningly easy. All you have to do in this case is pass the Document.Cookie property to an Alert box. 
<BR>
<P>Here's the complete code for this example. To use this demonstration, you need to load the HTML file onto a Web server and run it from there. Cookies don't appear to like being run from a local drive. Figure 19.1 shows this example running from the test subdirectory of my vbscripts.com domain. 
<BR>
<PRE>
<FONT COLOR="#000080">&lt;HTML&gt;
&lt;HEAD&gt;
&lt;TITLE&gt;Setting a cookie [1]&lt;/TITLE&gt;
&lt;SCRIPT LANGUAGE=&quot;vbscript&quot;&gt;
Dim VarName
Dim VarVal
VarName = &quot;mycookie&quot;
VarVal = Date()
Document.Cookie = VarName &amp; &quot;=&quot; &amp; VarVal &amp; &quot;;&quot;
Sub cmdButton1_OnClick
  Alert Document.Cookie
End Sub
&lt;/SCRIPT&gt;
&lt;BODY BGCOLOR=&quot;white&quot;&gt;
&lt;CENTER&gt;
&lt;INPUT TYPE=&quot;button&quot; NAME=&quot;cmdButton1&quot; VALUE=&quot;Show Cookie Value&quot;&gt;
&lt;/CENTER&gt;
&lt;/BODY&gt;
&lt;/HTML&gt;</FONT></PRE>
<P><B><A HREF="19lax01.gif">Figure 19.1. The cookie name/value pair.</A></B>
<BR>
<P>When you have run this example, take a look in the Cookies subdirectory, just to prove to yourself that the cookie hasn't been written to disk. To write a cookie to disk, all you need to do is add an expiration date. 
<BR>
<BR>
<A NAME="E68E99"></A>
<H3 ALIGN=CENTER>
<CENTER>
<FONT SIZE=5 COLOR="#FF0000"><B><IMG SRC="task.gif">Baking a Semi-Permanent Cookie</B></FONT></CENTER></H3>
<BR>
<P>This example demonstrates how to create a semi-permanent cookie file. I use the term semi-permanent because there is no such thing as a permanent cookie file. By its very nature, a cookie can only be written to disk if it has been given an expiration date. However, by setting the date to a time in the distant future, you can give the cookie some semi-permanence.
<BR>
<OL>
<LI>Start again with your HTML template.
<BR>
<BR>
<UL>
<UL>
<PRE>
<FONT COLOR="#000080">&lt;HTML&gt;
&lt;HEAD&gt;
&lt;TITLE&gt;Setting a cookie [2]&lt;/TITLE&gt;
&lt;SCRIPT LANGUAGE=&quot;vbscript&quot;&gt;
&lt;/SCRIPT&gt;
&lt;BODY BGCOLOR=&quot;white&quot;&gt;
&lt;CENTER&gt;
&lt;INPUT TYPE=&quot;button&quot; NAME=&quot;cmdButton1&quot; VALUE=&quot;Get Cookie Value&quot;&gt;
&lt;/CENTER&gt;
&lt;/BODY&gt;
&lt;/HTML&gt;</FONT></PRE></UL></UL>
<BR><LI>Now add the following code between the &lt;SCRIPT&gt; tags to create the cookie. Notice that it is very similar to the previous example, with the addition of an expiration variable. 
<BR>
<BR>
<UL>
<UL>
<PRE>
<FONT COLOR="#000080">Dim VarName
Dim VarVal
Dim Exp
Exp = &quot;expires=Wednesday, 09-Nov-1999 23:12:40 GMT&quot;
VarName = &quot;mycookie&quot;
VarVal = Date()
Document.Cookie = VarName &amp; &quot;=&quot; &amp; VarVal &amp; &quot;;&quot; &amp; Exp</FONT></PRE></UL></UL>
<BR>The easiest way to specify an expiration date is to specify it explicitly as shown in the preceding code. It must be specified in this format, which involves an awful lot of extra coding if, for instance, you want to specify an expiration date based on the current date.
<BR>
<BR>
<LI>Finally, add the same event handler as before to show the cookie's name/value pair. 
<BR>
<BR>
</OL>
<UL>
<UL>
<PRE>
<FONT COLOR="#000080">Sub cmdButton1_OnClick
 Alert Document.Cookie
End Sub</FONT></PRE></UL></UL>
<P>Here's the completed code: 
<BR>
<PRE>
<FONT COLOR="#000080">&lt;HTML&gt;
&lt;HEAD&gt;
&lt;TITLE&gt;Setting a cookie [2]&lt;/TITLE&gt;
&lt;SCRIPT LANGUAGE=&quot;vbscript&quot;&gt;
Dim VarName
Dim VarVal
Dim Exp
Exp = &quot;expires=Wednesday, 09-Nov-1999 23:12:40 GMT&quot;
VarName = &quot;mycookie&quot;
VarVal = Date()
Document.Cookie = VarName &amp; &quot;=&quot; &amp; VarVal &amp; &quot;;&quot; &amp; Exp
Sub cmdButton1_OnClick
 Alert Document.Cookie
End Sub
&lt;/SCRIPT&gt;
&lt;BODY BGCOLOR=&quot;white&quot;&gt;
&lt;CENTER&gt;
&lt;INPUT TYPE=&quot;button&quot; NAME=&quot;cmdButton1&quot; VALUE=&quot;Get Cookie Value&quot;&gt;
&lt;/CENTER&gt;
&lt;/BODY&gt;
&lt;/HTML&gt;</FONT></PRE>
<P>Again,  this example only executes properly from a Web server, as shown in Figure 19.2. This time when you have run the page, you should find a new cookie file in your Cookies subdirectory. You can open the file (for what it's worth) in Notepad, as shown in Figure 19.3. 
<BR>
<P><B><A HREF="19lax02.gif">Figure 19.2. The bake2.htm file in the browser.</A></B>
<BR>
<P><B><A HREF="19lax03.gif">Figure 19.3. The resultant cookie file.</A></B>
<BR>
<BR>
<A NAME="E68E100"></A>
<H3 ALIGN=CENTER>
<CENTER>
<FONT SIZE=5 COLOR="#FF0000"><B><IMG SRC="task.gif">Baking a Cookie with Multiple Values</B></FONT></CENTER></H3>
<BR>
<P>The previous two examples have used a single variable. Now you can try creating a cookie file that stores multiple values:
<BR>
<OL>
<LI>Start with the HTML template.
<BR>
<BR>
<UL>
<UL>
<PRE>
<FONT COLOR="#000080">&lt;HTML&gt;
&lt;HEAD&gt;
&lt;TITLE&gt;Setting a cookie [3]&lt;/TITLE&gt;
&lt;SCRIPT LANGUAGE=&quot;vbscript&quot;&gt;
&lt;/SCRIPT&gt;
&lt;BODY BGCOLOR=&quot;white&quot;&gt;
&lt;CENTER&gt;
&lt;INPUT TYPE=&quot;button&quot; NAME=&quot;cmdButton1&quot; VALUE=&quot;Get Cookie Value&quot;&gt;
&lt;/CENTER&gt;
&lt;/BODY&gt;
&lt;/HTML&gt;</FONT></PRE></UL></UL>
<BR>
<LI>Add the following code between the &lt;SCRIPT&gt; tags.
<BR>
<BR>
<UL>
<UL>
<PRE>
<FONT COLOR="#000080"> 1: Dim VarName
 2: Dim VarVal
 3: Dim VarName1
 4: Dim VarVal1
 5: Dim Exp
 6:
 7: Exp = &quot;expires=Wednesday, 09-Nov-1999 23:12:40 GMT&quot;
 8: VarName = &quot;mycookie&quot;
 9: VarVal = Date()
10: VarName1 = &quot;nextname&quot;
11: VarVal1 = &quot;anything;&quot;
12:
13: Document.Cookie = VarName &amp; &quot;=&quot; &amp; VarVal &amp; &quot;;&quot;&amp; VarName1 &amp; &quot;=&quot; &amp; VarVal1 &amp; Exp</FONT></PRE></UL></UL>
<BR>
Notice that in this example the semicolon that delimits the second value is attached to the string as part of the second value.
<BR>
<BR>
<LI>Again, add the event handler for the button, which displays the two name/value pairs as shown in Figure 19.4.
<BR>
<BR>
</OL>
<UL>
<UL>
<PRE>
<FONT COLOR="#000080">Sub cmdButton1_OnClick
 Alert Document.Cookie
End Sub</FONT></PRE></UL></UL>
<P><B><A HREF="19lax04.gif">Figure 19.4. The two name/value pairs are now displayed.</A></B>
<BR>
<P>Here's the complete code for the multiple value example. You can add as many name/value pairs as you require, up to a maximum total cookie size of 4KB. 
<BR>
<PRE>
<FONT COLOR="#000080">&lt;HTML&gt;
&lt;HEAD&gt;
&lt;TITLE&gt;Setting a cookie [3]&lt;/TITLE&gt;
&lt;SCRIPT LANGUAGE=&quot;vbscript&quot;&gt;
Dim VarName
Dim VarVal
Dim VarName1
Dim VarVal1
Dim Exp
Exp = &quot;expires=Wednesday, 09-Nov-1999 23:12:40 GMT&quot;
VarName = &quot;mycookie&quot;
VarVal = Date()
VarName1 = &quot;nextname&quot;
VarVal1 = &quot;anything;&quot;
Document.Cookie = VarName &amp; &quot;=&quot; &amp; VarVal &amp; &quot;;&quot; &amp; VarName1 &amp; &quot;=&quot; &amp; VarVal1 &amp; Exp
Sub cmdButton1_OnClick
 Alert Document.Cookie
End Sub
&lt;/SCRIPT&gt;
&lt;BODY BGCOLOR=&quot;white&quot;&gt;
&lt;CENTER&gt;
&lt;INPUT TYPE=&quot;button&quot; NAME=&quot;cmdButton1&quot; VALUE=&quot;Get Cookie Value&quot;&gt;
&lt;/CENTER&gt;
&lt;/BODY&gt;
&lt;/HTML&gt;</FONT></PRE>
<BR>
<A NAME="E68E101"></A>
<H3 ALIGN=CENTER>
<CENTER>
<FONT SIZE=5 COLOR="#FF0000"><B><IMG SRC="task.gif">Reading Individual Cookie Values</B></FONT></CENTER></H3>
<BR>
<P>In the real world, you need to get hold of individual cookie values, rather than the complete cookie or a name/value pair. This requires you to get involved in manipulating the string that is returned by Document.Cookie.
<BR>
<BLOCKQUOTE>
<BLOCKQUOTE>
<HR ALIGN=CENTER>
<BR>
<NOTE>For more information on string manipulation, see Chapter 7, &quot;Manipulating Strings.&quot;</NOTE>
<BR>
<HR ALIGN=CENTER>
</BLOCKQUOTE></BLOCKQUOTE>
<P>The string that is returned is the complete cookie&#151;basically, a series of name/value pairs delimited by semicolons. Therefore, you need to find the variable name within the string, and from its position in the string, you can then extract the value associated with that variable. This example shows you how to dissect the cookie string in order to return the value of a specific variable within the cookie.
<BR>
<P>The HTML template for this example is slightly different from the ones used before. For ease of demonstration, each of the two variables within the cookie will be returned by clicking on the appropriate button. 
<BR>
<PRE>
<FONT COLOR="#000080">&lt;HTML&gt;
&lt;HEAD&gt;
&lt;TITLE&gt;Getting a Cookie&lt;/TITLE&gt;
&lt;SCRIPT LANGUAGE=&quot;vbscript&quot;&gt;
&lt;/SCRIPT&gt;
&lt;BODY BGCOLOR=&quot;white&quot;&gt;
&lt;CENTER&gt;
&lt;INPUT TYPE=&quot;button&quot; NAME=&quot;cmdButton1&quot; VALUE=&quot;Get MyCookie Value&quot;&gt;
&lt;P&gt;
&lt;INPUT TYPE=&quot;button&quot; NAME=&quot;cmdButton2&quot; VALUE=&quot;Get NextName Value&quot;&gt;
&lt;/CENTER&gt;
&lt;/BODY&gt;
&lt;/HTML&gt;</FONT></PRE>
<P>When you've entered the HTML template, between the &lt;SCRIPT&gt; tags add the following two event handlers for the two buttons.  Note that each one calls the same custom procedure, passing the name of the variable to be returned.
<BR>
<PRE>
<FONT COLOR="#000080">Sub cmdButton1_OnClick
 Call GetCookieValue(&quot;mycookie&quot;)
End Sub
Sub cmdButton2_OnClick
 Call GetCookieValue(&quot;nextname&quot;)
End Sub</FONT></PRE>
<P>Now you can enter the custom procedure.  Again, the line numbers are only for ease of explanation. 
<BR>
<PRE>
<FONT COLOR="#000080"> 1: Sub GetCookieValue(CkName)
 2:
 3:  CkNameLen = Len(CkName)
 4:
 5:  If InStr(Document.Cookie, CkName) = 0 Then
 6:   Alert &quot;Cookie value not found&quot;
 7:  Else
 8:   CkValStart = InStr(Document.Cookie, CkName) + CkNameLen + 1
 9:
10:    If InStr(CkValStart, Document.Cookie, &quot;;&quot;) = 0 Then
11:     CkVal = Mid(Document.Cookie, CkValStart)
12:    Else
13:     CkValEnd = InStr(CkValStart, Document.Cookie, &quot;;&quot;)
14:     CkValLen = CkValEnd - CkValStart
15:     CkVal = Mid(Document.Cookie, CkValStart, CkValLen)
16:    End If
17:
18:   Alert CkVal
19:  End If
20: End Sub</FONT></PRE>
<P>The custom procedure prototype is on line 1, and it requires that the name of the cookie variable be passed into the procedure when it is called. The length of the name string is obtained and assigned to the variable CkNameLen in line 3.
<BR>
<P>Line 5 checks to make sure that the variable name is present within the cookie string. If it is not, a warning message is displayed and the procedure is terminated.
<BR>
<P>If the variable name is found within the cookie string, execution continues at line 8, where the position of the first character of the variable value is calculated. This is done by adding the length of the variable name to the start position of the variable name to give the end position of the variable name. Then you add one further character to basically jump past the = that sits between the variable name and the variable value.
<BR>
<P>If the variable value that you are seeking is the last one in the cookie, the semicolon will not appear after the value. Therefore, line 10 checks to see whether a semicolon is present at some point after the start of the variable value. If not, this is the last value of the cookie, and its end point can be taken as the end point of the overall cookie. If there is a semicolon present after the variable value, the position of the semicolon is the end point of the variable value.
<BR>
<P>The Mid function used in line 11 does not use a string length element and, therefore, Mid returns a string that ends at the last character of the source string. The Mid function in line 15 uses the calculated length of the value string to pluck the value from the source string. 
<BR>
<P>Here's the complete source code for the example. The results of clicking the two buttons are shown in Figures 19.5 and 19.6. 
<BR>
<PRE>
<FONT COLOR="#000080">&lt;HTML&gt;
&lt;HEAD&gt;
&lt;TITLE&gt;Getting a Cookie&lt;/TITLE&gt;
&lt;SCRIPT LANGUAGE=&quot;vbscript&quot;&gt;
Sub cmdButton1_OnClick
 Call GetCookieValue(&quot;mycookie&quot;)
End Sub
Sub cmdButton2_OnClick
 Call GetCookieValue(&quot;nextname&quot;)
End Sub
Sub GetCookieValue(CkName)
 CkNameLen = Len(CkName)
 If InStr(Document.Cookie, CkName) = 0 Then
  Alert &quot;Cookie value not found&quot;
 Else
  CkValStart = InStr(Document.Cookie, CkName) + CkNameLen + 1
   If InStr(CkValStart, Document.Cookie, &quot;;&quot;) = 0 Then
    CkVal = Mid(Document.Cookie, CkValStart)
   Else
    CkValEnd = InStr(CkValStart, Document.Cookie, &quot;;&quot;)
    CkValLen = CkValEnd - CkValStart
    CkVal = Mid(Document.Cookie, CkValStart, CkValLen)
   End If
  Alert CkVal
 End If
End Sub
&lt;/SCRIPT&gt;
&lt;BODY BGCOLOR=&quot;white&quot;&gt;
&lt;CENTER&gt;
&lt;INPUT TYPE=&quot;button&quot; NAME=&quot;cmdButton1&quot; VALUE=&quot;Get MyCookie Value&quot;&gt;
&lt;P&gt;
&lt;INPUT TYPE=&quot;button&quot; NAME=&quot;cmdButton2&quot; VALUE=&quot;Get NextName Value&quot;&gt;
&lt;/CENTER&gt;
&lt;/BODY&gt;
&lt;/HTML&gt;</FONT></PRE>
<P><B><A HREF="19lax05.gif">Figure 19.5. Click the MyCookie button to return the value of the mycookie variable.</A></B>
<BR>
<P><B><A HREF="19lax06.gif">Figure 19.6. Click the NextName button to return the value of the nextname variable. </A></B>
<BR>
<BR>
<A NAME="E69E130"></A>
<H4 ALIGN=CENTER>
<CENTER>
<FONT SIZE=4 COLOR="#FF0000"><B>Workshop Wrap-Up</B></FONT></CENTER></H4>
<BR>
<P>Cookies represent an important aspect of interactive Web development. Most people are coming to realize that, far from being a threat to their privacy, cookies have been developed to enhance the surfing experience by allowing site designers to personalize Web sites. The security argument is further diminished with client-side scripting, because the cookie file never leaves the client machine.
<BR>
<P>You can find more general information about cookies at this Netscape site:
<BR>
<BR>
<PRE>
<FONT COLOR="#000080"><A HREF="http://home.netscape.com/newsref/std/cookie_spec.html.gif">http://home.netscape.com/newsref/std/cookie_spec.html</A></FONT></PRE>
<P>You can also find an excellent Web page, called <I>Andy's Netscape HTTP Cookie Info</I>, at this address: 
<BR>
<BR>
<PRE>
<FONT COLOR="#000080"><A HREF="http://www.illuminatus.com/cookie.fcgi">http://www.illuminatus.com/cookie.fcgi</A></FONT></PRE>
<BR>
<A NAME="E69E131"></A>
<H4 ALIGN=CENTER>
<CENTER>
<FONT SIZE=4 COLOR="#FF0000"><B>Next Steps</B></FONT></CENTER></H4>
<BR>
<P>Now that you've seen how cookies work and how you bake them to create wonderfully tasty Web pages, why not add some of the following VBScript flavorings to your recipe?
<BR>
<UL>
<LI>To see a real-life working example of cookies, see Chapter 20, &quot;Real-Life Examples III.&quot;
<BR>
<BR>
<LI>To learn more about string manipulation, see Chapter 7, &quot;Manipulating Strings.&quot;
<BR>
<BR>
<LI>To learn more about dates and times within VBScript, see Chapter 8 &quot;Adding Date and Time Functions.&quot;
<BR>
<BR>
</UL>
<BR>
<A NAME="E69E132"></A>
<H4 ALIGN=CENTER>
<CENTER>
<FONT SIZE=4 COLOR="#FF0000"><B>Q&amp;A</B></FONT></CENTER></H4>
<BR>
<P><B>Q: Why are cookies called cookies?</B>
<BR>
<P><B>A:</B> I've never seen a definitive answer to this one. Cookies were originally referred to as <I>Magic Cookies</I>. The most plausible explanation I have read is that they were so named after Dan O'Neill's book, <I>Hear the Sound of My Feet Walking... Drown the Sound of My Voice Talking...</I> In the book, Fred gives Hugh and Sam magic cookies and watches their interactive Magic Cookie Land dreams; then Fred uses a magic cookie himself to get into Hugh's dream. (Like you would I suppose!)
<BR>
<P>This relates to cookies because Fred symbolizes the webmaster, and dreams represent browsing or surfing. Maybe now you can see where the idea for the name came from, although &quot;watching&quot; would be a gross exaggeration of the purpose and use of cookies.
<P ALIGN=CENTER>
<A HREF="lax18.htm" TARGET="_self"><IMG SRC="blanprev.gif" WIDTH = 37 HEIGHT = 37 BORDER = 0 ALT="Previous Page"></A>
<A HREF="#I0" TARGET="_self"><IMG SRC="blantop.gif" WIDTH = 37 HEIGHT = 37 BORDER = 0 ALT="Page Top"></A>
<A HREF="httoc.htm" TARGET="_self"><IMG SRC="blantoc.gif" WIDTH = 37 HEIGHT = 37 BORDER = 0 ALT="TOC"></A>
<A HREF="lax20.htm" TARGET="_self"><IMG SRC="blannext.gif" WIDTH = 37 HEIGHT = 37 BORDER = 0 ALT="Next Page"></A>
<A HREF="http://www.mcp.com/sams/" TARGET="_self"><IMG SRC="blanhome.gif" WIDTH = 37 HEIGHT = 37 BORDER = 0 ALT="See Page"></A>
</BODY></HTML>
