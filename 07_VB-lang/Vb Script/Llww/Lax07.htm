<HTML>
<HEAD>
<TITLE>lax07.htm </TITLE>
<LINK REL="ToC" HREF="httoc.htm">
<LINK REL="Index" HREF="htindex.htm">
<LINK REL="Next" HREF="lax08.htm">
<LINK REL="Previous" HREF="lax06.htm"></HEAD>
<BODY BGCOLOR="#FFFFFF" TEXT="#000000" LINK="#0000FF" VLINK="#800080">
<A NAME="I0"></A><P ALIGN=CENTER>
<A HREF="lax06.htm" TARGET="_self"><IMG SRC="blanprev.gif" WIDTH = 37 HEIGHT = 37 BORDER = 0 ALT="Previous Page"></A>
<A HREF="httoc.htm" TARGET="_self"><IMG SRC="blantoc.gif" WIDTH = 37 HEIGHT = 37 BORDER = 0 ALT="TOC"></A>
<A HREF="lax08.htm" TARGET="_self"><IMG SRC="blannext.gif" WIDTH = 37 HEIGHT = 37 BORDER = 0 ALT="Next Page"></A>
<A HREF="http://www.mcp.com/sams/" TARGET="_self"><IMG SRC="blanhome.gif" WIDTH = 37 HEIGHT = 37 BORDER = 0 ALT="See Page"></A>
<HR ALIGN=CENTER>
<P>
<UL>
<UL>
<UL>
<UL>
<LI>
<A HREF="#E69E42" >Constructing the Strings Sampler HTML Template</A></UL>
<LI>
<A HREF="#E68E38" ><IMG SRC="task.gif">Making a String All Lowercase Characters</A>
<UL>
<LI>
<A HREF="#E69E43" >Adding the Uppercase and Lowercase Sample Form Definition</A>
<LI>
<A HREF="#E69E44" >Adding the Lowercase Conversion Procedure</A></UL>
<LI>
<A HREF="#E68E39" ><IMG SRC="task.gif">Making a String All Uppercase Characters</A>
<UL>
<LI>
<A HREF="#E69E45" >Adding the Uppercase Procedure</A></UL>
<LI>
<A HREF="#E68E40" ><IMG SRC="task.gif">Converting ASCII Codes to String Characters</A>
<UL>
<LI>
<A HREF="#E69E46" >Adding the ASCII-to-String Form to the Sample</A></UL>
<LI>
<A HREF="#E68E41" ><IMG SRC="task.gif">Converting String Characters to ASCII Codes</A>
<UL>
<LI>
<A HREF="#E69E47" >Adding the String-to-ASCII Form to the Sample</A></UL>
<LI>
<A HREF="#E68E42" ><IMG SRC="task.gif">Finding the Length of a String</A>
<UL>
<LI>
<A HREF="#E69E48" >Adding the Length Procedure to the Sample Page</A></UL>
<LI>
<A HREF="#E68E43" ><IMG SRC="task.gif">Returning the Leftmost Characters of a String</A>
<UL>
<LI>
<A HREF="#E69E49" >Adding the Left Procedure Form to the Sample Page</A></UL>
<LI>
<A HREF="#E68E44" ><IMG SRC="task.gif">Returning the Rightmost Characters of a String</A>
<UL>
<LI>
<A HREF="#E69E50" >Adding the Right Procedure Form to the Sample Page</A></UL>
<LI>
<A HREF="#E68E45" ><IMG SRC="task.gif">Returning Any Part of a String</A>
<UL>
<LI>
<A HREF="#E69E51" >Adding the Mid Form to the Sampler Page</A></UL>
<LI>
<A HREF="#E68E46" ><IMG SRC="task.gif">Finding One String Within Another</A>
<UL>
<LI>
<A HREF="#E69E52" >Adding the String Search Form to the Sampler Page</A>
<LI>
<A HREF="#E69E53" >The Completed String-Manipulation Sampler</A>
<LI>
<A HREF="#E69E54" >Workshop Wrap-Up</A>
<LI>
<A HREF="#E69E55" >Next Steps</A>
<LI>
<A HREF="#E69E56" >Q&amp;A</A></UL></UL></UL></UL>
<HR ALIGN=CENTER>
<A NAME="E66E14"></A>
<H1 ALIGN=CENTER>
<CENTER>
<FONT SIZE=6 COLOR="#FF0000"><B>- 7 -</B>
<BR><B>Manipulating Strings</B></FONT></CENTER></H1>
<BR>
<P>In this chapter, you
<BR>
<UL>
<LI>Learn how to make a string all uppercase or all lowercase
<BR>
<BR>
<LI>Convert strings into ASCII numbers
<BR>
<BR>
<LI>Convert ASCII numbers into strings
<BR>
<BR>
<LI>Determine the length of a string
<BR>
<BR>
<LI>Learn how to return sections of the string
<BR>
<BR>
<LI>Find one string within another
<BR>
<BR>
</UL>
<P>Tasks in this chapter:
<BR>
<UL>
<LI>Making a string all lowercase characters
<BR>
<BR>
<LI>Making a string all uppercase characters
<BR>
<BR>
<LI>Converting ASCII codes to string characters
<BR>
<BR>
<LI>Converting string characters to ASCII codes
<BR>
<BR>
<LI>Finding the length of a string
<BR>
<BR>
<LI>Returning the leftmost characters of a string
<BR>
<BR>
<LI>Returning the rightmost characters of a string
<BR>
<BR>
<LI>Returning any part of a string
<BR>
<BR>
<LI>Finding one string within another
<BR>
<BR>
</UL>
<P>String manipulation is important for data verification and formatting strings to your specifications prior to submitting data to the server. For example, you can ensure that all text strings are uppercase to stay in line with your database design.
<BR>
<P>VBScript gives you a rich set of functions to help you manipulate strings and characters. All the string functions are very easy to use, which means that you can add complex string checking and formatting to your Web pages in just a few lines of code.
<BR>
<P>You can also use VBScript's string-manipulation functions to parse a complete string quickly and easily. For example, you can split a phrase such as &quot;This is a string&quot; into its individual words. Using a similar routine, you can search for a particular string within another string, as you saw in the last chapter where you validated an e-mail address by searching for the @ character.
<BR>
<P>This chapter looks deeper into the syntax of the most widely used string functions. A complete list of string functions is available in Appendix C.
<BR>
<BLOCKQUOTE>
<BLOCKQUOTE>
<HR ALIGN=CENTER>
<BR>
<NOTE>The sample in this chapter was designed so that you can add as much or as little of its functionality as you want. First, build the sampler template, and then you can add various sections. You can use each task in this chapter within the sampler template as a stand-alone page if you want. Add the form definitions inside the &lt;TABLE&gt; tags and the subprocedures inside the &lt;SCRIPT&gt; tags.</NOTE>
<BR>
<HR ALIGN=CENTER>
</BLOCKQUOTE></BLOCKQUOTE>
<BR>
<A NAME="E69E42"></A>
<H4 ALIGN=CENTER>
<CENTER>
<FONT SIZE=4 COLOR="#FF0000"><B>Constructing the Strings Sampler HTML Template</B></FONT></CENTER></H4>
<BR>
<P>You can use your favorite HTML editor, Notepad, or even the text editor of the ActiveX Control Pad to write the HTML and script code. This sample doesn't use any ActiveX controls, so you don't need to use the ActiveX Control Pad to produce the script sections. The HTML code for the example document is shown here:
<BR>
<PRE>
<FONT COLOR="#000080">&lt;HTML&gt;
&lt;HEAD&gt;
&lt;SCRIPT LANGUAGE=&quot;vbscript&quot;&gt;
&lt;/SCRIPT&gt;
&lt;/HEAD&gt;
&lt;BODY BGCOLOR=&quot;white&quot;&gt;
&lt;CENTER&gt;
&lt;H2&gt;String Manipulation&lt;/H2&gt;
&lt;TABLE BORDER=1&gt;
&lt;/TABLE&gt;
&lt;/CENTER&gt;
&lt;/BODY&gt;
&lt;/HTML&gt;</FONT></PRE>
<P>After you build your template, save it as strings.htm. You're ready to start adding some string-manipulation functions.
<BR>
<BR>
<A NAME="E68E38"></A>
<H3 ALIGN=CENTER>
<CENTER>
<FONT SIZE=5 COLOR="#FF0000"><B><IMG SRC="task.gif">Making a String All Lowercase Characters</B></FONT></CENTER></H3>
<BR>
<P>VBScript has two functions for converting a string to either all uppercase or all lowercase letters. Non-alphabetical characters within the string remain untouched. First, look at the function to change the string to lowercase.
<BR>
<BR>
<A NAME="E69E43"></A>
<H4 ALIGN=CENTER>
<CENTER>
<FONT SIZE=4 COLOR="#FF0000"><B>Adding the Uppercase and Lowercase Sample Form Definition</B></FONT></CENTER></H4>
<BR>
<P>The lowercase and uppercase data entry for the sample application is held within the same form. Enter a string in the text box text1, and click either the Make Uppercase or Make Lowercase button. The result appears in the Output text box. The HTML code for the sample form is as follows:
<BR>
<PRE>
<FONT COLOR="#000080">&lt;FORM NAME=&quot;frmUprLwr&quot;&gt;
&lt;TR&gt;&lt;TD&gt;
Enter a string &amp;nbsp; &lt;INPUT TYPE=&quot;text&quot; NAME=&quot;Text1&quot;&gt;
&lt;/TD&gt;&lt;TD&gt;
&lt;INPUT TYPE=&quot;button&quot; NAME=&quot;MakeLowerCase&quot; VALUE=&quot;Lower Case&quot;&gt;
&lt;INPUT TYPE=&quot;button&quot; NAME=&quot;MakeUpperCase&quot; VALUE=&quot;Upper Case&quot;&gt;
&lt;/TD&gt;&lt;TD&gt;
&lt;INPUT TYPE=&quot;text&quot; NAME=&quot;Output&quot;&gt;
&lt;/TD&gt;&lt;/TR&gt;
&lt;/FORM&gt;</FONT></PRE>
<BLOCKQUOTE>
<BLOCKQUOTE>
<HR ALIGN=CENTER>
<BR>
<NOTE>&amp;nbsp; is a non-breaking space that is used to force a space character into the HTML.</NOTE>
<BR>
<HR ALIGN=CENTER>
</BLOCKQUOTE></BLOCKQUOTE>
<BR>
<A NAME="E69E44"></A>
<H4 ALIGN=CENTER>
<CENTER>
<FONT SIZE=4 COLOR="#FF0000"><B>Adding the Lowercase Conversion Procedure</B></FONT></CENTER></H4>
<BR>
<P>To convert a string to lowercase, you use the LCase function. LCase takes only one variable&#151;the string that you want to convert. LCase returns a string of lowercase characters. Only the characters A to Z are converted; all other characters (such as @,!, &lt;, and so on) remain in their normal state.
<BR>
<P>Enter the following event handler for the MakeLowerCase button's OnClick event in the &lt;SCRIPT&gt; tags of the sampler template:
<BR>
<BLOCKQUOTE>
<BLOCKQUOTE>
<HR ALIGN=CENTER>
<BR>
<NOTE>Line numbers are shown for the purpose of explanation and should not be included within the final code.</NOTE>
<BR>
<HR ALIGN=CENTER>
</BLOCKQUOTE></BLOCKQUOTE>
<PRE>
<FONT COLOR="#000080">2:  Sub MakeLowerCase_OnClick
3:    Document.frmUprLwr.Output.Value = LCase(Document.frmUprLwr.Text1.Value)
4:  End Sub</FONT></PRE>
<BR>
<A NAME="E68E39"></A>
<H3 ALIGN=CENTER>
<CENTER>
<FONT SIZE=5 COLOR="#FF0000"><B><IMG SRC="task.gif">Making a String All Uppercase Characters</B></FONT></CENTER></H3>
<BR>
<P>Conversion to uppercase or lowercase is useful if you have to check a particular alphabetical-character word or even a phrase that the user entered. Suppose you have a text box that allows the user to enter a word such as &quot;Admin.&quot; You check to see whether the word was entered in order to invoke a further process, but here's your problem: Did the user type &quot;Admin,&quot; &quot;admin,&quot; or even &quot;AdMiN&quot;? Character strings are literal and &quot;AdMiN&quot; does not equal &quot;admin.&quot; A solution is to convert the string entered by the user to an uppercase &quot;ADMIN&quot; and then check to see if it matches &quot;ADMIN.&quot;
<BR>
<BLOCKQUOTE>
<BLOCKQUOTE>
<HR ALIGN=CENTER>
<BR>
<NOTE>This procedure takes its input from the form used in the lowercase example.</NOTE>
<BR>
<HR ALIGN=CENTER>
</BLOCKQUOTE></BLOCKQUOTE>
<BR>
<A NAME="E69E45"></A>
<H4 ALIGN=CENTER>
<CENTER>
<FONT SIZE=4 COLOR="#FF0000"><B>Adding the Uppercase Procedure</B></FONT></CENTER></H4>
<BR>
<P>The VBScript function for converting a string to uppercase is UCase, and it takes just one variable, the string you want to convert. To add uppercase conversion functionality to the sampler, enter the following event handler for the MakeUpperCase button's OnClick event in the &lt;SCRIPT&gt; tags of the sampler template:
<BR>
<PRE>
<FONT COLOR="#000080">5:  Sub MakeUpperCase_OnClick
6:   Document.frmUprLwr.Output.Value = UCase(Document.frmUprLwr.Text1.Value)
7:  End Sub</FONT></PRE>
<BR>
<A NAME="E68E40"></A>
<H3 ALIGN=CENTER>
<CENTER>
<FONT SIZE=5 COLOR="#FF0000"><B><IMG SRC="task.gif">Converting ASCII Codes to String Characters</B></FONT></CENTER></H3>
<BR>
<P>The American Standard Code for Information Interchange (ASCII) seven-bit character set represents letters and symbols found on a standard U.S. keyboard. The ASCII character set is the same as the first 128 characters (0&#150;127) in the ANSI character set.
<BR>
<P>The American National Standards Institute (ANSI) eight-bit character set, which is used by Microsoft Windows, allows you to represent up to 256 characters (0&#150;255). The first 128 characters (0&#150;127) correspond to the letters and symbols on a standard U.S. keyboard. The second 128 characters (128&#150;255) represent special characters, such as letters in international alphabets, currency symbols, and fractions.
<BR>
<P>ASCII and ANSI codes are the means by which the computer stores alphabetical and other characters by converting the character to a number, as detailed previously. You can access these numbers to perform special string manipulations. For example, you can simulate the UCase and LCase functions by performing a simple calculation on the individual string characters. (Uppercase characters are always the lowercase character's ASCII code minus 32.) You can also create simple encryption methods by subjecting each character in the string to a calculation.
<BR>
<P>With the many built-in string-manipulation functions available to you in VBScript, the usefulness of having direct access to ASCII/ANSI codes is starting to diminish. To demonstrate the codes and their string representations, the following sample page automatically prints every character in the set from 32 to 255:
<BR>
<PRE>
<FONT COLOR="#000080">&lt;HTML&gt;
&lt;SCRIPT LANGUAGE=&quot;vbscript&quot;&gt;
Document.Write &quot;&lt;BODY BGCOLOR='white'&gt;&quot;
For x = 32 to 255
 Document.Write CStr(x) &amp; &quot; &quot; &amp; Chr(x) &amp; &quot;&lt;BR&gt;&quot;
next
Document.Write &quot;&lt;/BODY&gt;&quot;
&lt;/SCRIPT&gt;
&lt;/HTML&gt;</FONT></PRE>
<P>The ANSI/ASCII characters from 0 to 32 are either system calls, nondisplaying characters, or nonsupported characters. The most common use for the lower numbers are codes 10 and 13, which correspond to the line feed and carriage return. Note that several Windows controls, such as the message box, can only display true carriage returns by embedding a line feed followed by a carriage return, as in the following example:
<BR>
<PRE>
<FONT COLOR="#000080">&lt;HTML&gt;
&lt;HEAD&gt;
 &lt;SCRIPT LANGUAGE=&quot;vbscript&quot;&gt;
  Sub ShowMessage_OnClick
   Dim strMessage
   Dim CRLF
    CRLF = Chr(10) &amp; Chr(13)
    strMessage = &quot;This is the first line&quot; &amp; CRLF
    strMessage = strMessage &amp; &quot;This is the second line&quot;
    x = MsgBox(strMessage,0,&quot;My Message&quot;)
  End Sub
 &lt;/SCRIPT&gt;
&lt;/HEAD&gt;
&lt;BODY BGCOLOR=&quot;white&quot;&gt;
&lt;CENTER&gt;
&lt;INPUT TYPE=&quot;button&quot; NAME=&quot;ShowMessage&quot; VALUE=&quot;Click Me&quot;&gt;
&lt;/CENTER&gt;
&lt;/BODY&gt;
&lt;/HTML&gt;</FONT></PRE>
<BR>
<A NAME="E69E46"></A>
<H4 ALIGN=CENTER>
<CENTER>
<FONT SIZE=4 COLOR="#FF0000"><B>Adding the ASCII-to-String Form to the Sample</B></FONT></CENTER></H4>
<BR>
<P>Enter the following HTML form to the sample template within the &lt;TABLE&gt; tags:
<BR>
<PRE>
<FONT COLOR="#000080">&lt;FORM NAME=&quot;frmAscChr&quot;&gt;
&lt;TR&gt;&lt;TD&gt;
Enter a Number &amp;nbsp; &lt;INPUT TYPE=&quot;text&quot; NAME=&quot;Text1&quot; SIZE=10&gt;
&lt;/TD&gt;&lt;TD&gt;
&lt;INPUT TYPE=&quot;button&quot; NAME=&quot;MakeString&quot; VALUE=&quot;Convert to a String&quot;&gt;
&lt;/TD&gt;&lt;TD&gt;
&lt;INPUT TYPE=&quot;text&quot; NAME=&quot;Output&quot;&gt;
&lt;/TD&gt;&lt;/TR&gt;
&lt;/FORM&gt;</FONT></PRE>
<P>The conversion function from ASCII code to string, Chr(), takes only one variable, the ASCII code, which must be a number.
<BR>
<P>First, the procedure checks to ensure that the value entered in the text1 text box can be converted to a number. If it cannot, a warning message displays to the user and the subroutine terminates. This verification is usually not necessary because, most of the time, you generate the ASCII code from within the script, rather than obtaining it from a form input.
<BR>
<BLOCKQUOTE>
<BLOCKQUOTE>
<HR ALIGN=CENTER>
<BR>
<NOTE>For more details about verification and the IsNumeric function, see Chapter 6, &quot;Checking Form Data.&quot;</NOTE>
<BR>
<HR ALIGN=CENTER>
</BLOCKQUOTE></BLOCKQUOTE>
<P>If the verification is successful, a second check makes sure the number is within ASCII limits. Here, I've restricted the lower limit to 32 because some of the lower numbers are used for system functions such as beeping.
<BR>
<P>Finally, the conversion itself takes place. Because an HTML form can only return string data, the value contained in Text1 must be converted to an integer prior to being used as an ASCII code. Without this conversion, a Type Mismatch runtime error occurs. The following code shows how to validate the entry and convert the value within MakeString's OnClick event:
<BR>
<PRE>
<FONT COLOR="#000080">8:  Sub MakeString_OnClick
9:   If Not IsNumeric(Document.frmAscChr.Text1.Value) Then
10:    Alert &quot;Only Numbers are allowed&quot;
11:    Exit Sub
12:   End if
13:   If CInt(Document.frmAscChr.Text1.Value) &gt; 255 OR _
14:    CInt(Document.frmAscChr.Text1.Value) &lt; 32 Then
15:    Alert &quot;Must be between 32 and 255&quot;
16:    Exit Sub
17:   End If
   
18:   Document.frmAscChr.Output.Value = Chr(CInt(Document.frmAscChr.Text1.Value))
19:  End Sub</FONT></PRE>
<P>Add the preceding subroutine to your sample HTML template between the &lt;SCRIPT&gt; tags.
<BR>
<BR>
<A NAME="E68E41"></A>
<H3 ALIGN=CENTER>
<CENTER>
<FONT SIZE=5 COLOR="#FF0000"><B><IMG SRC="task.gif">Converting String Characters to ASCII Codes</B></FONT></CENTER></H3>
<BR>
<P>For finding the numeric representation of a character in the ANSI/ASCII character set, VBScript provides the Asc() function, which is the reverse of the Chr() function.
<BR>
<BR>
<A NAME="E69E47"></A>
<H4 ALIGN=CENTER>
<CENTER>
<FONT SIZE=4 COLOR="#FF0000"><B>Adding the String-to-ASCII Form to the Sample</B></FONT></CENTER></H4>
<BR>
<P>Simply add the following lines of HTML between the &lt;TABLE&gt; tags to include the form that calls the sample event handler:
<BR>
<PRE>
<FONT COLOR="#000080">&lt;FORM NAME=&quot;frmChrAsc&quot;&gt;
&lt;TR&gt;&lt;TD&gt;
Enter a Character &amp;nbsp; &lt;INPUT TYPE=&quot;text&quot; NAME=&quot;Text1&quot; SIZE=10&gt;
&lt;/TD&gt;&lt;TD&gt;
&lt;INPUT TYPE=&quot;button&quot; NAME=&quot;MakeNumber&quot; VALUE=&quot;Convert to a Number&quot;&gt;
&lt;/TD&gt;&lt;TD&gt;
&lt;INPUT TYPE=&quot;text&quot; NAME=&quot;Output&quot;&gt;
&lt;/TD&gt;&lt;/TR&gt;
&lt;/FORM&gt;</FONT></PRE>
<P>Converting from string data to ASCII code couldn't be much simpler; the Asc() function accepts a string character and returns the ASCII code. You can give the function a full string such as &quot;What Is This&quot;; however, it only converts the first character of the string to an ASCII code.
<BR>
<P>The data retrieved from an HTML form is always string data (even if the user has typed in a number), and the function accepts string data, so there is not much point in verifying that which cannot be wrong! That's why the procedure is a simple one-liner.
<BR>
<BLOCKQUOTE>
<BLOCKQUOTE>
<HR ALIGN=CENTER>
<BR>
<NOTE>When data is passed from an HTML form, it is always in the form of a string. Therefore, a numeric entry such as 100 appears to your script as the string &quot;100&quot;.</NOTE>
<BR>
<HR ALIGN=CENTER>
</BLOCKQUOTE></BLOCKQUOTE>
<P>Type the following lines between the &lt;SCRIPT&gt; tags of the template, and you've got instant ASCII convertibility:
<BR>
<PRE>
<FONT COLOR="#000080">20:  Sub MakeNumber_OnClick
21:   Document.frmChrAsc.Output.Value = Asc(Document.frmChrAsc.Text1.Value)
22:  End Sub</FONT></PRE>
<BR>
<A NAME="E68E42"></A>
<H3 ALIGN=CENTER>
<CENTER>
<FONT SIZE=5 COLOR="#FF0000"><B><IMG SRC="task.gif">Finding the Length of a String</B></FONT></CENTER></H3>
<BR>
<P>Determining the length of a string is seldom very useful on its own. However, when you combine this function with the other string-manipulation functions, you can perform almost any string formatting and checking you might need and exercise real power over your character strings. (See Listing 7.1.) In fact, many string operations wouldn't even be possible without determining the length of the string or the length of part of a string.
<BR>
<P>
<FONT COLOR="#000080"><B>Listing 7.1. Adding the form to the sample page.</B></FONT>
<BR>
<PRE>
<FONT COLOR="#000080">&lt;FORM NAME=&quot;frmLen&quot;&gt;
&lt;TR&gt;&lt;TD&gt;
Enter a String &amp;nbsp; &lt;INPUT TYPE=&quot;text&quot; NAME=&quot;Text1&quot;&gt;
&lt;/TD&gt;&lt;TD&gt;
&lt;INPUT TYPE=&quot;button&quot; NAME=&quot;GetLength&quot; VALUE=&quot;Find String Length&quot;&gt;
&lt;/TD&gt;&lt;TD&gt;
&lt;INPUT TYPE=&quot;text&quot; NAME=&quot;Output&quot;&gt;
&lt;/TD&gt;&lt;/TR&gt;
&lt;/FORM&gt;</FONT></PRE>
<BR>
<A NAME="E69E48"></A>
<H4 ALIGN=CENTER>
<CENTER>
<FONT SIZE=4 COLOR="#FF0000"><B>Adding the Length Procedure to the Sample Page</B></FONT></CENTER></H4>
<BR>
<P>You determine the length of a string using the VBScript Len() function, which receives one variable: the string to be sized. Len returns an integer that is the number of characters in the string.
<BR>
<P>No data-type checking is involved in this particular procedure, so you can add it as you use it within a script:
<BR>
<PRE>
<FONT COLOR="#000080">23:  Sub GetLength_OnClick
24:   Document.frmLen.Output.Value = Len(Document.frmLen.Text1.Value)
25:  End Sub</FONT></PRE>
<BLOCKQUOTE>
<BLOCKQUOTE>
<HR ALIGN=CENTER>
<BR>
<NOTE>The length of a string includes any leading or trailing spaces that the user entered. For example, if you enter &quot;    string    ,&quot; (four spaces, five characters, and four spaces without the quotation marks) into the text box, the Len() function returns 13. To clear leading spaces, use LTrim(<I>string</I>); to clear trailing spaces, use RTrim(<I>string</I>) . To clear both leading and trailing spaces,  use Trim(<I>string</I>) as follows:</NOTE>
<BR>
<PRE>
<FONT COLOR="#000080">newstring = LTrim(oldstring)
newstring = RTrim(oldstring)
newstring = Trim(oldstring)</FONT></PRE>
<HR ALIGN=CENTER>
</BLOCKQUOTE></BLOCKQUOTE>
<BR>
<A NAME="E68E43"></A>
<H3 ALIGN=CENTER>
<CENTER>
<FONT SIZE=5 COLOR="#FF0000"><B><IMG SRC="task.gif">Returning the Leftmost Characters of a String</B></FONT></CENTER></H3>
<BR>
<P>Being able to access particular parts of a string is an important part of string manipulation. Take a look at the function that returns a given number of characters starting with the leftmost character.
<BR>
<BR>
<A NAME="E69E49"></A>
<H4 ALIGN=CENTER>
<CENTER>
<FONT SIZE=4 COLOR="#FF0000"><B>Adding the Left Procedure Form to the Sample Page</B></FONT></CENTER></H4>
<BR>
<P>The following code segment shows the HTML code that you can add between the &lt;TABLE&gt; tags on the sampler page to use the left function example:
<BR>
<PRE>
<FONT COLOR="#000080">&lt;FORM NAME=&quot;frmLeft&quot;&gt;
&lt;TR&gt;&lt;TD&gt;
Enter a String &amp;nbsp; &lt;INPUT TYPE=&quot;text&quot; NAME=&quot;Text1&quot;&gt;
&lt;/TD&gt;&lt;TD&gt;
x&lt;INPUT TYPE=&quot;text&quot; NAME=&quot;LeftChars&quot; SIZE=10&gt;
&lt;INPUT TYPE=&quot;button&quot; NAME=&quot;GetLeft&quot; VALUE=&quot;Get Left x Chars&quot;&gt;
&lt;/TD&gt;&lt;TD&gt;
&lt;INPUT TYPE=&quot;text&quot; NAME=&quot;Output&quot;&gt;
&lt;/TD&gt;&lt;/TR&gt;
&lt;/FORM&gt;</FONT></PRE>
<P>To return the leftmost character or characters of a string, use the Left() function. The syntax for using the Left function is
<BR>
<BR>
<PRE>
<FONT COLOR="#000080">strVariable = Left(SourceString, <I>n</I>)</FONT></PRE>
<P><I>n</I> is the number of characters from the leftmost character you need to return. See the previous note regarding leading spaces in the string, because they can seriously affect the resulting string, giving you unpredictable results.
<BR>
<P>The number of left characters you specify cannot be a negative number. If the number specified is greater than the length of the string, the whole string is returned.
<BR>
<P>The following code shows the Left() function at work in the sample application. Add this code between the &lt;SCRIPT&gt; tags of your strings sampler:
<BR>
<PRE>
<FONT COLOR="#000080">26:  Sub GetLeft_OnClick
27:   If Not IsNumeric(Document.frmLeft.LeftChars.Value) Then
28:    Alert &quot;Only Numbers are allowed in the x Box&quot;
29:    Exit Sub
30:   Else
31:    intNoLeft = CInt(Document.frmLeft.LeftChars.Value)
32:   End if
33:   If intNoLeft &lt; 0 Then
34:     Alert &quot;You cannot use a negative value&quot;
35:     Exit Sub
36:   End if
37:   Document.frmLeft.Output.Value = Left(Document.frmLeft.Text1.Value,intNoLeft)
38:  End Sub</FONT></PRE>
<P>The procedure first validates that the entry is numeric; if it is, the entry is then converted to an integer. The integer is checked to ensure that it is positive or 0. The result of the Left function is displayed in the form's Output text box.
<BR>
<BR>
<A NAME="E68E44"></A>
<H3 ALIGN=CENTER>
<CENTER>
<FONT SIZE=5 COLOR="#FF0000"><B><IMG SRC="task.gif">Returning the Rightmost Characters of a String</B></FONT></CENTER></H3>
<BR>
<P>To complement the Left function, Microsoft also provides you with a Right() function, which returns the rightmost <I>n</I> characters of a string.
<BR>
<BR>
<A NAME="E69E50"></A>
<H4 ALIGN=CENTER>
<CENTER>
<FONT SIZE=4 COLOR="#FF0000"><B>Adding the Right Procedure Form to the Sample Page</B></FONT></CENTER></H4>
<BR>
<P>The following code segment shows the HTML code that you can add between the &lt;TABLE&gt; tags on the sampler page to use the Right function example:
<BR>
<PRE>
<FONT COLOR="#000080">&lt;FORM NAME=&quot;frmRight&quot;&gt;
&lt;TR&gt;&lt;TD&gt;
Enter a String &amp;nbsp; &lt;INPUT TYPE=&quot;text&quot; NAME=&quot;Text1&quot;&gt;
&lt;/TD&gt;&lt;TD&gt;
x&lt;INPUT TYPE=&quot;text&quot; NAME=&quot;RightChars&quot; SIZE=10&gt;
&lt;INPUT TYPE=&quot;button&quot; NAME=&quot;GetRight&quot; VALUE=&quot;Get Right x Chars&quot;&gt;
&lt;/TD&gt;&lt;TD&gt;
&lt;INPUT TYPE=&quot;text&quot; NAME=&quot;Output&quot;&gt;
&lt;/TD&gt;&lt;/TR&gt;
&lt;/FORM&gt;</FONT></PRE>
<P>To return the rightmost character or characters of a string, use the Right() function. The syntax for using the Right function is
<BR>
<BR>
<PRE>
<FONT COLOR="#000080">strVariable = Right(SourceString, <I>n</I>)</FONT></PRE>
<P><I>n</I> is the number of characters up to the rightmost character you want to return. See the previous note regarding leading spaces in the string, because they can seriously affect the resulting string, giving you unpredictable results. <I>n</I> cannot be a negative number. If the number specified is greater than the length of the string, the whole string is returned.
<BR>
<P>The following code shows the Right() function in the sample application. Add this code between the &lt;SCRIPT&gt; tags of your strings sampler:
<BR>
<PRE>
<FONT COLOR="#000080">39:  Sub GetRight_OnClick
40:   If Not IsNumeric(Document.frmRight.RightChars.Value) Then
41:    Alert &quot;Only Numbers are allowed in the x Box&quot;
42:    Exit Sub
43:   Else
44:    intNoRight = CInt(Document.frmRight.RightChars.Value)
45:   End if
46:   If intNoRight &lt; 0 Then
47:     Alert &quot;You cannot use a negative value&quot;
48:     Exit Sub
49:   End if
50:   Document.frmRight.Output.Value = Right(Document.frmRight.Text1.Value,intNoRight)
51:  End Sub</FONT></PRE>
<BR>
<A NAME="E68E45"></A>
<H3 ALIGN=CENTER>
<CENTER>
<FONT SIZE=5 COLOR="#FF0000"><B><IMG SRC="task.gif">Returning Any Part of a String</B></FONT></CENTER></H3>
<BR>
<P>You saw how to return the right section of a string and how to return the left section of a string, but what about a section of the string that sits somewhere in the middle?
<BR>
<P>Microsoft thought about that one, too. The function is called Mid(), and you can have some serious fun with it. If you use Mid() in conjunction with the other string-manipulation functions such as Len() and InStr() (which you'll see later in this chapter), you can even build a mini parsing tool.
<BR>
<BLOCKQUOTE>
<BLOCKQUOTE>
<HR ALIGN=CENTER>
<BR>
<NOTE>Parsing is the art of chopping up a string into useful bits.
<BR>
<BR>For another example of using InStr(), see Chapter 6, &quot;Checking Form Data.&quot;</NOTE>
<BR>
<HR ALIGN=CENTER>
</BLOCKQUOTE></BLOCKQUOTE>
<BR>
<A NAME="E69E51"></A>
<H4 ALIGN=CENTER>
<CENTER>
<FONT SIZE=4 COLOR="#FF0000"><B>Adding the Mid Form to the Sampler Page</B></FONT></CENTER></H4>
<BR>
<P>Add the following code between the &lt;TABLE&gt; tags in the sampler template:
<BR>
<PRE>
<FONT COLOR="#000080">&lt;FORM NAME=&quot;frmMid&quot;&gt;
&lt;TR&gt;&lt;TD&gt;
Enter String &amp;nbsp; &lt;INPUT TYPE=&quot;text&quot; NAME=&quot;Text1&quot;&gt;&lt;BR&gt;
Enter Mid String Length &amp;nbsp; &lt;INPUT TYPE=&quot;text&quot; NAME=&quot;Text2&quot; SIZE=6&gt;
&lt;/TD&gt;&lt;TD&gt;
Start at &amp;nbsp; &lt;INPUT TYPE=&quot;text&quot; NAME=&quot;MidChars&quot; SIZE=6&gt;
&lt;INPUT TYPE=&quot;button&quot; NAME=&quot;GetMid&quot; VALUE=&quot;Get Mid String&quot;&gt;
&lt;/TD&gt;&lt;TD&gt;
&lt;INPUT TYPE=&quot;text&quot; NAME=&quot;Output&quot;&gt;
&lt;/TD&gt;&lt;/TR&gt;
&lt;/FORM&gt;</FONT></PRE>
<P>The Mid() function has two different syntaxes. The first is
<BR>
<BR>
<PRE>
<FONT COLOR="#000080">strVariable = Mid(SourceString, intStart)</FONT></PRE>
<P>This first syntax returns a string starting with the character located at intStart and ending with the last character of the string. This method is similar to using Right(); the subtle difference is that you can use Mid() without knowing how many characters come after the start character position.
<BR>
<P>The second syntax is
<BR>
<BR>
<PRE>
<FONT COLOR="#000080">strVariable = Mid(SourceString, intStart, intLength)</FONT></PRE>
<P>The second syntax returns a string of length intLength starting with the character located at intStart. Both intStart and intLength can be other scripted manipulation functions. In both syntax cases, intStart<I> </I>cannot be less than 1.
<BR>
<P>To demonstrate Mid(), type the following code  (without the line numbers) between the &lt;SCRIPT&gt; tags in the strings sampler page:
<BR>
<PRE>
<FONT COLOR="#000080">52:  Sub GetMid_OnClick
53:   If Not IsNumeric(Document.frmMid.MidChars.Value) OR _
54:      Not IsNumeric(Document.frmMid.Text2.Value)Then
55:    Alert &quot;Only Numbers are allowed&quot;
56:    Exit Sub
57:   Else
58:    intStart = CInt(Document.frmMid.MidChars.Value)
59:    intMidStrLen = CInt(Document.frmMid.Text2.Value)
60:   End if
61:   If intStart &gt; Len(Document.frmMid.Text1.Value) OR intStart &lt; 1 Then
62:     Alert &quot;Start Number must be less than the string length and greater than 0&quot;
63:     Exit Sub
64:   End if
  
65:   strSource = Document.frmMid.Text1.Value
   
66:   Document.frmMid.Output.Value = Mid(strSource, intStart, intMidStrLen)
67:  End Sub</FONT></PRE>
<BR>
<A NAME="E68E46"></A>
<H3 ALIGN=CENTER>
<CENTER>
<FONT SIZE=5 COLOR="#FF0000"><B><IMG SRC="task.gif">Finding One String Within Another</B></FONT></CENTER></H3>
<BR>
<P>Suppose that you need to know whether a string contains a given character or series of characters and, if it does, where in the string the character or string of characters begins. This is probably the most common string-manipulation problem on the face of the earth. &quot;I know it's probably in there, but it might not be; if it isn't, it should be, and if it is, I want it on its own.&quot;
<BR>
<P>VBScript's InStr() function comes to the rescue. InStr() finds one string within another string and tells you where the string is located. You can also tell InStr where to start looking, which is a particularly important feature. Suppose that you have a fairly long string that might contain several instances of the string you're looking for. If you couldn't tell InStr where to start looking, you'd only find the first instance, but by giving InStr a starting point, you can find the first instance, jump past it to find the second, and so on.
<BR>
<BR>
<A NAME="E69E52"></A>
<H4 ALIGN=CENTER>
<CENTER>
<FONT SIZE=4 COLOR="#FF0000"><B>Adding the String Search Form to the Sampler Page</B></FONT></CENTER></H4>
<BR>
<P>Include the following HTML code in the sampler page table to try the string search function:
<BR>
<PRE>
<FONT COLOR="#000080">&lt;FORM NAME=&quot;frmInStr&quot;&gt;
&lt;TR&gt;&lt;TD&gt;
Enter Source String &amp;nbsp; &lt;INPUT TYPE=&quot;text&quot; NAME=&quot;Text1&quot;&gt;&lt;BR&gt;
Enter Search String &amp;nbsp; &lt;INPUT TYPE=&quot;text&quot; NAME=&quot;Text2&quot; SIZE=10&gt;
&lt;/TD&gt;&lt;TD&gt;
Start at &amp;nbsp; &lt;INPUT TYPE=&quot;text&quot; NAME=&quot;StartChars&quot; SIZE=6&gt;
&lt;INPUT TYPE=&quot;button&quot; NAME=&quot;GetInStr&quot; VALUE=&quot;Find String&quot;&gt;
&lt;/TD&gt;&lt;TD&gt;
&lt;INPUT TYPE=&quot;text&quot; NAME=&quot;Output&quot;&gt;
&lt;/TD&gt;&lt;/TR&gt;
&lt;/FORM&gt;</FONT></PRE>
<P>InStr() takes three variables and returns a string. The syntax for InStr() follows:
<BR>
<BR>
<PRE>
<FONT COLOR="#000080">strVariable = InStr(intStart, strSource, strSearch)</FONT></PRE>
<P>The starting position for the search (intStart) cannot be less than 1 or greater than the length of the string. If InStr finds the search string within the source string, it returns the starting position of the string. If it doesn't find the string, it returns zero.
<BR>
<P>To try InStr, add the following code to your sampler application. Enter a string, a search string, and the starting position for the search.
<BR>
<PRE>
<FONT COLOR="#000080">68:  Sub GetinStr_OnClick
69:   If Not IsNumeric(Document.frmInStr.StartChars.Value) Then
70:    Alert &quot;Start must be numeric&quot;
71:    Exit Sub
72:   Else
73:    intStart = CInt(Document.frmInStr.StartChars.Value)
74:   End if
75:   If intStart &gt; Len(Document.frmInStr.Text1.Value) OR intStart &lt; 1 Then
76:     Alert &quot;Start Number must be less than the string length and greater than 0&quot;
77:     Exit Sub
78:   End if
  
79:   strSource = Document.frmInStr.Text1.Value
80:   strSearch = Document.frmInStr.Text2.Value
   
81:   Document.frmInStr.Output.Value = InStr(intStart, strSource, strSearch)
82:  End Sub</FONT></PRE>
<BR>
<A NAME="E69E53"></A>
<H4 ALIGN=CENTER>
<CENTER>
<FONT SIZE=4 COLOR="#FF0000"><B>The Completed String-Manipulation Sampler</B></FONT></CENTER></H4>
<BR>
<P>Figure 7.1 shows what the final string-manipulation sampler pages look like in the browser.
<BR>
<P><B><A HREF="07lax01.gif">Figure 7.1. The string-manipulation sampler.</A></B>
<BR>
<P>Listing 7.2 contains the complete source code for the page.
<BR>
<P>
<FONT COLOR="#000080"><B>Listing 7.2. The strings.htm code.</B></FONT>
<BR>
<PRE>
<FONT COLOR="#000080">&lt;HTML&gt;
&lt;HEAD&gt;
1: &lt;SCRIPT LANGUAGE=&quot;vbscript&quot;&gt;
2:  Sub MakeLowerCase_OnClick
3:    Document.frmUprLwr.Output.Value = LCase(Document.frmUprLwr.Text1.Value)
4:  End Sub
 
5:  Sub MakeUpperCase_OnClick
6:   Document.frmUprLwr.Output.Value = UCase(Document.frmUprLwr.Text1.Value)
7:  End Sub
8:  Sub MakeString_OnClick
9:   If Not IsNumeric(Document.frmAscChr.Text1.Value) Then
10:    Alert &quot;Only Numbers are allowed&quot;
11:    Exit Sub
12:   End if
13:   If CInt(Document.frmAscChr.Text1.Value) &gt; 255 OR _
14:    CInt(Document.frmAscChr.Text1.Value) &lt; 20 Then
15:    Alert &quot;Must be between 20 and 255&quot;
16:    Exit Sub
17:   End If
   
18:   Document.frmAscChr.Output.Value = Chr(CInt(Document.frmAscChr.Text1.Value))
19:  End Sub
20:  Sub MakeNumber_OnClick
21:   Document.frmChrAsc.Output.Value = Asc(Document.frmChrAsc.Text1.Value)
22:  End Sub
23:  Sub GetLength_OnClick
24:   Document.frmLen.Output.Value = Len(Document.frmLen.Text1.Value)
25:  End Sub
26:  Sub GetLeft_OnClick
27:   If Not IsNumeric(Document.frmLeft.LeftChars.Value) Then
28:    Alert &quot;Only Numbers are allowed in the x Box&quot;
29:    Exit Sub
30:   Else
31:    intNoLeft = Cint(Document.frmLeft.LeftChars.Value) 
32:   End if
33:   If intNoLeft &lt; 0 Then
34:     Alert &quot;You cannot use a negative value&quot;
35:     Exit Sub
36:   End if
37:   Document.frmLeft.Output.Value = Left(Document.frmLeft.Text1.Value,intNoLeft)
38:  End Sub
39:  Sub GetRight_OnClick
40:   If Not IsNumeric(Document.frmRight.RightChars.Value) Then
41:    Alert &quot;Only Numbers are allowed in the x Box&quot;
42:    Exit Sub
43:   Else
44:    intNoRight = CInt(Document.frmRight.RightChars.Value)
45:   End if
46:   If intNoRight &lt; 0 Then
47:     Alert &quot;You cannot use a negative value&quot;
48:     Exit Sub
49:   End if
50:   Document.frmRight.Output.Value = Right(Document.frmRight.Text1.Value, intNoRight)
51:  End Sub
52:  Sub GetMid_OnClick
53:   If Not IsNumeric(Document.frmMid.MidChars.Value) OR _
54:      Not IsNumeric(Document.frmMid.Text2.Value)Then
55:    Alert &quot;Only Numbers are allowed&quot;
56:    Exit Sub
57:   Else
58:    intStart = CInt(Document.frmMid.MidChars.Value)
59:    intMidStrLen = CInt(Document.frmMid.Text2.Value)
60:   End if
61:   If intStart &gt; Len(Document.frmMid.Text1.Value) OR intStart &lt; 1 Then
62:     Alert &quot;Start Number must be less than the string length and greater than 0&quot;
63:     Exit Sub
64:   End if
  
65:   strSource = Document.frmMid.Text1.Value
   
66:   Document.frmMid.Output.Value = Mid(strSource, intStart, intMidStrLen)
67:  End Sub
68:  Sub GetinStr_OnClick
69:   If Not IsNumeric(Document.frmInStr.StartChars.Value) Then
70:    Alert &quot;Start must be numeric&quot;
71:    Exit Sub
72:   Else
73:    intStart = CInt(Document.frmInStr.StartChars.Value) 
74:   End if
75:   If intStart &gt; Len(Document.frmInStr.Text1.Value) OR intStart &lt; 1 Then
76:     Alert &quot;Start Number must be less than the string length and greater than 0&quot;
77:     Exit Sub
78:   End if
  
79:   strSource = Document.frmInStr.Text1.Value
80:   strSearch = Document.frmInStr.Text2.Value
   
81:   Document.frmInStr.Output.Value = InStr(intStart, strSource, strSearch)
82:  End Sub
83: &lt;/SCRIPT&gt;
&lt;/HEAD&gt;
&lt;BODY BGCOLOR=&quot;white&quot;&gt;
&lt;CENTER&gt;
&lt;H2&gt;String Manipulation&lt;/H2&gt;
&lt;TABLE BORDER=1&gt;
&lt;FORM NAME=&quot;frmUprLwr&quot;&gt;
&lt;TR&gt;&lt;TD&gt;
Enter a string &amp;nbsp; &lt;INPUT TYPE=&quot;text&quot; NAME=&quot;Text1&quot;&gt;
&lt;/TD&gt;&lt;TD&gt;
&lt;INPUT TYPE=&quot;button&quot; NAME=&quot;MakeLowerCase&quot; VALUE=&quot;Lower Case&quot;&gt;
&lt;INPUT TYPE=&quot;button&quot; NAME=&quot;MakeUpperCase&quot; VALUE=&quot;Upper Case&quot;&gt;
&lt;/TD&gt;&lt;TD&gt;
&lt;INPUT TYPE=&quot;text&quot; NAME=&quot;Output&quot;&gt;
&lt;/TR&gt;
&lt;/FORM&gt;
&lt;FORM NAME=&quot;frmAscChr&quot;&gt;
&lt;TR&gt;&lt;TD&gt;
Enter a Number &amp;nbsp; &lt;INPUT TYPE=&quot;text&quot; NAME=&quot;Text1&quot; SIZE=10&gt;
&lt;/TD&gt;&lt;TD&gt;
&lt;INPUT TYPE=&quot;button&quot; NAME=&quot;MakeString&quot; VALUE=&quot;Convert to a String&quot;&gt;
&lt;/TD&gt;&lt;TD&gt;
&lt;INPUT TYPE=&quot;text&quot; NAME=&quot;Output&quot;&gt;
&lt;/TD&gt;&lt;/TR&gt;
&lt;/FORM&gt;
&lt;FORM NAME=&quot;frmChrAsc&quot;&gt;
&lt;TR&gt;&lt;TD&gt;
Enter a Character &amp;nbsp; &lt;INPUT TYPE=&quot;text&quot; NAME=&quot;Text1&quot; SIZE=10&gt;
&lt;/TD&gt;&lt;TD&gt;
&lt;INPUT TYPE=&quot;button&quot; NAME=&quot;MakeNumber&quot; VALUE=&quot;Convert to a Number&quot;&gt;
&lt;/TD&gt;&lt;TD&gt;
&lt;INPUT TYPE=&quot;text&quot; NAME=&quot;Output&quot;&gt;
&lt;/TD&gt;&lt;/TR&gt;
&lt;/FORM&gt;
&lt;FORM NAME=&quot;frmLen&quot;&gt;
&lt;TR&gt;&lt;TD&gt;
Enter a String &amp;nbsp; &lt;INPUT TYPE=&quot;text&quot; NAME=&quot;Text1&quot;&gt;
&lt;/TD&gt;&lt;TD&gt;
&lt;INPUT TYPE=&quot;button&quot; NAME=&quot;GetLength&quot; VALUE=&quot;Find String Length&quot;&gt;
&lt;/TD&gt;&lt;TD&gt;
&lt;INPUT TYPE=&quot;text&quot; NAME=&quot;Output&quot;&gt;
&lt;/TD&gt;&lt;/TR&gt;
&lt;/FORM&gt;
&lt;FORM NAME=&quot;frmLeft&quot;&gt;
&lt;TR&gt;&lt;TD&gt;
Enter a String &amp;nbsp; &lt;INPUT TYPE=&quot;text&quot; NAME=&quot;Text1&quot;&gt;
&lt;/TD&gt;&lt;TD&gt;
x&lt;INPUT TYPE=&quot;text&quot; NAME=&quot;LeftChars&quot; SIZE=10&gt;
&lt;INPUT TYPE=&quot;button&quot; NAME=&quot;GetLeft&quot; VALUE=&quot;Get Left x Chars&quot;&gt;
&lt;/TD&gt;&lt;TD&gt;
&lt;INPUT TYPE=&quot;text&quot; NAME=&quot;Output&quot;&gt;
&lt;/TD&gt;&lt;/TR&gt;
&lt;/FORM&gt;
&lt;FORM NAME=&quot;frmRight&quot;&gt;
&lt;TR&gt;&lt;TD&gt;
Enter a String &amp;nbsp; &lt;INPUT TYPE=&quot;text&quot; NAME=&quot;Text1&quot;&gt;
&lt;/TD&gt;&lt;TD&gt;
x&lt;INPUT TYPE=&quot;text&quot; NAME=&quot;RightChars&quot; SIZE=10&gt;
&lt;INPUT TYPE=&quot;button&quot; NAME=&quot;GetRight&quot; VALUE=&quot;Get Right x Chars&quot;&gt;
&lt;/TD&gt;&lt;TD&gt;
&lt;INPUT TYPE=&quot;text&quot; NAME=&quot;Output&quot;&gt;
&lt;/TD&gt;&lt;/TR&gt;
&lt;/FORM&gt;
&lt;FORM NAME=&quot;frmMid&quot;&gt;
&lt;TR&gt;&lt;TD&gt;
Enter String &amp;nbsp; &lt;INPUT TYPE=&quot;text&quot; NAME=&quot;Text1&quot;&gt;&lt;BR&gt;
Enter Mid String Length &amp;nbsp; &lt;INPUT TYPE=&quot;text&quot; NAME=&quot;Text2&quot; SIZE=6&gt;
&lt;/TD&gt;&lt;TD&gt;
Start at &amp;nbsp; &lt;INPUT TYPE=&quot;text&quot; NAME=&quot;MidChars&quot; SIZE=6&gt;
&lt;INPUT TYPE=&quot;button&quot; NAME=&quot;GetMid&quot; VALUE=&quot;Get Mid String&quot;&gt;
&lt;/TD&gt;&lt;TD&gt;
&lt;INPUT TYPE=&quot;text&quot; NAME=&quot;Output&quot;&gt;
&lt;/TD&gt;&lt;/TR&gt;
&lt;/FORM&gt;
&lt;FORM NAME=&quot;frmInStr&quot;&gt;
&lt;TR&gt;&lt;TD&gt;
Enter Source String &amp;nbsp; &lt;INPUT TYPE=&quot;text&quot; NAME=&quot;Text1&quot;&gt;&lt;BR&gt;
Enter Search String &amp;nbsp; &lt;INPUT TYPE=&quot;text&quot; NAME=&quot;Text2&quot; SIZE=10&gt;
&lt;/TD&gt;&lt;TD&gt;
Start at &amp;nbsp; &lt;INPUT TYPE=&quot;text&quot; NAME=&quot;StartChars&quot; SIZE=6&gt;
&lt;INPUT TYPE=&quot;button&quot; NAME=&quot;GetInStr&quot; VALUE=&quot;Find String&quot;&gt;
&lt;/TD&gt;&lt;TD&gt;
&lt;INPUT TYPE=&quot;text&quot; NAME=&quot;Output&quot;&gt;
&lt;/TD&gt;&lt;/TR&gt;
&lt;/FORM&gt;
&lt;/TABLE&gt;
&lt;/BODY&gt;
&lt;/HTML&gt;</FONT></PRE>
<BR>
<A NAME="E69E54"></A>
<H4 ALIGN=CENTER>
<CENTER>
<FONT SIZE=4 COLOR="#FF0000"><B>Workshop Wrap-Up</B></FONT></CENTER></H4>
<BR>
<P>In this chapter, you saw all the major string-manipulation functions at work and built a sampler page that will prove useful for experimenting with your own applications.
<BR>
<P>The following list outlines a summary of the string functions you saw in this chapter:
<BR>
<UL>
<LI>To convert a string to all uppercase characters, use UCase(&quot;String&quot;).
<BR>
<BR>
<LI>To convert a string to all lowercase characters, use LCase(&quot;String&quot;).
<BR>
<BR>
<LI>To convert from ASCII codes to strings, use Chr(x).
<BR>
<BR>
<LI>To convert from strings to ASCII codes, use Asc(&quot;String&quot;).
<BR>
<BR>
<LI>To return the leftmost x characters, use Left(&quot;String&quot;,x).
<BR>
<BR>
<LI>To return the rightmost x characters, use Right(&quot;String&quot;,x).
<BR>
<BR>
<LI>To return any part of the string, use Mid(&quot;String&quot;,Start,Length).
<BR>
<BR>
<LI>To find one string within another, use InStr(Start,&quot;Source&quot;,&quot;Search&quot;).
<BR>
<BR>
<LI>To remove leading spaces, use LTrim(&quot;String&quot;).
<BR>
<BR>
<LI>To remove trailing spaces, use RTrim(&quot;String&quot;).
<BR>
<BR>
<LI>To remove leading and trailing spaces at the same time, use Trim(&quot;String&quot;).
<BR>
<BR>
</UL>
<BR>
<A NAME="E69E55"></A>
<H4 ALIGN=CENTER>
<CENTER>
<FONT SIZE=4 COLOR="#FF0000"><B>Next Steps</B></FONT></CENTER></H4>
<BR>
<P>Now that you've seen some fairly advanced and sophisticated techniques for manipulating string values, have a look at the following chapters:
<BR>
<UL>
<LI>To learn more about using strings with arrays, see Chapter 10, &quot;Using the Power of Arrays.&quot;
<BR>
<BR>
<LI>Chapter 19, &quot;Baking Cookies with VBScript,&quot; discusses using string manipulation within a cookie file.
<BR>
<BR>
</UL>
<BR>
<A NAME="E69E56"></A>
<H4 ALIGN=CENTER>
<CENTER>
<FONT SIZE=4 COLOR="#FF0000"><B>Q&amp;A</B></FONT></CENTER></H4>
<BR>
<P><B>Q: Is there a built-in VBScript function that can be used to format strings in a certain way, like the Visual Basic Format() function?</B>
<BR>
<P><B>A:</B> Unfortunately, due to size constraints, Microsoft left the Format() function out of the first release of VBScript. However, using a combination of the techniques you have seen in this chapter, you can replicate the functionality of Format(). It is rumoured that later releases of VBScript will include a scaled-down version of Format().
<BR>
<P ALIGN=CENTER>
<A HREF="lax06.htm" TARGET="_self"><IMG SRC="blanprev.gif" WIDTH = 37 HEIGHT = 37 BORDER = 0 ALT="Previous Page"></A>
<A HREF="#I0" TARGET="_self"><IMG SRC="blantop.gif" WIDTH = 37 HEIGHT = 37 BORDER = 0 ALT="Page Top"></A>
<A HREF="httoc.htm" TARGET="_self"><IMG SRC="blantoc.gif" WIDTH = 37 HEIGHT = 37 BORDER = 0 ALT="TOC"></A>
<A HREF="lax08.htm" TARGET="_self"><IMG SRC="blannext.gif" WIDTH = 37 HEIGHT = 37 BORDER = 0 ALT="Next Page"></A>
<A HREF="http://www.mcp.com/sams/" TARGET="_self"><IMG SRC="blanhome.gif" WIDTH = 37 HEIGHT = 37 BORDER = 0 ALT="See Page"></A>
</BODY></HTML>
