<HTML>
<HEAD>
<TITLE>lax15.htm </TITLE>
<LINK REL="ToC" HREF="httoc.htm">
<LINK REL="Index" HREF="htindex.htm">
<LINK REL="Next" HREF="lax16.htm">
<LINK REL="Previous" HREF="lax14.htm"></HEAD>
<BODY BGCOLOR="#FFFFFF" TEXT="#000000" LINK="#0000FF" VLINK="#800080">
<A NAME="I0"></A><P ALIGN=CENTER>
<A HREF="lax14.htm" TARGET="_self"><IMG SRC="blanprev.gif" WIDTH = 37 HEIGHT = 37 BORDER = 0 ALT="Previous Page"></A>
<A HREF="httoc.htm" TARGET="_self"><IMG SRC="blantoc.gif" WIDTH = 37 HEIGHT = 37 BORDER = 0 ALT="TOC"></A>
<A HREF="lax16.htm" TARGET="_self"><IMG SRC="blannext.gif" WIDTH = 37 HEIGHT = 37 BORDER = 0 ALT="Next Page"></A>
<A HREF="http://www.mcp.com/sams/" TARGET="_self"><IMG SRC="blanhome.gif" WIDTH = 37 HEIGHT = 37 BORDER = 0 ALT="See Page"></A>
<HR ALIGN=CENTER>
<P>
<UL>
<UL>
<UL>
<UL>
<LI>
<A HREF="#E69E105" >The &lt;OBJECT&gt; Tag</A></UL>
<LI>
<A HREF="#E68E82" ><IMG SRC="task.gif">Including Java Applets in Your HTML Pages</A>
<UL>
<LI>
<A HREF="#E69E106" >Creating a Java Applet</A>
<LI>
<A HREF="#E69E107" >Writing the Program</A>
<LI>
<A HREF="#E69E108" >Compiling the Program</A>
<LI>
<A HREF="#E69E109" >Putting the Program on a Page</A>
<LI>
<A HREF="#E69E110" >Expanding the &lt;APPLET&gt; Tag</A></UL>
<LI>
<A HREF="#E68E83" ><IMG SRC="task.gif">Incorporating the &lt;OBJECT&gt; Tag</A>
<LI>
<A HREF="#E68E84" ><IMG SRC="task.gif">Integrating Java Applets and VBScript</A>
<UL>
<LI>
<A HREF="#E69E111" >Using the Light Applet</A>
<LI>
<A HREF="#E69E112" >Going Over the Java Code</A>
<LI>
<A HREF="#E69E113" >The turnOn() Method</A>
<LI>
<A HREF="#E69E114" >Communicating with the Applet from VBScript</A>
<LI>
<A HREF="#E69E115" >Workshop Wrap-Up</A>
<LI>
<A HREF="#E69E116" >Next Steps</A>
<LI>
<A HREF="#E69E117" >Q&amp;A</A></UL></UL></UL></UL>
<HR ALIGN=CENTER>
<A NAME="E66E30"></A>
<H1 ALIGN=CENTER>
<CENTER>
<FONT SIZE=6 COLOR="#FF0000"><B>- 15 -</B>
<BR><B>Using Java Applets with VBScript</B></FONT></CENTER></H1>
<BR>
<P>by Rogers Cadenhead
<BR>
<P>In this chapter, you
<BR>
<UL>
<LI>Create a Java applet
<BR>
<BR>
<LI>Add the applet to a Web page
<BR>
<BR>
<LI>Learn how to use the &lt;OBJECT&gt; tag
<BR>
<BR>
<LI>Call Java methods from VBScript
<BR>
<BR>
<LI>Access Java variables from VBScript
<BR>
<BR>
</UL>
<P>Tasks in this chapter:
<BR>
<UL>
<LI>Including Java applets in your HTML pages
<BR>
<BR>
<LI>Incorporating the &lt;OBJECT&gt; tag
<BR>
<BR>
<LI>Integrating Java applets and VBScript
<BR>
<BR>
</UL>
<P>Everything consists of objects. This statement is true in the physical world where things are put together by combining other things. A bicycle consists of handlebars, two spoked wheels, a frame, a chain, a seat, pedals, safety reflectors, and brakes. Oops&#151;there also should be an old baseball card tucked into the spokes.
<BR>
<P>Everything in the computer world also consists of objects, according to one way of thinking. <I>Object-oriented programming</I> is a term you might have encountered before. Also known as OOP, it is a way to organize computer software as a collection of objects. For instance, a word processing program could include a dictionary object that is used by a spell-checking object to correct errors in a document object.
<BR>
<P>A World Wide Web page can also be considered a collection of objects. Each resource on the page&#151;images, video, and programs such as ActiveX controls and Java programs&#151;is an object. One of these resource objects that can add a great deal of functionality to a Web page is a Java applet.
<BR>
<P>Applets are Java programs designed to run on the World Wide Web. Like ActiveX and VBScript, Java is an attempt to provide safe executable content on the Internet. Of the thousands of applets created to run on the Web, many are publicly available at sites such as Gamelan (http://www.gamelan.com) and Java Boutique (http://www.j-g.com/java/).
<BR>
<P>You can place Java applets on a Web page with the use of an HTML tag called &lt;APPLET&gt;, as you will discover in this chapter. Another way that will soon become available to offer Java programs is the &lt;OBJECT&gt; tag.
<BR>
<BR>
<A NAME="E69E105"></A>
<H4 ALIGN=CENTER>
<CENTER>
<FONT SIZE=4 COLOR="#FF0000"><B>The &lt;OBJECT&gt; Tag</B></FONT></CENTER></H4>
<BR>
<P>The &lt;OBJECT&gt; HTML tag places an object on a Web page. The object can be any media that someone would want to put on a page, whether it's an image, movie, program, or other offering. &lt;OBJECT&gt; was proposed by the World Wide Web Consortium, the group that establishes many standards for the Web, as a way to replace a bunch of different things&#151;the &lt;IMG&gt; tag, the &lt;APPLET&gt; tag used by Java programs, the DYNSRC attribute used by Microsoft for audio and video, and other proprietary extensions to HTML. &lt;OBJECT&gt; was also proposed to handle future forms of Web media not yet devised. If a startup company in Rancho Cucamonga concocts a way to offer scratch-and-sniff on the Web, the &lt;OBJECT&gt; tag is designed to be broad enough to handle it.
<BR>
<P>Attributes are used with the &lt;OBJECT&gt; tag to specify the following information: 
<BR>
<UL>
<LI>The object's name
<BR>
<BR>
<LI>The type of object
<BR>
<BR>
<LI>The location where it can be found (its URL)
<BR>
<BR>
<LI>Layout information such as height, width, spacing, border width, and alignment
<BR>
<BR>
<LI>An ID code to verify its identity
<BR>
<BR>
</UL>
<P>If the object has parameters to establish configurable values, you can set them with the &lt;PARAM&gt; tag.  This tag has two attributes: NAME and VALUE. The NAME attribute sets the name of the parameter, and VALUE gives that parameter a value. Using the &lt;PARAM&gt; tag is comparable to using the form in the ActiveX Control Pad to set up a property in an ActiveX control.
<BR>
<P>If you used the ActiveX Control Pad to add an ActiveX object to a Web page, an &lt;OBJECT&gt; tag was added automatically to the page. The following is an example of an ActiveX control's &lt;OBJECT&gt; tag:
<BR>
<PRE>
<FONT COLOR="#000080">&lt;OBJECT ID=&quot;CommandButton1&quot; WIDTH=96 HEIGHT=32
     CLASSID=&quot;CLSID:D7053240-CE69-11CD-A777-00DD01143C57&quot;&gt;
        &lt;PARAM NAME=&quot;Caption&quot; VALUE=&quot;Click Me&quot;&gt;
        &lt;PARAM NAME=&quot;Size&quot; VALUE=&quot;2540;846&quot;&gt;
        &lt;PARAM NAME=&quot;FontCharSet&quot; VALUE=&quot;0&quot;&gt;
        &lt;PARAM NAME=&quot;FontPitchAndFamily&quot; VALUE=&quot;2&quot;&gt;
        &lt;PARAM NAME=&quot;ParagraphAlign&quot; VALUE=&quot;3&quot;&gt;
        &lt;PARAM NAME=&quot;FontWeight&quot; VALUE=&quot;0&quot;&gt;
&lt;/OBJECT&gt;</FONT></PRE>
<P>This &lt;OBJECT&gt; tag creates an ActiveX command button control with the label Click Me. You can place Java applets on a Web page with HTML code similar to this. Although the &lt;OBJECT&gt; tag is not yet supported in Microsoft Explorer for Java applets, the &lt;APPLET&gt; tag is very similar to &lt;OBJECT&gt;.
<BR>
<P>Although you can put ActiveX controls on a Web page automatically by using the ActiveX Control Pad, you must place Java applets by hand by typing the HTML code into a Web page using a text editor. There's no facility within the ActiveX Control Pad&#151;or any other authoring tool catering to Internet Explorer 3.0's new features&#151;that enables automated placement of Java applets using the new &lt;OBJECT&gt; tag.
<BR>
<P>Don't complain. When your great-grandchildren are using their cerebral brainboards to telepathically design their home pages, you'll have something to brag about. To offer active Web content back in the 20th century, you had to tap out ASCII characters on a keyboard&#151;40 miles in the snow, uphill both ways, in a patchwork coat made from discarded soup labels.
<BR>
<P>In the next section, you'll learn how to use the &lt;APPLET&gt; tag to add an object&#151;a Java applet&#151;to a Web page. If you're an experienced Java programmer, this first task will be review material for you. 
<BR>
<BR>
<A NAME="E68E82"></A>
<H3 ALIGN=CENTER>
<CENTER>
<FONT SIZE=5 COLOR="#FF0000"><B><IMG SRC="task.gif">Including Java Applets in Your HTML Pages</B></FONT></CENTER></H3>
<BR>
<P>Java is a programming language developed by Sun Microsystems that was first released to the public in late 1994. It has several selling points that have made it a popular choice for software development in the past few years, especially for software that has Internet-oriented capabilities.
<BR>
<P>The language is object-oriented, a programming strategy that was developed to make it easier to reuse elements of a program in other programs. It also was devised to make software more reliable and easier to debug.
<BR>
<P><A NAME="I2"></A>Another aspect of Java's design is that it enables programs to be platform independent. Like a World Wide Web page, the ideal circumstance for a Java program is that it be usable on any computer platform without a single modification.
<BR>
<P>The biggest attention-getter for Java is that you can run it on the World Wide Web. Java programs called <I>applets</I>, which are typically smaller than other types of programs, are offered on Web pages just like text, images, ActiveX controls, and other things.
<BR>
<P>A Java applet is created with any text editor and compiled into a pre-executable form called <I>bytecode</I>. You cannot run a bytecode program in the manner of other executable programs (such as .EXE and .COM files, two extensions that are familiar to DOS users). You must load the bytecode into a Java interpreter that runs it.
<BR>
<P>The reason for this two-step process is the platform-independence advantage mentioned previously. The compiled Java bytecode is not machine-specific. It needs to remain non-specific so that it can run without change on all platforms. Each Java-capable platform&#151;such as Windows 95, Apple Macintosh, and SPARC Solaris systems at present&#151;has its own Java interpreter that can run bytecode programs.
<BR>
<P>Java bytecode files have the .CLASS extension. A Java applet consists of a main class file and any other class files that are not part of the standard Java class library. To put a Java applet on a Web page, you put the applet's class files on the Web with .HTML files.
<BR>
<P>The original way to offer an applet on a Web page was to use the &lt;APPLET&gt; HTML tag. When this tag is encountered by a Java-capable Web browser such as Netscape Navigator 2.02 for Windows 95 or Internet Explorer 3.0, the browser loads the applet's class files and executes the program as part of the page. If you managed to use the World Wide Web without seeing a Java applet at this point, you've accomplished something, because the Web today has hundreds of Java applets. A recent check of the AltaVista search engine found more than 4,200 pages that include a byte or two of Java. 
<BR>
<BR>
<A NAME="E69E106"></A>
<H4 ALIGN=CENTER>
<CENTER>
<FONT SIZE=4 COLOR="#FF0000"><B>Creating a Java Applet</B></FONT></CENTER></H4>
<BR>
<P>Sun Microsystems makes Java programming tools freely available on the World Wide Web. It offers the Java Developer's Kit (JDK)&#151;a set of command-line tools to compile, debug, and run Java programs&#151;on the Web at the following URL:
<BR>
<BR>
<PRE>
<FONT COLOR="#000080"><A HREF="http://java.sun.com/java.sun.com/products/JDK/index.html">http://java.sun.com/java.sun.com/products/JDK/index.html</A></FONT></PRE>
<P>If you do not already have the JDK, you don't need to download and install it right now. It is more important to focus on how to incorporate existing Java applets into Web pages. The class file of a sample applet, Mercutio.class, is located on this book's CD-ROM in the /SOURCE/CHAP15 subdirectory. You can use Mercutio.class for this task.
<BR>
<P>In case you want to develop the Java applet or see what a simple applet looks like, the steps are covered here.
<BR>
<BR>
<A NAME="E69E107"></A>
<H4 ALIGN=CENTER>
<CENTER>
<FONT SIZE=4 COLOR="#FF0000"><B>Writing the Program</B></FONT></CENTER></H4>
<BR>
<P>Using any text editor, enter the text of Listing 15.1. The blank lines and indentation used in this listing are not important; the Java compiler ignores them. However, you should include them anyway because they make the program much easier for all non-computers to understand.
<BR>
<P>When you're done, save the file as Mercutio.java. If you're using a word processor that saves in a special format, such as Microsoft Word, make sure to save it as a plain ASCII or text file. The line numbers in the listings are included for reference in this chapter; they are not part of the Java source code and should not be typed in. 
<BR>
<P>
<FONT COLOR="#000080"><B>Listing 15.1. The complete listing of the Java source code file Mercutio.java.</B></FONT>
<BR>
<PRE>
<FONT COLOR="#000080"> 1: import java.awt.*;
 2: 
 3: public class Mercutio extends java.applet.Applet {
 4:     Button b = new Button(&quot;Speak!&quot;);
 5:     TextField t = new TextField(45);
 6:     int phrase = 0;
 7: 
 8:     public void init() {
 9:         String bt = getParameter(&quot;ButtonTitle&quot;);
10:         if (bt != null)
11:               b.setLabel(bt);
12:         add;
13:         add(t);
14:     }
15:
16:     public boolean action(Event evt, Object obj) {
17:         if (++phrase &gt; 5) phrase = 0;
18:         switch (phrase) {
19:             case 0:
20:                 t.setText(&quot;If love be rough with you, be rough with love.&quot;);
21:                 break;
22:             case 1:
23:                 t.setText(&quot;Dost thou make us minstrels?&quot;);
24:                 break;
25:             case 2:
26:                 t.setText(&quot;Speak but one rhyme, and I am satisfied.&quot;);
27:                 break;
28:             case 3:
29:                 t.setText(&quot;Any man that can write may answer a letter.&quot;);
30:                 break;
31:             case 4:
32:                 t.setText(&quot;Go, villain, fetch a surgeon.&quot;);
33:                 break;
34:             default:
35:                 t.setText(&quot;They have made worms' meat of me.&quot;);
36:         }
37:         repaint();
38:         return false;
39:     }
40: }</FONT></PRE>
<P>Before you test the applet you just created, I want to explain the main parts of the Java program. The applet displays a phrase spoken by Mercutio, one of Romeo's more quotable friends in <I>Romeo and Juliet</I>. Two user-interface elements&#151;a Speak! button and an empty text field&#151;are created in lines 4 and 5. Lines 12 and 13 place these elements on the applet window. 
<BR>
<P>Java programs are organized into sections called <I>methods</I>, which are analogous to subroutines or functions in other languages. Lines 16 through 39 contain the action() method, which executes every time a user clicks the button.
<BR>
<P>The phrase variable, created and initialized in line 6, keeps track of which Mercutio quote to display. Line 17 increments the value of phrase by 1, and if it is greater than 5, phrase is reset to 0.
<BR>
<P>Lines 18 through 36 use a big switch...case statement to display the right Mercutio phrase, and line 37 causes the applet window to be redrawn so that the new quote displays in the text field.
<BR>
<P>Now that you know what the Mercutio applet does, it's time to test it. 
<BR>
<BR>
<A NAME="E69E108"></A>
<H4 ALIGN=CENTER>
<CENTER>
<FONT SIZE=4 COLOR="#FF0000"><B>Compiling the Program</B></FONT></CENTER></H4>
<BR>
<P>If you entered the source code of Mercutio.java, you need to compile it into a bytecode file. You can do this using the Java Developer's Kit compiler by entering the following line at a command prompt:
<BR>
<BR>
<PRE>
<FONT COLOR="#000080">javac Mercutio.java</FONT></PRE>
<P>Compile the program using the JDK compiler or any other Java development tool that can create bytecode files. A bytecode file called Mercutio.class is created.
<BR>
<P>Those of you who are following along without writing the program should find Mercutio.class on the book's CD-ROM if you haven't already. Put a copy of this file somewhere on your system's hard disk.
<BR>
<P>The Mercutio applet's class file is ready to be placed on a Web page. To do this, create a simple .HTML file and put the applet on it with a special HTML tag, &lt;APPLET&gt;.
<BR>
<BR>
<A NAME="E69E109"></A>
<H4 ALIGN=CENTER>
<CENTER>
<FONT SIZE=4 COLOR="#FF0000"><B>Putting the Program on a Page</B></FONT></CENTER></H4>
<BR>
<P>Using any text editor, enter Listing 15.2 and save the file as Mercutio.html (or Mercutio.htm if your platform does not support four-character file extensions such as .HTML). This HTML file should be placed in the same directory as the file Mercutio.class.
<BR>
<P>
<FONT COLOR="#000080"><B>Listing 15.2. The full HTML source code of Mercutio.html. </B></FONT>
<BR>
<PRE>
<FONT COLOR="#000080">1: &lt;html&gt;
2: &lt;body&gt;
3: &lt;applet code=&quot;Mercutio.class&quot; height=150 width=400&gt;
4: &lt;/applet&gt;
5: &lt;/body&gt;
6: &lt;/html&gt;</FONT></PRE>
<P>Now that you have a compiled applet and an HTML page to put it on, you can use any Web-capable browser to try it out. Load the file Mercutio.html into Internet Explorer 3.0, most versions of Netscape Navigator 2.0 or higher, or the AppletViewer tool that comes with the JDK.
<BR>
<P>Figure 15.1 shows the output of the Mercutio applet using Internet Explorer 3.0.
<BR>
<P><B><A HREF="15lax01.gif">Figure 15.1. The output of the Mercutio applet on a Web page.</B></A>
<BR>
<P>In its simplest form, an APPLET tag contains the following elements:
<BR>
<UL>
<LI>The opening &lt;APPLET&gt; tag and closing &lt;/APPLET&gt; tag.
<BR>
<BR>
<LI>The CODE attribute, which identifies the name of the applet class file to load: Mercutio.class.
<BR>
<BR>
<LI>The HEIGHT and WIDTH attributes, which define the size of the applet.
<BR>
<BR>
</UL>
<P>In the next section, you'll create a more complicated &lt;APPLET&gt; tag for the Mercutio applet in order to see what else you can set up. 
<BR>
<BR>
<A NAME="E69E110"></A>
<H4 ALIGN=CENTER>
<CENTER>
<FONT SIZE=4 COLOR="#FF0000"><B>Expanding the &lt;APPLET&gt; Tag</B></FONT></CENTER></H4>
<BR>
<P>Return to the directory on your system that contains the files Mercutio.class and Mercutio.html. From that same directory, create a subdirectory called java, and move the file Mercutio.class into the new subdirectory.
<BR>
<P>If you examine the Web page Mercutio.html at this point, you get an error message stating that the Mercutio class file could not be found. The browser (or AppletViewer) expects to find the applet's class file in the same directory as the .HTML file that contains the applet.
<BR>
<P>You need to add a new attribute, CODEBASE,  to Mercutio's &lt;APPLET&gt; tag. CODEBASE identifies the directory that contains the applet's class file. Load the file Mercutio.html into a text editor, and change it so that the &lt;APPLET&gt; tag appears as the following:
<BR>
<BR>
<PRE>
<FONT COLOR="#000080">&lt;applet code=&quot;Mercutio.class&quot; codebase=&quot;java&quot; height=150 width=400&gt;</FONT></PRE>
<P>After making this change, you can run the Mercutio applet correctly because the browser knows to look in the java subdirectory. The CODEBASE attribute does not have to be a relative path to a subdirectory. It could also be a URL reference, such as http://www.mcp.com/sams.
<BR>
<P>Before saving Mercutio.html, add the following lines under the APPLET line you just modified:
<BR>
<PRE>
<FONT COLOR="#000080">&lt;param name=&quot;ButtonTitle&quot; value=&quot;Next!&quot;&gt;
This applet requires a Java-enabled browser.</FONT></PRE>
<P>When you're done, Mercutio.html should look like the code in Listing 15.3.
<BR>
<P>
<FONT COLOR="#000080"><B>Listing 15.3. The modified HTML source code of Mercutio.html.</B></FONT>
<BR>
<PRE>
<FONT COLOR="#000080">1: &lt;html&gt;
2: &lt;body&gt;
3: &lt;applet code=&quot;Mercutio.class&quot; codebase=&quot;java&quot; height=150 width=400&gt;
4: &lt;param name=&quot;ButtonTitle&quot; value=&quot;Next!&quot;&gt;
5: This applet requires a Java-enabled browser.
6: &lt;/applet&gt;
7: &lt;/body&gt;
8: &lt;/html&gt;</FONT></PRE>
<P>After saving your changes, load the Web page into a browser or AppletViewer. You see that the button now has the label Next instead of Speak!. The PARAM tag sends parameters to a Java applet. The NAME attribute gives the parameter a name, and the VALUE attribute sets the value for that parameter. You can use as many PARAM tags as you need; if you can configure a Java applet with 413 different parameters, you can use 413 different PARAM tags.
<BR>
<P>You must place all PARAM tags between the opening &lt;APPLET&gt; tag and the closing &lt;/APPLET&gt; tag.
<BR>
<P>The parameters are sent to a Java applet, but the applet program must do something with them or they are ignored. In the source code of Mercutio.java, the following are lines 9 through 11:
<BR>
<PRE>
<FONT COLOR="#000080">String bt = getParameter(&quot;ButtonTitle&quot;);
        if (bt != null)
              b.setLabel(bt);</FONT></PRE>
<P>These statements retrieve the ButtonTitle parameter, if one was provided by the Web page, and use it to set the label of the button. If this parameter is not provided, the variable bt has the value null, and the default text is used for the button's label: Speak! 
<BR>
<P>The other change you made to Mercutio.html was adding line 5, which states that a Java-enabled browser is required. This text is located between the opening and closing &lt;APPLET&gt; tags, and it displays only on Web browsers that are not Java capable. You can replace it with any text or HTML tags that you want to provide as an alternative. For example, a Java applet that displays an animated company logo could provide a non-animated logo for the Java impaired, as in the following:
<BR>
<PRE>
<FONT COLOR="#000080">&lt;applet code=&quot;ExplodingTortugaMintsLogo.class&quot; height=200 width=300&gt;
&lt;param name=&quot;BackGroundColor&quot; value=&quot;#00FF00&quot;&gt;
&lt;img src=&quot;TortugaMintsLogo.gif&quot; height=200 width=300 alt=&quot;Tortuga Mints&quot;&gt;
&lt;/applet&gt;</FONT></PRE>
<P>The GIF image file TortugaMintsLogo.gif displays only on browsers that do not handle Java applets.
<BR>
<P>Microsoft Internet Explorer, and perhaps other browsers by the time you read this, plan to offer the functionality of the &lt;APPLET&gt; tag with a new &lt;OBJECT&gt; tag. As you learn about the use of &lt;OBJECT&gt; in the next section, you will recognize a lot of familiar elements.
<BR>
<BR>
<A NAME="E68E83"></A>
<H3 ALIGN=CENTER>
<CENTER>
<FONT SIZE=5 COLOR="#FF0000"><B><IMG SRC="task.gif">Incorporating the &lt;OBJECT&gt; Tag</B></FONT></CENTER></H3>
<BR>
<P>Now that you understand how to add a Java applet to a Web page with the &lt;APPLET&gt; tag, it's time to see how the new &lt;OBJECT&gt; tag accomplishes the same thing.
<BR>
<BLOCKQUOTE>
<BLOCKQUOTE>
<HR ALIGN=CENTER>
<BR>
<NOTE>Microsoft Internet Explorer 3.0 documentation includes discussion of how Java applets are implemented with the &lt;OBJECT&gt; tag, but the use of the &lt;OBJECT&gt; tag is not fully implemented at the time of this writing. The description here is based on Microsoft's announced plans and the documentation from the World Wide Web Consortium about the tag.</NOTE>
<BR>
<HR ALIGN=CENTER>
</BLOCKQUOTE></BLOCKQUOTE>
<P>Even after the &lt;OBJECT&gt; tag is fully implemented for Java use, the &lt;APPLET&gt; tag will be supported to maintain compatibility with existing Web pages. You can continue to use &lt;APPLET&gt;, a tag that is supported by most current versions of Netscape Navigator and Internet Explorer 3.0. However, if you're using this book to integrate ActiveX and VBScript into your Web sites, the &lt;OBJECT&gt; tag should be part of your strategy as well.
<BR>
<P>At present, the only browser that supports the &lt;OBJECT&gt; tag in any form is Internet Explorer 3.0. However, because representatives from Netscape and Spyglass participated in the efforts to create this HTML extension, it is expected for their browsers to offer it at some point.
<BR>
<P>The following is an example of an &lt;OBJECT&gt; tag in use to place an ActiveX Forms 2.0 command button: 
<BR>
<PRE>
<FONT COLOR="#000080">&lt;OBJECT ID=&quot;CommandButton1&quot; WIDTH=96 HEIGHT=32 CLASSID=&quot;CLSID:D7053240-CE69-11CD-A777-00DD01143C57&quot;&gt;
    &lt;PARAM NAME=&quot;Size&quot; VALUE=&quot;2540;846&quot;&gt;
    &lt;PARAM NAME=&quot;FontCharSet&quot; VALUE=&quot;0&quot;&gt;
    &lt;PARAM NAME=&quot;FontPitchAndFamily&quot; VALUE=&quot;2&quot;&gt;
    &lt;PARAM NAME=&quot;ParagraphAlign&quot; VALUE=&quot;3&quot;&gt;
    &lt;PARAM NAME=&quot;FontWeight&quot; VALUE=&quot;0&quot;&gt;
&lt;/OBJECT&gt;</FONT></PRE>
<P>This HTML code is <A NAME="I3"></A>created automatically by using the Insert ActiveX Control command in the ActiveX Control Pad. Some aspects of this code should be familiar to you. The WIDTH and HEIGHT attributes set the size of the control, and the &lt;PARAM&gt; tag is used in the same way it was used for Java applets in the last section. The NAME attribute gives the parameter a name, such as Size, and the VALUE attribute gives the named parameter a value, such as 2540;846. 
<BR>
<P>The ID attribute of the &lt;OBJECT&gt; tag gives the object a name. The name is needed so that VBScript or other scripting languages can communicate with the object, as you'll see later in this chapter.
<BR>
<P>The last new aspect of the &lt;OBJECT&gt; tag from the preceding example is the CLASSID attribute.  The first part, preceding the colon, indicates what the object is. In this case, CLSID represents an ActiveX control. The part after the colon is used to identify the object.
<BR>
<P>Based on the World Wide Web Consortium's proposal for the &lt;OBJECT&gt; tag, the following is an example of how you could declare a Java applet:
<BR>
<PRE>
<FONT COLOR="#000080">&lt;object
  id=&quot;jvaMercutio&quot;
  codebase=&quot;java\&quot;
  codetype=&quot;application/java-vm&quot;
  classid=&quot;java:Mercutio&quot;
  width=400
  height=150&gt;
&lt;param name=&quot;ButtonTitle&quot; value=&quot;Next!&quot;&gt;
&lt;/object&gt;</FONT></PRE>
<P>Because the support for &lt;OBJECT&gt; remains incomplete in Internet Explorer and unsupported in any form elsewhere, you need to use the &lt;APPLET&gt; tag for now to add Java programs to a Web page. 
<BR>
<BR>
<A NAME="E68E84"></A>
<H3 ALIGN=CENTER>
<CENTER>
<FONT SIZE=5 COLOR="#FF0000"><B><IMG SRC="task.gif">Integrating Java Applets and VBScript</B></FONT></CENTER></H3>
<BR>
<P>In almost all cases, a Java applet is an island unto itself. It runs in the space allotted to it by a Web browser, and it cannot communicate with other programs or the Web page that called it. The other elements of the Web page also cannot communicate with the applet after it is loaded.
<BR>
<P>VBScript provides a way to make a Java applet a more communicative part of a Web page. VBScript programs have access to any public methods or public variables inside the Java program and can use them to change the performance of the applet.
<BR>
<P>One example of how you can use this is to change a Java applet's parameters as the applet is running.  You use the &lt;PARAM&gt; tag with applets to establish settings that affect how a Java applet operates, but you use this tag only to establish an initial setting. After the applet begins running, the &lt;PARAM&gt; tag's work is done.
<BR>
<P>Take a look at the following HTML code to load an applet:
<BR>
<PRE>
<FONT COLOR="#000080">&lt;applet code=&quot;DancingHeadline.class&quot; width=400 height=125&gt;
&lt;param name=&quot;Headline&quot; value=&quot;Disco lives forever!&quot;&gt;
&lt;param name=&quot;Blinking&quot; value=&quot;Yes&quot;&gt;
&lt;/applet&gt;</FONT></PRE>
<P>This use of the &lt;APPLET&gt; and &lt;PARAM&gt; tags loads a Java applet called DancingHeadline.class and sends it a headline parameter with the value Disco lives forever!. Another parameter, called blinking, is set to the value Yes.
<BR>
<P>The blinking parameter controls whether or not the headline blinks on and off, a feature in the tradition of the often-loathed HTML &lt;BLINK&gt; tag. The following is the Java statement that loads the blinking parameter into its own variable:
<BR>
<BR>
<PRE>
<FONT COLOR="#000080">String blinkStatus = getParameter(&quot;blinking&quot;);</FONT></PRE>
<P>If the blinkStatus variable was declared as a public variable, you can change it using VBScript.
<BR>
<P>To see how this is done, you will create an HTML page that uses VBScript to communicate with a Java applet. 
<BR>
<BR>
<A NAME="E69E111"></A>
<H4 ALIGN=CENTER>
<CENTER>
<FONT SIZE=4 COLOR="#FF0000"><B>Using the Light Applet</B></FONT></CENTER></H4>
<BR>
<P>The VBScript and Java demonstration you will create is a Java traffic-light animation that changes in response to the click of intrinsic HTML &lt;INPUT&gt; buttons. 
<BR>
<P>The compiled class file for this applet, Light.class, is on this book's CD-ROM in the /SOURCE/CHAP15 subdirectory. However, Listing 15.4 provides the full source code for Light.java to show how the applet was designed. 
<BR>
<P>You can use this source code to create and compile the applet, or if you prefer, you can rely on the copy of Light.class from the CD-ROM. 
<BR>
<P>
<FONT COLOR="#000080"><B>Listing 15.4. The full source code of Light.java.</B></FONT>
<BR>
<PRE>
<FONT COLOR="#000080"> 1: import java.awt.*;
 2: 
 3: public class Light extends java.applet.Applet {
 4: 
 5:     Image light;
 6:     boolean red = false;
 7:     boolean yellow = false;
 8:     boolean green = false;
 9: 
10:     public void init() {
11:         light = getImage(getCodeBase(), &quot;traffic.gif&quot;);
12:     }
13: 
14:     public void paint(Graphics g) {
15:         g.drawImage(light, 10, 10, this);
16:         if (red) {
17:             g.setColor(Color.red);
18:             g.fillOval(35,13,80,80);
19:         }
20:         if (yellow) {
21:             g.setColor(Color.yellow);
22:             g.fillOval(35,110,82,82);
23:         }
24:         if (green) {
25:             g.setColor(Color.green);
26:             g.fillOval(33,211,87,87);
27:         }
28:     }
29: 
30:     public void turnOn(String color) {
31:         red = false;
32:         yellow = false;
33:         green = false;
34:         if (color.equals(&quot;red&quot;)) red = true;
35:         if (color.equals(&quot;yellow&quot;)) yellow = true;
36:         if (color.equals(&quot;green&quot;)) green = true;  
37:         repaint();      
38:     } 
39: }</FONT></PRE>
<BR>
<A NAME="E69E112"></A>
<H4 ALIGN=CENTER>
<CENTER>
<FONT SIZE=4 COLOR="#FF0000"><B>Going Over the Java Code</B></FONT></CENTER></H4>
<BR>
<P>The following things are happening in this applet: 
<BR>
<UL>
<LI>Lines 5 through 8 declare four variables that are used in this applet. One variable, image, stores a graphics file that is loaded elsewhere. The other three variables&#151;red, yellow, and green&#151;hold boolean values. They are equal to true if their specific lights are lit, or false otherwise. All three begin with a value of false, so none of the lights are lit.
<BR>
<BR>
<LI>Line 11 loads the image file traffic.gif into the variable light. It is part of the init() method, which runs automatically when the applet is first loaded.
<BR>
<BR>
<LI>Lines 14 through 28 are the paint() method. This is called any time the applet window needs to be repainted.
<BR>
<BR>
<LI>Line 15 displays the image stored in light on the applet window.
<BR>
<BR>
<LI>Lines 16 through 18 check to see whether the red variable has the boolean value of true. If it does, a red oval is drawn at the x,y position of (35,13) with a width of 80 and a height of 80.
<BR>
<BR>
<LI>Lines 20 through 22 draw a yellow oval if the yellow variable equals true.
<BR>
<BR>
<LI>Lines 24 through 26 draw a green oval if the green variable equals true.
<BR>
<BR>
<LI>Lines 30 through 37 are the turnOn() method of the applet, which turns on a light based on the color parameter sent to the method. If color is equal to red, the value of the red boolean variable is set to true.
<BR>
<BR>
<LI>Line 37 tells the applet that it needs to be repainted, and the paint() method is called. 
<BR>
<BR>
</UL>
<BR>
<A NAME="E69E113"></A>
<H4 ALIGN=CENTER>
<CENTER>
<FONT SIZE=4 COLOR="#FF0000"><B>The turnOn() Method</B></FONT></CENTER></H4>
<BR>
<P>To understand how VBScript can interact with Java, you need to concentrate on the turnOn() method of the Light applet. You could call this method inside the Java applet with the following statement:
<BR>
<BR>
<PRE>
<FONT COLOR="#000080">turnOn(&quot;yellow&quot;);</FONT></PRE>
<P>This statement results in the yellow boolean variable being set to true. Nothing is displayed right away because the paint() method handles all screen updating. However, when repaint() is called in line 37, the paint() method displays the traffic light with the yellow light illuminated. 
<BR>
<P>This isn't the only way to change the light on display. The turnOn() method has a public declaration in front of it, and VBScript can call it. 
<BR>
<BR>
<A NAME="E69E114"></A>
<H4 ALIGN=CENTER>
<CENTER>
<FONT SIZE=4 COLOR="#FF0000"><B>Communicating with the Applet from VBScript</B></FONT></CENTER></H4>
<BR>
<P>Create a new HTML page that will contain the Java applet and some other elements.  Using any text editor, open a file and enter the text of Listing 15.5. Save the file as traffic.html. Make sure that the files Light.class and traffic.gif are in the same directory as traffic.html. 
<BR>
<P>
<FONT COLOR="#000080"><B>Listing 15.5. The full HTML source code of traffic.html.</B></FONT>
<BR>
<PRE>
<FONT COLOR="#000080"> 1: &lt;html&gt;
 2: &lt;head&gt;
 3: &lt;title&gt;Traffic Light demo&lt;/title&gt;
 4: &lt;SCRIPT language = &quot;VBScript&quot;&gt;
 5: &lt;!--
 6: Sub RedButton_OnClick
 7:     document.jvaLight.turnOn(&quot;red&quot;)
 8: End Sub
 9: 
10: Sub YellowButton_OnClick
11:     document.jvaLight.turnOn(&quot;yellow&quot;)
12: End Sub
13: 
14: Sub GreenButton_OnClick
15:     document.jvaLight.turnOn(&quot;green&quot;)
16: End Sub
17: 
18: --&gt;
19: &lt;/SCRIPT&gt;
20: &lt;/head&gt;
21: &lt;body&gt;
22: &lt;center&gt;
23: &lt;applet code=&quot;Light.class&quot; id=&quot;jvaLight&quot; height=325 width=148 align=&quot;left&quot;&gt;
24: &lt;/applet&gt;
25: &lt;table cellpadding=30 border=0 align=&quot;left&quot;&gt;
26: &lt;tr&gt;
27: &lt;td&gt;
28: &lt;input type=button value=&quot;Red&quot; name=&quot;RedButton&quot;&gt;
29: &lt;/td&gt;
30: &lt;tr&gt;
31: &lt;td&gt;
32: &lt;input type=button value=&quot;Yellow&quot; name=&quot;YellowButton&quot;&gt;
33: &lt;/td&gt;
34: &lt;/tr&gt;
35: &lt;tr&gt;
36: &lt;td&gt;
37: &lt;input type=button value=&quot;Green&quot; name=&quot;GreenButton&quot;&gt;
38: &lt;/td&gt;
39: &lt;/tr&gt;
40: &lt;/table&gt;
41: &lt;/center&gt;
42: &lt;/body&gt;
43: &lt;/html&gt;</FONT></PRE>
<P>Most of the syntax of this HTML file should be familiar to you. The &lt;TABLE&gt; tags arrange the Web page; you do not need them for any other reason in this example. 
<BR>
<P>Lines 28, 32, and 37 place three intrinsic HTML form buttons on the page and give them the names RedButton, YellowButton, and GreenButton.
<BR>
<P>Lines 23 and 24 place the applet Light.class on the page. The new attribute to the &lt;APPLET&gt; tag is id=&quot;jvaLight&quot;. This attribute gives the Java applet a name that a VBScript command can use to communicate with the applet.
<BR>
<P>A short VBScript program in lines 4 through 12 consists of three OnClick subroutines: RedButton_OnClick, YellowButton_OnClick, and GreenButton_OnClick. Each of these subroutines calls the turnOn() method of the Java applet.  The following is an example:
<BR>
<BR>
<PRE>
<FONT COLOR="#000080">document.jvaLight.turnOn(&quot;red&quot;)</FONT></PRE>
<P>document.jvaLight identifies the object that VBScript is communicating with&#151;the Java applet with the ID value of jvaLight. The last part of the statement, turnOn(&quot;red&quot;), is a call to the turnOn() method inside the applet.
<BR>
<P>When you load the Web page traffic.html into a browser, it should resemble the one in Figure 15.2.
<BR>
<P><B><A HREF="15lax02.gif">Figure 15.2. The output of the traffic-light demonstration page.</A></B>
<BR>
<P>The traffic-light demonstration shows how VBScript can access a Java applet's public methods.  It is also possible to set any public variables of an applet. The following statement shows a VBScript subroutine that sets a Java variable: 
<BR>
<PRE>
<FONT COLOR="#000080">Sub SpeedUpButton_OnClick
    document.jvaRace.speed = document.jvaRace.speed + 1
End Sub </FONT></PRE>
<P>This example refers to a speed variable in a Java applet with an ID of jvaRace. speed is increased by 1 whenever the SpeedUpButton object's OnClick subroutine is called.
<BR>
<P>Using public variables from outside a Java applet can wreak havoc on the program if it has not been designed to handle the changes. As a part of object-oriented programming, the style embodied by the Java language, the use of a public variable means that it should be modifiable at any time by external objects&#151;other Java programs, VBScript, and the like. If a variable cannot be changed without causing unexpected side effects or errors, it should not be declared public. 
<BR>
<BR>
<A NAME="E69E115"></A>
<H4 ALIGN=CENTER>
<CENTER>
<FONT SIZE=4 COLOR="#FF0000"><B>Workshop Wrap-Up</B></FONT></CENTER></H4>
<BR>
<P>By working through the parts of this chapter, you have seen Java in action on a Web page, and you've seen how VBScript can be used to make it more responsive to other parts of a page.
<BR>
<P>You have also learned the present and future HTML tags that will be used for Java applets in Internet Explorer&#151;APPLET and OBJECT. Java can be offered in conjunction with ActiveX and VBScript as a way to offer a more compelling and interactive experience on a Web site.
<BR>
<BR>
<A NAME="E69E116"></A>
<H4 ALIGN=CENTER>
<CENTER>
<FONT SIZE=4 COLOR="#FF0000"><B>Next Steps</B></FONT></CENTER></H4>
<BR>
<P>Now that you have learned about Java and VBScript, the following chapters are good places to continue:
<BR>
<UL>
<LI>To learn more about using intrinsic HTML controls such as buttons with VBScript, see Chapter 2, &quot;Using VBScript with HTML Controls.&quot;
<BR>
<BR>
<LI>Chapter 6, &quot;Checking Form Data,&quot; contains more details about building OnClick procedures in VBScript.
<BR>
<BR>
<LI>For more information about using the ActiveX Control Pad, see Chapter 13, &quot;Getting to Know the ActiveX Control Pad.&quot;
<BR>
<BR>
</UL>
<BR>
<A NAME="E69E117"></A>
<H4 ALIGN=CENTER>
<CENTER>
<FONT SIZE=4 COLOR="#FF0000"><B>Q&amp;A</B></FONT></CENTER></H4>
<BR>
<P><B>Q: The &lt;OBJECT&gt; tag has been described as a proposal. Is there a way to track its progress toward official approval?</B>
<BR>
<P><B>A:</B> The World Wide Web Consortium maintains a Web site at <A HREF="http://www.w3.org">http://www.w3.org</A>. The current page for the &lt;OBJECT&gt; proposal, which is titled &quot;Inserting Objects into HTML,&quot; is at the following URL:
<BR>
<P><A HREF="http://www.w3.org/pub/WWW/TR/WD-object">http://www.w3.org/pub/WWW/TR/WD-object</A>
<BR>
<P>Note, however, that the leading developers of Web browsers, Netscape and Microsoft, adopt most new HTML tags at their own initiative before the World Wide Web Consortium agrees on a standard.
<BR>
<BR>
<P><B>Q: I noticed that ActiveX objects have a long numeric string in their CLASSID attribute such as CLSID:D7053240-CE69-11CD-A777-00DD01143C57. Java applets do not have this in the CLASSID. Why is the &lt;OBJECT&gt; tag implemented differently between ActiveX and Java in regard to CLASSID?</B>
<BR>
<P><B>A:</B> The difference comes about because of the way ActiveX and Java implement security. As methods to execute programs over the Web, both ActiveX and Java must provide a reliable way to prevent malicious or unintentionally damaging code from being run. Otherwise, viruses, Trojan horses, and other nasty things could occur on a user's computer when these Web-based programs run.
<BR>
<P>Java's security model relies on a secure language that does not allow programmers to write malicious code. Applets are restricted in the kinds of things they can do&#151;no reading or writing files on the user's computer, no network connections to other Internet sites, and so on.
<BR>
<P>The ActiveX security model, on the other hand, generally relies on establishing a way to authenticate that a program comes from a trusted source. A user must approve an ActiveX control before downloading it, and a security certificate is presented to give users the ability to double-check the identity of the ActiveX program.
<BR>
<P>The different approach to the CLASSID attribute comes about because ActiveX uses that long alphanumeric string as part of its way to identify a control. Java does not implement that kind of security check, so a CLASSID such as java:com.spiderbyte.Light is all that is needed. 
<BR>
<P><B>Q: My Java applet uses a second class file as part of its function. How can I access the public variables and methods of this second class file if there's no way to name it with an ID attribute?</B>
<BR>
<P><B>A:</B> Only classes that derive from Java.applet.Applet can be called or accessed from VBScript. If you want to call a method in another class, you have to create a method in your applet that calls the other class's method. 
<BR>
<P>To reach the public variables in the other class, you have to create a method in the applet class. Think of the applet's class file as the gateway between VBScript and the other class files that compose your Java program.
<P ALIGN=CENTER>
<A HREF="lax14.htm" TARGET="_self"><IMG SRC="blanprev.gif" WIDTH = 37 HEIGHT = 37 BORDER = 0 ALT="Previous Page"></A>
<A HREF="#I0" TARGET="_self"><IMG SRC="blantop.gif" WIDTH = 37 HEIGHT = 37 BORDER = 0 ALT="Page Top"></A>
<A HREF="httoc.htm" TARGET="_self"><IMG SRC="blantoc.gif" WIDTH = 37 HEIGHT = 37 BORDER = 0 ALT="TOC"></A>
<A HREF="lax16.htm" TARGET="_self"><IMG SRC="blannext.gif" WIDTH = 37 HEIGHT = 37 BORDER = 0 ALT="Next Page"></A>
<A HREF="http://www.mcp.com/sams/" TARGET="_self"><IMG SRC="blanhome.gif" WIDTH = 37 HEIGHT = 37 BORDER = 0 ALT="See Page"></A>
</BODY></HTML>
