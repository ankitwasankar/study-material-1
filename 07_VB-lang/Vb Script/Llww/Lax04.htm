<HTML>
<HEAD>
<TITLE>lax04.htm </TITLE>
<LINK REL="ToC" HREF="httoc.htm">
<LINK REL="Index" HREF="htindex.htm">
<LINK REL="Next" HREF="lax05.htm">
<LINK REL="Previous" HREF="lax03.htm"></HEAD>
<BODY BGCOLOR="#FFFFFF" TEXT="#000000" LINK="#0000FF" VLINK="#800080">
<A NAME="I0"></A><P ALIGN=CENTER>
<A HREF="lax03.htm" TARGET="_self"><IMG SRC="blanprev.gif" WIDTH = 37 HEIGHT = 37 BORDER = 0 ALT="Previous Page"></A>
<A HREF="httoc.htm" TARGET="_self"><IMG SRC="blantoc.gif" WIDTH = 37 HEIGHT = 37 BORDER = 0 ALT="TOC"></A>
<A HREF="lax05.htm" TARGET="_self"><IMG SRC="blannext.gif" WIDTH = 37 HEIGHT = 37 BORDER = 0 ALT="Next Page"></A>
<A HREF="http://www.mcp.com/sams/" TARGET="_self"><IMG SRC="blanhome.gif" WIDTH = 37 HEIGHT = 37 BORDER = 0 ALT="See Page"></A>
<HR ALIGN=CENTER>
<P>
<UL>
<UL>
<UL>
<LI>
<A HREF="#E68E22" ><IMG SRC="task.gif">Accessing VBScript Data and Data Subtypes</A>
<UL>
<LI>
<A HREF="#E69E21" >What Is a Variant Data Type?</A></UL>
<LI>
<A HREF="#E68E23" ><IMG SRC="task.gif">Finding Out What Data Type Is Held in a Variant</A>
<LI>
<A HREF="#E68E24" ><IMG SRC="task.gif">Converting Data Types</A>
<LI>
<A HREF="#E68E25" ><IMG SRC="task.gif">Declaring Variables and Constants</A>
<UL>
<LI>
<A HREF="#E69E22" >What's a Variable?</A>
<LI>
<A HREF="#E69E23" >What's a Constant?</A>
<LI>
<A HREF="#E69E24" >What's Scope?</A>
<LI>
<A HREF="#E69E25" >What's a Global Variable?</A>
<LI>
<A HREF="#E69E26" >Declaring Variables</A></UL>
<LI>
<A HREF="#E68E26" ><IMG SRC="task.gif">Declaring Global Variables in the ActiveX Control Pad</A>
<LI>
<A HREF="#E68E27" ><IMG SRC="task.gif">Using VBScript Operators to Calculate and Compare</A>
<UL>
<LI>
<A HREF="#E69E27" >Comparison Operators</A>
<LI>
<A HREF="#E69E28" >Arithmetical Operators</A>
<LI>
<A HREF="#E69E29" >Workshop Wrap-Up</A>
<LI>
<A HREF="#E69E30" >Next Steps</A>
<LI>
<A HREF="#E69E31" >Q&amp;A</A></UL></UL></UL></UL>
<HR ALIGN=CENTER>
<A NAME="E66E8"></A>
<H1 ALIGN=CENTER>
<CENTER>
<FONT SIZE=6 COLOR="#FF0000"><B>- 4 -</B>
<BR><B>Using the VBScript Language</B></FONT></CENTER></H1>
<BR>
<P>In this chapter, you
<BR>
<UL>
<LI>Learn about fundamental and VBScript data types
<BR>
<BR>
<LI>Discover how the VBScript variant works
<BR>
<BR>
<LI>Convert data types
<BR>
<BR>
<LI>See how scoping of data works and learn how to use it
<BR>
<BR>
<LI>Use VBScript variables and constants
<BR>
<BR>
<LI>Learn about VBScript operators
<BR>
<BR>
</UL>
<P>Tasks in this chapter:
<BR>
<UL>
<LI>Accessing VBScript data and data subtypes
<BR>
<BR>
<LI>Finding out what data type is held in a variant
<BR>
<BR>
<LI>Converting data types
<BR>
<BR>
<LI>Declaring variables and constants
<BR>
<BR>
<LI>Declaring global variables in the ActiveX Control Pad
<BR>
<BR>
<LI>Using VBScript operators to calculate and compare
<BR>
<BR>
</UL>
<P>The Visual Basic Scripting Edition (VBScript) language is a subset of Microsoft Visual Basic for Applications (VBA) and Microsoft Visual Basic. You can use VBScript for interfacing both ActiveX controls and Java applets, as well as writing stand-alone scripts that act directly upon the browser object. The syntax (how you write the code) is clear and logical in the vast majority of cases; there are no cryptic symbols or constructs. In fact, much of the syntax predates even Visual Basic with its ancestral roots placed firmly in the early Basic languages. The vast majority of the algorithms and procedures used by the scripting language engine behind the scenes are tried and tested, giving you a robust basis and foundation to work from.
<BR>
<P>In the many hours I have spent working with VBScript, I have yet to encounter anything in the language that I would call a bug, which is probably due to the length of time that Visual Basic and its cousins have been around. Compare my VBScript experience with newer scripting languages that appear to be fraught with problems. I mention this not to advertise for those nice people at Microsoft, but to let you know that you can confidently program in VBScript. When an error does rear its ugly head, the error is probably yours and not the scripting engine's.
<BR>
<P>In this chapter, you'll see how you can create powerful scripts for your Web pages quickly and easily using the VBScript language. Even if you are experienced in Visual Basic or VBA, I still recommend that you read this chapter and the rest of the chapters in Part II regarding the VBScript language because there are a few differences in the implementation of the VBScript language that might take you by surprise.
<BR>
<BR>
<A NAME="E68E22"></A>
<H3 ALIGN=CENTER>
<CENTER>
<FONT SIZE=5 COLOR="#FF0000"><B><IMG SRC="task.gif">Accessing VBScript Data and Data Subtypes</B></FONT></CENTER></H3>
<BR>
<P>The most logical place to start with any programming language is the data types. Data types are crucial because they define how the computer stores data while the program is executing. The computer needs to know what type of data you are handling (for example, is <I>x</I> a string or a number?) so that it can allocate memory space. Different data types take up different amounts of memory, as you can see from the following list of fundamental data types:
<BR>
<UL>
<LI>Empty: A value associated with a newly declared but as yet unassigned variable.
<BR>
<BR>
<LI>Null: Similar to Empty, but Null must be assigned explicitly.
<BR>
<BR>
<LI>Boolean: True or False (0 or -1).
<BR>
<BR>
<LI>Byte: One byte in length, it can hold whole numbers between 0 and 255.
<BR>
<BR>
<LI>Integer: Uses two bytes and can hold whole numbers between -32768 and 32767.
<BR>
<BR>
<LI>Long: Four bytes in length, the whole numbers it represents can range from -2,147,483,648 to 2,147,483,647.
<BR>
<BR>
<LI>Single: Four bytes long, it can contain fractional numbers used in floating-point arithmetic, ranging from -3.402823E38 to -1.401298E-45 for negative numbers and 1.401298E-45 to 3.402823E38 for positive numbers.
<BR>
<BR>
<LI>Double: Eight bytes long, it can contain very large fractional numbers.
<BR>
<BR>
<LI>Date: Holds a representation of the date and time from January 1, 100 to December 31, 9999.
<BR>
<BR>
<LI>String: A variable-length data type. The maximum string length you can use in VBScript is around two billion characters.
<BR>
<BR>
<LI>Object: A special data type that can hold a reference to an ActiveX or intrinsic HTML object.
<BR>
<BR>
<LI>Error: Used to store error numbers created by VBScript.
<BR>
<BR>
</UL>
<P>VBScript makes it easy for you to work with any of these data types without placing instructions in your program about which data type you need to use. VBScript uses what's known as a variant data type.
<BR>
<BR>
<A NAME="E69E21"></A>
<H4 ALIGN=CENTER>
<CENTER>
<FONT SIZE=4 COLOR="#FF0000"><B>What Is a Variant Data Type?</B></FONT></CENTER></H4>
<BR>
<P>A variant is a special data type that can contain any of the fundamental data types shown in the preceding list. It dynamically allocates memory space according to which data subtype is required. This means that you don't have to explicitly declare variables as a particular fundamental type (as you do with the majority of programming languages). A variant takes care of that for you.
<BR>
<P>As you can see from the following sample code, VBScript does not require you to tell it what type of data you want to place inside the variables Qty and ProductName. You simply assign your values to Qty and ProductName, and let the variant data type do the rest.
<BR>
<PRE>
<FONT COLOR="#000080">&lt;SCRIPT LANGUAGE = &quot;vbscript&quot;&gt;
&lt;!--
Qty = 162
ProductName = &quot;Paper Clip&quot;
--&gt;
&lt;/SCRIPT&gt;</FONT></PRE>
<BR>
<A NAME="E68E23"></A>
<H3 ALIGN=CENTER>
<CENTER>
<FONT SIZE=5 COLOR="#FF0000"><B><IMG SRC="task.gif">Finding Out What Data Type Is Held in a Variant</B></FONT></CENTER></H3>
<BR>
<P>Although you do not need to assign the data type in VBScript, on many occasions you need to know what type of data the variant is holding. You can use the built-in VarType function to determine how the data in a variant is treated. Table 4.1 shows the return values of the VarType function and the corresponding contents of the variant.
<BR>
<BR>
<P ALIGN=CENTER>
<CENTER>
<FONT COLOR="#000080"><B>Table 4.1. VarType return values.</B></FONT></CENTER>
<BR>

<CENTER><TABLE  BORDERCOLOR=#000040 BORDER=1 CELLSPACING=2 CELLPADDING=3 >
<TR>
<TD VALIGN=top  BGCOLOR=#80FFFF ><FONT COLOR=#000080>
<I>Return Value</I>
</FONT>
<TD VALIGN=top  BGCOLOR=#80FFFF ><FONT COLOR=#000080>
<I>Data Type Held in Variant</I>
</FONT>
<TR>
<TD VALIGN=top  BGCOLOR=#80FFFF ><FONT COLOR=#000080>
0
</FONT>
<TD VALIGN=top  BGCOLOR=#80FFFF ><FONT COLOR=#000080>
Empty (uninitialized)
</FONT>
<TR>
<TD VALIGN=top  BGCOLOR=#80FFFF ><FONT COLOR=#000080>
1
</FONT>
<TD VALIGN=top  BGCOLOR=#80FFFF ><FONT COLOR=#000080>
Null (no valid data)
</FONT>
<TR>
<TD VALIGN=top  BGCOLOR=#80FFFF ><FONT COLOR=#000080>
2
</FONT>
<TD VALIGN=top  BGCOLOR=#80FFFF ><FONT COLOR=#000080>
Integer
</FONT>
<TR>
<TD VALIGN=top  BGCOLOR=#80FFFF ><FONT COLOR=#000080>
3
</FONT>
<TD VALIGN=top  BGCOLOR=#80FFFF ><FONT COLOR=#000080>
Long (long integer)
</FONT>
<TR>
<TD VALIGN=top  BGCOLOR=#80FFFF ><FONT COLOR=#000080>
4
</FONT>
<TD VALIGN=top  BGCOLOR=#80FFFF ><FONT COLOR=#000080>
Single (single-precision floating-point)
</FONT>
<TR>
<TD VALIGN=top  BGCOLOR=#80FFFF ><FONT COLOR=#000080>
5
</FONT>
<TD VALIGN=top  BGCOLOR=#80FFFF ><FONT COLOR=#000080>
Double (double-precision floating-point)
</FONT>
<TR>
<TD VALIGN=top  BGCOLOR=#80FFFF ><FONT COLOR=#000080>
7
</FONT>
<TD VALIGN=top  BGCOLOR=#80FFFF ><FONT COLOR=#000080>
Date
</FONT>
<TR>
<TD VALIGN=top  BGCOLOR=#80FFFF ><FONT COLOR=#000080>
8
</FONT>
<TD VALIGN=top  BGCOLOR=#80FFFF ><FONT COLOR=#000080>
String
</FONT>
<TR>
<TD VALIGN=top  BGCOLOR=#80FFFF ><FONT COLOR=#000080>
9
</FONT>
<TD VALIGN=top  BGCOLOR=#80FFFF ><FONT COLOR=#000080>
Object
</FONT>
<TR>
<TD VALIGN=top  BGCOLOR=#80FFFF ><FONT COLOR=#000080>
10
</FONT>
<TD VALIGN=top  BGCOLOR=#80FFFF ><FONT COLOR=#000080>
Error
</FONT>
<TR>
<TD VALIGN=top  BGCOLOR=#80FFFF ><FONT COLOR=#000080>
11
</FONT>
<TD VALIGN=top  BGCOLOR=#80FFFF ><FONT COLOR=#000080>
Boolean
</FONT>
<TR>
<TD VALIGN=top  BGCOLOR=#80FFFF ><FONT COLOR=#000080>
12
</FONT>
<TD VALIGN=top  BGCOLOR=#80FFFF ><FONT COLOR=#000080>
Array of variant
</FONT>
<TR>
<TD VALIGN=top  BGCOLOR=#80FFFF ><FONT COLOR=#000080>
17
</FONT>
<TD VALIGN=top  BGCOLOR=#80FFFF ><FONT COLOR=#000080>
Byte
</FONT>
<TR>
<TD VALIGN=top  BGCOLOR=#80FFFF ><FONT COLOR=#000080>
8192
</FONT>
<TD VALIGN=top  BGCOLOR=#80FFFF ><FONT COLOR=#000080>
Array</FONT>
</TABLE></CENTER><BLOCKQUOTE>
<BLOCKQUOTE>
<HR ALIGN=CENTER>
<BR>
<NOTE>See Chapter 10, &quot;Using the Power of Arrays,&quot; for a detailed explanation of the array data types.
<BR>
<BR>Unlike VB and VBA, VBScript has no currency type.</NOTE>
<BR>
<HR ALIGN=CENTER>
</BLOCKQUOTE></BLOCKQUOTE>
<P>To illustrate using the VarType function, I've expanded the short example used previously:
<BR>
<PRE>
<FONT COLOR="#000080">&lt;HTML&gt;
&lt;HEAD&gt;
&lt;SCRIPT LANGUAGE = &quot;vbscript&quot;&gt;
&lt;!--
Sub Button1_OnClick
Qty = 162
ProductName = &quot;Paper Clip&quot;
Alert &quot;Qty is a type &quot; &amp; VarType(Qty) &amp; &quot; Variant&quot;
Alert &quot;ProductName is a type &quot; &amp; VarType(ProductName) &amp; &quot; Variant&quot;
End Sub
--&gt;
&lt;/SCRIPT&gt;
&lt;/HEAD&gt;
&lt;BODY BGCOLOR=&quot;white&quot;&gt;
&lt;CENTER&gt;
&lt;INPUT TYPE=BUTTON NAME=&quot;Button1&quot; VALUE=&quot;Click Me&quot;&gt;
&lt;/CENTER&gt;
&lt;/BODY&gt;
&lt;/HTML&gt;</FONT></PRE>
<P>When you run this HTML file with the browser and click the button, it shows two alert boxes, one after the other. The alert boxes report that Qty is a type two (see Table 4.1) integer and ProductName is a type eight string data type variant.
<BR>
<BR>
<A NAME="E68E24"></A>
<H3 ALIGN=CENTER>
<CENTER>
<FONT SIZE=5 COLOR="#FF0000"><B><IMG SRC="task.gif">Converting Data Types</B></FONT></CENTER></H3>
<BR>
<P>If variant does all the work for you, you shouldn't need to worry about what data is held, and you shouldn't have to convert data types, right? Wrong! Look at the following example:
<BR>
<PRE>
<FONT COLOR="#000080">&lt;HTML&gt;
&lt;HEAD&gt;
&lt;TITLE&gt;Add two numbers&lt;/TITLE&gt;
&lt;SCRIPT LANGUAGE=&quot;vbscript&quot;&gt;
&lt;!--
Sub Button1_OnClick
FirstData = Document.Form1.Text1.Value
SecondData = Document.Form1.Text2.Value
Document.Form1.Text3.Value = FirstData + SecondData
End Sub
--&gt;
&lt;/SCRIPT&gt;
&lt;/HEAD&gt;
&lt;BODY BGCOLOR=&quot;white&quot;&gt;
&lt;CENTER&gt;
&lt;FORM NAME=&quot;Form1&quot;&gt;
Enter a Number &lt;INPUT TYPE=&quot;text&quot; NAME=&quot;Text1&quot;&gt;&lt;P&gt;
Enter a Number &lt;INPUT TYPE=&quot;text&quot; NAME=&quot;Text2&quot;&gt;&lt;P&gt;
&lt;INPUT TYPE=&quot;button&quot; NAME=&quot;Button1&quot; VALUE=&quot;Click Me to add&quot;&gt;&lt;P&gt;
The Result is &lt;INPUT TYPE=&quot;text&quot; NAME=&quot;Text3&quot;&gt;
&lt;/FORM&gt;
&lt;/CENTER&gt;
&lt;/BODY&gt;
&lt;/HTML&gt;</FONT></PRE>
<P>You are asked to enter a number in the top text box and a number in the middle text box. When you click the button, a simple addition is performed on the two numbers:
<BR>
<PRE>
<FONT COLOR="#000080">Sub Button1_OnClick
FirstData = Document.Form1.Text1.Value
SecondData = Document.Form1.Text2.Value
Document.Form1.Text3.Value = FirstData + SecondData
End Sub</FONT></PRE>
<P>If you don't have a browser handy, Figure 4.1 shows you what happens.
<BR>
<P><B><A HREF="04lax01.gif">Figure 4.1. Trying to add two numbers together from an HTML form.</A></B>
<BR>
<P>Surprised? Both numbers were added together&#151;sort of&#151;but the data types are strings, so 100 + 100 is not 200, but 100100. The reason for this is that HTML forms can return only string data; they never return numerical data. Variant treated the incoming data correctly. It's just that nobody told it you really wanted numbers!
<BR>
<P>Help is at hand: VBScript has a range of functions that allow you to convert data to all manner of types:
<BR>
<UL>
<LI>CBool converts the current data type to a Boolean.
<BR>
<BR>
<LI>CByte converts the current data type to a byte.
<BR>
<BR>
<LI>CDate converts the current data type to a date.
<BR>
<BR>
<LI>CDbl converts the current data type to a double precision.
<BR>
<BR>
<LI>CInt converts the current data type to an integer.
<BR>
<BR>
<LI>CLng converts the current data type to a long integer.
<BR>
<BR>
<LI>CSng converts the current data type to a single precision.
<BR>
<BR>
<LI>CStr converts the current data type to a string.
<BR>
<BR>
</UL>
<P>You use the conversion functions like this:
<BR>
<BR>
<PRE>
<FONT COLOR="#000080">result = CInt(variable)</FONT></PRE>
<P>Here's the previous example reworked slightly to convert the incoming data to double-precision numerical data types:
<BR>
<PRE>
<FONT COLOR="#000080">Sub Button1_OnClick
FirstData = CDbl(Document.Form1.Text1.Value)
SecondData = CDbl(Document.Form1.Text2.Value)
Document.Form1.Text3.Value = FirstData + SecondData
End Sub</FONT></PRE>
<P>The addition now works fine and dandy as long as the user remembers to make a numerical entry. 100 + 100 really does equal 200; however (there's always a however), if the user enters something such as Fred and 100, an error is generated, and the program comes to a grinding halt&#151;which is not good. In Chapter 6, &quot;Checking Form Data,&quot; you'll see how the IsNumeric function traps errant data entry.
<BR>
<BR>
<A NAME="E68E25"></A>
<H3 ALIGN=CENTER>
<CENTER>
<FONT SIZE=5 COLOR="#FF0000"><B><IMG SRC="task.gif">Declaring Variables and Constants</B></FONT></CENTER></H3>
<BR>
<P>In this section, you'll see how to handle data within your script by declaring variables and constants. But before you get down to it, you should first get acquainted with what variables and constants are.
<BR>
<BR>
<A NAME="E69E22"></A>
<H4 ALIGN=CENTER>
<CENTER>
<FONT SIZE=4 COLOR="#FF0000"><B>What's a Variable?</B></FONT></CENTER></H4>
<BR>
<P>A variable is a name that you give to an area of memory&#151;a memory location&#151;which holds a value used in your program. It is a placeholder that is easily remembered and recognizable. For example, you wouldn't want to remember that the contents of the Text1 text box are in memory location 00AC0744:002606C8, but it's easy to remember MyData.
<BR>
<P>Another problem is that data moves around in memory, so you'd have to manually keep up with its new location, which might be virtually impossible. When you use a variable name, the language engine looks in a table of variable names and goes to the current memory location of the data. It is also good programming practice to denote what type of data you expect to use within the variable, which is done by using a three-letter lowercase prefix like this:
<BR>
<PRE>
<FONT COLOR="#000080">intMyIntegerData
lngMyLongData
strMyStringData</FONT></PRE>
<P>Variables can have their values changed during their lifetimes, as the name suggests. You can amend them at will, but sometimes you need to use a fixed value throughout your script, and this is where constants come in.
<BR>
<BR>
<A NAME="E69E23"></A>
<H4 ALIGN=CENTER>
<CENTER>
<FONT SIZE=4 COLOR="#FF0000"><B>What's a Constant?</B></FONT></CENTER></H4>
<BR>
<P>In strict termsVBScript has no constants. A constant is a variable whose value is fixed throughout its lifetime. In other flavors of Visual Basic, you declare a constant explicitly with the CONST directive, and if any part of your program attempts to change the value, a runtime error is generated.
<BR>
<P>VBScript has no CONST directive. Any constants are &quot;virtual,&quot; so the safest way to declare a constant is to use the code convention of uppercase characters for your constant's name, like this:
<BR>
<BR>
<PRE>
<FONT COLOR="#000080">MY_CONSTANT</FONT></PRE>
<P>An addition to the normal convention is to always use more than one word for the constant name and separate them with an underscore. The underscore separates them visually from HTML elements that should be uppercase but are always only a single word.
<BR>
<P>The next concept you need to know about constants and variables is that where you define a variable affects where you have access to that variable or constant and how long its lifetime is. This designation is called <I>scope</I>.
<BR>
<BR>
<A NAME="E69E24"></A>
<H4 ALIGN=CENTER>
<CENTER>
<FONT SIZE=4 COLOR="#FF0000"><B>What's Scope?</B></FONT></CENTER></H4>
<BR>
<P>The scope of a variable or constant determines whether all subroutines and procedures within the HTML document can use it or only one subroutine can use it. Look at this example:
<BR>
<PRE>
<FONT COLOR="#000080">1:&lt;SCRIPT LANGUAGE=&quot;vbscript&quot;&gt;
2:&lt;!--
3:Sub MySubRoutine()
4:dim intMyInteger
5:intMyInteger = 5
6:Document.Form1.Text3.Value = CInt(Document.Form1.Text1.Value) + intMyInteger
7:End Sub
8:--&gt;
9:&lt;/SCRIPT&gt;</FONT></PRE>
<BLOCKQUOTE>
<BLOCKQUOTE>
<HR ALIGN=CENTER>
<BR>
<NOTE>The line numbers in the preceding code segment let me refer to a particular part of the script; they don't appear in the real script.</NOTE>
<BR>
<HR ALIGN=CENTER>
</BLOCKQUOTE></BLOCKQUOTE>
<P>Line 4 declares the variable intMyInteger, and line 5 assigns a value to it. This variable is only available to the MySubRoutine procedure; when the procedure is complete at line 7, the variable intMyInteger ceases to exist. Any calls to a variable called intMyInteger in other scripts on the page force the creation of a completely new variable. This is an example of <I>local</I> scope.
<BR>
<P>Now look at this example:
<BR>
<PRE>
<FONT COLOR="#000080">1:&lt;SCRIPT LANGUAGE=&quot;vbscript&quot;&gt;
2:&lt;!--
3:dim strMyString
4:Sub MySubRoutine()
6:strMyString = Document.Form1.Text1.Value
7:Document.Form1.Text2.Value = UCase(strMyString)
8:End Sub
9:Sub AnotherSubRoutine()
10:Alert strMyString
11:End Sub
12:--&gt;
13:&lt;/SCRIPT&gt;</FONT></PRE>
<P>Notice this time that the variable strMyString is declared on line 3, outside of either of the two subroutines, but of course within the &lt;SCRIPT&gt; tag. On line 6, the contents of Text1 are assigned to strMyString. In line 10, the value of strMyString is displayed to the user in an alert box. Assuming that MySubRoutine is executed before AnotherSubRoutine, the alert box shows the contents of Text1 because strMyString is still active. It was not destroyed as you saw in the last example because it has <I>script-level</I> scope. It is available to all the subroutines and functions on the page.
<BR>
<P>To declare a variable with script-level scope, you simply declare it outside of a subroutine. Look at this next example:
<BR>
<PRE>
<FONT COLOR="#000080">&lt;SCRIPT LANGUAGE=&quot;vbscript&quot;&gt;
&lt;!--
Sub MyButton_OnClick
Alert &quot;Hello World&quot;
End Sub
--&gt;
&lt;/SCRIPT&gt;
&lt;SCRIPT LANGUAGE=&quot;vbscript&quot;&gt;
&lt;!--
dim intMyInteger
Sub AnotherButton_OnClick
Alert &quot;Hello Again&quot;
End Sub
--&gt;
&lt;/SCRIPT&gt;</FONT></PRE>
<P>This time, intMyInteger is declared outside of any subroutines or functions but appears within the second &lt;SCRIPT&gt; block. This change doesn't matter. The script engine still treats intMyInteger as a variable with script-level scope because the script engine gathers all the scripts on the page prior to creating the in-memory program.
<BR>
<BR>
<A NAME="E69E25"></A>
<H4 ALIGN=CENTER>
<CENTER>
<FONT SIZE=4 COLOR="#FF0000"><B>What's a Global Variable?</B></FONT></CENTER></H4>
<BR>
<P>You will often encounter the term <I>global variable</I>, which is exactly the same as a script-level scoped variable, but it's easier to say!
<BR>
<P>Later in this chapter, you'll see how to use the ActiveX Control Pad to declare a global variable, which in VBScript is the same as a global constant.
<BR>
<BR>
<A NAME="E69E26"></A>
<H4 ALIGN=CENTER>
<CENTER>
<FONT SIZE=4 COLOR="#FF0000"><B>Declaring Variables</B></FONT></CENTER></H4>
<BR>
<P>Earlier, you saw that you do not need to strictly declare variables because the variant data type takes care of the nitty gritty. However, you might write complex scripts with several different functions passing data around. If others will use and possibly maintain your script, it is good programming practice to declare variables explicitly.
<BR>
<BLOCKQUOTE>
<BLOCKQUOTE>
<HR ALIGN=CENTER>
<BR>
<NOTE>You can force the script to shout at you if you don't declare a variable by using the OPTION EXPLICIT directive under the first &lt;SCRIPT&gt; tag. This instructs the scripting engine to generate a runtime error if it encounters an undeclared variable.</NOTE>
<BR>
<HR ALIGN=CENTER>
</BLOCKQUOTE></BLOCKQUOTE>
<P>As you saw from the short code snippets earlier in this chapter, the way to declare either a variable or a constant in VBScript is by using the Dim keyword. The following code shows a full working example to demonstrate the use of local and global (or script-level) constants and variables. The line numbers are included purely for reference, so don't type them into your HTML file.
<BR>
<PRE>
<FONT COLOR="#000080">1:&lt;HTML&gt;
2:&lt;HEAD&gt;&lt;TITLE&gt;SCOPE&lt;/TITLE&gt;
3:&lt;SCRIPT LANGUAGE=&quot;vbscript&quot;&gt;
4:&lt;!--
5:Dim intGlobalVariable
6:Dim MY_GLOBAL_CONSTANT
7:MY_GLOBAL_CONSTANT = 3
8:Sub Button1_OnClick
9: Dim intLocalVariable
10:  intLocalVariable = CInt(Document.Form1.Text1.Value)
11:  intLocalVariable = intLocalVariable * MY_GLOBAL_CONSTANT 
12:  Alert intLocalVariable 
13:  intGlobalVariable = intLocalVariable 
14:End Sub
15:Sub Button2_OnClick
16: Dim intLocalConstant
17: intLocalConstant = 6 
18: intGlobalVariable  = intGlobalVariable / intLocalConstant + MY_GLOBAL_CONSTANT 
19: Alert intGlobalVariable
20: End Sub
--&gt;
&lt;/SCRIPT&gt;
&lt;/HEAD&gt;
&lt;BODY BGCOLOR=&quot;white&quot;&gt;
&lt;CENTER&gt;
&lt;FORM NAME=&quot;Form1&quot;&gt;
Please enter a number
&lt;INPUT TYPE=&quot;text&quot; NAME=&quot;Text1&quot;&gt;&lt;P&gt;
&lt;INPUT TYPE=&quot;button&quot; NAME=&quot;Button1&quot; VALUE=&quot;Click Me&quot;&gt;&lt;P&gt;
&lt;INPUT TYPE=&quot;button&quot; NAME=&quot;Button2&quot; VALUE=&quot;Then Click Me&quot;&gt;
&lt;/FORM&gt;
&lt;/CENTER&gt;
&lt;/BODY&gt;
&lt;/HTML&gt;</FONT></PRE>
<P>As this page loads into the browser, the script engine automatically executes lines 5 through 7. This means that the global variable intGlobalVariable is available for any of the scripts on the page, as is the global constant intGlobalConstant, which had the number 3 assigned to it in line 7.
<BR>
<P>When you load this page (scope.htm) into the browser, you are asked to enter a number into the text box. When you click the first button, the Button1_OnClick event handler springs into action.
<BR>
<P>As the Button1_OnClick event handler begins execution in lines 8 and 9, a new intLocalVariable variable is created. The value that you entered into the text box is then converted to an integer and assigned to the local variable in line 10. Line 11 uses the global constant (which has a value of 3) to perform a simple calculation and returns the result to the same local variable. The value of the local variable is then shown to the world through the Alert box in line 12. The final line of this procedure copies the result to the global variable. As the subroutine ends, the local variable is destroyed in memory and no longer exists; however, you've ensured that its final value lives on in the global variable.
<BR>
<P>Click Button2 to fire the Button2_OnClick Event. Line 16 declares a global constant. You can see that there is no difference in the language between constants and variables; the only reason you know it's a constant (apart from its name, in this case) is the clue from the coding convention. A number is assigned to the local constant so that using the constant is the same as using that number&#151;in this case, 6.
<BR>
<BLOCKQUOTE>
<BLOCKQUOTE>
<HR ALIGN=CENTER>
<BR>
<NOTE>You can use constants for any of the other data types, too.</NOTE>
<BR>
<HR ALIGN=CENTER>
</BLOCKQUOTE></BLOCKQUOTE>
<P>Line 18 performs a simple calculation using the local constant and both the global variable and constant. Line 19 then displays the result. As before, when the procedure ends in Line 20, the local constant is destroyed. Just to prove that the values of the global constant and variable are still there, click the second button again. This time, the result of the first calculation from Button 1 is held in the global variable and is still available for use.
<BR>
<P>When you understand global or local constants and variables, you have the basis to do some neat things, and it really isn't rocket science. The ActiveX Control Pad enables you to easily declare global variables.
<BR>
<BR>
<A NAME="E68E26"></A>
<H3 ALIGN=CENTER>
<CENTER>
<FONT SIZE=5 COLOR="#FF0000"><B><IMG SRC="task.gif">Declaring Global Variables in the ActiveX Control Pad</B></FONT></CENTER></H3>
<BR>
<P>The Script Wizard of the ActiveX Control Pad has a built-in object for global variables and constants, making it as easy as point and click to create global variables for your scripts. Follow the creation of a simple Web page that uses a global variable.
<BR>
<P>Open the ActiveX Control Pad, and in the default HTML page, amend the following lines&#151;just to make the thing look a little better:
<BR>
<OL>
<LI>Change the title to Global Variables in ActiveX.
<BR>
<BR>
<LI>Change the &lt;BODY&gt; tag to read &lt;BODY BGCOLOR=&quot;white&quot;&gt;.
<BR>
<BR>
<LI>Add a <B>&lt;</B>CENTER<B>&gt;</B> tag under the &lt;BODY&gt; tag.
<BR>
<BR>
<LI>Under the &lt;CENTER&gt; tag, add an ActiveX command button (a Microsoft Forms 2.0 Command Button).
<BR>
<BR>
<BLOCKQUOTE>
<BLOCKQUOTE>
<HR ALIGN=CENTER>
<BR>
<NOTE>Chapter 1, &quot;Getting to Grips with ActiveX,&quot; provides details on how to add ActiveX controls to the HTML page.</NOTE>
<BR>
<HR ALIGN=CENTER>
</BLOCKQUOTE></BLOCKQUOTE>
<BR>
<LI>Change the command button's Caption property to read Click to See My Global Variable. If necessary, you can change the command button's AutoSize property to True, which increases the width of the button to accommodate the long caption. 
<BR>
<BR>
<LI>Close the Object Editor to generate the object code for the command button.
<BR>
<BR>
<LI>Invoke the Script Wizard by any of the usual methods.
<BR>
<BR>
<BLOCKQUOTE>
<BLOCKQUOTE>
<HR ALIGN=CENTER>
<BR>
<NOTE>You can find details about the Script Wizard in Chapter 1.</NOTE>
<BR>
<HR ALIGN=CENTER>
</BLOCKQUOTE></BLOCKQUOTE>
<LI>Select the CommandButton1 click event.
<BR>
<BR>
<LI>Right-click anywhere in the right Actions pane. The Actions pop-up menu displays.
<BR>
<BR>
<LI>Select New Global Variable from the pop-up menu. You see the New Global Variable dialog box, as shown in Figure 4.2.
<BR>
<BR><B><A HREF="04lax02.gif">Figure 4.2. The New Global Variable dialog box.</A></B>
<BR>
<BR>
<LI>Enter the name for the new global variable as intMyGlobalVariable and click OK.
<BR>
<BR>
<LI>You might have noticed that a plus sign appears to the left of the global variable object in the right Actions pane. Click it and your new global variable name displays under global variables. To use intMyGlobalVariable in your script, simply double-click it. This places a reference to it in the script pane. Add = 567 after the variable name in the script pane, and press Return.
<BR>
<BR>
<LI>Double-click intMyGlobalVariable again to create another reference to it in the script. Add the word Alert and a space before this new reference. Your script wizard should now look like the one in Figure 4.3.
<BR>
<BR><B><A HREF="04lax03.gif">Figure 4.3. The Script Wizard with your new global variable.</A></B>
<BR>
<BR>
<LI> 14. Click OK to automatically generate the script in your HTML file, as shown in Figure 4.4. 
<BR>
<BR><B><A HREF="04lax04.gif">Figure 4.4. The HTML with the global variable definition and script.</A></B>
<BR>
<BR>
</OL>
<P>The Script Wizard creates two different script blocks, one in the head section that defines the global variable and a second just above the command button definition that contains the main script.
<BR>
<BLOCKQUOTE>
<BLOCKQUOTE>
<HR ALIGN=CENTER>
<BR>
<NOTE>If you want to create this variable as a constant, you move the line that assigns its value to appear just below the Dim statement in the top script block.</NOTE>
<BR>
<HR ALIGN=CENTER>
</BLOCKQUOTE></BLOCKQUOTE>
<P>Save the file as variable.htm and run it with your browser.
<BR>
<BR>
<A NAME="E68E27"></A>
<H3 ALIGN=CENTER>
<CENTER>
<FONT SIZE=5 COLOR="#FF0000"><B><IMG SRC="task.gif">Using VBScript Operators to Calculate and Compare</B></FONT></CENTER></H3>
<BR>
<P>One of the main uses of any programming language is comparing values and performing calculations based on those values and data. VBScript offers you a rich set of comparison and arithmetical operators to perform all types of operations from the very simple to the highly complex.
<BR>
<BR>
<A NAME="E69E27"></A>
<H4 ALIGN=CENTER>
<CENTER>
<FONT SIZE=4 COLOR="#FF0000"><B>Comparison Operators</B></FONT></CENTER></H4>
<BR>
<P>Comparison operators need very little introduction; they are the symbols used to compare one value with another value and return either True or False. The comparison operators available in VBScript are as follows:
<BR>
<UL>
<LI>= compares the equality of two arguments.
<BR>
<BR>
<LI>&lt;&gt; compares the inequality of two arguments.
<BR>
<BR>
<LI>&gt; determines whether the left argument is greater than the right argument.(or whether the right argument is less than the left).
<BR>
<BR>
<LI>&lt; determines whether the left argument is less than the right argument.
<BR>
<BR>
<LI>&lt;= determines whether the left argument is less than or equal to the right argument.
<BR>
<BR>
<LI>&gt;= determines whether the left argument is greater than or equal to the right argument.
<BR>
<BR>
</UL>
<P>I used the word <I>argument</I> in the preceding definitions. An argument can be a single variable or value or a complete calculation in itself, as shown in the following examples:
<BR>
<BR>
<PRE>
<FONT COLOR="#000080">If x = 10 Then
<BR>
If y &gt; ((10 * 2) - (30.333 / 76)) Then</FONT></PRE>
<P>The result of a comparison is always a Boolean True or False.
<BR>
<BR>
<A NAME="E69E28"></A>
<H4 ALIGN=CENTER>
<CENTER>
<FONT SIZE=4 COLOR="#FF0000"><B>Arithmetical Operators</B></FONT></CENTER></H4>
<BR>
<P>Arithmetical operators in VBScript act exactly as you would expect. The following list presents no surprises:
<BR>

<CENTER><TABLE  BORDERCOLOR=#000040 BORDER=1 CELLSPACING=2 CELLPADDING=3 >
<TR>
<TD VALIGN=top  BGCOLOR=#80FFFF ><FONT COLOR=#000080>
+
</FONT>
<TD VALIGN=top  BGCOLOR=#80FFFF ><FONT COLOR=#000080>
Addition
</FONT>
<TR>
<TD VALIGN=top  BGCOLOR=#80FFFF ><FONT COLOR=#000080>
-
</FONT>
<TD VALIGN=top  BGCOLOR=#80FFFF ><FONT COLOR=#000080>
Subtraction
</FONT>
<TR>
<TD VALIGN=top  BGCOLOR=#80FFFF ><FONT COLOR=#000080>
/
</FONT>
<TD VALIGN=top  BGCOLOR=#80FFFF ><FONT COLOR=#000080>
Division
</FONT>
<TR>
<TD VALIGN=top  BGCOLOR=#80FFFF ><FONT COLOR=#000080>
*
</FONT>
<TD VALIGN=top  BGCOLOR=#80FFFF ><FONT COLOR=#000080>
Multiplication
</FONT>
<TR>
<TD VALIGN=top  BGCOLOR=#80FFFF ><FONT COLOR=#000080>
^
</FONT>
<TD VALIGN=top  BGCOLOR=#80FFFF ><FONT COLOR=#000080>
Exponentiation
</FONT>
<TR>
<TD VALIGN=top  BGCOLOR=#80FFFF ><FONT COLOR=#000080>
\
</FONT>
<TD VALIGN=top  BGCOLOR=#80FFFF ><FONT COLOR=#000080>
Integer division
</FONT>
<TR>
<TD VALIGN=top  BGCOLOR=#80FFFF ><FONT COLOR=#000080>
Mod
</FONT>
<TD VALIGN=top  BGCOLOR=#80FFFF ><FONT COLOR=#000080>
Modulo arithmetic
</FONT>
<TR>
<TD VALIGN=top  BGCOLOR=#80FFFF ><FONT COLOR=#000080>
&amp;
</FONT>
<TD VALIGN=top  BGCOLOR=#80FFFF ><FONT COLOR=#000080>
String concatenation</FONT>
</TABLE></CENTER><P>The next application uses comparison and arithmetic operators. Because it's a long application, I won't discuss every last line and object, only the areas relevant to this chapter.
<BR>
<P>Figure 4.5 shows the application called the Mr Frosty Air Conditioner Web page. Visitors to the site can enter the dimensions of their rooms in meters; the script calculates the volume of the room and then compares the volume with the maximum capacities of the Mr Frosty Air Conditioner range.
<BR>
<P><B><A HREF="04lax05.gif">Figure 4.5. The Mr Frosty Air Conditioners Web page.</A></B>
<BR>
<P>The following is the full source code for the page:
<BR>
<PRE>
<FONT COLOR="#000080">&lt;HTML&gt;
&lt;HEAD&gt;
&lt;TITLE&gt;Mr Frosty Air Conditioners&lt;/TITLE&gt;
&lt;/HEAD&gt;
&lt;BODY BGCOLOR=&quot;aqua&quot;&gt;
&lt;FONT FACE=&quot;arial&quot; SIZE=2&gt;
&lt;CENTER&gt;
&lt;H2&gt;Mr Frosty Air Conditioners&lt;/H2&gt;
&lt;P&gt;
    &lt;FORM NAME=&quot;Form1&quot;&gt;
&lt;TABLE&gt;
&lt;TD&gt;&lt;FONT SIZE=2&gt;Enter the &lt;B&gt;Width&lt;/B&gt;&lt;BR&gt; of your room
&lt;TD&gt;&lt;FONT SIZE=2&gt;Enter the &lt;B&gt;Length&lt;/B&gt;&lt;BR&gt; of your room
&lt;TD&gt;&lt;FONT SIZE=2&gt;Enter the &lt;B&gt;Height&lt;/B&gt;&lt;BR&gt; of your room
&lt;TR&gt;
&lt;TD&gt;&lt;INPUT TYPE=text NAME=&quot;roomwidth&quot;&gt;M
&lt;TD&gt;&lt;INPUT TYPE=text NAME=&quot;roomlength&quot;&gt;M
&lt;TD&gt;&lt;INPUT TYPE=text NAME=&quot;roomheight&quot;&gt;M
&lt;TR&gt;
&lt;/TABLE&gt;
&lt;P&gt;
        &lt;SCRIPT LANGUAGE=&quot;VBScript&quot;&gt;
&lt;!--
dim MODELA_MAX
dim MODELB_MAX
dim MODELC_MAX
MODELA_MAX = 130
MODELB_MAX = 500
MODELC_MAX = 1000
Function WhichModel(lngRoomVolume)
 If lngRoomVolume &lt; MODELA_MAX then
  WhichModel = &quot;Mini Syberia&quot;
  Exit Function
 End If
 If lngRoomVolume &lt; MODELB_MAX then
  WhichModel = &quot;Midi Artic&quot;
  Exit Function
 End If
 If lngRoomVolume &lt; MODELC_MAX then
  WhichModel = &quot;Maxi Antarctica&quot;
  Exit Function
 End If
 WhichModel = &quot;Golly Jeepers that's BIG!!&quot; 
  
End Function
Sub CommandButton1_Click()
 dim intW 
 dim intL
 dim intH
 dim lngVol
 dim strMsg
intW = CInt(Document.Form1.roomwidth.value)
intL = CInt(Document.Form1.roomlength.value)
intH = CInt(Document.Form1.roomheight.value)
lngVol = intW * intL * intH
strMsg = &quot;Your room is &quot; &amp; CStr(lngVol) &amp; &quot; cubic Metres&quot;
strMsg = strMsg &amp; Chr(10) &amp; Chr(13)
strMsg = strMsg &amp; &quot;You need our &quot; &amp; WhichModel(lngVol) &amp; &quot; Model&quot;
Label1.Caption = strMsg 
end sub
--&gt;
        &lt;/SCRIPT&gt;
        &lt;OBJECT ID=&quot;CommandButton1&quot; WIDTH=120 HEIGHT=36
         CLASSID=&quot;CLSID:D7053240-CE69-11CD-A777-00DD01143C57&quot;&gt;
            &lt;PARAM NAME=&quot;ForeColor&quot; VALUE=&quot;0&quot;&gt;
            &lt;PARAM NAME=&quot;VariousPropertyBits&quot; VALUE=&quot;268435483&quot;&gt;
            &lt;PARAM NAME=&quot;Caption&quot; VALUE=&quot;CALCULATE&quot;&gt;
            &lt;PARAM NAME=&quot;Size&quot; VALUE=&quot;3175;952&quot;&gt;
            &lt;PARAM NAME=&quot;FontEffects&quot; VALUE=&quot;1073741825&quot;&gt;
            &lt;PARAM NAME=&quot;FontHeight&quot; VALUE=&quot;240&quot;&gt;
            &lt;PARAM NAME=&quot;FontCharSet&quot; VALUE=&quot;0&quot;&gt;
            &lt;PARAM NAME=&quot;FontPitchAndFamily&quot; VALUE=&quot;2&quot;&gt;
            &lt;PARAM NAME=&quot;ParagraphAlign&quot; VALUE=&quot;3&quot;&gt;
            &lt;PARAM NAME=&quot;FontWeight&quot; VALUE=&quot;700&quot;&gt;
        &lt;/OBJECT&gt;
    &lt;/FORM&gt;
&lt;P&gt;
    &lt;OBJECT ID=&quot;Label1&quot; WIDTH=533 HEIGHT=80
     CLASSID=&quot;CLSID:978C9E23-D4B0-11CE-BF2D-00AA003F40D0&quot;&gt;
        &lt;PARAM NAME=&quot;ForeColor&quot; VALUE=&quot;16711680&quot;&gt;
        &lt;PARAM NAME=&quot;BackColor&quot; VALUE=&quot;16776960&quot;&gt;
        &lt;PARAM NAME=&quot;VariousPropertyBits&quot; VALUE=&quot;276824083&quot;&gt;
        &lt;PARAM NAME=&quot;Caption&quot; VALUE=&quot;Enter the dimensions of your room, then click 
CALCULATE to discover which is the best Mr Frosty Air Conditioner for you!!&quot;&gt; 
        &lt;PARAM NAME=&quot;Size&quot; VALUE=&quot;14111;2116&quot;&gt;
        &lt;PARAM NAME=&quot;FontEffects&quot; VALUE=&quot;1073741827&quot;&gt;
        &lt;PARAM NAME=&quot;FontHeight&quot; VALUE=&quot;280&quot;&gt;
        &lt;PARAM NAME=&quot;FontCharSet&quot; VALUE=&quot;0&quot;&gt;
        &lt;PARAM NAME=&quot;FontPitchAndFamily&quot; VALUE=&quot;2&quot;&gt;
        &lt;PARAM NAME=&quot;ParagraphAlign&quot; VALUE=&quot;3&quot;&gt;
        &lt;PARAM NAME=&quot;FontWeight&quot; VALUE=&quot;700&quot;&gt;
    &lt;/OBJECT&gt;
&lt;/BODY&gt;
&lt;/HTML&gt;</FONT></PRE>
<P>The application uses a combination of HTML controls and ActiveX controls. The first script you encounter is the definition of the constants used for holding the maximum values for the model range:
<BR>
<PRE>
<FONT COLOR="#000080">        &lt;SCRIPT LANGUAGE=&quot;VBScript&quot;&gt;
&lt;!--
dim MODELA_MAX
dim MODELB_MAX
dim MODELC_MAX
MODELA_MAX = 130
MODELB_MAX = 500
MODELC_MAX = 1000</FONT></PRE>
<P>Follow the script not as it appears on the page, but in the logical sequence that starts with the user clicking the button. This application provides no check to ensure that the data entered is the correct type. For example, if someone types in Four instead of 4, you're in trouble.
<BR>
<P>The event handler for the Click event starts with a declaration of several variables that are used within the procedure:
<BR>
<PRE>
<FONT COLOR="#000080">Sub CommandButton1_Click()
 dim intW 
 dim intL
 dim intH
 dim lngVol
 dim strMsg</FONT></PRE>
<P>Remember that all data coming from an HTML form is string data, so the first job is to convert the incoming data to numerical data so that you can perform calculations on it:
<BR>
<PRE>
<FONT COLOR="#000080">intW = CInt(Document.Form1.roomwidth.value)
intL = CInt(Document.Form1.roomlength.value)
intH = CInt(Document.Form1.roomheight.value)</FONT></PRE>
<P>Now, you can calculate the room's volume by simply multiplying all the values together:
<BR>
<BR>
<PRE>
<FONT COLOR="#000080">lngVol = intW * intL * intH</FONT></PRE>
<P>The next section starts to build the message that is displayed to the user. Note that the numerical room volume variable (lngVol) is converted to a string:
<BR>
<PRE>
<FONT COLOR="#000080">strMsg = &quot;Your room is &quot; &amp; CStr(lngVol) &amp; &quot; cubic Metres&quot;
strMsg = strMsg &amp; Chr(10) &amp; Chr(13)</FONT></PRE>
<P>The next line makes a call to the function WhichModel. WhichModel compares the volume to the maximum volumes of the product range. If the room volume is less than the product's maximum capacity, it is safe to recommend the product. Starting with the smallest unit, the comparisons continue until one of the If..Then statements returns True. At this point, the model name is returned to the line calling the function, effectively replacing the function call with the product name:
<BR>
<PRE>
<FONT COLOR="#000080">strMsg = strMsg &amp; &quot;You need our &quot; &amp; WhichModel(lngVol) &amp; &quot; Model&quot;
Function WhichModel(lngRoomVolume)
 If lngRoomVolume &lt; MODELA_MAX then
  WhichModel = &quot;Mini Syberia&quot;
  Exit Function
 End If
 If lngRoomVolume &lt; MODELB_MAX then
  WhichModel = &quot;Midi Artic&quot;
  Exit Function
 End If
 If lngRoomVolume &lt; MODELC_MAX then
  WhichModel = &quot;Maxi Antarctica&quot;
  Exit Function
 End If
 WhichModel = &quot;Golly Jeepers that's BIG!!&quot;
  
End Function</FONT></PRE>
<BLOCKQUOTE>
<BLOCKQUOTE>
<HR ALIGN=CENTER>
<BR>
<NOTE>For more details on functions and If..Then statements, see Chapter 9, &quot;Making Your Program Flow.&quot;</NOTE>
<BR>
<HR ALIGN=CENTER>
</BLOCKQUOTE></BLOCKQUOTE>
<P>Finally, the message that has been created is copied to the label caption and displayed on-screen, as shown in Figure 4.6.
<BR>
<P><B><A HREF="04lax06.gif">Figure 4.6. Mr Frosty makes his recommendation.</A></B>
<BR>
<BR>
<A NAME="E69E29"></A>
<H4 ALIGN=CENTER>
<CENTER>
<FONT SIZE=4 COLOR="#FF0000"><B>Workshop Wrap-Up</B></FONT></CENTER></H4>
<BR>
<P>In this chapter, you started to build the foundations of VBScript programming by learning the data type variant and its subtypes, how to find out what data is held in variant using VarType, and also how to convert that data using the conversion functions.
<BR>
<P>You used variables and constants and learned the difference between global and local scope and how it is defined within the program. Finally, you looked at how you can use VBScript to compare values and perform calculations and other arithmetic.
<BR>
<BR>
<A NAME="E69E30"></A>
<H4 ALIGN=CENTER>
<CENTER>
<FONT SIZE=4 COLOR="#FF0000"><B>Next Steps</B></FONT></CENTER></H4>
<BR>
<P>Now you have seen the foundations of programming in VBScript. To start creating real applications, take at look at the following chapters:
<BR>
<UL>
<LI>For more information about If..Then conditional statements, see Chapter 9, &quot;Making Your Program Flow.&quot;
<BR>
<BR>
<LI>Chapter 10, &quot;Using the Power of Arrays,&quot; contains more information about arrays. 
<BR>
<BR>
<LI>To learn how to trap incoming data problems, see Chapter 6, &quot;Checking Form Data.&quot;
<BR>
<BR>
</UL>
<BR>
<A NAME="E69E31"></A>
<H4 ALIGN=CENTER>
<CENTER>
<FONT SIZE=4 COLOR="#FF0000"><B>Q&amp;A</B></FONT></CENTER></H4>
<BR>
<P><B>Q: You mentioned naming conventions earlier. What are they, and why do we have them?</B>
<BR>
<P><B>A: </B>Naming or Coding conventions allow different people to read the same programming code and understand quickly what is happening within the script or program. It also helps you later, when you need to make amendments to a script that you wrote possibly many months previously. It's simply a common set of notations. When you see a name such as MY_COLOR, you know that it's a constant. Other conventions cover variables that can use an abbreviation of the data subtype in lowercase as the first three characters of the name. For example, an integer variable can be called intMyVar.
<BR>
<P><B>Q: I've used other programming languages before. With them, I have to specify what type of data I'm using in the variable and stick rigidly to that. Why is VBScript so different?</B>
<BR>
<P><B>A: </B>As you have seen, the variant data type almost eliminates the need to define the type of data you will hold within a particular variable. Microsoft wanted VBScript to be as easy as possible to use, so that first-time programmers who had arrived at VBScript from HTML could create scripts with the minimum amount of fuss and bother. With the variant data type, they have achieved just that.
<BR>
<P ALIGN=CENTER>
<A HREF="lax03.htm" TARGET="_self"><IMG SRC="blanprev.gif" WIDTH = 37 HEIGHT = 37 BORDER = 0 ALT="Previous Page"></A>
<A HREF="#I0" TARGET="_self"><IMG SRC="blantop.gif" WIDTH = 37 HEIGHT = 37 BORDER = 0 ALT="Page Top"></A>
<A HREF="httoc.htm" TARGET="_self"><IMG SRC="blantoc.gif" WIDTH = 37 HEIGHT = 37 BORDER = 0 ALT="TOC"></A>
<A HREF="lax05.htm" TARGET="_self"><IMG SRC="blannext.gif" WIDTH = 37 HEIGHT = 37 BORDER = 0 ALT="Next Page"></A>
<A HREF="http://www.mcp.com/sams/" TARGET="_self"><IMG SRC="blanhome.gif" WIDTH = 37 HEIGHT = 37 BORDER = 0 ALT="See Page"></A>
</BODY></HTML>
