<HTML>
<HEAD>
<TITLE>lax18.htm </TITLE>
<LINK REL="ToC" HREF="httoc.htm">
<LINK REL="Index" HREF="htindex.htm">
<LINK REL="Next" HREF="lax19.htm">
<LINK REL="Previous" HREF="lax17.htm"></HEAD>
<BODY BGCOLOR="#FFFFFF" TEXT="#000000" LINK="#0000FF" VLINK="#800080">
<A NAME="I0"></A><P ALIGN=CENTER>
<A HREF="lax17.htm" TARGET="_self"><IMG SRC="blanprev.gif" WIDTH = 37 HEIGHT = 37 BORDER = 0 ALT="Previous Page"></A>
<A HREF="httoc.htm" TARGET="_self"><IMG SRC="blantoc.gif" WIDTH = 37 HEIGHT = 37 BORDER = 0 ALT="TOC"></A>
<A HREF="lax19.htm" TARGET="_self"><IMG SRC="blannext.gif" WIDTH = 37 HEIGHT = 37 BORDER = 0 ALT="Next Page"></A>
<A HREF="http://www.mcp.com/sams/" TARGET="_self"><IMG SRC="blanhome.gif" WIDTH = 37 HEIGHT = 37 BORDER = 0 ALT="See Page"></A>
<HR ALIGN=CENTER>
<P>
<UL>
<UL>
<UL>
<LI>
<A HREF="#E68E90" ><IMG SRC="task.gif">Opening a New Browser Window via VBScript</A>
<LI>
<A HREF="#E68E91" ><IMG SRC="task.gif">Setting a TimeOut</A>
<LI>
<A HREF="#E68E92" ><IMG SRC="task.gif">Navigating within Frames</A>
<LI>
<A HREF="#E68E93" ><IMG SRC="task.gif">Calling a Script in Another Frame</A>
<LI>
<A HREF="#E68E94" ><IMG SRC="task.gif">Creating a Web Page with VBScript</A>
<LI>
<A HREF="#E68E95" >Workshop Wrap-Up</A>
<UL>
<LI>
<A HREF="#E69E123" >Next Steps</A>
<LI>
<A HREF="#E69E124" >Q&amp;A</A></UL></UL></UL></UL>
<HR ALIGN=CENTER>
<A NAME="E66E36"></A>
<H1 ALIGN=CENTER>
<CENTER>
<FONT SIZE=6 COLOR="#FF0000"><B>- 18 -</B>
<BR><B>Interacting with the Browser</B></FONT></CENTER></H1>
<BR>
<P>In this chapter, you
<BR>
<UL>
<LI>Learn how to programatically open a new window to your specifications
<BR>
<BR>
<LI>Learn how to set the browser's built-in timer
<BR>
<BR>
<LI>Learn how to use VBScript to navigate within a Frame document
<BR>
<BR>
<LI>Learn how to call a VBScript procedure in another document
<BR>
<BR>
<LI>Learn how to create a new document on the fly
<BR>
<BR>
</UL>
<P>Tasks in this chapter:
<BR>
<UL>
<LI>Opening a new browser window via VBScript
<BR>
<BR>
<LI>Using the built-in timer
<BR>
<BR>
<LI>Navigating within frames
<BR>
<BR>
<LI>Calling a script in another frame
<BR>
<BR>
<LI>Creating a Web page with VBScript
<BR>
<BR>
</UL>
<P>A major part of creating interactive Web pages involves interacting directly with the browser. MSIE3.0 makes this task very easy, exposing many of the browser's own objects, properties, events, and methods, which you can include within your scripts. The MSIE3.0 browser itself can be thought of as a combination of several main objects (window, document, location, navigator, and history), as well as several objects that can be present in the current window and document (frame, form, script, and link). Each of these objects can be controlled from VBScript. The extent and depth of that control depends upon the object.
<BR>
<P>In this chapter you will see VBScript used to control some of the browser's objects via their methods and properties. For a complete summary of the objects, properties, events, and methods that form the MSIE Object Model, see Appendix D, &quot;Active Scripting Object Model.&quot;
<BR>
<BR>
<A NAME="E68E90"></A>
<H3 ALIGN=CENTER>
<CENTER>
<FONT SIZE=5 COLOR="#FF0000"><B><IMG SRC="task.gif">Opening a New Browser Window via VBScript</B></FONT></CENTER></H3>
<BR>
<P>The Window object that is at the top of the browser's hierarchical tree exposes a method called Open, which enables you to create a new window to your own specifications via a series of options that come directly from a script.
<BR>
<P>The syntax for Window.Open is as follows: 
<BR>
<BR>
<PRE>
<FONT COLOR="#000080">Window.Open <I>URL</I>, <I>Target</I>, <I>OptionList</I></FONT></PRE>
<P><I>URL</I> is the unique resource locator for the document that you want to load into the new window on opening.
<BR>
<P><I>Target</I> is the name that you want to give to the new window, which enables you to reference the window from hyperlinks in another document through the Target HTML element.
<BR>
<P><I>OptionList</I> is a single complete string made up of a series of comma-delimited option/value pairs, which are listed here: 
<BR>
<UL>
<LI>toolbar=<I>boolean</I>
<BR>
<BR>
<LI>location=<I>boolean</I>
<BR>
<BR>
<LI>directories=<I>boolean</I>
<BR>
<BR>
<LI>status=<I>boolean</I>
<BR>
<BR>
<LI>menubar=<I>boolean</I>
<BR>
<BR>
<LI>scrollbars=<I>boolean</I>
<BR>
<BR>
<LI>resizable=<I>boolean</I>
<BR>
<BR>
<LI>width=<I>pixels</I>
<BR>
<BR>
<LI>height=<I>pixels</I>
<BR>
<BR>
</UL>
<P>Not all of the options in the preceding list have to appear in the option list. You pass an option list as a comma-delimited series of options, as in the following example:
<BR>
<BR>
<PRE>
<FONT COLOR="#000080">&quot;toolbar=no, location=no, status=no, width=300, height=200&quot;</FONT></PRE>
<BLOCKQUOTE>
<BLOCKQUOTE>
<HR ALIGN=CENTER>
<BR>
<NOTE>Unlike the boolean data subtype within VBScript, the boolean data type used for the window object evaluates to 1 = yes and 0 = no. Remember that to set a window property to true, you use the literal yes. </NOTE>
<BR>
<HR ALIGN=CENTER>
</BLOCKQUOTE></BLOCKQUOTE>
<BLOCKQUOTE>
<BLOCKQUOTE>
<HR ALIGN=CENTER>
<BR>
<NOTE>The complete option list for a new browser window, which is specified in the Active Scripting Object Model, has not been fully implemented in MSIE3.0. This means that several of the options in the preceding list are ignored and remain true, regardless of whether you specify yes or no. Later releases of MSIE might extend the functionality of Window.Open. You can use the following sample script to determine which options can and cannot be set using the Window.Open method.</NOTE>
<BR>
<HR ALIGN=CENTER>
</BLOCKQUOTE></BLOCKQUOTE>
<P>Here is a complete example that allows you to experiment with the Window.Open method. You can specify, directly from the Web page, the size of the window, the document to be loaded, and also the elements that will be present in the new window.
<BR>
<OL>
<LI>First, create a simple HTML template like this: 
<BR>
<BR>
<UL>
<UL>
<PRE>
<FONT COLOR="#000080">&lt;HEAD&gt;
&lt;TITLE&gt;Open a New Window&lt;/TITLE&gt;
 &lt;SCRIPT LANGUAGE=&quot;vbscript&quot;&gt;
 &lt;!--
 --&gt;
 &lt;/SCRIPT&gt;
&lt;/HEAD&gt;
&lt;BODY BGCOLOR=&quot;white&quot;&gt;
&lt;FORM NAME=&quot;form1&quot;&gt;
&lt;/FORM&gt;
&lt;/BODY&gt;
&lt;/HTML&gt;</FONT></PRE></UL></UL>
<LI>Between the &lt;FORM&gt; tags, add the form elements that you will use to specify the look of your new window. 
<BR>
<BR>
<UL>
<UL>
<PRE>
<FONT COLOR="#000080">New Window Width&lt;INPUT TYPE=&quot;text&quot; NAME=&quot;WinWidth&quot;&gt;&lt;BR&gt;
New Window Height&lt;INPUT TYPE=&quot;text&quot; NAME=&quot;WinHeight&quot;&gt;&lt;BR&gt;
ToolBar &lt;INPUT TYPE=&quot;checkbox&quot; NAME=&quot;tools&quot;&gt;&lt;BR&gt;
Location &lt;INPUT TYPE=&quot;checkbox&quot; NAME=&quot;loc&quot;&gt;&lt;BR&gt;
MenuBar &lt;INPUT TYPE=&quot;checkbox&quot; NAME=&quot;menu&quot;&gt;&lt;BR&gt;
ScrollBars &lt;INPUT TYPE=&quot;checkbox&quot; NAME=&quot;scrolls&quot;&gt;&lt;BR&gt;
ReSizable &lt;INPUT TYPE=&quot;checkbox&quot; NAME=&quot;resize&quot;&gt;&lt;BR&gt;
Directories &lt;INPUT TYPE=&quot;checkbox&quot; NAME=&quot;dirs&quot;&gt;&lt;BR&gt;
Status&lt;INPUT TYPE=&quot;checkbox&quot; NAME=&quot;stat&quot;&gt;&lt;BR&gt;
URL &lt;INPUT TYPE=&quot;text&quot; NAME=&quot;url&quot;&gt;&lt;BR&gt;
New Window Name &lt;INPUT TYPE=&quot;text&quot; NAME=&quot;WinName&quot;&gt;&lt;BR&gt;
&lt;INPUT TYPE=&quot;button&quot; NAME=&quot;cmdButton1&quot; VALUE=&quot;Open Now&quot;&gt;</FONT></PRE></UL></UL>
<LI>Save the file as newwin.htm, and run it through the browser just to ensure that everything is correct with the HTML side of things before you progress on the scripting. The file should look like the one in Figure 18.1. 
<BR>
<BR>
</OL>
<P><B><A HREF="18lax01.gif">Figure 18.1. Testing that the HTML part of newwin.htm is bug-free.</A></B>
<BR>
<P>Now for the script. Unfortunately, you cannot directly relate the checkbox's checked property,  which is either True if checked or False if unchecked, to the browser window's option list properties because the browser window's options only understand yes and no. Even using the numeric equivalent doesn't work: True = -1 but yes = 1. Therefore, each element of the option list must have a conditional statement block written for it, which is somewhat tedious. But when you get your copy (Ctrl+C)and paste (Ctrl+V) fingers working, it doesn't take too long.
<BR>
<OL>
<LI>The first thing to do is create the prototype for the event handler and also declare a variable to hold the option list string.
<BR>
<BR>
<UL>
<UL>
<PRE>
<FONT COLOR="#000080">Sub cmdButton1_OnClick
 Dim strNewWin</FONT></PRE></UL></UL>
<LI>The first option list element is the toolbar, as you see in the following code. You simply find out whether the checkbox is checked and, if so, concatenate yes to the string; otherwise, you concatenate no. Don't forget the very important comma after each element.
<BR>
<BR>
<UL>
<UL>
<PRE>
<FONT COLOR="#000080">strNewWin = &quot;toolbar=&quot;
If Document.form1.tools.Checked Then
 strNewWin = strNewWin &amp; &quot;yes&quot; &amp; &quot;, &quot;
Else
 strNewWin = strNewWin &amp; &quot;no&quot; &amp; &quot;, &quot;
End If</FONT></PRE></UL></UL>
<LI>The rest of the elements are very similar: 
<BR>
<BR>
<UL>
<UL>
<PRE>
<FONT COLOR="#000080">strNewWin = strNewWin &amp; &quot;location=&quot;
If Document.form1.loc.Checked Then
 strNewWin = strNewWin &amp; &quot;yes&quot; &amp; &quot;, &quot;
Else
 strNewWin = strNewWin &amp; &quot;no&quot; &amp; &quot;, &quot;
End If
strNewWin = strNewWin &amp; &quot;directories=&quot;
If Document.form1.dirs.Checked Then
 strNewWin = strNewWin &amp; &quot;yes&quot; &amp; &quot;, &quot;
Else
 strNewWin = strNewWin &amp; &quot;no&quot; &amp; &quot;, &quot;
End If
strNewWin = strNewWin &amp; &quot;status=&quot;
If Document.form1.stat.Checked Then
 strNewWin = strNewWin &amp; &quot;yes&quot; &amp; &quot;, &quot;
Else
 strNewWin = strNewWin &amp; &quot;no&quot; &amp; &quot;, &quot;
End If
strNewWin = strNewWin &amp; &quot;menubar=&quot;
If Document.form1.menu.Checked Then
 strNewWin = strNewWin &amp; &quot;yes&quot; &amp; &quot;, &quot;
Else
 strNewWin = strNewWin &amp; &quot;no&quot; &amp; &quot;, &quot;
End If
strNewWin = strNewWin &amp; &quot;scrollbars=&quot;
If Document.form1.scrolls.Checked Then
 strNewWin = strNewWin &amp; &quot;yes&quot; &amp; &quot;, &quot;
Else
 strNewWin = strNewWin &amp; &quot;no&quot; &amp; &quot;, &quot;
End If
strNewWin = strNewWin &amp; &quot;resizeable=&quot;
If Document.form1.resize.Checked Then
 strNewWin = strNewWin &amp; &quot;yes&quot; &amp; &quot;, &quot;
Else
 strNewWin = strNewWin &amp; &quot;no&quot; &amp; &quot;, &quot;
End If</FONT></PRE></UL></UL>
<LI>The width and height elements take their values directly from the form. 
<BR>
<BR>
<UL>
<UL>
<PRE>
<FONT COLOR="#000080">strNewWin = strNewWin &amp; &quot;width=&quot;
strNewWin = strNewWin &amp; CStr(Document.form1.WinWidth.Value) &amp; &quot;, &quot;
strNewWin = strNewWin &amp; &quot;height=&quot;
strNewWin = strNewWin &amp; CStr(Document.form1.WinHeight.Value)</FONT></PRE></UL></UL>
<LI>Just so you can see what is happening with the option list, add an Alert displaying strNewWin. 
<BR>
<BR>
<UL>
<UL>
<BR>
<PRE>
<FONT COLOR="#000080">Alert strNewWin</FONT></PRE></UL></UL>
<LI>Finally, you add the code to create the new window to your personal specifications. Don't forget to close the procedure with an End Sub. 
<BR>
<BR>
</OL>
<UL>
<UL>
<PRE>
<FONT COLOR="#000080"> Window.Open Document.form1.URL.Value, Document.form1.WinName.Value, strNewWin
End Sub </FONT></PRE></UL></UL>
<P>Listing 18.1 shows the complete code for the example. 
<BR>
<P>
<FONT COLOR="#000080"><B>Listing 18.1. The newwin.htm code.</B></FONT>
<BR>
<PRE>
<FONT COLOR="#000080">&lt;HTML&gt;
&lt;HEAD&gt;
&lt;TITLE&gt;Open a New Window&lt;/TITLE&gt;
 &lt;SCRIPT LANGUAGE=&quot;vbscript&quot;&gt;
 &lt;!--
 Sub cmdButton1_OnClick
  Dim strNewWin
  
  strNewWin = &quot;toolbar=&quot;
  If Document.form1.tools.Checked Then
   strNewWin = strNewWin &amp; &quot;yes&quot; &amp; &quot;, &quot;
  Else
   strNewWin = strNewWin &amp; &quot;no&quot; &amp; &quot;, &quot;
  End If
  strNewWin = strNewWin &amp; &quot;location=&quot;
  If Document.form1.loc.Checked Then
   strNewWin = strNewWin &amp; &quot;yes&quot; &amp; &quot;, &quot;
  Else
   strNewWin = strNewWin &amp; &quot;no&quot; &amp; &quot;, &quot;
  End If
  strNewWin = strNewWin &amp; &quot;directories=&quot;
  If Document.form1.dirs.Checked Then
   strNewWin = strNewWin &amp; &quot;yes&quot; &amp; &quot;, &quot;
  Else
   strNewWin = strNewWin &amp; &quot;no&quot; &amp; &quot;, &quot;
  End If
  strNewWin = strNewWin &amp; &quot;status=&quot;
  If Document.form1.stat.Checked Then
   strNewWin = strNewWin &amp; &quot;yes&quot; &amp; &quot;, &quot;
  Else
   strNewWin = strNewWin &amp; &quot;no&quot; &amp; &quot;, &quot;
  End If
  strNewWin = strNewWin &amp; &quot;menubar=&quot;
  If Document.form1.menu.Checked Then
   strNewWin = strNewWin &amp; &quot;yes&quot; &amp; &quot;, &quot;
  Else
   strNewWin = strNewWin &amp; &quot;no&quot; &amp; &quot;, &quot;
  End If
  strNewWin = strNewWin &amp; &quot;scrollbars=&quot;
  If Document.form1.scrolls.Checked Then
   strNewWin = strNewWin &amp; &quot;yes&quot; &amp; &quot;, &quot;
  Else
   strNewWin = strNewWin &amp; &quot;no&quot; &amp; &quot;, &quot;
  End If
  strNewWin = strNewWin &amp; &quot;resizeable=&quot;
  If Document.form1.resize.Checked Then
   strNewWin = strNewWin &amp; &quot;yes&quot; &amp; &quot;, &quot;
  Else
   strNewWin = strNewWin &amp; &quot;no&quot; &amp; &quot;, &quot;
  End If
  strNewWin = strNewWin &amp; &quot;width=&quot;
  strNewWin = strNewWin &amp; CStr(Document.form1.WinWidth.Value) &amp; &quot;, &quot;
  strNewWin = strNewWin &amp; &quot;height=&quot;
  strNewWin = strNewWin &amp; CStr(Document.form1.WinHeight.Value)
  Alert strNewWin
  
  
  Window.Open Document.form1.URL.Value, Document.form1.WinName.Value, strNewWin
 End Sub 
 --&gt;
 &lt;/SCRIPT&gt;
&lt;/HEAD&gt;
&lt;BODY BGCOLOR=&quot;white&quot;&gt;
&lt;FORM NAME=&quot;form1&quot;&gt;
New Window Width&lt;INPUT TYPE=&quot;text&quot; NAME=&quot;WinWidth&quot;&gt;&lt;BR&gt;
New Window Height&lt;INPUT TYPE=&quot;text&quot; NAME=&quot;WinHeight&quot;&gt;&lt;BR&gt;
ToolBar &lt;INPUT TYPE=&quot;checkbox&quot; NAME=&quot;tools&quot;&gt;&lt;BR&gt;
Location &lt;INPUT TYPE=&quot;checkbox&quot; NAME=&quot;loc&quot;&gt;&lt;BR&gt;
MenuBar &lt;INPUT TYPE=&quot;checkbox&quot; NAME=&quot;menu&quot;&gt;&lt;BR&gt;
ScrollBars &lt;INPUT TYPE=&quot;checkbox&quot; NAME=&quot;scrolls&quot;&gt;&lt;BR&gt;
ReSizable &lt;INPUT TYPE=&quot;checkbox&quot; NAME=&quot;resize&quot;&gt;&lt;BR&gt;
Directories &lt;INPUT TYPE=&quot;checkbox&quot; NAME=&quot;dirs&quot;&gt;&lt;BR&gt;
Status&lt;INPUT TYPE=&quot;checkbox&quot; NAME=&quot;stat&quot;&gt;&lt;BR&gt;
URL &lt;INPUT TYPE=&quot;text&quot; NAME=&quot;url&quot;&gt;&lt;BR&gt;
New Window Name &lt;INPUT TYPE=&quot;text&quot; NAME=&quot;WinName&quot;&gt;&lt;BR&gt;
&lt;INPUT TYPE=&quot;button&quot; NAME=&quot;cmdButton1&quot; VALUE=&quot;Open Now&quot;&gt;
&lt;/FORM&gt;
&lt;/BODY&gt;
&lt;/HTML&gt;</FONT></PRE>
<P>Save the file and run it though the browser. Try different combinations of elements, as shown in Figure 18.2, remembering that the Window.Open method was not fully implemented in the first release of MSIE3.0. 
<BR>
<P><B><A HREF="18lax02.gif">Figure 18.2. Specifying the new window.</A></B>
<BR>
<P>When you click the Open Now button, an alert box shows you the complete option list with values that will be passed to the Window.Open method, as shown in Figure 18.3.
<BR>
<P><B><A HREF="18lax03.gif">Figure 18.3. So that's what the option list looks like!</A></B>
<BR>
<P>The new window opens and loads the HTML file specified by you in the URL text box, as shown in Figure 18.4. 
<BR>
<P><B><A HREF="18lax04.gif">Figure 18.4. The tailor-made new window.</A></B>
<BR>
<BR>
<A NAME="E68E91"></A>
<H3 ALIGN=CENTER>
<CENTER>
<FONT SIZE=5 COLOR="#FF0000"><B><IMG SRC="task.gif">Setting a TimeOut</B></FONT></CENTER></H3>
<BR>
<P>What's a TimeOut? The SetTimeOut method of the window object calls a built-in timer. You simply specify what you want to happen after a certain period of time. For example, you can set the timer to execute one of your scripted procedures, show a message, or clear the status bar. Here's the syntax: 
<BR>
<BR>
<PRE>
<FONT COLOR="#000080">Id = <B>SetTimeout</B>(&quot;actionstring&quot;,milliseconds)</FONT></PRE>
<P>actionstring is a self-contained string containing a method, procedure, or function. Here is an example:
<BR>
<BR>
<PRE>
<FONT COLOR="#000080">&quot;Status='Hello World'&quot;</FONT></PRE>
<P>Notice that if you want to use quotes within the quotes of the action string, you must use single quotes, or build the string using Chr(34) in place of the double quotes, like this:
<BR>
<BR>
<PRE>
<FONT COLOR="#000080">&quot;Status=&quot; &amp; Chr(34) &amp; &quot;Hello World&quot; Chr(34)</FONT></PRE>
<P>The SetTimeOut method returns the ID of the timer, which enables you to reference the timer. For example, you can cancel the timer prior to execution, like this:
<BR>
<BR>
<PRE>
<FONT COLOR="#000080">clearTimeOut <I>ID</I></FONT></PRE>
<P>The SetTimeOut method,  therefore, lets you create a script that appears to execute automatically. However, don't confuse the browser's built-in timer with the ActiveX Timer Control, which repeatedly executes an event handler at given intervals. The browser's timer executes only once. After it has executed, the ID is cleared and the timer is reset.
<BR>
<P>Here's a short and simple example to demonstrate how to add the built-in timer to your script: 
<BR>
<OL>
<LI>Start with your normal HTML template.
<BR>
<BR>
<UL>
<UL>
<PRE>
<FONT COLOR="#000080">&lt;HTML&gt;
&lt;HEAD&gt;
&lt;TITLE&gt;Timeout&lt;/TITLE&gt;
 &lt;SCRIPT LANGUAGE=&quot;vbscript&quot;&gt;
 &lt;!--
 --&gt;
 &lt;/SCRIPT&gt;
&lt;/HEAD&gt;
&lt;BODY BGCOLOR=&quot;white&quot;&gt;
&lt;/BODY&gt;
&lt;/HTML&gt;</FONT></PRE></UL></UL>
<LI>Add a form between the &lt;BODY&gt; tags. The form contains two text boxes and a button. 
<BR>
<BR>
<UL>
<UL>
<PRE>
<FONT COLOR="#000080">&lt;FORM NAME=&quot;form1&quot;&gt;
Enter Timeout &lt;INPUT TYPE=&quot;text&quot; NAME=&quot;TimeVal&quot;&gt;&lt;BR&gt;
&lt;INPUT TYPE=&quot;button&quot; NAME=&quot;cmdButton1&quot; VALUE=&quot;OK&quot;&gt;&lt;P&gt;
&lt;INPUT TYPE=&quot;text&quot; NAME=&quot;AutoVal&quot;&gt;
&lt;/FORM&gt;</FONT></PRE></UL></UL>
<LI>Now for the simple script, which is the event handler for the cmdButton1 button.
<BR>
<BR>
</OL>
<UL>
<UL>
<PRE>
<FONT COLOR="#000080">Sub cmdButton1_OnClick
  xID = setTimeout(&quot;Document.form1.AutoVal.Value='Hello World'&quot;, CInt(Document.form1.TimeVal.Value))
End Sub</FONT></PRE></UL></UL>
<P>Here's the full code: 
<BR>
<PRE>
<FONT COLOR="#000080">&lt;HTML&gt;
&lt;HEAD&gt;
&lt;TITLE&gt;Timeout&lt;/TITLE&gt;
 &lt;SCRIPT LANGUAGE=&quot;vbscript&quot;&gt;
 &lt;!--
 Sub cmdButton1_OnClick
   xID = setTimeout(&quot;Document.form1.AutoVal.Value='Hello World'&quot;, CInt(Document.form1.TimeVal.Value))
 End Sub 
 --&gt;
 &lt;/SCRIPT&gt;
&lt;/HEAD&gt;
&lt;BODY BGCOLOR=&quot;white&quot;&gt;
&lt;FORM NAME=&quot;form1&quot;&gt;
Enter Timeout &lt;INPUT TYPE=&quot;text&quot; NAME=&quot;TimeVal&quot;&gt;&lt;BR&gt;
&lt;INPUT TYPE=&quot;button&quot; NAME=&quot;cmdButton1&quot; VALUE=&quot;OK&quot;&gt;&lt;P&gt;
&lt;INPUT TYPE=&quot;text&quot; NAME=&quot;AutoVal&quot;&gt;
&lt;/FORM&gt;
&lt;/BODY&gt;
&lt;/HTML&gt;</FONT></PRE>
<P>When you click the button, the value you entered into the first text box (shown in Figure 18.5) is converted to an integer value and used as the timeout time value. Remember that this value is in milliseconds. At the end of the timeout period, the old chestnut &quot;Hello World&quot; is shown in the second text box, as shown in Figure 18.6. 
<BR>
<P><B><A HREF="18lax05.gif">Figure 18.5. Enter a value for the timer in milliseconds.</A></B>
<BR>
<P><B><A HREF="18lax06.gif">Figure 18.6. And as if by magic...</A></B>
<BR>
<BR>
<A NAME="E68E92"></A>
<H3 ALIGN=CENTER>
<CENTER>
<FONT SIZE=5 COLOR="#FF0000"><B><IMG SRC="task.gif">Navigating within Frames</B></FONT></CENTER></H3>
<BR>
<P>With frame documents becoming so popular&#151;especially with the enhancement of MSIE3.0 borderless frames&#151;you need to know how to reference more than one document within a window from within your scripts. But, first you need to understand how the browser treats frames internally.
<BR>
<P>The Frame is a subobject whose parent is the Window object(often referred to within the script as top). Each Window object has at least one frame, which means that a non-frame document is held within a frame that is, in fact, the main window (although you would never go to the trouble of referencing it). Where there is more than one frame in a frameset, the frames are held within an array called Frames, and they can be referenced as such. For example, if you set up a &lt;FRAMESET&gt; with two documents in two frames, the first document could be referenced as follows:
<BR>
<BR>
<PRE>
<FONT COLOR="#000080">Top.Frames(0).Document</FONT></PRE>
<P>And the second document could be referenced like this:
<BR>
<BR>
<PRE>
<FONT COLOR="#000080">Top.Frames(1).Document</FONT></PRE>
<P>A much easier way is to give your frames a name when you create them in the &lt;FRAMESET&gt; document: 
<BR>
<BR>
<PRE>
<FONT COLOR="#000080">&lt;FRAME NAME=&quot;scriptframe&quot; SRC=&quot;script.htm&quot;&gt;</FONT></PRE>
<P>The document in this frame can now be referenced like this:
<BR>
<BR>
<PRE>
<FONT COLOR="#000080">Top.scriptframe.document</FONT></PRE>
<P>When you can reference other frames within a frameset, you can create a frameset with one main script document that controls the documents in the other frames, as the following example shows: 
<BR>
<OL>
<LI>First, create the frameset document and save it as vbsframes.htm.
<BR>
<BR>
<UL>
<UL>
<PRE>
<FONT COLOR="#000080">&lt;HTML&gt;
&lt;HEAD&gt;&lt;TITLE&gt;Using VBScript in Frames(1)&lt;/TITLE&gt;&lt;/HEAD&gt;
&lt;FRAMESET COLS=50%,50%&gt;
 &lt;FRAME NAME=&quot;scriptframe&quot; SRC=&quot;script.htm&quot;&gt;
 &lt;FRAME NAME=&quot;docframe&quot; SRC=&quot;doc1.htm&quot;&gt;
&lt;FRAMESET&gt;
&lt;/HTML&gt;</FONT></PRE></UL></UL>
<LI>Create an HTML template document,  which will hold the script. 
<BR>
<BR>
<UL>
<UL>
<PRE>
<FONT COLOR="#000080">&lt;HTML&gt;
&lt;HEAD&gt;&lt;TITLE&gt;Script&lt;/TITLE&gt;
&lt;SCRIPT LANGUAGE=&quot;vbscript&quot;&gt;
&lt;!--
--&gt;
&lt;/SCRIPT&gt;
&lt;BODY BGCOLOR=&quot;white&quot;&gt;
&lt;/BODY&gt;
&lt;/HTML&gt;</FONT></PRE></UL></UL>
<LI>Finish the HTML with two Command buttons on the page, each of which will eventually load a new page in the right frame.
<BR>
<BR>
<UL>
<UL>
<PRE>
<FONT COLOR="#000080">&lt;CENTER&gt;
&lt;H2&gt;Script Document&lt;/H2&gt;
&lt;INPUT TYPE=&quot;button&quot; NAME=&quot;cmdButton1&quot; VALUE=&quot;Load Page 2 in Frame&quot;&gt;
&lt;P&gt;
&lt;INPUT TYPE=&quot;button&quot; NAME=&quot;cmdButton2&quot; VALUE=&quot;Load Page 3 in Frame&quot;&gt;</FONT></PRE></UL></UL>
<LI>Save the file as script.htm.
<BR>
<BR>
<LI>Create the two event handlers for the buttons. Simply as a demonstration, the two buttons use a different way of referencing the second frame: one by ordinal number in the Frames array, and the other by name. 
<BR>
<BR>
</OL>
<UL>
<UL>
<PRE>
<FONT COLOR="#000080">Sub cmdButton1_OnClick
 Top.docframe.Location.href = &quot;doc2.htm&quot;
End Sub
Sub cmdButton2_OnClick
 Top.frames(1).Location.href = &quot;doc3.htm&quot;
End Sub</FONT></PRE></UL></UL>
<P>Here's the complete source for script.htm: 
<BR>
<PRE>
<FONT COLOR="#000080">&lt;HTML&gt;
&lt;HEAD&gt;&lt;TITLE&gt;Script&lt;/TITLE&gt;
&lt;SCRIPT LANGUAGE=&quot;vbscript&quot;&gt;
&lt;!--
Sub cmdButton1_OnClick
 Top.docframe.Location.href = &quot;doc2.htm&quot;
End Sub
Sub cmdButton2_OnClick
 Top.frames(1).Location.href = &quot;doc3.htm&quot;
End Sub
--&gt;
&lt;/SCRIPT&gt;
&lt;BODY BGCOLOR=&quot;white&quot;&gt;
&lt;CENTER&gt;
&lt;H2&gt;Script Document&lt;/H2&gt;
&lt;INPUT TYPE=&quot;button&quot; NAME=&quot;cmdButton1&quot; VALUE=&quot;Load Page 2 in Frame&quot;&gt;
&lt;P&gt;
&lt;INPUT TYPE=&quot;button&quot; NAME=&quot;cmdButton2&quot; VALUE=&quot;Load Page 3 in Frame&quot;&gt;
&lt;/BODY&gt;
&lt;/HTML&gt;</FONT></PRE>
<P>When you load vbsframes.htm into the browser, it loads script.htm into the left frame and doc1.htm into the right frame, as shown in Figure 18.7. When you click the buttons, the appropriate file&#151;either doc2.htm or doc3.htm&#151;is loaded into the right frame,  as shown in Figure 18.8. The files doc1.htm, doc2.htm, and doc3.htm can be found on the CD-ROM that accompanies this book. 
<BR>
<P><B><A HREF="18lax07.gif">Figure 18.7. The frameset as it loads.</A></B>
<BR>
<P><B><A HREF="18lax08.gif">Figure 18.8. Button 1 clicked.</A></B>
<BR>
<BR>
<A NAME="E68E93"></A>
<H3 ALIGN=CENTER>
<CENTER>
<FONT SIZE=5 COLOR="#FF0000"><B><IMG SRC="task.gif">Calling a Script in Another Frame</B></FONT></CENTER></H3>
<BR>
<P>Let's take the idea of using VBScript within frames a stage further. In this example, you'll see how you can actually call a procedure, which resides in one document, from a script in another unrelated document. The following example uses frames to demonstrate this, but you can translate its functionality to separate windows just as easily&#151;assuming that you know the name of the second window.
<BR>
<P>The concept of being able to call procedures, functions, and even event handlers in other documents is a powerful one. For example, you can create a frameset in which just one of the documents holds regularly used or common functions that are accessed by the scripts in other documents. It can quite literally present you with unlimited possibilities.
<BR>
<P>The following example calls the OnClick event handler of a button in the second document, as though the user had clicked that button.
<BR>
<OL>
<LI>Again, create a frameset for the example, and save this one as remote.htm. 
<BR>
<BR>
<UL>
<UL>
<PRE>
<FONT COLOR="#000080">&lt;HTML&gt;
&lt;HEAD&gt;&lt;TITLE&gt;Using a remote script&lt;/TITLE&gt;&lt;/HEAD&gt;
&lt;FRAMESET COLS=50%,50%&gt;
 &lt;FRAME NAME=&quot;scriptframe&quot; SRC=&quot;script2.htm&quot;&gt;
 &lt;FRAME NAME=&quot;docframe&quot; SRC=&quot;doc4.htm&quot;&gt;
&lt;FRAMESET&gt;
&lt;/HTML&gt;</FONT></PRE></UL></UL>
<LI>Create an HTML template. 
<BR>
<BR>
<UL>
<UL>
<PRE>
<FONT COLOR="#000080">&lt;HTML&gt;
&lt;HEAD&gt;
&lt;SCRIPT LANGUAGE=&quot;vbscript&quot;&gt;
&lt;/SCRIPT&gt;
&lt;BODY BGCOLOR=&quot;white&quot;&gt;
&lt;/BODY&gt;
&lt;/HTML&gt;</FONT></PRE></UL></UL>
<LI>This page will contain one button and one text box within an HTML form, so your next step is to add the following HTML between the Body tags.
<BR>
<BR>
<UL>
<UL>
<PRE>
<FONT COLOR="#000080">&lt;CENTER&gt;
&lt;H2&gt;Remote Script&lt;/H2&gt;
&lt;/CENTER&gt;
&lt;FORM NAME=&quot;Form1&quot;&gt;
&lt;INPUT TYPE=&quot;text&quot; NAME=&quot;Text1&quot; SIZE=30&gt;
&lt;P&gt;
&lt;INPUT TYPE=&quot;button&quot; NAME=&quot;Command1&quot; VALUE=&quot;Click Me&quot;&gt;
&lt;/FORM&gt;</FONT></PRE></UL></UL>
<LI>Now add the event handler for Command1 between the &lt;SCRIPT&gt; tags. 
<BR>
<BR>
<UL>
<UL>
<PRE>
<FONT COLOR="#000080">Sub Command1_OnClick
 Document.Form1.Text1.Value = &quot;Hello World&quot;
End Sub</FONT></PRE></UL></UL>
<LI>Save the file as doc4.htm. This file resides in the right frame and can be used on its own, but it will be used as the remote script that is called by the script in the left frame.
<BR>
<BR>
<LI>To create the document for the left frame, you need to create another HTML template as described in step 2.
<BR>
<BR>
<LI>Now add the following button between the body tags.
<BR>
<BR>
<UL>
<UL>
<PRE>
<FONT COLOR="#000080">&lt;CENTER&gt;
&lt;H2&gt;Script Document&lt;/H2&gt;
&lt;INPUT TYPE=&quot;button&quot; NAME=&quot;cmdButton1&quot; VALUE=&quot;Put text over there&quot;&gt;
&lt;P&gt;
&lt;INPUT TYPE=&quot;button&quot; NAME=&quot;cmdButton2&quot; VALUE=&quot;Execute Remote Script&quot;&gt;</FONT></PRE></UL></UL>
<LI>Save this second file as script2.htm.
<BR>
<BR>
<LI>The script for the script2.htm file performs two tasks. The first button puts the phrase Where did this come from? in the text box of the document in the right frame. The second button calls the event handler of the button in the right frame, thereby programatically replicating a click on the button. Here's the event handlers for the two buttons: 
<BR>
<BR>
</OL>
<UL>
<UL>
<PRE>
<FONT COLOR="#000080">Sub cmdButton1_OnClick
 Top.docframe.Form1.Text1.Value = &quot;Where did this come from?&quot;
End Sub
Sub cmdButton2_OnClick
 Call Top.docframe.Command1_OnClick()
End Sub</FONT></PRE></UL></UL>
<P>Here's the complete source for the two files: 
<BR>
<PRE>
<FONT COLOR="#000080">&lt;HTML&gt;
&lt;HEAD&gt;
&lt;SCRIPT LANGUAGE=&quot;vbscript&quot;&gt;
Sub Command1_OnClick
 Document.Form1.Text1.Value = &quot;Hello World&quot;
End Sub
&lt;/SCRIPT&gt;
&lt;BODY BGCOLOR=&quot;white&quot;&gt;
&lt;CENTER&gt;
&lt;H2&gt;Remote Script&lt;/H2&gt;
&lt;/CENTER&gt;
&lt;FORM NAME=&quot;Form1&quot;&gt;
&lt;INPUT TYPE=&quot;text&quot; NAME=&quot;Text1&quot; SIZE=30&gt;
&lt;P&gt;
&lt;INPUT TYPE=&quot;button&quot; NAME=&quot;Command1&quot; VALUE=&quot;Click Me&quot;&gt;
&lt;/FORM&gt;
&lt;/BODY&gt;
&lt;/HTML&gt;
&lt;HTML&gt;
&lt;HEAD&gt;&lt;TITLE&gt;Script&lt;/TITLE&gt;
&lt;SCRIPT LANGUAGE=&quot;vbscript&quot;&gt;
&lt;!--
Sub cmdButton1_OnClick
 Top.docframe.Form1.Text1.Value = &quot;Where did this come from?&quot;
End Sub
Sub cmdButton2_OnClick
 Call Top.docframe.Command1_OnClick()
End Sub
--&gt;
&lt;/SCRIPT&gt;
&lt;BODY BGCOLOR=&quot;white&quot;&gt;
&lt;CENTER&gt;
&lt;H2&gt;Script Document&lt;/H2&gt;
&lt;INPUT TYPE=&quot;button&quot; NAME=&quot;cmdButton1&quot; VALUE=&quot;Put text over there&quot;&gt;
&lt;P&gt;
&lt;INPUT TYPE=&quot;button&quot; NAME=&quot;cmdButton2&quot; VALUE=&quot;Execute Remote Script&quot;&gt;
&lt;/BODY&gt;
&lt;/HTML&gt;</FONT></PRE>
<P>When you run this example through the browser, you can click the top button in the left frame, which automatically enters text in the right frame from the script in the left frame. (See Figure 18.9.) When you click the bottom button in the left frame, you are calling the event handling script that is part of the document in the right frame, thereby programatically &quot;clicking&quot; the button in the right frame, as shown in Figure 18.10. 
<BR>
<P><B><A HREF="18lax09.gif">Figure 18.9. Click the &quot;Put text over there&quot; button.</A></B>
<BR>
<P><B><A HREF="18lax10.gif">Figure 18.10. Click the &quot;Execute Remote Script&quot; button.</A></B>
<BR>
<BR>
<A NAME="E68E94"></A>
<H3 ALIGN=CENTER>
<CENTER>
<FONT SIZE=5 COLOR="#FF0000"><B><IMG SRC="task.gif">Creating a Web Page with VBScript</B></FONT></CENTER></H3>
<BR>
<P>What could be more dynamic and interactive than one Web page that has the power to create an almost infinitely variable number of other Web pages without referring back to the server? It sounds almost too good to be true, but that is exactly what you can do with the Document.Write method. 
<BR>
<P>The Write method of the Document object enables you to create variable Web pages at runtime, or it can be used to add variable elements to the Web page as the page is loading. The syntax for Document.Write is as follows: 
<BR>
<BR>
<PRE>
<FONT COLOR="#000080">Document.Write <I>string</I></FONT></PRE>
<P>The <I>string</I> that you pass to the Write method can contain any HTML tags and any text you want to place on the page, as in the following example:
<BR>
<BR>
<PRE>
<FONT COLOR="#000080">Document.Write &quot;&lt;H2&gt;This is a heading&lt;/H2&gt;&quot;</FONT></PRE>
<P>It could also be an expression, like this:
<BR>
<BR>
<PRE>
<FONT COLOR="#000080">Document.Write &quot;The date is &quot; &amp; Date()</FONT></PRE>
<P>If you are using Document.write to add variable elements to a Web page as it downloads to the browser, you simply place the code in line with the rest of the HTML for the document. Enclose the method within SCRIPT tags, without any sub or function, as shown here: 
<BR>
<PRE>
<FONT COLOR="#000080">...
&lt;TABLE WIDTH=80%&gt;
&lt;TD&gt;
&lt;SCRIPT LANGUAGE=&quot;vbscript&quot;&gt;
Document.Write &quot;The date is &quot; &amp; Date()
&lt;/SCRIPT&gt;
&lt;TD&gt;
...</FONT></PRE>
<P>To create a new document,  use Document.Write in conjunction with Document.Open and Document.Close. But remember that if you use the current window or frame to write your new document to, the Web page containing the script that is creating the page will be overwritten in the browser. Therefore, it is wise to create new documents in a second frame or window. The following example shows you how this is done: 
<BR>
<OL>
<LI>First, create the &lt;FRAMESET&gt; document. 
<BR>
<BR>
<UL>
<UL>
<PRE>
<FONT COLOR="#000080">&lt;HTML&gt;
&lt;HEAD&gt;&lt;TITLE&gt;Build a Document&lt;/TITLE&gt;&lt;/HEAD&gt;
&lt;FRAMESET COLS=50%,50%&gt;
 &lt;FRAME NAME=&quot;scriptframe&quot; SRC=&quot;docscript.htm&quot;&gt;
 &lt;FRAME NAME=&quot;docframe&quot; SRC=&quot;tempdoc.htm&quot;&gt;
&lt;FRAMESET&gt;
&lt;/HTML&gt;</FONT></PRE></UL></UL>
<BR>
<LI>Note the tempdoc.htm page in the second frame. This is an HTML document that contains only &lt;HTML&gt; and &lt;BODY&gt; tags.
<BR>
<BR>
<LI>Now create a simple template. 
<BR>
<BR>
<UL>
<UL>
<PRE>
<FONT COLOR="#000080">&lt;HTML&gt;
&lt;HEAD&gt;&lt;TITLE&gt;Script&lt;/TITLE&gt;
&lt;SCRIPT LANGUAGE=&quot;vbscript&quot;&gt;
&lt;!--
--&gt;
&lt;/SCRIPT&gt;
&lt;BODY BGCOLOR=&quot;white&quot;&gt;
&lt;/BODY&gt;
&lt;/HTML&gt;</FONT></PRE></UL></UL>
<BR>
<LI>Save the preceding code as docscript.htm.
<BR>
<BR>
<LI>Now add an HTML form.  The example you are creating here enables you to automatically create a document that displays a heading and body text, the data for which is entered in the form. Here's the rest of the HTML work for the page:
<BR>
<BR>
<UL>
<UL>
<PRE>
<FONT COLOR="#000080">&lt;CENTER&gt;
&lt;H2&gt;Build a New Document&lt;/H2&gt;
&lt;FORM NAME=&quot;form1&quot;&gt;
Enter a Heading&lt;INPUT TYPE=&quot;text&quot; NAME=&quot;heading&quot; SIZE=30&gt;&lt;P&gt;
Enter the message
&lt;TEXTAREA NAME=&quot;thetext&quot; ROWS=6 COLS=40 WRAP=VIRTUAL&gt;&lt;/TEXTAREA&gt;&lt;P&gt;
&lt;INPUT TYPE=&quot;button&quot; NAME=&quot;cmdButton1&quot; VALUE=&quot;Build Now&quot;&gt;
&lt;/FORM&gt;</FONT></PRE></UL></UL>
<BR><LI>The script is to be attached to the Event handler for cmdButton1 and is a series of Document.Write methods to build up the new document in the right frame. 
<BR>
<BR>
<UL>
<UL>
<PRE>
<FONT COLOR="#000080">Sub cmdButton1_OnClick
 top.docframe.Document.Open
 top.docframe.Document.Write &quot;&lt;HTML&gt;&lt;BODY BGCOLOR=white&gt;&quot;
 top.docframe.Document.Write &quot;&lt;FONT FACE=arial SIZE=2&gt;&quot;
 top.docframe.Document.Write &quot;&lt;CENTER&gt;&lt;H3&gt;&quot;
 top.docframe.Document.Write Document.form1.heading.value
 top.docframe.Document.Write &quot;&lt;/H3&gt;&lt;/CENTER&gt;&lt;P&gt;&lt;BLOCKQUOTE&gt;&quot;
 top.docframe.Document.Write Document.form1.thetext.value
 top.docframe.Document.Write &quot;&lt;/BLOCKQUOTE&gt;&quot;
 top.docframe.Document.Write &quot;&lt;/BODY&gt;&lt;/HTML&gt;&quot;
 top.docframe.Document.Close
 
End Sub</FONT></PRE></UL></UL>
<BR>
<LI>Save the file and run it through the browser.
<BR>
<BR>
</OL>
<P>Here's the complete code for this example: 
<BR>
<PRE>
<FONT COLOR="#000080">&lt;HTML&gt;
&lt;HEAD&gt;&lt;TITLE&gt;Script&lt;/TITLE&gt;
&lt;SCRIPT LANGUAGE=&quot;vbscript&quot;&gt;
&lt;!--
Sub cmdButton1_OnClick
 top.docframe.Document.Open
 top.docframe.Document.Write &quot;&lt;HTML&gt;&lt;BODY BGCOLOR=white&gt;&quot;
 top.docframe.Document.Write &quot;&lt;FONT FACE=arial SIZE=2&gt;&quot;
 top.docframe.Document.Write &quot;&lt;CENTER&gt;&lt;H3&gt;&quot;
 top.docframe.Document.Write Document.form1.heading.value
 top.docframe.Document.Write &quot;&lt;/H3&gt;&lt;/CENTER&gt;&lt;P&gt;&lt;BLOCKQUOTE&gt;&quot;
 top.docframe.Document.Write Document.form1.thetext.value
 top.docframe.Document.Write &quot;&lt;/BLOCKQUOTE&gt;&quot;
 top.docframe.Document.Write &quot;&lt;/BODY&gt;&lt;/HTML&gt;&quot;
 top.docframe.Document.Close
 
End Sub
 
--&gt;
&lt;/SCRIPT&gt;
&lt;BODY BGCOLOR=&quot;white&quot;&gt;
&lt;CENTER&gt;
&lt;H2&gt;Build a New Document&lt;/H2&gt;
&lt;FORM NAME=&quot;form1&quot;&gt;
Enter a Heading&lt;INPUT TYPE=&quot;text&quot; NAME=&quot;heading&quot; SIZE=30&gt;&lt;P&gt;
Enter the message
&lt;TEXTAREA NAME=&quot;thetext&quot; ROWS=6 COLS=40 WRAP=VIRTUAL&gt;&lt;/TEXTAREA&gt;&lt;P&gt;
&lt;INPUT TYPE=&quot;button&quot; NAME=&quot;cmdButton1&quot; VALUE=&quot;Build Now&quot;&gt;
&lt;/FORM&gt;
&lt;/BODY&gt;
&lt;/HTML&gt;</FONT></PRE>
<P>When you run this example through the browser, enter a heading and some text to be displayed on the new page, as shown in Figure 18.11. When you click the button, a brand new document is created and shown in the right frame, using the inputs from the left frame, as shown in Figure 18.12. 
<BR>
<P><B><A HREF="18lax11.gif">Figure 18.11. Enter a heading and some body text.</A></B>
<BR>
<P><B><A HREF="18lax01.gif">Figure 18.12. Click the button to create the document in the right frame.</A></B>
<BR>
<BR>
<A NAME="E68E95"></A>
<H3 ALIGN=CENTER>
<CENTER>
<FONT SIZE=5 COLOR="#FF0000"><B>Workshop Wrap-Up</B></FONT></CENTER></H3>
<BR>
<P>Using the browser's objects within your scripts enables you to perform a wide range of complex windows tasks easily and quickly. The browser's object model creates a flexible working environment that you can exploit to create the most powerful and state-of-the-art Web applications. You now have almost complete control over the document within the browser, as well as over the browser itself.
<BR>
<P>Controlling the browser, creating new windows, and writing new documents at the client are tasks that are the very essence of interactive and dynamic Web pages. They will set your Web site apart from the rest.
<BR>
<BR>
<A NAME="E69E123"></A>
<H4 ALIGN=CENTER>
<CENTER>
<FONT SIZE=4 COLOR="#FF0000"><B>Next Steps</B></FONT></CENTER></H4>
<BR>
<P>Now that you know how to control the browser, use scripts within frames, and create new documents from within the browser, there should be no stopping you. So off you go to these other chapters:
<BR>
<UL>
<LI>To learn how you can use another of the Document object's properties to create even more neat applications, see Chapter 19, &quot;Baking Cookies with VBScript.&quot;
<BR>
<BR>
<LI>To see a cool example of the Document.Write method, check out Chapter 20, &quot;Real Life Examples III.&quot;
<BR>
<BR>
<LI>To learn more about the Window object's methods, see Chapter 3, &quot;Communicating with Your Users.&quot;
<BR>
<BR>
</UL>
<BR>
<A NAME="E69E124"></A>
<H4 ALIGN=CENTER>
<CENTER>
<FONT SIZE=4 COLOR="#FF0000"><B>Q&amp;A</B></FONT></CENTER></H4>
<BR>
<P><B>Q: Is it possible to write text into a current document?</B>
<BR>
<P><B>A:</B> No, that facility is not available yet. It will undoubtedly be available before very long. You can only use the Document.Write while the HTML page is being loaded into the browser. When it has been loaded, it is fixed.
<BR>
<P><B>Q: If I have a document in a frame and then I use the Document.Write method in that frame, does it overwrite the document?</B>
<BR>
<P><B>A:</B> Only within the display space. The underlying document is still intact. If you click reload, the original document is re-displayed.
<BR>
<P><B>Q: I've tried to use the Document.Write method in a frame that doesn't contain a document, and I get an error message. Why?</B>
<BR>
<P><B>A:</B> If a frame doesn't contain a document, there is no document object to use the Write method on. The only way around this is to create a very simple &quot;blank&quot; HTML document that you load into the frame before calling the Document.Write method.
<P ALIGN=CENTER>
<A HREF="lax17.htm" TARGET="_self"><IMG SRC="blanprev.gif" WIDTH = 37 HEIGHT = 37 BORDER = 0 ALT="Previous Page"></A>
<A HREF="#I0" TARGET="_self"><IMG SRC="blantop.gif" WIDTH = 37 HEIGHT = 37 BORDER = 0 ALT="Page Top"></A>
<A HREF="httoc.htm" TARGET="_self"><IMG SRC="blantoc.gif" WIDTH = 37 HEIGHT = 37 BORDER = 0 ALT="TOC"></A>
<A HREF="lax19.htm" TARGET="_self"><IMG SRC="blannext.gif" WIDTH = 37 HEIGHT = 37 BORDER = 0 ALT="Next Page"></A>
<A HREF="http://www.mcp.com/sams/" TARGET="_self"><IMG SRC="blanhome.gif" WIDTH = 37 HEIGHT = 37 BORDER = 0 ALT="See Page"></A>
</BODY></HTML>
