<HTML>
<HEAD>
<TITLE>lax11.htm </TITLE>
<LINK REL="ToC" HREF="httoc.htm">
<LINK REL="Index" HREF="htindex.htm">
<LINK REL="Next" HREF="lax12.htm">
<LINK REL="Previous" HREF="lax10.htm"></HEAD>
<BODY BGCOLOR="#FFFFFF" TEXT="#000000" LINK="#0000FF" VLINK="#800080">
<A NAME="I0"></A><P ALIGN=CENTER>
<A HREF="lax10.htm" TARGET="_self"><IMG SRC="blanprev.gif" WIDTH = 37 HEIGHT = 37 BORDER = 0 ALT="Previous Page"></A>
<A HREF="httoc.htm" TARGET="_self"><IMG SRC="blantoc.gif" WIDTH = 37 HEIGHT = 37 BORDER = 0 ALT="TOC"></A>
<A HREF="lax12.htm" TARGET="_self"><IMG SRC="blannext.gif" WIDTH = 37 HEIGHT = 37 BORDER = 0 ALT="Next Page"></A>
<A HREF="http://www.mcp.com/sams/" TARGET="_self"><IMG SRC="blanhome.gif" WIDTH = 37 HEIGHT = 37 BORDER = 0 ALT="See Page"></A>
<HR ALIGN=CENTER>
<P>
<UL>
<UL>
<UL>
<LI>
<A HREF="#E68E61" >Example 1: Mega Mail Order Credit Card Payments</A>
<UL>
<LI>
<A HREF="#E69E86" >Techniques Applied</A></UL>
<LI>
<A HREF="#E68E62" >Example 2: Randolf Randal's Random Home Page</A>
<UL>
<LI>
<A HREF="#E69E87" >Techniques Applied</A></UL>
<LI>
<A HREF="#E68E63" >Example 3: Tim Day's Links Page</A>
<UL>
<LI>
<A HREF="#E69E88" >Techniques Applied</A></UL></UL></UL></UL>
<HR ALIGN=CENTER>
<A NAME="E66E22"></A>
<H1 ALIGN=CENTER>
<CENTER>
<FONT SIZE=6 COLOR="#FF0000"><B>- 11 -</B>
<BR><B>Real Life Examples I</B></FONT></CENTER></H1>
<BR>
<UL>
<LI>Example 1: Mega Choice Mail Order Credit Card Payments
<BR>
<BR>
<LI>Example 2: Randolf Randal's Random Home Page
<BR>
<BR>
<LI>Example 3: Tim Day's Links Page
<BR>
<BR>
</UL>
<P>This chapter describes three sample Web pages created using VBScript with techniques introduced in Part II, &quot;Mastering the VBScript Language&quot; (Chapters 4 through 10). The examples include
<BR>
<UL>
<UL>
<P><B>Example 1:</B> A credit-card number validation program for an online mail-order company
<BR>
</UL></UL>
<UL>
<UL>
<P><B>Example 2:</B> A home page that's different every time you load it
<BR>
</UL></UL>
<BLOCKQUOTE>
<BLOCKQUOTE>
<P><B>Example 3:</B> A links page that caters to both daytime and nighttime audiences
<BR>
</BLOCKQUOTE></BLOCKQUOTE>
<BR>
<A NAME="E68E61"></A>
<H3 ALIGN=CENTER>
<CENTER>
<FONT SIZE=5 COLOR="#FF0000"><B>Example 1: Mega Mail Order Credit Card Payments</B></FONT></CENTER></H3>
<BR>
<P><B>Document</B> <B>title</B>: Credit Card Verification Form
<BR>
<P><B>Files</B>:
<BR>
<P>Page file: cardver.html (see Figure 11.1)
<BR>
<P>Images:
<BR>
<UL>
<LI>visa.gif
<BR>
<BR>
<LI>master.gif
<BR>
<BR>
<LI>amex.gif
<BR>
<BR>
</UL>
<P><B><A HREF="11lax01.gif">Figure 11.1. cardver.html.</A></B>
<BR>
<P><B>Description</B>:  Mega Mail Order, the company you first met in Chapter 5, &quot;Interfacing VBScript with an HTML Form,&quot; accepts credit-card payments over the Internet for its new wonder product&#151;the LazeeGeek Computer Users Head Prop. However, like all companies that accept credit-card numbers, it gets its share of mischievous visitors who complete the form with fictitious credit-card details, knowing very well that the order cannot be processed and that they'll never receive the goods. It must be said that very few people set out to defraud; in fact, the vast majority of credit-card failures are due to simple mistakes by the users. However, it does waste time. Mega Mail Order's sales clerks call the authorization center only to be told that the transactions cannot be authorized.
<BR>
<P>The usual answer is to create or obtain a CGI script that validates the credit-card number. Using a simple algorithm, it is possible to determine whether a credit-card number is false or genuine. However, it is much quicker and more efficient to process the validation at the client machine rather than at the server.
<BR>
<P>The validation routines check the expiration date of the card and then perform a check on the card number to see whether it passes through the algorithm. There are actually three algorithms for 13, 15, and 16 digit cards.
<BR>
<BLOCKQUOTE>
<BLOCKQUOTE>
<HR ALIGN=CENTER>
<BR>
<NOTE>The use of credit cards for payment on the Internet has been a controversial subject for many months. I have my own opinions, but I'm not writing a book on that! If you do plan to accept credit cards at your Web site, you should note a few important points. 
<BR>
<BR>Only accept credit-card details through the Secure Sockets Layer (SSL). For this, you need a digital certificate from VeriSign, which can be obtained at <A HREF="http://www.verisign.com/">http://www.verisign.com/.</A>
<BR>
<BR>When you receive the credit-card details via SSL from the client, do not use a CGI script to e-mail the form details to your home or office location (assuming you use a remote server), unless you use an equally safe encryption method for transmitting the e-mail. You might be wondering how to obtain your order details. The safest method is to store the details on the server and send an e-mail to yourself alerting you that an order is ready to be collected from the server. Set up a password-secure form that you and you alone can log into (again, through SSL), and collect the details online. This type of server-side processing is beyond the scope of this book.
<BR>
<BR>If you plan to use this script on your Web site, remember that client-side scripts are currently visible via the View Source menu option. It wouldn't take long for an experienced programmer to learn how to change the script in order to get around your validation. Suppose the hacker saves a copy of the form to a local drive, amends it, gets back online, loads the hacked page from his hard drive, enters garbage in the form, and submits it. If you run a credit-card form like this on a normal server, there is nothing you can do; the now unvalidated data hits your server and causes all the same problems you had before. However, if you run the form from a secure server, the hacker gets stuck completely. The form must come from the secure server to establish the SSL connection. The hacker simply cannot create the SSL link without downloading the credit-card form from your server. The form's action parameter is set to an https:// location. Therefore, if data is sent to the server &quot;in the clear,&quot; it will not be understood. This obviously is another good reason to accept credit cards only via an SSL connection. 
<BR>
<BR>Finally, this script can only validate the fact that the number is a real credit-card number. You still need to obtain an authorization number from the credit-card company. </NOTE>
<BR>
<HR ALIGN=CENTER>
</BLOCKQUOTE></BLOCKQUOTE>
<BR>
<A NAME="E69E86"></A>
<H4 ALIGN=CENTER>
<CENTER>
<FONT SIZE=4 COLOR="#FF0000"><B>Techniques Applied</B></FONT></CENTER></H4>
<BR>
<P><B>Dates:</B> (See Chapter 8, &quot;Time for a Date with the Client.&quot;) The script obtains the current month and year from the user's machine and compares this against the expiration date given by the card holder. The expiration date is first checked to ensure that it is a valid date (as far as the computer is concerned). The user can enter any valid combination of month and year, including Aug-97, 9/97, and August 97. The fact that this sort of validation using a server-side CGI script is a very complex program is another good reason to use client-side scripting and VBScript in particular. 
<BR>
<P><B>Subroutines and functions</B>: (See Chapter 9, &quot;Making Your Program Flow.&quot;) The program consists of several functions and related subroutines, as well as event handlers.
<BR>
<P><B>String manipulation</B>: (See Chapter 7, &quot;Manipulating Strings.&quot;) The program has to remove any spaces, commas, dashes, or whatever the client used to delimit the series of numbers. You achieve this by looking at the problem in reverse; that is, you look for the numbers rather than the delimiters, so that it does not matter which delimiting character the user included within the card number. You use more string manipulation in the actual algorithm itself, which must split the overall credit-card number into individual numbers.
<BR>
<P><B>String conversion</B>: (See Chapter 7, &quot;Manipulating Strings.&quot;) After the numbers  (which are actually string representations of numbers) are dissected, a calculation is performed on them, so they must be converted to integers.
<BR>
<P><B>Operators</B>: (See Chapter 4, &quot;Using the VBScript Language.&quot;) On several occasions, the script uses a range of comparison, logical, and arithmetic operators.
<BR>
<P><B>Loops and decisions</B>: (See Chapter 9, &quot;Making Your Program Flow.&quot;) The program contains several If...Then and Select Case statements, as well as a nested Select Case block. 
<BR>
<P><B>Arrays</B>: (See Chapter 10, &quot;Using the Power of Arrays.&quot;) One of the three algorithms uses a static, single-dimension array as temporary storage for the individual numbers of the credit-card number.
<BR>
<P><B>HTML intrinsic controls</B>: (See Chapter 5, &quot;Interfacing VBScript with an HTML Form.&quot;) The form uses only HTML controls; no ActiveX controls are used. 
<BR>
<P>Figure 11.2 shows what happens when a user tries to enter the details of a credit card that has expired. Keep in mind, though, that this part of the validation works with the client machine's date variable, which is under the control of the user.
<BR>
<P><B><A HREF="11lax02.gif">Figure 11.2. cardver.html detecting an expired card.</A></B>
<BR>
<P>Figure 11.3 shows that the algorithm has either sucessfully foiled a potential fraud or has alerted the user to a typing error.
<BR>
<P><B><A HREF="11lax03.gif">Figure 11.3. cardver.html detecting a credit-card fraudster&#151;me!</A></B>
<BR>
<P>Until I stumbled across the algorithm that forms the basis of this credit card verification program, it had never struck me that credit card numbers are constructed in a particular way. They just seemed like a bunch of random numbers!
<BR>
<P>However, credit card numbers are all put together in such a way that by applying an algorithm to them, you can very quickly identify a bogus number. No matter what type of card is being used, the numbering systems all work in a similar way, so here's how they work. First, multiply every other digit by two&#151;that is (depending on the card type), digits 1, 3, 5, and so on, or 2, 4, 6, and so on. If the result of the multiplication is greater than 10, add the two digits. For example, let's say the second digit of a credit card number is 6. If you multiply it by 2, that equals 12; if you add 1 and 2, that equals 3. When you've done this for every other number, add all the digits of the credit card number. If the result is divisible by 10 (such as 50, 60, or 70), the number is genuine. If it does not divide by 10, the number is false. Here is an example:
<BR>
<BLOCKQUOTE>
<BLOCKQUOTE>
<P>Credit card number: 4578-7895-1232-0051
<BR>
</BLOCKQUOTE></BLOCKQUOTE>
<P>With a 16-digit number, you multiply digits 1 through 15 by 2, and reduce them to single-digit results, as described in the preceding paragraph. 
<BR>
<BLOCKQUOTE>
<BLOCKQUOTE>
<P>New number: 8558-5895-2262-0011
<BR>
</BLOCKQUOTE></BLOCKQUOTE>
<P>Now add all these digits together. The result is 67&#151;a bogus number.
<BR>
<P>While porting this example to VBScript from Perl, I tested the algorithm on over 60 credit card numbers that had been received on one of my client's Websites. Amazingly, the two that the algorithm rejected were also the two that had failed authorization&#151;probably not that amazing when you think about it!
<BR>
<P>The complete listing for the credit card verification example is shown in Listing 11.1
<BR>
<P>
<FONT COLOR="#000080"><B>Listing 11.1. The cardver.html code.</B></FONT>
<BR>
<PRE>
<FONT COLOR="#000080">&lt;HTML&gt;
&lt;HEAD&gt;
&lt;TITLE&gt;Credit Card Number Verification&lt;/TITLE&gt;
&lt;SCRIPT LANGUAGE=&quot;vbscript&quot;&gt;
'
'Create two variables with global scope
'
     Dim paymethod
     Dim TheCardType
'
'This is the main subroutine and is called by the button's 
'onclick event handler
'
Sub VerifyCard
    dim strCleanNo
    dim verified
    dim currdate
 'check the date if bad then quit
 If Not GoodDate() Then
  Exit Sub
 End If
 'take all spaces etc out of the string
 strCleanNo = CleanString()
 'determine the type of card and send execution off in the right direction
 Select Case TheCardType
 Case &quot;amex&quot;
     verified = verifyAmex(strCleanNo)
 Case &quot;visa&quot;
     'this is a nested select
     Select Case Len(strCleanNo)
     Case 13
          verified = verifyV(strCleanNo)
     Case 16
          verified = verifyMC(strCleanNo)
     Case Else
          verified = False
     End Select
 Case &quot;mastercard&quot;
     verified = verifyMC(strCleanNo)
 Case &quot;discovery&quot;
     verified = verifyMC(strCleanNo)
 Case Else
     Alert  &quot;Please select a Card Type&quot;
     Exit Sub
 End Select
 'is it ok or not?
 If Not verified Then
     i = MsgBox(&quot;INVALID CARD NUMBER&quot;,16,&quot;Cannot Submit Data&quot;)
 Else
     i = MsgBox(&quot;The Card No. is OK&quot;,64,&quot;Submitting Data....&quot;)
 End If
End Sub
'
'This is the function that checks the date
'
Function GoodDate()
 GoodDate = True
 If Not IsDate(Document.Form1.CardExp.Value) Then
     i = MsgBox(&quot;Invalid Expiry Date&quot;,16,&quot;Cannot Submit Data&quot;)
     GoodDate = False
 Else
     currdate = Month(Now()) &amp; &quot; &quot; &amp; Year(Now())
     If DateValue(Document.Form1.CardExp.Value) &lt; DateValue(currdate) Then
          i = MsgBox(&quot;THIS CARD HAS EXPIRED&quot;,16,&quot;Cannot Submit Data&quot;)
          GoodDate = False
     End If
 End If
End Function
'
'This function validates an amex card
'
Function VerifyAmex(ByVal CardNo)
    Dim amexarray(14)
    Dim tot
    tot=0
'
'The first check - Amex Cards must be 15 digits
 If Len(CardNo) &lt;&gt; 15 Then
     VerifyAmex = False
     Exit Function
 End If
'
'Separate all digits in even numbered positions into
'an array - this will make the final addition easier For x = 2 to 10 step 2
     amexarray(x-1) = Mid(CardNo,x,1)
 Next
'
'Now put the last four digits into the array too
 For x = 12 to 15
     amexarray(x-1) = Mid(CardNo,x,1)
 Next
'
'Multiply all the numbers in odd numbered positions
'by two and reduce them to single digit answers
 For x = 1 to 11 Step 2
     y = Mid(CardNo,x,1) * 2
     If y &gt;= 10 Then
'
'The Mod Function returns only the remainder of a division
'when the result is calculated put it too into the array
         amexarray(x-1) =  (y Mod 10) + 1
     Else
         amexarray(x-1) = y
     End If
 Next
'
'Finally add up all the numbers you've got stored in the array
 For x = 0 to 14
     tot = tot + CInt(amexarray(x))
 Next
'
'If the tot variable is divisable by 10 then Mod will return
'0, that is no remainer
 If tot Mod 10 = 0 Then
     VerifyAmex = True
 Else
     VerifyAmex = False
 End If
End Function
'
'This function checks visa 13 digit cards
'
Function VerifyV(ByVal CardNo)
    Dim vArray(12)
    Dim tot
    tot=0
'
'Move all the numbers in the even numbered positions
'into an array
 For x = 2 to 12 step 2
     vArray(x-1) = Mid(CardNo,x,1)
 Next
'..and the thirteenth number
     vArray(12) = Mid(CardNo,13,1)
'
'mulitply all the numbers in the odd numbered positions by 2
'and reduce to a single digit result
 For x = 1 to 11 Step 2
     y = Mid(CardNo,x,1) * 2
     If y &gt;= 10 Then
'
'Mod returns the remainder of a division
'when you have a single digit result add that
'to the array also.
         vArray(x-1) =  (y Mod 10) + 1
     Else
         vArray(x-1) = y
     End If
 Next
'
'run through the whole array adding up the numbers
'as you go
 For x = 0 to 12
     tot = tot + CInt(vArray(x))
 Next
'
'check to see if the result is divisable by 10
 If tot Mod 10 = 0 Then
     VerifyV = True
 Else
     VerifyV = False
 End If
End Function
'
'Although it says MC it's actually a multi purpose 16 digit checker
'
Function VerifyMC(ByVal CardNo)
    Dim tot
    tot=0
'first check, must be 16 digits
 If Len(CardNo) &lt;&gt; 16 Then
     VerifyMC = False
     Exit Function
 End If
'
'this one's slightly different, without using an array
'firstly add up all the numbers occupying even numbered
'positions
 For x = 2 to 16 step 2
     tot = tot + CInt(Mid(CardNo,x,1))
 Next
'
'all the numbers in odd numbered locations are multiplied
'by 2 and reduced to single digit results, then added to 
'the running total
 For x = 1 to 15 Step 2
     y = Mid(CardNo,x,1) * 2
     If y &gt;= 10 Then
         tot = tot + CInt((y Mod 10) + 1)
     Else
         tot = tot + CInt(y)
     End If
 Next
'
'again check that the result is divisable by 10
 If tot Mod 10 = 0 Then
     VerifyMC = True
 Else
     VerifyMC = False
 End If
End Function
'
'This function looks for numbers in the card number string, thereby
'removing all non numeric characters
'
Function CleanString()
    dim strLen
    dim strCounter
    dim strClean
    dim strDirty
'
'copy the complete number as entered by the user in 
'the srtDirty variable
 strDirty = Trim(Document.Form1.cardnumber.value)
'
'find its total length
 strLen = Len(strDirty)
'
'initalize the variable which will hold the final 
'cleaned credit card number
 strClean = &quot;&quot;
'
'it's easier to check for numbers and reject everything else
 For strCounter = 1 to strLen
    If Asc(Mid(strDirty,strCounter,1)) &lt; 58 AND Asc(Mid(strDirty,strCounter,1)) &gt; 47 Then
 '
'if this character is a number, concatenate it to the clean
number thereby removing all dashes, spaces or whatever 
delimiter the user has included.
        strClean = strClean  &amp; Mid(strDirty,strCounter,1)
    End If
 Next
'
'return the final credit card number minus delimiters
 CleanString = strClean
End Function
'et voila
&lt;/SCRIPT&gt;
&lt;/HEAD&gt;
&lt;BODY BACKGROUND=&quot;bground.jpg&quot;&gt;
&lt;FONT FACE=&quot;arial&quot; SIZE=2&gt;
&lt;CENTER&gt;
&lt;TABLE&gt;
&lt;TD&gt;&lt;IMG SRC=&quot;visa.gif&quot;&gt;
&lt;TD&gt;&lt;IMG SRC=&quot;master.gif&quot;&gt;
&lt;TD&gt;&lt;IMG SRC=&quot;amex.gif&quot;&gt;
&lt;/TABLE&gt;
&lt;P&gt;
&lt;BR&gt;&lt;BR&gt;
&lt;BLOCKQUOTE&gt;
If you are paying by credit card, please complete this section
of the form.
&lt;/BLOCKQUOTE&gt;
    &lt;FORM NAME=&quot;Form1&quot;&gt;
&lt;TABLE&gt;
&lt;TD ALIGN=RIGHT&gt;&lt;B&gt;Visa&lt;/B&gt;
&lt;TD&gt;
&lt;!--
     The event handlers attached to the following controls 
     were added using the ActiveX Control Pad
&gt;
&lt;INPUT LANGUAGE=&quot;vbscript&quot; TYPE=RADIO VALUE=&quot;visa&quot; ONCLICK=&quot;TheCardType= &amp;quot;visa&amp;quot;&quot;
         NAME=&quot;cardtype&quot;&gt;
&lt;TD ALIGN=RIGHT&gt;&lt;B&gt;Mastercard&lt;/B&gt;
&lt;TD&gt;&lt;INPUT LANGUAGE=&quot;vbscript&quot; TYPE=RADIO VALUE=&quot;mastercard&quot; ONCLICK=&quot;TheCardType= &amp;quot;mastercard&amp;quot;&quot;
         NAME=&quot;cardtype&quot;&gt;
&lt;TR&gt;
&lt;TD ALIGN=RIGHT&gt;&lt;B&gt;American Express&lt;/B&gt;
&lt;TD&gt;&lt;INPUT LANGUAGE=&quot;vbscript&quot; TYPE=RADIO VALUE=&quot;amex&quot; ONCLICK=&quot;TheCardType= &amp;quot;amex&amp;quot;&quot;
         NAME=&quot;cardtype&quot;&gt;
&lt;TD ALIGN=RIGHT&gt;&lt;B&gt;Discover&lt;/B&gt;
&lt;TD&gt;&lt;INPUT LANGUAGE=&quot;vbscript&quot; TYPE=RADIO VALUE=&quot;discovery&quot; ONCLICK=&quot;TheCardType= &amp;quot;discovery&amp;quot;&quot;NAME=&quot;cardtype&quot;&gt;
&lt;TR&gt;
&lt;/TABLE&gt;
&lt;P&gt;
&lt;TABLE&gt;
&lt;TD&gt;&lt;B&gt;Cardholder's Name&lt;/B&gt;
&lt;TD&gt;&lt;INPUT TYPE=TEXT SIZE=30 NAME=&quot;cardholder&quot;&gt;
&lt;TR&gt;
&lt;TD&gt;&lt;B&gt;Card Number&lt;/B&gt;
&lt;TD&gt;&lt;INPUT TYPE=TEXT SIZE=20 NAME=&quot;cardnumber&quot;&gt;
&lt;TR&gt;
&lt;TD&gt;&lt;B&gt;Card Expiration Date&lt;/B&gt;
&lt;TD&gt;&lt;INPUT TYPE=TEXT SIZE=5 NAME=&quot;cardexp&quot;&gt;
&lt;TR&gt;
&lt;/TABLE&gt;
&lt;P&gt;
        &lt;INPUT LANGUAGE=&quot;vbscript&quot; TYPE=button VALUE=&quot;Check&quot; ONCLICK=&quot; call VerifyCard()&quot;&gt;
        &lt;INPUT TYPE=RESET VALUE=&quot;Clear/Reset&quot;&gt;
    &lt;/FORM&gt;
&lt;/BODY&gt;
&lt;/HTML&gt;</FONT></PRE>
<BR>
<A NAME="E68E62"></A>
<H3 ALIGN=CENTER>
<CENTER>
<FONT SIZE=5 COLOR="#FF0000"><B>Example 2: Randolf Randal's Random Home Page</B></FONT></CENTER></H3>
<BR>
<P><B>Document</B> <B>title</B>: Randolf Randal's Random Home Page
<BR>
<P><B>Files</B>:
<BR>
<P>Page file: random.html (see Figures 11.4, 11.5, and 11.6)
<BR>
<P>Images:
<BR>
<UL>
<LI>0.jpg
<BR>
<BR>
<LI>1.jpg
<BR>
<BR>
<LI>2.jpg
<BR>
<BR>
<LI>3.jpg
<BR>
<BR>
<LI>4.jpg
<BR>
<BR>
</UL>
<P><B><A HREF="11lax04.gif">Figure 11.4. random.html.</A></B>
<BR>
<P><B><A HREF="11lax05.gif">Figure 11.5. random.html&#151;same page, same code, different look.</A></B>
<BR>
<P><B><A HREF="11lax06.gif">Figure 11.6. random.html again. You get the picture? You can have some fun with this concept.</A></B>
<BR>
<P><B>Description</B>: To keep visitors interested, Randolf Randal randomized his home page. The page uses the simple random function built into VBScript to return a number between 0 and 4. Randolf then uses this number to select the background graphic for the page and also extract data from a prebuilt array of link colors, font colors, and so on.
<BR>
<BR>
<A NAME="E69E87"></A>
<H4 ALIGN=CENTER>
<CENTER>
<FONT SIZE=4 COLOR="#FF0000"><B>Techniques Applied</B></FONT></CENTER></H4>
<BR>
<P><B>Subroutines and functions</B>: (See Chapter 9, &quot;Making Your Program Flow.&quot;) The program consists of two script blocks with no subroutines, so the scripts execute upon loading in the browser. 
<BR>
<P><B>Arrays</B>: (See Chapter 10, &quot;Using the Power of Arrays.&quot;) The page uses a number of single-dimension static arrays to store the page style data.
<BR>
<P><B>Language elements:</B> The page uses the Rnd() function and several other basic language elements. It also uses the Document.Write method, which was used in several examples in this Part. Chapter 18, &quot;Interacting with the Browser,&quot; discusses Document.Write in more detail.
<BR>
<P>The complete listing for Randolph Randal's Random Home Page (random.html) is shown in Listing 11.2. 
<BR>
<P>
<FONT COLOR="#000080"><B>Listing 11.2. The random.html code.</B></FONT>
<BR>
<PRE>
<FONT COLOR="#000080">&lt;HTML&gt;
&lt;TITLE&gt;Randolph Randal's Random Home Page&lt;/TITLE&gt;
&lt;/HEAD&gt;
&lt;SCRIPT LANGUAGE=&quot;vbscript&quot;&gt;
 'create arrays for the body tag variables
 Dim Lnk(4)
 Dim VLnk(4)
 Dim FColor(4)
 Dim Fnt(4)
 'create a global variable
 Dim x
 'Variables for Version No. 1
 Lnk(0) = &quot;Fuchsia&quot;
 Vlnk(0) = &quot;Silver&quot;
 FColor(0) = &quot;Lime&quot;
 Fnt(0) = &quot;arial&quot;
 'Variables for Version No. 2
 Lnk(1) = &quot;blue&quot;
 Vlnk(1) = &quot;fushia&quot;
 FColor(1) = &quot;white&quot;
 Fnt(1) = &quot;times roman&quot;
 'Variables for Version No. 3
 Lnk(2) = &quot;green&quot;
 Vlnk(2) = &quot;maroon&quot;
 FColor(2) = &quot;blue&quot;
 Fnt(2) = &quot;arial&quot;
 'Variables for Version No. 4
 Lnk(3) = &quot;lime&quot;
 Vlnk(3) = &quot;teal&quot;
 FColor(3) = &quot;yellow&quot;
 Fnt(3) = &quot;ms sans serif&quot;
 'Variables for Version No. 5
 Lnk(4) = &quot;navy&quot;
 Vlnk(4) = &quot;gray&quot;
 FColor(4) = &quot;black&quot;
 Fnt(4) = &quot;arial&quot;
 'initialize the generator
 RANDOMIZE
 'generate a random number twixt none and four
 x = Int((5 - 1 + 1) * Rnd)
 'turn said number into a string making sure there are no spaces
 strX = Trim(CStr(x))
 'add the jpg file extension and you've got a file name
 randomimage = strX &amp; &quot;.jpg&quot;
 'write the randomly generated body tag into the document
 Document.Write &quot;&lt;BODY BACKGROUND=&quot; &amp; Chr(34) &amp; randomimage &amp; Chr(34)
 Document.Write &quot; TEXT=&quot; &amp; FColor(x)
 Document.Write &quot; LINK=&quot; &amp; Lnk(x)
 Document.Write &quot; VLINK=&quot; &amp; Vlnk(x)
 Document.Write &quot;&gt;&quot;
 Document.Write &quot;&lt;FONT FACE=&quot; &amp; Fnt(x) &amp; &quot; SIZE=3&gt;&quot;
&lt;/SCRIPT&gt;
&lt;CENTER&gt;
&lt;H2&gt;Wow...Different Again Huh?????&lt;/H2&gt;
&lt;B&gt;
&lt;A HREF=&quot;&quot;&gt;CLICK THIS LINK&lt;/A&gt;
&lt;P&gt;
&lt;A HREF=&quot;&quot;&gt;THIS IS ANOTHER LINK&lt;/A&gt;
&lt;P&gt;
&lt;/B&gt;
&lt;H2&gt;I have a randomly changing Home Page..see if you can collect the set!!&lt;/H2&gt;
&lt;H3&gt;This is version No.
&lt;!--
This writes the Version Number using the x global variable
--&gt;
&lt;SCRIPT LANGUAGE=&quot;vbscript&quot;&gt;
Document.Write CStr(x+1)
&lt;/SCRIPT&gt;
&lt;/H3&gt;
&lt;/CENTER&gt;
&lt;/FONT&gt;
&lt;/BODY&gt;
&lt;/HTML&gt;</FONT></PRE>
<BR>
<A NAME="E68E63"></A>
<H3 ALIGN=CENTER>
<CENTER>
<FONT SIZE=5 COLOR="#FF0000"><B>Example 3: Tim Day's Links Page</B></FONT></CENTER></H3>
<BR>
<P><B>Document</B> <B>title</B>: Tim Day's Links Page
<BR>
<P><B>Files</B>: The page file is links.html (see Figures 11.7 and 11.8), and the images are day.jpg and stars.gif.
<BR>
<P><B><A HREF="11lax07.gif">Figure 11.7. links.html by day.</A></B>
<BR>
<P><B><A HREF="11lax08.gif">Figure 11.8. links.html by night.</A></B>
<BR>
<P><B>Description</B>: Tim Day's link page uses the client machine's time variable to create a different look and different links for day and night users of the site. 
<BR>
<BR>
<A NAME="E69E88"></A>
<H4 ALIGN=CENTER>
<CENTER>
<FONT SIZE=4 COLOR="#FF0000"><B>Techniques Applied</B></FONT></CENTER></H4>
<BR>
<P><B>Dates:</B> (See Chapter 8, &quot;Time for a Date with the Client.&quot;) The script obtains the hour from the user's machine and calculates whether it is day or night. 
<BR>
<P><B>Subroutines and functions</B>: (See Chapter 9, &quot;Making Your Program Flow.&quot;) The program consists of two script blocks with no subroutines, so the scripts execute upon loading in the browser.
<BR>
<P><B>Operators</B>: (See Chapter 4, &quot;Using the VBScript Language.&quot;) On several occasions, the script uses a range of comparison, logical, and arithmetic operators.
<BR>
<P><B>Decisions</B>: (See Chapter 9, &quot;Making Your Program Flow.&quot;) The program uses the If..Then conditional operator to determine day or night.
<BR>
<P><B>Arrays</B>: (See Chapter 10, &quot;Using the Power of Arrays.&quot;) The body tag variables use several single-dimension static arrays. In addition, the link descriptions and link URLs use a pair of two-dimensional arrays.
<BR>
<P>The complete code for links.html is shown in Listing 11.3. 
<BR>
<P>
<FONT COLOR="#000080"><B>Listing 11.3. The links.html code.</B></FONT>
<BR>
<PRE>
<FONT COLOR="#000080">&lt;HTML&gt;
&lt;TITLE&gt;Tim Day's Link Page&lt;/TITLE&gt;
&lt;/HEAD&gt;
&lt;SCRIPT LANGUAGE=&quot;vbscript&quot;&gt;
 'create arrays for the body tag variables
 Dim Lnk(1)
 Dim VLnk(1)
 Dim FColor(1)
 Dim Fnt(1)
 Dim Greet(1)
 'declare two dimensional arrays for the links
 Dim LinkDesc(1,4)
 Dim LinkURL(1,4)
 'declare two constants
 Dim DAYTIME
 Dim NIGHTTIME
 DAYTIME = 1
 NIGHTTIME = 0
 'create a global variable
 Dim x
 'Variables for Nighttime Version
 Lnk(NIGHTTIME) = &quot;blue&quot;
 Vlnk(NIGHTTIME) = &quot;fushia&quot;
 FColor(NIGHTTIME) = &quot;yellow&quot;
 Fnt(NIGHTTIME) = &quot;times roman&quot;
 Greet(NIGHTTIME) = &quot;Take it easy tonight - &lt;BR&gt; visit some of my favorite sites&quot;
 'Variables for Daytime Version
 Lnk(DAYTIME) = &quot;red&quot;
 Vlnk(DAYTIME) = &quot;teal&quot;
 FColor(DAYTIME) = &quot;orange&quot;
 Fnt(DAYTIME) = &quot;ms sans serif&quot;
 Greet(DAYTIME) = &quot;Here are some cool sites &lt;BR&gt;to help you through the day&quot;
 'Descriptions for the Links
 LinkDesc(NIGHTTIME,0) = &quot;101 Cocktail Recipes&quot;
 LinkDesc(NIGHTTIME,1) = &quot;Cures for Insomnia&quot;
 LinkDesc(NIGHTTIME,2) = &quot;UFO Central&quot;
 LinkDesc(NIGHTTIME,3) = &quot;The Games Web Site&quot;
 LinkDesc(NIGHTTIME,4) = &quot;Ghost Stories on the Web&quot;
 LinkDesc(DAYTIME,0) = &quot;Net Supermarket&quot;
 LinkDesc(DAYTIME,1) = &quot;C|Net News&quot;
 LinkDesc(DAYTIME,2) = &quot;Microsoft&quot;
 LinkDesc(DAYTIME,3) = &quot;Computer Shopper&quot;
 LinkDesc(DAYTIME,4) = &quot;Sams.Net&quot;
 'URLs for the Links - these aren't real links ;-)
 LinkURL(NIGHTTIME,0) = &quot;http://1&quot;
 LinkURL(NIGHTTIME,1) = &quot;http://2&quot;
 LinkURL(NIGHTTIME,2) = &quot;http://3&quot;
 LinkURL(NIGHTTIME,3) = &quot;http://4&quot;
 LinkURL(NIGHTTIME,4) = &quot;http://5&quot;
 LinkURL(DAYTIME,0) = &quot;http://1&quot;
 LinkURL(DAYTIME,1) = &quot;http://2&quot;
 LinkURL(DAYTIME,2) = &quot;http://3&quot;
 LinkURL(DAYTIME,3) = &quot;http://4&quot;
 LinkURL(DAYTIME,4) = &quot;http://5&quot;
 'Determine whether it's day or night
 TheHour = Hour(Now())
 If TheHour &gt;= 5 and TheHour &lt; 20 Then
     x = DAYTIME
     theimage = &quot;day.jpg&quot;
 Else
     x = NIGHTTIME
     theimage = &quot;stars.gif&quot;
 End If
 'write the body tag etc into the document
 Document.Write &quot;&lt;BODY BACKGROUND=&quot; &amp; Chr(34) &amp; theimage &amp; Chr(34)
 Document.Write &quot; TEXT=&quot; &amp; FColor(x)
 Document.Write &quot; LINK=&quot; &amp; Lnk(x)
 Document.Write &quot; VLINK=&quot; &amp; Vlnk(x)
 Document.Write &quot;&gt;&quot;
 Document.Write &quot;&lt;FONT FACE=&quot; &amp; Fnt(x) &amp; &quot; SIZE=3&gt;&quot;
 Document.Write &quot;&lt;CENTER&gt;&quot;
 Document.Write &quot;&lt;H2&gt;&quot; &amp; Greet(x) &amp; &quot;&lt;/H2&gt;&lt;P&gt;&lt;B&gt;&quot;
 'write the links
 For i = 0 to 4
  Document.Write &quot;&lt;A HREF=&quot; &amp; Chr(34) &amp; LinkURL(x,i) &amp; Chr(34) &amp; &quot;&gt;&lt;P&gt;&quot;
  Document.Write LinkDesc(x,i)
  Document.Write &quot;&lt;/A&gt;&quot;
 Next
&lt;/SCRIPT&gt;
&lt;/CENTER&gt;
&lt;/FONT&gt;
&lt;/BODY&gt;
&lt;/HTML&gt;</FONT></PRE>
<BR><P ALIGN=CENTER>
<A HREF="lax10.htm" TARGET="_self"><IMG SRC="blanprev.gif" WIDTH = 37 HEIGHT = 37 BORDER = 0 ALT="Previous Page"></A>
<A HREF="#I0" TARGET="_self"><IMG SRC="blantop.gif" WIDTH = 37 HEIGHT = 37 BORDER = 0 ALT="Page Top"></A>
<A HREF="httoc.htm" TARGET="_self"><IMG SRC="blantoc.gif" WIDTH = 37 HEIGHT = 37 BORDER = 0 ALT="TOC"></A>
<A HREF="lax12.htm" TARGET="_self"><IMG SRC="blannext.gif" WIDTH = 37 HEIGHT = 37 BORDER = 0 ALT="Next Page"></A>
<A HREF="http://www.mcp.com/sams/" TARGET="_self"><IMG SRC="blanhome.gif" WIDTH = 37 HEIGHT = 37 BORDER = 0 ALT="See Page"></A>
</BODY></HTML>
