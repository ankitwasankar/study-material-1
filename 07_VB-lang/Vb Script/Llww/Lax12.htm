<HTML>
<HEAD>
<TITLE>lax12.htm </TITLE>
<LINK REL="ToC" HREF="httoc.htm">
<LINK REL="Index" HREF="htindex.htm">
<LINK REL="Next" HREF="lax13.htm">
<LINK REL="Previous" HREF="lax11.htm"></HEAD>
<BODY BGCOLOR="#FFFFFF" TEXT="#000000" LINK="#0000FF" VLINK="#800080">
<A NAME="I0"></A><P ALIGN=CENTER>
<A HREF="lax11.htm" TARGET="_self"><IMG SRC="blanprev.gif" WIDTH = 37 HEIGHT = 37 BORDER = 0 ALT="Previous Page"></A>
<A HREF="httoc.htm" TARGET="_self"><IMG SRC="blantoc.gif" WIDTH = 37 HEIGHT = 37 BORDER = 0 ALT="TOC"></A>
<A HREF="lax13.htm" TARGET="_self"><IMG SRC="blannext.gif" WIDTH = 37 HEIGHT = 37 BORDER = 0 ALT="Next Page"></A>
<A HREF="http://www.mcp.com/sams/" TARGET="_self"><IMG SRC="blanhome.gif" WIDTH = 37 HEIGHT = 37 BORDER = 0 ALT="See Page"></A>
<HR ALIGN=CENTER>
<P>
<UL>
<UL>
<UL>
<LI>
<A HREF="#E68E64" >Overview of ActiveX Components</A>
<UL>
<LI>
<A HREF="#E69E89" >The &lt;OBJECT&gt; Tag</A>
<LI>
<A HREF="#E69E90" >Generating &lt;OBJECT&gt; HTML Code</A></UL>
<LI>
<A HREF="#E68E65" ><IMG SRC="task.gif">Downloading Objects from the Web</A>
<LI>
<A HREF="#E68E66" ><IMG SRC="task.gif">Empowering Netscape Navigator with ActiveX and VBScript</A>
<UL>
<LI>
<A HREF="#E69E91" >Downloading ScriptActive</A>
<LI>
<A HREF="#E69E92" >Trying the Plug-In</A></UL>
<LI>
<A HREF="#E68E67" ><IMG SRC="task.gif">An HTML Page Using a Sample ActiveX Control</A>
<UL>
<LI>
<A HREF="#E69E93" >Adding a Label Object</A>
<LI>
<A HREF="#E69E94" >Adding a Button Object</A>
<LI>
<A HREF="#E69E95" >Adding a VBScript Program</A></UL>
<LI>
<A HREF="#E68E68" >Workshop Wrap-Up</A>
<UL>
<LI>
<A HREF="#E69E96" >Next Steps</A>
<LI>
<A HREF="#E69E97" >Q&amp;A</A></UL></UL></UL></UL>
<HR ALIGN=CENTER>
<A NAME="E66E24"></A>
<H1 ALIGN=CENTER>
<CENTER>
<FONT SIZE=6 COLOR="#FF0000"><B>- 12 -</B>
<BR><B>Using VBScript with ActiveX Controls</B></FONT></CENTER></H1>
<BR>
<P>by Rogers Cadenhead
<BR>
<P>In this chapter, you
<BR>
<UL>
<LI>Learn about ActiveX controls
<BR>
<BR>
<LI>Learn how to add ActiveX controls to a page
<BR>
<BR>
<LI>Learn about the usage of the &lt;OBJECT&gt; tag
<BR>
<BR>
<LI>Learn about basic VBScript programming
<BR>
<BR>
</UL>
<P>Tasks in this chapter:
<BR>
<UL>
<LI>Placing an ActiveX form control on a Web page
<BR>
<BR>
<LI>Modifying control attributes using the &lt;PARAM&gt; tag
<BR>
<BR>
</UL>
<P>The VBScript programming language is only half of Microsoft's current Internet programming strategy. The other half is ActiveX, a way to develop programmable objects that can be added to Web pages alongside images, text, Java applets, and other media.
<BR>
<P>VBScript provides access to the intrinsic HTML controls&#151;buttons, text fields, radio buttons, and other things that are common to Web-based forms. You encounter these controls any time you register to join a Web site, order a product through the Web, or use a feedback page to tell Shaquille O'Neal how much you enjoy <A HREF="http://www.shaq.com.">http://www.shaq.com.</A>
<BR>
<P>If you want to create sophisticated programs to run on a Web page, you might want to extend the possibilities beyond intrinsic controls by using ActiveX controls.
<BR>
<BR>
<A NAME="E68E64"></A>
<H3 ALIGN=CENTER>
<CENTER>
<FONT SIZE=5 COLOR="#FF0000"><B>Overview of ActiveX Components</B></FONT></CENTER></H3>
<BR>
<P>ActiveX controls are components that extend the capabilities of Web pages. They were previously known as OCX or OLE controls, a type of software-development component that might be familiar to some readers.
<BR>
<P>An ActiveX control is developed using a language such as Visual C++, Visual Basic, or Delphi. Like an OCX, an ActiveX component is designed to be used by some other software&#151;a Web browser, in this case.
<BR>
<P>More than 1,000 ActiveX controls are available for use, according to Microsoft. In addition to being usable on Web pages, these controls can be used with other types of software developed with programming languages such as Java, Borland C++ and Delphi, Visual Basic, and Visual C++.
<BR>
<P>These controls are developed in other languages, but their operation can be modified and customized with the use of HTML code and VBScript programs. ActiveX controls are placed on a Web page using a special extended HTML tag called &lt;OBJECT&gt; and a supporting tag called &lt;PARAM&gt;.
<BR>
<BR>
<A NAME="E69E89"></A>
<H4 ALIGN=CENTER>
<CENTER>
<FONT SIZE=4 COLOR="#FF0000"><B>The &lt;OBJECT&gt; Tag</B></FONT></CENTER></H4>
<BR>
<P>The &lt;OBJECT&gt; tag,  proposed by the World Wide Web Consortium as a future standard, is used to place an object on a Web page. The primary type of object discussed in this chapter is an ActiveX control, but the tag considers an object to be any type of media that can be put on a page. &lt;OBJECT&gt; was proposed by the Consortium as a way to replace several current HTML tags and attributes&#151;the &lt;IMG&gt; tag, the Java &lt;APPLET&gt; tag, the DYNSRC attribute used for audio and video by Microsoft, and other proprietary extensions to HTML. &lt;OBJECT&gt; also is flexible enough in design to handle new forms of media not yet invented for the Web.
<BR>
<P>Attributes are used with the &lt;OBJECT&gt; tag to specify the following information: 
<BR>
<UL>
<LI>The object's name
<BR>
<BR>
<LI>The type of object
<BR>
<BR>
<LI>The URL address where the object can be found
<BR>
<BR>
<LI>Layout information such as height, width, spacing, border width, alignment, and so on
<BR>
<BR>
<LI>An ID code to verify the object's identity
<BR>
<BR>
</UL>
<P>If the object has parameters, they can be set with the &lt;PARAM&gt; tag. This tag has two attributes: NAME and VALUE. The NAME attribute gives the parameter a name, and VALUE sets up a value for that parameter. 
<BR>
<P>Although &lt;OBJECT&gt; is intended to be used with a broad range of media, the only example of it in current use is the ActiveX control. 
<BR>
<BR>
<A NAME="E69E90"></A>
<H4 ALIGN=CENTER>
<CENTER>
<FONT SIZE=4 COLOR="#FF0000"><B>Generating &lt;OBJECT&gt; HTML Code</B></FONT></CENTER></H4>
<BR>
<P>As you'll see later in this chapter, when you use the ActiveX Control Pad to add an ActiveX object to a Web page, an &lt;OBJECT&gt; tag is added automatically to the page. Here's an example of an ActiveX control's &lt;OBJECT&gt; tag:
<BR>
<PRE>
<FONT COLOR="#000080">&lt;OBJECT ID=&quot;SpinButton1&quot; WIDTH=16 HEIGHT=32
 CLASSID=&quot;CLSID:79176FB0-B7F2-11CE-97EF-00AA006D2776&quot;&gt;
    &lt;PARAM NAME=&quot;Size&quot; VALUE=&quot;423;846&quot;&gt;
&lt;/OBJECT&gt;</FONT></PRE>
<P>This &lt;OBJECT&gt; tag creates an ActiveX spin button control with up and down arrows to change a value. Java programmers will recognize the &lt;PARAM&gt; tag, because it has the same attributes (NAME and VALUE) and the same usage as it does with the Java &lt;APPLET&gt; tag.  Eventually, Microsoft Internet Explorer and other browsers plan to enable the &lt;OBJECT&gt; tag to handle Java applets in addition to ActiveX controls.
<BR>
<P>Because this HTML code is added automatically by the ActiveX Control Pad, you do not need to enter it yourself into a Web page's HTML file. However, an understanding of the elements of an &lt;OBJECT&gt; tag will help you understand ActiveX controls.
<BR>
<P>The ID attribute of the &lt;OBJECT&gt; tag gives the object a name. One of the biggest advantages of VBScript and ActiveX is the capability of one object to communicate with another object. A VBScript program can be used for one element on a page&#151;for example, a &lt;FORM&gt; button&#151;to modify another program, such as an ActiveX control. ID is needed for one object to know how to contact another.
<BR>
<P>The CLSID attribute identifies the type of object and provides some identifying characteristics of the object. In the preceding example, the CLSID was set to a complicated string of numbers and letters:
<BR>
<BR>
<PRE>
<FONT COLOR="#000080">CLSID:79176FB0-B7F2-11CE-97EF-00AA006D2776</FONT></PRE>
<P>This has two parts. The section before the colon, CLSID, identifies this object as an ActiveX control. Another example of an identifier would be java:, representing an applet programmed in that language.
<BR>
<P>The section after the colon indicates some registration information that reveals where the ActiveX control can be found on the user's Windows system. ActiveX controls are downloaded to the user's system and run locally. The CLSID gives the browser enough information to find, identify, and run the control. It also creates a unique identifier for the ActiveX control. No matter how many ActiveX controls are implemented across the Internet, each will use part of the CLSID to establish its identity.
<BR>
<P>ActiveX controls, previously known as OCX or OLE controls, offer added functionality to Web page developers. In addition to being usable on the World Wide Web, ActiveX controls have an advantage over other Internet programming solutions such as Java applets and Netscape plug-ins.
<BR>
<P>These controls can be used immediately in other applications. For example, a control that performs an image editing task on the Web can be plugged into a software program as easily as it was placed on a page.
<BR>
<BR>
<A NAME="E68E65"></A>
<H3 ALIGN=CENTER>
<CENTER>
<FONT SIZE=5 COLOR="#FF0000"><B><IMG SRC="task.gif">Downloading Objects from the Web</B></FONT></CENTER></H3>
<BR>
<P>ActiveX controls are downloaded from the Web and executed locally on the user's computer. An ActiveX-enabled Web browser will behave differently if it encounters a new control than if it has seen the control previously.
<BR>
<P>If you are using a browser that can handle ActiveX controls and you come to a page containing a control, a check will be made to determine whether you have downloaded the control previously. This check will use the CLSID attribute of the &lt;OBJECT&gt; tag to determine whether the ActiveX control is present on your system.
<BR>
<P>If you haven't downloaded the control previously, a special certificate window will be opened that is similar to the one shown in Figure 12.1. 
<BR>
<P><B><A HREF="12lax02a.gif">Figure 12.1. An ActiveX control verification certificate.</A></B>
<BR>
<P>This certificate is part of ActiveX's security plan. Because ActiveX controls are executed on the user's system, there is obvious potential for a programmer to run malicious code. In order to run an ActiveX control, you need some means of identifying the author as a trustworthy source.
<BR>
<P>The VeriSign company is handling ActiveX developer certification for a large number of the existing controls. The certificate window that opens when you encounter a new control on a Web page has a link to a control verification source such as VeriSign and probably a link to the developer's Web site.
<BR>
<P>As the certification window states, you should click the links on the certificate before accepting its validity. If you're satisfied that everything looks legitimate, you can click Yes to download and install the control.
<BR>
<BLOCKQUOTE>
<BLOCKQUOTE>
<HR ALIGN=CENTER>
<BR>
<NOTE>In the certification window, checkboxes enable you to reduce the number of security checks that you require for future checks. You can accept every future control from a company, or even every future control that comes from the verification company such as VeriSign.
<BR>
<BR>Although ActiveX is still in relative infancy as a technology, it seems prudent to leave these checkboxes blank. You must go through more security checks before loading a control, but the loss in time should be regained by the more secure environment. When ActiveX and control verification systems such as VeriSign have become more established, you can elect to accept all of their certifications without question. </NOTE>
<BR>
<HR ALIGN=CENTER>
</BLOCKQUOTE></BLOCKQUOTE>
<P>If you elect to download a control, it downloads and begins running automatically. Figure 12.2 shows the Cyber-GO ActiveX control, which can be used with Internet Explorer 3.0 after a security certificate is accepted. To try Cyber-GO, visit the following Web page:
<BR>
<BR>
<PRE>
<FONT COLOR="#000080"><A HREF="http://www.brlabs.com/cybergo/cybergostart.html">http://www.brlabs.com/cybergo/cybergostart.html</A></FONT></PRE>
<P><B><A HREF="12lax03.gif">Figure 12.2. An ActiveX control, the Cyber-Go game from Brilliance Labs.</A></B>
<BR>
<P>After the control has been downloaded and executed, it remains on the user's computer so that it does not have to be reloaded each time the control is found on a Web page. The only time that an ActiveX control will be downloaded more than once is if a new version is offered that the user does not yet have.
<BR>
<P>This enables much quicker access to an ActiveX control than is presently possible with Java applets, which download again each time they are encountered. However, the disadvantage is that ActiveX controls take up space on a user's hard drive. In the present version of Internet Explorer, ActiveX controls are stored in a subdirectory called Windows/Occache.
<BR>
<P>To see a sampling of the ActiveX controls that have been made available, the Internet information service CNET has introduced an ActiveX file directory and news site at the following URL:
<BR>
<BR>
<PRE>
<FONT COLOR="#000080"><A HREF="http://www.activex.com">http://www.activex.com</A></FONT></PRE>
<P>When a control is on your system, you can use it as a component in your own Web pages and software projects. CNET's ActiveX site has many controls available that cater to programmers in need of useful components. 
<BR>
<BR>
<A NAME="E68E66"></A>
<H3 ALIGN=CENTER>
<CENTER>
<FONT SIZE=5 COLOR="#FF0000"><B><IMG SRC="task.gif">Empowering Netscape Navigator with ActiveX and VBScript</B></FONT></CENTER></H3>
<BR>
<P>At the time of this writing, Microsoft Internet Explorer 3.0 is the only popular browser that implements VBScript and ActiveX controls as part of its &quot;out-of-the-box&quot; functionality. (Given that most people acquire Internet Explorer through an Internet download, however, that box metaphor might be outdated&#151;perhaps &quot;out-of-the-executable-archive&quot;?)
<BR>
<P>Netscape Navigator, the browser used by more than 70 percent of the Web's audience at present, can handle ActiveX and VBScript through special software called a plug-in. If you're unfamiliar with the term, a plug-in is software that has an established link to existing software. This link enables the plug-in to add functionality to the core program. Many Internet users listen to audio programming over the Net by using a RealAudio plug-in. When Netscape or Internet Explorer encounters a RealAudio file, the software knows to run a RealAudio player program to read in the file and crank up the PC's audio.
<BR>
<P>NCompass Labs has developed an ActiveX plug-in called ScriptActive for users of some versions of Netscape Navigator. It currently works on Windows 95, NT, and 3.5.1 systems running Navigator 3.0 or Navigator Gold 3.0. You must be running a 486 or better PC with 8MB of RAM. 
<BR>
<BR>
<A NAME="E69E91"></A>
<H4 ALIGN=CENTER>
<CENTER>
<FONT SIZE=4 COLOR="#FF0000"><B>Downloading ScriptActive</B></FONT></CENTER></H4>
<BR>
<P>The ScriptActive plug-in is offered for a free 30-day trial period, after which it must be purchased from NCompass. Send e-mail to <A HREF="mailto:ncompass@ncompasslabs.com">ncompass@ncompasslabs.com</A> for current pricing information.
<BR>
<P>If you have the right software and system, you can download the NCompass ScriptActive plug-in from the following URL:
<BR>
<BR>
<PRE>
<FONT COLOR="#000080"><A HREF="http://www.ncompasslabs.com/binaries/index.htm">http://www.ncompasslabs.com/binaries/index.htm</A></FONT></PRE>
<P>The file is about 3.5MB in size, so it can take 30 minutes or more to download depending on the speed of your Internet connection. When it's done, you have a single executable file. Run it to start the ScriptActive setup program, which takes you through the steps required to add the plug-in to your version of Navigator.
<BR>
<P>During the installation, the setup program attempts to find where Navigator is located on your system. If it locates Navigator, you can confirm that it's the right version of the software, or choose a different location manually. If no version of Navigator is found, you'll have to find it yourself to continue installing ScriptActive.
<BR>
<P>One question you might be asked during the installation process is whether to replace an existing file with an older one that came with ScriptActive. ScriptActive, like most Windows software, uses dynamic link libraries (DLLs) that take care of some tasks. These libraries are often shared between programs, so you might have a better, newer version of a DLL than the one ScriptActive wants to install.
<BR>
<P>If you're asked whether to replace an existing file with an older version of it, you should keep the existing file in almost all circumstances. If you don't, it might alter the performance of some other software on your system.
<BR>
<P>After the installation is complete, you have to restart your system in order for the plug-in to work correctly. 
<BR>
<BR>
<A NAME="E69E92"></A>
<H4 ALIGN=CENTER>
<CENTER>
<FONT SIZE=4 COLOR="#FF0000"><B>Trying the Plug-In</B></FONT></CENTER></H4>
<BR>
<P>After you have downloaded and finished installing ScriptActive, you're ready to try it out. Load Netscape Navigator if it isn't already loaded, and visit the following URL:
<BR>
<BR>
<PRE>
<FONT COLOR="#000080"><A HREF="http://www.ncompasslabs.com/products/scriptactive_link.htm">http://www.ncompasslabs.com/products/scriptactive_link.htm</A></FONT></PRE>
<P>This page has a link to a showcase of ScriptActive techniques. The plug-in enables VBScript and ActiveX, and it also works with JavaScript, the scripting language developed by Netscape that is similar in scope and function to VBScript. Figure 12.3 shows an example of one of these showcase ActiveX controls running on Netscape Navigator.
<BR>
<P><B><A HREF="12lax01.gif">Figure 12.3. An ActiveX control running on Netscape Navigator 3.0.</A></B>
<BR>
<P>This is one of the advantages of the present competitiveness in the browser market. Because companies are after the widest possible segment of the Web audience, a &quot;kitchen sink&quot; approach is being taken toward new technology. If Netscape comes up with a new idea that gains popularity, Microsoft won't be far behind in adopting it or adopting a compatible solution.
<BR>
<P>The time you spend learning something such as ActiveX and VBScript can help you reach an audience beyond the users of Microsoft Internet Explorer. As more evidence of this, NCompass Labs offers as part of its ScriptActive package a tool to read &lt;OBJECT&gt; tags in HTML files and add &lt;EMBED&gt; tags to accompany them. The &lt;EMBED&gt; tag is Netscape's current implementation of an &lt;OBJECT&gt; tag, and the ScriptActive tool makes an ActiveX page work for both Internet Explorer 3.0 and Netscape Navigator 3.0. 
<BR>
<BR>
<A NAME="E68E67"></A>
<H3 ALIGN=CENTER>
<CENTER>
<FONT SIZE=5 COLOR="#FF0000"><B><IMG SRC="task.gif">An HTML Page Using a Sample ActiveX Control</B></FONT></CENTER></H3>
<BR>
<P>As you saw earlier, ActiveX controls are added to an HTML page by using the &lt;OBJECT&gt; tag. This is normally placed in a document automatically by a tool such as the ActiveX Control Pad. You get a chance to use that software in the next chapter.
<BR>
<P>Here, you will create an HTML page and add an &lt;OBJECT&gt; to the page manually.
<BR>
<P>Enter the full text of Listing 12.1 into any text editor, and save the file as object.html. If your editor has a special file format, as Microsoft Word does, make sure to choose the ASCII text or plain text option when saving the HTML file. 
<BR>
<P>
<FONT COLOR="#000080"><B>Listing 12.1. The full HTML source code of object.html.</B></FONT>
<BR>
<PRE>
<FONT COLOR="#000080"> 1: &lt;HTML&gt;
 2: &lt;HEAD&gt;
 3: &lt;/HEAD&gt;
 4: &lt;BODY&gt;
 5: &lt;FORM NAME=&quot;Form&quot;&gt;
 6: &lt;OBJECT ID=&quot;TextBox1&quot; WIDTH=96 HEIGHT=24
 7:  CLASSID=&quot;CLSID:8BD21D10-EC42-11CE-9E0D-00AA006002F3&quot;&gt;
 8:     &lt;PARAM NAME=&quot;VariousPropertyBits&quot; VALUE=&quot;746604571&quot;&gt;
 9:     &lt;PARAM NAME=&quot;Size&quot; VALUE=&quot;2540;635&quot;&gt;
10:     &lt;PARAM NAME=&quot;FontCharSet&quot; VALUE=&quot;0&quot;&gt;
11:     &lt;PARAM NAME=&quot;FontPitchAndFamily&quot; VALUE=&quot;2&quot;&gt;
12:     &lt;PARAM NAME=&quot;FontWeight&quot; VALUE=&quot;0&quot;&gt;
13: &lt;/OBJECT&gt;
14: &lt;/FORM&gt;
15: &lt;/BODY&gt;
16: &lt;/HTML&gt;</FONT></PRE>
<P>When you're done, load the object.html page into Internet Explorer 3.0, or Netscape Navigator 3.0 if you have installed the ScriptActive plug-in. The page should resemble the one in Figure 12.4.
<BR>
<P><B><A HREF="12lax04.gif">Figure 12.4. The output of object.html in Internet Explorer 3.0.</A></B>
<BR>
<P>ActiveX controls have several properties that can be set up using the &lt;PARAM&gt; tag. The properties vary based on the kind of control: The one in the example is a plain text box like those used with the HTML &lt;FORM&gt; tag.
<BR>
<P>Controls typically are highly customizable through the use of properties. The five &lt;PARAM&gt; tags set here are only a small portion of the total number of properties associated with these text box controls.
<BR>
<P>The CLASSID attribute to the &lt;OBJECT&gt; tag identifies the type of object. At present, when &lt;OBJECT&gt; is used solely to place ActiveX controls on a page, this identifier is not as important as it will be later if the tag becomes a Web standard. In this case, the clsid: portion of CLASSID indicates that the object is an ActiveX control, and the remainder of CLASSID<I> </I>is an unwieldy alphanumeric string. This string identifies the type of control and its location on the user's system.
<BR>
<P>The ID attribute is set up so that an object can communicate with other objects&#151;VBScript programs, other controls, Java applets, or anything else that is compatible with ActiveX controls.
<BR>
<BR>
<A NAME="E69E93"></A>
<H4 ALIGN=CENTER>
<CENTER>
<FONT SIZE=4 COLOR="#FF0000"><B>Adding a Label Object</B></FONT></CENTER></H4>
<BR>
<P>The Web page you have created has a text field, but it's a little obtuse without a label indicating what is supposed to be entered in the field. The most basic ActiveX controls are intrinsic HTML form objects&#151;buttons, text fields, radio buttons, and the other elements of a Web page form.
<BR>
<P>When these are created as ActiveX controls, you don't use HTML code such as the following:
<BR>
<BR>
<PRE>
<FONT COLOR="#000080">&lt;INPUT NAME=&quot;permit&quot; TYPE=Radio VALUE=&quot;Yes&quot;&gt;</FONT></PRE>
<P>Instead, you add the form element to a Web page using the &lt;OBJECT&gt; tag, because it gives you much more control over the element's appearance and behavior. To add a label in front of the text field that you have created in object.html, open the file and insert a blank line right after the &lt;BODY&gt; tag. In the space you just opened up, add the following &lt;OBJECT&gt; HTML code:
<BR>
<PRE>
<FONT COLOR="#000080">&lt;OBJECT ID=&quot;Label1&quot; WIDTH=96 HEIGHT=24
 CLASSID=&quot;CLSID:978C9E23-D4B0-11CE-BF2D-00AA003F40D0&quot;&gt;
    &lt;PARAM NAME=&quot;Caption&quot; VALUE=&quot;The meaning of life (5 words or less): &quot;&gt;
    &lt;PARAM NAME=&quot;Size&quot; VALUE=&quot;2540;635&quot;&gt;
    &lt;PARAM NAME=&quot;FontCharSet&quot; VALUE=&quot;0&quot;&gt;
    &lt;PARAM NAME=&quot;FontPitchAndFamily&quot; VALUE=&quot;2&quot;&gt;
    &lt;PARAM NAME=&quot;FontWeight&quot; VALUE=&quot;0&quot;&gt;
&lt;/OBJECT&gt;</FONT></PRE>
<P>This puts a label in front of the text field. The Caption parameter sets the value of the label's caption, and the WIDTH and HEIGHT attributes set the size of the element. This is one immediate benefit of using a control form object instead of standard HTML: You can change the size. As the other parameters indicate, you can change the appearance as well. 
<BR>
<BR>
<A NAME="E69E94"></A>
<H4 ALIGN=CENTER>
<CENTER>
<FONT SIZE=4 COLOR="#FF0000"><B>Adding a Button Object</B></FONT></CENTER></H4>
<BR>
<P>Because these elements have been created as controls, you can access and modify their properties from VBScript. To see this in action, add a button that checks whether the correct answer has been entered in the text field.
<BR>
<P>Return to object.html and add a blank line above the &lt;/BODY&gt; tag at the bottom of the document. At the spot of that blank line, add the following HTML code:
<BR>
<PRE>
<FONT COLOR="#000080">&lt;P&gt;
&lt;OBJECT ID=&quot;cmdGuess&quot; WIDTH=96 HEIGHT=32
 CLASSID=&quot;CLSID:D7053240-CE69-11CD-A777-00DD01143C57&quot;&gt;
    &lt;PARAM NAME=&quot;Caption&quot; VALUE=&quot;Am I Right?&quot;&gt;
    &lt;PARAM NAME=&quot;Size&quot; VALUE=&quot;2540;846&quot;&gt;
    &lt;PARAM NAME=&quot;FontCharSet&quot; VALUE=&quot;0&quot;&gt;
    &lt;PARAM NAME=&quot;FontPitchAndFamily&quot; VALUE=&quot;2&quot;&gt;
    &lt;PARAM NAME=&quot;ParagraphAlign&quot; VALUE=&quot;3&quot;&gt;
    &lt;PARAM NAME=&quot;FontWeight&quot; VALUE=&quot;0&quot;&gt;
&lt;/OBJECT&gt;</FONT></PRE>
<P>The Web page that you have created has an Am I Right? button, but if you load the page and try it out, nothing happens. In order for something to happen in response to the click of the cmdGuess object, you need to add a short VBScript program to object.html. 
<BR>
<BR>
<A NAME="E69E95"></A>
<H4 ALIGN=CENTER>
<CENTER>
<FONT SIZE=4 COLOR="#FF0000"><B>Adding a VBScript Program</B></FONT></CENTER></H4>
<BR>
<P>VBScript programs can be put in a Web page by placing the programming commands in between an opening &lt;SCRIPT&gt; tag and a closing &lt;/SCRIPT&gt; tag. The program is not displayed on-screen to Web users, but it can be seen by anyone who views the source code of the page.
<BR>
<P>This is one of the disadvantages of using a scripting language on a Web page.  If some of the code needs to be hidden from users, a different programming solution such as Java or ActiveX must be used for the hidden parts.
<BR>
<P>The VBScript program inside a &lt;SCRIPT&gt; tag can be put anywhere in an HTML document. By convention, the code is put in the top part of a Web page between the opening &lt;HEAD&gt; tag and the closing &lt;/HEAD&gt; tag.
<BR>
<P>Add the following HTML code to object.html one line below the starting &lt;HEAD&gt; tag:
<BR>
<PRE>
<FONT COLOR="#000080">&lt;SCRIPT LANGUAGE=&quot;VBScript&quot;&gt;
&lt;!--
Sub cmdGuess_Click
    If Form.TextBox1.Value = &quot;pizza&quot; Then
        Form.cmdGuess.caption = &quot;You're Right!&quot;
        Form.cmdGuess.enabled = 0
    Else
        Form.cmdGuess.caption = &quot;Guess Again&quot;
    End If
End Sub
--&gt;
&lt;/SCRIPT&gt;</FONT></PRE>
<P>When you're done, the HTML source code file should resemble Listing 12.2. 
<BR>
<P>
<FONT COLOR="#000080"><B>Listing 12.2. The full HTML source code of the new object.html.</B></FONT>
<BR>
<PRE>
<FONT COLOR="#000080"> 1: &lt;HTML&gt;
 2: &lt;HEAD&gt;
 3: &lt;SCRIPT LANGUAGE=&quot;VBScript&quot;&gt;
 4: &lt;!--
 5: 
 6: Sub cmdGuess_Click
 7:     If Form.TextBox1.Value = &quot;pizza&quot; Then
 8:         Form.cmdGuess.caption = &quot;You're Right!&quot;
 9:         Form.cmdGuess.enabled = 0
10:     Else
11:         Form.cmdGuess.caption = &quot;Guess Again&quot;
12:     End If        
13: End Sub
14: 
15: --&gt;
16: &lt;/SCRIPT&gt;
17: &lt;/HEAD&gt;
18: &lt;BODY&gt;
19: &lt;FORM NAME=&quot;Form&quot;&gt;
20: &lt;OBJECT ID=&quot;Label1&quot; WIDTH=96 HEIGHT=24
21:  CLASSID=&quot;CLSID:978C9E23-D4B0-11CE-BF2D-00AA003F40D0&quot;&gt;
22:     &lt;PARAM NAME=&quot;Caption&quot; VALUE=&quot;The meaning of life (5 words or less): &quot;&gt;
23:     &lt;PARAM NAME=&quot;Size&quot; VALUE=&quot;2540;635&quot;&gt;
24:     &lt;PARAM NAME=&quot;FontCharSet&quot; VALUE=&quot;0&quot;&gt;
25:     &lt;PARAM NAME=&quot;FontPitchAndFamily&quot; VALUE=&quot;2&quot;&gt;
26:     &lt;PARAM NAME=&quot;FontWeight&quot; VALUE=&quot;0&quot;&gt;
27: &lt;/OBJECT&gt;
28: &lt;OBJECT ID=&quot;TextBox1&quot; WIDTH=96 HEIGHT=24
29:  CLASSID=&quot;CLSID:8BD21D10-EC42-11CE-9E0D-00AA006002F3&quot;&gt;
30:     &lt;PARAM NAME=&quot;VariousPropertyBits&quot; VALUE=&quot;746604571&quot;&gt;
31:     &lt;PARAM NAME=&quot;Size&quot; VALUE=&quot;2540;635&quot;&gt;
32:     &lt;PARAM NAME=&quot;FontCharSet&quot; VALUE=&quot;0&quot;&gt;
33:     &lt;PARAM NAME=&quot;FontPitchAndFamily&quot; VALUE=&quot;2&quot;&gt;
34:     &lt;PARAM NAME=&quot;FontWeight&quot; VALUE=&quot;0&quot;&gt;
35: &lt;/OBJECT&gt;
36: &lt;P&gt;
37: &lt;OBJECT ID=&quot;cmdGuess&quot; WIDTH=96 HEIGHT=32
38:  CLASSID=&quot;CLSID:D7053240-CE69-11CD-A777-00DD01143C57&quot;&gt;
39:     &lt;PARAM NAME=&quot;Caption&quot; VALUE=&quot;Am I Right?&quot;&gt;
40:     &lt;PARAM NAME=&quot;Size&quot; VALUE=&quot;2540;846&quot;&gt;
41:     &lt;PARAM NAME=&quot;FontCharSet&quot; VALUE=&quot;0&quot;&gt;
42:     &lt;PARAM NAME=&quot;FontPitchAndFamily&quot; VALUE=&quot;2&quot;&gt;
43:     &lt;PARAM NAME=&quot;ParagraphAlign&quot; VALUE=&quot;3&quot;&gt;
44:     &lt;PARAM NAME=&quot;FontWeight&quot; VALUE=&quot;0&quot;&gt;
45: &lt;/OBJECT&gt;
46: &lt;/FORM&gt;
47: &lt;/BODY&gt;
48: &lt;/HTML&gt;</FONT></PRE>
<P>Load the Web page into an ActiveX-enabled browser and you can attempt to guess the meaning of life in five words or less. When you click the button labeled Am I Right?, it changes to Guess Again if you are incorrect. The button remains Guess Again until you answer the question by entering pizza in the text field. When that occurs, the button changes to You're Right! and becomes light gray in color. Nothing happens when the button is clicked after this point, because the button's Enabled property has been set to 0, which in VBScript is used to represent a boolean value of false. This is another advantage of using ActiveX controls as opposed to standard HTML forms. The developer can control which form elements can be accessed and can set Enabled to 0 for any buttons or input fields that should not be used at a given time. 
<BR>
<P>Figure 12.5 shows a screen capture from the final version of object.html.
<BR>
<P><B><A HREF="12lax05.gif">Figure 12.5. The output of the final object.html.</A></B>
<BR>
<BR>
<A NAME="E68E68"></A>
<H3 ALIGN=CENTER>
<CENTER>
<FONT SIZE=5 COLOR="#FF0000"><B>Workshop Wrap-Up</B></FONT></CENTER></H3>
<BR>
<P>After typing in all of these &lt;OBJECT&gt; tags and painstakingly entering the numbers of the CLASSID attribute, you might be getting the idea that it's difficult to add objects to a Web page. That's not really the case. You've been made to suffer a little bit in order to learn the HTML foundation of ActiveX controls.
<BR>
<P>In the next chapter, you can learn an easier way to add objects that will let you forget most of the things you just learned about CLASSID. The ActiveX Control Pad, a development tool made available by Microsoft, makes it possible to add controls to a page without typing any &lt;OBJECT&gt; tags.
<BR>
<P>The objects that you created for the meaning of life example used several different parameters to set their property values. Each control comes with its own set of properties that can be modified, with guidelines for how to change them. There are often 20 properties or more that can be used to configure a control, even for a relatively simple object such as those used in object.html.
<BR>
<P>Using a tool such as the ActiveX Control Pad, you can see every property and modify them by changing values on a dialog box.
<BR>
<BR>
<A NAME="E69E96"></A>
<H4 ALIGN=CENTER>
<CENTER>
<FONT SIZE=4 COLOR="#FF0000"><B>Next Steps</B></FONT></CENTER></H4>
<BR>
<P>Now that you are more familiar with the use of ActiveX controls on a page, the following chapters are good places to continue:
<BR>
<UL>
<LI>To learn more about using other objects such as Java applets with VBScript, see Chapter 15, &quot;Using Java Applets with VBScript.&quot;
<BR>
<BR>
<LI>To learn more about building using Form elements with VBScript, see Chapter 6, &quot;Checking Form Data.&quot;
<BR>
<BR>
<LI>To learn more about using the ActiveX Control Pad, see Chapter 13, &quot;Using the ActiveX Control Pad.&quot;
<BR>
<BR>
</UL>
<BR>
<A NAME="E69E97"></A>
<H4 ALIGN=CENTER>
<CENTER>
<FONT SIZE=4 COLOR="#FF0000"><B>Q&amp;A</B></FONT></CENTER></H4>
<BR>
<P><B>Q: I have used an onClick event in VBScript with an HTML intrinsic control, but the ActiveX control in the Workshop uses a Click event. Are these different?</B>
<BR>
<P><B>A:</B> Yes. VBScript uses the Click event with an ActiveX control and the onClick event with the intrinsic HTML form elements. It's easy to mistake the two and use the wrong one when developing a VBScript program. If you try to use an onClick() subroutine with an ActiveX control, the program will be loaded without any errors, but the subroutine will never be called.
<BR>
<P><B>Q: Is there a way to set the initial values of a control from VBScript?</B>
<BR>
<P><B>A:</B> You can create a main body of a VBScript by including code after the &lt;SCRIPT&gt; tag that is not included in a Sub statement. The VBScript interpreter assumes that this code should be executed immediately after the page is loaded.
<BR>
<P>For example, the following VBScript program sets the initial value of the caption for an ActiveX control button called cmdClickMe:
<BR>
<UL>
<UL>
<PRE>
<FONT COLOR="#000080">&lt;SCRIPT&gt;
&lt;!--
cmdClickMe.Caption = &quot;Click If You Dare&quot;
--&gt;
&lt;/SCRIPT&gt;</FONT></PRE></UL></UL>
<P><B>Q: I've written a complicated VBScript in which a text field changes more than once between user input. However, the only change that shows up on-screen is the last change. Why is this?</B>
<BR>
<P><B>A:</B> An aspect of VBScript development that can frustrate programmers is the way it updates the Web page in response to VBScript. Screen updates do not take place each time a screen element is changed. Instead, all of the VBScript code is executed before the display changes. If you change a button's label to Click Me in line 22 of a subroutine, and change it again in line 706 to Don't Click Me, only Don't Click Me will be seen.
<BR>
<P ALIGN=CENTER>
<A HREF="lax11.htm" TARGET="_self"><IMG SRC="blanprev.gif" WIDTH = 37 HEIGHT = 37 BORDER = 0 ALT="Previous Page"></A>
<A HREF="#I0" TARGET="_self"><IMG SRC="blantop.gif" WIDTH = 37 HEIGHT = 37 BORDER = 0 ALT="Page Top"></A>
<A HREF="httoc.htm" TARGET="_self"><IMG SRC="blantoc.gif" WIDTH = 37 HEIGHT = 37 BORDER = 0 ALT="TOC"></A>
<A HREF="lax13.htm" TARGET="_self"><IMG SRC="blannext.gif" WIDTH = 37 HEIGHT = 37 BORDER = 0 ALT="Next Page"></A>
<A HREF="http://www.mcp.com/sams/" TARGET="_self"><IMG SRC="blanhome.gif" WIDTH = 37 HEIGHT = 37 BORDER = 0 ALT="See Page"></A>
</BODY></HTML>
