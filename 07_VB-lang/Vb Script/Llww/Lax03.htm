<HTML>
<HEAD>
<TITLE>lax03.htm </TITLE>
<LINK REL="ToC" HREF="httoc.htm">
<LINK REL="Index" HREF="htindex.htm">
<LINK REL="Next" HREF="lax04.htm">
<LINK REL="Previous" HREF="lax02.htm"></HEAD>
<BODY BGCOLOR="#FFFFFF" TEXT="#000000" LINK="#0000FF" VLINK="#800080">
<A NAME="I0"></A><P ALIGN=CENTER>
<A HREF="lax02.htm" TARGET="_self"><IMG SRC="blanprev.gif" WIDTH = 37 HEIGHT = 37 BORDER = 0 ALT="Previous Page"></A>
<A HREF="httoc.htm" TARGET="_self"><IMG SRC="blantoc.gif" WIDTH = 37 HEIGHT = 37 BORDER = 0 ALT="TOC"></A>
<A HREF="lax04.htm" TARGET="_self"><IMG SRC="blannext.gif" WIDTH = 37 HEIGHT = 37 BORDER = 0 ALT="Next Page"></A>
<A HREF="http://www.mcp.com/sams/" TARGET="_self"><IMG SRC="blanhome.gif" WIDTH = 37 HEIGHT = 37 BORDER = 0 ALT="See Page"></A>
<HR ALIGN=CENTER>
<P>
<UL>
<UL>
<UL>
<LI>
<A HREF="#E68E15" ><IMG SRC="task.gif">Alerting Users with an Alert Box</A>
<LI>
<A HREF="#E68E16" ><IMG SRC="task.gif">Creating a Simple Message Box</A>
<LI>
<A HREF="#E68E17" ><IMG SRC="task.gif">Creating Custom Message Dialog Boxes</A>
<LI>
<A HREF="#E68E18" ><IMG SRC="task.gif">Adding User Confirmation</A>
<LI>
<A HREF="#E68E19" ><IMG SRC="task.gif">Creating an &quot;Add Your Own&quot; Links Page</A>
<LI>
<A HREF="#E68E20" ><IMG SRC="task.gif">Creating a Custom Input Dialog Box</A>
<LI>
<A HREF="#E68E21" ><IMG SRC="task.gif">Displaying Status Messages</A>
<UL>
<LI>
<A HREF="#E69E18" >Workshop Wrap-Up</A>
<LI>
<A HREF="#E69E19" >Next Steps</A>
<LI>
<A HREF="#E69E20" >Q&amp;A</A></UL></UL></UL></UL>
<HR ALIGN=CENTER>
<A NAME="E66E6"></A>
<H1 ALIGN=CENTER>
<CENTER>
<FONT SIZE=6 COLOR="#FF0000"><B>- 3 -</B>
<BR><B>Communicating with Your Users</B></FONT></CENTER></H1>
<BR>
<P>In this chapter, you
<BR>
<UL>
<LI>Use VBScript to interact with the browser's objects and methods
<BR>
<BR>
<LI>Learn how to use VBScript's built-in MsgBox and Input functions to create custom dialogs
<BR>
<BR>
<LI>Display message boxes and alert boxes to pass information to the user
<BR>
<BR>
<LI>Use a Prompt box to solicit information and data from the user
<BR>
<BR>
<LI>Place messages in the browser's status bar
<BR>
<BR>
<LI>Ask the user to confirm an action
<BR>
<BR>
</UL>
<P>Tasks in this chapter:
<BR>
<UL>
<LI>Alerting users with an Alert box
<BR>
<BR>
<LI>Creating a simple message box
<BR>
<BR>
<LI>Creating custom message dialog boxes
<BR>
<BR>
<LI>Adding user confirmation
<BR>
<BR>
<LI>Creating an &quot;Add Your Own&quot; links page
<BR>
<BR>
<LI>Creating a custom input dialog box
<BR>
<BR>
<LI>Displaying status messages
<BR>
<BR>
</UL>
<P>The very essence of the Web is communication, and as a system of mass communication, it does the job admirably. Until now, most Web pages inadequately communicated on a one-to-one basis with the individual user, employing one of two methods for sending messages. First, you could hard-code the information into the HTML text of the Web page&#151;the sort of &quot;one size fits all&quot; approach that is indicative of other mass media such as TV and print. Second, you could present the message in a completely new page that must be downloaded from the server for each particular visitor, taking time and wasting bandwidth.
<BR>
<P>As a computer-based media, the Web has a unique opportunity that is not available to other forms of mass media. You can instantly gear communication to the individual&#151;or to be more precise, you can give the appearance of such. Active content, whether it's in the form of Java applets, ActiveX controls, or active scripting, gives you the opportunity to present Web pages that are flexible and fast and give the impression of a one-to-one dialog with the visitor.
<BR>
<P>This chapter introduces you to some very straightforward VBScript methods that help improve the way your Web page communicates with the user and increase the speed with which this is achieved. In these days of 200Mhz Pentium chips that process a full year's trading accounts five seconds before you've even pressed a button, Web users have expectations of processing speeds far beyond what the Web currently provides. Many users are frustrated by the length of time it takes just to complete a simple form to the satisfaction of the webmaster. Furthermore, the Web has as many different user interfaces as it has Web sites; you should not underestimate the advantage of providing a familiar interface when it comes to helping users get the most from your Web site as quickly as possible.
<BR>
<P>The methods and procedures you'll see in this chapter add a more Windows-type look and feel to your Web pages by presenting the user with familiar Windows dialog boxes and messages. VBScript and active content browsers such as Microsoft Internet Explorer 3.0 provide several built-in methods for displaying Windows-type dialog boxes, which include the following:
<BR>
<UL>
<LI>The Alert box, shown in Figure 3.1, contains a variable message, an Exclamation mark icon, and a single OK button. The title is fixed.
<BR>
<BR>
</UL>
<P><B><A HREF="03lax01.gif">Figure 3.1. An Alert dialog box.</A></B>
<BR>
<UL>
<LI>The message box, shown in Figure 3.2, contains a variable message, a variable title, and a variable number and type of buttons. The default is a single OK button. You can get input from the message box in terms of which button the user clicked.
<BR>
<BR>
</UL>
<P><B><A HREF="03lax02.gif">Figure 3.2. A message dialog box.</A></B>
<BR>
<UL>
<LI>The Confirm box, shown in Figure 3.3, has to some extent superseded the traditional message box in that it contains a variable message, a question icon, and both OK and Cancel buttons. The title, however, is not variable and always displays Microsoft Internet Explorer. As with the message box, you can get input from the Confirm box in terms of which button the user clicked.
<BR>
<BR>
</UL>
<P><B><A HREF="03lax03.gif">Figure 3.3. A Confirm dialog box.</A></B>
<BR>
<UL>
<LI>The Prompt box, shown in Figure 3.4, allows the user to enter data from the keyboard. You can then process this input however you like. The Prompt box enables you to enter a variable message and also default text to speed up user entry. However, because Microsoft seems hell-bent on promoting the fact that you're using Internet Explorer at every opportunity, the Prompt title remains fixed.
<BR>
<BR>
</UL>
<P><B><A HREF="03lax04.gif">Figure 3.4. A Prompt dialog box.</A></B>
<BR>
<UL>
<LI>The Input dialog box, shown in Figure 3.5, is a close relative to the message box, taken straight from the full version of VBA and Visual Basic. It performs the same task as the Prompt dialog box but lets you specify a title for the dialog box and also decide where on the screen the Input dialog box should appear.
<BR>
<BR>
</UL>
<P><B><A HREF="03lax05.gif">Figure 3.5. A Custom Input dialog box.</A></B>
<BR>
<P>Now that you know about the dialog boxes, I want you to use them. The examples you will see are all based on a single HTML document, using an ActiveX button to generate the event that calls the particular dialog box. You can also use an HTML button, such as Submit. The document that you create can serve as a sort of help file of dialog boxes that you can refer to later to check out how each dialog works and experiment with their implementation.
<BR>
<BR>
<A NAME="E68E15"></A>
<H3 ALIGN=CENTER>
<CENTER>
<FONT SIZE=5 COLOR="#FF0000"><B><IMG SRC="task.gif">Alerting Users with an Alert Box</B></FONT></CENTER></H3>
<BR>
<P>The Alert box provides a simple, straightforward method of displaying information to the user. There is no decision-making process for the user. The Alert box contains one OK button; to clear the box, the user simply clicks the button. You can use the Alert box to tell the user quick and straightforward facts, such as, &quot;Hey, you didn't fill in the ZIP code,&quot; or other friendly remarks. The Alert box is as easy to include in your script as it is for the visitor to use. One simple line of code is all it takes, and because the Alert box returns no value, there is no need for further processing when the Alert box is closed.
<BR>
<P>Open the ActiveX Control Pad containing the nice, fresh, default HTML template. Add an ActiveX button as follows:
<BR>
<OL>
<LI>Place your cursor after the &lt;BODY&gt; tag.
<BR>
<BR>
<LI>Select Insert ActiveX Control from the Edit menu.
<BR>
<BR>
<LI>Select Microsoft Forms 2.0 Command Button from the ActiveX Controls dialog, and click OK.
<BR>
<BR>
<LI>Change the Caption property of the Button to read Show an Alert. Click the Apply button at the top of the properties window.
<BR>
<BR>
<LI>Close the Object Editor window to generate the object definition code for the button.
<BR>
<BR>
</OL>
<P>Before you start the Script Wizard, change one of the default settings in the Control Pad, which will save you a lot of time and trouble later. Change the code window default to Code View rather than the standard default of List View. When the code window of the Script Wizard is in List View, you are not allowed to select certain methods and link them to events, which rather defeats the object of the exercise. To change the default, perform the following steps:
<BR>
<OL>
<LI>Select Options|Script from the Tools Menu, which invokes the Script Options dialog box as shown in Figure 3.6.
<BR>
<BR><B><A HREF="03lax06.gif">Figure 3.6. The Script Options dialog box.</A></B>
<BR>
<BR>
<LI>Click the Code View option and click OK.
<BR>
<BR>
</OL>
<BLOCKQUOTE>
<BLOCKQUOTE>
<HR ALIGN=CENTER>
<BR>
<NOTE>For more information on the workings of the ActiveX Control Pad, see Chapter 13, &quot;Getting to Know the ActiveX Control Pad.&quot;</NOTE>
<BR>
<HR ALIGN=CENTER>
</BLOCKQUOTE></BLOCKQUOTE>
<P>Start the Script Wizard by either clicking the Script button or selecting Script Wizard from the Tools menu.
<BR>
<P>With the following procedure, you create an event handler for the click event of the button you just added to the page, which displays an Alert box to the user:
<BR>
<OL>
<LI>Click the plus sign to the left of CommandButton1 in the left Events pane.
<BR>
<BR>
<LI>Select the click event. Notice that Script Wizard is now in code view; the actual definition of the event handler appears in the code window.
<BR>
<BR>
<LI>Click the plus sign to the left of the window object in the right Actions pane. You see a list of methods for the window (browser) object. With these methods, you interface directly with the browser itself, controlling its actions from your script.
<BR>
<BR>
<LI>Double-click the Alert method. The following line is then automatically added to the script window: 
<BR>
<BR>
<UL>
<UL>
<BR>
<PRE>
<FONT COLOR="#000080">call window.alert(msg)</FONT></PRE></UL></UL>
<LI>Replace the mnemonic msg with your own custom message&#151;something cool and earth shattering such as &quot;Hello World.&quot; (Is there no limit to this creative genius?)
<BR>
<BR>
<LI>Click OK, and the Script Wizard generates the required VBScript code. Because you are using an ActiveX button, the code is generated in a separate &lt;SCRIPT&gt; tag.
<BR>
<BR>
</OL>
<P>Just before you save the HTML file, give it a title of VBScript Dialogs and make the background of the page white. Save the file as dialogs.htm.
<BR>
<BLOCKQUOTE>
<BLOCKQUOTE>
<HR ALIGN=CENTER>
<BR>
<NOTE>Unless otherwise stated, all examples in this book have a white background, using the &lt;BODY BGCOLOR=&quot;white&quot;&gt; tag.</NOTE>
<BR>
<HR ALIGN=CENTER>
</BLOCKQUOTE></BLOCKQUOTE>
<P>Run the file with the browser, as shown in Figure 3.7. When the Alert Box is showing, you cannot access the rest of the browser until you clear the Alert box by clicking OK. This obviously stops the user from simply ignoring the dialog box. Furthermore, any script that follows the Alert method does not execute until the user clicks OK and thereby passes control back to the browser or, in this case, the subroutine that originally called the Alert box.
<BR>
<P><B><A HREF="03lax07.gif">Figure 3.7. The first stage of your dialogs sample, the Alert box.</A></B>
<BR>
<P>As you have seen, the Alert method is both easy and quick to use; however, you do have another way to generate an Alert box, and it's a method that allows you to specify your own title.
<BR>
<BR>
<A NAME="E68E16"></A>
<H3 ALIGN=CENTER>
<CENTER>
<FONT SIZE=5 COLOR="#FF0000"><B><IMG SRC="task.gif">Creating a Simple Message Box</B></FONT></CENTER></H3>
<BR>
<P>The message box is quite different from most of the other dialogs you will see in this chapter in that it is not a direct method of the window object. It is, in fact, a function built into VBScript and a direct descendant of its VBA and Visual Basic brethren. Because of this, the message box gives you the greatest flexibility, but at the same time, it requires slightly more thought when you create it.
<BR>
<P>For this part of the dialogs Web page, you need to add another command button. If dialog.htm isn't open in the ActiveX Control Panel, open it and follow these steps:
<BR>
<OL>
<LI>Add a paragraph (&lt;P&gt;) tag after the &lt;/OBJECT&gt; tag.
<BR>
<BR>
<LI>Select Insert ActiveX Control from the Edit menu.
<BR>
<BR>
<LI>Select Microsoft Forms 2.0 Command Button from the ActiveX Controls dialog, and click OK.
<BR>
<BR>
<LI>Change the Caption property of the button to read Show a Message Box. Click the Apply button at the top of the properties window.
<BR>
<BR>
<LI>Change the ID property of the button to CommandButton2 and click Apply.
<BR>
<BR>
<LI>Close the Object Editor window to generate the object definition code for the button.
<BR>
<BR>
</OL>
<P>The VBScript function you use to generate a message box on-screen is MsgBox. The MsgBox function has several elements within parentheses following the function name:
<BR>
<BR>
<PRE>
<FONT COLOR="#000080">x = MsgBox(MessageText,Type,Title)</FONT></PRE>
<UL>
<LI>MessageText is a string value that contains the actual message you want to display.
<BR>
<BR>
<LI>Type is a numerical value that specifies the number and type of command buttons that appear on the dialog box and the icon used, if any. For a full description of the available types, see the section &quot;Creating Custom Message Dialog Boxes,&quot; later in this chapter.
<BR>
<BR>
<LI>Title is a string value containing the title to be displayed across the top of the dialog box.
<BR>
<BR>
<LI>x is any variable to store the return value from the MsgBox function. If you do not specify a message box type, the function displays only an OK button and the return value is irrelevant. You can ignore the value of x, but you must still declare the function as shown previously.
<BR>
<BR>
</UL>
<P>To add the MsgBox function to the CommandButton2, start the Script Wizard (which you know how to do by now) and perform the following steps:
<BR>
<OL>
<LI>Click the plus sign to the left of CommandButton2 in the left Events pane.
<BR>
<BR>
<LI>Select the click event.
<BR>
<BR>
<LI>As you have already seen, the MsgBox function is not actually part of the browser's object hierarchy, so there's no point looking in the right pane; it isn't there! This is a situation for fingers on keys, so put the rodent to bed and enter the following line in the code window. In this first example of MsgBox, you only need an OK button, so the Type is 0:
<BR>
<BR>
<UL>
<UL>
<BR>
<PRE>
<FONT COLOR="#000080">x = MsgBox(&quot;This is my message to you&quot;,0,&quot;My Message Box&quot;)</FONT></PRE></UL></UL>
<LI>Click OK.
<BR>
<BR>
<LI>Save the file and run it with the browser, as shown in Figure 3.8.
<BR>
<BR>
</OL>
<P><B><A HREF="03lax08.gif">Figure 3.8. The second step, a simple message box.</A></B>
<BR>
<BLOCKQUOTE>
<BLOCKQUOTE>
<HR ALIGN=CENTER>
<BR>
<NOTE>For those of you with experience in either VBA or Visual Basic, please note that certain functions, such as MsgBox, appear on the surface to be direct replications. However, you'll usually find some minor differences; for example, the Type variable in MsgBox is not optional in VBScript, whereas it is optional in Visual Basic and VBA. </NOTE>
<BR>
<HR ALIGN=CENTER>
</BLOCKQUOTE></BLOCKQUOTE>
<P>Apart from the capability to specify a title for your message box, you'll note little difference between using a message box in this way and using the Alert method. The real power of MsgBox lies in its Type element, as you're about to see.
<BR>
<BR>
<A NAME="E68E17"></A>
<H3 ALIGN=CENTER>
<CENTER>
<FONT SIZE=5 COLOR="#FF0000"><B><IMG SRC="task.gif">Creating Custom Message Dialog Boxes</B></FONT></CENTER></H3>
<BR>
<P>Using MsgBox enables you to add fully functional Windows dialog boxes, the likes of which you have probably never seen in a Web page before. Furthermore, unlike the built-in Alert and Confirm methods, MsgBox lets you use a wide combination of buttons. The return value from MsgBox determines which button the user pressed. You can also specify which of the buttons is the default button when the dialog box appears&#151;that is, which button has the focus. All this functionality is very easy to tap by simply setting the Type variable of the MsgBox function.
<BR>
<P>You choose the Type variable, which is numeric, by adding three numbers together: the Button type, the Icon type, and the Default Button type. Table 3.1 shows the values for each of the types.
<BR>
<BR>
<P ALIGN=CENTER>
<FONT COLOR="#000080"><B>Table 3.1. MsgBox definition values.</B></FONT>
<BR>

<CENTER><TABLE  BORDERCOLOR=#000040 BORDER=1 CELLSPACING=2 CELLPADDING=3  >
<TR>
<TD VALIGN=top BGCOLOR=#80FFFF ><FONT COLOR=#000080>
<I>Type Value</I></FONT>

<TD VALIGN=top  BGCOLOR=#80FFFF ><FONT COLOR=#000080>
<I>Meaning</I></FONT>
<TR>
<TD ALIGN=center  VALIGN=top  COLSPAN=2 BGCOLOR=#80FFFF ><FONT COLOR=#000080>
<I>Button Types</I></FONT>
<TR>
<TD VALIGN=top  BGCOLOR=#80FFFF ><FONT COLOR=#000080>
0</FONT>

<TD VALIGN=top  BGCOLOR=#80FFFF ><FONT COLOR=#000080>
Display OK button only</FONT>
<TR>
<TD VALIGN=top  BGCOLOR=#80FFFF ><FONT COLOR=#000080>
1</FONT>

<TD VALIGN=top  BGCOLOR=#80FFFF ><FONT COLOR=#000080>
Display OK and Cancel buttons</FONT>
<TR>
<TD VALIGN=top  BGCOLOR=#80FFFF ><FONT COLOR=#000080>
2</FONT>

<TD VALIGN=top  BGCOLOR=#80FFFF ><FONT COLOR=#000080>
Display Abort, Retry, and Ignore buttons</FONT>
<TR>
<TD VALIGN=top  BGCOLOR=#80FFFF ><FONT COLOR=#000080>
3</FONT>

<TD VALIGN=top  BGCOLOR=#80FFFF ><FONT COLOR=#000080>
Display Yes, No, and Cancel buttons</FONT>
<TR>
<TD VALIGN=top  BGCOLOR=#80FFFF ><FONT COLOR=#000080>
4</FONT>

<TD VALIGN=top  BGCOLOR=#80FFFF ><FONT COLOR=#000080>
Display Yes and No buttons</FONT>
<TR>
<TD VALIGN=top  BGCOLOR=#80FFFF ><FONT COLOR=#000080>
5</FONT>

<TD VALIGN=top  BGCOLOR=#80FFFF ><FONT COLOR=#000080>
Display Retry and Cancel buttons</FONT>
<TR>
<TD ALIGN=center  VALIGN=top  COLSPAN=2 BGCOLOR=#80FFFF ><FONT COLOR=#000080>
<I>Icon Types</I></FONT>
<TR>
<TD VALIGN=top  BGCOLOR=#80FFFF ><FONT COLOR=#000080>
0</FONT>

<TD VALIGN=top  BGCOLOR=#80FFFF ><FONT COLOR=#000080>
No icon</FONT>
<TR>
<TD VALIGN=top  BGCOLOR=#80FFFF ><FONT COLOR=#000080>
16</FONT>

<TD VALIGN=top  BGCOLOR=#80FFFF ><FONT COLOR=#000080>
Display Stop icon</FONT>
<TR>
<TD VALIGN=top  BGCOLOR=#80FFFF ><FONT COLOR=#000080>
32</FONT>

<TD VALIGN=top  BGCOLOR=#80FFFF ><FONT COLOR=#000080>
Display Question mark icon</FONT>
<TR>
<TD VALIGN=top  BGCOLOR=#80FFFF ><FONT COLOR=#000080>
48</FONT>

<TD VALIGN=top  BGCOLOR=#80FFFF ><FONT COLOR=#000080>
Display Exclamation mark icon</FONT>
<TR>
<TD VALIGN=top  BGCOLOR=#80FFFF ><FONT COLOR=#000080>
64</FONT>

<TD VALIGN=top  BGCOLOR=#80FFFF ><FONT COLOR=#000080>
Display Information icon</FONT>
<TR>
<TD ALIGN=center  VALIGN=top  COLSPAN=2 BGCOLOR=#80FFFF ><FONT COLOR=#000080>
<I>Default Button Types</I></FONT>
<TR>
<TD VALIGN=top  BGCOLOR=#80FFFF ><FONT COLOR=#000080>
0</FONT>

<TD VALIGN=top  BGCOLOR=#80FFFF ><FONT COLOR=#000080>
First button has focus</FONT>
<TR>
<TD VALIGN=top  BGCOLOR=#80FFFF ><FONT COLOR=#000080>
256</FONT>

<TD VALIGN=top  BGCOLOR=#80FFFF ><FONT COLOR=#000080>
Second button has focus</FONT>
<TR>
<TD VALIGN=top  BGCOLOR=#80FFFF ><FONT COLOR=#000080>
512</FONT>
<TD VALIGN=top  BGCOLOR=#80FFFF ><FONT COLOR=#000080>
Third button has focus</FONT>
</TABLE></CENTER>
<P>By adding one number from each of the three types, you can generate a wide range of different message boxes to suit almost every need.
<BR>
<P>To create a message box with Yes, No, and Cancel Buttons (3); a Question mark icon (32); and the No button (the second button, in this case) as the default (256), you set the MsgBox Type variable to 3 + 32 + 256 = 291.
<BR>
<P>To determine which button the user pressed, you examine the numeric variable of the return value, which is described in Table 3.2.
<BR>
<BR>
<P ALIGN=CENTER>
<CENTER>
<FONT COLOR="#000080"><B>Table 3.2. MsgBox return values.</B></FONT></CENTER>
<BR>

<CENTER><TABLE  BORDERCOLOR=#000040 BORDER=1 CELLSPACING=2 CELLPADDING=3 >
<TR>
<TD VALIGN=top  BGCOLOR=#80FFFF ><FONT COLOR=#000080>
<I>Return Value</I>
</FONT>
<TD VALIGN=top  BGCOLOR=#80FFFF ><FONT COLOR=#000080>
<I>Button Clicked</I></FONT>
<TR>
<TD VALIGN=top  BGCOLOR=#80FFFF ><FONT COLOR=#000080>
1
</FONT>
<TD VALIGN=top  BGCOLOR=#80FFFF ><FONT COLOR=#000080>
OK</FONT>
<TR>
<TD VALIGN=top  BGCOLOR=#80FFFF ><FONT COLOR=#000080>
2
</FONT>
<TD VALIGN=top  BGCOLOR=#80FFFF ><FONT COLOR=#000080>
Cancel</FONT>
<TR>
<TD VALIGN=top  BGCOLOR=#80FFFF ><FONT COLOR=#000080>
3
</FONT>
<TD VALIGN=top  BGCOLOR=#80FFFF ><FONT COLOR=#000080>
Abort</FONT>
<TR>
<TD VALIGN=top  BGCOLOR=#80FFFF ><FONT COLOR=#000080>
4
</FONT>
<TD VALIGN=top  BGCOLOR=#80FFFF ><FONT COLOR=#000080>
Retry</FONT>
<TR>
<TD VALIGN=top  BGCOLOR=#80FFFF ><FONT COLOR=#000080>
5
</FONT>
<TD VALIGN=top  BGCOLOR=#80FFFF ><FONT COLOR=#000080>
Ignore</FONT>
<TR>
<TD VALIGN=top  BGCOLOR=#80FFFF ><FONT COLOR=#000080>
6
</FONT>
<TD VALIGN=top  BGCOLOR=#80FFFF ><FONT COLOR=#000080>
Yes</FONT>
<TR>
<TD VALIGN=top  BGCOLOR=#80FFFF ><FONT COLOR=#000080>
7
</FONT>
<TD VALIGN=top  BGCOLOR=#80FFFF ><FONT COLOR=#000080>
No</FONT>
</TABLE></CENTER>
<P>Now, create an example that allows you to create any combination of types for the MsgBox dialog and determine which button was clicked. For this example, you continue working with the dialogs.htm file created earlier in the chapter. You add two text boxes to the page. The first text box is used for entering the value of the Type variable, and the second text box displays the return value of the message box.
<BR>
<P>You then amend the code for the CommandButton2 event handler to take the value from the first text box, convert it from a string to a number, and use it within the MsgBox function. Display the return value of the MsgBox function in the second text box&#151;easy!
<BR>
<P>Open the file dialogs.htm in your ActiveX Control Pad, and to add the two new text boxes, execute the following steps:
<BR>
<OL>
<LI>Create a new line after the last &lt;/OBJECT&gt; tag.
<BR>
<BR>
<LI>Add an HTML<B> </B>&lt;P&gt; tag.
<BR>
<BR>
<LI>Type Enter a Type Number and press return.
<BR>
<BR>
<LI>Select Insert ActiveX Control from the Edit menu.
<BR>
<BR>
<LI>Select Microsoft Forms 2.0 Text Box from the ActiveX Controls dialog and click OK. Make no changes to the default properties for this text box.
<BR>
<BR>
<LI>Close the Object Editor window to generate the object definition code for the text box.
<BR>
<BR>
</OL>
<P>For the second text box, follow these steps:
<BR>
<OL>
<LI>Create a new line after the last &lt;/OBJECT&gt; tag.
<BR>
<BR>
<LI>Add an HTML &lt;P&gt; tag.
<BR>
<BR>
<LI>Type This is the result and press return.
<BR>
<BR>
<LI>Select Insert ActiveX Control from the Edit menu.
<BR>
<BR>
<LI>Select Microsoft Forms 2.0 Text Box from the ActiveX Controls dialog and click OK. Change the ID property of the control to TextBox2.
<BR>
<BR>
<LI>Close the Object Editor window to generate the object definition code for the second text box.
<BR>
<BR>
</OL>
<P>To edit the script you created earlier, find the event handler for CommandButton2. Two lines above this is a &lt;SCRIPT LANGUAGE=VBScript&gt; tag. To the left of this tag in the margin is a script icon; click the icon to launch the Script Wizard and load the script for CommandButton2. Make the following changes to the script:
<BR>
<OL>
<LI>Place your cursor to the left of the x variable and press return, which moves the code to the second line. On the first line, type the following:
<BR>
<BR>y = CInt(TextBox1.Text)
<BR>
<BR>What does this do? It takes the value entered into the first text box&#151;the message box Type number you want to generate, which is always a string variable (even though you entered a number)&#151;and converts this string into an integer using the CInt function. The resulting integer is placed into a variable called y.
<BR>
<BR>
<LI>Amend the MsgBox function by replacing the 0 with a y. Note that y is not surrounded by quotation marks:
<BR>
<BR>x = MsgBox(&quot;This is my message to you&quot;,y,&quot;My Message Box&quot;)
<BR>
<BR>The number entered into the first text box is used by the MsgBox function to generate a particular style of message dialog.
<BR>
<BR>
<LI>Finally, add a new line of code under the MsgBox function:
<BR>
<BR>TextBox2.Text = x
<BR>
<BR>This line displays the return value of the MsgBox function in the second text box. 
<BR>
<BR>
</OL>
<P>Your completed code section should now look like the one in Figure 3.9.
<BR>
<P><B><A HREF="03lax09.gif">Figure 3.9. The code to generate any combination of custom message box types.</A></B>
<BR>
<P>As always, click OK to generate the code, save the file, and run it with your browser, as shown in Figure 3.10. You can spend hours of fun generating any combination of message box types simply by entering a number in the first text box and clicking the button. The return value of the button you click on the message box is echoed in the second text box. Remember, Type numbers are generated by totalling the three numbers for each type section.
<BR>
<P><B><A HREF="03lax10.gif">Figure 3.10. dialogs.htm in the browser.</A></B>
<BR>
<BR>
<A NAME="E68E18"></A>
<H3 ALIGN=CENTER>
<CENTER>
<FONT SIZE=5 COLOR="#FF0000"><B><IMG SRC="task.gif">Adding User Confirmation</B></FONT></CENTER></H3>
<BR>
<P>A simplified version of the message box, complete with question mark icon and OK and Cancel buttons (analogous with MsgBox Type 33), is built into the browser's window object and accessed with the Confirm method. Whereas the MsgBox function returns a number based on the button type that was selected, the Confirm method returns True if the OK button was clicked and False if the Cancel button was clicked.
<BR>
<P>To test the Confirm method, add another button and text box to the dialogs.htm file. The button invokes the Confirm method and the text box displays the result of the user's action. To add this functionality, perform the following steps:
<BR>
<OL>
<LI>Insert a paragraph tag after the last &lt;/OBJECT&gt; tag.
<BR>
<BR>
<LI>Following the previous instructions, add a command button with a Caption property of Confirm<B> </B>and an ID property of CommandButton3.
<BR>
<BR>
<LI>Add another text box next to CommandButton3 and set its ID property to TextBox3.
<BR>
<BR>
<LI>Open the Script Wizard.
<BR>
<BR>
<LI>Click the plus sign next to CommandButton3 in the left Events window and select the click event.
<BR>
<BR>
<LI>Click the plus sign next to the window object in the right Actions pane.
<BR>
<BR>
<LI>Double-click the Confirm method,  which automatically places the line call window.confirm(msg) in the code window.
<BR>
<BR>
<LI>Edit this line to read x = window.confirm(&quot;Is this OK&quot;).
<BR>
<BR>
<LI>Add a new line in the code window under the current line and type TextBox3.Text = x. 
<BR>
<BR>
</OL>
<P>Your Script Wizard window should look like the one in Figure 3.11.
<BR>
<P><B><A HREF="03lax11.gif">Figure 3.11. The code for the Confirm method in the Script Wizard.</A></B>
<BR>
<P>What you did is invoke the window object's Confirm method. When the user clicks CommandButton3, the Confirm dialog displays the message, Is this OK. The variable x stores the return value for the button that was clicked. The return value x then displays in TextBox3.
<BR>
<P>Click OK, save the file, and run it with the browser, as shown in Figure 3.12.
<BR>
<P><B><A HREF="03lax12.gif">Figure 3.12. The Confirm dialog box at work.</A></B>
<BR>
<P>Dialog boxes can be useful for passing messages and information to the user, but what about information flow in the other direction? The next example shows you how to use the built-in Prompt method to take data input from the user of your Web page.
<BR>
<BR>
<A NAME="E68E19"></A>
<H3 ALIGN=CENTER>
<CENTER>
<FONT SIZE=5 COLOR="#FF0000"><B><IMG SRC="task.gif">Creating an &quot;Add Your Own&quot; Links Page</B></FONT></CENTER></H3>
<BR>
<P>What you construct in this section is actually not a full links page, nor is it a complete add-your-own system. The idea of this section is to show you how you can utilize the Prompt method to obtain input from the user. Completing an add-your-own links page requires some server-side scripting in which you must construct a device for storing the user input and then displaying all the links when they're required. Server-side scripts are also discussed in Chapter 6, &quot;Checking Form Data,&quot;
<BR>
<P>The Prompt method is ideal for taking input from the user in situations where you have limited real estate on the particular Web page or you don't want to involve the user in loading a fresh page. Straight from the current page, you can take inputs without a text box in sight, so at the same time, the Prompt method improves the look of your page. As a result, you can build many different forms into a Web page using the Prompt method without cluttering the page.
<BR>
<P>The page you will create contains an HTML form. Wait a minute! I know I said the Prompt dialog was going to replace forms, but this example is a little different because all the fields are hidden. You have to use an HTML form at some stage to transfer the information from the Web page to the server. The data that comes from the Prompt dialog box is copied by the script into the relevant hidden field of the form; the user is never aware that a form exists on the page. When all the doing is done, you can programmatically submit the form to the server.
<BR>
<P>Get to work on creating the front end to your new interactive links page. Open the ActiveX Control Pad, and using the default page one template, create the top section of the HTML in this way:
<BR>
<PRE>
<FONT COLOR="#000080">&lt;HTML&gt;
&lt;HEAD&gt;
&lt;TITLE&gt;My Links Page&lt;/TITLE&gt;
&lt;/HEAD&gt;
&lt;BODY BGColor=&quot;white&quot;&gt;
&lt;CENTER&gt;
 &lt;H2&gt;Interactive Links to Cool Places&lt;/H2&gt;
    &lt;FORM ACTION=&quot;&quot; METHOD=&quot;POST&quot; NAME=&quot;form1&quot;&gt;
        &lt;INPUT TYPE=hidden NAME=&quot;lnkTitle&quot;&gt;
        &lt;INPUT TYPE=hidden NAME=&quot;lnkURL&quot;&gt;
        &lt;INPUT TYPE=hidden NAME=&quot;lnkDesc&quot;&gt;
    &lt;/FORM&gt;</FONT></PRE>
<P>This exercise leaves the Action element blank. I used a POST method, but you can use GET if it's required by your CGI script.
<BR>
<P>Following the instructions in the previous sections if necessary, add an ActiveX command button directly below the &lt;/FORM&gt; tag. The only property you need to change is its caption; set it to something like Add your Link.
<BR>
<P>Launch the Script Wizard and perform the following steps:
<BR>
<OL>
<LI>Right-click anywhere in the right Actions frame.
<BR>
<BR>
<LI>Select New Global Variable from the pop-up Actions menu.
<BR>
<BR>
<LI>Enter CRLF into the New Global Variable dialog box and click OK.
<BR>
<BR><A NAME="I2"></A>The global variable you created is used to hold two special characters that are interpreted by the program as a carriage return and a line feed (more about this later in this procedure).
<BR>
<BR>
<BLOCKQUOTE>
<BLOCKQUOTE>
<HR ALIGN=CENTER>
<BR>
<NOTE>For more information on constants and variables, see Chapter 4, &quot;Using the VBScript Language.&quot;</NOTE>
<BR>
<HR ALIGN=CENTER>
</BLOCKQUOTE></BLOCKQUOTE>
<LI>Click the plus sign to the left of the CommandButton1 object in the Events (left) pane.
<BR>
<BR>
<LI>Select the click event.
<BR>
<BR>
<LI>Click the plus sign to the left of the window object in the Actions (right) pane.
<BR>
<BR>
<LI>Double-click the Prompt method.
<BR>
<BR>
<LI>Edit the Prompt definition to read
<BR>
<BR>UserTitle = window.prompt(&quot;Please enter the Title&quot;, &quot;&quot;)
<BR>
<BR>This code invokes the window object's Prompt method, displaying a dialog box with the message &quot;Please enter a Title.&quot; The second element, which in this case is blank, is where you could enter a default value to display in the input box, as you'll see in the next code line. If the user clicks OK, the contents of the input box are copied to a variable called UserTitle.
<BR>
<BR>
<LI>Double-click the Prompt method again or copy and paste the first definition.
<BR>
<BR>
<LI>Edit the new Prompt definition to read
<BR>
<BR>UserURL = window.prompt(&quot;Please enter the URL&quot;, &quot;http://&quot;)
<BR>
<BR> This code line displays the message &quot;Please enter the URL,&quot; and this time, the input box is partially completed for the user with http://. The resulting input is copied to a variable called UserURL.
<BR>
<BR>
<LI>Double-click the Prompt method again or copy and paste the first definition under the second definition.
<BR>
<BR>
<LI>Edit the new Prompt definition to read
<BR>
<BR>UserDesc =  window.prompt(&quot;Please enter a short description&quot;, &quot;&quot;)
<BR>
<BR>
<LI>Press Return to create a new line, and double-click the Confirm method under the window object in the right Actions pane.
<BR>
<BR>
<LI>Edit the Confirm definition as follows:
<BR>
<BR>x = window.confirm(&quot;Thank you &quot; &amp; CRLF &amp; &quot;You entered: &quot; &amp; CRLF &amp; UserTitle &amp; CRLF &amp; UserURL &amp; CRLF &amp; UserDesc &amp; CRLF &amp; &quot;Is this correct&quot;)
<BR>
<BR>Note that this should be entered on one line.
<BR>
<BR>
<BLOCKQUOTE>
<BLOCKQUOTE>
<HR ALIGN=CENTER>
<BR>
<NOTE>Make sure you don't use quotation marks around the variable names.</NOTE>
<BR>
<HR ALIGN=CENTER>
</BLOCKQUOTE></BLOCKQUOTE>
<BR>
I'll break this down to explain what you did. First, you know from the earlier parts of this chapter that you invoked a method of the window object called Confirm, which displays a dialog box containing a question mark icon, Yes and No buttons, and a message. The message in the parentheses might look a tad confusing at first glance.
<BR>
<BR>The ampersand (&amp;) is used in VBScript to concatenate strings&#151;meaning to join one string after the other:
<BR>
<BR>&quot;VB&quot; &amp; &quot;Script&quot; = &quot;VBScript&quot;
<BR>&quot;Active&quot; &amp; &quot;X&quot; = &quot;ActiveX&quot;
<BR>
<BR>You can actually use the + sign to concatenate strings, but it's considered good programming practice to use the &amp; when dealing with strings. See Chapter 4, &quot;Using the VBScript Language.&quot; As you can see, you created a complete message that consists of several individual segments: explicit text, variables containing data that were entered by the user, and the carriage return/line feed variable, which you'll define shortly.
<BR>
<BR>
<LI>Under the last line, enter the following lines of code, in which you assign the values entered by the user to the hidden fields in the HTML form. The values are then ready to be whisked away across the Net for processing by your server-side CGI script.
<BR>
<BR>Document.form1.lnkTitle.Value = UserTitle
<BR>Document.form1.lnkURL.Value = UserURL
<BR>Document.form1.lnkDesc.Value = UserDesc
<BR>
<BR>
<LI>One final line of code is required:
<BR>
<BR>rem call Document.form1.submit()
<BR>
<BR>This line does not actually execute in this example; the rem statement turns this line of code into a remark or comment. To make this line of code operational, simply remove the rem statement, and it will perform exactly the same function from the script as occurs when a user clicks an HTML Submit button. Your script should now resemble Figure 3.13. 
<BR>
<BR><B><A HREF="03lax13.gif">Figure 3.13. The almost completed script in the Script Wizard.</A></B>
<BR>
<BR>
<LI>Click OK in the Script Wizard to generate the VBScript code.
<BR>
<BR>
<LI>Finally, edit the script from the text editor by including the following line of code under the dim CRLF line:
<BR>
<BR>CRLF = Chr(10) &amp; Chr(13)
<BR>
<BR>This line of code inserts two ASCII characters that tell the program to execute a carriage return and a line feed.
<BR>
<BR>
</OL>
<BLOCKQUOTE>
<BLOCKQUOTE>
<HR ALIGN=CENTER>
<BR>
<NOTE>Inserting ASCII or ANSI characters into strings using the Chr(<I>n</I>) VBScript function is an easy way to include non-standard characters such as copyright or trademark logos into standard text strings. See the ASCII character set in Appendix G, &quot;The ANSI Character Set.&quot;</NOTE>
<BR>
<HR ALIGN=CENTER>
</BLOCKQUOTE></BLOCKQUOTE>
<P>Save the HTML file as links.htm. It should look something like what you see in Figure 3.14.
<BR>
<P><B><A HREF="03lax14.gif">Figure 3.14. links.htm in the ActiveX Control Pad.</A></B>
<BR>
<P>Run the page with your browser (see Figure 3.15) and click the Add a Link button. What follows is a series of Prompt input dialog boxes in which you enter information about the link you want to add to the page, as shown in Figures 3.15 through 3.18.
<BR>
<P><B><A HREF="03lax15.gif">Figure 3.15. links.htm in Internet Explorer.</A></B>
<BR>
<P>Figure 3.16 shows the first Prompt dialog asking for the Title of the link. Enter a title and click OK.
<BR>
<P><B><A HREF="03lax16.gif">Figure 3.16. When the user clicks the button, a series of Prompt input dialogs is displayed.</A></B>
<BR>
<P>Now you are asked for the URL of the link, as shown in Figure 3.17. Again, enter the required details and click OK.
<BR>
<P><B><A HREF="03lax17.gif">Figure 3.17. Each time the user clicks OK, a new dialog appears.</A></B>
<BR>
<P>Finally, you are asked to input a short description for the site, as shown in Figure 3.18.
<BR>
<P><B><A HREF="03lax18.gif">Figure 3.18. The last input requested is a site description.</A></B>
<BR>
<P>A Confirm dialog is used to display the details you have input (as shown in Figure 3.19), and it asks you to confirm whether the details are correct. What you don't have with this example is a decision-making process based on the user's response to the final confirmation, such as what to do if the user says &quot;No.&quot;
<BR>
<P><B><A HREF="03lax19.gif">Figure 3.19. Finally, a Confirm dialog displays.</A></B>
<BR>
<P>As you have seen, Prompt allows you to collect data from the user and then process that data. In certain situations, using the Prompt dialog provides a neat and tidy alternative to using the normal text box and submit button. This method is especially useful if it is triggered from a text hyperlink to solicit a user's e-mail address for automatically sending information.
<BR>
<P>However, you should be aware of the limitations of the Prompt dialog box. First, it cannot accommodate checkboxes and options; it only displays a single-line text box. Second, it tends to contradict the now accepted nonlinear theory of Windows input. For example, with a normal form with four text boxes, the order in which you enter data is immaterial. It doesn't matter if you enter data in the fourth box first and then complete the first text box, and so on. Furthermore, if you want to edit data entered into a normal form, you can move directly to the data in the text box that needs editing; you don't have to go through all of the pop-up dialog boxes to get to the offending item. As you can see, when you use pop-up dialog boxes to enter information, you fix the order in which the user inputs the data. (First, show box one, then box two, and so on.) If the user wants to edit one of the data fields, either you provide a second level of choice (which one do you need to edit?) or the user must move through all the dialog boxes sequentially until he finds the one to edit. For these reasons, I recommend that you use Prompt input dialogs sparingly and only for inputs of a few data fields.
<BR>
<P>Earlier in the chapter, you saw the MsgBox function, which enables you to create a custom message box for the user. VBScript provides a comparable customizable function for collecting data called InputBox.
<BR>
<BR>
<A NAME="E68E20"></A>
<H3 ALIGN=CENTER>
<CENTER>
<FONT SIZE=5 COLOR="#FF0000"><B><IMG SRC="task.gif">Creating a Custom Input Dialog Box</B></FONT></CENTER></H3>
<BR>
<P>The Prompt method provides you with a neat dialog box for gathering data, but the alternate VBScript function, InputBox, allows you to use your own title for the dialog and position the dialog anywhere on the page.
<BR>
<P>As you're about to see, the InputBox dialog is somewhat larger on the screen than the one provided by Prompt. Look at a quick example using the InputBox function.
<BR>
<P>This time, you're not going to use any ActiveX controls. You use only the normal HTML controls, and all the work is done within the text editor of the ActiveX Control Pad.
<BR>
<P>First, open the ActiveX Control Pad and work on the HTML template provided. Enter the following to set up the HTML code:
<BR>
<PRE>
<FONT COLOR="#000080">&lt;HTML&gt;
&lt;HEAD&gt;
&lt;TITLE&gt;Using the Input Function&lt;/TITLE&gt;
&lt;BODY BGCOLOR=&quot;white&quot;&gt;
&lt;CENTER&gt;
&lt;H2&gt;Example of using the Input function&lt;/H2&gt;
&lt;P&gt;
&lt;FORM NAME=&quot;Form1&quot;&gt;
 &lt;INPUT TYPE=&quot;button&quot; NAME=&quot;CommandButton1&quot; VALUE=&quot;Click Me&quot;&gt;&lt;P&gt;
 &lt;INPUT TYPE=&quot;text&quot; NAME=&quot;TextBox1&quot;&gt;
&lt;/FORM&gt;
&lt;/CENTER&gt;
&lt;/BODY&gt;
&lt;/HTML&gt;</FONT></PRE>
<P>Directly under the &lt;TITLE&gt; line, clear a space and type the following VBScript code:
<BR>
<PRE>
<FONT COLOR="#000080">&lt;SCRIPT LANGUAGE=&quot;vbscript&quot;&gt;
&lt;!--
 Sub CommandButton1_OnClick
   strUserInput = InputBox(&quot;Please enter some text&quot;,&quot;My Custom Input Box&quot;,&quot;&quot;,2000,4000)
   Document.Form1.TextBox1.Value = strUserInput
 End Sub
--&gt;
&lt;/SCRIPT&gt;</FONT></PRE>
<P>I opted to show you the VBScript code in this way, rather than use the Script Wizard, to demonstrate that you have several ways to add script to a page. Had you used the Script Wizard with an HTML control, as you saw in the previous chapter, all the code would have appeared in a single, almost illegible, line in the button's own HTML definition. The preceding method makes things much easier to read and debug.
<BR>
<P>The syntax for InputBox follows:
<BR>
<BR>
<PRE>
<FONT COLOR="#000080">returnvalue = InputBox(&quot;Message&quot;,&quot;Title&quot;,&quot;Default Text&quot;,XPos,YPos)</FONT></PRE>
<P>This code line is fairly self explanatory except for XPos and YPos, and you might be wondering why I set these at 2000 and 4000, respectively. XPos is the position that the left edge of the dialog takes in relation to the left edge of the screen. YPos similarly measures the distance from the top of the dialog box to the top of the screen. The reason these values are so large is that InputBox, having joined the Web recently from a long-running engagement in Visual Basic, still works in twips. &quot;Ah,&quot; I can hear you say, &quot;That explains it. . .NOT.&quot; A standard 640x480 pixel setup has about 15 twips per pixel in both the x and y planes.
<BR>
<BLOCKQUOTE>
<BLOCKQUOTE>
<HR ALIGN=CENTER>
<BR>
<NOTE>Many Windows programming languages use twips as a measurement. The Microsoft Visual Basic help file topic says that a twip is &quot;a unit of screen measurement equal to 1/20 of a printer's point. There are approximately 1440 twips to a logical inch or 567 twips to a logical centimeter, the length of a screen item measuring one inch or one centimeter when printed. A twip is a screen-independent unit used to ensure that placement and proportion of screen elements in your screen application are the same on all display systems.&quot; I couldn't have put it better myself! Unfortunately, because the twip is independent of the screen's pixel coordinate system, there is no set calculation of twips to pixels.</NOTE>
<BR>
<HR ALIGN=CENTER>
</BLOCKQUOTE></BLOCKQUOTE>
<P>Save the file as inputbox.htm and run it with the browser, as shown in Figure 3.20.
<BR>
<P><B><A HREF="03lax20.gif">Figure 3.20. The InputBox example.</A></B>
<BR>
<BR>
<A NAME="E68E21"></A>
<H3 ALIGN=CENTER>
<CENTER>
<FONT SIZE=5 COLOR="#FF0000"><B><IMG SRC="task.gif">Displaying Status Messages</B></FONT></CENTER></H3>
<BR>
<P>The final part of this chapter on communicating with the user deals with that small, unobtrusive bar at the bottom of the browser called a status bar. The status bar is where the browser tells you that the filename of the link you passed over is &quot;Shortcut to http://...&quot; and where many sites display the moving JavaScript messages that you either love or hate (I'm saying nothing).
<BR>
<P>To create a simple message in the status window when the mouse passes over a hyperlink, all you do is build your hyperlink as follows:
<BR>
<PRE>
<FONT COLOR="#000080">&lt;A HREF=&quot;&quot; LANGUAGE=&quot;VBScript&quot; OnMouseOver=&quot;Window.Status='This takes you anywhere'&quot;&gt;Any Link&lt;/A&gt;</FONT></PRE>
<P>This code uses the OnMouseOver event, which fires whenever the mouse passes over the link.
<BR>
<P>This event calls the Status method of the window object and passes the string &quot;This takes you anywhere&quot;. Note that the definition of the method must be surrounded by double quotes; if you need to use quotes inside the definition, you must use single quotes.
<BR>
<P>One limitation of changing the status bar is that there isn't a OnMouseGoneAway event to reset the status bar. Even when the mouse leaves the hyperlink, the text you placed in the status bar remains.
<BR>
<BR>
<A NAME="E69E18"></A>
<H4 ALIGN=CENTER>
<CENTER>
<FONT SIZE=4 COLOR="#FF0000"><B>Workshop Wrap-Up</B></FONT></CENTER></H4>
<BR>
<P>Finding new ways to communicate with others is what brought the Web into being. In this chapter, you saw how using a few simple built-in methods can improve the way your Web pages communicate with the users of your Web site.
<BR>
<P>Whether you use the built-in methods or the customizable VBScript functions, you can quickly and easily add dialog boxes that help visitors use your site in ways that are familiar to them. This familiarity speeds up the learning process that we all face when we visit a site for the first time.
<BR>
<BR>
<A NAME="E69E19"></A>
<H4 ALIGN=CENTER>
<CENTER>
<FONT SIZE=4 COLOR="#FF0000"><B>Next Steps</B></FONT></CENTER></H4>
<BR>
<P>You've just seen VBScript in action doing some real work. To see some other neat things that you can achieve with VBScript, take a look at the following chapters:
<BR>
<UL>
<LI>Chapter 6, &quot;Checking Form Data,&quot; contains details about submitting form data.
<BR>
<BR>
<LI>To learn how to create some unique home pages using VBScript see chapter 11, &quot;Real Life Examples II.&quot;
<BR>
<BR>
<LI>For more information about VBScript's built-in functions, see Chapter 4, &quot;Using the VBScript Language.&quot;
<BR>
<BR>
<LI>Chapter 17, &quot;Client Side Image Maps&#151;The Easy Way,&quot; describes how you can use VBScript to create effective and powerful image maps.
<BR>
<BR>
</UL>
<BR>
<A NAME="E69E20"></A>
<H4 ALIGN=CENTER>
<CENTER>
<FONT SIZE=4 COLOR="#FF0000"><B>Q&amp;A</B></FONT></CENTER></H4>
<BR>
<P><B>Q: Is there a way to display a small browser window containing an HTML file with an input form, instead of an input or prompt dialog box?</B>
<BR>
<P><B>A:</B> Yes, you use the browser window's Open method to create a new window, and load an HTML file into that window. You can control the size of the window and its features such as menu bar, tool bar, and so on. You can see this in action in Chapter 18, &quot;Interacting with the Browser.&quot;
<BR>
<P><B>Q: Why are there so many ways to achieve the same result&#151;for example, two types of input dialog boxes and three types of output dialog boxes?</B>
<BR>
<P><B>A:</B> You'll find with most programming languages that have evolved over a long period that many functions and methods appear to (and in many cases do) replicate others within the language. One reason for this is that new functions and methods are added to the language to enhance the functionality of the old functions and methods, but because many programs (and programmers) rely on the old functions and methods, they can't be removed. However, this particular case is not an identical duplication because MsgBox and InputBox give greater flexiblity than Alert, Confirm, and Prompt. In this case, the duplication occurs because VBScript has built-in functions for MsgBox and InputBox, which have to be included in the language engine. Plus, VBScript must adhere to the Active Scripting Object Model, which specifies that the window object must have Alert, Confirm, and Prompt methods.
<P ALIGN=CENTER>
<A HREF="lax02.htm" TARGET="_self"><IMG SRC="blanprev.gif" WIDTH = 37 HEIGHT = 37 BORDER = 0 ALT="Previous Page"></A>
<A HREF="#I0" TARGET="_self"><IMG SRC="blantop.gif" WIDTH = 37 HEIGHT = 37 BORDER = 0 ALT="Page Top"></A>
<A HREF="httoc.htm" TARGET="_self"><IMG SRC="blantoc.gif" WIDTH = 37 HEIGHT = 37 BORDER = 0 ALT="TOC"></A>
<A HREF="lax04.htm" TARGET="_self"><IMG SRC="blannext.gif" WIDTH = 37 HEIGHT = 37 BORDER = 0 ALT="Next Page"></A>
<A HREF="http://www.mcp.com/sams/" TARGET="_self"><IMG SRC="blanhome.gif" WIDTH = 37 HEIGHT = 37 BORDER = 0 ALT="See Page"></A>
</BODY></HTML>
