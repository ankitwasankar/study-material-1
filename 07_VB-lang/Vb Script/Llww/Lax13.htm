<HTML>
<HEAD>
<TITLE>lax13.htm </TITLE>
<LINK REL="ToC" HREF="httoc.htm">
<LINK REL="Index" HREF="htindex.htm">
<LINK REL="Next" HREF="lax14.htm">
<LINK REL="Previous" HREF="lax12.htm"></HEAD>
<BODY BGCOLOR="#FFFFFF" TEXT="#000000" LINK="#0000FF" VLINK="#800080">
<A NAME="I0"></A><P ALIGN=CENTER>
<A HREF="lax12.htm" TARGET="_self"><IMG SRC="blanprev.gif" WIDTH = 37 HEIGHT = 37 BORDER = 0 ALT="Previous Page"></A>
<A HREF="httoc.htm" TARGET="_self"><IMG SRC="blantoc.gif" WIDTH = 37 HEIGHT = 37 BORDER = 0 ALT="TOC"></A>
<A HREF="lax14.htm" TARGET="_self"><IMG SRC="blannext.gif" WIDTH = 37 HEIGHT = 37 BORDER = 0 ALT="Next Page"></A>
<A HREF="http://www.mcp.com/sams/" TARGET="_self"><IMG SRC="blanhome.gif" WIDTH = 37 HEIGHT = 37 BORDER = 0 ALT="See Page"></A>
<HR ALIGN=CENTER>
<P>
<UL>
<UL>
<UL>
<LI>
<A HREF="#E68E69" ><IMG SRC="task.gif">Downloading New Controls from the Web</A>
<LI>
<A HREF="#E68E70" ><IMG SRC="task.gif">Implementing the ActiveX Menu Control</A>
<LI>
<A HREF="#E68E71" ><IMG SRC="task.gif">Downloading New Controls to Your Users</A>
<UL>
<LI>
<A HREF="#E69E98" >Workshop Wrap-Up</A>
<LI>
<A HREF="#E69E99" >Next Steps</A></UL>
<LI>
<A HREF="#E68E72" >Q&amp;A</A></UL></UL></UL>
<HR ALIGN=CENTER>
<A NAME="E66E26"></A>
<H1 ALIGN=CENTER>
<CENTER>
<FONT SIZE=6 COLOR="#FF0000"><B>- 13 -</B>
<BR><B>Implementing an ActiveX Menu Control</B></FONT></CENTER></H1>
<BR>
<P>In this chapter, you
<BR>
<UL>
<LI>See how to obtain new custom controls from the Microsoft ActiveX Gallery
<BR>
<BR>
<LI>Learn how to use new controls in the ActiveX Control Pad
<BR>
<BR>
<LI>Learn how to download a new control to the users of your page
<BR>
<BR>
</UL>
<P>Tasks in this chapter:
<BR>
<UL>
<LI>Downloading new controls from the Web
<BR>
<BR>
<LI>Implementing the ActiveX Menu control
<BR>
<BR>
<LI>Downloading new controls to your users
<BR>
<BR>
</UL>
<P>As often happens with a new technology, the imagination begins to run ahead of developments. After you start using VBScript and ActiveX on your Web pages, the likelihood is that you will not be content with the forms-type controls supplied with the ActiveX Control Pad, and you'll want to do more.
<BR>
<P>So where do you find a source of extra controls to satisfy your needs? Well, unlike Java Applets, which are relatively new, ActiveX controls (formerly OCX controls) have been in development and use for quite some time. Consequently, hundreds or even thousands of ActiveX controls are available on the Web. The best place to start looking is the Microsoft ActiveX Gallery.
<BR>
<BR>
<A NAME="E68E69"></A>
<H3 ALIGN=CENTER>
<CENTER>
<FONT SIZE=5 COLOR="#FF0000"><B><IMG SRC="task.gif">Downloading New Controls from the Web</B></FONT></CENTER></H3>
<BR>
<P>The Microsoft ActiveX Gallery is part of the Microsoft Site Builder Workshop site at http://www.microsoft.com/workshop/. There you'll find a large range of controls for a wide range of applications and solutions.
<BR>
<P>The address of the gallery at the time of this writing is http://www.microsoft.com/activex/gallery/. The site shown in Figure 13.1 lists controls available from Microsoft and also controls available from third party vendors. The Microsoft controls are free to download and use, but before you use any control within your own Web pages, it is wise to check the copyright, usage, and other conditions of its use.
<BR>
<BLOCKQUOTE>
<BLOCKQUOTE>
<HR ALIGN=CENTER>
<BR>
<NOTE>Check the Microsoft ActiveX Gallery regularly for new and updated controls</NOTE>
<BR>
<HR ALIGN=CENTER>
</BLOCKQUOTE></BLOCKQUOTE>
<P><B><A HREF="13lax01.gif">Figure 13.1. The ActiveX Control Gallery.</A></B>
<BR>
<P>To obtain a particular control from the Microsoft site, simply click on the control name in the left lower frame. A page is then loaded to display a graphical snapshot of the control and a hyperlink to download the control, as shown in Figure 13.2.
<BR>
<BLOCKQUOTE>
<BLOCKQUOTE>
<HR ALIGN=CENTER>
<BR>
<NOTE>If the control loads on the new page immediately when you click &quot;Download and run a working sample,&quot; you already had the control loaded onto your machine.</NOTE>
<BR>
<HR ALIGN=CENTER>
</BLOCKQUOTE></BLOCKQUOTE>
<P><B><A HREF="13lax02.gif">Figure 13.2. Ready to download the menu control.</A></B>
<BR>
<P>For the example used in this chapter, you need to obtain the Microsoft Button menu control.  When you click the hyperlink, a new page that contains the control is loaded. If you don't have the control loaded on your machine already, a control is downloaded to you from the Microsoft control repository. Just prior to the completion of the download, you are asked to confirm that you want to receive this control into your machine (as shown in Figure 13.3). This unique security feature ensures that users know what the source of a control is before they accept it onto the hard drive. 
<BR>
<BLOCKQUOTE>
<BLOCKQUOTE>
<HR ALIGN=CENTER>
<BR>
<NOTE>ActiveX controls are usually stored in your windows\occache\ subdirectory.
<BR>
<BR><B><A HREF="13lax03.gif">Figure 13.3. The safety certificate for the menu control.</A></B>
<BR>
<BR>You can request that certificates not be shown again for Microsoft or for any VeriSign verified software company by checking the boxes at the bottom of the window, in which case controls will be automatically registered onto your machine on download.</NOTE>
<BR>
<HR ALIGN=CENTER>
</BLOCKQUOTE></BLOCKQUOTE>
<BLOCKQUOTE>
<BLOCKQUOTE>
<HR ALIGN=CENTER>
<BR>
<NOTE>A major concern regarding ActiveX controls and Java Applets is the potential security risk. As you will see later in this chapter, this security certificate follows the control around so that it also displays on the machine of a user visiting your site when that user downloads the control from you.</NOTE>
<BR>
<HR ALIGN=CENTER>
</BLOCKQUOTE></BLOCKQUOTE>
<P>After you accept the credentials of the control's author (in this case, Microsoft), the control is registered onto your machine and is ready to use.
<BR>
<P>The page to which you hyperlinked to download the control uses the new control (shown in Figure 13.4) so that you can see it in action. Before you leave the site do two things:
<BR>
<OL>
<LI>Have a look at the source of the page that downloaded and demonstrated the control. Save the source to a text file for later reference.
<BR>
<BR>
<LI>Click the &quot;View Programming Information&quot; hyperlink to obtain a list of properties and methods for the control.
<BR>
<BR>
</OL>
<BLOCKQUOTE>
<BLOCKQUOTE>
<HR ALIGN=CENTER>
<BR>
<NOTE>The source of the page also gives you the actual filename of the control&#151;in this case, btnmenu.ocx.</NOTE>
<BR>
<HR ALIGN=CENTER>
</BLOCKQUOTE></BLOCKQUOTE>
<P><B><A HREF="13lax04.gif">Figure 13.4. The Menu control installed and working.</A></B>
<BR>
<P>Now that you've acquired your shiny new Menu Button control, you can access it from the ActiveX Control Pad and use it on your own Web pages. 
<BR>
<BR>
<A NAME="E68E70"></A>
<H3 ALIGN=CENTER>
<CENTER>
<FONT SIZE=5 COLOR="#FF0000"><B><IMG SRC="task.gif">Implementing the ActiveX Menu Control</B></FONT></CENTER></H3>
<BR>
<P>This example uses the Microsoft ActiveX Menu control,  sometimes known as the Button Menu. You will create a simple user interface on a Web page, using two Menu controls and adding some straightforward VBScript to implement the menu's functionality. This section shows you how to use a newly downloaded control through the ActiveX Control Pad. For details of how to do the same using the HTML Layout control, see Chapter 14, &quot;Using the HTML Layout Control.&quot; Furthermore, in the first part of the example, you run both the HTML page and the control locally. In the next section, you learn how to place the control on your Web site for the use of your site visitors.
<BR>
<OL>
<LI>First, open the ActiveX Control Pad.
<BR>
<BR>
<LI>Place your cursor between the &lt;BODY&gt; tags, and select Insert ActiveX Control from the Edit menu.
<BR>
<BR>
<LI>The Insert ActiveX Control dialog is displayed. Select the BtnMenu object, as shown in Figure 13.5.
<BR>
<BR><B><A HREF="13lax05.gif">Figure 13.5. Select the Menu control from the ActiveX Controls List.</A></B>
<BR>
<BR>When the Button Menu object loads in the object editor, it does not have a default size. It looks rather odd, all crunched up in the corner as shown in Figure 13.6.
<BR>
<BR><B><A HREF="13lax06.gif">Figure 13.6. The Menu control when it first loads.</A></B>
<BR>
<BR>
<LI>Place your cursor on one of the handles, and drag the control to a respectable size,  as shown in Figure 13.7. The exact size is not really important for this exercise.
<BR>
<BR><B><A HREF="13lax07.gif">Figure 13.7. The Menu control resized.</A></B>
<BR>
<BR>
<LI>You don't need to set any properties other than the size at this stage. The caption and menu items will be set by VBScript code as the object loads. Therefore, all you need to do is close the object editor, and the Control Pad automatically generates the code for the menu object in the HTML page (see Figure 13.8).
<BR>
<BR>
<BLOCKQUOTE>
<BLOCKQUOTE>
<HR ALIGN=CENTER>
<BR>
<NOTE>Some versions of the object produce spurious code. If this happens with your control, edit the object definition manually to match the one shown in Figure 13.8.</NOTE>
<BR>
<HR ALIGN=CENTER>
</BLOCKQUOTE></BLOCKQUOTE>
<P><B><A HREF="13lax08.gif">Figure 13.8. The definition code for the first Menu control.</A></B>
<BR>
<LI>Your sample menu page will contain two menu controls, the easiest way to generate a second object is to copy the code for the first object and paste it directly under the first. Then simply change the object ID to pMenu2, as shown in Figure 13.9.
<BR>
<BR>
</OL>
<P><B><A HREF="13lax09.gif">Figure 13.9. The definition code for both Menu controls.</A></B>
<BR>
<P>The menu captions and menu items are added using VBScript code in the Window object's On_Load event. This means that as the page loads, it loads the controls within the page and then executes the code to fill in the menu options and caption. If you place this code in an event that occurs prior to the loading of the objects, you will generate a runtime error. Follow these steps to add the OnLoad event handler code: 
<BR>
<OL>
<LI>Open the ActiveX Script Wizard and click the plus sign to the left of the Window Object in the left events pane.
<BR>
<BR>
<LI>Select the OnLoad event.
<BR>
<BR>
<LI>Click the plus sign to the left of the pmenu1 object in the right actions pane.
<BR>
<BR>
<LI>A full list of the menu object's properties and methods is now displayed. The method used to add menu items is called AddItem. Double-click this method name, and a line of code is automatically generated in the OnLoad event handler in the lower Script Window. (See Figure 13.10.)
<BR>
<BR><B><A HREF="13lax10.gif">Figure 13.10. Starting the On_Load event in the script wizard.</A></B>
<BR>
<BR>
<LI>You now need to manually edit the code you have been given and replace the variable placeholders with your own literal values. First, replace item with First Menu Option. Then replace index with 1.
<BR>
<BR>
<BLOCKQUOTE>
<BLOCKQUOTE>
<HR ALIGN=CENTER>
<BR>
<NOTE>Unlike other VBScript arrays, the array of menu options in this control begins with the number 1.</NOTE>
<BR>
<HR ALIGN=CENTER>
</BLOCKQUOTE></BLOCKQUOTE>
<LI>Repeat steps 4 and 5 to generate lines of code for a total of four menu options, as shown in Figure 13.11.
<BR>
<BR><B><A HREF="13lax01.gif">Figure 13.11. The menu options for Menu One.</A></B>
<BR>
<BR>
<LI>Now you need to specify a caption that will appear on the face of the button menu. To do this, double-click the Caption property, and edit the automatic code (as shown in Figure 13.12) to read as follows: 
<BR>
<BR>
<UL>
<UL>
<BR>
<PRE>
<FONT COLOR="#000080">pmenu1.Caption = &quot;Menu One&quot;</FONT></PRE></UL></UL>
<P><B><A HREF="13lax12.gif">Figure 13.12. The caption for Menu One.</A></B>
<BR>
<LI>To add menu options for Menu Two (pmenu2), click the plus sign to the left of the pmenu2 object in the right actions pane, and then repeat steps from step 4 through 6. Your event handler should then resemble the one in Figure 13.13. Again, you might find it easier and quicker to simply cut and paste the code for the first menu and manually amend the variables.
<BR>
<BR>
</OL>
<P><B><A HREF="13lax13.gif">Figure 13.13. The complete On_Load event.</A></B>
<BR>
<P>Now you have two menus on the page, both with captions and four options. But what happens when you click one of these options? The answer is that the menu object's select event is fired. Your next task, therefore, is to write code that will execute within the select event handler.  The select event handler has one argument: the index number of the menu option that the user selected. Therefore, you have only one select event handler for the whole menu, but it executes differently for each menu option. The best way to achieve this is to use a Select Case control block.
<BR>
<BLOCKQUOTE>
<BLOCKQUOTE>
<HR ALIGN=CENTER>
<BR>
<NOTE>For more details on Select Case, see Chapter 9, &quot;Making Your Program Flow.&quot;</NOTE>
<BR>
<HR ALIGN=CENTER>
</BLOCKQUOTE></BLOCKQUOTE>
<OL>
<LI>Click the plus sign to the left of the pMenu1 object in the left events pane. 
<BR>
<BR>
<LI>Choose the Select event.
<BR>
<BR>
<LI>Enter the following code into the event handler for Menu One's Select event:
<BR>
<BR>
</OL>
<UL>
<UL>
<PRE>
<FONT COLOR="#000080"> Select Case item
  Case 1
   Alert &quot;You selected Option One from Menu One&quot;
  Case 2
   Alert &quot;You selected Option Two from Menu One&quot;
  Case 3
   Alert &quot;You selected Option Three from Menu One&quot;
  Case 4
   Alert &quot;You selected Option Four from Menu One&quot;
End Select</FONT></PRE></UL></UL>
<P>Now repeat this for pMenu2, amending the Alert captions to read ...from Menu Two. The completed event handler for Menu Two's select event is shown in Figure 13.14.
<BR>
<P><B><A HREF="13lax15.gif">Figure 13.14. The complete event handler for Menu Two's Select event.</A></B>
<BR>
<P>For this example, the coding is completed.  Now click OK at the bottom of the Script Wizard window to make the script wizard generate the code into the HTML page, as shown in Figure 13.15.
<BR>
<P><B><A HREF="13lax16.gif">Figure 13.15. The completed script is automatically generated and placed in the text editor.</A></B>
<BR>
<P>Save the file as menudemo.htm, and test it through your MSIE3.0 browser. You should have two menus with four options each (see Figure 13.16). When clicked, the menus display an alert box informing you of which option was clicked (see Figure 13.17).
<BR>
<P><B><A HREF="13lax17.gif">Figure 13.16. Select a menu option.</A></B>
<BR>
<P><B><A HREF="13lax18.gif">Figure 13.17. The Select event fires.</A></B>
<BR>
<P>You can now run this page from your local hard drive, but what happens if you place it on your Web site? On your machine it will run OK. Internet Explorer first checks your hard drive for the btnmenu.ocx file and, if found, loads it and away you go. This is fine for you and the other users with the button menu control, but what about users who don't have the button menu control when they reach your page?
<BR>
<BR>
<A NAME="E68E71"></A>
<H3 ALIGN=CENTER>
<CENTER>
<FONT SIZE=5 COLOR="#FF0000"><B><IMG SRC="task.gif">Downloading New Controls to Your Users</B></FONT></CENTER></H3>
<BR>
<P>Every ActiveX control has a parameter property called CodeBase, which tells Internet Explorer (and any other ActiveX-enabled browser) where it can find a copy of the control if it cannot find one locally (on the client machine).
<BR>
<P>CodeBase has one major restriction. It must point at the same domain that the page was loaded from. The following list shows you how to set the CodeBase and test downloading the page from your Web site as though you are the user. For this example, I've used one of my domains, which happens to be called vbscripts.com (cheap promo!). 
<BR>
<OL>
<LI>To change the CodeBase property, load the menudemo.htm file into the ActiveX Control Pad, and click the object icon next to the pmenu1 object definition.
<BR>
<BR>
<LI>Select the CodeBase property in the property editor and enter the full URL of the domain, the directory where you plan to store the control, and also the btnmenu.ocx filename. (See Figure 13.18.)
<BR>
<BR>
<LI>Don't forget to click the Apply button.
<BR>
<BR>
<P><B><A HREF="13lax19.gif">Figure 13.18. Amending the Codebase property.</A></B>
<BR>
<BLOCKQUOTE>
<BLOCKQUOTE>
<HR ALIGN=CENTER>
<BR>
<NOTE>If the CodeBase property is not set, MSIE3.0 knows to look only on the local drive for the control.</NOTE>
<BR>
<HR ALIGN=CENTER>
</BLOCKQUOTE></BLOCKQUOTE>
<LI>Close the object editor in order to generate the new Object definition, including the CodeBase, as shown in Figure 13.19. 
<BR>
<BR>
</OL>
<P><B><A HREF="13lax20.gif">Figure 13.19. The new control definition.</A></B>
<BR>
<P>Repeat the amendment on the second menu object (pmenu2), and save the file.
<BR>
<P>Now transfer the HTML file (menudemo.htm) and the btnmenu.ocx file to your server, remembering to locate the OCX file in the place you specified in the CodeBase property. You can find the btnmenu.ocx file in your windows\occache\ subdirectory.
<BR>
<P>Before you do anything else, you must remove the btnmenu.ocx file from your machine; otherwise, the browser simply runs your local copy and you haven't performed the test properly. Furthermore, if you still have MSIE3.0 open with the menu control in it, you must close the browser to free the control from memory. Just to be on the safe side, rather than simply deleting the file, copy it to another subdirectory and rename it. 
<BR>
<P>You are now ready to test your first online ActiveX Web page (drum roll. . .). Fire up the browser, and enter the URL of the menudemo.htm file. As the file is loading, the status bar should tell you that it is installing a component. Then the security certificate is displayed as shown in Figure 13.20.
<BR>
<P><B><A HREF="13lax21.gif">Figure 13.20. The controls security certificate.</A></B>
<BR>
<BLOCKQUOTE>
<BLOCKQUOTE>
<HR ALIGN=CENTER>
<BR>
<NOTE>One consideration when using ActiveX controls is the time that is taken to download from the Web site. As you know, this is unquantifiable because it depends upon the Internet connections for you, the client, and the server; the time of day; the wind direction; and a million other variables. However, don't forget that only those users who don't currently have this control will need to download it. And users who visit your site regularly or who have visited another site with the same control will have almost instant access to the control because the browser loads their local copy.</NOTE>
<BR>
<HR ALIGN=CENTER>
</BLOCKQUOTE></BLOCKQUOTE>
<P>I tend to think that it's all right to accept this control. Click OK, and the control completes its download and registers its presence on your machine. The menu controls then appear on the page, ready to be used (as shown in Figure 13.21). Congratulations! 
<BR>
<P><B><A HREF="13lax22.gif">Figure 13.21. The completed Web page working online.</A></B>
<BR>
<P>Here's the complete source code for the sample project menudemo.htm: 
<BR>
<PRE>
<FONT COLOR="#000080">&lt;HTML&gt;
&lt;HEAD&gt;
    &lt;SCRIPT LANGUAGE=&quot;VBScript&quot;&gt;
&lt;!--
Sub window_onLoad()
call pmenu1.AddItem(&quot;First Option&quot;, 1)
call pmenu1.AddItem(&quot;Second Option&quot;, 2)
call pmenu1.AddItem(&quot;Third Option&quot;, 3)
call pmenu1.AddItem(&quot;Fourth Option&quot;, 4)
pmenu1.Caption = &quot;Menu One&quot;
call pmenu2.AddItem(&quot;First Option&quot;, 1)
call pmenu2.AddItem(&quot;Second Option&quot;, 2)
call pmenu2.AddItem(&quot;Third Option&quot;, 3)
call pmenu2.AddItem(&quot;Fourth Option&quot;, 4)
pmenu2.Caption = &quot;Menu Two&quot;
end sub
--&gt;
    &lt;/SCRIPT&gt;
&lt;TITLE&gt;Menu Demonstration Page&lt;/TITLE&gt;
&lt;/HEAD&gt;
&lt;BODY BGCOLOR=&quot;white&quot;&gt;
    &lt;SCRIPT LANGUAGE=&quot;VBScript&quot;&gt;
&lt;!--
Sub pmenu1_Select(item)
 Select Case item
  Case 1
   Alert &quot;You selected Option One from Menu One&quot;
  Case 2
   Alert &quot;You selected Option Two from Menu One&quot;
  Case 3
   Alert &quot;You selected Option Three from Menu One&quot;
  Case 4
   Alert &quot;You selected Option Four from Menu One&quot;
End Select
end sub
--&gt;
    &lt;/SCRIPT&gt;
    &lt;OBJECT ID=&quot;pmenu1&quot; WIDTH=95 HEIGHT=35 TYPE=&quot;application/x-oleobject&quot;
 CLASSID=&quot;CLSID:52DFAE60-CEBF-11CF-A3A9-00A0C9034920&quot;
 CODEBASE=&quot;http://www.vbscripts.com/examples/btnmenu.ocx&quot;&gt;
&lt;/OBJECT&gt;
    &lt;SCRIPT LANGUAGE=&quot;VBScript&quot;&gt;
&lt;!--
Sub pmenu2_Select(item)
Select Case item
  Case 1
   Alert &quot;You selected Option One from Menu Two&quot;
  Case 2
   Alert &quot;You selected Option Two from Menu Two&quot;
  Case 3
   Alert &quot;You selected Option Three from Menu Two&quot;
  Case 4
   Alert &quot;You selected Option Four from Menu Two&quot;
End Select
end sub
--&gt;
    &lt;/SCRIPT&gt;
     &lt;OBJECT ID=&quot;pmenu2&quot; WIDTH=95 HEIGHT=35 TYPE=&quot;application/x-oleobject&quot;
 CLASSID=&quot;CLSID:52DFAE60-CEBF-11CF-A3A9-00A0C9034920&quot;
 CODEBASE=&quot;http://www.vbscripts.com/examples/btnmenu.ocx&quot;&gt;
&lt;/OBJECT&gt;
&lt;/BODY&gt;
&lt;/HTML&gt;</FONT></PRE>
<BR>
<A NAME="E69E98"></A>
<H4 ALIGN=CENTER>
<CENTER>
<FONT SIZE=4 COLOR="#FF0000"><B>Workshop Wrap-Up</B></FONT></CENTER></H4>
<BR>
<P>ActiveX controls open up a whole new world of possibilities for your Web pages. Controls that used to be available only in Windows applications can now be used in your Web pages&#151;and, as you have seen, you can add them quickly and easily. As you travel the Net, keep your eyes open for new and interesting controls, many of which are available for free.
<BR>
<BR>
<A NAME="E69E99"></A>
<H4 ALIGN=CENTER>
<CENTER>
<FONT SIZE=4 COLOR="#FF0000"><B>Next Steps</B></FONT></CENTER></H4>
<BR>
<P>Now that you've had a taste of what ActiveX can really do for your Web site, you can find out more in these chapters:
<BR>
<UL>
<LI>To see how to build incredibly cool Web pages using nothing but ActiveX controls, read the next chapter, &quot;Using the HTML Layout Control.&quot;
<BR>
<BR>
<LI>To learn more about using other controls, see Chapter 16, &quot;Real Life Examples II.&quot;
<BR>
<BR>
<LI>To learn more about the internal working of ActiveX, see Chapter 21, &quot; Advanced ActiveX Techniques.&quot;
<BR>
<BR>
</UL>
<BR>
<A NAME="E68E72"></A>
<H3 ALIGN=CENTER>
<CENTER>
<FONT SIZE=5 COLOR="#FF0000"><B>Q&amp;A</B></FONT></CENTER></H3>
<BR>
<P><B>Q: What happens if a user has a version of the control that is different from the one on my server?</B>
<BR>
<P><B>A:</B> To ensure compatibility you can add the version number of the control with the CodeBase parameter, like this:
<BR>
<P>http://www.youdomain.com/subdir/btnmenu.ocx#Version=4,70,0,1161
<BR>
<P><B>Q: Great, but how do I know what version number my control is?</B>
<BR>
<P><B>A:</B> You can obtain the version number from the source of the page from which you obtained the control at the Site Builder workshop. Simply select view source when you've downloaded a new control, and copy and paste the version number from their CodeBase parameter.
<BR>
<P ALIGN=CENTER>
<A HREF="lax12.htm" TARGET="_self"><IMG SRC="blanprev.gif" WIDTH = 37 HEIGHT = 37 BORDER = 0 ALT="Previous Page"></A>
<A HREF="#I0" TARGET="_self"><IMG SRC="blantop.gif" WIDTH = 37 HEIGHT = 37 BORDER = 0 ALT="Page Top"></A>
<A HREF="httoc.htm" TARGET="_self"><IMG SRC="blantoc.gif" WIDTH = 37 HEIGHT = 37 BORDER = 0 ALT="TOC"></A>
<A HREF="lax14.htm" TARGET="_self"><IMG SRC="blannext.gif" WIDTH = 37 HEIGHT = 37 BORDER = 0 ALT="Next Page"></A>
<A HREF="http://www.mcp.com/sams/" TARGET="_self"><IMG SRC="blanhome.gif" WIDTH = 37 HEIGHT = 37 BORDER = 0 ALT="See Page"></A>
</BODY></HTML>
