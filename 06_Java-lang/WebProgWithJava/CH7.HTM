<HTML>
<BODY BGCOLOR="white" TEXT="black" LINK="blue" ALINK="red" VLINK="green">
<BASEFONT SIZE="5">
<font face="Arial,Helvetica" size="-1" color="#006666"><A HREF="/reference/r_library.html"><B>All Categories</A> :</B>
<b><A HREF="/reference/r_java.html">Java</A></b></font><p>


   <META>
<H1><FONT COLOR=#FF0000>Chapter 7</FONT></H1>
<H1><B><FONT SIZE=5 COLOR=#FF0000>The Order Entry System: Entry Fields,
Labels, and Validation</FONT></B>
</H1>
<P>
<HR WIDTH="100%"></P>
<P>
<H3 ALIGN=CENTER><FONT COLOR="#000000"><FONT SIZE=+2>CONTENTS<A NAME="CONTENTS"></A>
</FONT></FONT></H3>

<UL>
<LI><A HREF="#TextOrientedComponents" >Text-Oriented Components</A>
<UL>
<LI><A HREF="#Labels" >Labels</A>
<LI><A HREF="#TextFields" >Text Fields</A>
<LI><A HREF="#EventsandTextFields" >Events and Text Fields</A>
<LI><A HREF="#TextAreas" >Text Areas</A>
<LI><A HREF="#EventsandTextAreas" >Events and Text Areas</A>
</UL>
<LI><A HREF="#AddingTheseConceptstotheOrderEntry" >Adding These Concepts to the Order Entry System</A>
<LI><A HREF="#TheOrderEntrySystemSoFar" >The Order Entry System So Far</A>
<LI><A HREF="#DataValidation" >Data Validation</A>
<LI><A HREF="#Summary" >Summary</A>
</UL>
<HR>
<P>
The preceding two chapters covered the basic concepts behind applets
and many of the components in the AWT. This chapter covers the
remaining components, including those specific to text input and
output. There are multiple components dealing with text including
labels, text fields, and text areas. The implementation and function
of each one of these components are detailed in this chapter.
<P>
In this chapter, you also take some more steps toward completing
the Order Entry System. This chapter extends the system to include
the components discussed in this chapter and handles them appropriately.
The chapter also fills in some of the &quot;holes,&quot; such
as the unfinished <TT>updateValues</TT>
method, and activates the Clear button.
<P>
Finally, the chapter covers the methods of password entry and
identification, which are very important in the applet design
business. This same section also covers data validation in the
entry fields.
<H2><A NAME="TextOrientedComponents"><FONT SIZE=5 COLOR=#FF0000>Text-Oriented
Components</FONT></A></H2>
<P>
The AWT components covered in this chapter deal with text, both
input and output. The generic AWT text output components are labels.
They are simply unformatted text that can be added to a container.
<P>
<CENTER><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=80%>
<TR VALIGN=TOP><TD><B>Note:</B></TD></TR>
<TR VALIGN=TOP><TD>
<BLOCKQUOTE>
There are also other means to insert text into AWT programs. These are, however, graphical and are covered in <A HREF="ch9.htm" >Chapter 9</A>, &quot;The Order Entry System: Adding Graphics and a Logo.&quot; If you want to do this, look for the <TT>drawString()</TT> method in the index. Since these methods function to draw graphics onto components and are not components themselves, they are saved for later. 
</BLOCKQUOTE>

</TD></TR>
</TABLE></CENTER>
<P>
<H3><A NAME="Labels">Labels</A></H3>
<P>
Labels are simple components. You provide a string, and it gets
placed onto an applet or your panel. Labels are used to label
your other components or features in your panel. Since labels
do nothing, there is no need to handle events generated by them.
As such, you will notice that there are no <TT>Event</TT>s
related to labels in the preceding chapter. Labels are limited
in their ability to change fonts and their plain unattractiveness
when placed together.
<P>
Adding labels to your AWT programs is simple. In fact, doing so
is almost embarrassing because it is so easy. The following line
adds a component containing the string <TT>&quot;It's
so easy.&quot;</TT> to a container:
<BLOCKQUOTE>
<TT>add(new Label(&quot;It's so easy.&quot;));</TT>
</BLOCKQUOTE>
<P>
Of course, if you want to have the ability to change the string
displayed on your label at a later time, you declare a variable
of the <TT>label</TT> type and then
add it to your container using <TT>add</TT>.
The following lines do just that:
<BLOCKQUOTE>
<TT>Label ALabel = new Label(&quot;It's so
easy.&quot;));<BR>
add(ALabel);</TT>
</BLOCKQUOTE>
<P>
The following are the three major constructors for creating labels:
<BLOCKQUOTE>
<TT>ALabel = new Label();<BR>
BLabel = new Label(&quot;The String You Want&quot;);<BR>
CLabel = new Label(&quot;The String You Want&quot;, AlignConstant);</TT>
</BLOCKQUOTE>
<P>
In the first constructor, <TT>ALabel</TT>
is allocated to be an instance of <TT>Label</TT>
with no string or alignment set. In the next two constructors,
the first parameter is the string you want to have displayed.
In the third constructor, the <TT>AlignConstant</TT>
is one of <TT>Label.LEFT</TT>, <TT>Label.RIGHT</TT>,
or <TT>Label.CENTER</TT>. Each different
constant sets the alignment of the text in the label component.
Default alignment is left.
<P>
There are some useful methods when dealing with instances of the
<TT>Label</TT> class. The most important
is the <TT>setText</TT> method. The
<TT>setText</TT> method takes a parameter
of a string and then changes the text on the label to the string.
The following line changes the text of an instance of the <TT>Label</TT>
class:
<BLOCKQUOTE>
<TT>ALabel.setText(&quot;This is how we do
it.&quot;);</TT>
</BLOCKQUOTE>
<P>
That's it. You can also get the text of a label with its <TT>getText</TT>
method. It returns an instance of the <TT>String</TT>
class, as follows:
<BLOCKQUOTE>
<TT>AString = ALabel.getText();</TT>
</BLOCKQUOTE>
<P>
You can also do the same with the alignment of a label. The <TT>setAlignment</TT>
and <TT>getAlignment</TT> methods
allow this. The <TT>setAlignment</TT>
method accepts one of the alignment constants in the <TT>Label</TT>
class (<TT>Label.LEFT</TT>, <TT>Label.RIGHT</TT>,
<TT>Label.CENTER</TT>). The <TT>getAlignment</TT>
method returns one of these same constants.
<P>
The code for the <TT>CrazySimpleLabel</TT>
applet is shown in Listing 7.1.
<HR>
<BLOCKQUOTE>
<B>Listing 7.1. The </B><TT><B>CrazySimpleLabel</B></TT><B>
applet code.<BR>
</B>
</BLOCKQUOTE>
<BLOCKQUOTE>
<TT>import java.awt.*;<BR>
import java.applet.*;<BR>
public class CrazySimpleLabel extends Applet {<BR>
&nbsp;&nbsp;&nbsp;&nbsp;private Label LabelA;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;private Label LabelB;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;private Label LabelC;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;public void init() {<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// Allocate a
new Label.<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;LabelA = new Label();
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// Set the label
string.<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;LabelA.setText(&quot;&nbsp;&nbsp;I
want this text.&quot;);<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// Set the label
alignment.<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;LabelA.setAlignment(Label.RIGHT);
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// Add the Label
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;add(LabelA);<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// Allocate a
new Label.<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;LabelB = new Label(&quot;
I want this text. &quot;);<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// Set the label
alignment.<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;LabelB.setAlignment(Label.CENTER);
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// Add the Label
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;add(LabelB);<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// Allocate a
new Label, set the text and alignment.<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;LabelC = new Label(&quot;I
want this text.&nbsp;&nbsp;&nbsp;&quot;, Label.LEFT);<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// Add the Label
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;add(LabelC);<BR>
&nbsp;&nbsp;&nbsp;&nbsp;}<BR>
}</TT>
</BLOCKQUOTE>
<HR>
<P>
This small applet creates and inserts three different labels onto
the applet panel. Each one is aligned differently. Figure 7.1
shows the output from this applet when viewed with the AppletViewer.
<P>
<A HREF="f7-1.gif" ><B>Figure 7.1 : </B><I>The output from the CrazySimpleLabel applet, which demonstrates the lable class of the AWT.</I></A>
<P>
You may question the extra spaces in some of the label definitions
here. Well, I cheated a little to make a point. Otherwise, making
the alignment stand out distinctly is tough. But if you remove
the spaces from the strings in Listing 7.1, you can see a very
small difference-though it is not immediately apparent.
<H3><A NAME="TextFields">Text Fields</A></H3>
<P>
Text fields allow text input from the user. They allow the full
mouse editing capabilities to which you are accustomed on Windows-based
systems. This includes the cutting and pasting specific to each
platform. Text fields have a limited width. However, text fields
do scroll to follow where the cursor is. There are four constructors
for the <TT>TextField</TT> class.
The following creates a text entry field with a width of zero
characters:
<BLOCKQUOTE>
<TT>ATextField = new TextField();</TT>
</BLOCKQUOTE>
<P>
The following creates a text entry field of <TT>WidthInChar</TT>
(an <TT>int</TT>) characters wide:
<BLOCKQUOTE>
<TT>BTextField = new TextField(WidthInChar);</TT>
</BLOCKQUOTE>
<P>
The following line creates a text field of size zero with the
initial text <TT>InitialText</TT>
(an instance of the <TT>String</TT>
class):
<BLOCKQUOTE>
<TT>CTextField = new TextField(InitialText);</TT>
</BLOCKQUOTE>
<P>
The following line constructs a text field with the initial text
<TT>InitialText</TT> and of size <TT>WidthInChar</TT>.
It is the one you will find most convenient to use.
<BLOCKQUOTE>
<TT>DTextField = new TextField(InitialText,
WidthInChar);</TT>
</BLOCKQUOTE>
<P>
There are also a number of useful methods when dealing with <TT>TextField</TT>s.
Most important is the <TT>getText()</TT>
method, which follows. It returns the text in the field as an
instance of the <TT>String</TT> class.
<BLOCKQUOTE>
<TT>String AString = ATextField.getText();</TT>
</BLOCKQUOTE>
<P>
To set the text in a text field, you do the same thing as with
labels
<BLOCKQUOTE>
<TT>ATextField.setText(AString);</TT>
</BLOCKQUOTE>
<P>
where <TT>AString</TT> is an instance
of the <TT>String</TT> class. You
can also check the width of an instance of the <TT>TextField</TT>
class with the <TT>getColumns()</TT>
method. This function returns the width of the text field in characters
as an integer.
<P>
Also, when users are editing the text in the field, you can set
the selected text for them. On most systems, this is some kind
of highlight, such as inversion of the text and background colors.
Either way, the AWT provides two methods to select the text in
an entry field. The <TT>selectAll()</TT>
method selects all the text in a field. The <TT>select(StartPos,
FinishPos)</TT> method allows you to specify the beginning
and ending integers between which you want to have the text selected.
<P>
The <TT>setEditable(ABoolean)</TT>
and <TT>IsEditable()</TT> functions
in the <TT>TextField</TT> class allow
you to set and test the editability of the text field. If <TT>IsEditable()</TT>
returns <TT>true</TT>, then the user
is able to make changes in the field. However, if it returns <TT>false</TT>,
the text is &quot;locked&quot; in the field and not changeable.
To set what <TT>IsEditable()</TT>
returns, use the <TT>setEditable</TT>
method, which takes a variable of type <TT>boolean</TT>
as its only parameter.
<H3><A NAME="EventsandTextFields">Events and Text Fields</A></H3>
<P>
The <TT>textField</TT> class generates
a call to your <TT>action</TT> method
when the user presses the Enter or Return key when the user's
focus is on the text field. Other than that, no events are generated
by the <TT>textField</TT> class. To
handle the events generated by text fields, your <TT>action</TT>
method should contain code of the following format:
<BLOCKQUOTE>
<TT>public boolean action(Event InEvent,
Object InArgument) {<BR>
.<BR>
.<BR>
&nbsp;&nbsp;&nbsp;&nbsp;if (InEvent.target == YourTextField) {
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// Do what you
want here. . .<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return true;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;} else . . .<BR>
.<BR>
}</TT>
</BLOCKQUOTE>
<P>
This format is included in the <TT>TextFieldCrazy</TT>
applet code, which uses text fields as shown in the Listing 7.2.
The corresponding output is shown in Figure 7.2 (remember that
the line numbers are for reference only).
<P>
<A HREF="f7-2.gif" ><B>Figure 7.2 : </B><I>The CrazyTextField applet, which demonstrates handling events generated by the TextField class.</I></A>
<HR>
<BLOCKQUOTE>
<B>Listing 7.2. The </B><TT><B>TextFieldCrazy</B></TT><B>
applet code.<BR>
</B>
</BLOCKQUOTE>
<BLOCKQUOTE>
<TT>1. import java.awt.*;<BR>
2. import java.applet.*;<BR>
3.<BR>
4. public class CrazyTextField extends Applet {<BR>
5.<BR>
6.&nbsp;&nbsp;&nbsp;&nbsp;// A text field of width 10 with the
initial text set.<BR>
7.&nbsp;&nbsp;&nbsp;&nbsp;private TextField ATextField = new TextField(&quot;ABC&quot;,
25);<BR>
8.&nbsp;&nbsp;&nbsp;&nbsp;// A label with the text set.<BR>
9.&nbsp;&nbsp;&nbsp;&nbsp;private Label ALabel = new Label(&quot;Type
ABC in field.&quot;);<BR>
10.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // The string we will
be checking against.<BR>
11.&nbsp;&nbsp;&nbsp;&nbsp;private static String AString = new
String(&quot;ABC&quot;);<BR>
12.<BR>
13.&nbsp;&nbsp;&nbsp;&nbsp;public void init () {<BR>
14.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// Add the
label to the applet panel.<BR>
15.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;add(ALabel);
<BR>
16.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// Select the
text between indexes 5 and 8.<BR>
17.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ATextField.select(5,
8);<BR>
18.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// Add the
text field to the applet panel.<BR>
19.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;add(ATextField);
<BR>
20.<BR>
21.&nbsp;&nbsp;&nbsp;&nbsp;}<BR>
22.<BR>
23.&nbsp;&nbsp;&nbsp;&nbsp;public boolean action(Event InEvent,
Object InParam) {<BR>
24.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (InEvent.target
== ATextField) {<BR>
25.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if
(AString.equals(ATextField.getText())) {<BR>
26.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ATextField.setEditable(false);
<BR>
27.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
<BR>
28.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
return true;<BR>
29.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;} else return
false;<BR>
30.&nbsp;&nbsp;&nbsp;&nbsp; }<BR>
31.}</TT>
</BLOCKQUOTE>
<HR>
<P>
What's going on? The <TT>init()</TT>
class does all the usual stuff-adding the components to the applet
panel and doing the major setup tasks. Line 14 selects the text
between the fifth and eighth characters in the text field. Then
the <TT>action</TT> method of the
applet is called when the <TT>TextField</TT>
generates an <TT>Event</TT>. It first
checks, in line 24, to see if the event target (the event that
initiated the event) is the text field. If so, then it checks
to see if the text in the field is the text <TT>ABC</TT>.
If this is true, then it sets the field so that the user cannot
further edit the text contained within it.
<P>
<CENTER><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=80%>
<TR VALIGN=TOP><TD><B>Tip:</B></TD></TR>
<TR VALIGN=TOP><TD>
<BLOCKQUOTE>
A note on the <TT>private</TT> modifier: Java is highly object oriented. One major characteristic of object-oriented programming is the idea of data encapsulation. This means that data and variables inside of a class should not be accessible by those outside the class (like other classes who import them). Declaring things to be <TT>private</TT> ensures that those variables aren't accessible except by methods inside the class to which they belong, even if someone wants to try to access them.
</BLOCKQUOTE>
<BLOCKQUOTE>
You can also set your methods and classes to be <TT>final</TT>. When they are labeled as such, they are unable to be extended or overridden by other classes. Use this when possible because it reduces errors and also increases program efficiency.
</BLOCKQUOTE>

</TD></TR>
</TABLE></CENTER>
<P>
<P>
<TT>TextField</TT>s are great, but
what if you want to edit more than one line? That's the place
where the <TT>TextArea</TT> class
comes in.
<H3><A NAME="TextAreas">Text Areas</A></H3>
<P>
Text areas in the AWT allow editing of multiple lines of text.
They share many of the characteristics of <TT>TextField</TT>s,
except they are extended to facilitate editing large areas of
text. There are three major constructors for the <TT>TextArea</TT>
class. The following creates an empty <TT>TextArea</TT>
of width and height zero:
<BLOCKQUOTE>
<TT>ATextArea = new TextArea();</TT>
</BLOCKQUOTE>
<P>
You set the width and height of the field before inserting it.
To set the width and height while declaring the field, use the
constructor
<BLOCKQUOTE>
<TT>BTextArea = new TextArea(WidthInChars,
HeightInChars);</TT>
</BLOCKQUOTE>
<P>
where both of the parameters are integers. To set the initial
text along with the width and the height of the text area, use
the constructor format
<BLOCKQUOTE>
<TT>CTextArea = new TextArea(TextString,
WidthInChars, HeightInChars);</TT>
</BLOCKQUOTE>
<P>
where the first parameter is an instance of the <TT>String</TT>
class and the remaining two parameters are integers.
<P>
There are a number of useful functions to use with the <TT>TextArea</TT>
class. The two simplest are the <TT>getColumns()</TT>
and <TT>getRows</TT> functions. They
each return an integer value representing either the width of
the text area in characters or the height in characters.
<P>
The <TT>insertText</TT> and <TT>replaceText</TT>
methods are a little more useful. The <TT>insertText</TT>
method takes the following format:
<BLOCKQUOTE>
<TT>ATextArea.insertText(AString, PositionInt);</TT>
</BLOCKQUOTE>
<P>
The preceding line inserts the text contained in the <TT>string
AString</TT> at position <TT>PositionInt</TT>.
The <TT>replaceText</TT> method takes
the following format:
<BLOCKQUOTE>
<TT>ATextArea.replaceText(AString, StartInt,
EndInt);</TT>
</BLOCKQUOTE>
<P>
The preceding line replaces the text between positions <TT>StartInt</TT><I>
</I>and <TT>EndInt</TT> with the text
in <TT>AString</TT>. The <TT>appendText</TT>
method appends a string (passed as a parameter) at the end of
the current text in the text area.
<P>
When you're dealing with the user selecting text, you can use
a number of other methods. For instance, if you ask a user to
highlight a portion of text that he or she likes the best, you
can find the start and end positions of the selection <TT>getSelectionStart()</TT>
and <TT>getSelectionStop()</TT>methods.
These methods each return integers representing the first and
last positions of the selected text. If you want to get the selected
text itself, use the <TT>getSelectedText()</TT>
method, which returns an instance of the <TT>String</TT>
class. The following line of code sets the string <TT>AString</TT>
equal to the selected text in a text area:
<BLOCKQUOTE>
<TT>AString = ATextArea.getSelectedText();</TT>
</BLOCKQUOTE>
<P>
You can also set the selected text in a text area. The following
method does just that:
<BLOCKQUOTE>
<TT>ATextArea.select(StartPos, EndPos);</TT>
</BLOCKQUOTE>
<P>
where both parameters are integers. To select all the text in
the text area, you use the <TT>selectAll()</TT>
method, as follows:
<BLOCKQUOTE>
<TT>ATextArea.selectAll();<BR>
</TT>
</BLOCKQUOTE>
<CENTER><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=80%>
<TR VALIGN=TOP><TD><B>Tip:</B></TD></TR>
<TR VALIGN=TOP><TD>
<BLOCKQUOTE>
It is risky to count on users to be able to perform the cutting and pasting of text for a couple of reasons. One, on many systems such as X Window, cutting and pasting text aren't intuitive. Two, many of the individuals using the Web these days are new to computers, so they may not know how to cut and paste.</BLOCKQUOTE>

</TD></TR>
</TABLE></CENTER>
<P>
<H3><A NAME="EventsandTextAreas">Events and Text Areas</A></H3>
<P>
Perhaps the most difficult task when you're dealing with components
in the AWT is not creating them, but getting them active. Text
areas and text fields differ in their dealings with events. Text
areas do not generate any calls to an <TT>action</TT>
method. Instead, they generate events that are usually dealt with
by your program's <TT>handleEvent</TT>
method. Two events that you will find useful are <TT>Event.SELECT</TT>
and <TT>Event.DESELECT</TT>. A complete
listing of the <TT>Event.id</TT>s
that deal with the <TT>List</TT> class
are included in <A HREF="ch6.htm" >Chapter 6</A>, &quot;The Order
Entry System: Adding Features and Handling Events.&quot; In most
cases, you associate an event generated by another component such
as a button or a list. If you want, the Order Entry System can
associate a selection in the product list with inserting new text
about that product into the text area. Or a button labeled &quot;Clear&quot;
can empty the text area when its event is handled in the action
method.
<P>
To deal with text areas in your programs, include coding of the
following format in your <TT>handleEvent</TT>
method:
<BLOCKQUOTE>
<TT>if (InEvent.target == YourTextArea) {
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;if (InEvent.id == <I>WhatYouAreCheckingFor</I>)
{<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// Do what you
want. . .<BR>
&nbsp;&nbsp;&nbsp;&nbsp;}<BR>
}</TT>
</BLOCKQUOTE>
<H2><A NAME="AddingTheseConceptstotheOrderEntry"><FONT SIZE=5 COLOR=#FF0000>Adding
These Concepts to the Order Entry System</FONT></A></H2>
<P>
Now that some more AWT concepts have been covered, it's time to
include a couple more features in the Order Entry System. First,
add some labels in order to help organize the applet panel into
an orderly and easy-to-follow layout. Also, incorporate some text
fields and a text area into the system. Finally, construct the
framework to handle events from these new components.
<P>
First, to add labels, include the following code:
<BLOCKQUOTE>
<TT>add(new Label(&quot;Name: &quot;);</TT>
</BLOCKQUOTE>
<P>
Since most of the labels are static and don't need to be changed
after adding them, you don't generally need to declare variables
of the <TT>Label</TT> component class.
Instead, allocate a new <TT>Label</TT>
and then insert it onto the applet panel. You will add multiple
labels in this same way.
<P>
There are a couple of labels that you need to change during the
running of the applet. The total, subtotal, and price per item
need to be displayed via labels. As different choices about sizes
and products are made, these labels need to be updated. To do
this, call the <TT>updateValues</TT>
method, which was discussed last when events were generated by
these components. The <TT>updateValues</TT>
method updates all the internal values to match current settings
and choices. This method is implemented in this section.
<P>
Also, since labels need to display strings, you need to convert
the integers to an instance of the <TT>String</TT>
class. To do this, use a method of the <TT>Integer</TT>
type of Java. The following code sets a label to show a value
of 20:
<BLOCKQUOTE>
<TT>ALabel.setText(Integer.toString(20));</TT>
</BLOCKQUOTE>
<P>
This is applicable to the variable containing the amount of an
item to be ordered. However, some of the other variables and constants
are of the type <TT>Double</TT>. But,
you are in luck because the same conversion is possible with <TT>Double</TT>s.
<P>
<CENTER><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=80%>
<TR VALIGN=TOP><TD><B>Tip:</B></TD></TR>
<TR VALIGN=TOP><TD>
<BLOCKQUOTE>
If you can't find something that you want to do, check out the source code for the Java library. They are in the SRC directory of your installed developer's kit. All the classes included are well documented and easy to follow. And if it looks like Greek, then at least you tried, right? </BLOCKQUOTE>

</TD></TR>
</TABLE></CENTER>
<P>
<P>
To add a text field, you need to declare an instance of it as
a variable in the applet. This line creates a new instance of
<TT>TextField</TT> that is 25 characters
in width:
<BLOCKQUOTE>
<TT>Private textfield nameentryfield = new
textfield(25);</TT>
</BLOCKQUOTE>
<P>
By declaring it <TT>private</TT>,
you disable any access outside the applet to the variable. This
isn't necessary but is good coding practice. You also declare
the same type of text fields to enter other user information such
as city or contact information.
<P>
The Order Entry System includes a text area to allow the users
to enter any comments they may have. To declare an instance of
the <TT>TextArea</TT> that is 25 characters
wide, 4 rows tall, and with no starting text, use this line:
<BLOCKQUOTE>
<TT>private TextArea CommentTextArea = new
TextArea(4, 25);</TT>
</BLOCKQUOTE>
<P>
With both this text area and the other components, you include
their addition to the applet panel in the <TT>init</TT>
method.
<P>
You don't need to deal with any events generated by the labels
in the applet since the <TT>Label</TT>
class doesn't generate any events. However, you want to set the
framework for handling events from text entry fields. To do this,
add the following code segment to the <TT>action</TT>
method for each text field that you want to deal with:
<BLOCKQUOTE>
<TT>if (InEvent.target == NameEntryField)
{<BR>
&nbsp;&nbsp;&nbsp;&nbsp;// What we want to do here . .<BR>
&nbsp;&nbsp;&nbsp;&nbsp;return true;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;} else</TT>
</BLOCKQUOTE>
<P>
Of course, the inside of the <TT>if</TT>
statement is different for each text field in the applet. For
example, the name text entry field calls a method to check to
see that there is actually a name included.
<P>
For functionality, you don't need to handle any events from the
comment text area. A method called <TT>resetValues
</TT>is also added; it resets all internal values in the
applet.
<P>
The <TT>updateValues</TT> method does
the real work of the applet. In a sense, you can look at the rest
of the program as an interface for it. It takes the input data
and computes the necessary output. The way <TT>updateValues</TT>
works is simple. First, it declares all the variables that it
needs to use. It finds the indexes of the different choices and
lists. It uses the input from the slider to compute the different
output values such as the subtotal and the total. It changes the
text in the corresponding labels on the applet panel to match
the new values. And then the runtime comes along, and when it
updates the applet panel, it changes the appearance to be what
the method just set it to.
<P>
Listing 7.3 shows the code for the Order Entry System so far.
Figure 7.3 shows the resulting Order Entry System with these additions.
<P>
<A HREF="f7-3.gif" ><B>Figure 7.3 : </B><I>The Order Entry System with text-oriented components added.</I></A>
<HR>
<BLOCKQUOTE>
<B>Listing 7.3. The Order Entry
System code with text-oriented components added.<BR>
</B>
</BLOCKQUOTE>
<BLOCKQUOTE>
<TT>import java.awt.*;<BR>
import java.applet.*;<BR>
public class OrderEntrySystem extends Applet {<BR>
&nbsp;&nbsp;&nbsp;&nbsp;// The subtotal and total variables.<BR>
&nbsp;&nbsp;&nbsp;&nbsp;private double SubTotalOne = 0.0;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;private double Total = 0.0;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;// The price multipliers for each different
product size.<BR>
&nbsp;&nbsp;&nbsp;&nbsp;private double multiplierSmall = 0.5;
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;private double multiplierMedium = 1.0;
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;private double multiplierLarge = 1.5;
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;private double multiplierJumbo = 2.25;
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;// The local constant base prices.<BR>
&nbsp;&nbsp;&nbsp;&nbsp;static double ProdOneBaseValue = 1.0;
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;static double ProdTwoBaseValue = 1.33;
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;static double ProdThreeBaseValue = 1.75;
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;static double ProdFourBaseValue = 8.75;
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;// Declare all of the variables we'll
use.<BR>
&nbsp;&nbsp;&nbsp;&nbsp;private Button SubmitButton;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;private Button ClearButton;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;private Button QuitButton;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;private Checkbox RepeatCustCheckBox;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;private Checkbox MailBox;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;private Checkbox EmailBox;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;private Checkbox PhoneBox;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;private List ProductList;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;private Choice SizeChoice;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;private Scrollbar OrderAmountSlider;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;// The labels which will be variable and
change when<BR>
&nbsp;&nbsp;&nbsp;&nbsp;// the other selections are changed.<BR>
&nbsp;&nbsp;&nbsp;&nbsp;private Label SubTotalLabel = new Label(&quot;$0.0
&quot;);<BR>
&nbsp;&nbsp;&nbsp;&nbsp;private Label TotalLabel = new Label(&quot;$0.0
&quot;);<BR>
&nbsp;&nbsp;&nbsp;&nbsp;private Label AmountLabel = new Label(&quot;$0.0
&quot;);<BR>
&nbsp;&nbsp;&nbsp;&nbsp;private Label PricePerItemLabel = new
Label(&quot;$0.0 &quot;);<BR>
&nbsp;&nbsp;&nbsp;&nbsp;// The entry field for the user to enter
their name.<BR>
&nbsp;&nbsp;&nbsp;&nbsp;private TextField NameEntryField = new
TextField(25);<BR>
&nbsp;&nbsp;&nbsp;&nbsp;private TextField ZipEntryField = new
TextField(5);<BR>
&nbsp;&nbsp;&nbsp;&nbsp;private TextField StreetEntryField = new
TextField(25);<BR>
&nbsp;&nbsp;&nbsp;&nbsp;private TextField CityEntryField = new
TextField(25);<BR>
&nbsp;&nbsp;&nbsp;&nbsp;// The comment entry area.<BR>
&nbsp;&nbsp;&nbsp;&nbsp;private TextArea CommentTextArea = new
TextArea(4, 25);<BR>
&nbsp;&nbsp;&nbsp;&nbsp; // Declare the init method.<BR>
&nbsp;&nbsp;&nbsp;&nbsp; public void init()<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//
Add and create three buttons.<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Button
SubmitButton = new Button(&quot;Submit&quot;);<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;add(SubmitButton);
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Button
ClearButton = new Button(&quot;Clear&quot;);<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;add(ClearButton);
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Button
QuitButton = new Button(&quot;Quit&quot;);<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;add(QuitButton);
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//
Add and create the repeat customer checkbox.<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Checkbox
RepeatCustCheckBox = new Checkbox(&quot;Repeat Customer?&quot;);
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;add(RepeatCustCheckBox);
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//
Add a label to the ContactMethodGroup.<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;add(new
Label(&quot;How would you like to be contacted? &quot;));<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//
Declare the CheckboxGroup, and allocate space.<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;CheckboxGroup
ContactMethodGroup;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ContactMethodGroup
= new CheckboxGroup();<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//
Create some checkboxes to put in the group.<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Checkbox
EmailBox = new Checkbox(&quot;Email&quot;,ContactMethodGroup,true);
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Checkbox
PhoneBox = new Checkbox(&quot;Phone&quot;,ContactMethodGroup,false);
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Checkbox
MailBox = new Checkbox(&quot;US Mail&quot;,ContactMethodGroup,false);
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//
Add the checkboxes into the applet panel.<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;add(EmailBox);
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;add(PhoneBox);
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;add(MailBox);
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//
Label the item list.<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;add(new
Label(&quot;Products&quot;));<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//
Create the list, 4 items visible, no multiple<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//
selections.<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ProductList
= new List(4, false);<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//
AddItems to the List.<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ProductList.addItem(&quot;Oscar&quot;);
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ProductList.addItem(&quot;Lionhead&quot;);
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ProductList.addItem(&quot;Jack
Dempsey&quot;);<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ProductList.addItem(&quot;Angelfish&quot;);
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//
Add the List to the Applet panel.<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;add(ProductList);
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//
Add a label to the choice of sizes.<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;add(new
Label(&quot;Size:&quot;));<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//
Create the Choice box.<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;SizeChoice
= new Choice();<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//
AddItems to the List.<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;SizeChoice.addItem(&quot;Jumbo&quot;);
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;SizeChoice.addItem(&quot;Large&quot;);
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;SizeChoice.addItem(&quot;Medium&quot;);
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;SizeChoice.addItem(&quot;Small&quot;);
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//
Add the Choice to the Applet panel.<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;add(SizeChoice);
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//
Add a label to the slider.<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;add(new
Label(&quot;Amount:&quot;));<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//
Create a vertical slider, initial value of 0,<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//
minimum value of 0, maximum value of 144.<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;OrderAmountSlider
= new<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Scrollbar(Scrollbar.HORIZONTAL,
0, 0, 0, 144);<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//
Insert the slider to the Applet panel.<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;add(OrderAmountSlider);
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//
Insert the label which says how many are set to be ordered<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//
of the item.<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;add(AmountLabel);
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//
Add the subtotal label and a label saying that it is the subtotal.
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;add(new
Label(&quot;Subtotal: &quot;));<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;add(SubTotalLabel);
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//
Add the total label and a label saying that it is the total.<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;add(new
Label(&quot;Total: &quot;));<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;add(TotalLabel);
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// Insert
a label to signify that this <BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//
is the personal information (address,etc.)<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// section
and also insert text fields to prompt for that information.<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; add(new
Label(&quot;Your information: &quot;));<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; add(new
Label(&quot;Name:&quot;));<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;add(NameEntryField);
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;add(new
Label(&quot;Street:&quot;));<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;add(StreetEntryField);
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;add(new
Label(&quot;City:&quot;));<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;add(CityEntryField);
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;add(new
Label(&quot;Zip:&quot;));<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;add(ZipEntryField);
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//
Add a label to the comment text area.<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;add(new
Label(&quot;Comments:&quot;));<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// Add the
comment box.<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;add(CommentTextArea);
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// Method which
resets all of the internal values.<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;resetValues();
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;// This method will be called when the
user presses the &quot;Clear&quot; button and<BR>
&nbsp;&nbsp;&nbsp;&nbsp;// also when the applet is initialized
in the init() method.<BR>
&nbsp;&nbsp;&nbsp;&nbsp;public void resetValues() {<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// Reset all of
these labels to zero.<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;SubTotalLabel.setText(&quot;$0.0
&quot;);<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TotalLabel.setText(&quot;$0.0
&quot;);<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;AmountLabel.setText(&quot;0
&quot;);<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;PricePerItemLabel.setText(&quot;$0.0
&quot;);<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// Clear all of
the lists and choices.<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ProductList.select(0);
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;SizeChoice.select(0);
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;OrderAmountSlider.setValue(0);
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// Clear all of
the text fields.<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;NameEntryField.setText(&quot;&quot;);
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;StreetEntryField.setText(&quot;&quot;);
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;CityEntryField.setText(&quot;&quot;);
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ZipEntryField.setText(&quot;&quot;);
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;}<BR>
&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;&nbsp;Method which will deal with
some of the events <BR>
&nbsp;&nbsp;&nbsp;&nbsp;//generated during execution<BR>
&nbsp;&nbsp;&nbsp;&nbsp;// of the applet.<BR>
&nbsp;&nbsp;&nbsp;&nbsp;public boolean handleEvent(Event InEvent)
{<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// Check to see
if the Slider was changed.&nbsp;&nbsp;If so,<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// update the
values in the applet.<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (InEvent.id
== Event.SCROLL_LINE_UP ||<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;InEvent.id
== Event.SCROLL_LINE_DOWN)&nbsp;&nbsp;{<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;updateValues();
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;} else<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// If the list
of products was changed then update the applet values.<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (InEvent.target
== ProductList) {<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;updateValues();
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;} else<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// If the clear
button was pressed, reset all of the applet values.<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (InEvent.target
== ClearButton) {<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;resetValues();
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;} else<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (InEvent.target
== QuitButton)&nbsp;&nbsp;{<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// Quit the applet.
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;} else<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (InEvent.target
== SubmitButton) {<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// Submit
the order.&nbsp;&nbsp;To be completed later.<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// Let the parent
handle the event. . .<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return super.handleEvent(InEvent);
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;}<BR>
&nbsp;&nbsp;&nbsp;&nbsp;// The rest of the Events will be handled
here. . .<BR>
&nbsp;&nbsp;&nbsp;&nbsp;public boolean action (Event InEvent,
Object SomeObject) {<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// If the event
was generated by the size choice field <BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// then update
all of the display.<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (InEvent.target
== SizeChoice) {<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;updateValues();
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// Yes, we handled
the event..<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return true;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// If the event
was generated by the NameEntryField. . .<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (InEvent.target
== NameEntryField) {<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;/*
Is the field empty?&nbsp;&nbsp;If so, we will later add a pop-up
dialog<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;box
to alert the user that they have not entered their name.<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*/
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return true;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;} else<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// Otherwise,
say that we didn't handle the event. .<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return false;
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;}<BR>
&nbsp;&nbsp;&nbsp;&nbsp;/* This void will change all of the values
to match any changes <BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; in the input settings. First,
it declares a number of <BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; variables local to the method.&nbsp;&nbsp;Then,
it sets a modifier<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; variable and a base price
variable depending on which items <BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; are selected in the choice
box, the list, and the slider.<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Then, it inserts those values
onto the applet panel.<BR>
&nbsp;&nbsp;&nbsp;&nbsp;*/<BR>
&nbsp;&nbsp;&nbsp;&nbsp;private void updateValues() {<BR>
&nbsp;&nbsp;&nbsp;&nbsp;// The index of the selected size.<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;int
WhichChoice = SizeChoice.getSelectedIndex();<BR>
&nbsp;&nbsp;&nbsp;&nbsp;// The amount of items desired.<BR>
&nbsp;&nbsp;&nbsp;&nbsp;int AmountSelected = OrderAmountSlider.getValue();
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;// The index of the selected product.
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;int WhichProduct = ProductList.getSelectedIndex();
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;/* The initial base price and modifier.&nbsp;&nbsp;Remember,
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; the modifier is the amount
the base price is <BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; multiplied by to get the
price per item.<BR>
&nbsp;&nbsp;&nbsp;&nbsp;*/<BR>
<BR>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;double CurrentBasePrice = 0.0;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;double CurrentModifier = 0.0;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;/* This switch statement compares the
index of the <BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; product list, held in WhichProduct,
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; and sets the inital BasePrice
accordingly.<BR>
&nbsp;&nbsp;&nbsp;&nbsp;*/<BR>
&nbsp;&nbsp;&nbsp;&nbsp;switch (WhichProduct) {<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;case
0:<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;CurrentBasePrice
= ProdOneBaseValue;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;break;
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;case 1:<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;CurrentBasePrice
= ProdTwoBaseValue;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;break;
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;case 2:<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;CurrentBasePrice
= ProdThreeBaseValue;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;break;
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;case 3:<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;CurrentBasePrice
= ProdFourBaseValue;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;break;
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;/* This switch statement compares the
WhichChoice <BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; variable (which is the selected
index in the <BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; sizeChoice choice box) to
the different indexes.<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; And then sets the modifier
accordingly. <BR>
&nbsp;&nbsp;&nbsp;&nbsp;*/<BR>
&nbsp;&nbsp;&nbsp;&nbsp;switch (WhichChoice) {<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;case
3:<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;CurrentModifier
= multiplierSmall;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;break;
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;case 2:<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;CurrentModifier
= multiplierMedium;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;break;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;case 1:<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;CurrentModifier
= multiplierLarge;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;break;
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
case 0:<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;CurrentModifier
= multiplierJumbo;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;break;
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// Insert the
number on the slider to the applet.<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;AmountLabel.setText(Integer.toString(AmountSelected)+
&quot; &quot;);<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// Compute the
priceperitem and insert it onto the applet panel.<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;double PricePerItem
= (CurrentBasePrice*CurrentModifier);<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;PricePerItemLabel.setText(Double.toString(PricePerItem)+
&quot; &quot;);<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// The subtotal
is the number ordered times the price per item.<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;double SubTotal
= (CurrentBasePrice*CurrentModifier*AmountSelected);<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// Insert the
subtotal onto the applet panel.<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;SubTotalLabel.setText(Double.toString(SubTotal)+
&quot; &quot;);<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;/* Since the total
is the same as the subtotal <BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (cause
we only have one item to be ordered<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; at
a time), we can simply use the value in the subtotal.<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*/<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TotalLabel.setText(SubTotalLabel.getText());
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<BR>
}</TT>
</BLOCKQUOTE>
<HR>
<H2><A NAME="TheOrderEntrySystemSoFar"><FONT SIZE=5 COLOR=#FF0000>The
Order Entry System So Far</FONT></A></H2>
<P>
Don't you find it interesting how fast these programs grow? If
this information seems unclear, use the comments to follow what's
going on. Here's the general flow of the applet. First, all the
internal variables are declared, and then the Java runtime calls
the <TT>init()</TT> method. The <TT>init()</TT>
method allocates many of the variables and defines the layout
of the applet panel. Then the user does something to create an
event. When an event does arise, the <TT>handleEvent</TT>
and <TT>action</TT> methods handle
the event. Different methods and actions are taken based on the
event that is generated and on which components are targeted.
For example, when the Clear button is pressed, the <TT>clearValues</TT>
method is called.
<P>
The Order Entry System takes some more great strides in this chapter.
Complete functionality has been added to almost all the components
in the applet. The slider now functions completely, and the value
it sets is now used to compute the correct subtotal and total
based on the choices the user makes. In these ways, the Order
Entry System is doing great. However, there are two major items
wrong with the Order Entry System.
<P>
First, you may look at the applet shown in Figure 7.3 and think
something along the lines of &quot;This looks terrible.&quot;
Well, you're right. All the pieces to the applet have been added,
but they still haven't been ordered correctly. You do this in
the next chapter when the concepts of containers and layout managers
are covered. The applet looks like a jumbled mess now, but it
improves in the next chapter, &quot;The Order Entry System: Managing
the Applet Layout.&quot;
<P>
Second, there is still some functionality missing. The applet
should exist as a stand-alone window. The process of implementing
this feature is included in the next chapter. There are also some
instances in which pop-up dialogs should be included in the applet.
For example, if a user does not enter his or her name, a window
should pop up and alert the user that he or she has not entered
information correctly. Stay tuned, more to come.
<H2><A NAME="DataValidation"><FONT SIZE=5 COLOR=#FF0000>Data Validation</FONT></A>
</H2>
<P>
Data validation, in terms of this book, is the process of checking
data to see if it is correct. As it relates to the Order Entry
System, it is checking text entered through text fields to see
if they are what you want. For example, if you have a field that
accepts a phone number, you should check to see that the text
entered contains 10 integers.
<P>
When you want to validate data entered in fields, follow these
steps:
<OL>
<LI>Write a <TT>boolean</TT> function
that returns a <TT>true</TT> or <TT>false</TT>
when supplied the text from the field. The function returns a
<TT>true</TT> when the string is acceptable;
<TT>false</TT> otherwise. To write
this function, parse the string. Java contains a number of useful
functions for parsing strings; they are covered in <A HREF="ch3.htm" >Chapter 3</A>,
&quot;An Introduction to Java Classes.&quot;
<LI>Next, add to your <TT>action</TT>
method an <TT>if</TT> statement that
calls the method written in step 1 if the <TT>Event.target</TT>
is the text field that you are trying to validate. If the result
of the function in step 1 is <TT>true</TT>,
keep on going. If it is <TT>false</TT>,
alert the user or do what you want to do.
</OL>
<P>
That's all you have to do. If you noticed, the framework for this
feature is set up in the Order Entry System. After some more topics
are covered in the next chapter, code is enabled such that when
the <TT>NameField</TT> generates an
event (that is, when the user presses Enter or Return while the
cursor is in the text field) and sends it to the <TT>action</TT>
method, it calls the <TT>CheckName</TT>
function, which returns a Boolean. Then, if the <TT>CheckName</TT>
function returns a <TT>false</TT>
value, an OK dialog box is set out to alert the user that the
name entry field is empty. If the function returns <TT>true</TT>,
then you go on your merry way. And that covers it all.
<P>

<CENTER><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=80%>
<TR VALIGN=TOP><TD><B>Dealing with Passwords</B></TD></TR>
<TR VALIGN=TOP><TD WIDTH=590>While the Order Entry System applet does not use password entry, it is worth covering. When you're prompting someone for a password, it is customary to echo a different character than what is typed. This character is usually an <TT>*</TT> or a blank space.
<P>
To have a text field echo another character, use the <TT>setEchoCharacter</TT> method of the <TT>TextField</TT> class. For example, to set the characters that are echoed to <TT>!</TT> when text is typed into a field, you can use the following code line:
<BLOCKQUOTE>
<TT>ATextField.setEchoChar('!');</TT>
</BLOCKQUOTE>
<P>
You can use a couple more methods in conjunction with the <TT>setEchoChar(char)</TT> method. The <TT>getEchoChar()</TT> function returns the echo character. Also, the <TT>echoCharIsSet()</TT> Boolean function returns whether an echo character is set. It returns an instance of the <TT>boolean</TT> variable.
</TD></TR>
</TABLE></CENTER>
<P>
<H2><A NAME="Summary"><FONT SIZE=5 COLOR=#FF0000>Summary</FONT></A>
</H2>
<P>
In this chapter, you learned about a number of important Java
AWT components. They included all those that deal with the plain
input and output of text. Then you learned how to use these components
by incorporating them into the Order Entry System. I discussed
the Order Entry System and looked ahead to improving it in the
chapters to come. I discussed the process of data validation in
AWT programs and how you could incorporate that into the Order
Entry System.
<P>
The next chapter covers some of the most important features of
the AWT. You will learn how to manage the layout of your AWT programs
so that they maintain platform independence while looking good.
You will then apply those techniques to the Order Entry System
as you take more steps to improve it.

<HR WIDTH="100%"></P>

</P></CENTER>

<P>
<HR WIDTH="100%"></P>





</td>

<!-- end main content column -->

</tr>

<!-- end main content column -->


</tr>
</table>

</BODY>
</HTML>
