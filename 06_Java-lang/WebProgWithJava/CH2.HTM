<HTML>
<BODY BGCOLOR="white" TEXT="black" LINK="blue" ALINK="red" VLINK="green">
<BASEFONT SIZE="5">
<font face="Arial,Helvetica" size="-1" color="#006666"><A HREF="/reference/r_library.html"><B>All Categories</A> :</B>
<b><A HREF="/reference/r_java.html">Java</A></b></font><p>


   <META>
<H1><FONT COLOR=#FF0000>Chapter 2</FONT></H1>
<H1><B><FONT SIZE=5 COLOR=#FF0000>Getting Started</FONT></B>
</H1>
<P>
<HR WIDTH="100%"></P>
<P>
<H3 ALIGN=CENTER><FONT COLOR="#000000"><FONT SIZE=+2>CONTENTS<A NAME="CONTENTS"></A>
</FONT></FONT></H3>
<UL>
<LI><A HREF="#ObtainingtheJavaSDK" >Obtaining the Java SDK</A>
<LI><A HREF="#TheJavaDevelopmentEnvironment" >The Java Development Environment</A>
<UL>
<LI><A HREF="#YourTextEditor" >Your Text Editor</A>
<LI><A HREF="#TheJavaCompiler" >The Java Compiler</A>
<LI><A HREF="#TheJavaInterpreter" >The Java Interpreter</A>
<LI><A HREF="#TheJavaDebugger" >The Java Debugger</A>
<LI><A HREF="#TheJavaAppletViewer" >The Java AppletViewer</A>
</UL>
<LI><A HREF="#CompilingwithJava" >Compiling with Java</A>
<UL>
<LI><A HREF="#javacjavacg" >javac/javac_g</A>
<LI><A HREF="#javajavag" >java/java_g</A>
<LI><A HREF="#jdb" >jdb</A>
<LI><A HREF="#AppletViewer" >AppletViewer</A>
</UL>
<LI><A HREF="#Summary" >Summary</A></CENTER>
</UL>
<HR>
<H2><A NAME="ObtainingtheJavaSDK"><FONT SIZE=5 COLOR=#FF0000>Obtaining
the Java SDK</FONT></A></H2>
<P>
This book helps you accomplish any and all of the goals outlined
in the last chapter with the help of the Java Developer's Kit
(JDK) and a Java-capable Web browser, which you will need to install
on your computer. The JDK includes all of the primary tools of
the Java development environment: the compiler, interpreter, debugger,
and AppletViewer. You'll need the browser to run applets from
pages on the Internet. Consequently, you must have a TCP/IP connection
to the Internet for your browser to take advantage of Java's networking
capabilities. You can install the JDK from the CD-ROM included
with this book. 
<P>
<BLOCKQUOTE>
<TT><B><A TARGET="resource window" HREF="http://java.sun.com">http://java.sun.com</A></B></TT>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;or
<BR>
<TT><B><A TARGET="resource window" HREF="http://www.javasoft.com">http://www.javasoft.com</A></B></TT>
</BLOCKQUOTE>
<P>
If you do not have a CD-ROM drive, you can download the JDK from
the Java Web site or the Java FTP site. To download from the Sun
Java home page, connect to the following URL:
<BLOCKQUOTE>
<TT><A TARGET="resource window" HREF="http://java.sun.com">http://java.sun.com</A>.</TT>
</BLOCKQUOTE>
<P>
The Java home page of Sun Microsystems lists several links. Two
of the links are Developer's Corner and Downloads. You should
be able to navigate through either of these links to get to the
JDK page. This page provides you with detailed instructions for
downloading and installing the JDK on your platform.
<P>
<BLOCKQUOTE>
<TT><A HREF="<B>ftp://java.sun.com/pub/"><B>ftp://java.sun.com/pub/</A></B></TT>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;or
<BR>
<TT><B><A HREF="ftp://www.blackdown.org/pub/Java/pub/">ftp://www.blackdown.org/pub/Java/pub/</A></B></TT>
</BLOCKQUOTE>
<P>
To download from the FTP site, FTP to the following:
<BLOCKQUOTE>
<TT><A HREF="ftp://java.sun.com/pub/">ftp://java.sun.com/pub/</A></TT>
</BLOCKQUOTE>
<P>
Download the JDK for your platform using binary transfer mode
and follow the detailed instructions for installing the JDK on
your platform.
<P>
You need to configure your particular system after downloading
the JDK. The most important step after downloading and extracting
the JDK is setting the class path. If you are a Windows 95 user,
you need to insert into the following line into your autoexec.bat
file:
<BLOCKQUOTE>
<TT>set classpath=.;c:\java;c:\java\lib\classes.zip</TT>
</BLOCKQUOTE>
<P>
This method is also assuming that the JDK is installed on your
C drive. On NT, you have to go into the Control Panel, then choose
System, and then in User Environment Variables, under the dialog
box, enter the name of the new variable in the Variable text area,
as follows:
<BLOCKQUOTE>
<TT>Path=c:\java</TT>
</BLOCKQUOTE>
<P>
If you have any trouble downloading from Sun, try one of the Java
mirror sites that are listed on the Java home page.
<P>
<BLOCKQUOTE>
<TT><B><A TARGET="resource window" HREF="http://www.gamelan.com">http://www.gamelan.com</A></B></TT>
<P>
<TT><B><A TARGET="resource window" HREF="http://www.javasoft.com">http://www.javasoft.com</A>
</BLOCKQUOTE>
<P>
<CENTER></B></TT><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=80%>
<TR VALIGN=TOP><TD><B>Note:</B></TD></TR>
<TR VALIGN=TOP><TD>Java's home page is one of your most valuable sources of information on Java. Because Java is still evolving as a network programming language, you should regularly check that home page for news on releases, bugs, fixes, and information on third-party Java product development. You might also find the Frequently Asked Questions (FAQs) sections useful. Here are a couple of other Web sites among a rapidly growing number of Java sites that are worth exploring:
<BLOCKQUOTE>
<TT><A TARGET="resource window" HREF="http://www.gamelan.com">http://www.gamelan.com</A><BR>
<A TARGET="resource window" HREF="http://www.javasoft.com">http://www.javasoft.com</A><BR>
<A TARGET="resource window" HREF="http://www.io.org/~mentor/jnIndex.html">http://www.io.org/~mentor/jnIndex.html</A><BR>
<A TARGET="resource window" HREF="http://www.marimba.com">http://www.marimba.com</A><BR>
<A TARGET="resource window" HREF="http://www.javaworld.com">http://www.javaworld.com</A></TT>
</BLOCKQUOTE>

</TD></TR>
</TABLE></CENTER>
<P>
<P>
Currently, three 32-bit Web browsers support Java applets: Netscape
Navigator 2.0 or greater, Microsoft Internet Explorer 3.0, and
Sun HotJava. At the time of this writing, Netscape Navigator 2.0
(or later) and Microsoft's Internet Explorer 3.0 are the only
Web browsers capable of working with applets created with the
latest JDK tools. Sun's Web browser, HotJava version 1.0 preBeta1,
is compatible with the FCS applet API. HotJava is worth downloading
because it is currently one of the largest applications written
in Java, and it includes source code. Be sure to check the Java
home page for updates on the release of HotJava and the JDK.
<P>
You can download HotJava from the Sun Java home page. FTP sites
are listed there for downloading the JDK.
<BLOCKQUOTE>
<TT><B><A TARGET="resource window" HREF="http://www.netscape.com">http://www.netscape.com</A></B></TT>
</BLOCKQUOTE>
Until the next release of HotJava, Netscape Navigator 2.0 or later
is necessary for your Java development efforts. You can download
Netscape Navigator from the Netscape home page at:
<BLOCKQUOTE>
<TT><A TARGET="resource window" HREF="http://www.netscape.com">http://www.netscape.com</A></TT>
</BLOCKQUOTE>
<P>
Be sure to follow Netscape's installation instructions for your
platform.
<P>
You might also want to use third-party development tools that
will ease your development efforts. In August 1996, four products
with visual development environments are available for Java: Microsoft's
Visual J++, SunSoft's Java Workshop, Borland Latte (these also
include tools for compiling and debugging Java applications),
and Symantec Caf&eacute;. In the near future, undoubtedly several
more development environments and tools will be available to you
to make Java programming easier.
<P>
You'll find information about the Java Workshop on Sun's Java
home page. You can explore the Borland and Symantec Java home
pages for information regarding their products:<BR>
<BLOCKQUOTE>
<TT><A TARGET="resource window" HREF="http://www.borland.com/Product/java">http://www.borland.com/Product/java</A><BR>
<A TARGET="resource window" HREF="http://cafe.symantec.com/">http://cafe.symantec.com/</A></TT>
</BLOCKQUOTE>
<P>
Be sure to keep an eye out for new tools that will help you program
with Java. Because Java is such a new technology, the race is
on for software companies to offer Java tools and integration.
<P>
<CENTER><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=80%>
<TR VALIGN=TOP><TD><B>Note:</B></TD></TR>
<TR VALIGN=TOP><TD>
<BLOCKQUOTE>
The only tools that you need to use this book are the JDK and Netscape Navigator 2.0 (32-bit) or later.</BLOCKQUOTE>

</TD></TR>
</TABLE></CENTER>
<P>
<H2><A NAME="TheJavaDevelopmentEnvironment"><FONT SIZE=5 COLOR=#FF0000>The
Java Development Environment</FONT></A></H2>
<P>
The Java Developer's Kit provides you with four basic tools that
help you write, compile, debug, test, and run Java code. These
tools are the Java compiler, the Java interpreter, the Java debugger,
and the Java AppletViewer. Java's other tools, such as the Java
API documentation generator (<TT>javadoc</TT>),
the Java disassembler (<TT>javap</TT>),
and the Java header and stub file creator (<TT>javah</TT>)
are included in the JDK, but they are not necessary for the purposes
of this book. The Java tools, combined with Java libraries of
utility classes and methods, form the complete Java system.
<P>
The following section describes the basic Java tools that you
will use and explains how they are useful.
<H3><A NAME="YourTextEditor">Your Text Editor</A></H3>
<P>
You can write your Java source code using any standard text editor,
such as Notepad, Write, or Edit for Windows NT/95 users and TextEdit
for Solaris users. A variety of text editors more suitable for
development can be found on the Internet. You might want to use
a text editor that comes with a development application, such
as Visual C++. Java source code is generally saved with the extension
<TT>.java</TT>.
<H3><A NAME="TheJavaCompiler">The Java Compiler</A></H3>
<P>
Your Java source code can be compiled using <TT>javac</TT><I>,
</I>the Java compiler. It compiles source code into bytecode for
the interpreter to execute. Compiled Java code is automatically
given the extension <TT>.class</TT>
by the compiler.
<P>
One important change that the Java team made from C was in compiling.
C is a compiled language. It outputs binary machine code, which
can be run only on the machine for which it is compiled. Compiled
C code executes quickly, but it is architecture-dependent. As
stated before, one of the important features of Java is that it
is architecture-neutral. Java accomplishes architecture independence
by splitting the compiling function across two tools: the Java
compiler and the Java interpreter. The Java compiler outputs <I>bytecode</I>,
similar to machine code but written for the <I>Java virtual machine</I>,
which doesn't exist. The interpreter verifies this bytecode, converts
it into machine code of the hardware platform it is installed
on, and executes it. Source code must only be written for one
machine: the virtual machine. The interpreter takes care of the
rest. Therefore, the Java language is both compiled and interpreted.
<H3><A NAME="TheJavaInterpreter">The Java Interpreter</A></H3>
<P>
Java's interpreter is called<I> </I><TT>java</TT>.
It converts the bytecode output from the <TT>javac</TT>
compiler to machine code and executes it.
<P>
Java is unlike purely interpreted languages, which generally interpret
source code before execution, sacrificing performance. Another
important feature of Java that Sun boasts is high performance.
Execution by Java's interpreter is near to the speed of binary
executables produced by compiled languages. The reason for this
is that Java code is compiled to an intermediate stage where the
file is still architecture-neutral, but close enough to machine
code that it can run efficiently. In addition, Java's multithreading
feature can improve performance by moving interpreter operation
to the background. Multithreading is discussed in <A HREF="ch15.htm" >Chapter 15</A>,
&quot;Interfacing with a Database: Catalog Applet.&quot;
<P>
In addition to architecture-independence, the other advantage
of using the Java interpreter is security. The interpreter can
evaluate classes to ensure that the bytecodes being interpreted
do not violate any language constraints or perform illegal activities
on the system or memory. This can prevent many viruses from spreading.
<P>
The interpreter runs outside the browsing environment. It provides
the programmer with the ability to run stand-alone applications
that have nothing to do with the Internet but that are portable
and platform-independent.
<H3><A NAME="TheJavaDebugger">The Java Debugger</A></H3>
<P>
You can debug your code using the Java debugger, called <TT>jdb</TT>.
It helps you find and fix bugs in Java code.
<P>
The Java debugger provides a command-line debugging environment
for Java programs. Debugging can be done on a local or remote
Java interpreter.
<H3><A NAME="TheJavaAppletViewer">The Java AppletViewer</A></H3>
<P>
You can test your applets using the Java applet viewer, called
AppletViewer. It provides a programmer with a way of testing applets
outside of a full-blown Web browser.
<P>
Although Netscape Navigator has Java functionality and can be
used to view applets, its security features prevent it from loading
applets from the local drive. It also doesn't have the networking
capabilities of the Java AppletViewer. Therefore, the AppletViewer
is the best tool for full applet capability.
<H2><A NAME="CompilingwithJava"><FONT SIZE=5 COLOR=#FF0000>Compiling
with Java</FONT></A></H2>
<P>
When using the JDK, the process of compiling is currently performed
in a command line (shell environment). This section describes
in detail how you use the Java tools; it steps you through creating
and compiling your first Java program.
<P>
The first step is to run the text editor of choice and create
the classic HelloWorld program. Type the following lines of source
code exactly as written here:
<BLOCKQUOTE>
<TT>// HelloWorld.java<BR>
class HelloWorld {<BR>
&nbsp;&nbsp;&nbsp;&nbsp; public static void main (String args[])
{<BR>
&nbsp;&nbsp;&nbsp;&nbsp; System.out.println(&quot;Hello World!&quot;);
<BR>
&nbsp;&nbsp;&nbsp;&nbsp; }<BR>
}</TT>
</BLOCKQUOTE>
<P>
Save the file as <TT>HelloWorld.java</TT>
in the classes directory. Don't be concerned at this point with
what this code means. The next chapter explains the fundamentals
of the Java language, and this program's syntax becomes clear
to you.
<H3><A NAME="javacjavacg"><TT><FONT SIZE=4>javac/javac_g</FONT></TT></A>
</H3>
<P>
After saving your source code with the extension <TT>.java</TT>,
you can compile it using the Java compiler, <TT>javac</TT>.
To run the <TT>javac</TT> compiler,
execute it with the following syntax. (Note that <TT>javac</TT>
expects an extension after the file name.)
<BLOCKQUOTE>
<TT>javac [ options ] filename.java<BR>
javac_g [ options ] filename.java</TT>
</BLOCKQUOTE>
<P>
For your example, run the following command:
<BLOCKQUOTE>
<TT>javac HelloWorld.java</TT>
</BLOCKQUOTE>
<P>
If the code compiles correctly, you will see two files in your
classes directory: <TT>HelloWorld.java</TT>
and <TT>HelloWorld.class</TT>. The
<TT>.class</TT> file has now been
converted to bytecode.
<P>
The following error message might result if you mistyped the <TT>javac</TT>
commands. Retype the command carefully if you receive this error:
<BLOCKQUOTE>
<TT>For Windows NT/95:&nbsp;&nbsp;bad command
or file name<BR>
For Solaris:&nbsp;&nbsp;/bin/sh: javac: not found</TT>
</BLOCKQUOTE>
<P>
The next error means that an expression is mistyped in your source
code. Check your source code for errors if you receive this message:
<BLOCKQUOTE>
<TT>Invalid expression statement</TT>
</BLOCKQUOTE>
<P>
The following error means that either the <TT>javac</TT>
command or your Java file cannot be found. If you receive this
error, make sure that your path includes the directory containing
the Java tools so you are able to run the tools from any directory
without an explicit mapping to them. Also, make sure you are running
the command from the same directory as your <TT>HelloWorld.java</TT>
file.
<P>
Error message for Windows NT/95:
<BLOCKQUOTE>
<TT>Bad command or file name</TT>
</BLOCKQUOTE>
<P>
Error message for Solaris:
<BLOCKQUOTE>
 <TT>/bin/sh: javac: not found</TT>
</BLOCKQUOTE>
<P>
When you run the compiler, you can feed it certain options that
change its behavior. Table 2.1 provides a list of all of the command-line
options that you can feed <TT>javac</TT>
and a description of each option.<BR>
<P>
<CENTER><B>Table 2.1. Command-line options for javac.</B></CENTER>
<CENTER><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=80%>
<TR VALIGN=TOP><TD><I>Option</I></TD><TD WIDTH=457><I>Function</I>
</TD></TR>
<TR VALIGN=TOP><TD WIDTH=133><TT>-classpath</TT> <TT>path</TT>
</TD><TD WIDTH=457>Sets path where <TT>javac</TT> looks for classes it needs. Directory list is colon-delimited.
</TD></TR>
<TR VALIGN=TOP><TD WIDTH=133><TT>-d</TT> <TT>directory</TT>
</TD><TD WIDTH=457>Specifies the root directory for creating a directory tree for a hierarchy of packages.
</TD></TR>
<TR VALIGN=TOP><TD WIDTH=133><TT>-g</TT></TD>
<TD WIDTH=457>Turns on debugging tables in code generation for later debugging of bytecodes.
</TD></TR>
<TR VALIGN=TOP><TD WIDTH=133><TT>-nowarn</TT>
</TD><TD WIDTH=457>Suppresses warnings that the compiler produces.
</TD></TR>
<TR VALIGN=TOP><TD WIDTH=133><TT>-O</TT></TD>
<TD WIDTH=457>Optimizes code produced by inlining static, final, and private methods.
</TD></TR>
<TR VALIGN=TOP><TD WIDTH=133><TT>-verbose</TT>
</TD><TD WIDTH=457>Prints messages about the source file and classes.
</TD></TR>
</TABLE></CENTER>
<P>
<TT>javac_g</TT> is a non-optimized
version of <TT>javac</TT> that is
suitable for use with debuggers such as <TT>jdb</TT>.
<H3><A NAME="javajavag"><TT><FONT SIZE=4>java</FONT></TT><FONT SIZE=4>/</FONT><TT><FONT SIZE=4>java_g</FONT></TT></A>
</H3>
<P>
You can use the Java interpreter to verify and execute your code.
To run the Java interpreter, enter the executable name, options,
class name (without the file name extension, unlike <TT>javac</TT>),
and arguments as outlined here:
<BLOCKQUOTE>
<TT>java [ <I>options</I> ] <I>classname</I>
<I>args<BR>
</I>java_g [ <I>options</I> ] <I>classname</I> <I>args</I></TT>
</BLOCKQUOTE>
<P>
For our example, run the following command:
<BLOCKQUOTE>
<TT>java HelloWorld</TT>
</BLOCKQUOTE>
<P>
This should produce the following output:
<BLOCKQUOTE>
<TT>Hello World!</TT>
</BLOCKQUOTE>
<P>
Ordinarily, you compile source code with <TT>javac</TT>
and then execute it using Java. However, Java can be used to compile
and run bytecode when the <TT>-cs</TT>
option is used. As each class is loaded, its modification date
is compared to the modification date of the class source file.
If the source has been modified more recently, it is recompiled
and the new bytecode file is loaded. Java repeats this procedure
until all the classes are correctly compiled and loaded.
<P>
<TT>java_g</TT> is a non-optimized
version of Java that is suitable for use with debuggers such as
<TT>jdb</TT>.
<P>
There are several options that you can feed the interpreter that
change its behavior. Table 2.2 lists all of the command-line options
for the Java interpreter.<BR>
<P>
<CENTER><B>Table 2.2. Command-line options for Java.</B></CENTER>
<CENTER><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=80%>
<TR VALIGN=TOP><TD><I>Command</I></TD><TD WIDTH=404><I>Function</I>
</TD></TR>
<TR VALIGN=TOP><TD WIDTH=186><TT>-cs</TT>, <TT>-checksource</TT>
</TD><TD WIDTH=404>Recompiles any class whose .java source file is later than its .class file.
</TD></TR>
<TR VALIGN=TOP><TD WIDTH=186><TT>-classpath</TT> <TT>path</TT>
</TD><TD WIDTH=404>Overrides the <TT>CLASSPATH</TT> environment variable.
</TD></TR>
<TR VALIGN=TOP><TD WIDTH=186><TT>-mx x</TT></TD>
<TD WIDTH=404>Sets maximum size of memory allocation pool to <TT>x</TT>. Pool must be larger than 1,000 bytes and a <TT>k</TT> or <TT>m</TT> must be appended to the number to indicate size. The default is 16MB.
</TD></TR>
<TR VALIGN=TOP><TD WIDTH=186><TT>-ms x</TT></TD>
<TD WIDTH=404>Sets the size of the memory allocation pool to <TT>x</TT>. Pool must be larger than 1,000 bytes and a <TT>k</TT> or <TT>m</TT> must be appended to the number to indicate size. The default is 1MB.
</TD></TR>
<TR VALIGN=TOP><TD WIDTH=186><TT>-noasyncgc</TT>
</TD><TD WIDTH=404>Turns off asynchronous garbage collection. The only time garbage collection occurs is when the program calls for it or runs out of memory.
</TD></TR>
<TR VALIGN=TOP><TD WIDTH=186><TT>-ss x</TT></TD>
<TD WIDTH=404>Sets the maximum stack size for C threads to <TT>x</TT>. Must be greater than 1,000 bytes and a <TT>k</TT> or <TT>m</TT> must be appended to the number to indicate size.
</TD></TR>
<TR VALIGN=TOP><TD WIDTH=186><TT>-oss x</TT>
</TD><TD WIDTH=404>Sets the maximum stack size for Java threads to <TT>x</TT>.
</TD></TR>
<TR VALIGN=TOP><TD WIDTH=186><TT>-v</TT>, <TT>-verbose</TT>
</TD><TD WIDTH=404>Prints a message to stdout when a class is loaded.
</TD></TR>
<TR VALIGN=TOP><TD WIDTH=186><TT>-verify</TT>
</TD><TD WIDTH=404>Uses verifier on all code.</TD></TR>
<TR VALIGN=TOP><TD WIDTH=186><TT>-verifyremote</TT>
</TD><TD WIDTH=404>Uses verifier only on classes loaded with classloader.
</TD></TR>
<TR VALIGN=TOP><TD WIDTH=186><TT>-noverify</TT>
</TD><TD WIDTH=404>Disables verifier.</TD></TR>
<TR VALIGN=TOP><TD WIDTH=186><TT>-verbosegc</TT>
</TD><TD WIDTH=404>Prints a message when garbage collector frees memory.
</TD></TR>
<TR VALIGN=TOP><TD WIDTH=186><TT>-t</TT></TD>
<TD WIDTH=404>Prints trace of an instruction being executed. Only available with <TT>javag</TT>.
</TD></TR>
<TR VALIGN=TOP><TD WIDTH=186><TT>-debug</TT>
</TD><TD WIDTH=404>Allows <TT>jdb</TT> connection to current session of Java interpreter. Displays password when debugging session is started.
</TD></TR>
<TR VALIGN=TOP><TD WIDTH=186><TT>-DpropName=newVal</TT>
</TD><TD WIDTH=404>Enables user to change values at runtime. Requires the full packaging extension to the class variable.
</TD></TR>
</TABLE></CENTER>
<P>
<H3><A NAME="jdb"><TT><FONT SIZE=4>jdb</FONT></TT></A>
</H3>
<P>
If the compiler returns errors related to your code, you can use
the Java debugger to debug your code. The most common way to start
<TT>jdb</TT> on local classes is using
the following syntax:
<BLOCKQUOTE>
<TT>jdb <I>classname</I> [<I>parameters</I>]</TT>
</BLOCKQUOTE>
<P>
To run the debugger, you are substituting the command for Java
with <TT>jdb</TT>. This starts the
Java interpreter with the class to be debugged and any specified
parameters, and stops before executing the class's first process.
<P>
If you need to run <TT>jdb</TT> with
Java interpreter already running, you can connect to the interpreter
using the <TT>-host</TT> and <TT>-password</TT>
options. In order to be able to retrieve the password from the
Java interpreter session, it must have been invoked using the
<TT>-debug</TT> option. When you start
Java using the <TT>-debug</TT> option,
it provides a password with which the <TT>jdb</TT>
can be started.
<P>
You can feed the Java debugger several command-line parameters
that change its behavior. These parameters can be listed using
<TT>jdb</TT>'s help parameter. Table
2.3 lists all of these commands.<BR>
<P>
<CENTER><B>Table 2.3. Command-line parameters for the jdb.</B></CENTER>
<CENTER><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=80%>
<TR VALIGN=TOP><TD><I>Option</I></TD><TD WIDTH=323><I>Function</I>
</TD></TR>
<TR VALIGN=TOP><TD WIDTH=229><TT>catch classID</TT>
</TD><TD WIDTH=323>Breaks for the specified exception.</TD></TR>
<TR VALIGN=TOP><TD WIDTH=229><TT>Classes</TT>
</TD><TD WIDTH=323>Lists currently known classes.</TD></TR>
<TR VALIGN=TOP><TD WIDTH=229><TT>clear classID:line</TT>
</TD><TD WIDTH=323>Clears a breakpoint.</TD></TR>
<TR VALIGN=TOP><TD WIDTH=229><TT>Cont</TT></TD>
<TD WIDTH=323>Continues execution from breakpoint.</TD></TR>
<TR VALIGN=TOP><TD WIDTH=229><TT>down [n frames]</TT>
</TD><TD WIDTH=323>Moves down a thread's stack.</TD></TR>
<TR VALIGN=TOP><TD WIDTH=229><TT>dump ID [ID..]</TT>
</TD><TD WIDTH=323>Prints all object information.</TD></TR>
<TR VALIGN=TOP><TD WIDTH=229><TT>exit</TT> (or <TT>quit</TT>)
</TD><TD WIDTH=323>Exits debugger.</TD></TR>
<TR VALIGN=TOP><TD WIDTH=229><TT>help</TT> (or <TT>?</TT>)
</TD><TD WIDTH=323>Lists commands.</TD></TR>
<TR VALIGN=TOP><TD WIDTH=229><TT>ignore classID</TT>
</TD><TD WIDTH=323>Ignores the specified exception.</TD></TR>
<TR VALIGN=TOP><TD WIDTH=229><TT>list</TT> [<TT>line number</TT>]
</TD><TD WIDTH=323>Prints source code.</TD></TR>
<TR VALIGN=TOP><TD WIDTH=229><TT>load classname</TT>
</TD><TD WIDTH=323>Loads class.</TD></TR>
<TR VALIGN=TOP><TD WIDTH=229><TT>locals</TT>
</TD><TD WIDTH=323>Prints all local variables in current stack frame.
</TD></TR>
<TR VALIGN=TOP><TD WIDTH=229><TT>memory</TT>
</TD><TD WIDTH=323>Reports memory usage.</TD></TR>
<TR VALIGN=TOP><TD WIDTH=229><TT>methods</TT>
</TD><TD WIDTH=323>Lists methods in a class.</TD></TR>
<TR VALIGN=TOP><TD WIDTH=229><TT>print ID [ID..]</TT>
</TD><TD WIDTH=323>Prints an object or field.</TD></TR>
<TR VALIGN=TOP><TD WIDTH=229><TT>resume [threadID..]</TT>
</TD><TD WIDTH=323>Resumes threads. Default is all.</TD></TR>
<TR VALIGN=TOP><TD WIDTH=229><TT>run class [args]</TT>
</TD><TD WIDTH=323>Starts execution of a loaded class.</TD></TR>
<TR VALIGN=TOP><TD WIDTH=229><TT>step</TT></TD>
<TD WIDTH=323>Executes current line.</TD></TR>
<TR VALIGN=TOP><TD WIDTH=229><TT>stop in</TT> <TT>classID.method</TT>
</TD><TD WIDTH=323>Sets a breakpoint in a method.</TD></TR>
<TR VALIGN=TOP><TD WIDTH=229><TT>stop at classID:line</TT>
</TD><TD WIDTH=323>Sets a breakpoint at a line.</TD></TR>
<TR VALIGN=TOP><TD WIDTH=229><TT>suspend [threadID..]</TT>
</TD><TD WIDTH=323>Suspends threads. Default is all.</TD></TR>
<TR VALIGN=TOP><TD WIDTH=229><TT>threads threadgroup</TT>
</TD><TD WIDTH=323>Lists threads.</TD></TR>
<TR VALIGN=TOP><TD WIDTH=229><TT>thread threadID</TT>
</TD><TD WIDTH=323>Sets default thread.</TD></TR>
<TR VALIGN=TOP><TD WIDTH=229><TT>threadgroups</TT>
</TD><TD WIDTH=323>Lists threadgroups.</TD></TR>
<TR VALIGN=TOP><TD WIDTH=229><TT>threadgroup name</TT>
</TD><TD WIDTH=323>Sets current threadgroup.</TD></TR>
<TR VALIGN=TOP><TD WIDTH=229><TT>up [n frames]</TT>
</TD><TD WIDTH=323>Moves up a thread's stack.</TD></TR>
<TR VALIGN=TOP><TD WIDTH=229><TT>use </TT>[<TT>path</TT>]
</TD><TD WIDTH=323>Displays or changes source path.</TD></TR>
<TR VALIGN=TOP><TD WIDTH=229><TT>where [threadID]</TT> or <TT>all</TT>
</TD><TD WIDTH=323>Dumps a thread's stack.</TD></TR>
<TR VALIGN=TOP><TD WIDTH=229><TT>!!</TT></TD>
<TD WIDTH=323>Repeats last command.</TD></TR>
</TABLE></CENTER>
<P>
<P>
Table 2.4 lists the command-line options for <TT>jdb</TT>
that are used when accessing a running interpreter.
<P>
<CENTER><B>Table 2.4. Command-line options for the </B><TT><B>jdb</B></TT><B>.</B></CENTER>
<CENTER><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=80%>
<TR VALIGN=TOP><TD><I>Command</I></TD><TD WIDTH=375><I>Function</I>
</TD></TR>
<TR VALIGN=TOP><TD WIDTH=215><TT>-host</TT> &lt;<TT>hostname</TT>&gt;
</TD><TD WIDTH=375>Sets the name of the host machine on which the interpreter session to attach to is running.
</TD></TR>
<TR VALIGN=TOP><TD WIDTH=215><TT>-password &lt;password&gt;</TT>
</TD><TD WIDTH=375>Logs in to the active interpreter session. This is the password printed by the Java interpreter. The password prints when invoked by the <TT>-debug</TT> option.
</TD></TR>
</TABLE></CENTER>
<P>
<H3><A NAME="AppletViewer">AppletViewer</A></H3>
<P>
You can use the AppletViewer to test applets in a runtime environment.
The AppletViewer takes HTML files that refer to the applet and
displays them. The only option for AppletViewer is <TT>-debug</TT>.
This starts the AppletViewer in the <TT>jdb</TT>.
<P>
To invoke the AppletViewer, change to the directory of the HTML
file in which the applet is embedded and type the following command:
<BLOCKQUOTE>
<TT>appletviewer <I>filename</I>.html</TT>
</BLOCKQUOTE>
<P>
The AppletViewer program has a few menu options that you can use
while it is running. Its menu also allows you to set network and
security properties for <TT>appletviewer</TT>.
Table 2.5 lists the AppletViewer menu options and their descriptions.
<BR>
<P>
<CENTER><B>Table 2.5. Applet menu options.</B></CENTER>
<CENTER><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=80%>
<TR VALIGN=TOP><TD><I><FONT SIZE=2>Option</FONT></I></TD><TD WIDTH=463><I><FONT SIZE=2>Function</FONT></I>
</TD></TR>
<TR VALIGN=TOP><TD WIDTH=127><TT>Restart</TT>
</TD><TD WIDTH=463><FONT SIZE=2>Runs the loaded applet again.</FONT>
</TD></TR>
<TR VALIGN=TOP><TD WIDTH=127><TT>Reload</TT>
</TD><TD WIDTH=463><FONT SIZE=2>Reloads the applet from disk. Useful if the class has changed since it was loaded.</FONT>
</TD></TR>
<TR VALIGN=TOP><TD WIDTH=127><TT>Clone</TT></TD>
<TD WIDTH=463><FONT SIZE=2>Creates a new window based upon command-line arguments for the first.</FONT>
</TD></TR>
<TR VALIGN=TOP><TD WIDTH=127><TT>Tag</TT></TD>
<TD WIDTH=463><FONT SIZE=2>Shows the applet tag used in the HTML document to start the applet.</FONT>
</TD></TR>
<TR VALIGN=TOP><TD WIDTH=127><TT>Info</TT></TD>
<TD WIDTH=463><FONT SIZE=2>Provides any information about the applet that is available.</FONT>
</TD></TR>
<TR VALIGN=TOP><TD WIDTH=127><TT>Properties</TT>
</TD><TD WIDTH=463><FONT SIZE=2>Allows the different configurations to be set for AppletViewer.</FONT>
</TD></TR>
</TABLE></CENTER>
<P>
<P>
AppletViewer's properties are outlined in Table 2.6. They provide
the network and security options of AppletViewer. <BR>
<P>
<CENTER><B>Table 2.6. AppletViewer properties.</B></CENTER>
<CENTER><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=80%>
<TR VALIGN=TOP><TD><I>Option</I></TD><TD WIDTH=432><I>Property</I>
</TD></TR>
<TR VALIGN=TOP><TD WIDTH=158>Http proxy server</TD><TD WIDTH=432>required
</TD></TR>
<TR VALIGN=TOP><TD WIDTH=158>Http proxy port</TD><TD WIDTH=432>required</TD>
</TR>
<TR VALIGN=TOP><TD WIDTH=158>Firewall proxy server</TD><TD WIDTH=432>required
</TD></TR>
<TR VALIGN=TOP><TD WIDTH=158>Firewall proxy port</TD><TD WIDTH=432>required
</TD></TR>
<TR VALIGN=TOP><TD WIDTH=158>Network access</TD><TD WIDTH=432>Several levels-no access, only access to applet's host, unrestricted access
</TD></TR>
<TR VALIGN=TOP><TD WIDTH=158>Class access</TD><TD WIDTH=432>restricted or unrestricted
</TD></TR>
</TABLE></CENTER>
<P>
<H2><A NAME="Summary"><FONT SIZE=5 COLOR=#FF0000>Summary</FONT></A>
</H2>
<P>
These tools, in combination with the Java class libraries that
you will learn about in <A HREF="ch3.htm" >Chapter 3</A>, &quot;An
Introduction to Java Classes,&quot; are everything you'll need
to program with Java. Graphical development environments incorporate
all of the tools I have discussed in this chapter, but make using
them even easier.

<HR WIDTH="100%"></P>

</P></CENTER>

<P>
<HR WIDTH="100%"></P>





</td>

<!-- end main content column -->

</tr>

<!-- end main content column -->


</tr>
</table>

</BODY>
</HTML>
