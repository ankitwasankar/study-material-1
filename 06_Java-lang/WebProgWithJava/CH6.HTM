<HTML>
<BODY BGCOLOR="white" TEXT="black" LINK="blue" ALINK="red" VLINK="green">
<BASEFONT SIZE="5">
<font face="Arial,Helvetica" size="-1" color="#006666"><A HREF="/reference/r_library.html"><B>All Categories</A> :</B>
<b><A HREF="/reference/r_java.html">Java</A></b></font><p>

   <META>
<H1><FONT COLOR=#FF0000>Chapter 6</FONT></H1>
<H1><B><FONT SIZE=5 COLOR=#FF0000>The Order Entry System: Adding
Features and Handling Events</FONT></B>
</H1>
<P>
<HR WIDTH="100%"></P>
<P>
<H3 ALIGN=CENTER><FONT COLOR="#000000"><FONT SIZE=+2>CONTENTS<A NAME="CONTENTS"></A>
</FONT></FONT></H3>

<UL>
<LI><A HREF="#GraphicalComponents" >Graphical Components</A>
<LI><A HREF="#Buttons" >Buttons</A>
<LI><A HREF="#Checkboxes" >Checkboxes</A>
<LI><A HREF="#CoordinatedCheckboxesRadioButtons" >Coordinated Checkboxes: Radio Buttons</A>
<LI><A HREF="#PopUpChoiceLists" >Pop-Up Choice Lists</A>
<LI><A HREF="#ScrollingChoiceLists" >Scrolling Choice Lists</A>
<LI><A HREF="#Scrollbars" >Scrollbars</A>
<LI><A HREF="#GettingStartedontheOrderEntrySyste" >Getting Started on the Order Entry System</A>
<UL>
<LI><A HREF="#WhatsWrongwiththeOrderEntrySystem" >What's Wrong with the Order Entry System?</A>
</UL>

<LI><A HREF="#DealingwithEvents" >Dealing with Events</A>
<UL>
<LI><A HREF="#ThehandleEventMethod" >The handleEvent() Method</A>
</UL>
<LI><A HREF="#DealingwiththeactionMethod" >Dealing with the action() Method</A>
<UL>
<LI><A HREF="#WhatsGoingOnintheEventExampleAppl" >What's Going On in the EventExample Applet</A>
<LI><A HREF="#TheStepsinCreatingEventBasedAWTPr" >The Steps in Creating Event-Based AWT Programs</A>
</UL>
<LI><A HREF="#HandlingEventsintheOrderEntrySyste" >Handling Events in the Order Entry System</A>
<LI><A HREF="#TheOrderEntrySystemSoFar" >The Order Entry System So Far</A>
</UL>
<HR>
<P>
This chapter looks into the use and description of the <TT>java.AWT</TT>
concepts of containers and components. Part of this chapter covers
the implementation of some of the components. The graphical components
of the AWT are covered in this chapter, while others are left
for later chapters. Here is a list of the components that are
covered in this chapter:
<P>
<BLOCKQUOTE>
Buttons<BR>
Checkboxes<BR>
Radio buttons<BR>
Choice menus<BR>
Lists<BR>
Scrolling lists<BR>
Sliders and scrollbars<P>
</BLOCKQUOTE>
<BR>
<CENTER></FONT><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=80%>
<TR VALIGN=TOP><TD><B>Note:</B></TD></TR>
<TR VALIGN=TOP><TD>
<BLOCKQUOTE>
Notice that the component <TT>Canvas</TT> is left out of this chapter. It is a graphic component, but for organizational purposes it is included in <A HREF="ch9.htm" >Chapter 9</A>, &quot;The Order Entry System: Adding Graphics and a Logo.&quot;
</BLOCKQUOTE>

</TD></TR>
</TABLE></CENTER>
<P>
<P>
This chapter also covers the implementation of handling user inputs,
or <I>events</I>. This concept is touched on in the preceding
chapter, but to sum it up, events are basically what their name
says, &quot;something happening.&quot; Some events are mouse clicks,
keyboard presses, and events created by your own program to &quot;fake&quot;
an event. All these events are covered in the &quot;Handling Events&quot;
section of this chapter.
<P>
Finally, this chapter applies the concepts of components, applets,
the AWT, and events to the Order Entry System. In building the
Order Entry System applet, this chapter exercises these features
in the process of coding a larger program. This is the area in
which many instructional books are lacking.
<P>
But first, I'll get into some components.
<H2><A NAME="GraphicalComponents"><FONT SIZE=5 COLOR=#FF0000>Graphical
Components</FONT></A></H2>
<P>
If you remember from the preceding chapter, the component class
is the keystone to the AWT. The vast majority of the available
classes in the AWT derive from this class. This includes the container
class, which is one of the subclasses of the component class.
This is the main reason that you can place components in containers,
and so on. This feature is useful when you manage the layout of
the Order Entry System in <A HREF="ch8.htm" >Chapter 8</A>, &quot;The
Order Entry System: Managing the Applet Layout,&quot; but for
now, just appreciate the power of components and the AWT as a
whole.
<P>
Components come in many shapes and sizes. As I stated before,
this chapter covers the components that are graphics-oriented.
Of course, all the components are graphical in nature. They are
drawn just as any other GUI item is, but the components covered
in this chapter are those that are not text-oriented, meaning
not designed for the output or input of text. Placing all the
components in one large section may seem to be the most logical,
but dividing them into two groups keeps you from being bombarded
by 12 explanations at once and also facilitates reference use
of the book. Text-oriented components are covered in <A HREF="ch7.htm" >Chapter 7</A>,
&quot;The Order Entry System: Entry Fields, Labels, and Validation.&quot;
<P>
The simplest components are buttons, which are covered next.
<H3><A NAME="Buttons">Buttons</A></H3>
<P>
In the AWT, buttons are like the buttons found on virtually every
GUI system. Listing 6.1 is an applet that demonstrates the insertion
of buttons in an applet.
<HR>
<BLOCKQUOTE>
<B>Listing 6.1. The </B><TT><B>heyabutton</B></TT><B>
applet code.<BR>
</B>
</BLOCKQUOTE>
<BLOCKQUOTE>
<TT>1.// Import all of the java.awt package
and the applet package.<BR>
2. import java.awt.*;<BR>
3. import java.applet.*;<BR>
4. // Declare the heyabutton class.<BR>
5. public class heyabutton extends Applet<BR>
6.&nbsp;&nbsp;&nbsp;&nbsp; {<BR>
7.<BR>
8.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // Create a variable aButton
of the Button class.<BR>
9.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;private Button aButton;
<BR>
10.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//
Overriding the default init() method.<BR>
11.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;public void
init()<BR>
12.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{
<BR>
13.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//
Allocate space for the Button.<BR>
14.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;aButton
= new Button(&quot;Longhorn&quot;);<BR>
15.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//
Add the button to the Applet panel.<BR>
16.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;add(aButton);
<BR>
17.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
}<BR>
18.&nbsp;&nbsp;&nbsp;&nbsp;}</TT>
</BLOCKQUOTE>
<HR>
<P>
The <TT>heyabutton</TT> class, when
viewed from the AppletViewer utility, is shown in Figure 6.1.
<P>
<A HREF="f6-1.gif" ><B>Figure 6.1 : </B><I>The heyabutton applet when viewed from the AppletViewer utility.</I></A>
<P>
Line 1 makes all the classes from the <TT>java.awt</TT>
package available to you. Line 2 does the same with the applet
package. Line 3 says that this program extends the applet class
in the library. In other words, it is a subclass of the applet
class and shares all functionality of it. You are, of course,
overriding some of the inherited methods with your own declarations.
In this applet, the code in line 6 is doing just that. This line
declares a void that overrides the standard <TT>init()</TT>
method with your own code.
<P>
But before that, line 5 declares a <TT>private</TT>
<TT>button</TT>, which means that,
for the purposes of object-oriented design and data encapsulation,
the variable is local to this class and not accessible from outside.
The <TT>button</TT> type is contained
in the file <TT>java.awt.Button</TT></TT>.
<P>
Line 8 uses the <TT>new</TT> method,
&quot;make <TT>aButton</TT> a new
instance of the <TT>Button</TT> class.&quot;
Now, <TT>aButton</TT> is your very
own instance of the <TT>java.awt.Button</TT>
class from the library.
<P>
So what do you do with it? You have a button; now add the component
to the applet using Java's <TT>add()</TT>
method. The method <TT>add()</TT>
is common to all containers that place a component in the container.
(Exactly where it goes is covered with the applet layout in <A HREF="ch8.htm" >Chapter 8</A>.)
For now, it's enough to know that it puts its parameter in the
container from which it is called. Here's an example:
<BLOCKQUOTE>
<TT>add(aPanel);</TT>
</BLOCKQUOTE>
<P>
This line adds the <TT>aPanel</TT>
component to the current container. The following code adds the
<TT>aButton</TT> component to the
container <TT>somecontainer</TT>:
<BLOCKQUOTE>
<TT>somecontainer.add(aButton);</TT>
</BLOCKQUOTE>
<P>
That is the end of the functional part of the applet and the coverage
of buttons and how to add components.
<P>
<CENTER><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=80%>
<TR VALIGN=TOP><TD><B>Tip:</B></TD></TR>
<TR VALIGN=TOP><TD>
<BLOCKQUOTE>
After you have a good bit of Java knowledge, it's a good idea to go into the libraries and check out the contents. If you have experience with object-oriented design programs, such as C++, the library structure should be familiar. If not, Java is a good language to start with when you are trying to get into object-oriented design.</BLOCKQUOTE>

</TD></TR>
</TABLE></CENTER>
<P>
<P>
The process of looking at the methods, looking at the data structures,
and going through the implementation does a great deal for your
debugging and code design efforts.
<H3><A NAME="Checkboxes">Checkboxes</A></H3>
<P>
A <I>checkbox</I> is like its name sounds: it's a box you put
a check in. Checkboxes are either on or off, selected or unselected.
The mouse click (or a tab down) on the checkbox toggles its value,
making a checked box unselected and vice versa. You use checkboxes
when you are creating an interface that needs to get data that
is either yes or no. For example, &quot;Would you like to be included
on our mailing list?&quot;
<P>
Checkboxes are created using the class <TT>java.awt.Checkbox</TT>
of the AWT.
<P>
<CENTER><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=80%>
<TR VALIGN=TOP><TD><B>Note:</B></TD></TR>
<TR VALIGN=TOP><TD>
<BLOCKQUOTE>
The line numbers in the following example are for ease of reference only.</BLOCKQUOTE>

</TD></TR>
</TABLE></CENTER>
<P>
<P>
Here is the standard constructor for creating a checkbox:
<BLOCKQUOTE>
<TT>1. private Checkbox aCheckbox;<BR>
2. aCheckbox = new Checkbox();</TT>
</BLOCKQUOTE>
<P>
Of course, you can combine these two statements:
<BLOCKQUOTE>
<TT>1. Checkbox aCheckbox = new Checkbox();</TT>
</BLOCKQUOTE>
<P>
Checkboxes, like most classes implemented in Java, are overloaded
to be able to accept different combinations of input. This is
a feature shared with C++ and some other languages designed to
facilitate object-oriented programming.
<P>
To create a checkbox and set the label, use the following format:
<BLOCKQUOTE>
<TT>Checkbox aCheckboxpluslabel = new Checkbox(&quot;Label
here!&quot;);</TT>
</BLOCKQUOTE>
<P>
To set the checkbox's initial value, you can include another parameter:
<BLOCKQUOTE>
<TT>Checkbox anotherCheckbox = new Checkbox(&quot;Label
here!&quot;, null, true);</TT>
</BLOCKQUOTE>
<P>
In this constructor, the first parameter is the label, and the
third parameter is the initial starting value. The second parameter
places the checkbox into a <TT>CheckboxGroup</TT>.
This is used to create radio buttons, which are a group of checkboxes
in which only one of them can be selected at the same time. Listing
6.2 is an applet that creates and inserts four checkboxes into
an applet.
<HR>
<BLOCKQUOTE>
<B>Listing 6.2. The </B><TT><B>heysomecheckboxes</B></TT><B>
applet code.<BR>
</B>
</BLOCKQUOTE>
<BLOCKQUOTE>
<TT>1. import java.awt.*;<BR>
2. import java.applet.*;<BR>
3. public class heysomecheckboxes extends Applet<BR>
4.&nbsp;&nbsp;&nbsp;&nbsp; {<BR>
5.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// Override
the initialize method.<BR>
6.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;public void
init()<BR>
7.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{
<BR>
8.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
// Declare the four checkboxes and set their labels.<BR>
9.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Checkbox
JonBox = new Checkbox(&quot;Jon&quot;);<BR>
10.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
Checkbox IanBox = new Checkbox(&quot;Ian&quot;);<BR>
11.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
Checkbox NateBox = new Checkbox(&quot;Nate&quot;);<BR>
12.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
Checkbox MichaelBox = new Checkbox(&quot;Michael&quot;);<BR>
13.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
// Add the four checkboxes to the applet panel.<BR>
14.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
add(JonBox);<BR>
15.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
add(IanBox);<BR>
16.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
add(NateBox);<BR>
17.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
add(MichaelBox);<BR>
18.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
}<BR>
19.&nbsp;&nbsp;&nbsp;&nbsp;}</TT>
</BLOCKQUOTE>
<HR>
<P>
Lines 1 through 6 do the same standard stuff: declare the applet
and import classes, for example. Lines 9 through 12 create four
checkboxes, each with a different label. In this case, four different
names are used. This is helpful if you use an applet (or application)
to report work done on a project and you need to say who has worked
on or contributed to the project. Lines 14 through 16 add these
boxes to the applet. Figure 6.2 shows this applet displayed in
the AppletViewer utility.
<P>
<A HREF="f6-2.gif" ><B>Figure 6.2 : </B><I>The heysomecheckboxes applet when viewed from the AppletViewer utility.</I></A>
<P>
There are four checkboxes with corresponding labels on the applet.
Easy enough, right? Sometimes, though, you may want only one checkbox
in a group of checkboxes to be true at any one time. This situation
is covered in the section on radio buttons.
<P>
Here are some of the methods available for controlling instances
of checkboxes:<P>

<CENTER><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=80%>
<TR VALIGN=TOP><TD><TT>getState()</TT>
</TD><TD WIDTH=404>This method is a function that returns the current state of the calling instance of a checkbox. Remember, the state of checkboxes is either true or false.
</TD></TR>
<TR VALIGN=TOP><TD WIDTH=186><TT>setState(boolean)</TT>
</TD><TD WIDTH=404>This method allows you to set the state of the calling instance.
</TD></TR>
<TR VALIGN=TOP><TD WIDTH=186><TT>getLabel()</TT>
</TD><TD WIDTH=404>This method returns the label of an instance of the checkbox class. The label is of type <TT>String</TT>.
</TD></TR>
<TR VALIGN=TOP><TD WIDTH=186><TT>setLabel(string)</TT>
</TD><TD WIDTH=404>This method allows you to set the label of a checkbox to a new string.
</TD></TR>
</TABLE></CENTER>
<P>
<H3><A NAME="CoordinatedCheckboxesRadioButtons">Coordinated Checkboxes:
Radio Buttons</A></H3>
<P>
The preceding section covered the addition of checkboxes to applets.
The preceding example had the checkboxes operate independently
of each other. But often you want only one checkbox to be true
at a time. This behavior is characteristic of radio buttons in
Java.
<P>
There isn't a specific type of <TT>RadioButton</TT>.
Instead, radio buttons are created by creating a group of checkboxes
and specifying the initial checkbox to be selected. This group
is defined by a class called (surprisingly) <TT>CheckboxGroup</TT>.
The class <TT>CheckboxGroup</TT> allows
you to group checkboxes and then manages the states of each checkbox
in the group so that only one is selected at a time. Here is a
sample declaration of a <TT>CheckboxGroup</TT>:
<BLOCKQUOTE>
<TT>private CheckboxGroup NameBoxGroup;<BR>
NameBoxGroup = new CheckboxGroup();</TT>
</BLOCKQUOTE>
<P>
The process of adding checkboxes to the group is easy. When you
declare a checkbox, you add the group name as another parameter.
For example, you declare a checkbox and want to include it in
the group declared above, <TT>NameBoxGroup</TT>.
You also want it to be the box that starts with its value as true.
Here is how you do it:
<BLOCKQUOTE>
<TT>JonBox = new Checkbox(&quot;Jon&quot;,
NameBoxGroup, true);</TT>
</BLOCKQUOTE>
<P>
Do this for each checkbox you want in the group and you're ready
to go. Listing 6.3 takes the previous example, the <TT>heysomecheckboxes</TT>
applet, and extends it to include the four names to act as radio
buttons. The new applet is the <TT>HeyaCheckBoxGroup</TT>
applet.
<HR>
<BLOCKQUOTE>
<B>Listing 6.3. The </B><TT><B>HeyaCheckBoxGroup</B></TT><B>
applet code.<BR>
</B>
</BLOCKQUOTE>
<BLOCKQUOTE>
<TT>1. // import all of the classes in the
java.awt and applet packages<BR>
2.&nbsp;&nbsp;import java.awt.*;<BR>
3.&nbsp;&nbsp;import java.applet.*;<BR>
4. // declare the class HeyaCheckBoxGroup.<BR>
5. public class HeyaCheckBoxGroup extends Applet<BR>
6.&nbsp;&nbsp;&nbsp;&nbsp; {<BR>
7.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// Overriding
the standard init() void.<BR>
8.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;public void
init()<BR>
9.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{
<BR>
10.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
// Declare the NameGroup as a CheckboxGroup().<BR>
11.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
CheckboxGroup NameGroup = new CheckboxGroup();<BR>
12.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//
Declare the JonBox as a new Checkbox(), and<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;do
the same for&nbsp;&nbsp;four more boxes.<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//
Also, set the JonBox to be initially true while<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
the rest are false.<BR>
13.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Checkbox
JonBox = new Checkbox(&quot;Jon&quot;,NameGroup,true);<BR>
14.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Checkbox
IanBox = new Checkbox(&quot;Ian&quot;,NameGroup,false);<BR>
15.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Checkbox
NateBox = new Checkbox(&quot;Nate&quot;,NameGroup,false);<BR>
16.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Checkbox
MichaelBox = new Checkbox(&quot;Michael&quot;,NameGroup,false);
<BR>
17.<BR>
18.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//
Add all of the Checkboxes to the applet panel.<BR>
19.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;add(JonBox);
<BR>
20.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;add(IanBox);
<BR>
21.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;add(NateBox);
<BR>
22.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;add(MichaelBox);
<BR>
23.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
}<BR>
24.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}</TT>
</BLOCKQUOTE>
<HR>
<P>
This applet declares an instance of <TT>CheckboxGroup</TT>
in line 10. Lines 13 through 16 declare four checkboxes and insert
them into the <TT>NameGroup</TT> with
the <TT>JonBox</TT> being set initially
<TT>true</TT>. Then the four boxes
are added to the applet using the <TT>add</TT>
method in lines 19 through 22. Figure 6.3 shows this applet.
<P>
<A HREF="f6-3.gif" ><B>Figure 6.3 : </B><I>The HeyaCheckBoxGroup applet when viewed from the AppletViewer utility.</I></A>
<P>
Other methods are available in checkboxes that deal with checkbox
groups:
<P>

<CENTER><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=80%>
<TR VALIGN=TOP><TD><TT>getCheckboxGroup()</TT>
</TD><TD WIDTH=295>This allows you to get the group to which a checkbox belongs.
</TD></TR>
<TR VALIGN=TOP><TD WIDTH=295><TT>setCheckboxGroup(CheckboxGroup cbg)</TT>
</TD><TD WIDTH=295>This allows you to change the group to which a checkbox belongs. It takes an instance of <TT>CheckboxGroup</TT> as a parameter.
</TD></TR>
</TABLE></CENTER>
<P>
<P>
Also, the <TT>setCurrent(Checkbox)</TT>
and <TT>getCurrent()</TT> methods
of the <TT>CheckboxGroup</TT> class
allow you to set and get the currently chosen checkbox.
<H3><A NAME="PopUpChoiceLists">Pop-Up Choice Lists</A></H3>
<P>
Pop-up choice lists allow you to combine many different choices
into one area. A large number of radio buttons can become unwieldy,
so this type of choice list puts many different choices into one
compact area. Figure 6.4 is an applet that features a pop-up choice
list viewed from the AppletViewer utility:
<P>
<A HREF="f6-4.gif" ><B>Figure 6.4 : </B><I>A choice list.</I></A>
<P>
Choice boxes come from the <TT>java.awt.Choice</TT>
class. To declare a new choice box, you can use the following
code:
<BLOCKQUOTE>
<TT>Choice names = new Choice();</TT>
</BLOCKQUOTE>
<P>
To insert items into the list, you use the <TT>addItem()</TT>
method of the <TT>Choice</TT> class.
The <TT>addItem()</TT> method takes
a string as a parameter. Here is the code to place the four names-Jon,
Ian, Nate, and Hal-into the choice list called <TT>names</TT>:
<BLOCKQUOTE>
<TT>names.addItem(&quot;Jon&quot;);<BR>
names.addItem(&quot;Ian&quot;);<BR>
names.addItem(&quot;Nate&quot;);<BR>
names.addItem(&quot;Hal&quot;);</TT>
</BLOCKQUOTE>
<P>
The items are listed in the pop-up choice list in the order in
which they are added. The selection in the box is the current
selection of the choice list. To change it, use the method <TT>select()</TT>.
It is overloaded to accept both integers and strings. Should you
want to select the third choice in a list initially, use the code:
<BLOCKQUOTE>
<TT>names.select(3);</TT>
</BLOCKQUOTE>
<P>
To choose the string <TT>&quot;Jon&quot;</TT>,
you use the following:
<BLOCKQUOTE>
<TT>names.select(&quot;Jon&quot;);</TT>
</BLOCKQUOTE>
<P>
The <TT>getItem()</TT> method allows
you to get the string at a certain position if you know the index.
Simply give it an integer, and it returns the string at that position.
Also, after you put an item in the list, it is there for good;
there is no way to get it out.
<H3><A NAME="ScrollingChoiceLists">Scrolling Choice Lists</A>
</H3>
<P>
On some occasions, you want to have all the selections available
for viewing at one time. You can do so by using scrolling lists.
They allow more than one item to be selected at a time. Figure
6.5 shows an applet that contains a scrolling list.
<P>
<A HREF="f6-5.gif" ><B>Figure 6.5 : </B><I>A scrolling choice list.</I></A>
<P>
Lists are declared using the following constructors:
<P>

<CENTER><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=80%>
<TR VALIGN=TOP><TD><TT>List()</TT>
</TD><TD>This is the default constructor. Only one choice may be selected at a time.
</TD></TR>
<TR VALIGN=TOP><TD WIDTH=196><TT>List(int, boolean)</TT>
</TD><TD WIDTH=394>This creates a scrolling list of the size defined in the integer parameter, and the <TT>Boolean</TT> flag sets the ability to have multiple selections. <TT>True</TT> means that it can have multiple selections; <TT>false</TT> means it can't.
</TD></TR>
</TABLE></CENTER>
<P>
<P>
Here is an example construction of a list that specifies six items
able to be viewed at one time and allows multiple selections at
one time:
<BLOCKQUOTE>
<TT>List Names = new List(6, true);</TT>
</BLOCKQUOTE>
<P>
As with pop-up choice lists, you use the <TT>addItem()</TT>
method of lists to insert items into the list:
<BLOCKQUOTE>
<TT>Names.addItem(&quot;Hal&quot;);<BR>
Names.addItem(&quot;Nate&quot;);<BR>
Names.addItem(&quot;Evan&quot;);</TT>
</BLOCKQUOTE>
<P>
Another instance of the <TT>addItem</TT>
method allows you to set where you want the next item inserted
in the list. Here is an example that places another name at position
four in the list:
<BLOCKQUOTE>
<TT>Names.addItem(&quot;Ignacio&quot;,4);</TT>
</BLOCKQUOTE>
<P>
You can also use the <TT>select()</TT>
method to set which items you want initially selected. The following
two lines set the first and fourth items in the list to be highlighted:
<BLOCKQUOTE>
<TT>Names.select(1);<BR>
Names.select(4);</TT>
</BLOCKQUOTE>
<P>
Figure 6.6 shows the preceding declaration, plus a few more, added
into an applet viewed through the AppletViewer utility.
<P>
<A HREF="f6-6.gif" ><B>Figure 6.6 : </B><I>The ScrollListExample applet viewed through the AppletViewer utility.</I></A>
<P>
Listing 6.4 shows the <TT>ScrollListExample</TT>
applet code.
<HR>
<BLOCKQUOTE>
<B>Listing 6.4. The </B><TT><B>ScrollListExample</B></TT><B>
applet code.<BR>
</B>
</BLOCKQUOTE>
<BLOCKQUOTE>
<TT>1. // import all of the classes in the
java.awt and applet packages<BR>
2. import java.awt.*;<BR>
3. import java.applet.*;<BR>
4. // declare the class HeyaCheckBoxGroup.<BR>
5. public class ScrollListExample extends Applet<BR>
6.&nbsp;&nbsp;&nbsp;&nbsp;{<BR>
7.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// Overriding
the standard init() void.<BR>
8.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;public void
init()<BR>
9.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{
<BR>
10.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
List Names = new List(6,true);<BR>
11.<BR>
12.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Names.addItem(&quot;Hal&quot;);
<BR>
13.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Names.addItem(&quot;Nate&quot;);
<BR>
14.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Names.addItem(&quot;Ignacio,4&quot;);
<BR>
15.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Names.addItem(&quot;Yi&quot;);
<BR>
16.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Names.addItem(&quot;Wilson&quot;);
<BR>
17.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Names.addItem(&quot;Robb&quot;);
<BR>
18.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Names.select(1);
<BR>
19.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Names.select(4);
<BR>
20.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;add(Names);
<BR>
21.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
}<BR>
22.}</TT>
</BLOCKQUOTE>
<HR>
<P>
A number of other useful methods are available in the <TT>List()</TT>
class:<P>

<CENTER><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=80%>
<TR VALIGN=TOP><TD><TT>clear()</TT>
</TD><TD WIDTH=298>This removes all the items from the list.</TD>
</TR>
<TR VALIGN=TOP><TD WIDTH=292><TT>getItem(integer)</TT>
</TD><TD WIDTH=298>This returns the string at the index specified by the parameter.
</TD></TR>
<TR VALIGN=TOP><TD WIDTH=292><TT>countItems()</TT>
</TD><TD WIDTH=298>This returns an integer specifying the number of items currently in the list.
</TD></TR>
<TR VALIGN=TOP><TD WIDTH=292><TT>replaceItem(string, integer)</TT>
</TD><TD WIDTH=298>This replaces the item at the index specified by the integer with the string.
</TD></TR>
<TR VALIGN=TOP><TD WIDTH=292><TT>getSelectedIndex()</TT>
</TD><TD WIDTH=298>This returns an integer specifying the position in a list of the selected item.
</TD></TR>
<TR VALIGN=TOP><TD WIDTH=292><TT>getSelectedIndexes()</TT>
</TD><TD WIDTH=298>This returns an array of integers, each of which specify the indexes of all the selected items.
</TD></TR>
<TR VALIGN=TOP><TD WIDTH=292><TT>getSelectedItems()</TT>
</TD><TD WIDTH=298>This returns an array of strings that are all the selected items at the current time.
</TD></TR>
<TR VALIGN=TOP><TD WIDTH=292><TT>getSelectedItem()</TT>
</TD><TD WIDTH=298>This returns the string that is currently selected.
</TD></TR>
</TABLE></CENTER>
<P>
<H3><A NAME="Scrollbars">Scrollbars</A></H3>
<P>
Scrollbars are common to every graphical user interface system.
In the AWT, they are used to scroll areas such as lists and sliders,
which are a graphical means to set values. Figure 6.7 shows a
small applet that includes a slider.
<P>
<A HREF="f6-7.gif" ><B>Figure 6.7 : </B><I>An applet with a slider.</I></A>
<P>
As sliders, scrollbars are used to input a value to the program
from the user. The programmer can set the initial minimum value,
the maximum value, the orientation, and the visible area of the
scrollbar. You also can set how the scrollbar changes per different
user actions. This activity is described later in this chapter
when the process of handling events in the AWT is covered.
<P>
This section covers the construction of instances of the <TT>Scroll()</TT>
type and their implementation. <A HREF="ch8.htm" >Chapter 8</A>
covers using scrollbars to scroll through a window. There are
two major ways to construct a scrollbar.
<P>
<TT>Scrollbar(<I>int)</I></TT> constructs
a scrollbar and sets the initial orientation (vertical or horizontal)
of the scrollbar. The <TT><I>int</I></TT>
you send in is either <TT>Scrollbar.HORIZONTAL</TT>
or <TT>Scrollbar.VERTICAL</TT>. These
are the only values currently available to you. You can then later
use the <TT>setValues(<I>int initial</I>,<I>
int visiblearea</I>, <I>int min,</I> <I>int max</I>)</TT>
method to set the initial value, the visible area of the window,
the minimum value, and the maximum value for the scrollbar, respectively.
<P>
<TT>Scrollbar(<I>int orientation</I>, <I>int
visiblearea</I>, <I>int initial</I>, <I>int min</I>, <I>int max</I>)</TT>,
takes five parameters (in this order): the orientation (either
<TT>Scrollbar.HORIZONTAL</TT> or <TT>Scrollbar.VERTICAL)</TT>,
the visible area value, the initial value, the minimum value,
and the maximum value.
<P>
The page value is the amount that the value of the scrollbar changes
when a user clicks on the area between the end arrow and the current
position. To set the page increment value, use the <TT>setPageIncrement(<I>int
pageincrement)</I></TT> method, which takes an integer
parameter and makes that value the page value.
<P>
The line increment is the amount that the scrollbar changes when
a user clicks on the end arrow of the scrollbar. The method to
change or set this value is the <TT>setLineIncrement(<I>int
lineincrement)</I></TT> method of the <TT>Scrollbar</TT>
class. As with the <TT>setPageIncrement(<I>int
pageincrement</I>)</TT> method, this method accepts an
integer.
<P>
Listing 6.5 is a sample applet that contains two scrollbars, using
both of the <TT>Scrollbar()</TT> constructors
discussed previously.
<HR>
<BLOCKQUOTE>
<B>Listing 6.5. The </B><TT><B>TwoScrollBars</B></TT><B>
applet code.<BR>
</B>
</BLOCKQUOTE>
<BLOCKQUOTE>
<TT>1. import java.awt.*;<BR>
2.<BR>
3. public class TwoScrollBars extends java.applet.Applet<BR>
4.&nbsp;&nbsp;&nbsp;&nbsp; {<BR>
5.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;public void
init()<BR>
6.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{
<BR>
7.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;&nbsp;Declare
the Vertical Bar as a horizontal scrollbar.<BR>
8.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Scrollbar
VertBar = new Scrollbar(Scrollbar.VERTICAL);<BR>
9.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;&nbsp;Set
the values to be: initial value 25,<BR>
10.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;visible,
area to 35, min to 0, max to 200.<BR>
11.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;VertBar.setValues(25,
25, 0, 200);<BR>
12.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//
Add the scrollbar to the applet panel.<BR>
13.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;add(VertBar);
<BR>
14.<BR>
15.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//
Declare the HorizBar as a horizontal scroll bar,<BR>
16.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
with initial 16. value 10, visible area of 50,<BR>
17.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//minimum
of 0, and maximium of 200.<BR>
18.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Scrollbar
HorizBar = new Scrollbar<BR>
19.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;(ScrollBar.HORIZONTAL,
10, 50, 0, 200);<BR>
20.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;&nbsp;Add
the HorizBar to the applet panel.<BR>
21.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;add(HorizBar);
<BR>
22.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
}<BR>
23.}</TT>
</BLOCKQUOTE>
<HR>
<P>
Lines 1 through 6 do the standard stuff: declare the applet and
import classes. Line 8 declares the scrollbar and sets the initial
orientation of the <TT>VertBar</TT>
variable. Then the <TT>setValue()</TT>
method is used to set the initial value, the visible area, the
minimum value, and the maximum value. The scrollbar is then added
to the applet panel. In lines 15 through 21, basically the same
thing happens, except that all the setup done in setting and adding
the HorizBar is done in lines 18, 19, and 21.
<P>
<CENTER><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=80%>
<TR VALIGN=TOP><TD><B>Note:</B></TD></TR>
<TR VALIGN=TOP><TD>
<BLOCKQUOTE>
There are actually more constructors for creating scrollbars. However, in the end, they all produce the same product and are just as easy. By providing you with the &quot;all in one&quot; constructor that takes five parameters, and also including a minimalist constructor that takes only one parameter, I hope that you are getting a feel for the whole range of constructors.</BLOCKQUOTE>

</TD></TR>
</TABLE></CENTER>
<P>
<P>
Here is a summary of the <TT>Scrollbar</TT>
methods and declarations:
<P>
<TT>Scrollbar(<I>int orientation, int visiblearea,
int initial, int min, int max</I>)</TT>&nbsp;&nbsp;The
parameters set the orientation, visible area, initial value, minimum
value, and maximum value respectively.
<P>
<TT>setPageIncrement(<I>int)</I></TT>&nbsp;&nbsp;As
discussed previously, this sets the page increment. This is the
amount that the scrollbar changes when the user clicks between
the current position and the endpoint.
<P>
<TT>setLineIncrement</TT>(<TT><I>int</I></TT><I>)</I>&nbsp;&nbsp;As
discussed above, this sets the line increment. The line increment
is the amount that the scrollbar changes when the user clicks
on the end arrow of the scrollbar.
<P>
<TT>setValues(<I>int initial, int visible
area</I>, <I>int min</I>, <I>int max</I>)&nbsp;&nbsp;</TT>This
is the method to set the initial value, the visible area of the
window, the minimum value, and the maximum value for the scrollbar
respectively.
<P>
<TT>int getValue()</TT>&nbsp;&nbsp;This
returns the current value, an integer, of the scrollbar. This
is the main method used later when making scrollbars active.
<P>
In any of the examples discussed in this chapter, you may notice
that something is wrong. The insertion and setup of these different
components of the AWT are covered except how to handle them when
something happens with them. For example, nothing happens when
you click on the buttons that have been created. Handling user
actions like button selection is covered later in this chapter.
But first, let's get started on creating the Order Entry System.
<H2><A NAME="GettingStartedontheOrderEntrySyste"><FONT SIZE=5 COLOR=#FF0000>Getting
Started on the Order Entry System</FONT></A></H2>
<P>
This section covers how to create and insert the different components
to be used onto the applet panel. Don't worry about the positioning
of the buttons. This is taken care of when you manage the applet
layout in <A HREF="ch8.htm" >Chapter 8</A>. For now, just worry
about creating the components and slapping them down.
<P>
Also, notice that the Order Entry System exists as a stand-alone
window. This also is covered in <A HREF="ch8.htm" >Chapter 8</A>.
Finally, the logo is left out for now because it is covered in
<A HREF="ch9.htm" >Chapter 9</A>.
<P>
Ideally, you want to use every component to give yourself a feel
for them. So give it a shot, even though it may complicate matters.
For the time being, you are going to implement the components
covered in this chapter.
<P>
To start off, import all the AWT classes and also the Applet package
as follows:
<BLOCKQUOTE>
<TT>import java.awt.*;<BR>
import java.applet.*;</TT>
</BLOCKQUOTE>
<P>
And then declare the applet class like this:
<BLOCKQUOTE>
<TT>public class OrderEntrySystem extends
Applet {</TT>
</BLOCKQUOTE>
<P>
The customary place to initialize and set up your applet is in
the <TT>init()</TT> method. So, declare
the <TT>init()</TT> method and insert
and declare your first component, a button that reads <TT>Submit</TT>.
Here is the code segment that declares the button and inserts
it onto the applet panel:
<BLOCKQUOTE>
<TT>Button SubmitButton = new Button(&quot;Submit&quot;);
<BR>
add(SubmitButton);</TT>
</BLOCKQUOTE>
<P>
Continue doing the same tasks for two more buttons labeled <TT>Quit</TT>
and <TT>Clear</TT>, in the same manner.
Next, insert a checkbox that asks if the person using the system
is a repeat customer:
<BLOCKQUOTE>
<TT>Checkbox RepeatCustCheckBox = new Checkbox(&quot;Repeat
Customer?&quot;);<BR>
add(RepeatCustCheckBox);</TT>
</BLOCKQUOTE>
<P>
You also should query the users as to how they are to be contacted.
The choices are phone, e-mail, or U.S. mail. A radio button setup
is ideal for this query since you want only one button to be active
at one time. The first step in creating radio buttons is to create
an instance of the <TT>CheckboxGroup</TT>
class that coordinates the behavior of all the instances of the
<TT>Checkbox</TT> class. Add the following:
<BLOCKQUOTE>
<TT>private CheckboxGroup ContactMethodGroup;
<BR>
ContactMethodGroup = new ContactMethodGroup();</TT>
</BLOCKQUOTE>
<P>
Next, create the buttons you're going to put in the group, using
the declaration method specified previously:
<BLOCKQUOTE>
<TT>Checkbox EmailBox = new Checkbox(&quot;Email&quot;,ContactMethodGroup,true);
<BR>
Checkbox PhoneBox = new Checkbox(&quot;Phone&quot;,ContactMethodGroup,false);</TT>
</BLOCKQUOTE>
<P>
And so on for the rest of the buttons. Because you'd rather e-mail,
set the <TT>Email</TT> button to be
initially true while the rest are false. Also, remember to <TT>add()</TT>
all the buttons. There are a number of products to choose from
in the applet, so set a means to choose from a number of products.
<A HREF="ch11.htm" >Chapter 11</A>, &quot;Reading and Writing
with Java,&quot; touches on how you could read in a file that
contains all the products and prices. For now, set all the products
in the program. First, construct the <TT>ProductList</TT>
class as an instance of the <TT>List</TT>
class and add some of the products.
<BLOCKQUOTE>
<TT>List ProductList = new List(4, false);
<BR>
ProductList.addItem(&quot;Oscar&quot;);<BR>
ProductList.addItem(&quot;Lionhead&quot;);<BR>
ProductList.addItem(&quot;Jack Dempsey&quot;);<BR>
ProductList.addItem(&quot;Angelfish&quot;);<BR>
.<BR>
.</TT>
</BLOCKQUOTE>
<P>
The first parameter sets the list to have four items visible at
a time. The second sets the list so that only one item may be
selected at a time. There's also a pop-up choice box to let the
user select the size of the product (in this case, fish) that
he or she wants. To declare a choice box, you use much the same
code as above.
<P>
Finally, the last component to add is a slider. This is used to
allow the user to input the amount of each product that he or
she wants to order. Here is the declaration for the slider:
<BLOCKQUOTE>
<TT>Scrollbar OrderAmountSlider = new Scrollbar(Scrollbar.VERTICAL,
0, 0, 0, 100);<BR>
add(OrderAmountSlider);</TT>
</BLOCKQUOTE>
<P>
The scrollbar is declared to be vertically oriented, with a visible
area of zero, an initial value of zero, a minimum of zero, and
a maximum of 100.
<P>
Listing 6.6 is the complete code listing, showing what you should
have so far in building the Order Entry System.
<HR>
<BLOCKQUOTE>
<B>Listing 6.6. The </B><TT><B>OrderEntrySystem</B></TT><B>
applet code so far.<BR>
</B>
</BLOCKQUOTE>
<BLOCKQUOTE>
<TT>import java.awt.*;<BR>
import java.applet.*;<BR>
public class OrderEntrySystem extends Applet {<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;public void init()<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//
Add and create three buttons.<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
Button SubmitButton = new Button(&quot;Submit&quot;);<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;add(SubmitButton);
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Button
ClearButton = new Button(&quot;Clear&quot;);<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;add(ClearButton);
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Button
QuitButton = new Button(&quot;Quit&quot;);<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;add(QuitButton);
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//
Add and create the repeat customer checkbox.<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Checkbox
RepeatCustCheckBox = new Checkbox(&quot;Repeat Customer?&quot;);
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;add(RepeatCustCheckBox);
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//
Declare the CheckboxGroup, and allocate space.<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;CheckboxGroup
ContactMethodGroup;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ContactMethodGroup
= new CheckboxGroup();<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//
Create some checkboxes to put in the group.<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Checkbox
EmailBox = new&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Checkbox(&quot;Email&quot;,ContactMethodGroup,true);
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Checkbox
PhoneBox = new<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Checkbox(&quot;Phone&quot;,ContactMethodGroup,false);
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Checkbox
MailBox = new<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Checkbox(&quot;US
Mail&quot;,ContactMethodGroup,false);<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//
Add the checkboxes into the applet panel.<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;add(EmailBox);
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;add(PhoneBox);
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;add(MailBox);
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//
Create the list, 4 items visible, no multiple<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//
selections.<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;List
ProductList = new List(4, false);<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//
AddItems to the List.<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ProductList.addItem(&quot;Oscar&quot;);
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ProductList.addItem(&quot;Lionhead&quot;);
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ProductList.addItem(&quot;Jack
Dempsey&quot;);<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ProductList.addItem(&quot;Angelfish&quot;);
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//
Add the List to the Applet panel.<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;add(ProductList);
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//
Create the Choice box.<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Choice
SizeChoice = new Choice();<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//
AddItems to the List.<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;SizeChoice.addItem(&quot;Jumbo&quot;);
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;SizeChoice.addItem(&quot;Large&quot;);
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;SizeChoice.addItem(&quot;Medium&quot;);
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;SizeChoice.addItem(&quot;Small&quot;);
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//
Add the Choice to the Applet panel.<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;add(SizeChoice);
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//
Create a vertical slider, initial value of 0,<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//
minimum value of 0, maximum value of 144.<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Scrollbar
OrderAmountSlider = new&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Scrollbar(Scrollbar.VERTICAL,
0, 0, 0, 100);<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//
Insert the slider to the Applet panel.<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;add(OrderAmountSlider);
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
<BR>
}</TT>
</BLOCKQUOTE>
<HR>
<P>
Figure 6.8 shows what you see when you view
this applet through the AppletViewer utility.
<P>
<A HREF="f6-8.gif" ><B>Figure 6.8 : </B><I>The start of the Order Entry System applet.</I></A>
<H3><A NAME="WhatsWrongwiththeOrderEntrySystem">What's Wrong with
the Order Entry System?</A></H3>
<P>
If you run the Order Entry System applet so far, you will notice
something a little peculiar: nothing happens. You can click on
the buttons, move the slider, and whatever else, and nothing happens.
These user actions are called <I>events</I> in the Abstract Windowing
Toolkit. Your program has to be able to deal with these events
and give the proper response. For example, if a user clicks the
up arrow on a slider, your program has to react and increment
a variable. If a <TT>Clear</TT> button
is clicked, your program has to reset all the data that has been
input to default values. The next section covers the implementation
and concepts behind events and handling them. It also deals with
the specialized <TT>action()</TT>
method used for different types of component events. And after
that, it sets up much of the dealing with events in the Order
Entry System. Also, you may think, &quot;It looks terrible.&quot;
Well, you're right. Hold on because the solutions are coming up
in future chapters.
<H2><A NAME="DealingwithEvents"><FONT SIZE=5 COLOR=#FF0000>Dealing
with Events</FONT></A></H2>
<P>
Some events in the AWT are mouse drags, window resizing, and slider.
Your programs that use the AWT are set to react to each event.
This makes programs based on the AWT very different from typical
programs. When you're creating a windowing system, one of the
tasks you do is enable your system to act on an event-by-event
basis as opposed to a linear basis. The AWT takes this responsibility
out of your hands.
<P>
Events in Java are declared using the <TT>Event</TT>
class. Different types of events are identified by a different
constant held in <TT>Event.id</TT>.
Each different type of event, such as mouse clicks and window
resizing, is identified by a different constant. For example,
if a mouse button is pressed, an event is generated whose <TT>id</TT>
is equal to the constant <TT>MOUSE_DOWN</TT>.
Table 6.1 explains all the mouse and keyboard event types. Table
6.2 contains events related to windows. Table 6.3 contains the
miscellaneous events such as the event <TT>id</TT>s
specific to the <TT>List</TT> class
and scrolling events, and Table 6.4 lists the different values
contained in instances of the <TT>Event</TT>
class.<BR>
<P>
<CENTER><B>Table 6.1. The keyboard and mouse event id types.<BR>
</B></CENTER>
<CENTER><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH\80%>
<TR VALIGN=TOP><TD WIDTH=184><I>ID Constant</I></TD><TD WIDTH=238><I>Meaning</I>
</TD></TR>
<TR VALIGN=TOP><TD WIDTH=184><TT>KEY_PRESS</TT>
</TD><TD WIDTH=238>Generated when a key is pressed.</TD></TR>
<TR VALIGN=TOP><TD WIDTH=184><TT>KEY_RELEASE</TT>
</TD><TD WIDTH=238>Generated when a key is released.</TD></TR>
<TR VALIGN=TOP><TD WIDTH=184><TT>MOUSE_UP</TT>
</TD><TD WIDTH=238>Mouse button is released.</TD></TR>
<TR VALIGN=TOP><TD WIDTH=184><TT>MOUSE_DOWN</TT> 
</TD><TD WIDTH=238>Mouse button is pressed.</TD></TR>
<TR VALIGN=TOP><TD WIDTH=184><TT>MOUSE_ENTER</TT>
</TD><TD WIDTH=238>Mouse enters the window area.</TD></TR>
<TR VALIGN=TOP><TD WIDTH=184><TT>MOUSE_EXIT</TT>
</TD><TD WIDTH=238>Mouse exits the window area.</TD></TR>
<TR VALIGN=TOP><TD WIDTH=184><TT>MOUSE_MOVED</TT>
</TD><TD WIDTH=238>Mouse is moved.</TD></TR>
<TR VALIGN=TOP><TD WIDTH=184><TT>MOUSE_DRAG</TT>
</TD><TD WIDTH=238>Mouse is dragging something.</TD></TR>
<TR VALIGN=TOP><TD WIDTH=184><TT>HOME</TT>, <TT>PGDN</TT>, <TT>PGUP</TT>, etc.
</TD><TD WIDTH=238>Action key is pressed.</TD></TR>
<TR VALIGN=TOP><TD WIDTH=184><TT>F1</TT> . . <TT>F12</TT>
</TD><TD WIDTH=238>The function keys.</TD></TR>
<TR VALIGN=TOP><TD WIDTH=184><TT>LEFT</TT>, <TT>UP</TT>, <TT>RIGHT</TT>, etc.
</TD><TD WIDTH=238>Arrow key pressed.</TD></TR>
<TR VALIGN=TOP><TD WIDTH=184><TT>ACTION_EVENT</TT>
</TD><TD WIDTH=238>An action event occurs.</TD></TR>
</TABLE></CENTER>
<P>
<P>
<CENTER><B>Table 6.2. The event id types for window events.</B></CENTER>
<CENTER><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=80%>
<TR VALIGN=TOP><TD><I>ID Constant</I></TD><TD WIDTH=248><I>Meaning</I>
</TD></TR>
<TR VALIGN=TOP><TD WIDTH=157><TT>WINDOW_DESTROY</TT>
</TD><TD WIDTH=248>Destroy button pressed on window.</TD></TR>
<TR VALIGN=TOP><TD WIDTH=157><TT>WINDOW_ICONIFY</TT>
</TD><TD WIDTH=248>Window told to minimize.</TD></TR>
<TR VALIGN=TOP><TD WIDTH=157><TT>WINDOW_EXPOSE</TT>
</TD><TD WIDTH=248>Window told to &quot;expose&quot; itself.</TD>
</TR>
<TR VALIGN=TOP><TD WIDTH=157><TT>WINDOW_MOVED</TT>
</TD><TD WIDTH=248>Window moved.</TD></TR>
</TABLE></CENTER>
<P>
<P>
<CENTER><B>Table 6.3. Miscellaneous event types.</B></CENTER>
<CENTER><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=80%>
<TR VALIGN=TOP><TD><I>ID Constant</I></TD><TD WIDTH=329><I>Meaning</I>
</TD></TR>
<TR VALIGN=TOP><TD WIDTH=261><TT>SCROLL_LINE_UP</TT>, 
</TD><TD WIDTH=329>The different scroll events for different user inputs
</TD></TR>
<TR VALIGN=TOP><TD WIDTH=261><TT>SCROLL_PAGE_DOWN</TT>, and so on
</TD><TD WIDTH=329>on scrollbars.</TD></TR>
<TR VALIGN=TOP><TD WIDTH=261><TT>SCROLL_ABSOLUTE</TT>
</TD><TD WIDTH=329>Scrollbar is moved.</TD></TR>
<TR VALIGN=TOP><TD WIDTH=261><TT>LIST_SELECT</TT>, <TT>LIST_DESELECT</TT>
</TD><TD WIDTH=329>An item in the list selected or deselected.
</TD></TR>
<TR VALIGN=TOP><TD WIDTH=261><TT>LOAD_FILE</TT>, <TT>SAVE_FILE</TT>
</TD><TD WIDTH=329>A saving file event, for example.</TD></TR>
<TR VALIGN=TOP><TD WIDTH=261><TT>GOT_FOCUS</TT>, <TT>LOST_FOCUS</TT>
</TD><TD WIDTH=329>A component gets or loses the focus.</TD></TR>
</TABLE></CENTER>
<P>
<P>
<CENTER><B>Table 6.4. The different values contained in instances
of the Event class.</B></CENTER>
<CENTER><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=80%>
<TR VALIGN=TOP><TD><I>Name</I></TD><TD WIDTH=442><I>What It Is</I>
</TD></TR>
<TR VALIGN=TOP><TD WIDTH=148><TT>Object target</TT>
</TD><TD WIDTH=442>Which component generates the event.</TD></TR>
<TR VALIGN=TOP><TD WIDTH=148><TT>long when</TT>
</TD><TD WIDTH=442>A time stamp.</TD></TR>
<TR VALIGN=TOP><TD WIDTH=148><TT>int id</TT>
</TD><TD WIDTH=442>A constant that says what kind of event it is.
</TD></TR>
<TR VALIGN=TOP><TD WIDTH=148><TT>int x</TT></TD>
<TD WIDTH=442>The x coordinate of the event.</TD></TR>
<TR VALIGN=TOP><TD WIDTH=148><TT>int y</TT></TD>
<TD WIDTH=442>The y coordinate of the event.</TD></TR>
<TR VALIGN=TOP><TD WIDTH=148><TT>int key</TT>
</TD><TD WIDTH=442>The key that is pressed.</TD></TR>
<TR VALIGN=TOP><TD WIDTH=148><TT>int modifiers</TT>
</TD><TD WIDTH=442>Which modifier key is used (ALT, for example).
</TD></TR>
<TR VALIGN=TOP><TD WIDTH=148><TT>clickCount</TT>
</TD><TD WIDTH=442>The number of consecutive click counts (2 for a double-click, 0 if it isn't set, for example).
</TD></TR>
<TR VALIGN=TOP><TD WIDTH=148><TT>Object arg</TT>
</TD><TD WIDTH=442>An arbitrary argument used for customization.
</TD></TR>
</TABLE></CENTER>
<P>
<CENTER><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=80%>
<TR VALIGN=TOP><TD><B>Note:</B></TD></TR>
<TR VALIGN=TOP><TD>
<BLOCKQUOTE>
A few more event constants than these are available. However, the <TT>event.id</TT>s covered in this chapter are effective for almost all purposes.
</BLOCKQUOTE>
<BLOCKQUOTE>
Also, the <TT>when</TT> member of the <TT>Event</TT> class is used for time stamping. You generally don't worry about this because the vast majority of programs you deal with are event-driven and not linear.
</BLOCKQUOTE>

</TD></TR>
</TABLE></CENTER>
<P>
<H3><A NAME="ThehandleEventMethod">The <TT><FONT SIZE=4>handleEvent()</FONT></TT><FONT SIZE=4>
Method</FONT></A></H3>
<P>
After an event occurs, the Java runtime constructs an instance
of the <TT>Event</TT> class and sets
its <TT>id</TT> field appropriately.
It then sends that instance to the <TT>handleEvent()</TT>
method of your Java program that overrides the default <TT>handleEvent()</TT>
method. This method deals with the event appropriately.
<P>
The<TT> handleEvent()</TT> method
is a Boolean function. Three possible results can be returned:
<TT>true</TT>, <TT>false</TT>,
or <TT>super.handleEvent(Event)</TT>.
A returned <TT>true</TT> value signifies
that your <TT>handleEvent()</TT> method
has taken care of the event. A <TT>false</TT>
value signifies that your event has not been handled. This is
not desirable. The proper path for events to be handled is first
through a class and then through its parent. A <TT>false</TT>
value has the event sent to the parent container, and you don't
want that. Instead, return <TT>super.handleEvent(Event)</TT>,
which sends the event to a parent of a class (the class it has
been derived from) to be dealt with. To summarize, either return
<TT>true</TT>, saying that your <TT>handleEvent()</TT>
took care of the event, or return <TT>super.handleEvent(Event)</TT>
to show that you didn't handle the event and your parent class
should.
<H2><A NAME="DealingwiththeactionMethod"><FONT SIZE=5 COLOR=#FF0000>Dealing
with the </FONT><TT><FONT SIZE=5 COLOR=#FF0000>action()</FONT></TT><FONT SIZE=5 COLOR=#FF0000>
Method</FONT></A></H2>
<P>
Notice that some events are missing in the previous lists. What
about events resulting from instances of the <TT>Choice</TT>
class? Well, these kinds of events are more easily handled with
a Java method called the <TT>action()</TT>
method. With the <TT>action()</TT>
method, events work a little differently. The <BR>
<TT>action()</TT> method deals with
events that are generated by the AWT components themselves. The
different components all create specific action events that your
AWT programs can override to deal with specific events. The <TT>action</TT>
method has the following structure:
<BLOCKQUOTE>
<TT>public boolean action(Event InEvent,
Object SomeObject) {<BR>
&nbsp;&nbsp;&nbsp;&nbsp;if (InEvent.target == AButton)&nbsp;&nbsp;{
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;. . .<BR>
&nbsp;&nbsp;&nbsp;&nbsp;} return . .<BR>
}</TT>
</BLOCKQUOTE>
<P>
The <TT>action</TT> <TT>void</TT>
returns, like the <TT>handleEvent()</TT>
method, either <TT>true</TT> or <TT>false</TT>
depending on whether the method has handled the event. Each different
component calls the <TT>action</TT>
method in a different way, using different parameter values in
place of the <TT>SomeObject</TT> parameter.
The <TT>InEvent</TT> parameter in
the event is the calling component, and the <TT>SomeObject</TT>
parameter can be anything (because basically everything in Java
derives from an <TT>Object</TT>).
When the <TT>action</TT> method is
called for button presses, the argument is the string label of
the button. When it is called from an instance of the <TT>Choice</TT>
class, the argument is the selected string.
<P>
There are also specialized methods that handle very specific events.
You can use them to simplify your other event-handling methods.
Table 6.5 is a summary of these specialized event-handling methods.
<BR>
<P>
<CENTER><B>Table 6.5. The different types of action and related
methods.</B></CENTER>
<CENTER><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=80%>
<TR VALIGN=TOP><TD><I>Method</I></TD><TD WIDTH=243><I>When Called</I>
</TD></TR>
<TR VALIGN=TOP><TD WIDTH=347><TT>action(Event InEvent, Object SomeObject)</TT>
</TD><TD WIDTH=243>The standard action method.</TD></TR>
<TR VALIGN=TOP><TD WIDTH=347><TT>keyUp(Event InEvent, int key)</TT>
</TD><TD WIDTH=243>Mouse button is released.</TD></TR>
<TR VALIGN=TOP><TD WIDTH=347><TT>keyDown(Event InEvent, int key)</TT>
</TD><TD WIDTH=243>Mouse button is pressed.</TD></TR>
<TR VALIGN=TOP><TD WIDTH=347><TT>mouseUp(Event InEvent, int xpos, int ypos)</TT>
</TD><TD WIDTH=243>Mouse button is released.</TD></TR>
<TR VALIGN=TOP><TD WIDTH=347><TT>mouseDown(Event InEvent, int xpos, int ypos)</TT>
</TD><TD WIDTH=243>Mouse button is pressed.</TD></TR>
<TR VALIGN=TOP><TD WIDTH=347><TT>mouseMove(Event InEvent, int xpos, int ypos)</TT>
</TD><TD WIDTH=243>Mouse is moved.</TD></TR>
<TR VALIGN=TOP><TD WIDTH=347><TT>mouseDrag(Event InEvent, int xpos, int ypos)</TT>
</TD><TD WIDTH=243>Mouse is dragging.</TD></TR>
<TR VALIGN=TOP><TD WIDTH=347><TT>mouseEnter(Event InEvent, int xpos, int ypos)</TT>
</TD><TD WIDTH=243>Mouse has entered the component.</TD></TR>
<TR VALIGN=TOP><TD WIDTH=347><TT>mouseExit(Event InEvent, int xpos, int ypos)</TT>
</TD><TD WIDTH=243>Mouse has left a component.</TD></TR>
</TABLE></CENTER>
<P>
<P>
In summary, user actions in Java can be categorized into those
that are handled by the <TT>handleEvent()</TT>
method and those that are handled by the different types of <TT>action</TT>
methods. There is a large amount of overlap. It is easy to use
the <TT>handleEvent</TT> method to
deal with many of the component events covered by the <TT>action</TT>
method. To do this, test for the <TT>ACTION_EVENT</TT>
event <TT>id</TT> and then act based
on the value of <TT>Event.target</TT>.
<P>
However, using both the more specific <TT>action</TT>
methods and the <TT>handleEvent</TT>
method ensures that your code is easier to read, design, and maintain.
Of course, as with many languages, Java allows you many ways to
do things, and with experience you will develop your own style.
<P>
Listing 6.7 is a sample applet that deals with handling events
using both the <TT>action</TT> method
and the <TT>handleEvent</TT> method.
<P>
<CENTER><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=80%>
<TR VALIGN=TOP><TD><B>Tip:</B></TD></TR>
<TR VALIGN=TOP><TD>
<BLOCKQUOTE>
Cases and syntax are very important in Java, especially when you're dealing with overriding methods and inheritance. For example, if you declare a <TT>HandleEvent()</TT> method and execute your Java program expecting it to override the <TT>handleEvent()</TT> method in the AWT, nothing happens. When in doubt, look for these kinds of errors.
</BLOCKQUOTE>

</TD></TR>
</TABLE></CENTER>
<P>
<HR>
<BLOCKQUOTE>
<B>Listing 6.7. The Event applet code listing.<BR>
</B>
</BLOCKQUOTE>
<BLOCKQUOTE>
<TT>1. import java.awt.*;<BR>
2. import java.applet.Applet;<BR>
3.<BR>
4. public class EventExample extends Applet {<BR>
5.<BR>
6.&nbsp;&nbsp;&nbsp;&nbsp;// Declare a local variable, AList of
the List type.<BR>
7.&nbsp;&nbsp;&nbsp;&nbsp;private List AList;<BR>
8.&nbsp;&nbsp;&nbsp;&nbsp;// Declare a local variable, AButton
of the Button type.<BR>
9.&nbsp;&nbsp;&nbsp;&nbsp;private Button AButton;<BR>
10.<BR>
11.&nbsp;&nbsp;&nbsp;&nbsp;// Override the default init() method.
<BR>
12.&nbsp;&nbsp;&nbsp;&nbsp;public void init() {<BR>
13.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;/*
Allocate space for the AList.&nbsp;&nbsp;Set it to show four<BR>
14.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
items visible at one time and turn off the ability<BR>
15.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
for the user to make multiple selections with the<BR>
16.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
false boolean parameter. */<BR>
17.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;AList
= new List(3, false);<BR>
18.<BR>
19.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//
Add four items to the List class and initially select item #1..
<BR>
20.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;AList.addItem(&quot;Blue&quot;);
<BR>
21.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;AList.addItem(&quot;Yellow&quot;);
<BR>
22.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;AList.addItem(&quot;Green&quot;);
<BR>
23.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;AList.addItem(&quot;Red&quot;);
<BR>
24.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;AList.addItem(&quot;Purple&quot;);
<BR>
25.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;AList.addItem(&quot;Orange&quot;);
<BR>
26.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;AList.select(1);
<BR>
27.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//
Add the list class to the applet panel.<BR>
28.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;add(AList);
<BR>
29.<BR>
30.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//
Allocate space for the AButton.<BR>
31.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;AButton
= new Button(&quot;Click Me&quot;);<BR>
32.<BR>
33.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//
Add the button to the applet panel.<BR>
34.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;add(AButton);
<BR>
35.<BR>
36.&nbsp;&nbsp;&nbsp;&nbsp;}<BR>
37.<BR>
38.&nbsp;&nbsp;&nbsp;&nbsp;/* Overriding the default HandleEvent
method.&nbsp;&nbsp;Here we will<BR>
39.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; write code to receive
Events from the Java run time. */<BR>
40.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;public boolean handleEvent(Event
inEvent) {<BR>
41.<BR>
42.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;/*
Check to see what kind of Event we're given, if<BR>
43.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
it is an Event where the user selects an item in<BR>
44.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
our list, then we're going to deselect that item<BR>
45.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
and reselect number 1. */<BR>
46.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if
(inEvent.target == AList)<BR>
47.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{
<BR>
48.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if
(inEvent.id == Event.LIST_SELECT)<BR>
49.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{
<BR>
50.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;/*
Make the first item in the list the<BR>
51.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;selected
item. */<BR>
52.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;AList.select(0);
<BR>
53.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
<BR>
54.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<BR>
55.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return
super.handleEvent(inEvent);<BR>
56.&nbsp;&nbsp;&nbsp;&nbsp;}<BR>
57.<BR>
58.&nbsp;&nbsp;&nbsp;&nbsp;public boolean action(Event InEvent,
Object&nbsp;&nbsp;SomeObject) {<BR>
59.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if
(InEvent.target == AButton)<BR>
60.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{
<BR>
61.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//
Set the label equal to the selected list item.<BR>
62.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;AButton.setLabel(AList.getSelectedItem());
<BR>
63.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return
true;<BR>
64.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
else<BR>
65.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return
false;<BR>
66.&nbsp;&nbsp;&nbsp;&nbsp;}<BR>
67. }</TT>
</BLOCKQUOTE>
<HR>
<P>
<A HREF="f6-9.gif" ><B>Figure 6.9 : </B><I>Screen shot of the EventExample applet.</I></A>
<H3><A NAME="WhatsGoingOnintheEventExampleAppl">What's Going On
in the <TT><FONT SIZE=4>EventExample</FONT></TT><FONT SIZE=4>
Applet</FONT></A></H3>
<P>
If you try out this applet, you'll notice that it is a little
frustrating. No matter what you choose, it always selects back
to <TT>Blue</TT>. This is accomplished
by the <TT>handleEvent()</TT> method
declared starting in line 34. The method only checks the <TT>Event</TT>
to see if its <TT>id</TT> is equal
to that of having something selected in a list, <TT>LIST_SELECT</TT>.
If it is, line 52 sets the selected member of the list to item
number 0. Eventually, Java comes back and repaints the applet
window and the list component itself.
<P>
Then line 55 tells the default method to handle the event. This
way, it still does tasks like window resizing in stand-alone windows
and customizes your own <TT>handleEvent()</TT>
without having to cover all the rudimentary and mundane tasks.
<P>
Line 58 is the place where the <TT>action</TT>
method is declared. It is used for a couple of reasons. One, it
is an aspect of Java you should know about. Two, it is much easier
to use the <TT>action</TT> method
instead of the <TT>handleEvent()</TT>
method to handle events from components like choices. In any case,
line 59 checks to see if the <TT>Event</TT>
is generated by the <TT>AChoice</TT>
choice, and if it is, sets the button label to the currently selected
item in the list. As is customary, the <TT>action</TT>
method returns a <TT>true</TT> if
it handled the event; it returns <TT>false</TT>
if it did not.<P>
<CENTER><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=80%>
<TR VALIGN=TOP><TD><B>Note:</B></TD></TR>
<TR VALIGN=TOP><TD>
<BLOCKQUOTE>
The Shift, Alt, Ctrl, and Meta keys are all supported by Java. For example, if you are testing for the Alt+PgDn combination being pressed, the code is the following:</BLOCKQUOTE>
<BLOCKQUOTE>
<TT>public boolean handleEvent(Event InEvent)<BR>
{<BR>
&nbsp;&nbsp;&nbsp;&nbsp;if (InEvent.id == Event.KEY_PRESS)<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (InEvent.key == Event.PGDN)&nbsp;&nbsp;&amp;&amp;
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (Event.ALT_MASK &amp; InEvent.modifiers) != 0)
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// Do what you wanna do. 
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<BR>
}</TT>
</BLOCKQUOTE>
<BLOCKQUOTE>
The only thing new here is dealing with the most interior <TT>if</TT> statement. This statement checks to see if the key pressed is PgDn and also to see if the modifier contained in the event signifies the Alt key.
</BLOCKQUOTE>

</TD></TR>
</TABLE></CENTER>
<P>
<H3><A NAME="TheStepsinCreatingEventBasedAWTPr">The Steps in Creating
Event-Based AWT Programs</A></H3>
<P>
The following are basically all the general guidelines to follow
when creating an AWT-based program that is event driven.
<P>
First, figure out what you want. If you want buttons, declare
them. In your applet (preferably in your <TT>init()</TT>
method, although it doesn't have to be there), set up the panel
layout. Add your components, and as covered in <A HREF="ch8.htm" >Chapter 8</A>,
manage the applet layout.
<P>
Second, design your method to handle the events you receive. In
the <TT>handleEvent</TT> (along with
the <TT>action</TT> method if you
want), test the <TT>Event.id</TT>
to see what kind of event you are given. For each <TT>id</TT>
type you want to recognize, check it against the constants such
as <TT>MOUSE_DOWN</TT> and react accordingly.
For instance, if the <TT>Event.id</TT>
equals <TT>KEY_PRESSED</TT>, then
you want to check your instance of <TT>Event.key</TT>
to see which key has been pressed.
<P>
Third, set the <TT>handleEvent()</TT>
method to return the proper value: <TT>true</TT>
if you have handled the event properly or <TT>super.handleEvent(Event)</TT>
if you want the applet's immediate parent to handle the event.
<H2><A NAME="HandlingEventsintheOrderEntrySyste"><FONT SIZE=5 COLOR=#FF0000>Handling
Events in the Order Entry System</FONT></A></H2>
<P>
You need to set up the framework to handle events in the Order
Entry System. To do this, write the <TT>handleEvent()</TT>
method and add it to the applet that you have developed so far.
Also, add some of the variables that are local to the applet.
<P>
First, you handle the events of the Clear button being pressed,
as follows:
<BLOCKQUOTE>
<TT>if (InEvent.target == clearButton)<BR>
&nbsp;&nbsp;&nbsp;&nbsp;{<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// Reset all of the variables
and settings . <BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;.<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;.<BR>
&nbsp;&nbsp;&nbsp;&nbsp;}</TT>
</BLOCKQUOTE>
<P>
Do the same for each of the other buttons, and put the respective
code for their functions in as you go along. You aren't able to
code the Send button's function completely until later in the
book.
<P>
You don't need to do anything to make the Repeat Customer? checkbox
active. When the data is collected and sent under the Send button's
actions, the checkbox value is checked and sent. You can also
accomplish this with the radio button group, checking each checkbox
when the send-off time comes.
<P>
You may have noticed in the figures of the Order Entry System
in <A HREF="ch5.htm" >Chapter 5</A>, &quot;Writing a Java Applet:
The Order Entry System,&quot; that the applet keeps a running
total and subtotal of the items currently selected to be ordered.
You need to declare some internal variables: one for each subtotal
being calculated and one for the grand total. Here are the declarations
for these variables:
<BLOCKQUOTE>
<TT>private double SubTotalOne = 0,0;<BR>
private double Total = 0.0;</TT>
</BLOCKQUOTE>
<P>
For now, you are going to enter only one product and the size
for that product. Each product has a base price and a price modifier
depending on the size. The subtotal is calculated by multiplying
the base price, the number of items desired, and the price modifier
together. The total is calculated as the sum of all the subtotals.
Here are the local variables used for computing price:
<BLOCKQUOTE>
<TT>private double multiplierSmall = 0.5;
<BR>
private double multiplierMedium = 1.0;<BR>
private double multiplierLarge = 1.5;</TT>
</BLOCKQUOTE>
<P>
For now, hardwire the prices and the different products into the
applet. Later in <A HREF="ch14.htm" >Chapter 14</A>, &quot;Extending
Java,&quot; you learn techniques to read files from your server
and then use the data in your applets. The following constants
are the base prices for each product:
<BLOCKQUOTE>
<TT>static double ProdOneBaseValue = 1.0;
<BR>
static double ProdTwoBaseValue = 1.33;<BR>
static double ProdThreeBaseValue = 1.75;<BR>
static double ProdFourBaseValue = 8.75;<BR>
static double ProdFiveBaseValue = 0.33;</TT>
</BLOCKQUOTE>
<P>
You have to override the <TT>action</TT>
method in the applet to handle most of the events coming from
the components. You don't need to deal with the radio buttons
and the checkboxes in the applet because their immediate values
don't have an effect on the function of the component. The <TT>action</TT>
method handles the events generated by the choice box. Here is
the code section from inside the <TT>action</TT>
method that modifies the subtotal and total variables when a new
product choice is made:
<BLOCKQUOTE>
<TT>public boolean action (Event InEvent,
Object SomeObject) {<BR>
.<BR>
.<BR>
if (InEvent.target == SizeChoice) {<BR>
&nbsp;&nbsp;&nbsp;&nbsp;updateValues();<BR>
}<BR>
.<BR>
.</TT>
</BLOCKQUOTE>
<P>
The <TT>updateValues()</TT> function
is a <TT>void</TT> that is declared
locally to update all the totals. It is implemented later in the
book.
<P>
This is all that is taken care of in the <TT>action</TT>
method as opposed to the <TT>handleEvent()</TT>
method, which covers everything. You still have to update the
totals and the multipliers when the list selection (for example,
what the size chosen is) is made. To do this, add some code to
the <TT>handleEvent()</TT> method
to call the <TT>updateValues()</TT>
function when a new list selection is made. It is handled in the
same way as the list has been handled in the previous <TT>EventExample</TT>.
<P>
Finally, you need to <TT>updateValues()</TT>
when the slider is changed. The code to do this is placed in the
<TT>handleEvent()</TT> method. Here,
you are checking to see if the current event is one of either
line up or line down (for example, someone presses the end arrow).
<BLOCKQUOTE>
<TT>public boolean handleEvent(Event InEvent)
{<BR>
.<BR>
.<BR>
if (InEvent.id == Event.SCROLL_LINE_UP ||<BR>
&nbsp;&nbsp;&nbsp;&nbsp;InEvent.id == Event.SCROLL_LINE_DOWN)
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;{<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;updateValues();<BR>
}</TT>
</BLOCKQUOTE>
<P>
And that covers the events in everything that's been added so
far. Listing 6.8 is this chapter's final version of the Order
Entry System applet.
<HR>
<BLOCKQUOTE>
<B>Listing 6.8. The Order Entry System code listing.<BR>
</B>
</BLOCKQUOTE>
<BLOCKQUOTE>
<TT>import java.awt.*;<BR>
import java.applet.*;<BR>
public class OrderEntrySystem extends Applet {<BR>
&nbsp;&nbsp;&nbsp;&nbsp;// The subtotal and total variables.<BR>
&nbsp;&nbsp;&nbsp;&nbsp;private double SubTotalOne = 0.0;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;private double Total = 0.0;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;// The price multipliers for each different
product size.<BR>
&nbsp;&nbsp;&nbsp;&nbsp;private double multiplierSmall = 0.5;
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;private double multiplierMedium = 1.0;
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;private double multiplierLarge = 1.5;
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;// The local constant base prices.<BR>
&nbsp;&nbsp;&nbsp;&nbsp;static double ProdOneBaseValue = 1.0;
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;static double ProdTwoBaseValue = 1.33;
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;static double ProdThreeBaseValue = 1.75;
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;static double ProdFourBaseValue = 8.75;
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;static double ProfFiveBaseValue = 0.33;
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;// Declare all of the variables we'll
use.<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;private Button SubmitButton;
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;private Button ClearButton;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;private Button QuitButton;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;private Checkbox RepeatCustCheckBox;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;private Checkbox MailBox;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;private Checkbox EmailBox;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;private Checkbox PhoneBox;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;private List ProductList;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;private Choice SizeChoice;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;private Scrollbar OrderAmountSlider;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;// Initialize the Applet.<BR>
&nbsp;&nbsp;&nbsp;&nbsp;public void init()<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//
Add and create three buttons.<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
SubmitButton = new Button(&quot;Submit&quot;);<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;add(SubmitButton);
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ClearButton
= new Button(&quot;Clear&quot;);<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;add(ClearButton);
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;QuitButton
= new Button(&quot;Quit&quot;);<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;add(QuitButton);
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//
Add and create the repeat customer checkbox.<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;RepeatCustCheckBox
= new Checkbox(&quot;Repeat Customer?&quot;);<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;add(RepeatCustCheckBox);
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//
Declare the CheckboxGroup, and allocate space.<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;CheckboxGroup
ContactMethodGroup;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ContactMethodGroup
= new CheckboxGroup();<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//
Create some checkboxes to put in the group.<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;EmailBox
= new Checkbox(&quot;Email&quot;,ContactMethodGroup,true);<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; PhoneBox
= new Checkbox(&quot;Phone&quot;,ContactMethodGroup,false);<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; MailBox
= new Checkbox(&quot;US Mail&quot;,ContactMethodGroup,false);
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//
Add the checkboxes into the applet panel.<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;add(EmailBox);
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;add(PhoneBox);
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;add(MailBox);
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//
Create the list, 4 items visible, no multiple selections.<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ProductList
= new List(4, false);<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//
AddItems to the List.<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ProductList.addItem(&quot;Oscar&quot;);
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ProductList.addItem(&quot;Lionhead&quot;);
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ProductList.addItem(&quot;Jack
Dempsey&quot;);<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ProductList.addItem(&quot;Angelfish&quot;);
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//
Add the List to the Applet panel.<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;add(ProductList);
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//
Create the Choice box.<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;SizeChoice
= new Choice();<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//
AddItems to the List.<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;SizeChoice.addItem(&quot;Jumbo&quot;);
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;SizeChoice.addItem(&quot;Large&quot;);
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;SizeChoice.addItem(&quot;Medium&quot;);
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;SizeChoice.addItem(&quot;Small&quot;);
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//
Add the Choice to the Applet panel.<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;add(SizeChoice);
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//
Create a vertical slider, initial value of 0,<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//
minimum value of 0, maximum value of 144.<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; OrderAmountSlider
= new Scrollbar(Scrollbar.VERTICAL, 0, 0, 0, 100);<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//
Insert the slider to the Applet panel.<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;add(OrderAmountSlider);
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<BR>
&nbsp;&nbsp;&nbsp;&nbsp;public boolean handleEvent(Event InEvent)
{<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (InEvent.id
== Event.SCROLL_LINE_UP ||<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;InEvent.id
== Event.SCROLL_LINE_DOWN)&nbsp;&nbsp;{<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;updateValues();
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;} else<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (InEvent.target
== ClearButton) {<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
// Reset all of the variables and settings . <BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;} else<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (InEvent.target
== QuitButton)&nbsp;&nbsp;{<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// Quit the applet.
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;} else<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (InEvent.target
== SubmitButton) {<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// Submit
the order.<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return super.handleEvent(InEvent);
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;}<BR>
&nbsp;&nbsp;&nbsp;&nbsp;public boolean action (Event InEvent,
Object SomeObject) {<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (InEvent.target
== SizeChoice) {<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;updateValues();
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return true;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;} else return
false;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;}<BR>
&nbsp;&nbsp;&nbsp;&nbsp;private void updateValues() {<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// Empty for now.
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;}<BR>
}</TT>
</BLOCKQUOTE>
<HR>
<H2><A NAME="TheOrderEntrySystemSoFar"><FONT SIZE=5 COLOR=#FF0000>The
Order Entry System So Far</FONT></A></H2>
<P>
You've made great steps forward with the Order Entry System in
this chapter. You started with nothing, and now it has an initial
layout along with a framework for functionality. There is, however,
still a good amount wrong with the applet. First, the totals,
subtotals, and scrollbar values are not placed on the applet panel.
You fix this in the next chapter, where the AWT components that
deal with text input and output are covered. How to place text
on the applet to better organize it is also covered in the next
chapter. Finally, where's the text input? It is coming in the
next chapter, &quot;The Order Entry System: Entry Fields, Labels,
and Validation.&quot;

<HR WIDTH="100%"></P>

</P></CENTER>

<P>
<HR WIDTH="100%"></P>





</td>

<!-- end main content column -->

</tr>

<!-- end main content column -->


</tr>
</table>

</BODY>
</HTML>
