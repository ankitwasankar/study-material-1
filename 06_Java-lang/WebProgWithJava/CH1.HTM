<HTML>
<BODY BGCOLOR="white" TEXT="black" LINK="blue" ALINK="red" VLINK="green">
<BASEFONT SIZE="5">
<font face="Arial,Helvetica" size="-1" color="#006666"><A HREF="/reference/r_library.html"><B>All Categories</A> :</B>
<b><A HREF="/reference/r_java.html">Java</A></b></font><p>

   <META>
<H1><FONT COLOR=#FF0000>Chapter 1</FONT></H1>
<H1><B><FONT SIZE=5 COLOR=#FF0000>An Overview of Java</FONT></B>
</H1>
<P>
<HR WIDTH="100%"></P>
<P>
<H3 ALIGN=CENTER><FONT COLOR="#000000"><FONT SIZE=+2>CONTENTS<A NAME="CONTENTS"></A>
</FONT></FONT></H3>
<UL>
<LI><A HREF="#Introduction" >Introduction</A>
<LI><A HREF="#ABriefHistoryofJava" >A Brief History of Java</A>
<LI><A HREF="#Applets" >Applets</A>
<LI><A HREF="#JavasFeatures" >Java's Features</A>
<UL>
<LI><A HREF="#Simple" >Simple</A>
<LI><A HREF="#ObjectOriented" >Object-Oriented</A>
<LI><A HREF="#Robust" >Robust</A>
<LI><A HREF="#Interpreted" >Interpreted</A>
<LI><A HREF="#Secure" >Secure</A>
<LI><A HREF="#ArchitectureNeutral" >Architecture Neutral</A>
<LI><A HREF="#HighPerformance" >High Performance</A>
<LI><A HREF="#Dynamic" >Dynamic</A>
</UL>
<LI><A HREF="#TheFundamentalsoftheJavaLanguage" >The Fundamentals of the Java Language</A>
<LI><A HREF="#JavaasanObjectOrientedLanguage" >Java as an Object-Oriented Language</A>
<UL>
<LI><A HREF="#Classes" >Classes</A>
<LI><A HREF="#Hierarchy" >Hierarchy</A>
<LI><A HREF="#Variables" >Variables</A>
<LI><A HREF="#Methods" >Methods</A>
<LI><A HREF="#Inheritance" >Inheritance</A>
</UL>
<LI><A HREF="#BasicCodingElements" >Basic Coding Elements</A>
<UL>
<LI><A HREF="#Statements" >Statements</A>
<LI><A HREF="#Expressions" >Expressions</A>
<LI><A HREF="#Blocks" >Blocks</A>
<LI><A HREF="#Comments" >Comments</A>
<LI><A HREF="#DataTypes" >Data Types</A>
<LI><A HREF="#Operators" >Operators</A>
<LI><A HREF="#DeclaringVariables" >Declaring Variables</A>
</UL>
<LI><A HREF="#FlowofExecution" >Flow of Execution</A>
<UL>
<LI><A HREF="#Conditionals" >Conditionals</A>
<LI><A HREF="#Loops" >Loops</A>
<LI><A HREF="#Arrays" >Arrays</A>
</UL>
<LI><A HREF="#UsingClassesObjectsandInterfaces" >Using Classes, Objects, and Interfaces</A>
<UL>
<LI><A HREF="#CreatingClasses" >Creating Classes</A>
<LI><A HREF="#OverloadedMethods" >Overloaded Methods</A>
<LI><A HREF="#StaticMethodsandVariables" >Static Methods and Variables</A>
<LI><A HREF="#Constructors" >Constructors</A>
<LI><A HREF="#CreatingObjects" >Creating Objects</A>
<LI><A HREF="#References" >References</A>
<LI><A HREF="#ClassInheritance" >Class Inheritance</A>
<LI><A HREF="#nullthisandsuperVariables" >null, this, and super Variables</A>
<LI><A HREF="#Encapsulation" >Encapsulation</A>
<LI><A HREF="#AccessModifiers" >Access Modifiers</A>
<LI><A HREF="#CreatingInterfaces" >Creating Interfaces</A>
<LI><A HREF="#Packages" >Packages</A>
</UL>
<LI><A HREF="#HowJavaDiffersfromC" >How Java Differs from C++</A>
<LI><A HREF="#Summary" >Summary</A>
</UL>
<HR>
<H2><A NAME="Introduction"><FONT SIZE=5 COLOR=#FF0000>Introduction</FONT></A>
</H2>
<P>
If you have purchased this book, you are probably planning to
program with Java. There are many reasons for using Java as your
programming language. You might want to learn an object-oriented
programming language, and maybe you've heard that Java is simple
to use. You might have come across some interesting applets while
browsing the Internet (if you're using a Java-capable browser),
and perhaps you want to learn to write applets of your own and
add them to your Internet or intranet HTML documents. You might
want to learn how to add Internet functionality to your C applications
or how to use Java to write full-fledged applications that are
portable. This book helps you accomplish any and all of these
goals.
<P>
This overview introduces the many features of Java and explains
why they are important to you, the Java programmer. It is worthwhile
for you to understand the richness and usefulness of Java before
getting into the specifics of the Java environment and language.
<P>
Java is an interpreted language that is similar, superficially,
to C++, but different in many important ways. Java was originally
intended to be an extension of the C compiler but has been completely
rebuilt from the ground up to be a smaller, portable, purely object-oriented
language that eliminates many of the sources of bugs and complexities
common in C++.
<H2><A NAME="ABriefHistoryofJava"><FONT SIZE=5 COLOR=#FF0000>A
Brief History of Java</FONT></A></H2>
<P>
Java has been around since 1991, developed by a small team of
Sun Microsystems developers in a project originally called the
Green project. The intent of the project was to develop a platform-independent
software technology that would be used in the consumer electronics
industry. The language that the team created was originally called
Oak.
<P>
The first implementation of Oak was in a PDA-type device called
Star Seven (*7) that consisted of the Oak language, an operating
system called GreenOS, a user interface, and hardware. The name
*7 was derived from the telephone sequence that was used in the
team's office and that was dialed in order to answer any ringing
telephone from any other phone in the office. This PDA-type device
was intended to be sold to consumer electronics manufacturers
who would distribute the boxes under their company name. In 1993,
the team, then incorporated as FirstPerson, Inc., decided to gear
their technology toward a new implementation for which demand
was building in the entertainment industry-interactive television.
They proposed their technology to Time Warner as an operating
system for set-top boxes and video-on-demand technology that would
decode the data stream that Time Warner would be sending to television
sets around the country. In June of 1993, Time Warner selected
Silicon Graphics' technology over Sun's. A later deal fell apart
and FirstPerson decided to disband. Half of the members of the
original FirstPerson team continued to work with the Oak technology,
however, applying it to multimedia and network computing.
<P>
Around the time the FirstPerson project was floundering in consumer
electronics, a new craze was gaining momentum in America; the
craze was called &quot;Web surfing.&quot; The World Wide Web,
a name applied to the Internet's millions of linked HTML documents
was suddenly becoming popular for use by the masses. The reason
for this was the introduction of a graphical Web browser called
Mosaic, developed by NCSA. The browser simplified Web browsing
by combining text and graphics into a single interface to eliminate
the need for users to learn many confusing UNIX and DOS commands.
Navigating around the Web was much easier using Mosaic.
<P>
It has only been since 1994 that Oak technology has been applied
to the Web. In 1994, two Sun developers created the first version
of HotJava, then called WebRunner, which is a graphical browser
for the Web that exists today. The browser was coded entirely
in the Oak language, by this time called Java. Soon after, the
Java compiler was rewritten in the Java language from its original
C code, thus proving that Java could be used effectively as an
application language. Sun introduced Java in May 1995 at the SunWorld
95 convention.
<P>
Web surfing has become an enormously popular practice among millions
of computer users. Until Java, however, the content of information
on the Internet has been a bland series of HTML documents. Web
users are hungry for applications that are interactive, that users
can execute no matter what hardware or software platform they
are using, and that travel across heterogeneous networks and do
not spread viruses to their computers. Java can create such applications.
<H2><A NAME="Applets"><FONT SIZE=5 COLOR=#FF0000>Applets</FONT></A>
</H2>
<P>
On the Internet, Java programs are called applets. Applets are
Java applications that are embedded inside HTML files and can
be downloaded into a Java-capable browser with the click of a
mouse. Applets are different from regular Java applications. A
Java application simply has a single <TT>main()</TT>
method that indicates to the Java runtime system that it is an
application. A Java applet is an application that includes several
additional methods that the runtime system uses that tell it how
to handle the applet, such as what to do when a user clicks an
applet icon and how it looks on a page.
<P>
Before your browser's runtime Java interpreter downloads and executes
the applet's code, the Java interpreter verifies the code's integrity.
Java is more than a tool to help you write applets, however. It
is a new, powerful programming environment.
<H2><A NAME="JavasFeatures"><FONT SIZE=5 COLOR=#FF0000>Java's
Features</FONT></A></H2>
<P>
Sun describes Java as a &quot;simple, object-oriented, interpreted,
robust, secure, architecture-neutral, portable, high-performance,
multithreaded, and dynamic language.&quot;
<P>
Each of the features mentioned in this quotation from Sun's Web
page is an important part of the Java development environment
as well as a critical requirement for Web programming. The combination
of these features makes Java a powerful and useful programming
language that empowers you, the programmer, with the tools you
need to easily create powerful programs for today's distributed
environments.
<H3><A NAME="Simple">Simple</A></H3>
<P>
Java is simple to use for three main reasons: First, Java is familiar
to you if you know C. Second, Java eliminates components of C
that cause bugs and memory leaks and replaces their functionality
with more efficient solutions and automated tasks, so you have
a lot less debugging to worry about than you would using C or
C++. Third, Java provides a powerful set of pre-tested class libraries
that give you the ability to use their advanced features with
just a few additional lines of code.
<H3><A NAME="ObjectOriented">Object-Oriented</A></H3>
<P>
Java is an object-oriented programming language that uses software
objects called <I>classes</I> and is based upon reusable, extensible
code. This means that you can use Java's classes, which are sets
of variables and methods, as templates to create other classes
with added functionality without rewriting the code from the parent
classes or superclasses. If you plan your application's class
hierarchy well, your application will be small and easy to develop.
The hierarchy of classes is explained later in this chapter.
<H3><A NAME="Robust">Robust</A></H3>
<P>
Java is robust because the language removes the use of pointers
and the Java runtime system manages memory for you. The problems
with pointers in C and C++ was that pointers directly addressed
memory space. In a distributed environment like the Internet,
when code is downloaded to diverse systems, there is no way of
knowing for sure that memory space addressed by pointers is not
occupied by the system. Overwriting this memory space could crash
a system. Java also gives you automatic bounds checking for arrays,
so they cannot index address space not allocated to the array.
Automatic memory management is done using the Garbage Collector,
which is explained in detail in Chapter 4, &quot;Creating Your
Own Objects.&quot;
<H3><A NAME="Interpreted">Interpreted</A></H3>
<P>
Java is interpreted, so your development cycle is much faster.
As you learn later when the Java interpreter is discussed, you
need only to compile for a single, virtual machine and your code
can run on any hardware platform that has the Java interpreter
ported to it.
<H3><A NAME="Secure">Secure</A></H3>
<P>
Java is secure, so you can download Java programs from anywhere
with confidence that they will not damage your system. Java provides
extensive compile-time checking, followed by a second, multilayered
level of runtime checking. Java's security structure is described
in detail in <A HREF="ch19.htm" >Chapter 19</A>, &quot;Security
Issues.&quot;
<H3><A NAME="ArchitectureNeutral">Architecture Neutral</A></H3>
<P>
Java is architecture neutral, so your applications are portable
across multiple platforms. Java's applications are written and
compiled into bytecode for Java's virtual machine, which emulates
an actual hardware chip. Bytecode is converted to binary machine
code by the Java interpreter installed at the client, so applications
need not be written for individual platforms and then ported from
platform to platform. Java additionally ensures that your applications
are the same on every platform by strictly defining the sizes
of its basic data types and the behavior of its arithmetic operators.
Operator overloading, the process of modifying the behavior of
operators, is prohibited by Java.
<H3><A NAME="HighPerformance">High Performance</A></H3>
<P>
Java is &quot;high performance&quot; because its bytecode is efficient
and has multithreading built in for applications that need to
perform multiple concurrent activities. Although threads still
require the use of classes, Java balances the addition of thread
synchronization between the language and class levels. Java's
bytecode is efficient because it is compiled to an intermediate
level that is near enough to native machine code that performance
is not significantly sacrificed when the Java bytecode is run
by the interpreter.
<H3><A NAME="Dynamic">Dynamic</A></H3>
<P>
Java is dynamic, so your applications are adaptable to changing
environments because Java's architecture allows you to dynamically
load classes at runtime from anywhere on the network, which means
that you can add functionality to existing applications by simply
linking in new classes. For example, if your applet is being run
by a browser that doesn't have one of the classes included in
your applet's bytecode, the browser can download the appropriate
class from the server that is storing your applet, check the bytecode,
and execute it. This is assuming your browser has not been configured
with strict security. <A HREF="ch19.htm" >Chapter 19</A> covers
browser security.
<H2><A NAME="TheFundamentalsoftheJavaLanguage"><FONT SIZE=5 COLOR=#FF0000>The
Fundamentals of the Java Language</FONT></A></H2>
<P>
This chapter introduces you to the basic concepts and functions
of the Java programming language and gives you brief examples
to illustrate important points. The later, more advanced chapters
guide you through extensive samples of code, and so the examples
in this chapter are short. By the end of this chapter, you should
have a basic understanding of the Java language and be ready to
explore in detail Java's class libraries in <A HREF="ch3.htm" >Chapter 3</A>,
&quot;An Introduction to Java Classes.&quot;
<P>
Java programming will be fairly easy for you if you have had experience
with C++ because Java is designed to look and feel like C++. If
you are an experienced C programmer, you will have to let go of
some old habits to program Java, however, as you will discover
later in this chapter. Please do not be concerned if you have
little or no experience in programming-this book assumes no prior
knowledge of C++. You may need to read through the chapters more
slowly and carefully than an experienced programmer.
<H2><A NAME="JavaasanObjectOrientedLanguage"><FONT SIZE=5 COLOR=#FF0000>Java
as an Object-Oriented Language</FONT></A></H2>
<P>
Java's class structure is made up of the following major components:
classes, hierarchy, variables, methods, and inheritance.
<H3><A NAME="Classes">Classes</A></H3>
<P>
The key to understanding Java's object-oriented design is understanding
what classes are and what you can do with them. Classes are templates
that you use to create actual objects. The instructions contained
in a class are used to create one or more objects, which can be
called <I>instances</I> of classes in Java. When you create an
object from a class, you <I>instantiate</I> the object, which
means you create an instance of the class. The words <I>instances</I>
and <I>objects</I> are used interchangeably throughout the discussions
of classes in this book, depending on the context of the sentence
in which they're used.
<P>
In object-oriented programming, you can think of an object as
you would any real-world object, for example, a rectangle. The
actual rectangle would be an instance of the class <TT>Rectangle</TT>.
<P>
A very rudimentary declaration of a class is as follows:
<BLOCKQUOTE>
<TT>class&nbsp;&nbsp;classname {<BR>
//class instructions<BR>
}</TT>
</BLOCKQUOTE>
<P>
The instructions in a class are made of two basic components:
variables that hold data, and methods that manipulate the data.
<P>
Before you begin creating the classes in your application, you
must design the class structure. Java's class structure is organized
into a hierarchy.
<H3><A NAME="Hierarchy">Hierarchy</A></H3>
<P>
Classes are organized into a hierarchy to allow you to easily
reuse code. When you write a Java program, first determine which
objects you'll need to use in your code. Then determine what variables
and methods the object's class must store. When you know what
instructions your classes contain, plan your hierarchy.
<P>
Without planning your hierarchy first, you would begin creating
a class for each object individually and undoubtedly would find
that you are repeating instructions from class to class. In a
hierarchy, instructions common to groups of objects are separated
out in parent classes, or <I>superclasses</I>, and can be used
by all of their <I>subclasses</I>. Therefore, when you plan your
hierarchy, you would group objects by the instructions that they
have in common and organize them into a hierarchy.
<P>
Superclasses are used as templates to create subclasses with variables
and methods that make each subclass unique. Each superclass can
be a parent to one or many other subclasses. Unlike in C++, a
subclass can have only one superclass. Therefore, the Java class
hierarchy looks something like the one shown in Figure 1.1.
<P>
<A HREF="f1-1.gif" ><B>Figure 1.1:</B> <I>Java class hierarchy.</I></A>
<P>
If a superclass is not defined when a class is declared, the class
is automatically made a subclass of Java's <TT>Object</TT>
class. Every class in a Java program is a descendant of <TT>Object</TT>.
<TT>Object</TT> itself has no superclass.
<H3><A NAME="Variables">Variables</A></H3>
<P>
Classes store information that describe objects in <I>instance
variables</I>. When objects are created from a class, they contain
new instances of the class' variables. These instance variables
can have values that are different from one object to the next.
Values of instance variables are called <I>data</I>. When an instance
variable's data is changed, it affects only the individual object.
There is a way in Java to assign a variable to a class that, if
changed, is changed in all instances of the class. Such a variable
is called a <I>static variable</I>, which you learn about later
in this chapter in the section called &quot;Static Methods and
Variables.&quot;
<P>
The basic declaration statement of a variable is this:
<BLOCKQUOTE>
<TT><I>datatype</I>
<I>variablename</I>;</TT>
</BLOCKQUOTE>
<P>
Two variables that might be declared for a rectangle are <TT>length</TT>
and <TT>width</TT>. They could be
declared in one line because they have the same data type. (You
explore data types in Table 1.1 of this chapter.) Their declaration
statement might be this:
<BLOCKQUOTE>
<TT>int length, width;</TT>
</BLOCKQUOTE>
<P>
If you created an object from a class with only these two variables
declared, the object would simply hold this data. It would not
know to draw lines with these values to form a rectangle. Methods
must be declared to use the data in variables.
<H3><A NAME="Methods">Methods</A></H3>
<P>
Methods are functions that must be associated with individual
classes. In C and C++ and other procedural languages, functions
can be placed anywhere in the code. In Java, they must be stored
within classes. Instances of methods are created when instances
of classes are created. Unlike variables, methods are not duplicated
in objects-their code is stored only in the class.
<P>
When an object's method is invoked from its class, it uses the
data of variables in the object.
<P>
Every method returns a value if it is not declared as <TT>void</TT>.
To declare a method, you use the following statement:
<BLOCKQUOTE>
<TT>returntype <I>methodname</I> (<I>parameter
list</I>) {<BR>
&nbsp;&nbsp;&nbsp;&nbsp;//method code<BR>
}</TT>
</BLOCKQUOTE>
<P>
At this point in the chapter, you won't get into coding the method
that draws the rectangle. After you've learned the basic coding
elements of Java later in this chapter, exercises in coding methods
will be more useful.
<H3><A NAME="Inheritance">Inheritance</A></H3>
<P>
Variables and methods that are stored in classes in the class
hierarchy are inherited by subclasses, so you do not need to re-create
them. Objects created from a subclass will contain not only the
instances of the variables and methods of the subclass, but also
its superclass' variables and methods, as well as those of the
parent of its superclass, and so on. When a variable or method
is referenced in an object, it is retrieved in a specific order:
Java first searches for it in the current class, then, if it is
not found, it searches the parent class, and so on.
<P>
In summary, objects in your Java program are created from classes
that contain variables and methods to describe the object. Classes
are organized into a hierarchy in which classes inherit functionality
from parent classes, which allows for reusable code. These basic
concepts of the structure of Java's object-oriented programming
language will become clearer to you as you read through the rest
of the sections.
<H2><A NAME="BasicCodingElements"><FONT SIZE=5 COLOR=#FF0000>Basic
Coding Elements</FONT></A></H2>
<P>
Your Java code is used to create classes, objects, interfaces,
and packages. You'll learn how to create each of these in <A HREF="ch4.htm" >Chapter 4</A>.
This section outlines the elements of the code you need to use
to create them.
<P>
Your code is written in a series of statements, which can be organized
into blocks. These statements contain data and operators, which
are components of expressions. You can annotate your code using
comments, which makes the code more understandable.
<H3><A NAME="Statements">Statements</A></H3>
<P>
Any line of code before a semicolon is known as a <I>statement</I>
and is executed by the Java interpreter when it hits the semicolon;
after executing that statement, the interpreter moves to the next
statement. Each statement contains instructions for using data
and operators.
<H3><A NAME="Expressions">Expressions</A></H3>
<P>
An <I>expression</I> is a part of a statement that uses data and
operators to return a value.
<H3><A NAME="Blocks">Blocks</A></H3>
<P>
A <I>block</I> is a collection of statements enclosed in curly
braces. Any variables that you declare and that assign values
within a block are erased when the flow of execution leaves the
block. The block in which the variable's value exists is called
the <I>scope</I> of the variable.
<H3><A NAME="Comments">Comments</A></H3>
<P>
Comments are used to annotate the code so that a reader can understand
the purpose of certain lines and blocks of code. Comments are
ignored by the Java compiler. Multiline comments are preceded
by <TT>/*</TT> and are ended with
<TT>*/</TT>. Single line comments
are preceded by <TT>//</TT>. The double
slash &quot;comments out&quot; text only to the end of a line.
A comment would appear as follows:
<BLOCKQUOTE>
<TT>/*&nbsp;&nbsp;This declares the length
variable for the Rectangle class&nbsp;&nbsp;&nbsp;*/<BR>
int length;</TT>
</BLOCKQUOTE>
<P>
or
<BLOCKQUOTE>
<TT>int length;&nbsp;&nbsp;&nbsp;//Declares
the length variable for the Rectangle class</TT>
</BLOCKQUOTE>
<H3><A NAME="DataTypes">Data Types</A></H3>
<P>
To represent data values in your code you use <I>literals</I>.
Literals are described by types, named by identifiers, and stored
in variables, which were outlined earlier in the chapter and are
explored further in this section.
<P>
When you use literals in your code, they appear in their raw form
rather than as a result of an expression. Several types of literals
are commonly used: numbers, integers, floating points, characters,
Booleans, and strings.
<P>
Table 1.1 outlines Java's strict definitions of these data types.
<P>
<CENTER><B>Table 1.1. Rules for Java literals.</B></CENTER>
<CENTER>
<TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=80%>
<TR VALIGN=TOP><TD WIDTH=121><I>Literal Type</I></TD><TD WIDTH=118><I>Typename</I>
</TD><TD WIDTH=356><I>Rule</I></TD></TR>
<TR VALIGN=TOP><TD WIDTH=121>Number</TD><TD WIDTH=118><TT>Num</TT>
</TD><TD WIDTH=356>Can_ be integer, floating point, or character.
</TD></TR>
<TR VALIGN=TOP><TD WIDTH=121>Integer</TD><TD WIDTH=118>&nbsp;</TD><TD WIDTH=356>Can be decimal, hexadecimal, or octal.
</TD></TR>
<TR VALIGN=TOP><TD WIDTH=121>&nbsp;</TD><TD WIDTH=118><TT>Byte</TT> 
</TD><TD WIDTH=356>8-bit integers between -128 and 127.</TD></TR>
<TR VALIGN=TOP><TD WIDTH=121>&nbsp;</TD><TD WIDTH=118><TT>Short</TT> 
</TD><TD WIDTH=356>16-bit integers between -32768 and 32767.</TD>
</TR>
<TR VALIGN=TOP><TD WIDTH=121>&nbsp;</TD><TD WIDTH=118><TT>Int</TT> 
</TD><TD WIDTH=356>32-bit integers between -2147483648 and 2147483647.
</TD></TR>
<TR VALIGN=TOP><TD WIDTH=121>&nbsp;</TD><TD WIDTH=118><TT>Long</TT> 
</TD><TD WIDTH=356>64-bit integers between -9223372036854775808 and 9223372036854775807 or have L or l appended to them.
</TD></TR>
<TR VALIGN=TOP><TD WIDTH=121>&nbsp;</TD><TD WIDTH=118><TT>Hex</TT>
</TD><TD WIDTH=356>Preceded by 0x or 0X.</TD></TR>
<TR VALIGN=TOP><TD WIDTH=121>&nbsp;</TD><TD WIDTH=118><TT>Oct</TT>
</TD><TD WIDTH=356>Preceded by 0.</TD></TR>
<TR VALIGN=TOP><TD WIDTH=121>Floating point</TD><TD WIDTH=118>&nbsp;</TD><TD WIDTH=356>Any number with a decimal point. Can be made exponential by appending an e or E, followed by the exponent.
</TD></TR>
<TR VALIGN=TOP><TD WIDTH=121>&nbsp;</TD><TD WIDTH=118><TT>Float</TT> 
</TD><TD WIDTH=356>32-bit.</TD></TR>
<TR VALIGN=TOP><TD WIDTH=121>&nbsp;</TD><TD WIDTH=118><TT>Double</TT> 
</TD><TD WIDTH=356>64-bit.</TD></TR>
<TR VALIGN=TOP><TD WIDTH=121>Character</TD><TD WIDTH=118><TT>Char</TT> 
</TD><TD WIDTH=356>16-bit integers represented by a single character and enclosed in single quotes.
</TD></TR>
<TR VALIGN=TOP><TD WIDTH=121>&nbsp;</TD><TD WIDTH=118>&nbsp;</TD><TD WIDTH=356>In Java, the Unicode character map is used. The following special characters must be represented by escape sequences:
</TD></TR>
<TR VALIGN=TOP><TD WIDTH=121>&nbsp;</TD><TD WIDTH=118>&nbsp;</TD><TD WIDTH=356>backspace &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<TT>\b</TT>
</TD></TR>
<TR VALIGN=TOP><TD WIDTH=121>&nbsp;</TD><TD WIDTH=118>&nbsp;</TD><TD WIDTH=356>backslash&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<TT>\\</TT>
</TD></TR>
<TR VALIGN=TOP><TD WIDTH=121>&nbsp;</TD><TD WIDTH=118>&nbsp;</TD><TD WIDTH=356>carriage return&nbsp;&nbsp;<TT>\r</TT>
</TD></TR>
<TR VALIGN=TOP><TD WIDTH=121>&nbsp;</TD><TD WIDTH=118>&nbsp;</TD><TD WIDTH=356>double quote&nbsp;&nbsp;&nbsp;<TT>\&quot;</TT>
</TD></TR>
<TR VALIGN=TOP><TD WIDTH=121>&nbsp;</TD><TD WIDTH=118>&nbsp;</TD><TD WIDTH=356>formfeed&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<TT>\f</TT>
</TD></TR>
<TR VALIGN=TOP><TD WIDTH=121>&nbsp;</TD><TD WIDTH=118>&nbsp;</TD><TD WIDTH=356>hex number&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<TT>\xhh</TT>
</TD></TR>
<TR VALIGN=TOP><TD WIDTH=121>&nbsp;</TD><TD WIDTH=118>&nbsp;</TD><TD WIDTH=356>horizontal tab&nbsp;&nbsp;&nbsp;<TT>\t</TT>
</TD></TR>
<TR VALIGN=TOP><TD WIDTH=121>&nbsp;</TD><TD WIDTH=118>&nbsp;</TD><TD WIDTH=356>newline&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<TT>\n</TT>
</TD></TR>
<TR VALIGN=TOP><TD WIDTH=121>&nbsp;</TD><TD WIDTH=118>&nbsp;</TD><TD WIDTH=356>octal number&nbsp;&nbsp;&nbsp;&nbsp;<TT>\000</TT>
</TD></TR>
<TR VALIGN=TOP><TD WIDTH=121>&nbsp;</TD><TD WIDTH=118>&nbsp;</TD><TD WIDTH=356>question mark&nbsp;&nbsp;<TT>\q</TT>
</TD></TR>
<TR VALIGN=TOP><TD WIDTH=121>&nbsp;</TD><TD WIDTH=118>&nbsp;</TD><TD WIDTH=356>single quote&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<TT>\'</TT>
</TD></TR>
<TR VALIGN=TOP><TD WIDTH=121>&nbsp;</TD><TD WIDTH=118>&nbsp;</TD><TD WIDTH=356>vertical tab&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<TT>\v</TT>
</TD></TR>
<TR VALIGN=TOP><TD WIDTH=121>Boolean</TD><TD WIDTH=118><TT>Boolean</TT>
</TD><TD WIDTH=356>Can only be <TT>true</TT> or <TT>false</TT>. Are not represented by 0 or 1.
</TD></TR>
<TR VALIGN=TOP><TD WIDTH=121>String</TD><TD WIDTH=118><TT>String</TT>
</TD><TD WIDTH=356>Zero or more characters enclosed in double quotes.
</TD></TR>
</TABLE></CENTER>
<P>
<P>
Literals are described by <I>identifiers</I>. Identifiers are
sequences of letters and digits, and can also be used to describe
variables, methods, and classes. Identifiers can consist of any
letter from <I>a</I> to <I>z</I>, underscore, dollar sign, digits
from 0 to 9 (except as the first character); identifiers are case-sensitive.
<P>
Java has several reserved <I>keywords</I> that are its own identifiers,
which cannot be used as identifiers in any way other than that
defined by Java, as listed in Table 1.2. Though these words are
reserved, not all are used in the most recent release. <BR>
<P>
<CENTER><B>Table 1.2. Reserved keywords.</B></CENTER>
<CENTER>
<TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=80%>
<TR VALIGN=TOP><TD WIDTH=148><TT>Abstract</TT>
</TD><TD WIDTH=148>else</TD><TD WIDTH=148>int
</TD><TD WIDTH=148>short</TD></TR>
<TR VALIGN=TOP><TD WIDTH=148><TT>boolean</TT>
</TD><TD WIDTH=148>extends</TD><TD WIDTH=148>interface
</TD><TD WIDTH=148>static</TD></TR>
<TR VALIGN=TOP><TD WIDTH=148><TT>break</TT></TD>
<TD WIDTH=148>final</TD><TD WIDTH=148>long
</TD><TD WIDTH=148>super</TD></TR>
<TR VALIGN=TOP><TD WIDTH=148><TT>byte</TT></TD>
<TD WIDTH=148>finally</TD><TD WIDTH=148>native
</TD><TD WIDTH=148>switch</TD></TR>
<TR VALIGN=TOP><TD WIDTH=148><TT>case</TT></TD>
<TD WIDTH=148>float</TD><TD WIDTH=148>new
</TD><TD WIDTH=148>synchronized</TD>
</TR>
<TR VALIGN=TOP><TD WIDTH=148><TT>cast</TT></TD>
<TD WIDTH=148>for</TD><TD WIDTH=148>null
</TD><TD WIDTH=148>this</TD></TR>
<TR VALIGN=TOP><TD WIDTH=148><TT>catch</TT></TD>
<TD WIDTH=148>future</TD><TD WIDTH=148>operator
</TD><TD WIDTH=148>throw</TD></TR>
<TR VALIGN=TOP><TD WIDTH=148><TT>char</TT></TD>
<TD WIDTH=148>generic</TD><TD WIDTH=148>outer
</TD><TD WIDTH=148>throws</TD></TR>
<TR VALIGN=TOP><TD WIDTH=148><TT>class</TT></TD>
<TD WIDTH=148>goto</TD><TD WIDTH=148>package
</TD><TD WIDTH=148>transient</TD>
</TR>
<TR VALIGN=TOP><TD WIDTH=148><TT>const</TT></TD>
<TD WIDTH=148>if</TD><TD WIDTH=148>private
</TD><TD WIDTH=148>try</TD></TR>
<TR VALIGN=TOP><TD WIDTH=148><TT>continue</TT>
</TD><TD WIDTH=148>implements</TD>
<TD WIDTH=148>protected</TD><TD WIDTH=148>var
</TD></TR>
<TR VALIGN=TOP><TD WIDTH=148><TT>default</TT>
</TD><TD WIDTH=148>import</TD><TD WIDTH=148>public
</TD><TD WIDTH=148>void</TD></TR>
<TR VALIGN=TOP><TD WIDTH=148><TT>do</TT></TD>
<TD WIDTH=148>inner</TD><TD WIDTH=148>rest
</TD><TD WIDTH=148>volatile</TD></TR>
<TR VALIGN=TOP><TD WIDTH=148><TT>double</TT>
</TD><TD WIDTH=148>instanceof</TD>
<TD WIDTH=148>return</TD><TD WIDTH=148>while
</TD></TR>
</TABLE></CENTER>
<P>
<H3><A NAME="Operators">Operators</A></H3>
<P>
Operators are used to compare values. Java has strict definitions
of <I>operators</I>. It doesn't allow for overloading, which is
a C developer's common practice of changing the behavior of operators.
<P>
Java provides two types of operators: binary and unary. Binary
operators are used to compare two values. Unary operators use
a single value, for example:
<BLOCKQUOTE>
<TT>a &gt;= b<BR>
a++</TT>
</BLOCKQUOTE>
<P>
The first example uses a binary operator, <TT>&gt;=</TT>,
which compares variables <TT>a</TT>
and <TT>b</TT>. The second is a unary
operator, <TT>++</TT>, which increments
the value of <TT>a</TT> by one.
<P>
All of Java's binary and unary operators can be found in Table
1.3. They are organized according to the precedence with which
they are performed.<BR>
<P>
<CENTER><B>Table 1.3. Binary and unary operators.</B></CENTER>
<CENTER>
<TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=80%>
<TR VALIGN=TOP><TD WIDTH=319><I>Operator</I></TD><TD WIDTH=318><I>Description</I>
</TD></TR>
<TR VALIGN=TOP><TD WIDTH=319><TT>.</TT>, <TT>()</TT>, <TT>[]</TT> 
</TD><TD WIDTH=318>Precedence overriding decimal, parentheses, brackets
</TD></TR>
<TR VALIGN=TOP><TD WIDTH=319><TT>!</TT>, <TT>~</TT>, <TT>++</TT>, <TT>--</TT>
</TD><TD WIDTH=318>Boolean negation, bitwise complement, increment, decrement
</TD></TR>
<TR VALIGN=TOP><TD WIDTH=319><TT>*</TT>, <TT>/</TT>, <TT>%</TT>
</TD><TD WIDTH=318>Multiplication, division, modulus</TD></TR>
<TR VALIGN=TOP><TD WIDTH=319><TT>+</TT>, <TT>-</TT>
</TD><TD WIDTH=318>Addition, subtraction or unary negation</TD>
</TR>
<TR VALIGN=TOP><TD WIDTH=319><TT>&lt;&lt;</TT>, <TT>&gt;&gt;</TT>, <TT>&gt;&gt;&gt;</TT>
</TD><TD WIDTH=318>Left shift, right shift, zero-fill right shift
</TD></TR>
<TR VALIGN=TOP><TD WIDTH=319><TT>&lt;</TT>, <TT>&lt;=</TT>, <TT>&gt;</TT>, <TT>&gt;=</TT>
</TD><TD WIDTH=318>Less than, less than or equal to, greater than, greater than or equal to
</TD></TR>
<TR VALIGN=TOP><TD WIDTH=319><TT>==</TT>, <TT>!=</TT>
</TD><TD WIDTH=318>Equals, is not equal to</TD></TR>
<TR VALIGN=TOP><TD WIDTH=319><TT>&amp;</TT></TD>
<TD WIDTH=318>Bitwise or Boolean <TT>AND</TT>
</TD></TR>
<TR VALIGN=TOP><TD WIDTH=319><TT>^</TT></TD>
<TD WIDTH=318>Bitwise or Boolean <TT>XOR</TT>
</TD></TR>
<TR VALIGN=TOP><TD WIDTH=319><TT>|</TT></TD>
<TD WIDTH=318>Bitwise or Boolean <TT>OR</TT>
</TD></TR>
<TR VALIGN=TOP><TD WIDTH=319><TT>&amp;&amp;</TT>
</TD><TD WIDTH=318>Evaluation <TT>AND</TT>, Logical <TT>AND</TT>
</TD></TR>
<TR VALIGN=TOP><TD WIDTH=319><TT>||</TT></TD>
<TD WIDTH=318>Evaluation <TT>OR</TT>, Logical <TT>OR</TT>
</TD></TR>
<TR VALIGN=TOP><TD WIDTH=319><TT>?:</TT></TD>
<TD WIDTH=318>If&#133;then&#133;else</TD></TR>
<TR VALIGN=TOP><TD WIDTH=319><TT>=</TT>, <TT>+=</TT>, <TT>-=</TT>, <TT>*=</TT>, <TT>/=</TT>, <TT>%=</TT>, <TT>&amp;=</TT>, <TT>^=</TT>, <TT>|=</TT>, <TT>&lt;&lt;=</TT>, <TT>&gt;&gt;=</TT>
</TD><TD WIDTH=318>Assignment operators</TD></TR>
<TR VALIGN=TOP><TD WIDTH=319><TT>,</TT></TD>
<TD WIDTH=318>Comma</TD></TR>
</TABLE></CENTER>
<P>
<H3><A NAME="DeclaringVariables">Declaring Variables</A></H3>
<P>
There are four types of statements to use for variables: declarations,
assignments, initializers, and casts.
<P>
You must always declare variables before you can use them in your
Java program. Variable <I>declarations</I> assign data types to
variables. A declaration statement in Java consists of a data
type followed by an identifier. Any of the data types listed in
the previous table can be used to declare variables, for example:
<BLOCKQUOTE>
<TT>Boolean IsReady;<BR>
float miles;<BR>
int x, y, z;<BR>
short pages;</TT>
</BLOCKQUOTE>
<P>
<I>Assignments</I> are statements that assign values to variables.
These, like declarations, are required before variables can be
used. They are called by setting an identifier equal to a value.
This value, of course, must be compatible with the data type assigned
to the variable identifier. Initializers are assignment statements
that are combined with the declaration statement, for example:
<BLOCKQUOTE>
<TT>Boolean IsReady = false<BR>
float miles = 3.62<BR>
short pages = 240</TT>
</BLOCKQUOTE>
<P>
If you want certain variable values to remain constant in your
code, you can use the <TT>final</TT>
keyword, which ensures that the variable cannot be changed by
the code. Its form is this:
<BLOCKQUOTE>
<TT>final int pages = 500</TT>
</BLOCKQUOTE>
<P>
<I>Casts</I> are statements you use if you need to place a value
of one type into a variable of another type. In C++, automatic
coercion allows you to do this without declaring that you were
aware of this change. In Java, you must explicitly call such an
instruction with a cast statement. Cast statements are generally
called as follows:
<BLOCKQUOTE>
<TT><I>datatype identifier</FONT></I>
= (<I>datatype</I>) <I>identifier</I></TT>
</BLOCKQUOTE>
<P>
Java allows casts only between compatible data types.
<P>
In this section, you have learned about the data and operators
that are used in expressions that are parts of statements. You
now understand that statements are organized with blocks and annotated
with comments. You have also examined some basic statements that
deal with variable declarations. These are the fundamental elements
of Java coding.
<H2><A NAME="FlowofExecution"><FONT SIZE=5 COLOR=#FF0000>Flow
of Execution</FONT></A></H2>
<P>
Now that you understand the basic structure and elements of the
Java language, you'll see how statements flow through a Java program
in this section. By default, the Java interpreter executes statements
in sequential order. This section introduces you to some more
complex types of statements that alter this flow of execution.
<H3><A NAME="Conditionals">Conditionals</A></H3>
<P>
<TT>if</TT>, <TT>if...else</TT>,
<TT>?:</TT>, and <TT>switch</TT>
are four conditional statements that are used often in code. They
evaluate an expression and, based on the value of the expression,
they control which statements are executed.
<P>
The <TT>if</TT> statements consist
of <TT>if</TT> followed by a test
expression. If the test expression returns a <TT>true</TT>
value, the statement or block of statements after the expression
is executed. They are structured as follows:
<BLOCKQUOTE>
<TT>if (<I>test expression</I>) <I>statement</I>;</TT>
</BLOCKQUOTE>
<P>
<TT>if...else</TT> statements are
similar to <TT>if</TT> statements,
but include a <TT>false</TT> statement
that is executed if the test expression returns a <TT>false</TT>
value. They are structured as follows:
<BLOCKQUOTE>
<TT>if (<I>test expression</I>) <I>true-statement</I>;
<BR>
else <I>false-statement</I>;</TT>
</BLOCKQUOTE>
<P>
The <TT>?:</TT> is a ternary operator
that allows you to assign one of two values based on the evaluation
of an expression as <TT>true</TT>
or as <TT>false</TT>. Its form is
as follows:
<BLOCKQUOTE>
<TT>(<I>test expression</I>) ? <I>true-value</I>
: <I>false-value</I></TT>
</BLOCKQUOTE>
<P>
The <TT>switch</TT> statement evaluates
an expression's value and jumps to a statement identified by the
literal value of the expression. It saves coding time if there
are several values in your statement. Its form is as follows:
<BLOCKQUOTE>
<TT>switch (<I>expression</I>) {<BR>
&nbsp;&nbsp;&nbsp;&nbsp; case <I>value</I>: <I>statements<BR>
</I>&nbsp;&nbsp;&nbsp;&nbsp; case <I>value</I>: <I>statements
<BR>
</I>&nbsp;&nbsp;&nbsp;&nbsp; default: <I>statements<BR>
</I>}</TT>
</BLOCKQUOTE>
<H3><A NAME="Loops">Loops</A></H3>
<P>
Loops provide you with the ability to repeat certain statements
until a condition is met. Java provides three types of loop statements:
<TT>while</TT>, <TT>do...while</TT>,
and <TT>for</TT>. Three other statements
commonly used with loops are <TT>break</TT>,
<TT>continue</TT>, and <TT>labels</TT>,
but these can be used with other types of Java statements (such
as conditionals) as necessary.
<P>
The <TT>while</TT> loop evaluates
a condition to see if it is <TT>true</TT>,
and then executes statements and checks the condition again. If
the condition is still <TT>true</TT>,
<TT>while</TT> executes the statements
and checks again. This process continues until the condition is
evaluated as <TT>false</TT>. The form
is this:
<BLOCKQUOTE>
<TT>while (<I>expression</I>) <I>true-statements</I></TT>
</BLOCKQUOTE>
<P>
The <TT>do...while</TT> loop is similar
to <TT>while</TT>, but <TT>do...while</TT></TT>
executes statements before the condition is evaluated. When you
use <TT>do...while</TT>, loop statements
are always executed at least once. The form is this:
<BLOCKQUOTE>
<TT>do <I>statements</I> while (<I>expression</I>)</TT>
</BLOCKQUOTE>
<P>
The <TT>for</TT> loop allows you to
test a range of values in your expression. Its form is generally
this:
<BLOCKQUOTE>
<TT>for (<I>initializer</I>; <I>expression</I>;
<I>increment</I>)<BR>
<I>statements</I></TT>
</BLOCKQUOTE>
<P>
The <TT>break</TT> statement is used
to exit loop and conditional statements before meeting a test
condition. The <TT>continue</TT> statement
directs execution back to the beginning of a loop without completing
all of the loop statements. A <TT>label</TT>
is used to identify a statement so execution can be directed to
it with a <TT>break</TT> or <TT>continue</TT>
statement. A colon (<TT>:</TT>) must
be appended to a label name.
<P>
An example of a label is as follows:
<BLOCKQUOTE>
<TT><I>variable declarations</FONT></I>;
<BR>
Label:<BR>
&nbsp;&nbsp;&nbsp;&nbsp; while (<I>test expression</I>) {<BR>
<I>statement</I>;<BR>
if(<I>test expression</I>)&nbsp;&nbsp;{<BR>
continue Label;<BR>
}<BR>
<I>statement</I>;<BR>
&nbsp;&nbsp;&nbsp;&nbsp; }</TT>
</BLOCKQUOTE>
<H3><A NAME="Arrays">Arrays</A></H3>
<P>
<I>Arrays</I> create slots that allow you to store a list of variables.
Arrays are allocated using the <TT>new</TT>
operator to create the array and assigning it to a variable with
<TT>=</TT>. Arrays are declared as
follows:
<BLOCKQUOTE>
<TT><I>datatype</FONT></I>
<I>variable</I>[] = new <I>datatype</I>[<I>number-of-slots</I>];</TT>
</BLOCKQUOTE>
<P>
The first half of the statement declares the variable that holds
the array. Your array declarations should end in square brackets.
The second half creates the array and assigns it to the variable.
<P>
The <TT>new</TT> modifier automatically
initializes your array to <TT>false</TT>
for Boolean arrays, <TT>0</TT> for
numeric arrays, <TT>\0</TT> for character
arrays, and <TT>null</TT> for all
other types of arrays. You can choose to initialize the array
on the same line as the declaration, as shown here:
<BLOCKQUOTE>
<TT><I>datatype</FONT></I>
[] = {<I>element1, element2, element3, etc</I>.}</TT>
</BLOCKQUOTE>
<H2><A NAME="UsingClassesObjectsandInterfaces"><FONT SIZE=5 COLOR=#FF0000>Using
Classes, Objects, and Interfaces</FONT></A></H2>
<P>
Every Java application is essentially a class that contains the
<TT>main()</TT> method. This section
discusses briefly how to create and use classes, objects, and
interfaces in Java applications. You'll learn about many additional
elements of the Java programming language that are important to
know when using classes and objects.
<H3><A NAME="CreatingClasses">Creating Classes</A></H3>
<P>
The first step in creating an object in your application is to
create its class. The following form is used to define a class:
<BLOCKQUOTE>
<TT>class <I>classname</I> [extends <I>classname</I>]
[implements <I>interface</I>] {<BR>
&nbsp;&nbsp;&nbsp;&nbsp; [<I>variable declaration</I>;]<BR>
&nbsp;&nbsp;&nbsp;&nbsp; [<I>method declaration</I>;]<BR>
}</TT>
</BLOCKQUOTE>
<P>
In this form, the <TT><I>classname</I></TT>
is the name of the new class; <TT>extends<I>
classname</I></TT> is where the parent class of a subclass
would be named, after the word <TT>extends</TT>.
The <TT>implements <I>interface</I></TT>
defines an interface used by the class (interfaces are covered
later in the chapter). If you do not want the compiler to allow
your class to be subclassed, you can precede your class statement
with the word <TT>final</TT>. If you
wish to create a class that must be subclassed, you would precede
the class with the word <TT>abstract</TT>.
<P>
You explored variable declaration in detail in the first section.
Keep in mind that variables must be initialized before being used
in methods. Now you'll learn how methods are declared. Methods
generally use the following form:
<BLOCKQUOTE>
<TT>[<I>Modifiers</I>] <I>return-type method-name
</I>(<I>parameter-list</I>) {<BR>
&nbsp;&nbsp;&nbsp;&nbsp; [<I>statements</I>;]<BR>
}</TT>
</BLOCKQUOTE>
<P>
The return type specifies the type of data or class that is returned
when the method is run. The <TT>void</TT>
return type is used when no value is returned. When naming the
method, you must follow the same rules for naming classes and
variables described earlier in the chapter. You must always enclose
the parameter list in parentheses even if the parentheses are
empty. The parameter list contains the types and variable names
of all variables that you want to pass to the method. The statements
are the code of your method.
<H3><A NAME="OverloadedMethods">Overloaded Methods</A></H3>
<P>
You use overloaded methods in your code when you need to call
a method with different sets of parameter lists. Methods that
allow flexibility in the parameters they use can be called from
different parts of your program with different variables. Java's
API classes, discussed in <A HREF="ch3.htm" >Chapter 3</A>, use
overloaded methods. To allow a different type of parameter information
to be passed to your method, repeat the method in your code with
the alternate parameter list included, as follows:
<BLOCKQUOTE>
<TT><I>returnvalue</FONT></I>
<I>methodname</I> (<I>parameter list 1</I>)<BR>
<I>returnvalue methodname</I> (<I>parameter list 2</I>)</TT>
</BLOCKQUOTE>
<P>
When the method is called and parameters are passed to it, Java
determines which version of the method has a parameter list that
most closely matches the parameters passed and executes it.
<H3><A NAME="StaticMethodsandVariables">Static Methods and Variables</A>
</H3>
<P>
Static methods and variables are similar to the methods and variables
already discussed, but they are a part of the class and do not
require you to create an object to use them. Static variables
are common to all instances created from the class they are stored
in. When the value of a static variable in a class is changed,
it is likewise changed for all instances of the class.
<P>
You might want to use static methods to provide utilities for
the rest of your application. Statics can also be used with initializers
to create constant data that is used by all instances of the class.
All static statements-whether they are variables, methods, or
initializers-are preceded by the word <TT>static</TT>.
<H3><A NAME="Constructors">Constructors</A></H3>
<P>
Constructors are methods that you use when you create objects.
They take the function of initializers a step further. They have
the same name as the class and return no value. A default constructor
is automatically created by the Java compiler if you don't specify
one in your code. It is called when an object is created without
parameters. Constructors, like methods, can be overloaded.
<H3><A NAME="CreatingObjects">Creating Objects</A></H3>
<P>
After you have a class that has variables and methods stored,
you can create objects from it. You can think of an object as
an area of memory that is allocated for an object's instance variables.
To create the object and automatically allocate memory for it,
always use the operator <TT>new</TT>.
This <TT>new</TT> operator creates
the object of the type specified and calls the constructor that
is appropriate for the parameters passed in the parameter list.
A reference is then made by Java to the new object. The form of
an object creation is generally as follows:
<BLOCKQUOTE>
<TT><I>classname</FONT></I>
<I>reference-variable</I>;<BR>
<I>reference-variable</I> = new <I>classname</I> (<I>parameter-list</I>)</TT>
</BLOCKQUOTE>
<P>
The first line declares a variable that holds the reference to
the object (references are explained in the next section). The
second line creates a new object and assigns the variable to it.
If parameters are passed, the appropriate constructor is called.
If no parameters are passed, the object's default constructor
is called.
<H3><A NAME="References">References</A></H3>
<P>
References, which are created when objects are created, can be
used to access variables and methods in other objects. References
are used by other methods from other objects in the following
form:
<BLOCKQUOTE>
<TT><I>reference-variable.instance-variable
<BR>
reference-variable.instance-method</I></TT>
</BLOCKQUOTE>
<P>
Variables and methods stored in other objects are called by using
the reference variable followed by a dot and the name of the foreign
variable or method.
<P>
You use the reference value in comparisons. The operators used
in references are <TT>==</TT>, <TT>!=</TT>,
and <TT>instanceof</TT>. The <TT>==</TT>
and <TT>!=</TT> operators can be used
to tell whether two references refer to the same object or whether
a reference does not refer to any object (such a case would return
a <TT>null</TT> value). The <TT>instanceof</TT>
operator is used to determine whether an object was created from
a certain class or one of its subclasses. If a statement comparing
an object to a class using <TT>instanceof</TT>
returns <TT>true</TT>, that object
is in fact an instance of the specified class.
<P>
If you are a C programmer, note that pointers are replaced by
references in Java. This is explained in greater detail later
in the book.
<H3><A NAME="ClassInheritance">Class Inheritance</A></H3>
<P>
When a subclass is defined, it must indicate the superclass it
is being created from. This is done with the <TT>extends</TT>
modifier. The form of a subclass declaration is this:
<BLOCKQUOTE>
<TT>class <I>subclassname</I> extends <I>superclassname</I>
{<BR>
&nbsp;&nbsp;&nbsp;&nbsp; //new instructions<BR>
}</TT>
</BLOCKQUOTE>
<P>
If a subclass uses a method from a superclass but adds functionality
to it, it <I>overrides</I> the method. In Java, you do not need
to duplicate the code in the other class. Just refer to the original
method in the superclass with <TT>super</TT>.
<H3><A NAME="nullthisandsuperVariables"><TT><FONT SIZE=4>null</FONT></TT><FONT SIZE=4>,
</FONT><TT><FONT SIZE=4>this</FONT></TT><FONT SIZE=4>,
and </FONT><TT><FONT SIZE=4>super</FONT></TT><FONT SIZE=4>
Variables</FONT></A></H3>
<P>
Every class has the following three special variables: <TT>null</TT>,
<TT>this</TT>, and <TT>super</TT>.
<P>
The<TT> null</TT> variable has a reference
that points to nothing. You may use this reference to assign no
value to a variable's identifier. <TT>null</TT>
variables are empty containers that represent the absence of an
object. To create an empty container, the following form is used:
<BLOCKQUOTE>
<TT><I>datatype variablename</FONT></I>
= null;</TT>
</BLOCKQUOTE>
<P>
The <TT>this</TT> variable has a reference
to the actual object. A class can refer to itself using <TT>this</TT>.
To refer to itself, a class uses the following form:
<BLOCKQUOTE>
<TT><I>methodname</FONT></I>(this);</TT>
</BLOCKQUOTE>
<P>
The <TT>super</TT> variable has a
reference to the superclass type of the class. You might wish
to reference the superclass type when creating objects. Just precede
your variables with the word <TT>super</TT>:
<BLOCKQUOTE>
<TT>super (x,y)</TT>
</BLOCKQUOTE>
<H3><A NAME="Encapsulation">Encapsulation</A></H3>
<P>
Encapsulation is used to hide methods and variables in your classes
from being accessed from foreign methods. To encapsulate variables
and methods in your classes, precede their declarations with the
keyword <TT>private</TT>. Private
variables and methods can be seen only within a class. Subclasses
or external methods cannot see them.
<H3><A NAME="AccessModifiers">Access Modifiers</A></H3>
<P>
The <TT>private</TT> modifier is one
of three types of access modifiers that control the way foreign
methods see your variables, methods, and classes. The others are
<TT>public</TT> and <TT>protected</TT>.
<P>
Any foreign methods are able to access variables and methods preceded
by the word <TT>public</TT>. There
can be only one public class per source file. This class must
have the same name as the source file. Applets, which are explained
in detail in a later chapter, must contain at least one public
class that is a subclass of the <TT>Java.Applet</TT>
package.
<P>
Protected variables and methods can be used only within a class
or its subclasses. Foreign methods cannot access protected variables
and methods.
<H3><A NAME="CreatingInterfaces">Creating Interfaces</A></H3>
<P>
Interfaces in Java are unlike interfaces in any other language.
They provide a second form of inheritance. Because Java does not
allow you to inherit from more than one superclass, Java lets
you implement interfaces, which provides you with the functionality
that inheritance from multiple superclasses would. Using interfaces,
your object can use methods and variables from classes that are
outside of its class hierarchy.
<P>
Interfaces are structured as entirely abstract classes with variables
that are static and final and contain methods without code to
implement them. Interfaces can inherit from an unlimited number
of other interfaces. They are structured the same way in which
classes are structured, except with the keyword <TT>interface</TT>
instead of <TT>class</TT>:
<BLOCKQUOTE>
<TT>interface <I>interfacename</I> [extends
<I>interfacename</I>] {<BR>
&nbsp;&nbsp;&nbsp;&nbsp; [<I>variable declaration</I>;]<BR>
&nbsp;&nbsp;&nbsp;&nbsp; [<I>method declaration</I>;]<BR>
}</TT>
</BLOCKQUOTE>
<P>
Interfaces are implemented by classes and can extend other interfaces.
Classes that implement interfaces include the code for the methods
of interfaces. These classes can implement more than one interface.
<P>
Interfaces can be used to conjoin several unrelated classes and
have them respond to the same methods. For example, using interfaces,
several shape classes such as <TT>rectangle</TT>,
<TT>triangle</TT>, and <TT>circle</TT>
can respond to a method called <TT>MoveLeft()</TT>,
which would repaint the shape a certain distance to the left of
the original location. In such a case, <TT>MoveLeft()</TT>
would be declared in the interface, but its code would be stored
in the class that implements the interface.
<H3><A NAME="Packages">Packages</A></H3>
<P>
Java provides you with several libraries of classes which are
called <I>packages</I>. You can use any of the classes in these
packages by importing them into your application. Additionally,
you may wish to package related classes you create so they can
be reused in other applications. Packages are presented in detail
in <A HREF="ch3.htm" >Chapter 3</A>.
<H2><A NAME="HowJavaDiffersfromC"><FONT SIZE=5 COLOR=#FF0000>How
Java Differs from C++</FONT></A></H2>
<P>
Now that you have a basic understanding of creating and working
with classes, objects, and interfaces, you should be ready for
<A HREF="ch2.htm" >Chapter 2</A>, &quot;Getting Started,&quot;
that introduces you to the Java development environment. Before
proceeding to <A HREF="ch2.htm" >Chapter 2</A>, read through this
section; it explains the differences between Java and C++. It
is important that you understand what Java has changed and the
reasons for these changes.
<P>
Java functionality differs from that of C and C++ in many ways.
As I discussed earlier in this chapter, these changes are intended
to create an object-oriented language that eliminates many of
the opportunities for bugs and memory leaks that are common in
C and C++. If you have experience in C or C++ programming, some
of Java's changes may take some getting used to. The following
list touches on the most important of these changes:
<UL>
<LI>Java is an interpreted language, not a compiled language as
is C++. This means that compiling is done by an interpreter before
execution.
<LI>Java uses classes or interfaces to build composite data types
instead of structures and unions, as in C++. This ensures portability.
<LI>There are no <TT>#defines</TT>
in Java because the development team felt that using <TT>#defines</TT>
advocates coding that is hard to read.
<LI>Command-line arguments are different in Java. They are arrays
of strings that contain the arguments. Through a mechanism known
as <I>varargs</I>, C++ allows you to provide a variable number
of arguments to a function. This mechanism is not supported by
the Java language.
<LI>Java has no header files. Instead, Java uses interfaces that
show only the methods and final, or constant, variables instead
of the entire structure.
<LI>Pointers, one of the primary features that introduce bugs
and memory leaks into programs, are removed in Java. By getting
rid of structures and encapsulating arrays through references,
Java has attempted to get rid of the original reasoning behind
pointers. Java does not allow you to construct a reference to
anonymous memory, so it produces robust, efficient code much less
prone to bugs, memory leaks, and corruption.
<LI>Java has replaced multiple inheritance by interfaces to avoid
problems with fragile superclasses.
<LI>To ensure a purely object-oriented structure, there are no
individual functions in Java. Functions must be encapsulated in
a class.
<LI>While Java retains <TT>goto</TT>
as a reserved word, it is not implemented or supported by the
Java language.
<LI>Java has strict definition of operators. It doesn't allow
for operator overloading.
<LI>Automatic coercion, which is a common cause of inaccuracy
in C++, would allow you to place an incompatible variable into
another without declaring that you were aware of this change.
In Java, in order to store a variable of one type in a variable
of another type, you must explicitly call it with a cast statement.
<LI>Java programs crash reliably and obviously, whereas crashes
in C and C++ programs are not as apparent.
<LI>Java implements a new function called automatic garbage collection.
The Java runtime system keeps track of all references to an object
until the object is no longer needed. When there are no more references
to an object, it makes it available for garbage collection.
<LI>Java also implements automatic memory management and thread
controls. Although threads still require the use of classes, Java
balances the addition of thread synchronization between the language
and class levels. For example, garbage collection is run as a
background process (or low-priority thread). It remains quiet
until there is either a sufficient pause in the execution of foreground
threads for it to run, or the system explicitly requires the use
of memory which is taken up by unreferenced classes.
<LI>The Java language provides a <TT>finally</TT>
statement for use with Java exceptions. The <TT>finally</TT>
statement delimits a block of code used to release system resources
and perform various other cleanup operations after the <TT>try</TT>
statement.
<LI>Java strings are first-class objects. They are a class provided
in the <TT>java.lang</TT> package.
This provides consistency and predictability in string functions.
</UL>
<H2><A NAME="Summary"><FONT SIZE=5 COLOR=#FF0000>Summary</FONT></A>
</H2>
<P>
This concludes the introduction to the Java language. As you read
through the rest of this book, you may need to refer to some sections
in this chapter to be sure you understand the basic elements of
Java that have been outlined for you. In the next chapter, you'll
learn about Java's packages in detail, as well as more complex
programming elements that these packages make easier.
<HR WIDTH="100%"></P>

<CENTER><P></P></CENTER>

<P>
<HR WIDTH="100%"></P>





</td>

<!-- end main content column -->

</tr>

<!-- end main content column -->


</tr>
</table>

</BODY>
</HTML>
