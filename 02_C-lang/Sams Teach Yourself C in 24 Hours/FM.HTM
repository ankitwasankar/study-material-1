
<HTML>
<HEAD>
<TITLE>Sams Teach Yourself C in 24 Hours: Introduction</TITLE>
</head>

<BODY BGCOLOR="#FFFFFF">


<!-- ISBN=0672310686 //-->
<!-- TITLE=Sams Teach Yourself C in 24 Hours//-->
<!-- AUTHOR=Tony Zhang//-->
<!-- PUBLISHER=Macmillan Computer Publishing//-->
<!-- IMPRINT=Sams//-->
<!-- CHAPTER=index //-->
<!-- PAGES=N/A //-->
<!-- UNASSIGNED1 //-->



<H2 align="center">Sams Teach Yourself C in 24 Hours</H2>

<P><CENTER><a href="index.html" tppabs="http://pbs.mcp.com/ebooks/0672310686/index.html">Table of Contents</a> | <a href="ch01.htm" tppabs="http://pbs.mcp.com/ebooks/0672310686/ch01/ch01.htm">Next</a></CENTER></P>

<H2 align="center"><a name="_ 1"></a>About this Book</H2>

<P>
<b>Teach Yourself C in 24 Hours</b><br>
<b>Tony Zhang</b><br>
201 West 103rd Street<BR>
Indianapolis, Indiana  46290</p>

<P>To Ellen, my lovely wife, for her love and inspiration.</p>

<P>&#151;Tony Zhang</p>

<P><b>Copyright &#169; 1997 by Sams Publishing</b></p>

<P><b>FIRST EDITION</b></p>

<P>All rights reserved. No part of this book shall be reproduced, stored in
a retrieval system, or transmitted by any means, electronic, mechanical,
photocopying, recording, or otherwise, without written permission from
the publisher. No patent liability is assumed with respect to the use of
the information contained herein. Although every precaution has been taken in
the preparation of this book, the publisher and author assume no responsibility
for errors or omissions. Neither is any liability assumed for damages resulting
from the use of the information contained herein. For information, address
Sams Publishing, 201 W. 103rd St., Indianapolis, IN 46290.</p>

<P>International Standard Book Number: 0-672-31068-6</p>

<P>Library of Congress Catalog Card Number: 97-65466</p>

<pre>2000    99    98    97                       4    3    2</pre>

<P>Interpretation of the printing code: the rightmost double-digit number is
the year of the book's printing; the rightmost single-digit, the number of the
book's printing. For example, a printing code of 97-1 shows that the first printing
of the book occurred in 1997.</p>

<P>Composed in AGaramond and MCPdigital by Macmillan Computer Publishing</p>

<P>Printed in the United States of America</p>

<P>All terms mentioned in this book that are known to be trademarks or
service marks have been appropriately capitalized. Sams Publishing cannot attest to
the accuracy of this information. Use of a term in this book should not be
regarded as affecting the validity of any trademark or service mark.</p>

<P><b>President, Sams Publishing </b><br>
Richard K. Swadley</p>

<P><b>Publishing Manager </b><br>
Greg Wiegand</p>

<P><b>Director of Editorial Services </b><br>
Cindy Morrow</p>

<P><b>Managing Editor </b><br>
Kitty Wilson Jarrett</p>

<P><b>Director of Marketing </b><br>
Kelli Spencer</p>

<P><b>Product Marketing Manager </b><br>
Wendy Gilbride</p>

<P><b>Assistant Marketing Managers </b><br>
Jen Pock, Rachel Wolfe</p>

<P><b>Acquisitions Editor</b><br>
Sharon Cox</p>

<P><b>Development Editor</b><br>
Fran Hatton</p>

<P><b>Software Development Specialist</b><br>
Brad Myers</p>

<P><b>Production Editors</b><br>
Mary Ann Abramson<BR>
Kitty Wilson Jarrett</p>

<P><b>Copy Editor</b><br>
Kimberly K. Hannel</p>

<P><b>Indexer</b><br>
Benjamin Slen</p>

<P><b>Technical Reviewer</b><br>
Karen Hay</p>

<P><b>Editorial Coordinators</b><br>
Mandi Rouell<BR>
Katie Wise</p>

<P><b>Technical Edit Coordinator</b><br>
Lynette Quinn</p>

<P><b>Editorial Assistants</b><br>
Carol Ackerman<BR>
Andi Richter<BR>
Rhonda Tinch-Mize</p>

<P><b>Cover Designer</b><br>
Tim Amrhein</p>

<P><b>Book Designer</b><br>
Gary Adair</p>

<P><b>Copy Writer</b><br>
David Reichwein</p>

<P><b>Production Team Supervisors</b><br>
Brad Chinn<BR>
Charlotte Clapp</p>

<P><b>Production</b><br>
Georgiana Briggs<BR>
Cyndi Davis<BR>
Sonja Hart<BR>
Mary Ellen Stephenson</p>

<H2><a name="_ 2">Acknowledgments</a></H2>

<P>Several years ago, my friend Joey Burton, who was then my supervisor at Kinley
Corporation, asked me why many computer programming books were written in a way that set a
deep learning curve and scared a lot of beginners away from learning programming
languages. Joey, thank you for the question that became the motivation for me to write a computer
book for beginners. Today I can proudly say that there is at least one book available for people
who want to learn C, but have no previous programming experience.</p>

<P>It's said that editors and authors are friends. I couldn't agree more. Sharon Cox and
Fran Hatton at Sams Publishing are my friends, and they have given me a lot of
encouragement and help in every phase of the book's creation.</p>

<P>I'd also like to thank my other friends, Mary Ann Abramson, Kitty Wilson Jarrett,
Kim Hannel, Karen Hay, and the other members of the editorial team at Sams. It would not
have been possible to finish the book without their hard work. The readers of this book are
very lucky to have this team, who is committed to producing high-quality books.</p>

<P>I greatly appreciate the love and support of my wife, Ellen, who has inspired me to look
at the high-tech world from a different perspective. It's always a great joy to discuss issues
of philosophy and literature with her. I wish I could sit in her class at Temple University.</p>

<P>My parents, whom I can never thank enough, gave me not only love and affection, but
also the opportunity to receive the best education I could ever have when I was in China.</p>


<P><b>Tell Us What You Think!</b></p>

<P>As a reader, you are the most important critic and commentator of our books. We value
your opinion and want to know what we're doing right, what we could do better, what areas
you'd like to see us publish in, and any other words of wisdom you're willing to pass our way.
You can help us make strong books that meet your needs and give you the computer guidance
you require.</p>

<P>Do you have access to CompuServe or the World Wide Web? Then check out
our CompuServe forum by typing GO SAMS at any prompt. If you prefer the World Wide
Web, check out our site at <a href="javascript:if(confirm('http://www.mcp.com/  \n\nThis file was not retrieved by Teleport Pro, because it is addressed on a domain or path outside the boundaries set for its Starting Address.  \n\nDo you want to open it from the server?'))window.location='http://www.mcp.com/'" tppabs="http://www.mcp.com/">http://www.mcp.com.</A></p>


<CENTER>
<TABLE BGCOLOR="#FFFF99">
<TR><TD><B>
NOTE
</B></TD></TR>
<TR><TD>
<BLOCKQUOTE>
If you have a technical question about this book, call the technical
support line at 317-581-4669.
</BLOCKQUOTE></TD></TR>
</TABLE></CENTER>

<P>As the team leader of the group that created this book, I welcome your comments. You
can fax, e-mail, or write me directly to let me know what you did or didn't like about this
book&#151;as well as what we can do to make our books stronger. Here's the information:</p>

<TABLE>

<TR><TD>
Fax:
</TD><TD>
317-581-4669
</TD></TR><TR><TD>
E-mail:
</TD><TD>
<a href="mailto:programming_mgr@sams.mcp.com">programming_mgr@sams.mcp.com</a>
</TD></TR><TR><TD>
Mail:
</TD><TD>
Greg Wiegand<BR>
Comments Department<BR>
Sams Publishing<BR>
201 W. 103rd Street<BR>
Indianapolis, IN  46290
</TD></TR>
</TABLE>

<H2><a name="_ 1">About the Author</a></H2>

<P>Tony Zhang is a software engineer with more than 15 years of computer
programming experience. Besides application-level programming experience in GUI, client/server,
database, and networking, Tony has enhanced his system-level programming skills for
X86 microprocessors and advanced digital signal/image processors through his involvement
on various projects. With a masters degree in physics, he has published dozens of research
papers on solid-state lasers, light-scattering calculations, and computer programming.</p>

<P>Tony and his wife, Ellen, are currently working on a book that combines two fields:
computer science and philosophy. Among his broad interests are painting and photography, the
two things that Tony enjoys most.</p>

<P>You can reach Tony through Sams Publishing, or by e-mailing him at
tt-zhang@ti.com.</p>


<H2><a name="_ 1">Introduction</a></H2>

<P>If one learns from others but does not think, one will be bewildered;<BR>
if one thinks but does not learn from others, one will be in peril.</p>

<P>&#151;Confucius</p>

<P>Written in a plain and clear format, this book is designed to help you learn the
C programming language as quickly as possible.</p>

<P>Unlike most other C books, this book offers many sample programs and exercises with <BR>
clear explanations and answers, which makes the concepts of the C language easier to be <BR>
understood. After reading this book, you'll be able to write C programs on your own.</p>

<P>Teach Yourself C in 24 Hours lays a solid groundwork for you in C programming. You
will profit from this when you start to apply C programs to real problems or move on to learn
other programming languages, such as Perl, C++, and Java.</p>


<P><B>Who Should Read This Book?</B></P>

<P>If this is your initial introduction to C, this book is written for you. In fact, in writing
this book I assume that my reader has no previous programming experience. Of course, it's
always a big plus if you have some knowledge of computers.</p>

<P><B>Special Features of This Book</B></P>

<P>This book contains the following special elements that make it simpler and clearer for
you to digest the rudimentary features and concepts of C as they are introduced:</p>

<UL>
<LI>          Syntax boxes
<LI>          Notes
<LI>          Warnings
<LI>          Tips
</UL>

<P>Syntax boxes explain some of the more complicated features of C, such as control
structures. Each syntax box consists of a formal definition of the feature followed by an
explanation. Here is an example of a syntax box:</p>

<P>The syntax for the malloc() function is</p>

<!-- CODE SNIP //-->
<PRE>#include &lt;stdlib.h&gt;
void *malloc(<I>size_t size</I>);
</PRE>
<!-- END CODE SNIP //-->

<P>Here, size specifies the number of bytes of storage to allocate. The header file,
stdlib.h, has to be included before the malloc() function can be called. Because the
malloc() function returns a void pointer, its type is automatically converted to the type of pointer on the
left side of an assignment operator.</p>

<P>(You'll learn more about the malloc() function later in the book.)</p>

<P>Notes are explanations of interesting properties of a particular C program feature. Let's
have a look at the following example of a note:</p>

<CENTER>
<TABLE BGCOLOR="#FFFF99">
<TR><TD><B>
NOTE
</B></TD></TR>
<TR><TD>
<BLOCKQUOTE>
In left-justified output, the value being displayed appears at the left end
of the value field. In right-justified output, the value being displayed
appears at the right end of the value field.
</BLOCKQUOTE></TD></TR>
</TABLE></CENTER><p></p>

<P>Warnings alert you to programming pitfalls you should avoid. Here is a typical warning:</p>

<CENTER>
<TABLE BGCOLOR="#FFFF99">
<TR><TD><B>
WARNING
</B></TD></TR>
<TR><TD>
<blockquote>Never use the reserved keywords in C, or names of the C library
functions as variable names in your program.</blockquote></TD></TR>
</TABLE></CENTER><p></p>
<P>Tips are hints on how to write better C programs. The following is an example of a tip:</p>

<CENTER>
<TABLE BGCOLOR="#FFFF99">
<TR><TD><B>
TIP
</B></TD></TR>
<TR><TD>
<blockquote>Using global variables increases your program's complexity, which in
turn makes your program hard to maintain or debug. Generally, you're
not advised to declare and use global variables unless they're
absolutely necessary.</blockquote></TD></TR>
</TABLE></CENTER><p></p>
<P><B>
Programming Examples
</B></P>

<P>As mentioned earlier, this book contains many useful programming examples with
explanations. These examples are meant to show you how to use different data types and
functions provided in C.</p>

<P><blockquote>
<b>TYPE<br>
OUTPUT<br>
ANALYSIS<br></b>
Each example has a listing of the C program; the output generated from that listing
will follow. The example also offers an analysis of how the program works. Special icons are
used to point out each part of the example: Type, Input/Output, and Analysis.
</blockquote><p></p>

<P>In the example shown in Listing IN.1, there are some special typographic conventions.
The input you enter is shown in bold monospace type, and the output generated by the
executable program of Listing IN.1 is shown in plain monospace type. The system prompt
(C:\app&gt; in the examples in this book) is also shown so that you know when a command is to be
entered on the command line.</p>

<h4>Listing IN.1 Read in a character entered by the user.</h4>
<!-- CODE //-->
<PRE>
1:  /* INL01.c: Read input by calling getc() */
2:  #include &lt;stdio.h&gt;
3:
4:  main()
5:  {
6:     int ch;
7:
8:     printf(&quot;Please type in one character:\n&quot;);
9:     ch = getc(stdin);
10:    printf(&quot;The character you just entered is: %c\n&quot;, ch);
11:    return 0;
12: }

</PRE>
<!-- END CODE //-->

<P>The following output is displayed after the executable file
INL01.exe is created and run. The user enters the
H character.</p>

<!-- CODE SNIP //-->
<PRE>C:\app&gt; INL01
Please type in one character:
H
The character you just entered is: H
C:\app&gt;
</PRE>
<!-- END CODE SNIP //-->

<P>In line 2 of Listing IN.1, the header file
stdio.h is included for both the getc() and
printf() functions used in the program. Lines 4_12 give the name
and body of the main() function.</p>

<P>In line 6, an integer variable ch is declared, which is assigned to the return value from
the getc() function later in line 9. Line 8 prints out a message that asks the user to enter
one character from the keyboard. The printf() function in line 8 uses the default standard
output stdout to display messages on the screen.</p>

<P>In line 9, the standard input stdin is passed to the
getc() function, which indicates that the file stream is from the keyboard. After the user types in a character, the
getc() function returns the numeric value (that is, an integer) of the character. Note that in line 9 the
numeric value is assigned to the integer variable
ch.</p>

<P>In line 10, the character entered is displayed on the screen with the help of
printf(). Note that the character format specifier
%c is used within the printf() function in line 10.</p>

<P><B>Q&amp;A and Workshop</B></P>

<P>Each hour (that is, each chapter) ends with a Q&amp;A section that contains answers to
common questions relating to the lesson of the chapter. Following the Q&amp;A section, there is
a Workshop that consists of quiz questions and programming exercises. The answers to
these quiz questions and sample solutions for the exercises are presented in Appendix E,
&quot;Answers to Quiz Questions and Exercises.&quot;</p>

<P>To help you solidify your understanding of each lesson, you are encouraged to try to
answer the quiz questions and finish the exercises provided in the workshop.</p>

<P><B>Conventions Used in This Book</B></P>

<P>This book uses special typefaces to help you differentiate between C code and regular
English, and to identify important concepts.</p>

<UL>
	<LI>Actual C code is typeset in a special monospace font. You'll see this font used in listings, Input/Ouput examples, and code snippets. In the explanation of C features, commands, filenames, statements, variables, and any text you see on the screen are also typeset in this font.

	<LI>Command input and anything that you are supposed to enter appear in a
bold monospace font. You'll see this mainly in the Input/Output sections of examples.
	<LI> Placeholders in syntax descriptions appear in an
italic monospace font. Replace the placeholder with the actual filename, parameter, or whatever element it represents.
	<LI> Italics highlight technical terms when they appear for the first time in the text and are sometimes used to emphasize important points.
</UL>

<P><B>What You'll Learn in 24 Hours</B></P>

<P>Teach Yourself C in 24 Hours consists of five parts. In Part I, &quot;The Basics of C,&quot; you'll learn the basics of the C language. Here is an overview of what you're going to learn:</p>

<blockquote>
<P>Hour 1, &quot;Getting Started,&quot; introduces you to the C language, the ANSI standard, and the basic software and hardware requirements for C programming.</p>

<P>Hour 2, &quot;Writing Your First C
Program,&quot; demonstrates the entire procedure
of writing, compiling, linking, and running a C program.</p>

<P>Hour 3, &quot;The Essentials of C
Programs,&quot; teaches you several important
concepts, such as constants, variables, expressions, and statements. The anatomy of a function is introduced in this hour as well.</p>

<P>Hour 4, &quot;Data Types and Names in C,&quot; lists all reserved C keywords. Four data types, char, int, float, and double, are introduced in detail. Also, the rules of naming a variable are explained.</p>

<P>Hour 5, &quot;Reading from and Writing to Standard
I/O,&quot; teaches you to receive input from the keyboard, and print output on the screen with the help of a set of C functions, such as getc(), getchar(), putc(),
putchar(), and printf().</p>
</blockquote>

<P>Part II, &quot;Operators and Control-Flow Statements,&quot; emphasizes operators and control-flow statements in C. The following is an overview of what you'll learn:</p>

<blockquote>
<P>Hour 6, &quot;Manipulating Data with Operators,&quot; teaches you how to use arithmetic assignment operators, the unary minus operator, increment/decrement
operators, relational operators, and the cast operator.</p>

<P>Hour 7, &quot;Doing the Same Thing Over and
Over,&quot; introduces looping (that is, iteration) with the
for, while, or do-while statements.</p>

<P>Hour 8, &quot;More Operators,&quot; tells you about more operators, such as logical
operators, bitwise operators, the sizeof operator, and the
?: operator, which are frequently used <BR>
in C.</p>

<P>Hour 9, &quot;Playing with Data Modifiers and Math
Functions,&quot; describes how to use data modifiers to enable or disable the sign bit, or change the size of a data type.
Also, several mathematical functions provided by C are introduced.</p></blockquote>

<blockquote>
<P>Hour 10, &quot;Getting Controls,&quot; introduces all the control-flow statements used in
C. They are the if, if-else, switch, break,
continue, and goto statements.</p>
</blockquote>

<P>Pointers and arrays are discussed in Part III of this book, &quot;Pointers and Arrays.&quot; The following is an overview of what you'll learn:</p>
<blockquote>
<P>Hour 11, &quot;An Introduction to Pointers,&quot; teaches you how to reference variables with pointers. Concepts such as left value and right value are also introduced.</p>

<P>Hour 12, &quot;Storing Similar Data
Items,&quot; explains how to declare and
initialize arrays. The relationship between the array and the pointer in C is also discussed.</p>

<P>Hour 13, &quot;Manipulating Strings,&quot; focuses on reading and writing strings. Several
C library functions, such as strlen(), strcpy(),
gets(), puts(), and scanf() are introduced to manipulate strings.</p>

<P>Hour 14, &quot;Scope and Storage Classes in
C,&quot; introduces block scope, function scope, program scope, and file scope. In addition, storage class specifiers or modifiers, such
as auto, static, register, extern, const, and
volatile are explained.</p>
</blockquote>

<P>Part IV of this book, &quot;Functions and Dynamic Memory Allocation,&quot; focuses on
functions and dynamic memory allocations in C. The following is an overview of what you'll learn:</p>
<blockquote>
<P>Hour 15, &quot;Functions in C,&quot; describes the function declaration and definition in
C. The function prototyping is explained, along with the function return type
specification.</p>

<P>Hour 16, &quot;Applying Pointers,&quot; teaches you how to perform pointer
arithmetic operations, access elements in arrays with pointers, and how to pass pointers
to functions.</p>

<P>Hour 17, &quot;Allocating Memory,&quot; explains the concept of allocating memory
dynamically. C functions, such as malloc(),
calloc(), realloc(), and free(), are introduced with regard to the dynamic memory allocation.</p>

<P>Hour 18, &quot;More Data Types and
Functions,&quot; introduces the enum data type and
the use of typedef. Function recursion and command-line arguments to the
main() function are also taught in this hour.</p>
</blockquote>

<P>Part V, &quot;Structure, Union, File I/O, and More,&quot; discusses structures, unions, and disk
file I/O in C. The following is an overview of what you'll learn:</p>

<P>Hour 19, &quot;Collecting Data Items of Different
Types,&quot; introduces the structure data type. You learn to access structure members, and pass structures to functions
with the help of pointers. Nested and forward-referencing structures are also discussed
in this hour.</p>

<P>Hour 20, &quot;Unions: Another Way to Collect Dissimilar
Data,&quot; describes the union data type, and the difference between
union and structure. The applications of unions are demonstrated in several examples.</p>

<blockquote>
<P>
Hour 21, &quot;Disk File Input and Output: Part
I,&quot; explains the concepts of the file and the stream in C. The basics of disk file input and output are introduced in
this first part. The following C functions, along with several examples are introduced
in this hour: fopen(), fclose(), fgetc(), fputc(),
fgets(), fputs(), fread(), fwrite(), and feof().</p>

<P>Hour 22, &quot;Disk File Input and Output: Part
II,&quot; is the second part of disk file I/O, in which
fseek(), ftell(), and rewind() are introduced to show how they can
help you get random access to disk files. In addition, the
fscanf(), fprintf(), and freopen() functions are taught and invoked in sample programs.</p>

<P>Hour 23, &quot;The C Preprocessor,&quot; describes the role played by the C
preprocessor. You can learn the preprocessor directives, such as
#define, #undef, #ifdef, #endif, #ifndef, #if,
#elis, and #else through the examples given in this hour.</p>

<P>Hour 24, &quot;What You Can Do Now,&quot; summarizes the important concepts
and features introduced in this book. In addition, programming style, modular
programming, and debugging are explained briefly. A list of recommended C books is
provided for further reading.</p>
</blockquote>

<P>
<BLOCKQUOTE>
<P><b>Publishing Notice</b></p>

<P>Due to paper and printing constraints, the appendixes for this book have
been provided on the CD-ROM rather than in the back of the book as you
would expect. When you see a reference to any of the appendixes as you're
reading&#151;including the appendix containing the answers for the book's quizzes and
exercises&#151;please consult the CD-ROM for them.
</BLOCKQUOTE><p></p>

<P>Now  you're ready to start the journey of learning the C language. Have fun reading this book!</p>

<P>Tony Zhang<BR>
Plano, Texas<BR>
May 1997</p>

<P><CENTER>
<a href="index.html" tppabs="http://pbs.mcp.com/ebooks/0672310686/index.html">Table of Contents</a> | <a href="ch01.htm" tppabs="http://pbs.mcp.com/ebooks/0672310686/ch01/ch01.htm">Next</a></CENTER></P>


</body>

</html>

